begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIsNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|NSQuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|UnresolvedPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
operator|.
name|Content
operator|.
name|CountsMap
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|INodeDirectorySnapshottable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|INodeDirectoryWithSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|INodeFileUnderConstructionWithSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|INodeFileWithSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|SnapshotAccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Directory INode class.  */
end_comment

begin_class
DECL|class|INodeDirectory
specifier|public
class|class
name|INodeDirectory
extends|extends
name|INode
block|{
comment|/** Cast INode to INodeDirectory. */
DECL|method|valueOf (INode inode, Object path )
specifier|public
specifier|static
name|INodeDirectory
name|valueOf
parameter_list|(
name|INode
name|inode
parameter_list|,
name|Object
name|path
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|PathIsNotDirectoryException
block|{
if|if
condition|(
name|inode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Directory does not exist: "
operator|+
name|DFSUtil
operator|.
name|path2String
argument_list|(
name|path
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|inode
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathIsNotDirectoryException
argument_list|(
name|DFSUtil
operator|.
name|path2String
argument_list|(
name|path
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|inode
operator|.
name|asDirectory
argument_list|()
return|;
block|}
DECL|field|DEFAULT_FILES_PER_DIRECTORY
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_FILES_PER_DIRECTORY
init|=
literal|5
decl_stmt|;
DECL|field|ROOT_NAME
specifier|final
specifier|static
name|byte
index|[]
name|ROOT_NAME
init|=
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|children
specifier|private
name|List
argument_list|<
name|INode
argument_list|>
name|children
init|=
literal|null
decl_stmt|;
comment|/** constructor */
DECL|method|INodeDirectory (long id, byte[] name, PermissionStatus permissions, long mtime)
specifier|public
name|INodeDirectory
parameter_list|(
name|long
name|id
parameter_list|,
name|byte
index|[]
name|name
parameter_list|,
name|PermissionStatus
name|permissions
parameter_list|,
name|long
name|mtime
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|permissions
argument_list|,
name|mtime
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy constructor    * @param other The INodeDirectory to be copied    * @param adopt Indicate whether or not need to set the parent field of child    *              INodes to the new node    */
DECL|method|INodeDirectory (INodeDirectory other, boolean adopt)
specifier|public
name|INodeDirectory
parameter_list|(
name|INodeDirectory
name|other
parameter_list|,
name|boolean
name|adopt
parameter_list|)
block|{
name|super
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|this
operator|.
name|children
operator|=
name|other
operator|.
name|children
expr_stmt|;
if|if
condition|(
name|adopt
operator|&&
name|this
operator|.
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|INode
name|child
range|:
name|children
control|)
block|{
name|child
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** @return true unconditionally. */
annotation|@
name|Override
DECL|method|isDirectory ()
specifier|public
specifier|final
name|boolean
name|isDirectory
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/** @return this object. */
annotation|@
name|Override
DECL|method|asDirectory ()
specifier|public
specifier|final
name|INodeDirectory
name|asDirectory
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/** Is this a snapshottable directory? */
DECL|method|isSnapshottable ()
specifier|public
name|boolean
name|isSnapshottable
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|searchChildren (byte[] name)
specifier|private
name|int
name|searchChildren
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
block|{
return|return
name|children
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|Collections
operator|.
name|binarySearch
argument_list|(
name|children
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|method|searchChildrenForExistingINode (final INode inode)
specifier|private
name|int
name|searchChildrenForExistingINode
parameter_list|(
specifier|final
name|INode
name|inode
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|children
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|name
init|=
name|inode
operator|.
name|getLocalNameBytes
argument_list|()
decl_stmt|;
specifier|final
name|int
name|i
init|=
name|searchChildren
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Child not found: name="
operator|+
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|name
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|i
return|;
block|}
comment|/**    * Remove the specified child from this directory.    *     * @param child the child inode to be removed    * @param latest See {@link INode#recordModification(Snapshot)}.    */
DECL|method|removeChild (INode child, Snapshot latest)
specifier|public
name|boolean
name|removeChild
parameter_list|(
name|INode
name|child
parameter_list|,
name|Snapshot
name|latest
parameter_list|)
throws|throws
name|NSQuotaExceededException
block|{
if|if
condition|(
name|isInLatestSnapshot
argument_list|(
name|latest
argument_list|)
condition|)
block|{
return|return
name|replaceSelf4INodeDirectoryWithSnapshot
argument_list|()
operator|.
name|removeChild
argument_list|(
name|child
argument_list|,
name|latest
argument_list|)
return|;
block|}
return|return
name|removeChild
argument_list|(
name|child
argument_list|)
return|;
block|}
comment|/**     * Remove the specified child from this directory.    * The basic remove method which actually calls children.remove(..).    *    * @param child the child inode to be removed    *     * @return true if the child is removed; false if the child is not found.    */
DECL|method|removeChild (final INode child)
specifier|protected
specifier|final
name|boolean
name|removeChild
parameter_list|(
specifier|final
name|INode
name|child
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|children
argument_list|)
expr_stmt|;
specifier|final
name|int
name|i
init|=
name|searchChildren
argument_list|(
name|child
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|INode
name|removed
init|=
name|children
operator|.
name|remove
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|removed
operator|==
name|child
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Remove the specified child and all its snapshot copies from this directory.    */
DECL|method|removeChildAndAllSnapshotCopies (INode child)
specifier|public
name|boolean
name|removeChildAndAllSnapshotCopies
parameter_list|(
name|INode
name|child
parameter_list|)
block|{
return|return
name|removeChild
argument_list|(
name|child
argument_list|)
return|;
block|}
comment|/**    * Replace itself with {@link INodeDirectoryWithQuota} or    * {@link INodeDirectoryWithSnapshot} depending on the latest snapshot.    */
DECL|method|replaceSelf4Quota (final Snapshot latest, final long nsQuota, final long dsQuota)
name|INodeDirectoryWithQuota
name|replaceSelf4Quota
parameter_list|(
specifier|final
name|Snapshot
name|latest
parameter_list|,
specifier|final
name|long
name|nsQuota
parameter_list|,
specifier|final
name|long
name|dsQuota
parameter_list|)
throws|throws
name|NSQuotaExceededException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
operator|(
name|this
operator|instanceof
name|INodeDirectoryWithQuota
operator|)
argument_list|,
literal|"this is already an INodeDirectoryWithQuota, this=%s"
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|latest
operator|==
literal|null
condition|)
block|{
specifier|final
name|INodeDirectoryWithQuota
name|q
init|=
operator|new
name|INodeDirectoryWithQuota
argument_list|(
name|this
argument_list|,
literal|true
argument_list|,
name|nsQuota
argument_list|,
name|dsQuota
argument_list|)
decl_stmt|;
name|replaceSelf
argument_list|(
name|q
argument_list|)
expr_stmt|;
return|return
name|q
return|;
block|}
else|else
block|{
specifier|final
name|INodeDirectoryWithSnapshot
name|s
init|=
operator|new
name|INodeDirectoryWithSnapshot
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|s
operator|.
name|setQuota
argument_list|(
name|nsQuota
argument_list|,
name|dsQuota
argument_list|)
expr_stmt|;
return|return
name|replaceSelf
argument_list|(
name|s
argument_list|)
operator|.
name|saveSelf2Snapshot
argument_list|(
name|latest
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
comment|/** Replace itself with an {@link INodeDirectorySnapshottable}. */
DECL|method|replaceSelf4INodeDirectorySnapshottable ( Snapshot latest)
specifier|public
name|INodeDirectorySnapshottable
name|replaceSelf4INodeDirectorySnapshottable
parameter_list|(
name|Snapshot
name|latest
parameter_list|)
throws|throws
name|NSQuotaExceededException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
operator|(
name|this
operator|instanceof
name|INodeDirectorySnapshottable
operator|)
argument_list|,
literal|"this is already an INodeDirectorySnapshottable, this=%s"
argument_list|,
name|this
argument_list|)
expr_stmt|;
specifier|final
name|INodeDirectorySnapshottable
name|s
init|=
operator|new
name|INodeDirectorySnapshottable
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|replaceSelf
argument_list|(
name|s
argument_list|)
operator|.
name|saveSelf2Snapshot
argument_list|(
name|latest
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
comment|/** Replace itself with an {@link INodeDirectoryWithSnapshot}. */
DECL|method|replaceSelf4INodeDirectoryWithSnapshot ()
specifier|public
name|INodeDirectoryWithSnapshot
name|replaceSelf4INodeDirectoryWithSnapshot
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
operator|(
name|this
operator|instanceof
name|INodeDirectoryWithSnapshot
operator|)
argument_list|,
literal|"this is already an INodeDirectoryWithSnapshot, this=%s"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|replaceSelf
argument_list|(
operator|new
name|INodeDirectoryWithSnapshot
argument_list|(
name|this
argument_list|)
argument_list|)
return|;
block|}
comment|/** Replace itself with {@link INodeDirectory}. */
DECL|method|replaceSelf4INodeDirectory ()
specifier|public
name|INodeDirectory
name|replaceSelf4INodeDirectory
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|getClass
argument_list|()
operator|!=
name|INodeDirectory
operator|.
name|class
argument_list|,
literal|"the class is already INodeDirectory, this=%s"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|replaceSelf
argument_list|(
operator|new
name|INodeDirectory
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
argument_list|)
return|;
block|}
comment|/** Replace itself with the given directory. */
DECL|method|replaceSelf (final N newDir)
specifier|private
specifier|final
parameter_list|<
name|N
extends|extends
name|INodeDirectory
parameter_list|>
name|N
name|replaceSelf
parameter_list|(
specifier|final
name|N
name|newDir
parameter_list|)
block|{
specifier|final
name|INodeDirectory
name|parent
init|=
name|getParent
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|parent
operator|!=
literal|null
argument_list|,
literal|"parent is null, this=%s"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|parent
operator|.
name|replaceChild
argument_list|(
name|this
argument_list|,
name|newDir
argument_list|)
expr_stmt|;
return|return
name|newDir
return|;
block|}
DECL|method|replaceChild (final INode oldChild, final INode newChild)
specifier|public
name|void
name|replaceChild
parameter_list|(
specifier|final
name|INode
name|oldChild
parameter_list|,
specifier|final
name|INode
name|newChild
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|children
argument_list|)
expr_stmt|;
specifier|final
name|int
name|i
init|=
name|searchChildrenForExistingINode
argument_list|(
name|newChild
argument_list|)
decl_stmt|;
specifier|final
name|INode
name|removed
init|=
name|children
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|newChild
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|removed
operator|==
name|oldChild
argument_list|)
expr_stmt|;
name|oldChild
operator|.
name|clearReferences
argument_list|()
expr_stmt|;
block|}
DECL|method|replaceChildFile (final INodeFile oldChild, final INodeFile newChild)
specifier|private
name|void
name|replaceChildFile
parameter_list|(
specifier|final
name|INodeFile
name|oldChild
parameter_list|,
specifier|final
name|INodeFile
name|newChild
parameter_list|)
block|{
name|replaceChild
argument_list|(
name|oldChild
argument_list|,
name|newChild
argument_list|)
expr_stmt|;
name|newChild
operator|.
name|updateBlockCollection
argument_list|()
expr_stmt|;
block|}
comment|/** Replace a child {@link INodeFile} with an {@link INodeFileWithSnapshot}. */
DECL|method|replaceChild4INodeFileWithSnapshot ( final INodeFile child)
name|INodeFileWithSnapshot
name|replaceChild4INodeFileWithSnapshot
parameter_list|(
specifier|final
name|INodeFile
name|child
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
operator|(
name|child
operator|instanceof
name|INodeFileWithSnapshot
operator|)
argument_list|,
literal|"Child file is already an INodeFileWithSnapshot, child="
operator|+
name|child
argument_list|)
expr_stmt|;
specifier|final
name|INodeFileWithSnapshot
name|newChild
init|=
operator|new
name|INodeFileWithSnapshot
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|replaceChildFile
argument_list|(
name|child
argument_list|,
name|newChild
argument_list|)
expr_stmt|;
return|return
name|newChild
return|;
block|}
comment|/** Replace a child {@link INodeFile} with an {@link INodeFileUnderConstructionWithSnapshot}. */
DECL|method|replaceChild4INodeFileUcWithSnapshot ( final INodeFileUnderConstruction child)
name|INodeFileUnderConstructionWithSnapshot
name|replaceChild4INodeFileUcWithSnapshot
parameter_list|(
specifier|final
name|INodeFileUnderConstruction
name|child
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
operator|(
name|child
operator|instanceof
name|INodeFileUnderConstructionWithSnapshot
operator|)
argument_list|,
literal|"Child file is already an INodeFileUnderConstructionWithSnapshot, child="
operator|+
name|child
argument_list|)
expr_stmt|;
specifier|final
name|INodeFileUnderConstructionWithSnapshot
name|newChild
init|=
operator|new
name|INodeFileUnderConstructionWithSnapshot
argument_list|(
name|child
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replaceChildFile
argument_list|(
name|child
argument_list|,
name|newChild
argument_list|)
expr_stmt|;
return|return
name|newChild
return|;
block|}
annotation|@
name|Override
DECL|method|recordModification (Snapshot latest)
specifier|public
name|INodeDirectory
name|recordModification
parameter_list|(
name|Snapshot
name|latest
parameter_list|)
throws|throws
name|NSQuotaExceededException
block|{
return|return
name|isInLatestSnapshot
argument_list|(
name|latest
argument_list|)
condition|?
name|replaceSelf4INodeDirectoryWithSnapshot
argument_list|()
operator|.
name|recordModification
argument_list|(
name|latest
argument_list|)
else|:
name|this
return|;
block|}
comment|/**    * Save the child to the latest snapshot.    *     * @return the child inode, which may be replaced.    */
DECL|method|saveChild2Snapshot (final INode child, final Snapshot latest, final INode snapshotCopy)
specifier|public
name|INode
name|saveChild2Snapshot
parameter_list|(
specifier|final
name|INode
name|child
parameter_list|,
specifier|final
name|Snapshot
name|latest
parameter_list|,
specifier|final
name|INode
name|snapshotCopy
parameter_list|)
throws|throws
name|NSQuotaExceededException
block|{
if|if
condition|(
name|latest
operator|==
literal|null
condition|)
block|{
return|return
name|child
return|;
block|}
return|return
name|replaceSelf4INodeDirectoryWithSnapshot
argument_list|()
operator|.
name|saveChild2Snapshot
argument_list|(
name|child
argument_list|,
name|latest
argument_list|,
name|snapshotCopy
argument_list|)
return|;
block|}
comment|/**    * @param name the name of the child    * @param snapshot    *          if it is not null, get the result from the given snapshot;    *          otherwise, get the result from the current directory.    * @return the child inode.    */
DECL|method|getChild (byte[] name, Snapshot snapshot)
specifier|public
name|INode
name|getChild
parameter_list|(
name|byte
index|[]
name|name
parameter_list|,
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|c
init|=
name|getChildrenList
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
specifier|final
name|int
name|i
init|=
name|ReadOnlyList
operator|.
name|Util
operator|.
name|binarySearch
argument_list|(
name|c
argument_list|,
name|name
argument_list|)
decl_stmt|;
return|return
name|i
operator|<
literal|0
condition|?
literal|null
else|:
name|c
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
comment|/** @return the {@link INodesInPath} containing only the last inode. */
DECL|method|getLastINodeInPath (String path, boolean resolveLink )
name|INodesInPath
name|getLastINodeInPath
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|resolveLink
parameter_list|)
throws|throws
name|UnresolvedLinkException
block|{
return|return
name|getExistingPathINodes
argument_list|(
name|getPathComponents
argument_list|(
name|path
argument_list|)
argument_list|,
literal|1
argument_list|,
name|resolveLink
argument_list|)
return|;
block|}
comment|/** @return the {@link INodesInPath} containing all inodes in the path. */
DECL|method|getINodesInPath (String path, boolean resolveLink )
name|INodesInPath
name|getINodesInPath
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|resolveLink
parameter_list|)
throws|throws
name|UnresolvedLinkException
block|{
specifier|final
name|byte
index|[]
index|[]
name|components
init|=
name|getPathComponents
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|getExistingPathINodes
argument_list|(
name|components
argument_list|,
name|components
operator|.
name|length
argument_list|,
name|resolveLink
argument_list|)
return|;
block|}
comment|/** @return the last inode in the path. */
DECL|method|getNode (String path, boolean resolveLink)
name|INode
name|getNode
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|resolveLink
parameter_list|)
throws|throws
name|UnresolvedLinkException
block|{
return|return
name|getLastINodeInPath
argument_list|(
name|path
argument_list|,
name|resolveLink
argument_list|)
operator|.
name|getINode
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * @return the INode of the last component in src, or null if the last    * component does not exist.    * @throws UnresolvedLinkException if symlink can't be resolved    * @throws SnapshotAccessControlException if path is in RO snapshot    */
DECL|method|getINode4Write (String src, boolean resolveLink)
name|INode
name|getINode4Write
parameter_list|(
name|String
name|src
parameter_list|,
name|boolean
name|resolveLink
parameter_list|)
throws|throws
name|UnresolvedLinkException
throws|,
name|SnapshotAccessControlException
block|{
return|return
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|,
name|resolveLink
argument_list|)
operator|.
name|getLastINode
argument_list|()
return|;
block|}
comment|/**    * @return the INodesInPath of the components in src    * @throws UnresolvedLinkException if symlink can't be resolved    * @throws SnapshotAccessControlException if path is in RO snapshot    */
DECL|method|getINodesInPath4Write (String src, boolean resolveLink)
name|INodesInPath
name|getINodesInPath4Write
parameter_list|(
name|String
name|src
parameter_list|,
name|boolean
name|resolveLink
parameter_list|)
throws|throws
name|UnresolvedLinkException
throws|,
name|SnapshotAccessControlException
block|{
specifier|final
name|byte
index|[]
index|[]
name|components
init|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|INodesInPath
name|inodesInPath
init|=
name|getExistingPathINodes
argument_list|(
name|components
argument_list|,
name|components
operator|.
name|length
argument_list|,
name|resolveLink
argument_list|)
decl_stmt|;
if|if
condition|(
name|inodesInPath
operator|.
name|isSnapshot
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SnapshotAccessControlException
argument_list|(
literal|"Modification on a read-only snapshot is disallowed"
argument_list|)
throw|;
block|}
return|return
name|inodesInPath
return|;
block|}
comment|/**    * Retrieve existing INodes from a path. If existing is big enough to store    * all path components (existing and non-existing), then existing INodes    * will be stored starting from the root INode into existing[0]; if    * existing is not big enough to store all path components, then only the    * last existing and non existing INodes will be stored so that    * existing[existing.length-1] refers to the INode of the final component.    *     * An UnresolvedPathException is always thrown when an intermediate path     * component refers to a symbolic link. If the final path component refers     * to a symbolic link then an UnresolvedPathException is only thrown if    * resolveLink is true.      *     *<p>    * Example:<br>    * Given the path /c1/c2/c3 where only /c1/c2 exists, resulting in the    * following path components: ["","c1","c2","c3"],    *     *<p>    *<code>getExistingPathINodes(["","c1","c2"], [?])</code> should fill the    * array with [c2]<br>    *<code>getExistingPathINodes(["","c1","c2","c3"], [?])</code> should fill the    * array with [null]    *     *<p>    *<code>getExistingPathINodes(["","c1","c2"], [?,?])</code> should fill the    * array with [c1,c2]<br>    *<code>getExistingPathINodes(["","c1","c2","c3"], [?,?])</code> should fill    * the array with [c2,null]    *     *<p>    *<code>getExistingPathINodes(["","c1","c2"], [?,?,?,?])</code> should fill    * the array with [rootINode,c1,c2,null],<br>    *<code>getExistingPathINodes(["","c1","c2","c3"], [?,?,?,?])</code> should    * fill the array with [rootINode,c1,c2,null]    *     * @param components array of path component name    * @param numOfINodes number of INodes to return    * @param resolveLink indicates whether UnresolvedLinkException should    *        be thrown when the path refers to a symbolic link.    * @return the specified number of existing INodes in the path    */
DECL|method|getExistingPathINodes (byte[][] components, int numOfINodes, boolean resolveLink)
name|INodesInPath
name|getExistingPathINodes
parameter_list|(
name|byte
index|[]
index|[]
name|components
parameter_list|,
name|int
name|numOfINodes
parameter_list|,
name|boolean
name|resolveLink
parameter_list|)
throws|throws
name|UnresolvedLinkException
block|{
assert|assert
name|this
operator|.
name|compareTo
argument_list|(
name|components
index|[
literal|0
index|]
argument_list|)
operator|==
literal|0
operator|:
literal|"Incorrect name "
operator|+
name|getLocalName
argument_list|()
operator|+
literal|" expected "
operator|+
operator|(
name|components
index|[
literal|0
index|]
operator|==
literal|null
condition|?
literal|null
else|:
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|components
index|[
literal|0
index|]
argument_list|)
operator|)
assert|;
name|INodesInPath
name|existing
init|=
operator|new
name|INodesInPath
argument_list|(
name|components
argument_list|,
name|numOfINodes
argument_list|)
decl_stmt|;
name|INode
name|curNode
init|=
name|this
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|index
init|=
name|numOfINodes
operator|-
name|components
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|index
operator|=
literal|0
expr_stmt|;
block|}
while|while
condition|(
name|count
operator|<
name|components
operator|.
name|length
operator|&&
name|curNode
operator|!=
literal|null
condition|)
block|{
specifier|final
name|boolean
name|lastComp
init|=
operator|(
name|count
operator|==
name|components
operator|.
name|length
operator|-
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|existing
operator|.
name|addNode
argument_list|(
name|curNode
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|isDir
init|=
name|curNode
operator|.
name|isDirectory
argument_list|()
decl_stmt|;
specifier|final
name|INodeDirectory
name|dir
init|=
name|isDir
condition|?
name|curNode
operator|.
name|asDirectory
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|isDir
operator|&&
name|dir
operator|instanceof
name|INodeDirectoryWithSnapshot
condition|)
block|{
comment|//if the path is a non-snapshot path, update the latest snapshot.
if|if
condition|(
operator|!
name|existing
operator|.
name|isSnapshot
argument_list|()
condition|)
block|{
name|existing
operator|.
name|updateLatestSnapshot
argument_list|(
operator|(
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|dir
operator|)
operator|.
name|getLastSnapshot
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|curNode
operator|.
name|isSymlink
argument_list|()
operator|&&
operator|(
operator|!
name|lastComp
operator|||
operator|(
name|lastComp
operator|&&
name|resolveLink
operator|)
operator|)
condition|)
block|{
specifier|final
name|String
name|path
init|=
name|constructPath
argument_list|(
name|components
argument_list|,
literal|0
argument_list|,
name|components
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|String
name|preceding
init|=
name|constructPath
argument_list|(
name|components
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
decl_stmt|;
specifier|final
name|String
name|remainder
init|=
name|constructPath
argument_list|(
name|components
argument_list|,
name|count
operator|+
literal|1
argument_list|,
name|components
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|String
name|link
init|=
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|components
index|[
name|count
index|]
argument_list|)
decl_stmt|;
specifier|final
name|String
name|target
init|=
name|curNode
operator|.
name|asSymlink
argument_list|()
operator|.
name|getSymlinkString
argument_list|()
decl_stmt|;
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"UnresolvedPathException "
operator|+
literal|" path: "
operator|+
name|path
operator|+
literal|" preceding: "
operator|+
name|preceding
operator|+
literal|" count: "
operator|+
name|count
operator|+
literal|" link: "
operator|+
name|link
operator|+
literal|" target: "
operator|+
name|target
operator|+
literal|" remainder: "
operator|+
name|remainder
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|UnresolvedPathException
argument_list|(
name|path
argument_list|,
name|preceding
argument_list|,
name|remainder
argument_list|,
name|target
argument_list|)
throw|;
block|}
if|if
condition|(
name|lastComp
operator|||
operator|!
name|isDir
condition|)
block|{
break|break;
block|}
specifier|final
name|byte
index|[]
name|childName
init|=
name|components
index|[
name|count
operator|+
literal|1
index|]
decl_stmt|;
comment|// check if the next byte[] in components is for ".snapshot"
if|if
condition|(
name|isDotSnapshotDir
argument_list|(
name|childName
argument_list|)
operator|&&
name|isDir
operator|&&
name|dir
operator|instanceof
name|INodeDirectoryWithSnapshot
condition|)
block|{
comment|// skip the ".snapshot" in components
name|count
operator|++
expr_stmt|;
name|index
operator|++
expr_stmt|;
name|existing
operator|.
name|isSnapshot
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
comment|// decrease the capacity by 1 to account for .snapshot
name|existing
operator|.
name|capacity
operator|--
expr_stmt|;
block|}
comment|// check if ".snapshot" is the last element of components
if|if
condition|(
name|count
operator|==
name|components
operator|.
name|length
operator|-
literal|1
condition|)
block|{
break|break;
block|}
comment|// Resolve snapshot root
specifier|final
name|Snapshot
name|s
init|=
operator|(
operator|(
name|INodeDirectorySnapshottable
operator|)
name|dir
operator|)
operator|.
name|getSnapshot
argument_list|(
name|components
index|[
name|count
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
comment|//snapshot not found
name|curNode
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|curNode
operator|=
name|s
operator|.
name|getRoot
argument_list|()
expr_stmt|;
name|existing
operator|.
name|setSnapshot
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|>=
operator|-
literal|1
condition|)
block|{
name|existing
operator|.
name|snapshotRootIndex
operator|=
name|existing
operator|.
name|numNonNull
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// normal case, and also for resolving file/dir under snapshot root
name|curNode
operator|=
name|dir
operator|.
name|getChild
argument_list|(
name|childName
argument_list|,
name|existing
operator|.
name|getPathSnapshot
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
return|return
name|existing
return|;
block|}
comment|/**    * @return true if path component is {@link HdfsConstants#DOT_SNAPSHOT_DIR}    */
DECL|method|isDotSnapshotDir (byte[] pathComponent)
specifier|private
specifier|static
name|boolean
name|isDotSnapshotDir
parameter_list|(
name|byte
index|[]
name|pathComponent
parameter_list|)
block|{
return|return
name|pathComponent
operator|==
literal|null
condition|?
literal|false
else|:
name|HdfsConstants
operator|.
name|DOT_SNAPSHOT_DIR
operator|.
name|equalsIgnoreCase
argument_list|(
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|pathComponent
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Given a child's name, return the index of the next child    *    * @param name a child's name    * @return the index of the next child    */
DECL|method|nextChild (ReadOnlyList<INode> children, byte[] name)
specifier|static
name|int
name|nextChild
parameter_list|(
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|children
parameter_list|,
name|byte
index|[]
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// empty name
return|return
literal|0
return|;
block|}
name|int
name|nextPos
init|=
name|ReadOnlyList
operator|.
name|Util
operator|.
name|binarySearch
argument_list|(
name|children
argument_list|,
name|name
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|nextPos
operator|>=
literal|0
condition|)
block|{
return|return
name|nextPos
return|;
block|}
return|return
operator|-
name|nextPos
return|;
block|}
comment|/**    * Add a child inode to the directory.    *     * @param node INode to insert    * @param setModTime set modification time for the parent node    *                   not needed when replaying the addition and     *                   the parent already has the proper mod time    * @return false if the child with this name already exists;     *         otherwise, return true;    */
DECL|method|addChild (INode node, final boolean setModTime, final Snapshot latest)
specifier|public
name|boolean
name|addChild
parameter_list|(
name|INode
name|node
parameter_list|,
specifier|final
name|boolean
name|setModTime
parameter_list|,
specifier|final
name|Snapshot
name|latest
parameter_list|)
throws|throws
name|NSQuotaExceededException
block|{
specifier|final
name|int
name|low
init|=
name|searchChildren
argument_list|(
name|node
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|low
operator|>=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isInLatestSnapshot
argument_list|(
name|latest
argument_list|)
condition|)
block|{
return|return
name|replaceSelf4INodeDirectoryWithSnapshot
argument_list|()
operator|.
name|addChild
argument_list|(
name|node
argument_list|,
name|setModTime
argument_list|,
name|latest
argument_list|)
return|;
block|}
name|addChild
argument_list|(
name|node
argument_list|,
name|low
argument_list|)
expr_stmt|;
if|if
condition|(
name|setModTime
condition|)
block|{
comment|// update modification time of the parent directory
name|updateModificationTime
argument_list|(
name|node
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|latest
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/** The same as addChild(node, false, null, false) */
DECL|method|addChild (INode node)
specifier|public
name|boolean
name|addChild
parameter_list|(
name|INode
name|node
parameter_list|)
block|{
specifier|final
name|int
name|low
init|=
name|searchChildren
argument_list|(
name|node
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|low
operator|>=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|addChild
argument_list|(
name|node
argument_list|,
name|low
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Add the node to the children list at the given insertion point.    * The basic add method which actually calls children.add(..).    */
DECL|method|addChild (final INode node, final int insertionPoint)
specifier|private
name|void
name|addChild
parameter_list|(
specifier|final
name|INode
name|node
parameter_list|,
specifier|final
name|int
name|insertionPoint
parameter_list|)
block|{
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
name|children
operator|=
operator|new
name|ArrayList
argument_list|<
name|INode
argument_list|>
argument_list|(
name|DEFAULT_FILES_PER_DIRECTORY
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|-
name|insertionPoint
operator|-
literal|1
argument_list|,
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getGroupName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|node
operator|.
name|setGroup
argument_list|(
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|computeQuotaUsage (Quota.Counts counts, boolean useCache)
specifier|public
name|Quota
operator|.
name|Counts
name|computeQuotaUsage
parameter_list|(
name|Quota
operator|.
name|Counts
name|counts
parameter_list|,
name|boolean
name|useCache
parameter_list|)
block|{
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|INode
name|child
range|:
name|children
control|)
block|{
name|child
operator|.
name|computeQuotaUsage
argument_list|(
name|counts
argument_list|,
name|useCache
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|computeQuotaUsage4CurrentDirectory
argument_list|(
name|counts
argument_list|)
return|;
block|}
comment|/** Add quota usage for this inode excluding children. */
DECL|method|computeQuotaUsage4CurrentDirectory (Quota.Counts counts)
specifier|public
name|Quota
operator|.
name|Counts
name|computeQuotaUsage4CurrentDirectory
parameter_list|(
name|Quota
operator|.
name|Counts
name|counts
parameter_list|)
block|{
name|counts
operator|.
name|add
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|counts
return|;
block|}
annotation|@
name|Override
DECL|method|computeContentSummary (final Content.Counts counts)
specifier|public
name|Content
operator|.
name|Counts
name|computeContentSummary
parameter_list|(
specifier|final
name|Content
operator|.
name|Counts
name|counts
parameter_list|)
block|{
for|for
control|(
name|INode
name|child
range|:
name|getChildrenList
argument_list|(
literal|null
argument_list|)
control|)
block|{
name|child
operator|.
name|computeContentSummary
argument_list|(
name|counts
argument_list|)
expr_stmt|;
block|}
name|counts
operator|.
name|add
argument_list|(
name|Content
operator|.
name|DIRECTORY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|counts
return|;
block|}
annotation|@
name|Override
DECL|method|computeContentSummary ( final Content.CountsMap countsMap)
specifier|public
name|Content
operator|.
name|CountsMap
name|computeContentSummary
parameter_list|(
specifier|final
name|Content
operator|.
name|CountsMap
name|countsMap
parameter_list|)
block|{
for|for
control|(
name|INode
name|child
range|:
name|getChildrenList
argument_list|(
literal|null
argument_list|)
control|)
block|{
name|child
operator|.
name|computeContentSummary
argument_list|(
name|countsMap
argument_list|)
expr_stmt|;
block|}
name|countsMap
operator|.
name|getCounts
argument_list|(
name|Key
operator|.
name|CURRENT
argument_list|)
operator|.
name|add
argument_list|(
name|Content
operator|.
name|DIRECTORY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|countsMap
return|;
block|}
comment|/**    * @param snapshot    *          if it is not null, get the result from the given snapshot;    *          otherwise, get the result from the current directory.    * @return the current children list if the specified snapshot is null;    *         otherwise, return the children list corresponding to the snapshot.    *         Note that the returned list is never null.    */
DECL|method|getChildrenList (final Snapshot snapshot)
specifier|public
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|getChildrenList
parameter_list|(
specifier|final
name|Snapshot
name|snapshot
parameter_list|)
block|{
return|return
name|children
operator|==
literal|null
condition|?
name|ReadOnlyList
operator|.
name|Util
operator|.
expr|<
name|INode
operator|>
name|emptyList
argument_list|()
else|:
name|ReadOnlyList
operator|.
name|Util
operator|.
name|asReadOnlyList
argument_list|(
name|children
argument_list|)
return|;
block|}
comment|/** Set the children list to null. */
DECL|method|clearChildren ()
specifier|public
name|void
name|clearChildren
parameter_list|()
block|{
name|this
operator|.
name|children
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clearReferences ()
specifier|public
name|void
name|clearReferences
parameter_list|()
block|{
name|super
operator|.
name|clearReferences
argument_list|()
expr_stmt|;
name|clearChildren
argument_list|()
expr_stmt|;
block|}
comment|/**    * Call {@link INode#cleanSubtree(SnapshotDeletionInfo, BlocksMapUpdateInfo)}    * recursively down the subtree.    */
DECL|method|cleanSubtreeRecursively (final Snapshot snapshot, Snapshot prior, final BlocksMapUpdateInfo collectedBlocks)
specifier|public
name|int
name|cleanSubtreeRecursively
parameter_list|(
specifier|final
name|Snapshot
name|snapshot
parameter_list|,
name|Snapshot
name|prior
parameter_list|,
specifier|final
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|)
throws|throws
name|NSQuotaExceededException
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
comment|// in case of deletion snapshot, since this call happens after we modify
comment|// the diff list, the snapshot to be deleted has been combined or renamed
comment|// to its latest previous snapshot.
name|Snapshot
name|s
init|=
name|snapshot
operator|!=
literal|null
operator|&&
name|prior
operator|!=
literal|null
condition|?
name|prior
else|:
name|snapshot
decl_stmt|;
for|for
control|(
name|INode
name|child
range|:
name|getChildrenList
argument_list|(
name|s
argument_list|)
control|)
block|{
name|total
operator|+=
name|child
operator|.
name|cleanSubtree
argument_list|(
name|snapshot
argument_list|,
name|prior
argument_list|,
name|collectedBlocks
argument_list|)
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
annotation|@
name|Override
DECL|method|destroyAndCollectBlocks ( final BlocksMapUpdateInfo collectedBlocks)
specifier|public
name|int
name|destroyAndCollectBlocks
parameter_list|(
specifier|final
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|)
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|INode
name|child
range|:
name|getChildrenList
argument_list|(
literal|null
argument_list|)
control|)
block|{
name|total
operator|+=
name|child
operator|.
name|destroyAndCollectBlocks
argument_list|(
name|collectedBlocks
argument_list|)
expr_stmt|;
block|}
name|clearReferences
argument_list|()
expr_stmt|;
name|total
operator|++
expr_stmt|;
return|return
name|total
return|;
block|}
annotation|@
name|Override
DECL|method|cleanSubtree (final Snapshot snapshot, Snapshot prior, final BlocksMapUpdateInfo collectedBlocks)
specifier|public
name|int
name|cleanSubtree
parameter_list|(
specifier|final
name|Snapshot
name|snapshot
parameter_list|,
name|Snapshot
name|prior
parameter_list|,
specifier|final
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|)
throws|throws
name|NSQuotaExceededException
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|prior
operator|==
literal|null
operator|&&
name|snapshot
operator|==
literal|null
condition|)
block|{
comment|// destroy the whole subtree and collect blocks that should be deleted
name|total
operator|+=
name|destroyAndCollectBlocks
argument_list|(
name|collectedBlocks
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// process recursively down the subtree
name|total
operator|+=
name|cleanSubtreeRecursively
argument_list|(
name|snapshot
argument_list|,
name|prior
argument_list|,
name|collectedBlocks
argument_list|)
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
comment|/**    * Compare the metadata with another INodeDirectory    */
DECL|method|metadataEquals (INodeDirectory other)
specifier|public
name|boolean
name|metadataEquals
parameter_list|(
name|INodeDirectory
name|other
parameter_list|)
block|{
return|return
name|other
operator|!=
literal|null
operator|&&
name|getNsQuota
argument_list|()
operator|==
name|other
operator|.
name|getNsQuota
argument_list|()
operator|&&
name|getDsQuota
argument_list|()
operator|==
name|other
operator|.
name|getDsQuota
argument_list|()
operator|&&
name|getUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|&&
name|getGroupName
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getGroupName
argument_list|()
argument_list|)
operator|&&
name|getFsPermission
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getFsPermission
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Used by    * {@link INodeDirectory#getExistingPathINodes(byte[][], int, boolean)}.    * Contains INodes information resolved from a given path.    */
DECL|class|INodesInPath
specifier|public
specifier|static
class|class
name|INodesInPath
block|{
DECL|field|path
specifier|private
specifier|final
name|byte
index|[]
index|[]
name|path
decl_stmt|;
comment|/**      * Array with the specified number of INodes resolved for a given path.      */
DECL|field|inodes
specifier|private
name|INode
index|[]
name|inodes
decl_stmt|;
comment|/**      * Indicate the number of non-null elements in {@link #inodes}      */
DECL|field|numNonNull
specifier|private
name|int
name|numNonNull
decl_stmt|;
comment|/**      * The path for a snapshot file/dir contains the .snapshot thus makes the      * length of the path components larger the number of inodes. We use      * the capacity to control this special case.      */
DECL|field|capacity
specifier|private
name|int
name|capacity
decl_stmt|;
comment|/**      * true if this path corresponds to a snapshot      */
DECL|field|isSnapshot
specifier|private
name|boolean
name|isSnapshot
decl_stmt|;
comment|/**      * Index of {@link INodeDirectoryWithSnapshot} for snapshot path, else -1      */
DECL|field|snapshotRootIndex
specifier|private
name|int
name|snapshotRootIndex
decl_stmt|;
comment|/**      * For snapshot paths, it is the reference to the snapshot; or null if the      * snapshot does not exist. For non-snapshot paths, it is the reference to      * the latest snapshot found in the path; or null if no snapshot is found.      */
DECL|field|snapshot
specifier|private
name|Snapshot
name|snapshot
init|=
literal|null
decl_stmt|;
DECL|method|INodesInPath (byte[][] path, int number)
specifier|private
name|INodesInPath
parameter_list|(
name|byte
index|[]
index|[]
name|path
parameter_list|,
name|int
name|number
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
assert|assert
operator|(
name|number
operator|>=
literal|0
operator|)
assert|;
name|inodes
operator|=
operator|new
name|INode
index|[
name|number
index|]
expr_stmt|;
name|capacity
operator|=
name|number
expr_stmt|;
name|numNonNull
operator|=
literal|0
expr_stmt|;
name|isSnapshot
operator|=
literal|false
expr_stmt|;
name|snapshotRootIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/**      * For non-snapshot paths, return the latest snapshot found in the path.      * For snapshot paths, return null.      */
DECL|method|getLatestSnapshot ()
specifier|public
name|Snapshot
name|getLatestSnapshot
parameter_list|()
block|{
return|return
name|isSnapshot
condition|?
literal|null
else|:
name|snapshot
return|;
block|}
comment|/**      * For snapshot paths, return the snapshot specified in the path.      * For non-snapshot paths, return null.      */
DECL|method|getPathSnapshot ()
specifier|public
name|Snapshot
name|getPathSnapshot
parameter_list|()
block|{
return|return
name|isSnapshot
condition|?
name|snapshot
else|:
literal|null
return|;
block|}
DECL|method|setSnapshot (Snapshot s)
specifier|private
name|void
name|setSnapshot
parameter_list|(
name|Snapshot
name|s
parameter_list|)
block|{
name|snapshot
operator|=
name|s
expr_stmt|;
block|}
DECL|method|updateLatestSnapshot (Snapshot s)
specifier|private
name|void
name|updateLatestSnapshot
parameter_list|(
name|Snapshot
name|s
parameter_list|)
block|{
if|if
condition|(
name|snapshot
operator|==
literal|null
operator|||
operator|(
name|s
operator|!=
literal|null
operator|&&
name|Snapshot
operator|.
name|ID_COMPARATOR
operator|.
name|compare
argument_list|(
name|snapshot
argument_list|,
name|s
argument_list|)
operator|<
literal|0
operator|)
condition|)
block|{
name|snapshot
operator|=
name|s
expr_stmt|;
block|}
block|}
comment|/**      * @return the whole inodes array including the null elements.      */
DECL|method|getINodes ()
name|INode
index|[]
name|getINodes
parameter_list|()
block|{
if|if
condition|(
name|capacity
operator|<
name|inodes
operator|.
name|length
condition|)
block|{
name|INode
index|[]
name|newNodes
init|=
operator|new
name|INode
index|[
name|capacity
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|inodes
argument_list|,
literal|0
argument_list|,
name|newNodes
argument_list|,
literal|0
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
name|inodes
operator|=
name|newNodes
expr_stmt|;
block|}
return|return
name|inodes
return|;
block|}
comment|/**      * @return the i-th inode if i>= 0;      *         otherwise, i< 0, return the (length + i)-th inode.      */
DECL|method|getINode (int i)
specifier|public
name|INode
name|getINode
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|inodes
index|[
name|i
operator|>=
literal|0
condition|?
name|i
else|:
name|inodes
operator|.
name|length
operator|+
name|i
index|]
return|;
block|}
comment|/** @return the last inode. */
DECL|method|getLastINode ()
specifier|public
name|INode
name|getLastINode
parameter_list|()
block|{
return|return
name|inodes
index|[
name|inodes
operator|.
name|length
operator|-
literal|1
index|]
return|;
block|}
DECL|method|getLastLocalName ()
name|byte
index|[]
name|getLastLocalName
parameter_list|()
block|{
return|return
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
return|;
block|}
comment|/**      * @return index of the {@link INodeDirectoryWithSnapshot} in      *         {@link #inodes} for snapshot path, else -1.      */
DECL|method|getSnapshotRootIndex ()
name|int
name|getSnapshotRootIndex
parameter_list|()
block|{
return|return
name|this
operator|.
name|snapshotRootIndex
return|;
block|}
comment|/**      * @return isSnapshot true for a snapshot path      */
DECL|method|isSnapshot ()
name|boolean
name|isSnapshot
parameter_list|()
block|{
return|return
name|this
operator|.
name|isSnapshot
return|;
block|}
comment|/**      * Add an INode at the end of the array      */
DECL|method|addNode (INode node)
specifier|private
name|void
name|addNode
parameter_list|(
name|INode
name|node
parameter_list|)
block|{
name|inodes
index|[
name|numNonNull
operator|++
index|]
operator|=
name|node
expr_stmt|;
block|}
DECL|method|setINode (int i, INode inode)
name|void
name|setINode
parameter_list|(
name|int
name|i
parameter_list|,
name|INode
name|inode
parameter_list|)
block|{
name|inodes
index|[
name|i
index|]
operator|=
name|inode
expr_stmt|;
block|}
DECL|method|setLastINode (INode last)
name|void
name|setLastINode
parameter_list|(
name|INode
name|last
parameter_list|)
block|{
name|inodes
index|[
name|inodes
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|last
expr_stmt|;
block|}
comment|/**      * @return The number of non-null elements      */
DECL|method|getNumNonNull ()
name|int
name|getNumNonNull
parameter_list|()
block|{
return|return
name|numNonNull
return|;
block|}
DECL|method|toString (INode inode)
specifier|static
name|String
name|toString
parameter_list|(
name|INode
name|inode
parameter_list|)
block|{
return|return
name|inode
operator|==
literal|null
condition|?
literal|null
else|:
name|inode
operator|.
name|getLocalName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
literal|true
argument_list|)
return|;
block|}
DECL|method|toString (boolean vaildateObject)
specifier|private
name|String
name|toString
parameter_list|(
name|boolean
name|vaildateObject
parameter_list|)
block|{
if|if
condition|(
name|vaildateObject
condition|)
block|{
name|vaildate
argument_list|()
expr_stmt|;
block|}
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": path = "
argument_list|)
operator|.
name|append
argument_list|(
name|DFSUtil
operator|.
name|byteArray2PathString
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n  inodes = "
argument_list|)
decl_stmt|;
if|if
condition|(
name|inodes
operator|==
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inodes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"[]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|toString
argument_list|(
name|inodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|inodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|toString
argument_list|(
name|inodes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|"], length="
argument_list|)
operator|.
name|append
argument_list|(
name|inodes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|"\n  numNonNull = "
argument_list|)
operator|.
name|append
argument_list|(
name|numNonNull
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n  capacity   = "
argument_list|)
operator|.
name|append
argument_list|(
name|capacity
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n  isSnapshot        = "
argument_list|)
operator|.
name|append
argument_list|(
name|isSnapshot
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n  snapshotRootIndex = "
argument_list|)
operator|.
name|append
argument_list|(
name|snapshotRootIndex
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n  snapshot          = "
argument_list|)
operator|.
name|append
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|vaildate ()
name|void
name|vaildate
parameter_list|()
block|{
comment|// check parent up to snapshotRootIndex or numNonNull
specifier|final
name|int
name|n
init|=
name|snapshotRootIndex
operator|>=
literal|0
condition|?
name|snapshotRootIndex
operator|+
literal|1
else|:
name|numNonNull
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|inodes
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|i
operator|++
init|;
name|i
operator|<
name|n
operator|&&
name|inodes
index|[
name|i
index|]
operator|!=
literal|null
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|INodeDirectory
name|parent_i
init|=
name|inodes
index|[
name|i
index|]
operator|.
name|getParent
argument_list|()
decl_stmt|;
specifier|final
name|INodeDirectory
name|parent_i_1
init|=
name|inodes
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent_i
operator|!=
name|inodes
index|[
name|i
operator|-
literal|1
index|]
operator|&&
operator|(
name|parent_i_1
operator|==
literal|null
operator|||
operator|!
name|parent_i_1
operator|.
name|isSnapshottable
argument_list|()
operator|||
name|parent_i
operator|!=
name|parent_i_1
operator|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"inodes["
operator|+
name|i
operator|+
literal|"].getParent() != inodes["
operator|+
operator|(
name|i
operator|-
literal|1
operator|)
operator|+
literal|"]\n  inodes["
operator|+
name|i
operator|+
literal|"]="
operator|+
name|inodes
index|[
name|i
index|]
operator|.
name|toDetailString
argument_list|()
operator|+
literal|"\n  inodes["
operator|+
operator|(
name|i
operator|-
literal|1
operator|)
operator|+
literal|"]="
operator|+
name|inodes
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|toDetailString
argument_list|()
operator|+
literal|"\n this="
operator|+
name|toString
argument_list|(
literal|false
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|i
operator|!=
name|n
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"i = "
operator|+
name|i
operator|+
literal|" != "
operator|+
name|n
operator|+
literal|", this="
operator|+
name|toString
argument_list|(
literal|false
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
comment|/*    * The following code is to dump the tree recursively for testing.    *     *      \- foo   (INodeDirectory@33dd2717)    *        \- sub1   (INodeDirectory@442172)    *          +- file1   (INodeFile@78392d4)    *          +- file2   (INodeFile@78392d5)    *          +- sub11   (INodeDirectory@8400cff)    *            \- file3   (INodeFile@78392d6)    *          \- z_file4   (INodeFile@45848712)    */
DECL|field|DUMPTREE_EXCEPT_LAST_ITEM
specifier|static
specifier|final
name|String
name|DUMPTREE_EXCEPT_LAST_ITEM
init|=
literal|"+-"
decl_stmt|;
DECL|field|DUMPTREE_LAST_ITEM
specifier|static
specifier|final
name|String
name|DUMPTREE_LAST_ITEM
init|=
literal|"\\-"
decl_stmt|;
annotation|@
name|VisibleForTesting
annotation|@
name|Override
DECL|method|dumpTreeRecursively (PrintWriter out, StringBuilder prefix, final Snapshot snapshot)
specifier|public
name|void
name|dumpTreeRecursively
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|StringBuilder
name|prefix
parameter_list|,
specifier|final
name|Snapshot
name|snapshot
parameter_list|)
block|{
name|super
operator|.
name|dumpTreeRecursively
argument_list|(
name|out
argument_list|,
name|prefix
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|", childrenSize="
operator|+
name|getChildrenList
argument_list|(
name|snapshot
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|instanceof
name|INodeDirectoryWithQuota
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
operator|(
operator|(
name|INodeDirectoryWithQuota
operator|)
name|this
operator|)
operator|.
name|quotaString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|prefix
operator|.
name|setLength
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|prefix
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
block|}
name|dumpTreeRecursively
argument_list|(
name|out
argument_list|,
name|prefix
argument_list|,
operator|new
name|Iterable
argument_list|<
name|SnapshotAndINode
argument_list|>
argument_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|INode
argument_list|>
name|i
init|=
name|getChildrenList
argument_list|(
name|snapshot
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|SnapshotAndINode
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|SnapshotAndINode
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|i
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SnapshotAndINode
name|next
parameter_list|()
block|{
return|return
operator|new
name|SnapshotAndINode
argument_list|(
name|snapshot
argument_list|,
name|i
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Dump the given subtrees.    * @param prefix The prefix string that each line should print.    * @param subs The subtrees.    */
annotation|@
name|VisibleForTesting
DECL|method|dumpTreeRecursively (PrintWriter out, StringBuilder prefix, Iterable<SnapshotAndINode> subs)
specifier|protected
specifier|static
name|void
name|dumpTreeRecursively
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|StringBuilder
name|prefix
parameter_list|,
name|Iterable
argument_list|<
name|SnapshotAndINode
argument_list|>
name|subs
parameter_list|)
block|{
if|if
condition|(
name|subs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|SnapshotAndINode
argument_list|>
name|i
init|=
name|subs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|SnapshotAndINode
name|pair
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|prefix
operator|.
name|append
argument_list|(
name|i
operator|.
name|hasNext
argument_list|()
condition|?
name|DUMPTREE_EXCEPT_LAST_ITEM
else|:
name|DUMPTREE_LAST_ITEM
argument_list|)
expr_stmt|;
name|pair
operator|.
name|inode
operator|.
name|dumpTreeRecursively
argument_list|(
name|out
argument_list|,
name|prefix
argument_list|,
name|pair
operator|.
name|snapshot
argument_list|)
expr_stmt|;
name|prefix
operator|.
name|setLength
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** A pair of Snapshot and INode objects. */
DECL|class|SnapshotAndINode
specifier|protected
specifier|static
class|class
name|SnapshotAndINode
block|{
DECL|field|snapshot
specifier|public
specifier|final
name|Snapshot
name|snapshot
decl_stmt|;
DECL|field|inode
specifier|public
specifier|final
name|INode
name|inode
decl_stmt|;
DECL|method|SnapshotAndINode (Snapshot snapshot, INode inode)
specifier|public
name|SnapshotAndINode
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|INode
name|inode
parameter_list|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|snapshot
expr_stmt|;
name|this
operator|.
name|inode
operator|=
name|inode
expr_stmt|;
block|}
DECL|method|SnapshotAndINode (Snapshot snapshot)
specifier|public
name|SnapshotAndINode
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
name|this
argument_list|(
name|snapshot
argument_list|,
name|snapshot
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

