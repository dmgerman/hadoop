begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIsNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockStoragePolicySuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeReference
operator|.
name|WithCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|DirectorySnapshottableFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|DirectoryWithSnapshotFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|DirectoryWithSnapshotFeature
operator|.
name|DirectoryDiffList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|Diff
operator|.
name|ListType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
import|;
end_import

begin_comment
comment|/**  * Directory INode class.  */
end_comment

begin_class
DECL|class|INodeDirectory
specifier|public
class|class
name|INodeDirectory
extends|extends
name|INodeWithAdditionalFields
implements|implements
name|INodeDirectoryAttributes
block|{
comment|/** Cast INode to INodeDirectory. */
DECL|method|valueOf (INode inode, Object path )
specifier|public
specifier|static
name|INodeDirectory
name|valueOf
parameter_list|(
name|INode
name|inode
parameter_list|,
name|Object
name|path
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|PathIsNotDirectoryException
block|{
if|if
condition|(
name|inode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Directory does not exist: "
operator|+
name|DFSUtil
operator|.
name|path2String
argument_list|(
name|path
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|inode
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathIsNotDirectoryException
argument_list|(
name|DFSUtil
operator|.
name|path2String
argument_list|(
name|path
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|inode
operator|.
name|asDirectory
argument_list|()
return|;
block|}
DECL|field|DEFAULT_FILES_PER_DIRECTORY
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_FILES_PER_DIRECTORY
init|=
literal|5
decl_stmt|;
DECL|field|ROOT_NAME
specifier|final
specifier|static
name|byte
index|[]
name|ROOT_NAME
init|=
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|children
specifier|private
name|List
argument_list|<
name|INode
argument_list|>
name|children
init|=
literal|null
decl_stmt|;
comment|/** constructor */
DECL|method|INodeDirectory (long id, byte[] name, PermissionStatus permissions, long mtime)
specifier|public
name|INodeDirectory
parameter_list|(
name|long
name|id
parameter_list|,
name|byte
index|[]
name|name
parameter_list|,
name|PermissionStatus
name|permissions
parameter_list|,
name|long
name|mtime
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|permissions
argument_list|,
name|mtime
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy constructor    * @param other The INodeDirectory to be copied    * @param adopt Indicate whether or not need to set the parent field of child    *              INodes to the new node    * @param featuresToCopy any number of features to copy to the new node.    *              The method will do a reference copy, not a deep copy.    */
DECL|method|INodeDirectory (INodeDirectory other, boolean adopt, Feature... featuresToCopy)
specifier|public
name|INodeDirectory
parameter_list|(
name|INodeDirectory
name|other
parameter_list|,
name|boolean
name|adopt
parameter_list|,
name|Feature
modifier|...
name|featuresToCopy
parameter_list|)
block|{
name|super
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|this
operator|.
name|children
operator|=
name|other
operator|.
name|children
expr_stmt|;
if|if
condition|(
name|adopt
operator|&&
name|this
operator|.
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|INode
name|child
range|:
name|children
control|)
block|{
name|child
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|features
operator|=
name|featuresToCopy
expr_stmt|;
name|AclFeature
name|aclFeature
init|=
name|getFeature
argument_list|(
name|AclFeature
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|aclFeature
operator|!=
literal|null
condition|)
block|{
comment|// for the de-duplication of AclFeature
name|removeFeature
argument_list|(
name|aclFeature
argument_list|)
expr_stmt|;
name|addFeature
argument_list|(
name|AclStorage
operator|.
name|addAclFeature
argument_list|(
name|aclFeature
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** @return true unconditionally. */
annotation|@
name|Override
DECL|method|isDirectory ()
specifier|public
specifier|final
name|boolean
name|isDirectory
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/** @return this object. */
annotation|@
name|Override
DECL|method|asDirectory ()
specifier|public
specifier|final
name|INodeDirectory
name|asDirectory
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalStoragePolicyID ()
specifier|public
name|byte
name|getLocalStoragePolicyID
parameter_list|()
block|{
name|XAttrFeature
name|f
init|=
name|getXAttrFeature
argument_list|()
decl_stmt|;
name|ImmutableList
argument_list|<
name|XAttr
argument_list|>
name|xattrs
init|=
name|f
operator|==
literal|null
condition|?
name|ImmutableList
operator|.
expr|<
name|XAttr
operator|>
name|of
argument_list|()
else|:
name|f
operator|.
name|getXAttrs
argument_list|()
decl_stmt|;
for|for
control|(
name|XAttr
name|xattr
range|:
name|xattrs
control|)
block|{
if|if
condition|(
name|BlockStoragePolicySuite
operator|.
name|isStoragePolicyXAttr
argument_list|(
name|xattr
argument_list|)
condition|)
block|{
return|return
operator|(
name|xattr
operator|.
name|getValue
argument_list|()
operator|)
index|[
literal|0
index|]
return|;
block|}
block|}
return|return
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
return|;
block|}
annotation|@
name|Override
DECL|method|getStoragePolicyID ()
specifier|public
name|byte
name|getStoragePolicyID
parameter_list|()
block|{
name|byte
name|id
init|=
name|getLocalStoragePolicyID
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
condition|)
block|{
return|return
name|id
return|;
block|}
comment|// if it is unspecified, check its parent
return|return
name|getParent
argument_list|()
operator|!=
literal|null
condition|?
name|getParent
argument_list|()
operator|.
name|getStoragePolicyID
argument_list|()
else|:
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
return|;
block|}
DECL|method|setQuota (BlockStoragePolicySuite bsps, long nsQuota, long ssQuota, StorageType type)
name|void
name|setQuota
parameter_list|(
name|BlockStoragePolicySuite
name|bsps
parameter_list|,
name|long
name|nsQuota
parameter_list|,
name|long
name|ssQuota
parameter_list|,
name|StorageType
name|type
parameter_list|)
block|{
name|DirectoryWithQuotaFeature
name|quota
init|=
name|getDirectoryWithQuotaFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|quota
operator|!=
literal|null
condition|)
block|{
comment|// already has quota; so set the quota to the new values
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|quota
operator|.
name|setQuota
argument_list|(
name|ssQuota
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|quota
operator|.
name|setQuota
argument_list|(
name|nsQuota
argument_list|,
name|ssQuota
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isQuotaSet
argument_list|()
operator|&&
operator|!
name|isRoot
argument_list|()
condition|)
block|{
name|removeFeature
argument_list|(
name|quota
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|QuotaCounts
name|c
init|=
name|computeQuotaUsage
argument_list|(
name|bsps
argument_list|)
decl_stmt|;
name|DirectoryWithQuotaFeature
operator|.
name|Builder
name|builder
init|=
operator|new
name|DirectoryWithQuotaFeature
operator|.
name|Builder
argument_list|()
operator|.
name|nameSpaceQuota
argument_list|(
name|nsQuota
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|typeQuota
argument_list|(
name|type
argument_list|,
name|ssQuota
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|storageSpaceQuota
argument_list|(
name|ssQuota
argument_list|)
expr_stmt|;
block|}
name|addDirectoryWithQuotaFeature
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|setSpaceConsumed
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getQuotaCounts ()
specifier|public
name|QuotaCounts
name|getQuotaCounts
parameter_list|()
block|{
specifier|final
name|DirectoryWithQuotaFeature
name|q
init|=
name|getDirectoryWithQuotaFeature
argument_list|()
decl_stmt|;
return|return
name|q
operator|!=
literal|null
condition|?
name|q
operator|.
name|getQuota
argument_list|()
else|:
name|super
operator|.
name|getQuotaCounts
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|addSpaceConsumed (QuotaCounts counts, boolean verify)
specifier|public
name|void
name|addSpaceConsumed
parameter_list|(
name|QuotaCounts
name|counts
parameter_list|,
name|boolean
name|verify
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
specifier|final
name|DirectoryWithQuotaFeature
name|q
init|=
name|getDirectoryWithQuotaFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|q
operator|.
name|addSpaceConsumed
argument_list|(
name|this
argument_list|,
name|counts
argument_list|,
name|verify
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addSpaceConsumed2Parent
argument_list|(
name|counts
argument_list|,
name|verify
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * If the directory contains a {@link DirectoryWithQuotaFeature}, return it;    * otherwise, return null.    */
DECL|method|getDirectoryWithQuotaFeature ()
specifier|public
specifier|final
name|DirectoryWithQuotaFeature
name|getDirectoryWithQuotaFeature
parameter_list|()
block|{
return|return
name|getFeature
argument_list|(
name|DirectoryWithQuotaFeature
operator|.
name|class
argument_list|)
return|;
block|}
comment|/** Is this directory with quota? */
DECL|method|isWithQuota ()
specifier|final
name|boolean
name|isWithQuota
parameter_list|()
block|{
return|return
name|getDirectoryWithQuotaFeature
argument_list|()
operator|!=
literal|null
return|;
block|}
DECL|method|addDirectoryWithQuotaFeature ( DirectoryWithQuotaFeature q)
name|DirectoryWithQuotaFeature
name|addDirectoryWithQuotaFeature
parameter_list|(
name|DirectoryWithQuotaFeature
name|q
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|isWithQuota
argument_list|()
argument_list|,
literal|"Directory is already with quota"
argument_list|)
expr_stmt|;
name|addFeature
argument_list|(
name|q
argument_list|)
expr_stmt|;
return|return
name|q
return|;
block|}
DECL|method|searchChildren (byte[] name)
name|int
name|searchChildren
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
block|{
return|return
name|children
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|Collections
operator|.
name|binarySearch
argument_list|(
name|children
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|method|addSnapshotFeature ( DirectoryDiffList diffs)
specifier|public
name|DirectoryWithSnapshotFeature
name|addSnapshotFeature
parameter_list|(
name|DirectoryDiffList
name|diffs
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|isWithSnapshot
argument_list|()
argument_list|,
literal|"Directory is already with snapshot"
argument_list|)
expr_stmt|;
name|DirectoryWithSnapshotFeature
name|sf
init|=
operator|new
name|DirectoryWithSnapshotFeature
argument_list|(
name|diffs
argument_list|)
decl_stmt|;
name|addFeature
argument_list|(
name|sf
argument_list|)
expr_stmt|;
return|return
name|sf
return|;
block|}
comment|/**    * If feature list contains a {@link DirectoryWithSnapshotFeature}, return it;    * otherwise, return null.    */
DECL|method|getDirectoryWithSnapshotFeature ()
specifier|public
specifier|final
name|DirectoryWithSnapshotFeature
name|getDirectoryWithSnapshotFeature
parameter_list|()
block|{
return|return
name|getFeature
argument_list|(
name|DirectoryWithSnapshotFeature
operator|.
name|class
argument_list|)
return|;
block|}
comment|/** Is this file has the snapshot feature? */
DECL|method|isWithSnapshot ()
specifier|public
specifier|final
name|boolean
name|isWithSnapshot
parameter_list|()
block|{
return|return
name|getDirectoryWithSnapshotFeature
argument_list|()
operator|!=
literal|null
return|;
block|}
DECL|method|getDiffs ()
specifier|public
name|DirectoryDiffList
name|getDiffs
parameter_list|()
block|{
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
return|return
name|sf
operator|!=
literal|null
condition|?
name|sf
operator|.
name|getDiffs
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getSnapshotINode (int snapshotId)
specifier|public
name|INodeDirectoryAttributes
name|getSnapshotINode
parameter_list|(
name|int
name|snapshotId
parameter_list|)
block|{
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
return|return
name|sf
operator|==
literal|null
condition|?
name|this
else|:
name|sf
operator|.
name|getDiffs
argument_list|()
operator|.
name|getSnapshotINode
argument_list|(
name|snapshotId
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toDetailString ()
specifier|public
name|String
name|toDetailString
parameter_list|()
block|{
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|this
operator|.
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
return|return
name|super
operator|.
name|toDetailString
argument_list|()
operator|+
operator|(
name|sf
operator|==
literal|null
condition|?
literal|""
else|:
literal|", "
operator|+
name|sf
operator|.
name|getDiffs
argument_list|()
operator|)
return|;
block|}
DECL|method|getDirectorySnapshottableFeature ()
specifier|public
name|DirectorySnapshottableFeature
name|getDirectorySnapshottableFeature
parameter_list|()
block|{
return|return
name|getFeature
argument_list|(
name|DirectorySnapshottableFeature
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|isSnapshottable ()
specifier|public
name|boolean
name|isSnapshottable
parameter_list|()
block|{
return|return
name|getDirectorySnapshottableFeature
argument_list|()
operator|!=
literal|null
return|;
block|}
DECL|method|getSnapshot (byte[] snapshotName)
specifier|public
name|Snapshot
name|getSnapshot
parameter_list|(
name|byte
index|[]
name|snapshotName
parameter_list|)
block|{
return|return
name|getDirectorySnapshottableFeature
argument_list|()
operator|.
name|getSnapshot
argument_list|(
name|snapshotName
argument_list|)
return|;
block|}
DECL|method|setSnapshotQuota (int snapshotQuota)
specifier|public
name|void
name|setSnapshotQuota
parameter_list|(
name|int
name|snapshotQuota
parameter_list|)
block|{
name|getDirectorySnapshottableFeature
argument_list|()
operator|.
name|setSnapshotQuota
argument_list|(
name|snapshotQuota
argument_list|)
expr_stmt|;
block|}
DECL|method|addSnapshot (int id, String name)
specifier|public
name|Snapshot
name|addSnapshot
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|SnapshotException
throws|,
name|QuotaExceededException
block|{
return|return
name|getDirectorySnapshottableFeature
argument_list|()
operator|.
name|addSnapshot
argument_list|(
name|this
argument_list|,
name|id
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|method|removeSnapshot ( ReclaimContext reclaimContext, String snapshotName)
specifier|public
name|Snapshot
name|removeSnapshot
parameter_list|(
name|ReclaimContext
name|reclaimContext
parameter_list|,
name|String
name|snapshotName
parameter_list|)
throws|throws
name|SnapshotException
block|{
return|return
name|getDirectorySnapshottableFeature
argument_list|()
operator|.
name|removeSnapshot
argument_list|(
name|reclaimContext
argument_list|,
name|this
argument_list|,
name|snapshotName
argument_list|)
return|;
block|}
DECL|method|renameSnapshot (String path, String oldName, String newName)
specifier|public
name|void
name|renameSnapshot
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|oldName
parameter_list|,
name|String
name|newName
parameter_list|)
throws|throws
name|SnapshotException
block|{
name|getDirectorySnapshottableFeature
argument_list|()
operator|.
name|renameSnapshot
argument_list|(
name|path
argument_list|,
name|oldName
argument_list|,
name|newName
argument_list|)
expr_stmt|;
block|}
comment|/** add DirectorySnapshottableFeature */
DECL|method|addSnapshottableFeature ()
specifier|public
name|void
name|addSnapshottableFeature
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|isSnapshottable
argument_list|()
argument_list|,
literal|"this is already snapshottable, this=%s"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|DirectoryWithSnapshotFeature
name|s
init|=
name|this
operator|.
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
specifier|final
name|DirectorySnapshottableFeature
name|snapshottable
init|=
operator|new
name|DirectorySnapshottableFeature
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|removeFeature
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|addFeature
argument_list|(
name|snapshottable
argument_list|)
expr_stmt|;
block|}
comment|/** remove DirectorySnapshottableFeature */
DECL|method|removeSnapshottableFeature ()
specifier|public
name|void
name|removeSnapshottableFeature
parameter_list|()
block|{
name|DirectorySnapshottableFeature
name|s
init|=
name|getDirectorySnapshottableFeature
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|s
operator|!=
literal|null
argument_list|,
literal|"The dir does not have snapshottable feature: this=%s"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|removeFeature
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// add a DirectoryWithSnapshotFeature back
name|DirectoryWithSnapshotFeature
name|sf
init|=
operator|new
name|DirectoryWithSnapshotFeature
argument_list|(
name|s
operator|.
name|getDiffs
argument_list|()
argument_list|)
decl_stmt|;
name|addFeature
argument_list|(
name|sf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Replace the given child with a new child. Note that we no longer need to    * replace an normal INodeDirectory or INodeFile into an    * INodeDirectoryWithSnapshot or INodeFileUnderConstruction. The only cases    * for child replacement is for reference nodes.    */
DECL|method|replaceChild (INode oldChild, final INode newChild, final INodeMap inodeMap)
specifier|public
name|void
name|replaceChild
parameter_list|(
name|INode
name|oldChild
parameter_list|,
specifier|final
name|INode
name|newChild
parameter_list|,
specifier|final
name|INodeMap
name|inodeMap
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|children
argument_list|)
expr_stmt|;
specifier|final
name|int
name|i
init|=
name|searchChildren
argument_list|(
name|newChild
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|i
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|oldChild
operator|==
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|||
name|oldChild
operator|==
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
argument_list|)
expr_stmt|;
name|oldChild
operator|=
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldChild
operator|.
name|isReference
argument_list|()
operator|&&
name|newChild
operator|.
name|isReference
argument_list|()
condition|)
block|{
comment|// both are reference nodes, e.g., DstReference -> WithName
specifier|final
name|INodeReference
operator|.
name|WithCount
name|withCount
init|=
operator|(
name|WithCount
operator|)
name|oldChild
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
name|withCount
operator|.
name|removeReference
argument_list|(
name|oldChild
operator|.
name|asReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|children
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|newChild
argument_list|)
expr_stmt|;
comment|// replace the instance in the created list of the diff list
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|this
operator|.
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|sf
operator|.
name|getDiffs
argument_list|()
operator|.
name|replaceChild
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|,
name|oldChild
argument_list|,
name|newChild
argument_list|)
expr_stmt|;
block|}
comment|// update the inodeMap
if|if
condition|(
name|inodeMap
operator|!=
literal|null
condition|)
block|{
name|inodeMap
operator|.
name|put
argument_list|(
name|newChild
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|replaceChild4ReferenceWithName (INode oldChild, int latestSnapshotId)
name|INodeReference
operator|.
name|WithName
name|replaceChild4ReferenceWithName
parameter_list|(
name|INode
name|oldChild
parameter_list|,
name|int
name|latestSnapshotId
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|latestSnapshotId
operator|!=
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldChild
operator|instanceof
name|INodeReference
operator|.
name|WithName
condition|)
block|{
return|return
operator|(
name|INodeReference
operator|.
name|WithName
operator|)
name|oldChild
return|;
block|}
specifier|final
name|INodeReference
operator|.
name|WithCount
name|withCount
decl_stmt|;
if|if
condition|(
name|oldChild
operator|.
name|isReference
argument_list|()
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|oldChild
operator|instanceof
name|INodeReference
operator|.
name|DstReference
argument_list|)
expr_stmt|;
name|withCount
operator|=
operator|(
name|INodeReference
operator|.
name|WithCount
operator|)
name|oldChild
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|withCount
operator|=
operator|new
name|INodeReference
operator|.
name|WithCount
argument_list|(
literal|null
argument_list|,
name|oldChild
argument_list|)
expr_stmt|;
block|}
specifier|final
name|INodeReference
operator|.
name|WithName
name|ref
init|=
operator|new
name|INodeReference
operator|.
name|WithName
argument_list|(
name|this
argument_list|,
name|withCount
argument_list|,
name|oldChild
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|,
name|latestSnapshotId
argument_list|)
decl_stmt|;
name|replaceChild
argument_list|(
name|oldChild
argument_list|,
name|ref
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|ref
return|;
block|}
annotation|@
name|Override
DECL|method|recordModification (int latestSnapshotId)
specifier|public
name|void
name|recordModification
parameter_list|(
name|int
name|latestSnapshotId
parameter_list|)
block|{
if|if
condition|(
name|isInLatestSnapshot
argument_list|(
name|latestSnapshotId
argument_list|)
operator|&&
operator|!
name|shouldRecordInSrcSnapshot
argument_list|(
name|latestSnapshotId
argument_list|)
condition|)
block|{
comment|// add snapshot feature if necessary
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|==
literal|null
condition|)
block|{
name|sf
operator|=
name|addSnapshotFeature
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// record self in the diff list if necessary
name|sf
operator|.
name|getDiffs
argument_list|()
operator|.
name|saveSelf2Snapshot
argument_list|(
name|latestSnapshotId
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Save the child to the latest snapshot.    *     * @return the child inode, which may be replaced.    */
DECL|method|saveChild2Snapshot (final INode child, final int latestSnapshotId, final INode snapshotCopy)
specifier|public
name|INode
name|saveChild2Snapshot
parameter_list|(
specifier|final
name|INode
name|child
parameter_list|,
specifier|final
name|int
name|latestSnapshotId
parameter_list|,
specifier|final
name|INode
name|snapshotCopy
parameter_list|)
block|{
if|if
condition|(
name|latestSnapshotId
operator|==
name|Snapshot
operator|.
name|CURRENT_STATE_ID
condition|)
block|{
return|return
name|child
return|;
block|}
comment|// add snapshot feature if necessary
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|==
literal|null
condition|)
block|{
name|sf
operator|=
name|this
operator|.
name|addSnapshotFeature
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|sf
operator|.
name|saveChild2Snapshot
argument_list|(
name|this
argument_list|,
name|child
argument_list|,
name|latestSnapshotId
argument_list|,
name|snapshotCopy
argument_list|)
return|;
block|}
comment|/**    * @param name the name of the child    * @param snapshotId    *          if it is not {@link Snapshot#CURRENT_STATE_ID}, get the result    *          from the corresponding snapshot; otherwise, get the result from    *          the current directory.    * @return the child inode.    */
DECL|method|getChild (byte[] name, int snapshotId)
specifier|public
name|INode
name|getChild
parameter_list|(
name|byte
index|[]
name|name
parameter_list|,
name|int
name|snapshotId
parameter_list|)
block|{
name|DirectoryWithSnapshotFeature
name|sf
decl_stmt|;
if|if
condition|(
name|snapshotId
operator|==
name|Snapshot
operator|.
name|CURRENT_STATE_ID
operator|||
operator|(
name|sf
operator|=
name|getDirectoryWithSnapshotFeature
argument_list|()
operator|)
operator|==
literal|null
condition|)
block|{
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|c
init|=
name|getCurrentChildrenList
argument_list|()
decl_stmt|;
specifier|final
name|int
name|i
init|=
name|ReadOnlyList
operator|.
name|Util
operator|.
name|binarySearch
argument_list|(
name|c
argument_list|,
name|name
argument_list|)
decl_stmt|;
return|return
name|i
operator|<
literal|0
condition|?
literal|null
else|:
name|c
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
return|return
name|sf
operator|.
name|getChild
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|snapshotId
argument_list|)
return|;
block|}
comment|/**    * Search for the given INode in the children list and the deleted lists of    * snapshots.    * @return {@link Snapshot#CURRENT_STATE_ID} if the inode is in the children    * list; {@link Snapshot#NO_SNAPSHOT_ID} if the inode is neither in the    * children list nor in any snapshot; otherwise the snapshot id of the    * corresponding snapshot diff list.    */
DECL|method|searchChild (INode inode)
specifier|public
name|int
name|searchChild
parameter_list|(
name|INode
name|inode
parameter_list|)
block|{
name|INode
name|child
init|=
name|getChild
argument_list|(
name|inode
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|!=
name|inode
condition|)
block|{
comment|// inode is not in parent's children list, thus inode must be in
comment|// snapshot. identify the snapshot id and later add it into the path
name|DirectoryDiffList
name|diffs
init|=
name|getDiffs
argument_list|()
decl_stmt|;
if|if
condition|(
name|diffs
operator|==
literal|null
condition|)
block|{
return|return
name|Snapshot
operator|.
name|NO_SNAPSHOT_ID
return|;
block|}
return|return
name|diffs
operator|.
name|findSnapshotDeleted
argument_list|(
name|inode
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Snapshot
operator|.
name|CURRENT_STATE_ID
return|;
block|}
block|}
comment|/**    * @param snapshotId    *          if it is not {@link Snapshot#CURRENT_STATE_ID}, get the result    *          from the corresponding snapshot; otherwise, get the result from    *          the current directory.    * @return the current children list if the specified snapshot is null;    *         otherwise, return the children list corresponding to the snapshot.    *         Note that the returned list is never null.    */
DECL|method|getChildrenList (final int snapshotId)
specifier|public
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|getChildrenList
parameter_list|(
specifier|final
name|int
name|snapshotId
parameter_list|)
block|{
name|DirectoryWithSnapshotFeature
name|sf
decl_stmt|;
if|if
condition|(
name|snapshotId
operator|==
name|Snapshot
operator|.
name|CURRENT_STATE_ID
operator|||
operator|(
name|sf
operator|=
name|this
operator|.
name|getDirectoryWithSnapshotFeature
argument_list|()
operator|)
operator|==
literal|null
condition|)
block|{
return|return
name|getCurrentChildrenList
argument_list|()
return|;
block|}
return|return
name|sf
operator|.
name|getChildrenList
argument_list|(
name|this
argument_list|,
name|snapshotId
argument_list|)
return|;
block|}
DECL|method|getCurrentChildrenList ()
specifier|private
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|getCurrentChildrenList
parameter_list|()
block|{
return|return
name|children
operator|==
literal|null
condition|?
name|ReadOnlyList
operator|.
name|Util
operator|.
expr|<
name|INode
operator|>
name|emptyList
argument_list|()
else|:
name|ReadOnlyList
operator|.
name|Util
operator|.
name|asReadOnlyList
argument_list|(
name|children
argument_list|)
return|;
block|}
comment|/**    * Given a child's name, return the index of the next child    *    * @param name a child's name    * @return the index of the next child    */
DECL|method|nextChild (ReadOnlyList<INode> children, byte[] name)
specifier|static
name|int
name|nextChild
parameter_list|(
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|children
parameter_list|,
name|byte
index|[]
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// empty name
return|return
literal|0
return|;
block|}
name|int
name|nextPos
init|=
name|ReadOnlyList
operator|.
name|Util
operator|.
name|binarySearch
argument_list|(
name|children
argument_list|,
name|name
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|nextPos
operator|>=
literal|0
condition|)
block|{
return|return
name|nextPos
return|;
block|}
return|return
operator|-
name|nextPos
return|;
block|}
comment|/**    * Remove the specified child from this directory.    */
DECL|method|removeChild (INode child, int latestSnapshotId)
specifier|public
name|boolean
name|removeChild
parameter_list|(
name|INode
name|child
parameter_list|,
name|int
name|latestSnapshotId
parameter_list|)
block|{
if|if
condition|(
name|isInLatestSnapshot
argument_list|(
name|latestSnapshotId
argument_list|)
condition|)
block|{
comment|// create snapshot feature if necessary
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|this
operator|.
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|==
literal|null
condition|)
block|{
name|sf
operator|=
name|this
operator|.
name|addSnapshotFeature
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|sf
operator|.
name|removeChild
argument_list|(
name|this
argument_list|,
name|child
argument_list|,
name|latestSnapshotId
argument_list|)
return|;
block|}
return|return
name|removeChild
argument_list|(
name|child
argument_list|)
return|;
block|}
comment|/**     * Remove the specified child from this directory.    * The basic remove method which actually calls children.remove(..).    *    * @param child the child inode to be removed    *     * @return true if the child is removed; false if the child is not found.    */
DECL|method|removeChild (final INode child)
specifier|public
name|boolean
name|removeChild
parameter_list|(
specifier|final
name|INode
name|child
parameter_list|)
block|{
specifier|final
name|int
name|i
init|=
name|searchChildren
argument_list|(
name|child
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|INode
name|removed
init|=
name|children
operator|.
name|remove
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|removed
operator|==
name|child
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Add a child inode to the directory.    *     * @param node INode to insert    * @param setModTime set modification time for the parent node    *                   not needed when replaying the addition and     *                   the parent already has the proper mod time    * @return false if the child with this name already exists;     *         otherwise, return true;    */
DECL|method|addChild (INode node, final boolean setModTime, final int latestSnapshotId)
specifier|public
name|boolean
name|addChild
parameter_list|(
name|INode
name|node
parameter_list|,
specifier|final
name|boolean
name|setModTime
parameter_list|,
specifier|final
name|int
name|latestSnapshotId
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
specifier|final
name|int
name|low
init|=
name|searchChildren
argument_list|(
name|node
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|low
operator|>=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isInLatestSnapshot
argument_list|(
name|latestSnapshotId
argument_list|)
condition|)
block|{
comment|// create snapshot feature if necessary
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|this
operator|.
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|==
literal|null
condition|)
block|{
name|sf
operator|=
name|this
operator|.
name|addSnapshotFeature
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|sf
operator|.
name|addChild
argument_list|(
name|this
argument_list|,
name|node
argument_list|,
name|setModTime
argument_list|,
name|latestSnapshotId
argument_list|)
return|;
block|}
name|addChild
argument_list|(
name|node
argument_list|,
name|low
argument_list|)
expr_stmt|;
if|if
condition|(
name|setModTime
condition|)
block|{
comment|// update modification time of the parent directory
name|updateModificationTime
argument_list|(
name|node
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|latestSnapshotId
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|addChild (INode node)
specifier|public
name|boolean
name|addChild
parameter_list|(
name|INode
name|node
parameter_list|)
block|{
specifier|final
name|int
name|low
init|=
name|searchChildren
argument_list|(
name|node
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|low
operator|>=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|addChild
argument_list|(
name|node
argument_list|,
name|low
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Add the node to the children list at the given insertion point.    * The basic add method which actually calls children.add(..).    */
DECL|method|addChild (final INode node, final int insertionPoint)
specifier|private
name|void
name|addChild
parameter_list|(
specifier|final
name|INode
name|node
parameter_list|,
specifier|final
name|int
name|insertionPoint
parameter_list|)
block|{
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
name|children
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|DEFAULT_FILES_PER_DIRECTORY
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|-
name|insertionPoint
operator|-
literal|1
argument_list|,
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getGroupName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|node
operator|.
name|setGroup
argument_list|(
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|computeQuotaUsage (BlockStoragePolicySuite bsps, byte blockStoragePolicyId, boolean useCache, int lastSnapshotId)
specifier|public
name|QuotaCounts
name|computeQuotaUsage
parameter_list|(
name|BlockStoragePolicySuite
name|bsps
parameter_list|,
name|byte
name|blockStoragePolicyId
parameter_list|,
name|boolean
name|useCache
parameter_list|,
name|int
name|lastSnapshotId
parameter_list|)
block|{
specifier|final
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
name|QuotaCounts
name|counts
init|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// we are computing the quota usage for a specific snapshot here, i.e., the
comment|// computation only includes files/directories that exist at the time of the
comment|// given snapshot
if|if
condition|(
name|sf
operator|!=
literal|null
operator|&&
name|lastSnapshotId
operator|!=
name|Snapshot
operator|.
name|CURRENT_STATE_ID
operator|&&
operator|!
operator|(
name|useCache
operator|&&
name|isQuotaSet
argument_list|()
operator|)
condition|)
block|{
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|childrenList
init|=
name|getChildrenList
argument_list|(
name|lastSnapshotId
argument_list|)
decl_stmt|;
for|for
control|(
name|INode
name|child
range|:
name|childrenList
control|)
block|{
specifier|final
name|byte
name|childPolicyId
init|=
name|child
operator|.
name|getStoragePolicyIDForQuota
argument_list|(
name|blockStoragePolicyId
argument_list|)
decl_stmt|;
name|counts
operator|.
name|add
argument_list|(
name|child
operator|.
name|computeQuotaUsage
argument_list|(
name|bsps
argument_list|,
name|childPolicyId
argument_list|,
name|useCache
argument_list|,
name|lastSnapshotId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|counts
operator|.
name|addNameSpace
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|counts
return|;
block|}
comment|// compute the quota usage in the scope of the current directory tree
specifier|final
name|DirectoryWithQuotaFeature
name|q
init|=
name|getDirectoryWithQuotaFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|useCache
operator|&&
name|q
operator|!=
literal|null
operator|&&
name|q
operator|.
name|isQuotaSet
argument_list|()
condition|)
block|{
comment|// use the cached quota
return|return
name|q
operator|.
name|AddCurrentSpaceUsage
argument_list|(
name|counts
argument_list|)
return|;
block|}
else|else
block|{
name|useCache
operator|=
name|q
operator|!=
literal|null
operator|&&
operator|!
name|q
operator|.
name|isQuotaSet
argument_list|()
condition|?
literal|false
else|:
name|useCache
expr_stmt|;
return|return
name|computeDirectoryQuotaUsage
argument_list|(
name|bsps
argument_list|,
name|blockStoragePolicyId
argument_list|,
name|counts
argument_list|,
name|useCache
argument_list|,
name|lastSnapshotId
argument_list|)
return|;
block|}
block|}
DECL|method|computeDirectoryQuotaUsage (BlockStoragePolicySuite bsps, byte blockStoragePolicyId, QuotaCounts counts, boolean useCache, int lastSnapshotId)
specifier|private
name|QuotaCounts
name|computeDirectoryQuotaUsage
parameter_list|(
name|BlockStoragePolicySuite
name|bsps
parameter_list|,
name|byte
name|blockStoragePolicyId
parameter_list|,
name|QuotaCounts
name|counts
parameter_list|,
name|boolean
name|useCache
parameter_list|,
name|int
name|lastSnapshotId
parameter_list|)
block|{
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|INode
name|child
range|:
name|children
control|)
block|{
specifier|final
name|byte
name|childPolicyId
init|=
name|child
operator|.
name|getStoragePolicyIDForQuota
argument_list|(
name|blockStoragePolicyId
argument_list|)
decl_stmt|;
name|counts
operator|.
name|add
argument_list|(
name|child
operator|.
name|computeQuotaUsage
argument_list|(
name|bsps
argument_list|,
name|childPolicyId
argument_list|,
name|useCache
argument_list|,
name|lastSnapshotId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|computeQuotaUsage4CurrentDirectory
argument_list|(
name|bsps
argument_list|,
name|blockStoragePolicyId
argument_list|,
name|counts
argument_list|)
return|;
block|}
comment|/** Add quota usage for this inode excluding children. */
DECL|method|computeQuotaUsage4CurrentDirectory ( BlockStoragePolicySuite bsps, byte storagePolicyId, QuotaCounts counts)
specifier|public
name|QuotaCounts
name|computeQuotaUsage4CurrentDirectory
parameter_list|(
name|BlockStoragePolicySuite
name|bsps
parameter_list|,
name|byte
name|storagePolicyId
parameter_list|,
name|QuotaCounts
name|counts
parameter_list|)
block|{
name|counts
operator|.
name|addNameSpace
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// include the diff list
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|counts
operator|.
name|add
argument_list|(
name|sf
operator|.
name|computeQuotaUsage4CurrentDirectory
argument_list|(
name|bsps
argument_list|,
name|storagePolicyId
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|counts
return|;
block|}
annotation|@
name|Override
DECL|method|computeContentSummary ( ContentSummaryComputationContext summary)
specifier|public
name|ContentSummaryComputationContext
name|computeContentSummary
parameter_list|(
name|ContentSummaryComputationContext
name|summary
parameter_list|)
block|{
specifier|final
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|sf
operator|.
name|computeContentSummary4Snapshot
argument_list|(
name|summary
operator|.
name|getBlockStoragePolicySuite
argument_list|()
argument_list|,
name|summary
operator|.
name|getCounts
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DirectoryWithQuotaFeature
name|q
init|=
name|getDirectoryWithQuotaFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
return|return
name|q
operator|.
name|computeContentSummary
argument_list|(
name|this
argument_list|,
name|summary
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|computeDirectoryContentSummary
argument_list|(
name|summary
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
return|;
block|}
block|}
DECL|method|computeDirectoryContentSummary ( ContentSummaryComputationContext summary, int snapshotId)
specifier|protected
name|ContentSummaryComputationContext
name|computeDirectoryContentSummary
parameter_list|(
name|ContentSummaryComputationContext
name|summary
parameter_list|,
name|int
name|snapshotId
parameter_list|)
block|{
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|childrenList
init|=
name|getChildrenList
argument_list|(
name|snapshotId
argument_list|)
decl_stmt|;
comment|// Explicit traversing is done to enable repositioning after relinquishing
comment|// and reacquiring locks.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childrenList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|INode
name|child
init|=
name|childrenList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|childName
init|=
name|child
operator|.
name|getLocalNameBytes
argument_list|()
decl_stmt|;
name|long
name|lastYieldCount
init|=
name|summary
operator|.
name|getYieldCount
argument_list|()
decl_stmt|;
name|child
operator|.
name|computeContentSummary
argument_list|(
name|summary
argument_list|)
expr_stmt|;
comment|// Check whether the computation was paused in the subtree.
comment|// The counts may be off, but traversing the rest of children
comment|// should be made safe.
if|if
condition|(
name|lastYieldCount
operator|==
name|summary
operator|.
name|getYieldCount
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// The locks were released and reacquired. Check parent first.
if|if
condition|(
name|getParent
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Stop further counting and return whatever we have so far.
break|break;
block|}
comment|// Obtain the children list again since it may have been modified.
name|childrenList
operator|=
name|getChildrenList
argument_list|(
name|snapshotId
argument_list|)
expr_stmt|;
comment|// Reposition in case the children list is changed. Decrement by 1
comment|// since it will be incremented when loops.
name|i
operator|=
name|nextChild
argument_list|(
name|childrenList
argument_list|,
name|childName
argument_list|)
operator|-
literal|1
expr_stmt|;
block|}
comment|// Increment the directory count for this directory.
name|summary
operator|.
name|getCounts
argument_list|()
operator|.
name|addContent
argument_list|(
name|Content
operator|.
name|DIRECTORY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Relinquish and reacquire locks if necessary.
name|summary
operator|.
name|yield
argument_list|()
expr_stmt|;
return|return
name|summary
return|;
block|}
comment|/**    * This method is usually called by the undo section of rename.    *     * Before calling this function, in the rename operation, we replace the    * original src node (of the rename operation) with a reference node (WithName    * instance) in both the children list and a created list, delete the    * reference node from the children list, and add it to the corresponding    * deleted list.    *     * To undo the above operations, we have the following steps in particular:    *     *<pre>    * 1) remove the WithName node from the deleted list (if it exists)     * 2) replace the WithName node in the created list with srcChild     * 3) add srcChild back as a child of srcParent. Note that we already add     * the node into the created list of a snapshot diff in step 2, we do not need    * to add srcChild to the created list of the latest snapshot.    *</pre>    *     * We do not need to update quota usage because the old child is in the     * deleted list before.     *     * @param oldChild    *          The reference node to be removed/replaced    * @param newChild    *          The node to be added back    * @throws QuotaExceededException should not throw this exception    */
DECL|method|undoRename4ScrParent (final INodeReference oldChild, final INode newChild)
specifier|public
name|void
name|undoRename4ScrParent
parameter_list|(
specifier|final
name|INodeReference
name|oldChild
parameter_list|,
specifier|final
name|INode
name|newChild
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
assert|assert
name|sf
operator|!=
literal|null
operator|:
literal|"Directory does not have snapshot feature"
assert|;
name|sf
operator|.
name|getDiffs
argument_list|()
operator|.
name|removeChild
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|,
name|oldChild
argument_list|)
expr_stmt|;
name|sf
operator|.
name|getDiffs
argument_list|()
operator|.
name|replaceChild
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|,
name|oldChild
argument_list|,
name|newChild
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
name|newChild
argument_list|,
literal|true
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
expr_stmt|;
block|}
comment|/**    * Undo the rename operation for the dst tree, i.e., if the rename operation    * (with OVERWRITE option) removes a file/dir from the dst tree, add it back    * and delete possible record in the deleted list.      */
DECL|method|undoRename4DstParent (final BlockStoragePolicySuite bsps, final INode deletedChild, int latestSnapshotId)
specifier|public
name|void
name|undoRename4DstParent
parameter_list|(
specifier|final
name|BlockStoragePolicySuite
name|bsps
parameter_list|,
specifier|final
name|INode
name|deletedChild
parameter_list|,
name|int
name|latestSnapshotId
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
assert|assert
name|sf
operator|!=
literal|null
operator|:
literal|"Directory does not have snapshot feature"
assert|;
name|boolean
name|removeDeletedChild
init|=
name|sf
operator|.
name|getDiffs
argument_list|()
operator|.
name|removeChild
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|,
name|deletedChild
argument_list|)
decl_stmt|;
name|int
name|sid
init|=
name|removeDeletedChild
condition|?
name|Snapshot
operator|.
name|CURRENT_STATE_ID
else|:
name|latestSnapshotId
decl_stmt|;
specifier|final
name|boolean
name|added
init|=
name|addChild
argument_list|(
name|deletedChild
argument_list|,
literal|true
argument_list|,
name|sid
argument_list|)
decl_stmt|;
comment|// update quota usage if adding is successfully and the old child has not
comment|// been stored in deleted list before
if|if
condition|(
name|added
operator|&&
operator|!
name|removeDeletedChild
condition|)
block|{
specifier|final
name|QuotaCounts
name|counts
init|=
name|deletedChild
operator|.
name|computeQuotaUsage
argument_list|(
name|bsps
argument_list|)
decl_stmt|;
name|addSpaceConsumed
argument_list|(
name|counts
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Set the children list to null. */
DECL|method|clearChildren ()
specifier|public
name|void
name|clearChildren
parameter_list|()
block|{
name|this
operator|.
name|children
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|clearChildren
argument_list|()
expr_stmt|;
block|}
comment|/** Call cleanSubtree(..) recursively down the subtree. */
DECL|method|cleanSubtreeRecursively ( ReclaimContext reclaimContext, final int snapshot, int prior, final Map<INode, INode> excludedNodes)
specifier|public
name|void
name|cleanSubtreeRecursively
parameter_list|(
name|ReclaimContext
name|reclaimContext
parameter_list|,
specifier|final
name|int
name|snapshot
parameter_list|,
name|int
name|prior
parameter_list|,
specifier|final
name|Map
argument_list|<
name|INode
argument_list|,
name|INode
argument_list|>
name|excludedNodes
parameter_list|)
block|{
comment|// in case of deletion snapshot, since this call happens after we modify
comment|// the diff list, the snapshot to be deleted has been combined or renamed
comment|// to its latest previous snapshot. (besides, we also need to consider nodes
comment|// created after prior but before snapshot. this will be done in
comment|// DirectoryWithSnapshotFeature)
name|int
name|s
init|=
name|snapshot
operator|!=
name|Snapshot
operator|.
name|CURRENT_STATE_ID
operator|&&
name|prior
operator|!=
name|Snapshot
operator|.
name|NO_SNAPSHOT_ID
condition|?
name|prior
else|:
name|snapshot
decl_stmt|;
for|for
control|(
name|INode
name|child
range|:
name|getChildrenList
argument_list|(
name|s
argument_list|)
control|)
block|{
if|if
condition|(
name|snapshot
operator|==
name|Snapshot
operator|.
name|CURRENT_STATE_ID
operator|||
name|excludedNodes
operator|==
literal|null
operator|||
operator|!
name|excludedNodes
operator|.
name|containsKey
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|child
operator|.
name|cleanSubtree
argument_list|(
name|reclaimContext
argument_list|,
name|snapshot
argument_list|,
name|prior
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|destroyAndCollectBlocks (ReclaimContext reclaimContext)
specifier|public
name|void
name|destroyAndCollectBlocks
parameter_list|(
name|ReclaimContext
name|reclaimContext
parameter_list|)
block|{
name|reclaimContext
operator|.
name|quotaDelta
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|nameSpace
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|sf
operator|.
name|clear
argument_list|(
name|reclaimContext
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|INode
name|child
range|:
name|getChildrenList
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
control|)
block|{
name|child
operator|.
name|destroyAndCollectBlocks
argument_list|(
name|reclaimContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getAclFeature
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|AclStorage
operator|.
name|removeAclFeature
argument_list|(
name|getAclFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|clear
argument_list|()
expr_stmt|;
name|reclaimContext
operator|.
name|removedINodes
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cleanSubtree (ReclaimContext reclaimContext, final int snapshotId, int priorSnapshotId)
specifier|public
name|void
name|cleanSubtree
parameter_list|(
name|ReclaimContext
name|reclaimContext
parameter_list|,
specifier|final
name|int
name|snapshotId
parameter_list|,
name|int
name|priorSnapshotId
parameter_list|)
block|{
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
comment|// there is snapshot data
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|sf
operator|.
name|cleanDirectory
argument_list|(
name|reclaimContext
argument_list|,
name|this
argument_list|,
name|snapshotId
argument_list|,
name|priorSnapshotId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// there is no snapshot data
if|if
condition|(
name|priorSnapshotId
operator|==
name|Snapshot
operator|.
name|NO_SNAPSHOT_ID
operator|&&
name|snapshotId
operator|==
name|Snapshot
operator|.
name|CURRENT_STATE_ID
condition|)
block|{
comment|// destroy the whole subtree and collect blocks that should be deleted
name|destroyAndCollectBlocks
argument_list|(
name|reclaimContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// make a copy the quota delta
name|QuotaCounts
name|old
init|=
name|reclaimContext
operator|.
name|quotaDelta
argument_list|()
operator|.
name|getCountsCopy
argument_list|()
decl_stmt|;
comment|// process recursively down the subtree
name|cleanSubtreeRecursively
argument_list|(
name|reclaimContext
argument_list|,
name|snapshotId
argument_list|,
name|priorSnapshotId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|QuotaCounts
name|current
init|=
name|reclaimContext
operator|.
name|quotaDelta
argument_list|()
operator|.
name|getCountsCopy
argument_list|()
decl_stmt|;
name|current
operator|.
name|subtract
argument_list|(
name|old
argument_list|)
expr_stmt|;
if|if
condition|(
name|isQuotaSet
argument_list|()
condition|)
block|{
name|reclaimContext
operator|.
name|quotaDelta
argument_list|()
operator|.
name|addQuotaDirUpdate
argument_list|(
name|this
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Compare the metadata with another INodeDirectory    */
annotation|@
name|Override
DECL|method|metadataEquals (INodeDirectoryAttributes other)
specifier|public
name|boolean
name|metadataEquals
parameter_list|(
name|INodeDirectoryAttributes
name|other
parameter_list|)
block|{
return|return
name|other
operator|!=
literal|null
operator|&&
name|getQuotaCounts
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getQuotaCounts
argument_list|()
argument_list|)
operator|&&
name|getPermissionLong
argument_list|()
operator|==
name|other
operator|.
name|getPermissionLong
argument_list|()
operator|&&
name|getAclFeature
argument_list|()
operator|==
name|other
operator|.
name|getAclFeature
argument_list|()
operator|&&
name|getXAttrFeature
argument_list|()
operator|==
name|other
operator|.
name|getXAttrFeature
argument_list|()
return|;
block|}
comment|/*    * The following code is to dump the tree recursively for testing.    *     *      \- foo   (INodeDirectory@33dd2717)    *        \- sub1   (INodeDirectory@442172)    *          +- file1   (INodeFile@78392d4)    *          +- file2   (INodeFile@78392d5)    *          +- sub11   (INodeDirectory@8400cff)    *            \- file3   (INodeFile@78392d6)    *          \- z_file4   (INodeFile@45848712)    */
DECL|field|DUMPTREE_EXCEPT_LAST_ITEM
specifier|static
specifier|final
name|String
name|DUMPTREE_EXCEPT_LAST_ITEM
init|=
literal|"+-"
decl_stmt|;
DECL|field|DUMPTREE_LAST_ITEM
specifier|static
specifier|final
name|String
name|DUMPTREE_LAST_ITEM
init|=
literal|"\\-"
decl_stmt|;
annotation|@
name|VisibleForTesting
annotation|@
name|Override
DECL|method|dumpTreeRecursively (PrintWriter out, StringBuilder prefix, final int snapshot)
specifier|public
name|void
name|dumpTreeRecursively
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|StringBuilder
name|prefix
parameter_list|,
specifier|final
name|int
name|snapshot
parameter_list|)
block|{
name|super
operator|.
name|dumpTreeRecursively
argument_list|(
name|out
argument_list|,
name|prefix
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|", childrenSize="
operator|+
name|getChildrenList
argument_list|(
name|snapshot
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DirectoryWithQuotaFeature
name|q
init|=
name|getDirectoryWithQuotaFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|", "
operator|+
name|q
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|instanceof
name|Snapshot
operator|.
name|Root
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|", snapshotId="
operator|+
name|snapshot
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|prefix
operator|.
name|setLength
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|prefix
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
block|}
name|dumpTreeRecursively
argument_list|(
name|out
argument_list|,
name|prefix
argument_list|,
operator|new
name|Iterable
argument_list|<
name|SnapshotAndINode
argument_list|>
argument_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|INode
argument_list|>
name|i
init|=
name|getChildrenList
argument_list|(
name|snapshot
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|SnapshotAndINode
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|SnapshotAndINode
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|i
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SnapshotAndINode
name|next
parameter_list|()
block|{
return|return
operator|new
name|SnapshotAndINode
argument_list|(
name|snapshot
argument_list|,
name|i
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|DirectorySnapshottableFeature
name|s
init|=
name|getDirectorySnapshottableFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|dumpTreeRecursively
argument_list|(
name|this
argument_list|,
name|out
argument_list|,
name|prefix
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Dump the given subtrees.    * @param prefix The prefix string that each line should print.    * @param subs The subtrees.    */
annotation|@
name|VisibleForTesting
DECL|method|dumpTreeRecursively (PrintWriter out, StringBuilder prefix, Iterable<SnapshotAndINode> subs)
specifier|public
specifier|static
name|void
name|dumpTreeRecursively
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|StringBuilder
name|prefix
parameter_list|,
name|Iterable
argument_list|<
name|SnapshotAndINode
argument_list|>
name|subs
parameter_list|)
block|{
if|if
condition|(
name|subs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|SnapshotAndINode
argument_list|>
name|i
init|=
name|subs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|SnapshotAndINode
name|pair
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|prefix
operator|.
name|append
argument_list|(
name|i
operator|.
name|hasNext
argument_list|()
condition|?
name|DUMPTREE_EXCEPT_LAST_ITEM
else|:
name|DUMPTREE_LAST_ITEM
argument_list|)
expr_stmt|;
name|pair
operator|.
name|inode
operator|.
name|dumpTreeRecursively
argument_list|(
name|out
argument_list|,
name|prefix
argument_list|,
name|pair
operator|.
name|snapshotId
argument_list|)
expr_stmt|;
name|prefix
operator|.
name|setLength
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** A pair of Snapshot and INode objects. */
DECL|class|SnapshotAndINode
specifier|public
specifier|static
class|class
name|SnapshotAndINode
block|{
DECL|field|snapshotId
specifier|public
specifier|final
name|int
name|snapshotId
decl_stmt|;
DECL|field|inode
specifier|public
specifier|final
name|INode
name|inode
decl_stmt|;
DECL|method|SnapshotAndINode (int snapshot, INode inode)
specifier|public
name|SnapshotAndINode
parameter_list|(
name|int
name|snapshot
parameter_list|,
name|INode
name|inode
parameter_list|)
block|{
name|this
operator|.
name|snapshotId
operator|=
name|snapshot
expr_stmt|;
name|this
operator|.
name|inode
operator|=
name|inode
expr_stmt|;
block|}
block|}
DECL|method|getChildrenNum (final int snapshotId)
specifier|public
specifier|final
name|int
name|getChildrenNum
parameter_list|(
specifier|final
name|int
name|snapshotId
parameter_list|)
block|{
return|return
name|getChildrenList
argument_list|(
name|snapshotId
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

