begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A low memory linked hash set implementation, which uses an array for storing  * the elements and linked lists for collision resolution. This class does not  * support null element.  *  * This class is not thread safe.  *  */
end_comment

begin_class
DECL|class|LightWeightHashSet
specifier|public
class|class
name|LightWeightHashSet
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Collection
argument_list|<
name|T
argument_list|>
block|{
comment|/**    * Elements of {@link LightWeightLinkedSet}.    */
DECL|class|LinkedElement
specifier|static
class|class
name|LinkedElement
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|element
specifier|protected
specifier|final
name|T
name|element
decl_stmt|;
comment|// reference to the next entry within a bucket linked list
DECL|field|next
specifier|protected
name|LinkedElement
argument_list|<
name|T
argument_list|>
name|next
decl_stmt|;
comment|//hashCode of the element
DECL|field|hashCode
specifier|protected
specifier|final
name|int
name|hashCode
decl_stmt|;
DECL|method|LinkedElement (T elem, int hash)
specifier|public
name|LinkedElement
parameter_list|(
name|T
name|elem
parameter_list|,
name|int
name|hash
parameter_list|)
block|{
name|this
operator|.
name|element
operator|=
name|elem
expr_stmt|;
name|this
operator|.
name|next
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|hashCode
operator|=
name|hash
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|element
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|field|DEFAULT_MAX_LOAD_FACTOR
specifier|protected
specifier|static
specifier|final
name|float
name|DEFAULT_MAX_LOAD_FACTOR
init|=
literal|0.75f
decl_stmt|;
DECL|field|DEFAUT_MIN_LOAD_FACTOR
specifier|protected
specifier|static
specifier|final
name|float
name|DEFAUT_MIN_LOAD_FACTOR
init|=
literal|0.2f
decl_stmt|;
DECL|field|MINIMUM_CAPACITY
specifier|protected
specifier|static
specifier|final
name|int
name|MINIMUM_CAPACITY
init|=
literal|16
decl_stmt|;
DECL|field|MAXIMUM_CAPACITY
specifier|static
specifier|final
name|int
name|MAXIMUM_CAPACITY
init|=
literal|1
operator|<<
literal|30
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LightWeightHashSet
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * An internal array of entries, which are the rows of the hash table. The    * size must be a power of two.    */
DECL|field|entries
specifier|protected
name|LinkedElement
argument_list|<
name|T
argument_list|>
index|[]
name|entries
decl_stmt|;
comment|/** Size of the entry table. */
DECL|field|capacity
specifier|private
name|int
name|capacity
decl_stmt|;
comment|/** The size of the set (not the entry array). */
DECL|field|size
specifier|protected
name|int
name|size
init|=
literal|0
decl_stmt|;
comment|/** Hashmask used for determining the bucket index **/
DECL|field|hash_mask
specifier|private
name|int
name|hash_mask
decl_stmt|;
comment|/** Capacity at initialization time **/
DECL|field|initialCapacity
specifier|private
specifier|final
name|int
name|initialCapacity
decl_stmt|;
comment|/**    * Modification version for fail-fast.    *    * @see ConcurrentModificationException    */
DECL|field|modification
specifier|protected
name|int
name|modification
init|=
literal|0
decl_stmt|;
DECL|field|maxLoadFactor
specifier|private
name|float
name|maxLoadFactor
decl_stmt|;
DECL|field|minLoadFactor
specifier|private
name|float
name|minLoadFactor
decl_stmt|;
DECL|field|expandMultiplier
specifier|private
specifier|final
name|int
name|expandMultiplier
init|=
literal|2
decl_stmt|;
DECL|field|expandThreshold
specifier|private
name|int
name|expandThreshold
decl_stmt|;
DECL|field|shrinkThreshold
specifier|private
name|int
name|shrinkThreshold
decl_stmt|;
comment|/**    * @param initCapacity    *          Recommended size of the internal array.    * @param maxLoadFactor    *          used to determine when to expand the internal array    * @param minLoadFactor    *          used to determine when to shrink the internal array    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|LightWeightHashSet (int initCapacity, float maxLoadFactor, float minLoadFactor)
specifier|public
name|LightWeightHashSet
parameter_list|(
name|int
name|initCapacity
parameter_list|,
name|float
name|maxLoadFactor
parameter_list|,
name|float
name|minLoadFactor
parameter_list|)
block|{
if|if
condition|(
name|maxLoadFactor
operator|<=
literal|0
operator|||
name|maxLoadFactor
operator|>
literal|1.0f
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal maxload factor: "
operator|+
name|maxLoadFactor
argument_list|)
throw|;
if|if
condition|(
name|minLoadFactor
operator|<=
literal|0
operator|||
name|minLoadFactor
operator|>
name|maxLoadFactor
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal minload factor: "
operator|+
name|minLoadFactor
argument_list|)
throw|;
name|this
operator|.
name|initialCapacity
operator|=
name|computeCapacity
argument_list|(
name|initCapacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|capacity
operator|=
name|this
operator|.
name|initialCapacity
expr_stmt|;
name|this
operator|.
name|hash_mask
operator|=
name|capacity
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|maxLoadFactor
operator|=
name|maxLoadFactor
expr_stmt|;
name|this
operator|.
name|expandThreshold
operator|=
call|(
name|int
call|)
argument_list|(
name|capacity
operator|*
name|maxLoadFactor
argument_list|)
expr_stmt|;
name|this
operator|.
name|minLoadFactor
operator|=
name|minLoadFactor
expr_stmt|;
name|this
operator|.
name|shrinkThreshold
operator|=
call|(
name|int
call|)
argument_list|(
name|capacity
operator|*
name|minLoadFactor
argument_list|)
expr_stmt|;
name|entries
operator|=
operator|new
name|LinkedElement
index|[
name|capacity
index|]
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"initial capacity="
operator|+
name|initialCapacity
operator|+
literal|", max load factor= "
operator|+
name|maxLoadFactor
operator|+
literal|", min load factor= "
operator|+
name|minLoadFactor
argument_list|)
expr_stmt|;
block|}
DECL|method|LightWeightHashSet ()
specifier|public
name|LightWeightHashSet
parameter_list|()
block|{
name|this
argument_list|(
name|MINIMUM_CAPACITY
argument_list|,
name|DEFAULT_MAX_LOAD_FACTOR
argument_list|,
name|DEFAUT_MIN_LOAD_FACTOR
argument_list|)
expr_stmt|;
block|}
DECL|method|LightWeightHashSet (int minCapacity)
specifier|public
name|LightWeightHashSet
parameter_list|(
name|int
name|minCapacity
parameter_list|)
block|{
name|this
argument_list|(
name|minCapacity
argument_list|,
name|DEFAULT_MAX_LOAD_FACTOR
argument_list|,
name|DEFAUT_MIN_LOAD_FACTOR
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if the set is empty.    *    * @return true is set empty, false otherwise    */
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
operator|==
literal|0
return|;
block|}
comment|/**    * Return the current capacity (for testing).    */
DECL|method|getCapacity ()
specifier|public
name|int
name|getCapacity
parameter_list|()
block|{
return|return
name|capacity
return|;
block|}
comment|/**    * Return the number of stored elements.    */
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/**    * Get index in the internal table for a given hash.    */
DECL|method|getIndex (int hashCode)
specifier|protected
name|int
name|getIndex
parameter_list|(
name|int
name|hashCode
parameter_list|)
block|{
return|return
name|hashCode
operator|&
name|hash_mask
return|;
block|}
comment|/**    * Check if the set contains given element    *    * @return true if element present, false otherwise.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|contains (final Object key)
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|Object
name|key
parameter_list|)
block|{
return|return
name|getElement
argument_list|(
operator|(
name|T
operator|)
name|key
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * Return the element in this set which is equal to    * the given key, if such an element exists.    * Otherwise returns null.    */
DECL|method|getElement (final T key)
specifier|public
name|T
name|getElement
parameter_list|(
specifier|final
name|T
name|key
parameter_list|)
block|{
comment|// validate key
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null element is not supported."
argument_list|)
throw|;
block|}
comment|// find element
specifier|final
name|int
name|hashCode
init|=
name|key
operator|.
name|hashCode
argument_list|()
decl_stmt|;
specifier|final
name|int
name|index
init|=
name|getIndex
argument_list|(
name|hashCode
argument_list|)
decl_stmt|;
return|return
name|getContainedElem
argument_list|(
name|index
argument_list|,
name|key
argument_list|,
name|hashCode
argument_list|)
return|;
block|}
comment|/**    * Check if the set contains given element at given index. If it    * does, return that element.    *    * @return the element, or null, if no element matches    */
DECL|method|getContainedElem (int index, final T key, int hashCode)
specifier|protected
name|T
name|getContainedElem
parameter_list|(
name|int
name|index
parameter_list|,
specifier|final
name|T
name|key
parameter_list|,
name|int
name|hashCode
parameter_list|)
block|{
for|for
control|(
name|LinkedElement
argument_list|<
name|T
argument_list|>
name|e
init|=
name|entries
index|[
name|index
index|]
init|;
name|e
operator|!=
literal|null
condition|;
name|e
operator|=
name|e
operator|.
name|next
control|)
block|{
comment|// element found
if|if
condition|(
name|hashCode
operator|==
name|e
operator|.
name|hashCode
operator|&&
name|e
operator|.
name|element
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|e
operator|.
name|element
return|;
block|}
block|}
comment|// element not found
return|return
literal|null
return|;
block|}
comment|/**    * All all elements in the collection. Expand if necessary.    *    * @param toAdd - elements to add.    * @return true if the set has changed, false otherwise    */
annotation|@
name|Override
DECL|method|addAll (Collection<? extends T> toAdd)
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|toAdd
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|T
name|elem
range|:
name|toAdd
control|)
block|{
name|changed
operator||=
name|addElem
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
name|expandIfNecessary
argument_list|()
expr_stmt|;
return|return
name|changed
return|;
block|}
comment|/**    * Add given element to the hash table. Expand table if necessary.    *    * @return true if the element was not present in the table, false otherwise    */
annotation|@
name|Override
DECL|method|add (final T element)
specifier|public
name|boolean
name|add
parameter_list|(
specifier|final
name|T
name|element
parameter_list|)
block|{
name|boolean
name|added
init|=
name|addElem
argument_list|(
name|element
argument_list|)
decl_stmt|;
name|expandIfNecessary
argument_list|()
expr_stmt|;
return|return
name|added
return|;
block|}
comment|/**    * Add given element to the hash table    *    * @return true if the element was not present in the table, false otherwise    */
DECL|method|addElem (final T element)
specifier|protected
name|boolean
name|addElem
parameter_list|(
specifier|final
name|T
name|element
parameter_list|)
block|{
comment|// validate element
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null element is not supported."
argument_list|)
throw|;
block|}
comment|// find hashCode& index
specifier|final
name|int
name|hashCode
init|=
name|element
operator|.
name|hashCode
argument_list|()
decl_stmt|;
specifier|final
name|int
name|index
init|=
name|getIndex
argument_list|(
name|hashCode
argument_list|)
decl_stmt|;
comment|// return false if already present
if|if
condition|(
name|getContainedElem
argument_list|(
name|index
argument_list|,
name|element
argument_list|,
name|hashCode
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|modification
operator|++
expr_stmt|;
name|size
operator|++
expr_stmt|;
comment|// update bucket linked list
name|LinkedElement
argument_list|<
name|T
argument_list|>
name|le
init|=
operator|new
name|LinkedElement
argument_list|<
name|T
argument_list|>
argument_list|(
name|element
argument_list|,
name|hashCode
argument_list|)
decl_stmt|;
name|le
operator|.
name|next
operator|=
name|entries
index|[
name|index
index|]
expr_stmt|;
name|entries
index|[
name|index
index|]
operator|=
name|le
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Remove the element corresponding to the key.    *    * @return If such element exists, return true. Otherwise, return false.    */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|remove (final Object key)
specifier|public
name|boolean
name|remove
parameter_list|(
specifier|final
name|Object
name|key
parameter_list|)
block|{
comment|// validate key
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null element is not supported."
argument_list|)
throw|;
block|}
name|LinkedElement
argument_list|<
name|T
argument_list|>
name|removed
init|=
name|removeElem
argument_list|(
operator|(
name|T
operator|)
name|key
argument_list|)
decl_stmt|;
name|shrinkIfNecessary
argument_list|()
expr_stmt|;
return|return
name|removed
operator|==
literal|null
condition|?
literal|false
else|:
literal|true
return|;
block|}
comment|/**    * Remove the element corresponding to the key, given key.hashCode() == index.    *    * @return If such element exists, return true. Otherwise, return false.    */
DECL|method|removeElem (final T key)
specifier|protected
name|LinkedElement
argument_list|<
name|T
argument_list|>
name|removeElem
parameter_list|(
specifier|final
name|T
name|key
parameter_list|)
block|{
name|LinkedElement
argument_list|<
name|T
argument_list|>
name|found
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|hashCode
init|=
name|key
operator|.
name|hashCode
argument_list|()
decl_stmt|;
specifier|final
name|int
name|index
init|=
name|getIndex
argument_list|(
name|hashCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
index|[
name|index
index|]
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|hashCode
operator|==
name|entries
index|[
name|index
index|]
operator|.
name|hashCode
operator|&&
name|entries
index|[
name|index
index|]
operator|.
name|element
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// remove the head of the bucket linked list
name|modification
operator|++
expr_stmt|;
name|size
operator|--
expr_stmt|;
name|found
operator|=
name|entries
index|[
name|index
index|]
expr_stmt|;
name|entries
index|[
name|index
index|]
operator|=
name|found
operator|.
name|next
expr_stmt|;
block|}
else|else
block|{
comment|// head != null and key is not equal to head
comment|// search the element
name|LinkedElement
argument_list|<
name|T
argument_list|>
name|prev
init|=
name|entries
index|[
name|index
index|]
decl_stmt|;
for|for
control|(
name|found
operator|=
name|prev
operator|.
name|next
init|;
name|found
operator|!=
literal|null
condition|;
control|)
block|{
if|if
condition|(
name|hashCode
operator|==
name|found
operator|.
name|hashCode
operator|&&
name|found
operator|.
name|element
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// found the element, remove it
name|modification
operator|++
expr_stmt|;
name|size
operator|--
expr_stmt|;
name|prev
operator|.
name|next
operator|=
name|found
operator|.
name|next
expr_stmt|;
name|found
operator|.
name|next
operator|=
literal|null
expr_stmt|;
break|break;
block|}
else|else
block|{
name|prev
operator|=
name|found
expr_stmt|;
name|found
operator|=
name|found
operator|.
name|next
expr_stmt|;
block|}
block|}
block|}
return|return
name|found
return|;
block|}
comment|/**    * Remove and return n elements from the hashtable.    * The order in which entries are removed is unspecified, and    * and may not correspond to the order in which they were inserted.    *    * @return first element    */
DECL|method|pollN (int n)
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|pollN
parameter_list|(
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|>=
name|size
condition|)
block|{
return|return
name|pollAll
argument_list|()
return|;
block|}
name|List
argument_list|<
name|T
argument_list|>
name|retList
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
return|return
name|retList
return|;
block|}
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|int
name|currentBucketIndex
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|LinkedElement
argument_list|<
name|T
argument_list|>
name|current
init|=
name|entries
index|[
name|currentBucketIndex
index|]
decl_stmt|;
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|retList
operator|.
name|add
argument_list|(
name|current
operator|.
name|element
argument_list|)
expr_stmt|;
name|current
operator|=
name|current
operator|.
name|next
expr_stmt|;
name|entries
index|[
name|currentBucketIndex
index|]
operator|=
name|current
expr_stmt|;
name|size
operator|--
expr_stmt|;
name|modification
operator|++
expr_stmt|;
if|if
condition|(
operator|--
name|n
operator|==
literal|0
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|currentBucketIndex
operator|++
expr_stmt|;
block|}
name|shrinkIfNecessary
argument_list|()
expr_stmt|;
return|return
name|retList
return|;
block|}
comment|/**    * Remove all elements from the set and return them. Clear the entries.    */
DECL|method|pollAll ()
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|pollAll
parameter_list|()
block|{
name|List
argument_list|<
name|T
argument_list|>
name|retList
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LinkedElement
argument_list|<
name|T
argument_list|>
name|current
init|=
name|entries
index|[
name|i
index|]
decl_stmt|;
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|retList
operator|.
name|add
argument_list|(
name|current
operator|.
name|element
argument_list|)
expr_stmt|;
name|current
operator|=
name|current
operator|.
name|next
expr_stmt|;
block|}
block|}
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|retList
return|;
block|}
comment|/**    * Get array.length elements from the set, and put them into the array.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|pollToArray (T[] array)
specifier|public
name|T
index|[]
name|pollToArray
parameter_list|(
name|T
index|[]
name|array
parameter_list|)
block|{
name|int
name|currentIndex
init|=
literal|0
decl_stmt|;
name|LinkedElement
argument_list|<
name|T
argument_list|>
name|current
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|array
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|array
return|;
block|}
if|if
condition|(
name|array
operator|.
name|length
operator|>
name|size
condition|)
block|{
name|array
operator|=
operator|(
name|T
index|[]
operator|)
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
operator|.
name|newInstance
argument_list|(
name|array
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|// do fast polling if the entire set needs to be fetched
if|if
condition|(
name|array
operator|.
name|length
operator|==
name|size
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|current
operator|=
name|entries
index|[
name|i
index|]
expr_stmt|;
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|array
index|[
name|currentIndex
operator|++
index|]
operator|=
name|current
operator|.
name|element
expr_stmt|;
name|current
operator|=
name|current
operator|.
name|next
expr_stmt|;
block|}
block|}
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|array
return|;
block|}
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|int
name|currentBucketIndex
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|current
operator|=
name|entries
index|[
name|currentBucketIndex
index|]
expr_stmt|;
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|array
index|[
name|currentIndex
operator|++
index|]
operator|=
name|current
operator|.
name|element
expr_stmt|;
name|current
operator|=
name|current
operator|.
name|next
expr_stmt|;
name|entries
index|[
name|currentBucketIndex
index|]
operator|=
name|current
expr_stmt|;
name|size
operator|--
expr_stmt|;
name|modification
operator|++
expr_stmt|;
if|if
condition|(
name|currentIndex
operator|==
name|array
operator|.
name|length
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|currentBucketIndex
operator|++
expr_stmt|;
block|}
name|shrinkIfNecessary
argument_list|()
expr_stmt|;
return|return
name|array
return|;
block|}
comment|/**    * Compute capacity given initial capacity.    *    * @return final capacity, either MIN_CAPACITY, MAX_CAPACITY, or power of 2    *         closest to the requested capacity.    */
DECL|method|computeCapacity (int initial)
specifier|private
name|int
name|computeCapacity
parameter_list|(
name|int
name|initial
parameter_list|)
block|{
if|if
condition|(
name|initial
operator|<
name|MINIMUM_CAPACITY
condition|)
block|{
return|return
name|MINIMUM_CAPACITY
return|;
block|}
if|if
condition|(
name|initial
operator|>
name|MAXIMUM_CAPACITY
condition|)
block|{
return|return
name|MAXIMUM_CAPACITY
return|;
block|}
name|int
name|capacity
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|capacity
operator|<
name|initial
condition|)
block|{
name|capacity
operator|<<=
literal|1
expr_stmt|;
block|}
return|return
name|capacity
return|;
block|}
comment|/**    * Resize the internal table to given capacity.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|resize (int cap)
specifier|private
name|void
name|resize
parameter_list|(
name|int
name|cap
parameter_list|)
block|{
name|int
name|newCapacity
init|=
name|computeCapacity
argument_list|(
name|cap
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCapacity
operator|==
name|this
operator|.
name|capacity
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|capacity
operator|=
name|newCapacity
expr_stmt|;
name|this
operator|.
name|expandThreshold
operator|=
call|(
name|int
call|)
argument_list|(
name|capacity
operator|*
name|maxLoadFactor
argument_list|)
expr_stmt|;
name|this
operator|.
name|shrinkThreshold
operator|=
call|(
name|int
call|)
argument_list|(
name|capacity
operator|*
name|minLoadFactor
argument_list|)
expr_stmt|;
name|this
operator|.
name|hash_mask
operator|=
name|capacity
operator|-
literal|1
expr_stmt|;
name|LinkedElement
argument_list|<
name|T
argument_list|>
index|[]
name|temp
init|=
name|entries
decl_stmt|;
name|entries
operator|=
operator|new
name|LinkedElement
index|[
name|capacity
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|temp
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LinkedElement
argument_list|<
name|T
argument_list|>
name|curr
init|=
name|temp
index|[
name|i
index|]
decl_stmt|;
while|while
condition|(
name|curr
operator|!=
literal|null
condition|)
block|{
name|LinkedElement
argument_list|<
name|T
argument_list|>
name|next
init|=
name|curr
operator|.
name|next
decl_stmt|;
name|int
name|index
init|=
name|getIndex
argument_list|(
name|curr
operator|.
name|hashCode
argument_list|)
decl_stmt|;
name|curr
operator|.
name|next
operator|=
name|entries
index|[
name|index
index|]
expr_stmt|;
name|entries
index|[
name|index
index|]
operator|=
name|curr
expr_stmt|;
name|curr
operator|=
name|next
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Checks if we need to shrink, and shrinks if necessary.    */
DECL|method|shrinkIfNecessary ()
specifier|protected
name|void
name|shrinkIfNecessary
parameter_list|()
block|{
if|if
condition|(
name|size
argument_list|<
name|this
operator|.
name|shrinkThreshold
operator|&&
name|capacity
argument_list|>
name|initialCapacity
condition|)
block|{
name|resize
argument_list|(
name|capacity
operator|/
name|expandMultiplier
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Checks if we need to expand, and expands if necessary.    */
DECL|method|expandIfNecessary ()
specifier|protected
name|void
name|expandIfNecessary
parameter_list|()
block|{
if|if
condition|(
name|size
operator|>
name|this
operator|.
name|expandThreshold
operator|&&
name|capacity
operator|<
name|MAXIMUM_CAPACITY
condition|)
block|{
name|resize
argument_list|(
name|capacity
operator|*
name|expandMultiplier
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|LinkedSetIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"(size="
argument_list|)
operator|.
name|append
argument_list|(
name|size
argument_list|)
operator|.
name|append
argument_list|(
literal|", modification="
argument_list|)
operator|.
name|append
argument_list|(
name|modification
argument_list|)
operator|.
name|append
argument_list|(
literal|", entries.length="
argument_list|)
operator|.
name|append
argument_list|(
name|entries
operator|.
name|length
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Print detailed information of this object. */
DECL|method|printDetails (final PrintStream out)
specifier|public
name|void
name|printDetails
parameter_list|(
specifier|final
name|PrintStream
name|out
parameter_list|)
block|{
name|out
operator|.
name|print
argument_list|(
name|this
operator|+
literal|", entries = ["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|entries
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|LinkedElement
argument_list|<
name|T
argument_list|>
name|e
init|=
name|entries
index|[
name|i
index|]
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\n  "
operator|+
name|i
operator|+
literal|": "
operator|+
name|e
argument_list|)
expr_stmt|;
for|for
control|(
name|e
operator|=
name|e
operator|.
name|next
init|;
name|e
operator|!=
literal|null
condition|;
name|e
operator|=
name|e
operator|.
name|next
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" -> "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"\n]"
argument_list|)
expr_stmt|;
block|}
DECL|class|LinkedSetIterator
specifier|private
class|class
name|LinkedSetIterator
implements|implements
name|Iterator
argument_list|<
name|T
argument_list|>
block|{
comment|/** The starting modification for fail-fast. */
DECL|field|startModification
specifier|private
specifier|final
name|int
name|startModification
init|=
name|modification
decl_stmt|;
comment|/** The current index of the entry array. */
DECL|field|index
specifier|private
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
comment|/** The next element to return. */
DECL|field|next
specifier|private
name|LinkedElement
argument_list|<
name|T
argument_list|>
name|next
init|=
name|nextNonemptyEntry
argument_list|()
decl_stmt|;
DECL|method|nextNonemptyEntry ()
specifier|private
name|LinkedElement
argument_list|<
name|T
argument_list|>
name|nextNonemptyEntry
parameter_list|()
block|{
for|for
control|(
name|index
operator|++
init|;
name|index
operator|<
name|entries
operator|.
name|length
operator|&&
name|entries
index|[
name|index
index|]
operator|==
literal|null
condition|;
name|index
operator|++
control|)
empty_stmt|;
return|return
name|index
operator|<
name|entries
operator|.
name|length
condition|?
name|entries
index|[
name|index
index|]
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|T
name|next
parameter_list|()
block|{
if|if
condition|(
name|modification
operator|!=
name|startModification
condition|)
block|{
throw|throw
operator|new
name|ConcurrentModificationException
argument_list|(
literal|"modification="
operator|+
name|modification
operator|+
literal|" != startModification = "
operator|+
name|startModification
argument_list|)
throw|;
block|}
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
specifier|final
name|T
name|e
init|=
name|next
operator|.
name|element
decl_stmt|;
comment|// find the next element
specifier|final
name|LinkedElement
argument_list|<
name|T
argument_list|>
name|n
init|=
name|next
operator|.
name|next
decl_stmt|;
name|next
operator|=
name|n
operator|!=
literal|null
condition|?
name|n
else|:
name|nextNonemptyEntry
argument_list|()
expr_stmt|;
return|return
name|e
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Remove is not supported."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Clear the set. Resize it to the original capacity.    */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|capacity
operator|=
name|this
operator|.
name|initialCapacity
expr_stmt|;
name|this
operator|.
name|hash_mask
operator|=
name|capacity
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|expandThreshold
operator|=
call|(
name|int
call|)
argument_list|(
name|capacity
operator|*
name|maxLoadFactor
argument_list|)
expr_stmt|;
name|this
operator|.
name|shrinkThreshold
operator|=
call|(
name|int
call|)
argument_list|(
name|capacity
operator|*
name|minLoadFactor
argument_list|)
expr_stmt|;
name|entries
operator|=
operator|new
name|LinkedElement
index|[
name|capacity
index|]
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
name|modification
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toArray ()
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
name|Object
index|[]
name|result
init|=
operator|new
name|Object
index|[
name|size
index|]
decl_stmt|;
return|return
name|toArray
argument_list|(
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toArray (U[] a)
specifier|public
parameter_list|<
name|U
parameter_list|>
name|U
index|[]
name|toArray
parameter_list|(
name|U
index|[]
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Input array can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|a
operator|.
name|length
operator|<
name|size
condition|)
block|{
name|a
operator|=
operator|(
name|U
index|[]
operator|)
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
operator|.
name|newInstance
argument_list|(
name|a
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
name|int
name|currentIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LinkedElement
argument_list|<
name|T
argument_list|>
name|current
init|=
name|entries
index|[
name|i
index|]
decl_stmt|;
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|a
index|[
name|currentIndex
operator|++
index|]
operator|=
operator|(
name|U
operator|)
name|current
operator|.
name|element
expr_stmt|;
name|current
operator|=
name|current
operator|.
name|next
expr_stmt|;
block|}
block|}
return|return
name|a
return|;
block|}
annotation|@
name|Override
DECL|method|containsAll (Collection<?> c)
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|iter
init|=
name|c
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|contains
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|removeAll (Collection<?> c)
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|iter
init|=
name|c
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|changed
operator||=
name|remove
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|changed
return|;
block|}
annotation|@
name|Override
DECL|method|retainAll (Collection<?> c)
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"retainAll is not supported."
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

