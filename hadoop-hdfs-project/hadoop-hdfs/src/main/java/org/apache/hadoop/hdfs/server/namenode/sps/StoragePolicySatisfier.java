begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.sps
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|monotonicNow
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfoWithStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|StoragePolicySatisfierMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|StoragePolicySatisfyPathStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsLocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ErasureCodingPolicyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockStorageMovementCommand
operator|.
name|BlockMovingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Setting storagePolicy on a file after the file write will only update the new  * storage policy type in Namespace, but physical block storage movement will  * not happen until user runs "Mover Tool" explicitly for such files. The  * StoragePolicySatisfier Daemon thread implemented for addressing the case  * where users may want to physically move the blocks by a dedicated daemon (can  * run inside Namenode or stand alone) instead of running mover tool explicitly.  * Just calling client API to satisfyStoragePolicy on a file/dir will  * automatically trigger to move its physical storage locations as expected in  * asynchronous manner. Here SPS will pick the file blocks which are expecting  * to change its storages, then it will build the mapping of source block  * location and expected storage type and location to move. After that this  * class will also prepare requests to send to Datanode for processing the  * physical block movements.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StoragePolicySatisfier
specifier|public
class|class
name|StoragePolicySatisfier
implements|implements
name|SPSService
implements|,
name|Runnable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StoragePolicySatisfier
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|storagePolicySatisfierThread
specifier|private
name|Daemon
name|storagePolicySatisfierThread
decl_stmt|;
DECL|field|storageMovementNeeded
specifier|private
name|BlockStorageMovementNeeded
name|storageMovementNeeded
decl_stmt|;
DECL|field|storageMovementsMonitor
specifier|private
name|BlockStorageMovementAttemptedItems
name|storageMovementsMonitor
decl_stmt|;
DECL|field|isRunning
specifier|private
specifier|volatile
name|boolean
name|isRunning
init|=
literal|false
decl_stmt|;
DECL|field|spsWorkMultiplier
specifier|private
name|int
name|spsWorkMultiplier
decl_stmt|;
DECL|field|blockCount
specifier|private
name|long
name|blockCount
init|=
literal|0L
decl_stmt|;
DECL|field|blockMovementMaxRetry
specifier|private
name|int
name|blockMovementMaxRetry
decl_stmt|;
DECL|field|ctxt
specifier|private
name|Context
name|ctxt
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|dnCacheMgr
specifier|private
name|DatanodeCacheManager
name|dnCacheMgr
decl_stmt|;
DECL|method|StoragePolicySatisfier (Configuration conf)
specifier|public
name|StoragePolicySatisfier
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * Represents the collective analysis status for all blocks.    */
DECL|class|BlocksMovingAnalysis
specifier|private
specifier|static
class|class
name|BlocksMovingAnalysis
block|{
DECL|enum|Status
enum|enum
name|Status
block|{
comment|// Represents that, the analysis skipped due to some conditions. A such
comment|// condition is if block collection is in incomplete state.
DECL|enumConstant|ANALYSIS_SKIPPED_FOR_RETRY
name|ANALYSIS_SKIPPED_FOR_RETRY
block|,
comment|// Represents that few or all blocks found respective target to do
comment|// the storage movement.
DECL|enumConstant|BLOCKS_TARGETS_PAIRED
name|BLOCKS_TARGETS_PAIRED
block|,
comment|// Represents that none of the blocks found respective target to do
comment|// the storage movement.
DECL|enumConstant|NO_BLOCKS_TARGETS_PAIRED
name|NO_BLOCKS_TARGETS_PAIRED
block|,
comment|// Represents that, none of the blocks found for block storage movements.
DECL|enumConstant|BLOCKS_ALREADY_SATISFIED
name|BLOCKS_ALREADY_SATISFIED
block|,
comment|// Represents that, the analysis skipped due to some conditions.
comment|// Example conditions are if no blocks really exists in block collection
comment|// or
comment|// if analysis is not required on ec files with unsuitable storage
comment|// policies
DECL|enumConstant|BLOCKS_TARGET_PAIRING_SKIPPED
name|BLOCKS_TARGET_PAIRING_SKIPPED
block|,
comment|// Represents that, All the reported blocks are satisfied the policy but
comment|// some of the blocks are low redundant.
DECL|enumConstant|FEW_LOW_REDUNDANCY_BLOCKS
name|FEW_LOW_REDUNDANCY_BLOCKS
block|,
comment|// Represents that, movement failures due to unexpected errors.
DECL|enumConstant|BLOCKS_FAILED_TO_MOVE
name|BLOCKS_FAILED_TO_MOVE
block|}
DECL|field|status
specifier|private
name|Status
name|status
init|=
literal|null
decl_stmt|;
DECL|field|assignedBlocks
specifier|private
name|Map
argument_list|<
name|Block
argument_list|,
name|Set
argument_list|<
name|StorageTypeNodePair
argument_list|>
argument_list|>
name|assignedBlocks
init|=
literal|null
decl_stmt|;
DECL|method|BlocksMovingAnalysis (Status status, Map<Block, Set<StorageTypeNodePair>> assignedBlocks)
name|BlocksMovingAnalysis
parameter_list|(
name|Status
name|status
parameter_list|,
name|Map
argument_list|<
name|Block
argument_list|,
name|Set
argument_list|<
name|StorageTypeNodePair
argument_list|>
argument_list|>
name|assignedBlocks
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|assignedBlocks
operator|=
name|assignedBlocks
expr_stmt|;
block|}
block|}
DECL|method|init (final Context context)
specifier|public
name|void
name|init
parameter_list|(
specifier|final
name|Context
name|context
parameter_list|)
block|{
name|this
operator|.
name|ctxt
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|storageMovementNeeded
operator|=
operator|new
name|BlockStorageMovementNeeded
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|storageMovementsMonitor
operator|=
operator|new
name|BlockStorageMovementAttemptedItems
argument_list|(
name|this
argument_list|,
name|storageMovementNeeded
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|spsWorkMultiplier
operator|=
name|getSPSWorkMultiplier
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockMovementMaxRetry
operator|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_MAX_RETRY_ATTEMPTS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_MAX_RETRY_ATTEMPTS_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start storage policy satisfier demon thread. Also start block storage    * movements monitor for retry the attempts if needed.    */
annotation|@
name|Override
DECL|method|start (boolean reconfigStart, StoragePolicySatisfierMode serviceMode)
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|(
name|boolean
name|reconfigStart
parameter_list|,
name|StoragePolicySatisfierMode
name|serviceMode
parameter_list|)
block|{
if|if
condition|(
name|serviceMode
operator|==
name|StoragePolicySatisfierMode
operator|.
name|NONE
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't start StoragePolicySatisfier for the given mode:{}"
argument_list|,
name|serviceMode
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|serviceMode
operator|==
name|StoragePolicySatisfierMode
operator|.
name|INTERNAL
operator|&&
name|ctxt
operator|.
name|isMoverRunning
argument_list|()
condition|)
block|{
name|isRunning
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Stopping StoragePolicySatisfier thread "
operator|+
literal|"as Mover ID file "
operator|+
name|HdfsServerConstants
operator|.
name|MOVER_ID_PATH
operator|.
name|toString
argument_list|()
operator|+
literal|" been opened. Maybe a Mover instance is running!"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|reconfigStart
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting {} StoragePolicySatisfier, as admin requested to "
operator|+
literal|"start it."
argument_list|,
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|serviceMode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting {} StoragePolicySatisfier."
argument_list|,
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|serviceMode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|isRunning
operator|=
literal|true
expr_stmt|;
comment|// Ensure that all the previously submitted block movements(if any) have to
comment|// be stopped in all datanodes.
name|addDropSPSWorkCommandsToAllDNs
argument_list|()
expr_stmt|;
name|storagePolicySatisfierThread
operator|=
operator|new
name|Daemon
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|storagePolicySatisfierThread
operator|.
name|setName
argument_list|(
literal|"StoragePolicySatisfier"
argument_list|)
expr_stmt|;
name|storagePolicySatisfierThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|storageMovementsMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|storageMovementNeeded
operator|.
name|activate
argument_list|()
expr_stmt|;
name|dnCacheMgr
operator|=
operator|new
name|DatanodeCacheManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop (boolean forceStop)
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|(
name|boolean
name|forceStop
parameter_list|)
block|{
name|isRunning
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|storagePolicySatisfierThread
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|storageMovementNeeded
operator|.
name|close
argument_list|()
expr_stmt|;
name|storagePolicySatisfierThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|this
operator|.
name|storageMovementsMonitor
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|forceStop
condition|)
block|{
name|storageMovementNeeded
operator|.
name|clearQueuesWithNotification
argument_list|()
expr_stmt|;
name|addDropSPSWorkCommandsToAllDNs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping StoragePolicySatisfier."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stopGracefully ()
specifier|public
specifier|synchronized
name|void
name|stopGracefully
parameter_list|()
block|{
if|if
condition|(
name|isRunning
condition|)
block|{
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|storageMovementsMonitor
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|storageMovementsMonitor
operator|.
name|stopGracefully
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|storagePolicySatisfierThread
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|storagePolicySatisfierThread
operator|.
name|join
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted Exception while waiting to join sps thread,"
operator|+
literal|" ignoring it"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|isRunning ()
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|isRunning
return|;
block|}
comment|/**    * Adding drop commands to all datanodes to stop performing the satisfier    * block movements, if any.    */
DECL|method|addDropSPSWorkCommandsToAllDNs ()
specifier|private
name|void
name|addDropSPSWorkCommandsToAllDNs
parameter_list|()
block|{
name|ctxt
operator|.
name|addDropPreviousSPSWorkAtDNs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|isRunning
condition|)
block|{
comment|// Check if dependent service is running
if|if
condition|(
operator|!
name|ctxt
operator|.
name|isRunning
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Upstream service is down, skipping the sps work."
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
try|try
block|{
name|ItemInfo
name|itemInfo
init|=
literal|null
decl_stmt|;
name|boolean
name|retryItem
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|ctxt
operator|.
name|isInSafeMode
argument_list|()
condition|)
block|{
name|itemInfo
operator|=
name|storageMovementNeeded
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|itemInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|itemInfo
operator|.
name|getRetryCount
argument_list|()
operator|>=
name|blockMovementMaxRetry
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to satisfy the policy after "
operator|+
name|blockMovementMaxRetry
operator|+
literal|" retries. Removing inode "
operator|+
name|itemInfo
operator|.
name|getFile
argument_list|()
operator|+
literal|" from the queue"
argument_list|)
expr_stmt|;
name|storageMovementNeeded
operator|.
name|removeItemTrackInfo
argument_list|(
name|itemInfo
argument_list|,
literal|false
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|long
name|trackId
init|=
name|itemInfo
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|BlocksMovingAnalysis
name|status
init|=
literal|null
decl_stmt|;
name|BlockStoragePolicy
name|existingStoragePolicy
decl_stmt|;
comment|// TODO: presently, context internally acquire the lock
comment|// and returns the result. Need to discuss to move the lock outside?
name|HdfsFileStatus
name|fileStatus
init|=
name|ctxt
operator|.
name|getFileInfo
argument_list|(
name|trackId
argument_list|)
decl_stmt|;
comment|// Check path existence.
if|if
condition|(
name|fileStatus
operator|==
literal|null
operator|||
name|fileStatus
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|// File doesn't exists (maybe got deleted) or its a directory,
comment|// just remove trackId from the queue
name|storageMovementNeeded
operator|.
name|removeItemTrackInfo
argument_list|(
name|itemInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
name|existingStoragePolicyID
init|=
name|fileStatus
operator|.
name|getStoragePolicy
argument_list|()
decl_stmt|;
name|existingStoragePolicy
operator|=
name|ctxt
operator|.
name|getStoragePolicy
argument_list|(
name|existingStoragePolicyID
argument_list|)
expr_stmt|;
name|HdfsLocatedFileStatus
name|file
init|=
operator|(
name|HdfsLocatedFileStatus
operator|)
name|fileStatus
decl_stmt|;
name|status
operator|=
name|analyseBlocksStorageMovementsAndAssignToDN
argument_list|(
name|file
argument_list|,
name|existingStoragePolicy
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|status
operator|.
name|status
condition|)
block|{
comment|// Just add to monitor, so it will be retried after timeout
case|case
name|ANALYSIS_SKIPPED_FOR_RETRY
case|:
comment|// Just add to monitor, so it will be tracked for report and
comment|// be removed on storage movement attempt finished report.
case|case
name|BLOCKS_TARGETS_PAIRED
case|:
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Block analysis status:{} for the file id:{}."
operator|+
literal|" Adding to attempt monitor queue for the storage "
operator|+
literal|"movement attempt finished report"
argument_list|,
name|status
operator|.
name|status
argument_list|,
name|fileStatus
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|storageMovementsMonitor
operator|.
name|add
argument_list|(
name|itemInfo
operator|.
name|getStartPath
argument_list|()
argument_list|,
name|itemInfo
operator|.
name|getFile
argument_list|()
argument_list|,
name|monotonicNow
argument_list|()
argument_list|,
name|status
operator|.
name|assignedBlocks
argument_list|,
name|itemInfo
operator|.
name|getRetryCount
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|NO_BLOCKS_TARGETS_PAIRED
case|:
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding trackID:{} for the file id:{} back to"
operator|+
literal|" retry queue as none of the blocks found its eligible"
operator|+
literal|" targets."
argument_list|,
name|trackId
argument_list|,
name|fileStatus
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|retryItem
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|FEW_LOW_REDUNDANCY_BLOCKS
case|:
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding trackID:{} for the file id:{} back to "
operator|+
literal|"retry queue as some of the blocks are low redundant."
argument_list|,
name|trackId
argument_list|,
name|fileStatus
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|retryItem
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|BLOCKS_FAILED_TO_MOVE
case|:
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding trackID:{} for the file id:{} back to "
operator|+
literal|"retry queue as some of the blocks movement failed."
argument_list|,
name|trackId
argument_list|,
name|fileStatus
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|retryItem
operator|=
literal|true
expr_stmt|;
break|break;
comment|// Just clean Xattrs
case|case
name|BLOCKS_TARGET_PAIRING_SKIPPED
case|:
case|case
name|BLOCKS_ALREADY_SATISFIED
case|:
default|default:
name|LOG
operator|.
name|info
argument_list|(
literal|"Block analysis status:{} for the file id:{}."
operator|+
literal|" So, Cleaning up the Xattrs."
argument_list|,
name|status
operator|.
name|status
argument_list|,
name|fileStatus
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
name|storageMovementNeeded
operator|.
name|removeItemTrackInfo
argument_list|(
name|itemInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Namenode is in safemode. It will retry again."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
name|int
name|numLiveDn
init|=
name|ctxt
operator|.
name|getNumLiveDataNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|storageMovementNeeded
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|blockCount
operator|>
operator|(
name|numLiveDn
operator|*
name|spsWorkMultiplier
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|blockCount
operator|=
literal|0L
expr_stmt|;
block|}
if|if
condition|(
name|retryItem
condition|)
block|{
comment|// itemInfo.increRetryCount();
name|this
operator|.
name|storageMovementNeeded
operator|.
name|add
argument_list|(
name|itemInfo
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception during StoragePolicySatisfier execution - "
operator|+
literal|"will continue next cycle"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|isRunning
condition|)
block|{
name|isRunning
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|InterruptedException
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping StoragePolicySatisfier."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"StoragePolicySatisfier thread received "
operator|+
literal|"runtime exception."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|// Stopping monitor thread and clearing queues as well
name|this
operator|.
name|clearQueues
argument_list|()
expr_stmt|;
name|this
operator|.
name|storageMovementsMonitor
operator|.
name|stopGracefully
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|analyseBlocksStorageMovementsAndAssignToDN ( HdfsLocatedFileStatus fileInfo, BlockStoragePolicy existingStoragePolicy)
specifier|private
name|BlocksMovingAnalysis
name|analyseBlocksStorageMovementsAndAssignToDN
parameter_list|(
name|HdfsLocatedFileStatus
name|fileInfo
parameter_list|,
name|BlockStoragePolicy
name|existingStoragePolicy
parameter_list|)
throws|throws
name|IOException
block|{
name|BlocksMovingAnalysis
operator|.
name|Status
name|status
init|=
name|BlocksMovingAnalysis
operator|.
name|Status
operator|.
name|BLOCKS_ALREADY_SATISFIED
decl_stmt|;
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|fileInfo
operator|.
name|getErasureCodingPolicy
argument_list|()
decl_stmt|;
specifier|final
name|LocatedBlocks
name|locatedBlocks
init|=
name|fileInfo
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|lastBlkComplete
init|=
name|locatedBlocks
operator|.
name|isLastBlockComplete
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lastBlkComplete
condition|)
block|{
comment|// Postpone, currently file is under construction
name|LOG
operator|.
name|info
argument_list|(
literal|"File: {} is under construction. So, postpone"
operator|+
literal|" this to the next retry iteration"
argument_list|,
name|fileInfo
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|BlocksMovingAnalysis
argument_list|(
name|BlocksMovingAnalysis
operator|.
name|Status
operator|.
name|ANALYSIS_SKIPPED_FOR_RETRY
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|blocks
init|=
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
if|if
condition|(
name|blocks
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"File: {} is not having any blocks."
operator|+
literal|" So, skipping the analysis."
argument_list|,
name|fileInfo
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|BlocksMovingAnalysis
argument_list|(
name|BlocksMovingAnalysis
operator|.
name|Status
operator|.
name|BLOCKS_TARGET_PAIRING_SKIPPED
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
name|List
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blockMovingInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|BlockMovingInfo
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasLowRedundancyBlocks
init|=
literal|false
decl_stmt|;
name|int
name|replication
init|=
name|fileInfo
operator|.
name|getReplication
argument_list|()
decl_stmt|;
name|DatanodeMap
name|liveDns
init|=
name|dnCacheMgr
operator|.
name|getLiveDatanodeStorageReport
argument_list|(
name|ctxt
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|LocatedBlock
name|blockInfo
init|=
name|blocks
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Block is considered as low redundancy when the block locations array
comment|// length is less than expected replication factor. If any of the block is
comment|// low redundant, then hasLowRedundancyBlocks will be marked as true.
name|hasLowRedundancyBlocks
operator||=
name|isLowRedundancyBlock
argument_list|(
name|blockInfo
argument_list|,
name|replication
argument_list|,
name|ecPolicy
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StorageType
argument_list|>
name|expectedStorageTypes
decl_stmt|;
if|if
condition|(
name|blockInfo
operator|.
name|isStriped
argument_list|()
condition|)
block|{
if|if
condition|(
name|ErasureCodingPolicyManager
operator|.
name|checkStoragePolicySuitableForECStripedMode
argument_list|(
name|existingStoragePolicy
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|expectedStorageTypes
operator|=
name|existingStoragePolicy
operator|.
name|chooseStorageTypes
argument_list|(
operator|(
name|short
operator|)
name|blockInfo
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Currently we support only limited policies (HOT, COLD, ALLSSD)
comment|// for EC striped mode files. SPS will ignore to move the blocks if
comment|// the storage policy is not in EC Striped mode supported policies
name|LOG
operator|.
name|warn
argument_list|(
literal|"The storage policy "
operator|+
name|existingStoragePolicy
operator|.
name|getName
argument_list|()
operator|+
literal|" is not suitable for Striped EC files. "
operator|+
literal|"So, ignoring to move the blocks"
argument_list|)
expr_stmt|;
return|return
operator|new
name|BlocksMovingAnalysis
argument_list|(
name|BlocksMovingAnalysis
operator|.
name|Status
operator|.
name|BLOCKS_TARGET_PAIRING_SKIPPED
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|expectedStorageTypes
operator|=
name|existingStoragePolicy
operator|.
name|chooseStorageTypes
argument_list|(
name|fileInfo
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|StorageType
argument_list|>
name|existing
init|=
operator|new
name|LinkedList
argument_list|<
name|StorageType
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|blockInfo
operator|.
name|getStorageTypes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|removeOverlapBetweenStorageTypes
argument_list|(
name|expectedStorageTypes
argument_list|,
name|existing
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|boolean
name|blocksPaired
init|=
name|computeBlockMovingInfos
argument_list|(
name|blockMovingInfos
argument_list|,
name|blockInfo
argument_list|,
name|expectedStorageTypes
argument_list|,
name|existing
argument_list|,
name|blockInfo
operator|.
name|getLocations
argument_list|()
argument_list|,
name|liveDns
argument_list|,
name|ecPolicy
argument_list|)
decl_stmt|;
if|if
condition|(
name|blocksPaired
condition|)
block|{
name|status
operator|=
name|BlocksMovingAnalysis
operator|.
name|Status
operator|.
name|BLOCKS_TARGETS_PAIRED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|!=
name|BlocksMovingAnalysis
operator|.
name|Status
operator|.
name|BLOCKS_TARGETS_PAIRED
condition|)
block|{
comment|// Check if the previous block was successfully paired. Here the
comment|// status will set to NO_BLOCKS_TARGETS_PAIRED only when none of the
comment|// blocks of a file found its eligible targets to satisfy the storage
comment|// policy.
name|status
operator|=
name|BlocksMovingAnalysis
operator|.
name|Status
operator|.
name|NO_BLOCKS_TARGETS_PAIRED
expr_stmt|;
block|}
block|}
block|}
comment|// If there is no block paired and few blocks are low redundant, so marking
comment|// the status as FEW_LOW_REDUNDANCY_BLOCKS.
if|if
condition|(
name|hasLowRedundancyBlocks
operator|&&
name|status
operator|!=
name|BlocksMovingAnalysis
operator|.
name|Status
operator|.
name|BLOCKS_TARGETS_PAIRED
condition|)
block|{
name|status
operator|=
name|BlocksMovingAnalysis
operator|.
name|Status
operator|.
name|FEW_LOW_REDUNDANCY_BLOCKS
expr_stmt|;
block|}
name|Map
argument_list|<
name|Block
argument_list|,
name|Set
argument_list|<
name|StorageTypeNodePair
argument_list|>
argument_list|>
name|assignedBlocks
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockMovingInfo
name|blkMovingInfo
range|:
name|blockMovingInfos
control|)
block|{
comment|// Check for at least one block storage movement has been chosen
try|try
block|{
name|ctxt
operator|.
name|submitMoveTask
argument_list|(
name|blkMovingInfo
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"BlockMovingInfo: {}"
argument_list|,
name|blkMovingInfo
argument_list|)
expr_stmt|;
name|StorageTypeNodePair
name|nodeStorage
init|=
operator|new
name|StorageTypeNodePair
argument_list|(
name|blkMovingInfo
operator|.
name|getTargetStorageType
argument_list|()
argument_list|,
name|blkMovingInfo
operator|.
name|getTarget
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|StorageTypeNodePair
argument_list|>
name|nodesWithStorage
init|=
name|assignedBlocks
operator|.
name|get
argument_list|(
name|blkMovingInfo
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodesWithStorage
operator|==
literal|null
condition|)
block|{
name|nodesWithStorage
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|assignedBlocks
operator|.
name|put
argument_list|(
name|blkMovingInfo
operator|.
name|getBlock
argument_list|()
argument_list|,
name|nodesWithStorage
argument_list|)
expr_stmt|;
block|}
name|nodesWithStorage
operator|.
name|add
argument_list|(
name|nodeStorage
argument_list|)
expr_stmt|;
name|blockCount
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while scheduling movement task"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// failed to move the block.
name|status
operator|=
name|BlocksMovingAnalysis
operator|.
name|Status
operator|.
name|BLOCKS_FAILED_TO_MOVE
expr_stmt|;
block|}
block|}
return|return
operator|new
name|BlocksMovingAnalysis
argument_list|(
name|status
argument_list|,
name|assignedBlocks
argument_list|)
return|;
block|}
comment|/**    * The given block is considered as low redundancy when the block locations    * length is less than expected replication factor. For EC blocks, redundancy    * is the summation of data + parity blocks.    *    * @param blockInfo    *          block    * @param replication    *          replication factor of the given file block    * @param ecPolicy    *          erasure coding policy of the given file block    * @return true if the given block is low redundant.    */
DECL|method|isLowRedundancyBlock (LocatedBlock blockInfo, int replication, ErasureCodingPolicy ecPolicy)
specifier|private
name|boolean
name|isLowRedundancyBlock
parameter_list|(
name|LocatedBlock
name|blockInfo
parameter_list|,
name|int
name|replication
parameter_list|,
name|ErasureCodingPolicy
name|ecPolicy
parameter_list|)
block|{
name|boolean
name|hasLowRedundancyBlock
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|blockInfo
operator|.
name|isStriped
argument_list|()
condition|)
block|{
comment|// For EC blocks, redundancy is the summation of data + parity blocks.
name|replication
operator|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
operator|+
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
expr_stmt|;
block|}
comment|// block is considered as low redundancy when the block locations length is
comment|// less than expected replication factor.
name|hasLowRedundancyBlock
operator|=
name|blockInfo
operator|.
name|getLocations
argument_list|()
operator|.
name|length
operator|<
name|replication
condition|?
literal|true
else|:
literal|false
expr_stmt|;
return|return
name|hasLowRedundancyBlock
return|;
block|}
comment|/**    * Compute the list of block moving information corresponding to the given    * blockId. This will check that each block location of the given block is    * satisfying the expected storage policy. If block location is not satisfied    * the policy then find out the target node with the expected storage type to    * satisfy the storage policy.    *    * @param blockMovingInfos    *          - list of block source and target node pair    * @param blockInfo    *          - block details    * @param expectedStorageTypes    *          - list of expected storage type to satisfy the storage policy    * @param existing    *          - list to get existing storage types    * @param storages    *          - available storages    * @param liveDns    *          - live datanodes which can be used as targets    * @param ecPolicy    *          - ec policy of sps invoked file    * @return false if some of the block locations failed to find target node to    *         satisfy the storage policy, true otherwise    */
DECL|method|computeBlockMovingInfos ( List<BlockMovingInfo> blockMovingInfos, LocatedBlock blockInfo, List<StorageType> expectedStorageTypes, List<StorageType> existing, DatanodeInfo[] storages, DatanodeMap liveDns, ErasureCodingPolicy ecPolicy)
specifier|private
name|boolean
name|computeBlockMovingInfos
parameter_list|(
name|List
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blockMovingInfos
parameter_list|,
name|LocatedBlock
name|blockInfo
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|expectedStorageTypes
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|existing
parameter_list|,
name|DatanodeInfo
index|[]
name|storages
parameter_list|,
name|DatanodeMap
name|liveDns
parameter_list|,
name|ErasureCodingPolicy
name|ecPolicy
parameter_list|)
block|{
name|boolean
name|foundMatchingTargetNodesForBlock
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|removeOverlapBetweenStorageTypes
argument_list|(
name|expectedStorageTypes
argument_list|,
name|existing
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|StorageTypeNodePair
argument_list|>
name|sourceWithStorageMap
init|=
operator|new
name|ArrayList
argument_list|<
name|StorageTypeNodePair
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|existingBlockStorages
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|storages
argument_list|)
argument_list|)
decl_stmt|;
comment|// Add existing storages into exclude nodes to avoid choosing this as
comment|// remote target later.
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|excludeNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|existingBlockStorages
argument_list|)
decl_stmt|;
comment|// if expected type exists in source node already, local movement would be
comment|// possible, so lets find such sources first.
name|Iterator
argument_list|<
name|DatanodeInfo
argument_list|>
name|iterator
init|=
name|existingBlockStorages
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DatanodeInfoWithStorage
name|dnInfo
init|=
operator|(
name|DatanodeInfoWithStorage
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkSourceAndTargetTypeExists
argument_list|(
name|dnInfo
argument_list|,
name|existing
argument_list|,
name|expectedStorageTypes
argument_list|,
name|liveDns
argument_list|)
condition|)
block|{
name|sourceWithStorageMap
operator|.
name|add
argument_list|(
operator|new
name|StorageTypeNodePair
argument_list|(
name|dnInfo
operator|.
name|getStorageType
argument_list|()
argument_list|,
name|dnInfo
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|existing
operator|.
name|remove
argument_list|(
name|dnInfo
operator|.
name|getStorageType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Let's find sources for existing types left.
for|for
control|(
name|StorageType
name|existingType
range|:
name|existing
control|)
block|{
name|iterator
operator|=
name|existingBlockStorages
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DatanodeInfoWithStorage
name|dnStorageInfo
init|=
operator|(
name|DatanodeInfoWithStorage
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|StorageType
name|storageType
init|=
name|dnStorageInfo
operator|.
name|getStorageType
argument_list|()
decl_stmt|;
if|if
condition|(
name|storageType
operator|==
name|existingType
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|sourceWithStorageMap
operator|.
name|add
argument_list|(
operator|new
name|StorageTypeNodePair
argument_list|(
name|storageType
argument_list|,
name|dnStorageInfo
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|DatanodeWithStorage
operator|.
name|StorageDetails
argument_list|>
argument_list|>
name|targetDns
init|=
name|findTargetsForExpectedStorageTypes
argument_list|(
name|expectedStorageTypes
argument_list|,
name|liveDns
argument_list|)
decl_stmt|;
name|foundMatchingTargetNodesForBlock
operator||=
name|findSourceAndTargetToMove
argument_list|(
name|blockMovingInfos
argument_list|,
name|blockInfo
argument_list|,
name|sourceWithStorageMap
argument_list|,
name|expectedStorageTypes
argument_list|,
name|targetDns
argument_list|,
name|ecPolicy
argument_list|,
name|excludeNodes
argument_list|)
expr_stmt|;
block|}
return|return
name|foundMatchingTargetNodesForBlock
return|;
block|}
comment|/**    * Find the good target node for each source node for which block storages was    * misplaced.    *    * @param blockMovingInfos    *          - list of block source and target node pair    * @param blockInfo    *          - Block    * @param sourceWithStorageList    *          - Source Datanode with storages list    * @param expectedTypes    *          - Expecting storages to move    * @param targetDns    *          - Available DNs for expected storage types    * @param ecPolicy    *          - erasure coding policy of sps invoked file    * @param excludeNodes    *          - existing source nodes, which has replica copy    * @return false if some of the block locations failed to find target node to    *         satisfy the storage policy    */
DECL|method|findSourceAndTargetToMove ( List<BlockMovingInfo> blockMovingInfos, LocatedBlock blockInfo, List<StorageTypeNodePair> sourceWithStorageList, List<StorageType> expectedTypes, EnumMap<StorageType, List<DatanodeWithStorage.StorageDetails>> targetDns, ErasureCodingPolicy ecPolicy, List<DatanodeInfo> excludeNodes)
specifier|private
name|boolean
name|findSourceAndTargetToMove
parameter_list|(
name|List
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blockMovingInfos
parameter_list|,
name|LocatedBlock
name|blockInfo
parameter_list|,
name|List
argument_list|<
name|StorageTypeNodePair
argument_list|>
name|sourceWithStorageList
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|expectedTypes
parameter_list|,
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|DatanodeWithStorage
operator|.
name|StorageDetails
argument_list|>
argument_list|>
name|targetDns
parameter_list|,
name|ErasureCodingPolicy
name|ecPolicy
parameter_list|,
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|excludeNodes
parameter_list|)
block|{
name|boolean
name|foundMatchingTargetNodesForBlock
init|=
literal|true
decl_stmt|;
comment|// Looping over all the source node locations and choose the target
comment|// storage within same node if possible. This is done separately to
comment|// avoid choosing a target which already has this block.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceWithStorageList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StorageTypeNodePair
name|existingTypeNodePair
init|=
name|sourceWithStorageList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Check whether the block replica is already placed in the expected
comment|// storage type in this source datanode.
if|if
condition|(
operator|!
name|expectedTypes
operator|.
name|contains
argument_list|(
name|existingTypeNodePair
operator|.
name|storageType
argument_list|)
condition|)
block|{
name|StorageTypeNodePair
name|chosenTarget
init|=
name|chooseTargetTypeInSameNode
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|targetDns
argument_list|,
name|expectedTypes
argument_list|)
decl_stmt|;
if|if
condition|(
name|chosenTarget
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|blockInfo
operator|.
name|isStriped
argument_list|()
condition|)
block|{
name|buildStripedBlockMovingInfos
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|existingTypeNodePair
operator|.
name|storageType
argument_list|,
name|chosenTarget
operator|.
name|dn
argument_list|,
name|chosenTarget
operator|.
name|storageType
argument_list|,
name|blockMovingInfos
argument_list|,
name|ecPolicy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buildContinuousBlockMovingInfos
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|existingTypeNodePair
operator|.
name|storageType
argument_list|,
name|chosenTarget
operator|.
name|dn
argument_list|,
name|chosenTarget
operator|.
name|storageType
argument_list|,
name|blockMovingInfos
argument_list|)
expr_stmt|;
block|}
name|expectedTypes
operator|.
name|remove
argument_list|(
name|chosenTarget
operator|.
name|storageType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// If all the sources and targets are paired within same node, then simply
comment|// return.
if|if
condition|(
name|expectedTypes
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
name|foundMatchingTargetNodesForBlock
return|;
block|}
comment|// Looping over all the source node locations. Choose a remote target
comment|// storage node if it was not found out within same node.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceWithStorageList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StorageTypeNodePair
name|existingTypeNodePair
init|=
name|sourceWithStorageList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|StorageTypeNodePair
name|chosenTarget
init|=
literal|null
decl_stmt|;
comment|// Chosen the target storage within same datanode. So just skipping this
comment|// source node.
if|if
condition|(
name|checkIfAlreadyChosen
argument_list|(
name|blockMovingInfos
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|chosenTarget
operator|==
literal|null
operator|&&
name|dnCacheMgr
operator|.
name|getCluster
argument_list|()
operator|.
name|isNodeGroupAware
argument_list|()
condition|)
block|{
name|chosenTarget
operator|=
name|chooseTarget
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|expectedTypes
argument_list|,
name|Matcher
operator|.
name|SAME_NODE_GROUP
argument_list|,
name|targetDns
argument_list|,
name|excludeNodes
argument_list|)
expr_stmt|;
block|}
comment|// Then, match nodes on the same rack
if|if
condition|(
name|chosenTarget
operator|==
literal|null
condition|)
block|{
name|chosenTarget
operator|=
name|chooseTarget
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|expectedTypes
argument_list|,
name|Matcher
operator|.
name|SAME_RACK
argument_list|,
name|targetDns
argument_list|,
name|excludeNodes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|chosenTarget
operator|==
literal|null
condition|)
block|{
name|chosenTarget
operator|=
name|chooseTarget
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|expectedTypes
argument_list|,
name|Matcher
operator|.
name|ANY_OTHER
argument_list|,
name|targetDns
argument_list|,
name|excludeNodes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|chosenTarget
condition|)
block|{
if|if
condition|(
name|blockInfo
operator|.
name|isStriped
argument_list|()
condition|)
block|{
name|buildStripedBlockMovingInfos
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|existingTypeNodePair
operator|.
name|storageType
argument_list|,
name|chosenTarget
operator|.
name|dn
argument_list|,
name|chosenTarget
operator|.
name|storageType
argument_list|,
name|blockMovingInfos
argument_list|,
name|ecPolicy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buildContinuousBlockMovingInfos
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|existingTypeNodePair
operator|.
name|storageType
argument_list|,
name|chosenTarget
operator|.
name|dn
argument_list|,
name|chosenTarget
operator|.
name|storageType
argument_list|,
name|blockMovingInfos
argument_list|)
expr_stmt|;
block|}
name|expectedTypes
operator|.
name|remove
argument_list|(
name|chosenTarget
operator|.
name|storageType
argument_list|)
expr_stmt|;
name|excludeNodes
operator|.
name|add
argument_list|(
name|chosenTarget
operator|.
name|dn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to choose target datanode for the required"
operator|+
literal|" storage types {}, block:{}, existing storage type:{}"
argument_list|,
name|expectedTypes
argument_list|,
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|storageType
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expectedTypes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|foundMatchingTargetNodesForBlock
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|foundMatchingTargetNodesForBlock
return|;
block|}
DECL|method|checkIfAlreadyChosen (List<BlockMovingInfo> blockMovingInfos, DatanodeInfo dn)
specifier|private
name|boolean
name|checkIfAlreadyChosen
parameter_list|(
name|List
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blockMovingInfos
parameter_list|,
name|DatanodeInfo
name|dn
parameter_list|)
block|{
for|for
control|(
name|BlockMovingInfo
name|blockMovingInfo
range|:
name|blockMovingInfos
control|)
block|{
if|if
condition|(
name|blockMovingInfo
operator|.
name|getSource
argument_list|()
operator|.
name|equals
argument_list|(
name|dn
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|buildContinuousBlockMovingInfos (LocatedBlock blockInfo, DatanodeInfo sourceNode, StorageType sourceStorageType, DatanodeInfo targetNode, StorageType targetStorageType, List<BlockMovingInfo> blkMovingInfos)
specifier|private
name|void
name|buildContinuousBlockMovingInfos
parameter_list|(
name|LocatedBlock
name|blockInfo
parameter_list|,
name|DatanodeInfo
name|sourceNode
parameter_list|,
name|StorageType
name|sourceStorageType
parameter_list|,
name|DatanodeInfo
name|targetNode
parameter_list|,
name|StorageType
name|targetStorageType
parameter_list|,
name|List
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blkMovingInfos
parameter_list|)
block|{
name|Block
name|blk
init|=
name|ExtendedBlock
operator|.
name|getLocalBlock
argument_list|(
name|blockInfo
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|BlockMovingInfo
name|blkMovingInfo
init|=
operator|new
name|BlockMovingInfo
argument_list|(
name|blk
argument_list|,
name|sourceNode
argument_list|,
name|targetNode
argument_list|,
name|sourceStorageType
argument_list|,
name|targetStorageType
argument_list|)
decl_stmt|;
name|blkMovingInfos
operator|.
name|add
argument_list|(
name|blkMovingInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|buildStripedBlockMovingInfos (LocatedBlock blockInfo, DatanodeInfo sourceNode, StorageType sourceStorageType, DatanodeInfo targetNode, StorageType targetStorageType, List<BlockMovingInfo> blkMovingInfos, ErasureCodingPolicy ecPolicy)
specifier|private
name|void
name|buildStripedBlockMovingInfos
parameter_list|(
name|LocatedBlock
name|blockInfo
parameter_list|,
name|DatanodeInfo
name|sourceNode
parameter_list|,
name|StorageType
name|sourceStorageType
parameter_list|,
name|DatanodeInfo
name|targetNode
parameter_list|,
name|StorageType
name|targetStorageType
parameter_list|,
name|List
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blkMovingInfos
parameter_list|,
name|ErasureCodingPolicy
name|ecPolicy
parameter_list|)
block|{
comment|// For a striped block, it needs to construct internal block at the given
comment|// index of a block group. Here it is iterating over all the block indices
comment|// and construct internal blocks which can be then considered for block
comment|// movement.
name|LocatedStripedBlock
name|sBlockInfo
init|=
operator|(
name|LocatedStripedBlock
operator|)
name|blockInfo
decl_stmt|;
name|byte
index|[]
name|indices
init|=
name|sBlockInfo
operator|.
name|getBlockIndices
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|locations
init|=
name|sBlockInfo
operator|.
name|getLocations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|blkIndex
init|=
name|indices
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|blkIndex
operator|>=
literal|0
condition|)
block|{
comment|// pick block movement only for the given source node.
if|if
condition|(
name|sourceNode
operator|.
name|equals
argument_list|(
name|locations
index|[
name|i
index|]
argument_list|)
condition|)
block|{
comment|// construct internal block
name|ExtendedBlock
name|extBlock
init|=
name|sBlockInfo
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|long
name|numBytes
init|=
name|StripedBlockUtil
operator|.
name|getInternalBlockLength
argument_list|(
name|extBlock
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|ecPolicy
argument_list|,
name|blkIndex
argument_list|)
decl_stmt|;
name|Block
name|blk
init|=
operator|new
name|Block
argument_list|(
name|ExtendedBlock
operator|.
name|getLocalBlock
argument_list|(
name|extBlock
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|blkId
init|=
name|blk
operator|.
name|getBlockId
argument_list|()
operator|+
name|blkIndex
decl_stmt|;
name|blk
operator|.
name|setBlockId
argument_list|(
name|blkId
argument_list|)
expr_stmt|;
name|blk
operator|.
name|setNumBytes
argument_list|(
name|numBytes
argument_list|)
expr_stmt|;
name|BlockMovingInfo
name|blkMovingInfo
init|=
operator|new
name|BlockMovingInfo
argument_list|(
name|blk
argument_list|,
name|sourceNode
argument_list|,
name|targetNode
argument_list|,
name|sourceStorageType
argument_list|,
name|targetStorageType
argument_list|)
decl_stmt|;
name|blkMovingInfos
operator|.
name|add
argument_list|(
name|blkMovingInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Choose the target storage within same datanode if possible.    *    * @param blockInfo    *          - block info    * @param source    *          - source datanode    * @param targetDns    *          - set of target datanodes with its respective storage type    * @param targetTypes    *          - list of target storage types    */
DECL|method|chooseTargetTypeInSameNode (LocatedBlock blockInfo, DatanodeInfo source, EnumMap<StorageType, List<DatanodeWithStorage.StorageDetails>> targetDns, List<StorageType> targetTypes)
specifier|private
name|StorageTypeNodePair
name|chooseTargetTypeInSameNode
parameter_list|(
name|LocatedBlock
name|blockInfo
parameter_list|,
name|DatanodeInfo
name|source
parameter_list|,
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|DatanodeWithStorage
operator|.
name|StorageDetails
argument_list|>
argument_list|>
name|targetDns
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|targetTypes
parameter_list|)
block|{
for|for
control|(
name|StorageType
name|t
range|:
name|targetTypes
control|)
block|{
name|List
argument_list|<
name|DatanodeWithStorage
operator|.
name|StorageDetails
argument_list|>
name|targetNodeStorages
init|=
name|targetDns
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetNodeStorages
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|DatanodeWithStorage
operator|.
name|StorageDetails
name|targetNode
range|:
name|targetNodeStorages
control|)
block|{
if|if
condition|(
name|targetNode
operator|.
name|getDatanodeInfo
argument_list|()
operator|.
name|equals
argument_list|(
name|source
argument_list|)
condition|)
block|{
comment|// Good target with enough space to write the given block size.
if|if
condition|(
name|targetNode
operator|.
name|hasSpaceForScheduling
argument_list|(
name|blockInfo
operator|.
name|getBlockSize
argument_list|()
argument_list|)
condition|)
block|{
name|targetNode
operator|.
name|incScheduledSize
argument_list|(
name|blockInfo
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|StorageTypeNodePair
argument_list|(
name|t
argument_list|,
name|source
argument_list|)
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Datanode:{} storage type:{} doesn't have sufficient "
operator|+
literal|"space:{} to move the target block size:{}"
argument_list|,
name|source
argument_list|,
name|t
argument_list|,
name|targetNode
argument_list|,
name|blockInfo
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|chooseTarget (LocatedBlock block, DatanodeInfo source, List<StorageType> targetTypes, Matcher matcher, EnumMap<StorageType, List<DatanodeWithStorage.StorageDetails>> locsForExpectedStorageTypes, List<DatanodeInfo> excludeNodes)
specifier|private
name|StorageTypeNodePair
name|chooseTarget
parameter_list|(
name|LocatedBlock
name|block
parameter_list|,
name|DatanodeInfo
name|source
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|targetTypes
parameter_list|,
name|Matcher
name|matcher
parameter_list|,
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|DatanodeWithStorage
operator|.
name|StorageDetails
argument_list|>
argument_list|>
name|locsForExpectedStorageTypes
parameter_list|,
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|excludeNodes
parameter_list|)
block|{
for|for
control|(
name|StorageType
name|t
range|:
name|targetTypes
control|)
block|{
name|List
argument_list|<
name|DatanodeWithStorage
operator|.
name|StorageDetails
argument_list|>
name|nodesWithStorages
init|=
name|locsForExpectedStorageTypes
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodesWithStorages
operator|==
literal|null
operator|||
name|nodesWithStorages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
comment|// no target nodes with the required storage type.
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodesWithStorages
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeWithStorage
operator|.
name|StorageDetails
name|targetNode
range|:
name|nodesWithStorages
control|)
block|{
name|DatanodeInfo
name|target
init|=
name|targetNode
operator|.
name|getDatanodeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|excludeNodes
operator|.
name|contains
argument_list|(
name|target
argument_list|)
operator|&&
name|matcher
operator|.
name|match
argument_list|(
name|dnCacheMgr
operator|.
name|getCluster
argument_list|()
argument_list|,
name|source
argument_list|,
name|target
argument_list|)
condition|)
block|{
comment|// Good target with enough space to write the given block size.
if|if
condition|(
name|targetNode
operator|.
name|hasSpaceForScheduling
argument_list|(
name|block
operator|.
name|getBlockSize
argument_list|()
argument_list|)
condition|)
block|{
name|targetNode
operator|.
name|incScheduledSize
argument_list|(
name|block
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|StorageTypeNodePair
argument_list|(
name|t
argument_list|,
name|target
argument_list|)
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Datanode:{} storage type:{} doesn't have sufficient "
operator|+
literal|"space:{} to move the target block size:{}"
argument_list|,
name|target
argument_list|,
name|t
argument_list|,
name|targetNode
argument_list|,
name|block
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Keeps datanode with its respective storage type.    */
DECL|class|StorageTypeNodePair
specifier|static
specifier|final
class|class
name|StorageTypeNodePair
block|{
DECL|field|storageType
specifier|private
specifier|final
name|StorageType
name|storageType
decl_stmt|;
DECL|field|dn
specifier|private
specifier|final
name|DatanodeInfo
name|dn
decl_stmt|;
DECL|method|StorageTypeNodePair (StorageType storageType, DatanodeInfo dn)
name|StorageTypeNodePair
parameter_list|(
name|StorageType
name|storageType
parameter_list|,
name|DatanodeInfo
name|dn
parameter_list|)
block|{
name|this
operator|.
name|storageType
operator|=
name|storageType
expr_stmt|;
name|this
operator|.
name|dn
operator|=
name|dn
expr_stmt|;
block|}
DECL|method|getDatanodeInfo ()
specifier|public
name|DatanodeInfo
name|getDatanodeInfo
parameter_list|()
block|{
return|return
name|dn
return|;
block|}
DECL|method|getStorageType ()
specifier|public
name|StorageType
name|getStorageType
parameter_list|()
block|{
return|return
name|storageType
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"StorageTypeNodePair(\n  "
argument_list|)
operator|.
name|append
argument_list|(
literal|"DatanodeInfo: "
argument_list|)
operator|.
name|append
argument_list|(
name|dn
argument_list|)
operator|.
name|append
argument_list|(
literal|", StorageType: "
argument_list|)
operator|.
name|append
argument_list|(
name|storageType
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|DatanodeWithStorage
operator|.
name|StorageDetails
argument_list|>
argument_list|>
DECL|method|findTargetsForExpectedStorageTypes (List<StorageType> expected, DatanodeMap liveDns)
name|findTargetsForExpectedStorageTypes
parameter_list|(
name|List
argument_list|<
name|StorageType
argument_list|>
name|expected
parameter_list|,
name|DatanodeMap
name|liveDns
parameter_list|)
block|{
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|DatanodeWithStorage
operator|.
name|StorageDetails
argument_list|>
argument_list|>
name|targetsMap
init|=
operator|new
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|DatanodeWithStorage
operator|.
name|StorageDetails
argument_list|>
argument_list|>
argument_list|(
name|StorageType
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|StorageType
name|storageType
range|:
name|expected
control|)
block|{
name|List
argument_list|<
name|DatanodeWithStorage
argument_list|>
name|nodes
init|=
name|liveDns
operator|.
name|getTarget
argument_list|(
name|storageType
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|==
literal|null
condition|)
block|{
return|return
name|targetsMap
return|;
block|}
name|List
argument_list|<
name|DatanodeWithStorage
operator|.
name|StorageDetails
argument_list|>
name|listNodes
init|=
name|targetsMap
operator|.
name|get
argument_list|(
name|storageType
argument_list|)
decl_stmt|;
if|if
condition|(
name|listNodes
operator|==
literal|null
condition|)
block|{
name|listNodes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|targetsMap
operator|.
name|put
argument_list|(
name|storageType
argument_list|,
name|listNodes
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DatanodeWithStorage
name|n
range|:
name|nodes
control|)
block|{
specifier|final
name|DatanodeWithStorage
operator|.
name|StorageDetails
name|node
init|=
name|getMaxRemaining
argument_list|(
name|n
argument_list|,
name|storageType
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|listNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|targetsMap
return|;
block|}
DECL|method|getMaxRemaining ( DatanodeWithStorage node, StorageType storageType)
specifier|private
specifier|static
name|DatanodeWithStorage
operator|.
name|StorageDetails
name|getMaxRemaining
parameter_list|(
name|DatanodeWithStorage
name|node
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
block|{
name|long
name|max
init|=
literal|0L
decl_stmt|;
name|DatanodeWithStorage
operator|.
name|StorageDetails
name|nodeInfo
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|DatanodeWithStorage
operator|.
name|StorageDetails
argument_list|>
name|storages
init|=
name|node
operator|.
name|getNodesWithStorages
argument_list|(
name|storageType
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeWithStorage
operator|.
name|StorageDetails
name|n
range|:
name|storages
control|)
block|{
if|if
condition|(
name|n
operator|.
name|availableSizeToMove
argument_list|()
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|n
operator|.
name|availableSizeToMove
argument_list|()
expr_stmt|;
name|nodeInfo
operator|=
name|n
expr_stmt|;
block|}
block|}
return|return
name|nodeInfo
return|;
block|}
DECL|method|checkSourceAndTargetTypeExists (DatanodeInfo dn, List<StorageType> existingStorageTypes, List<StorageType> expectedStorageTypes, DatanodeMap liveDns)
specifier|private
name|boolean
name|checkSourceAndTargetTypeExists
parameter_list|(
name|DatanodeInfo
name|dn
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|existingStorageTypes
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|expectedStorageTypes
parameter_list|,
name|DatanodeMap
name|liveDns
parameter_list|)
block|{
name|boolean
name|isExpectedTypeAvailable
init|=
literal|false
decl_stmt|;
name|boolean
name|isExistingTypeAvailable
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DatanodeWithStorage
name|liveDn
range|:
name|liveDns
operator|.
name|getTargets
argument_list|()
control|)
block|{
if|if
condition|(
name|dn
operator|.
name|equals
argument_list|(
name|liveDn
operator|.
name|datanode
argument_list|)
condition|)
block|{
for|for
control|(
name|StorageType
name|eachType
range|:
name|liveDn
operator|.
name|getStorageTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|existingStorageTypes
operator|.
name|contains
argument_list|(
name|eachType
argument_list|)
condition|)
block|{
name|isExistingTypeAvailable
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|expectedStorageTypes
operator|.
name|contains
argument_list|(
name|eachType
argument_list|)
condition|)
block|{
name|isExpectedTypeAvailable
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isExistingTypeAvailable
operator|&&
name|isExpectedTypeAvailable
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
name|isExistingTypeAvailable
operator|&&
name|isExpectedTypeAvailable
return|;
block|}
comment|/**    * Maintains storage type map with the available datanodes in the cluster.    */
DECL|class|DatanodeMap
specifier|public
specifier|static
class|class
name|DatanodeMap
block|{
DECL|field|targetsMap
specifier|private
specifier|final
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|DatanodeWithStorage
argument_list|>
argument_list|>
name|targetsMap
init|=
operator|new
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|DatanodeWithStorage
argument_list|>
argument_list|>
argument_list|(
name|StorageType
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|targets
specifier|private
name|List
argument_list|<
name|DatanodeWithStorage
argument_list|>
name|targets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Build datanode map with the available storage types.      *      * @param node      *          datanode      * @param storageTypes      *          list of available storage types in the given datanode      * @param maxSize2Move      *          available space which can be used for scheduling block move      */
DECL|method|addTarget (DatanodeInfo node, List<StorageType> storageTypes, List<Long> maxSize2Move)
name|void
name|addTarget
parameter_list|(
name|DatanodeInfo
name|node
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|storageTypes
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|maxSize2Move
parameter_list|)
block|{
name|DatanodeWithStorage
name|nodeStorage
init|=
operator|new
name|DatanodeWithStorage
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|targets
operator|.
name|add
argument_list|(
name|nodeStorage
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|storageTypes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StorageType
name|type
init|=
name|storageTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeWithStorage
argument_list|>
name|nodeStorages
init|=
name|targetsMap
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|nodeStorage
operator|.
name|addStorageType
argument_list|(
name|type
argument_list|,
name|maxSize2Move
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeStorages
operator|==
literal|null
condition|)
block|{
name|nodeStorages
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
name|targetsMap
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|nodeStorages
argument_list|)
expr_stmt|;
block|}
name|nodeStorages
operator|.
name|add
argument_list|(
name|nodeStorage
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTarget (StorageType storageType)
name|List
argument_list|<
name|DatanodeWithStorage
argument_list|>
name|getTarget
parameter_list|(
name|StorageType
name|storageType
parameter_list|)
block|{
return|return
name|targetsMap
operator|.
name|get
argument_list|(
name|storageType
argument_list|)
return|;
block|}
DECL|method|getTargets ()
specifier|public
name|List
argument_list|<
name|DatanodeWithStorage
argument_list|>
name|getTargets
parameter_list|()
block|{
return|return
name|targets
return|;
block|}
DECL|method|reset ()
name|void
name|reset
parameter_list|()
block|{
name|targetsMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Keeps datanode with its respective set of supported storage types. It holds    * the available space in each volumes and will be used while pairing the    * target datanodes.    */
DECL|class|DatanodeWithStorage
specifier|public
specifier|static
specifier|final
class|class
name|DatanodeWithStorage
block|{
DECL|field|storageMap
specifier|private
specifier|final
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|StorageDetails
argument_list|>
argument_list|>
name|storageMap
init|=
operator|new
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|StorageDetails
argument_list|>
argument_list|>
argument_list|(
name|StorageType
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|datanode
specifier|private
specifier|final
name|DatanodeInfo
name|datanode
decl_stmt|;
DECL|method|DatanodeWithStorage (DatanodeInfo datanode)
specifier|private
name|DatanodeWithStorage
parameter_list|(
name|DatanodeInfo
name|datanode
parameter_list|)
block|{
name|this
operator|.
name|datanode
operator|=
name|datanode
expr_stmt|;
block|}
DECL|method|getDatanodeInfo ()
specifier|public
name|DatanodeInfo
name|getDatanodeInfo
parameter_list|()
block|{
return|return
name|datanode
return|;
block|}
DECL|method|getStorageTypes ()
name|Set
argument_list|<
name|StorageType
argument_list|>
name|getStorageTypes
parameter_list|()
block|{
return|return
name|storageMap
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|addStorageType (StorageType t, long maxSize2Move)
specifier|private
name|void
name|addStorageType
parameter_list|(
name|StorageType
name|t
parameter_list|,
name|long
name|maxSize2Move
parameter_list|)
block|{
name|List
argument_list|<
name|StorageDetails
argument_list|>
name|nodesWithStorages
init|=
name|getNodesWithStorages
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodesWithStorages
operator|==
literal|null
condition|)
block|{
name|nodesWithStorages
operator|=
operator|new
name|LinkedList
argument_list|<
name|StorageDetails
argument_list|>
argument_list|()
expr_stmt|;
name|storageMap
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|nodesWithStorages
argument_list|)
expr_stmt|;
block|}
name|nodesWithStorages
operator|.
name|add
argument_list|(
operator|new
name|StorageDetails
argument_list|(
name|maxSize2Move
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns datanode storages which has the given storage type.      *      * @param type      *          - storage type      * @return datanodes for the given storage type      */
DECL|method|getNodesWithStorages (StorageType type)
specifier|private
name|List
argument_list|<
name|StorageDetails
argument_list|>
name|getNodesWithStorages
parameter_list|(
name|StorageType
name|type
parameter_list|)
block|{
return|return
name|storageMap
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"DatanodeWithStorageInfo(\n  "
argument_list|)
operator|.
name|append
argument_list|(
literal|"Datanode: "
argument_list|)
operator|.
name|append
argument_list|(
name|datanode
argument_list|)
operator|.
name|append
argument_list|(
literal|" StorageTypeNodeMap: "
argument_list|)
operator|.
name|append
argument_list|(
name|storageMap
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Storage details in a datanode storage type. */
DECL|class|StorageDetails
specifier|final
class|class
name|StorageDetails
block|{
DECL|field|maxSize2Move
specifier|private
specifier|final
name|long
name|maxSize2Move
decl_stmt|;
DECL|field|scheduledSize
specifier|private
name|long
name|scheduledSize
init|=
literal|0L
decl_stmt|;
DECL|method|StorageDetails (long maxSize2Move)
specifier|private
name|StorageDetails
parameter_list|(
name|long
name|maxSize2Move
parameter_list|)
block|{
name|this
operator|.
name|maxSize2Move
operator|=
name|maxSize2Move
expr_stmt|;
block|}
DECL|method|getDatanodeInfo ()
specifier|private
name|DatanodeInfo
name|getDatanodeInfo
parameter_list|()
block|{
return|return
name|DatanodeWithStorage
operator|.
name|this
operator|.
name|datanode
return|;
block|}
comment|/**        * Checks whether this datanode storage has sufficient space to occupy the        * given block size.        */
DECL|method|hasSpaceForScheduling (long size)
specifier|private
specifier|synchronized
name|boolean
name|hasSpaceForScheduling
parameter_list|(
name|long
name|size
parameter_list|)
block|{
return|return
name|availableSizeToMove
argument_list|()
operator|>
name|size
return|;
block|}
comment|/**        * @return the total number of bytes that need to be moved.        */
DECL|method|availableSizeToMove ()
specifier|private
specifier|synchronized
name|long
name|availableSizeToMove
parameter_list|()
block|{
return|return
name|maxSize2Move
operator|-
name|scheduledSize
return|;
block|}
comment|/** Increment scheduled size. */
DECL|method|incScheduledSize (long size)
specifier|private
specifier|synchronized
name|void
name|incScheduledSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|scheduledSize
operator|+=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"StorageDetails(\n  "
argument_list|)
operator|.
name|append
argument_list|(
literal|"maxSize2Move: "
argument_list|)
operator|.
name|append
argument_list|(
name|maxSize2Move
argument_list|)
operator|.
name|append
argument_list|(
literal|" scheduledSize: "
argument_list|)
operator|.
name|append
argument_list|(
name|scheduledSize
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
comment|/**    * Receives storage movement attempt finished block report.    *    * @param dnInfo    *          reported datanode    * @param storageType    *          - storage type    * @param block    *          movement attempt finished block.    */
annotation|@
name|Override
DECL|method|notifyStorageMovementAttemptFinishedBlk (DatanodeInfo dnInfo, StorageType storageType, Block block)
specifier|public
name|void
name|notifyStorageMovementAttemptFinishedBlk
parameter_list|(
name|DatanodeInfo
name|dnInfo
parameter_list|,
name|StorageType
name|storageType
parameter_list|,
name|Block
name|block
parameter_list|)
block|{
name|storageMovementsMonitor
operator|.
name|notifyReportedBlock
argument_list|(
name|dnInfo
argument_list|,
name|storageType
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAttemptedItemsMonitor ()
specifier|public
name|BlockStorageMovementAttemptedItems
name|getAttemptedItemsMonitor
parameter_list|()
block|{
return|return
name|storageMovementsMonitor
return|;
block|}
comment|/**    * Clear the queues from to be storage movement needed lists and items tracked    * in storage movement monitor.    */
DECL|method|clearQueues ()
specifier|public
name|void
name|clearQueues
parameter_list|()
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Clearing all the queues from StoragePolicySatisfier. So, "
operator|+
literal|"user requests on satisfying block storages would be discarded."
argument_list|)
expr_stmt|;
name|storageMovementNeeded
operator|.
name|clearAll
argument_list|()
expr_stmt|;
block|}
comment|/**    * Clear queues for given track id.    */
DECL|method|clearQueue (long trackId)
specifier|public
name|void
name|clearQueue
parameter_list|(
name|long
name|trackId
parameter_list|)
block|{
name|storageMovementNeeded
operator|.
name|clearQueue
argument_list|(
name|trackId
argument_list|)
expr_stmt|;
block|}
comment|/**    * This class contains information of an attempted blocks and its last    * attempted or reported time stamp. This is used by    * {@link BlockStorageMovementAttemptedItems#storageMovementAttemptedItems}.    */
DECL|class|AttemptedItemInfo
specifier|final
specifier|static
class|class
name|AttemptedItemInfo
extends|extends
name|ItemInfo
block|{
DECL|field|lastAttemptedOrReportedTime
specifier|private
name|long
name|lastAttemptedOrReportedTime
decl_stmt|;
DECL|field|blocks
specifier|private
specifier|final
name|Set
argument_list|<
name|Block
argument_list|>
name|blocks
decl_stmt|;
comment|/**      * AttemptedItemInfo constructor.      *      * @param rootId      *          rootId for trackId      * @param trackId      *          trackId for file.      * @param lastAttemptedOrReportedTime      *          last attempted or reported time      * @param blocks      *          scheduled blocks      * @param retryCount      *          file retry count      */
DECL|method|AttemptedItemInfo (long rootId, long trackId, long lastAttemptedOrReportedTime, Set<Block> blocks, int retryCount)
name|AttemptedItemInfo
parameter_list|(
name|long
name|rootId
parameter_list|,
name|long
name|trackId
parameter_list|,
name|long
name|lastAttemptedOrReportedTime
parameter_list|,
name|Set
argument_list|<
name|Block
argument_list|>
name|blocks
parameter_list|,
name|int
name|retryCount
parameter_list|)
block|{
name|super
argument_list|(
name|rootId
argument_list|,
name|trackId
argument_list|,
name|retryCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastAttemptedOrReportedTime
operator|=
name|lastAttemptedOrReportedTime
expr_stmt|;
name|this
operator|.
name|blocks
operator|=
name|blocks
expr_stmt|;
block|}
comment|/**      * @return last attempted or reported time stamp.      */
DECL|method|getLastAttemptedOrReportedTime ()
name|long
name|getLastAttemptedOrReportedTime
parameter_list|()
block|{
return|return
name|lastAttemptedOrReportedTime
return|;
block|}
comment|/**      * Update lastAttemptedOrReportedTime, so that the expiration time will be      * postponed to future.      */
DECL|method|touchLastReportedTimeStamp ()
name|void
name|touchLastReportedTimeStamp
parameter_list|()
block|{
name|this
operator|.
name|lastAttemptedOrReportedTime
operator|=
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
DECL|method|getBlocks ()
name|Set
argument_list|<
name|Block
argument_list|>
name|getBlocks
parameter_list|()
block|{
return|return
name|this
operator|.
name|blocks
return|;
block|}
block|}
comment|/**    * Returns sps invoked path status. This method is used by internal satisfy    * storage policy service.    *    * @param path    *          sps path    * @return storage policy satisfy path status    * @throws IOException    */
DECL|method|checkStoragePolicySatisfyPathStatus ( String path)
specifier|public
name|StoragePolicySatisfyPathStatus
name|checkStoragePolicySatisfyPathStatus
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|storageMovementNeeded
operator|.
name|getStatus
argument_list|(
name|ctxt
operator|.
name|getFileID
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addFileToProcess (ItemInfo trackInfo, boolean scanCompleted)
specifier|public
name|void
name|addFileToProcess
parameter_list|(
name|ItemInfo
name|trackInfo
parameter_list|,
name|boolean
name|scanCompleted
parameter_list|)
block|{
name|storageMovementNeeded
operator|.
name|add
argument_list|(
name|trackInfo
argument_list|,
name|scanCompleted
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added track info for inode {} to block "
operator|+
literal|"storageMovementNeeded queue"
argument_list|,
name|trackInfo
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addAllFilesToProcess (long startPath, List<ItemInfo> itemInfoList, boolean scanCompleted)
specifier|public
name|void
name|addAllFilesToProcess
parameter_list|(
name|long
name|startPath
parameter_list|,
name|List
argument_list|<
name|ItemInfo
argument_list|>
name|itemInfoList
parameter_list|,
name|boolean
name|scanCompleted
parameter_list|)
block|{
name|getStorageMovementQueue
argument_list|()
operator|.
name|addAll
argument_list|(
name|startPath
argument_list|,
name|itemInfoList
argument_list|,
name|scanCompleted
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processingQueueSize ()
specifier|public
name|int
name|processingQueueSize
parameter_list|()
block|{
return|return
name|storageMovementNeeded
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getStorageMovementQueue ()
specifier|public
name|BlockStorageMovementNeeded
name|getStorageMovementQueue
parameter_list|()
block|{
return|return
name|storageMovementNeeded
return|;
block|}
annotation|@
name|Override
DECL|method|markScanCompletedForPath (long inodeId)
specifier|public
name|void
name|markScanCompletedForPath
parameter_list|(
name|long
name|inodeId
parameter_list|)
block|{
name|getStorageMovementQueue
argument_list|()
operator|.
name|markScanCompletedForDir
argument_list|(
name|inodeId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Join main SPS thread.    */
DECL|method|join ()
specifier|public
name|void
name|join
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|storagePolicySatisfierThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|/**    * Remove the overlap between the expected types and the existing types.    *    * @param expected    *          - Expected storage types list.    * @param existing    *          - Existing storage types list.    * @param ignoreNonMovable    *          ignore non-movable storage types by removing them from both    *          expected and existing storage type list to prevent non-movable    *          storage from being moved.    * @returns if the existing types or the expected types is empty after    *          removing the overlap.    */
DECL|method|removeOverlapBetweenStorageTypes ( List<StorageType> expected, List<StorageType> existing, boolean ignoreNonMovable)
specifier|private
specifier|static
name|boolean
name|removeOverlapBetweenStorageTypes
parameter_list|(
name|List
argument_list|<
name|StorageType
argument_list|>
name|expected
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|existing
parameter_list|,
name|boolean
name|ignoreNonMovable
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|StorageType
argument_list|>
name|i
init|=
name|existing
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|StorageType
name|t
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|expected
operator|.
name|remove
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ignoreNonMovable
condition|)
block|{
name|removeNonMovable
argument_list|(
name|existing
argument_list|)
expr_stmt|;
name|removeNonMovable
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
return|return
name|expected
operator|.
name|isEmpty
argument_list|()
operator|||
name|existing
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|removeNonMovable (List<StorageType> types)
specifier|private
specifier|static
name|void
name|removeNonMovable
parameter_list|(
name|List
argument_list|<
name|StorageType
argument_list|>
name|types
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|StorageType
argument_list|>
name|i
init|=
name|types
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|StorageType
name|t
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|isMovable
argument_list|()
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get DFS_SPS_WORK_MULTIPLIER_PER_ITERATION from    * configuration.    *    * @param conf Configuration    * @return Value of DFS_SPS_WORK_MULTIPLIER_PER_ITERATION    */
DECL|method|getSPSWorkMultiplier (Configuration conf)
specifier|private
specifier|static
name|int
name|getSPSWorkMultiplier
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|spsWorkMultiplier
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_SPS_WORK_MULTIPLIER_PER_ITERATION
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_SPS_WORK_MULTIPLIER_PER_ITERATION_DEFAULT
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|(
name|spsWorkMultiplier
operator|>
literal|0
operator|)
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_SPS_WORK_MULTIPLIER_PER_ITERATION
operator|+
literal|" = '"
operator|+
name|spsWorkMultiplier
operator|+
literal|"' is invalid. "
operator|+
literal|"It should be a positive, non-zero integer value."
argument_list|)
expr_stmt|;
return|return
name|spsWorkMultiplier
return|;
block|}
block|}
end_class

end_unit

