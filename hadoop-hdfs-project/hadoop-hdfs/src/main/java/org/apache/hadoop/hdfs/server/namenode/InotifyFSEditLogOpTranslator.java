begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|inotify
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|inotify
operator|.
name|EventBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Translates from edit log ops to inotify events.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|InotifyFSEditLogOpTranslator
specifier|public
class|class
name|InotifyFSEditLogOpTranslator
block|{
DECL|method|getSize (FSEditLogOp.AddCloseOp acOp)
specifier|private
specifier|static
name|long
name|getSize
parameter_list|(
name|FSEditLogOp
operator|.
name|AddCloseOp
name|acOp
parameter_list|)
block|{
name|long
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Block
name|b
range|:
name|acOp
operator|.
name|getBlocks
argument_list|()
control|)
block|{
name|size
operator|+=
name|b
operator|.
name|getNumBytes
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
DECL|method|translate (FSEditLogOp op)
specifier|public
specifier|static
name|EventBatch
name|translate
parameter_list|(
name|FSEditLogOp
name|op
parameter_list|)
block|{
switch|switch
condition|(
name|op
operator|.
name|opCode
condition|)
block|{
case|case
name|OP_ADD
case|:
name|FSEditLogOp
operator|.
name|AddOp
name|addOp
init|=
operator|(
name|FSEditLogOp
operator|.
name|AddOp
operator|)
name|op
decl_stmt|;
if|if
condition|(
name|addOp
operator|.
name|blocks
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// create
return|return
operator|new
name|EventBatch
argument_list|(
name|op
operator|.
name|txid
argument_list|,
operator|new
name|Event
index|[]
block|{
operator|new
name|Event
operator|.
name|CreateEvent
operator|.
name|Builder
argument_list|()
operator|.
name|path
argument_list|(
name|addOp
operator|.
name|path
argument_list|)
operator|.
name|ctime
argument_list|(
name|addOp
operator|.
name|atime
argument_list|)
operator|.
name|replication
argument_list|(
name|addOp
operator|.
name|replication
argument_list|)
operator|.
name|ownerName
argument_list|(
name|addOp
operator|.
name|permissions
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|groupName
argument_list|(
name|addOp
operator|.
name|permissions
operator|.
name|getGroupName
argument_list|()
argument_list|)
operator|.
name|perms
argument_list|(
name|addOp
operator|.
name|permissions
operator|.
name|getPermission
argument_list|()
argument_list|)
operator|.
name|overwrite
argument_list|(
name|addOp
operator|.
name|overwrite
argument_list|)
operator|.
name|iNodeType
argument_list|(
name|Event
operator|.
name|CreateEvent
operator|.
name|INodeType
operator|.
name|FILE
argument_list|)
operator|.
name|build
argument_list|()
block|}
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|EventBatch
argument_list|(
name|op
operator|.
name|txid
argument_list|,
operator|new
name|Event
index|[]
block|{
operator|new
name|Event
operator|.
name|AppendEvent
argument_list|(
name|addOp
operator|.
name|path
argument_list|)
block|}
argument_list|)
return|;
block|}
case|case
name|OP_CLOSE
case|:
name|FSEditLogOp
operator|.
name|CloseOp
name|cOp
init|=
operator|(
name|FSEditLogOp
operator|.
name|CloseOp
operator|)
name|op
decl_stmt|;
return|return
operator|new
name|EventBatch
argument_list|(
name|op
operator|.
name|txid
argument_list|,
operator|new
name|Event
index|[]
block|{
operator|new
name|Event
operator|.
name|CloseEvent
argument_list|(
name|cOp
operator|.
name|path
argument_list|,
name|getSize
argument_list|(
name|cOp
argument_list|)
argument_list|,
name|cOp
operator|.
name|mtime
argument_list|)
block|}
argument_list|)
return|;
case|case
name|OP_SET_REPLICATION
case|:
name|FSEditLogOp
operator|.
name|SetReplicationOp
name|setRepOp
init|=
operator|(
name|FSEditLogOp
operator|.
name|SetReplicationOp
operator|)
name|op
decl_stmt|;
return|return
operator|new
name|EventBatch
argument_list|(
name|op
operator|.
name|txid
argument_list|,
operator|new
name|Event
index|[]
block|{
operator|new
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|Builder
argument_list|()
operator|.
name|metadataType
argument_list|(
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|REPLICATION
argument_list|)
operator|.
name|path
argument_list|(
name|setRepOp
operator|.
name|path
argument_list|)
operator|.
name|replication
argument_list|(
name|setRepOp
operator|.
name|replication
argument_list|)
operator|.
name|build
argument_list|()
block|}
argument_list|)
return|;
case|case
name|OP_CONCAT_DELETE
case|:
name|FSEditLogOp
operator|.
name|ConcatDeleteOp
name|cdOp
init|=
operator|(
name|FSEditLogOp
operator|.
name|ConcatDeleteOp
operator|)
name|op
decl_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|events
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
operator|new
name|Event
operator|.
name|AppendEvent
argument_list|(
name|cdOp
operator|.
name|trg
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|src
range|:
name|cdOp
operator|.
name|srcs
control|)
block|{
name|events
operator|.
name|add
argument_list|(
operator|new
name|Event
operator|.
name|UnlinkEvent
argument_list|(
name|src
argument_list|,
name|cdOp
operator|.
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|events
operator|.
name|add
argument_list|(
operator|new
name|Event
operator|.
name|CloseEvent
argument_list|(
name|cdOp
operator|.
name|trg
argument_list|,
operator|-
literal|1
argument_list|,
name|cdOp
operator|.
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|EventBatch
argument_list|(
name|op
operator|.
name|txid
argument_list|,
name|events
operator|.
name|toArray
argument_list|(
operator|new
name|Event
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
case|case
name|OP_RENAME_OLD
case|:
name|FSEditLogOp
operator|.
name|RenameOldOp
name|rnOpOld
init|=
operator|(
name|FSEditLogOp
operator|.
name|RenameOldOp
operator|)
name|op
decl_stmt|;
return|return
operator|new
name|EventBatch
argument_list|(
name|op
operator|.
name|txid
argument_list|,
operator|new
name|Event
index|[]
block|{
operator|new
name|Event
operator|.
name|RenameEvent
argument_list|(
name|rnOpOld
operator|.
name|src
argument_list|,
name|rnOpOld
operator|.
name|dst
argument_list|,
name|rnOpOld
operator|.
name|timestamp
argument_list|)
block|}
argument_list|)
return|;
case|case
name|OP_RENAME
case|:
name|FSEditLogOp
operator|.
name|RenameOp
name|rnOp
init|=
operator|(
name|FSEditLogOp
operator|.
name|RenameOp
operator|)
name|op
decl_stmt|;
return|return
operator|new
name|EventBatch
argument_list|(
name|op
operator|.
name|txid
argument_list|,
operator|new
name|Event
index|[]
block|{
operator|new
name|Event
operator|.
name|RenameEvent
argument_list|(
name|rnOp
operator|.
name|src
argument_list|,
name|rnOp
operator|.
name|dst
argument_list|,
name|rnOp
operator|.
name|timestamp
argument_list|)
block|}
argument_list|)
return|;
case|case
name|OP_DELETE
case|:
name|FSEditLogOp
operator|.
name|DeleteOp
name|delOp
init|=
operator|(
name|FSEditLogOp
operator|.
name|DeleteOp
operator|)
name|op
decl_stmt|;
return|return
operator|new
name|EventBatch
argument_list|(
name|op
operator|.
name|txid
argument_list|,
operator|new
name|Event
index|[]
block|{
operator|new
name|Event
operator|.
name|UnlinkEvent
argument_list|(
name|delOp
operator|.
name|path
argument_list|,
name|delOp
operator|.
name|timestamp
argument_list|)
block|}
argument_list|)
return|;
case|case
name|OP_MKDIR
case|:
name|FSEditLogOp
operator|.
name|MkdirOp
name|mkOp
init|=
operator|(
name|FSEditLogOp
operator|.
name|MkdirOp
operator|)
name|op
decl_stmt|;
return|return
operator|new
name|EventBatch
argument_list|(
name|op
operator|.
name|txid
argument_list|,
operator|new
name|Event
index|[]
block|{
operator|new
name|Event
operator|.
name|CreateEvent
operator|.
name|Builder
argument_list|()
operator|.
name|path
argument_list|(
name|mkOp
operator|.
name|path
argument_list|)
operator|.
name|ctime
argument_list|(
name|mkOp
operator|.
name|timestamp
argument_list|)
operator|.
name|ownerName
argument_list|(
name|mkOp
operator|.
name|permissions
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|groupName
argument_list|(
name|mkOp
operator|.
name|permissions
operator|.
name|getGroupName
argument_list|()
argument_list|)
operator|.
name|perms
argument_list|(
name|mkOp
operator|.
name|permissions
operator|.
name|getPermission
argument_list|()
argument_list|)
operator|.
name|iNodeType
argument_list|(
name|Event
operator|.
name|CreateEvent
operator|.
name|INodeType
operator|.
name|DIRECTORY
argument_list|)
operator|.
name|build
argument_list|()
block|}
argument_list|)
return|;
case|case
name|OP_SET_PERMISSIONS
case|:
name|FSEditLogOp
operator|.
name|SetPermissionsOp
name|permOp
init|=
operator|(
name|FSEditLogOp
operator|.
name|SetPermissionsOp
operator|)
name|op
decl_stmt|;
return|return
operator|new
name|EventBatch
argument_list|(
name|op
operator|.
name|txid
argument_list|,
operator|new
name|Event
index|[]
block|{
operator|new
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|Builder
argument_list|()
operator|.
name|metadataType
argument_list|(
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|PERMS
argument_list|)
operator|.
name|path
argument_list|(
name|permOp
operator|.
name|src
argument_list|)
operator|.
name|perms
argument_list|(
name|permOp
operator|.
name|permissions
argument_list|)
operator|.
name|build
argument_list|()
block|}
argument_list|)
return|;
case|case
name|OP_SET_OWNER
case|:
name|FSEditLogOp
operator|.
name|SetOwnerOp
name|ownOp
init|=
operator|(
name|FSEditLogOp
operator|.
name|SetOwnerOp
operator|)
name|op
decl_stmt|;
return|return
operator|new
name|EventBatch
argument_list|(
name|op
operator|.
name|txid
argument_list|,
operator|new
name|Event
index|[]
block|{
operator|new
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|Builder
argument_list|()
operator|.
name|metadataType
argument_list|(
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|OWNER
argument_list|)
operator|.
name|path
argument_list|(
name|ownOp
operator|.
name|src
argument_list|)
operator|.
name|ownerName
argument_list|(
name|ownOp
operator|.
name|username
argument_list|)
operator|.
name|groupName
argument_list|(
name|ownOp
operator|.
name|groupname
argument_list|)
operator|.
name|build
argument_list|()
block|}
argument_list|)
return|;
case|case
name|OP_TIMES
case|:
name|FSEditLogOp
operator|.
name|TimesOp
name|timesOp
init|=
operator|(
name|FSEditLogOp
operator|.
name|TimesOp
operator|)
name|op
decl_stmt|;
return|return
operator|new
name|EventBatch
argument_list|(
name|op
operator|.
name|txid
argument_list|,
operator|new
name|Event
index|[]
block|{
operator|new
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|Builder
argument_list|()
operator|.
name|metadataType
argument_list|(
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|TIMES
argument_list|)
operator|.
name|path
argument_list|(
name|timesOp
operator|.
name|path
argument_list|)
operator|.
name|atime
argument_list|(
name|timesOp
operator|.
name|atime
argument_list|)
operator|.
name|mtime
argument_list|(
name|timesOp
operator|.
name|mtime
argument_list|)
operator|.
name|build
argument_list|()
block|}
argument_list|)
return|;
case|case
name|OP_SYMLINK
case|:
name|FSEditLogOp
operator|.
name|SymlinkOp
name|symOp
init|=
operator|(
name|FSEditLogOp
operator|.
name|SymlinkOp
operator|)
name|op
decl_stmt|;
return|return
operator|new
name|EventBatch
argument_list|(
name|op
operator|.
name|txid
argument_list|,
operator|new
name|Event
index|[]
block|{
operator|new
name|Event
operator|.
name|CreateEvent
operator|.
name|Builder
argument_list|()
operator|.
name|path
argument_list|(
name|symOp
operator|.
name|path
argument_list|)
operator|.
name|ctime
argument_list|(
name|symOp
operator|.
name|atime
argument_list|)
operator|.
name|ownerName
argument_list|(
name|symOp
operator|.
name|permissionStatus
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|groupName
argument_list|(
name|symOp
operator|.
name|permissionStatus
operator|.
name|getGroupName
argument_list|()
argument_list|)
operator|.
name|perms
argument_list|(
name|symOp
operator|.
name|permissionStatus
operator|.
name|getPermission
argument_list|()
argument_list|)
operator|.
name|symlinkTarget
argument_list|(
name|symOp
operator|.
name|value
argument_list|)
operator|.
name|iNodeType
argument_list|(
name|Event
operator|.
name|CreateEvent
operator|.
name|INodeType
operator|.
name|SYMLINK
argument_list|)
operator|.
name|build
argument_list|()
block|}
argument_list|)
return|;
case|case
name|OP_REMOVE_XATTR
case|:
name|FSEditLogOp
operator|.
name|RemoveXAttrOp
name|rxOp
init|=
operator|(
name|FSEditLogOp
operator|.
name|RemoveXAttrOp
operator|)
name|op
decl_stmt|;
return|return
operator|new
name|EventBatch
argument_list|(
name|op
operator|.
name|txid
argument_list|,
operator|new
name|Event
index|[]
block|{
operator|new
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|Builder
argument_list|()
operator|.
name|metadataType
argument_list|(
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|XATTRS
argument_list|)
operator|.
name|path
argument_list|(
name|rxOp
operator|.
name|src
argument_list|)
operator|.
name|xAttrs
argument_list|(
name|rxOp
operator|.
name|xAttrs
argument_list|)
operator|.
name|xAttrsRemoved
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
block|}
argument_list|)
return|;
case|case
name|OP_SET_XATTR
case|:
name|FSEditLogOp
operator|.
name|SetXAttrOp
name|sxOp
init|=
operator|(
name|FSEditLogOp
operator|.
name|SetXAttrOp
operator|)
name|op
decl_stmt|;
return|return
operator|new
name|EventBatch
argument_list|(
name|op
operator|.
name|txid
argument_list|,
operator|new
name|Event
index|[]
block|{
operator|new
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|Builder
argument_list|()
operator|.
name|metadataType
argument_list|(
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|XATTRS
argument_list|)
operator|.
name|path
argument_list|(
name|sxOp
operator|.
name|src
argument_list|)
operator|.
name|xAttrs
argument_list|(
name|sxOp
operator|.
name|xAttrs
argument_list|)
operator|.
name|xAttrsRemoved
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
block|}
argument_list|)
return|;
case|case
name|OP_SET_ACL
case|:
name|FSEditLogOp
operator|.
name|SetAclOp
name|saOp
init|=
operator|(
name|FSEditLogOp
operator|.
name|SetAclOp
operator|)
name|op
decl_stmt|;
return|return
operator|new
name|EventBatch
argument_list|(
name|op
operator|.
name|txid
argument_list|,
operator|new
name|Event
index|[]
block|{
operator|new
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|Builder
argument_list|()
operator|.
name|metadataType
argument_list|(
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|ACLS
argument_list|)
operator|.
name|path
argument_list|(
name|saOp
operator|.
name|src
argument_list|)
operator|.
name|acls
argument_list|(
name|saOp
operator|.
name|aclEntries
argument_list|)
operator|.
name|build
argument_list|()
block|}
argument_list|)
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

