begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|utils
operator|.
name|ContainerCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|utils
operator|.
name|LevelDBStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_comment
comment|/**  * Utils functions to help key functions.  */
end_comment

begin_class
DECL|class|KeyUtils
specifier|public
specifier|final
class|class
name|KeyUtils
block|{
DECL|field|ENCODING_NAME
specifier|public
specifier|static
specifier|final
name|String
name|ENCODING_NAME
init|=
literal|"UTF-8"
decl_stmt|;
DECL|field|ENCODING
specifier|public
specifier|static
specifier|final
name|Charset
name|ENCODING
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|ENCODING_NAME
argument_list|)
decl_stmt|;
comment|/**    * Never Constructed.    */
DECL|method|KeyUtils ()
specifier|private
name|KeyUtils
parameter_list|()
block|{   }
comment|/**    * Returns a file handle to LevelDB.    *    * @param dbPath - DbPath.    * @return LevelDB    */
DECL|method|getDB (String dbPath)
specifier|public
specifier|static
name|LevelDBStore
name|getDB
parameter_list|(
name|String
name|dbPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|dbPath
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|dbPath
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|LevelDBStore
argument_list|(
operator|new
name|File
argument_list|(
name|dbPath
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * This function is called with  containerManager ReadLock held.    *    * @param container - container.    * @param cache     - cache    * @return LevelDB handle.    * @throws IOException    */
DECL|method|getDB (ContainerData container, ContainerCache cache)
specifier|public
specifier|static
name|LevelDBStore
name|getDB
parameter_list|(
name|ContainerData
name|container
parameter_list|,
name|ContainerCache
name|cache
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|LevelDBStore
name|db
init|=
name|cache
operator|.
name|getDB
argument_list|(
name|container
operator|.
name|getContainerName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
name|db
operator|=
name|getDB
argument_list|(
name|container
operator|.
name|getDBPath
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|putDB
argument_list|(
name|container
operator|.
name|getContainerName
argument_list|()
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
return|return
name|db
return|;
block|}
comment|/**    * Returns successful keyResponse.    * @param msg - Request.    * @return Response.    */
specifier|public
specifier|static
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
DECL|method|getKeyResponse (ContainerProtos.ContainerCommandRequestProto msg)
name|getKeyResponse
parameter_list|(
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|msg
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|getContainerResponse
argument_list|(
name|msg
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
DECL|method|getKeyDataResponse (ContainerProtos.ContainerCommandRequestProto msg , KeyData data)
name|getKeyDataResponse
parameter_list|(
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|msg
parameter_list|,
name|KeyData
name|data
parameter_list|)
block|{
name|ContainerProtos
operator|.
name|GetKeyResponseProto
operator|.
name|Builder
name|getKey
init|=
name|ContainerProtos
operator|.
name|GetKeyResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|getKey
operator|.
name|setKeyData
argument_list|(
name|data
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
operator|.
name|Builder
name|builder
init|=
name|ContainerUtils
operator|.
name|getContainerResponse
argument_list|(
name|msg
argument_list|,
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setGetKey
argument_list|(
name|getKey
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

