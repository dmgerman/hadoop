begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.balancer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AlreadyBeingCreatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|DataEncryptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|TrustedChannelResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|ExportedBlockKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_comment
comment|/**  * The class provides utilities for {@link Balancer} to access a NameNode  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|NameNodeConnector
class|class
name|NameNodeConnector
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|Balancer
operator|.
name|LOG
decl_stmt|;
DECL|field|BALANCER_ID_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|BALANCER_ID_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/system/balancer.id"
argument_list|)
decl_stmt|;
DECL|field|MAX_NOT_CHANGED_ITERATIONS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_NOT_CHANGED_ITERATIONS
init|=
literal|5
decl_stmt|;
DECL|field|nameNodeUri
specifier|final
name|URI
name|nameNodeUri
decl_stmt|;
DECL|field|blockpoolID
specifier|final
name|String
name|blockpoolID
decl_stmt|;
DECL|field|namenode
specifier|final
name|NamenodeProtocol
name|namenode
decl_stmt|;
DECL|field|client
specifier|final
name|ClientProtocol
name|client
decl_stmt|;
DECL|field|fs
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|out
specifier|final
name|OutputStream
name|out
decl_stmt|;
DECL|field|isBlockTokenEnabled
specifier|private
specifier|final
name|boolean
name|isBlockTokenEnabled
decl_stmt|;
DECL|field|encryptDataTransfer
specifier|private
specifier|final
name|boolean
name|encryptDataTransfer
decl_stmt|;
DECL|field|shouldRun
specifier|private
name|boolean
name|shouldRun
decl_stmt|;
DECL|field|keyUpdaterInterval
specifier|private
name|long
name|keyUpdaterInterval
decl_stmt|;
comment|// used for balancer
DECL|field|notChangedIterations
specifier|private
name|int
name|notChangedIterations
init|=
literal|0
decl_stmt|;
DECL|field|blockTokenSecretManager
specifier|private
name|BlockTokenSecretManager
name|blockTokenSecretManager
decl_stmt|;
DECL|field|keyupdaterthread
specifier|private
name|Daemon
name|keyupdaterthread
decl_stmt|;
comment|// AccessKeyUpdater thread
DECL|field|encryptionKey
specifier|private
name|DataEncryptionKey
name|encryptionKey
decl_stmt|;
DECL|field|trustedChannelResolver
specifier|private
specifier|final
name|TrustedChannelResolver
name|trustedChannelResolver
decl_stmt|;
DECL|method|NameNodeConnector (URI nameNodeUri, Configuration conf)
name|NameNodeConnector
parameter_list|(
name|URI
name|nameNodeUri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|nameNodeUri
operator|=
name|nameNodeUri
expr_stmt|;
name|this
operator|.
name|namenode
operator|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|nameNodeUri
argument_list|,
name|NamenodeProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|nameNodeUri
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|nameNodeUri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|NamespaceInfo
name|namespaceinfo
init|=
name|namenode
operator|.
name|versionRequest
argument_list|()
decl_stmt|;
name|this
operator|.
name|blockpoolID
operator|=
name|namespaceinfo
operator|.
name|getBlockPoolID
argument_list|()
expr_stmt|;
specifier|final
name|ExportedBlockKeys
name|keys
init|=
name|namenode
operator|.
name|getBlockKeys
argument_list|()
decl_stmt|;
name|this
operator|.
name|isBlockTokenEnabled
operator|=
name|keys
operator|.
name|isBlockTokenEnabled
argument_list|()
expr_stmt|;
if|if
condition|(
name|isBlockTokenEnabled
condition|)
block|{
name|long
name|blockKeyUpdateInterval
init|=
name|keys
operator|.
name|getKeyUpdateInterval
argument_list|()
decl_stmt|;
name|long
name|blockTokenLifetime
init|=
name|keys
operator|.
name|getTokenLifetime
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Block token params received from NN: keyUpdateInterval="
operator|+
name|blockKeyUpdateInterval
operator|/
operator|(
literal|60
operator|*
literal|1000
operator|)
operator|+
literal|" min(s), tokenLifetime="
operator|+
name|blockTokenLifetime
operator|/
operator|(
literal|60
operator|*
literal|1000
operator|)
operator|+
literal|" min(s)"
argument_list|)
expr_stmt|;
name|String
name|encryptionAlgorithm
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATA_ENCRYPTION_ALGORITHM_KEY
argument_list|)
decl_stmt|;
name|this
operator|.
name|blockTokenSecretManager
operator|=
operator|new
name|BlockTokenSecretManager
argument_list|(
name|blockKeyUpdateInterval
argument_list|,
name|blockTokenLifetime
argument_list|,
name|blockpoolID
argument_list|,
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockTokenSecretManager
operator|.
name|addKeys
argument_list|(
name|keys
argument_list|)
expr_stmt|;
comment|/*        * Balancer should sync its block keys with NN more frequently than NN        * updates its block keys        */
name|this
operator|.
name|keyUpdaterInterval
operator|=
name|blockKeyUpdateInterval
operator|/
literal|4
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Balancer will update its block keys every "
operator|+
name|keyUpdaterInterval
operator|/
operator|(
literal|60
operator|*
literal|1000
operator|)
operator|+
literal|" minute(s)"
argument_list|)
expr_stmt|;
name|this
operator|.
name|keyupdaterthread
operator|=
operator|new
name|Daemon
argument_list|(
operator|new
name|BlockKeyUpdater
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|shouldRun
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|keyupdaterthread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|encryptDataTransfer
operator|=
name|fs
operator|.
name|getServerDefaults
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|.
name|getEncryptDataTransfer
argument_list|()
expr_stmt|;
comment|// Check if there is another balancer running.
comment|// Exit if there is another one running.
name|out
operator|=
name|checkAndMarkRunningBalancer
argument_list|()
expr_stmt|;
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Another balancer is running"
argument_list|)
throw|;
block|}
name|this
operator|.
name|trustedChannelResolver
operator|=
name|TrustedChannelResolver
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldContinue (long dispatchBlockMoveBytes)
name|boolean
name|shouldContinue
parameter_list|(
name|long
name|dispatchBlockMoveBytes
parameter_list|)
block|{
if|if
condition|(
name|dispatchBlockMoveBytes
operator|>
literal|0
condition|)
block|{
name|notChangedIterations
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|notChangedIterations
operator|++
expr_stmt|;
if|if
condition|(
name|notChangedIterations
operator|>=
name|MAX_NOT_CHANGED_ITERATIONS
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No block has been moved for "
operator|+
name|notChangedIterations
operator|+
literal|" iterations. Exiting..."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/** Get an access token for a block. */
DECL|method|getAccessToken (ExtendedBlock eb )
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|getAccessToken
parameter_list|(
name|ExtendedBlock
name|eb
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isBlockTokenEnabled
condition|)
block|{
return|return
name|BlockTokenSecretManager
operator|.
name|DUMMY_TOKEN
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|shouldRun
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not get access token. BlockKeyUpdater is not running"
argument_list|)
throw|;
block|}
return|return
name|blockTokenSecretManager
operator|.
name|generateToken
argument_list|(
literal|null
argument_list|,
name|eb
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|BlockTokenSecretManager
operator|.
name|AccessMode
operator|.
name|REPLACE
argument_list|,
name|BlockTokenSecretManager
operator|.
name|AccessMode
operator|.
name|COPY
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|getDataEncryptionKey ()
name|DataEncryptionKey
name|getDataEncryptionKey
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|encryptDataTransfer
operator|&&
operator|!
name|this
operator|.
name|trustedChannelResolver
operator|.
name|isTrusted
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|encryptionKey
operator|==
literal|null
condition|)
block|{
name|encryptionKey
operator|=
name|blockTokenSecretManager
operator|.
name|generateDataEncryptionKey
argument_list|()
expr_stmt|;
block|}
return|return
name|encryptionKey
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/* The idea for making sure that there is no more than one balancer    * running in an HDFS is to create a file in the HDFS, writes the hostname    * of the machine on which the balancer is running to the file, but did not    * close the file until the balancer exits.     * This prevents the second balancer from running because it can not    * creates the file while the first one is running.    *     * This method checks if there is any running balancer and     * if no, mark yes if no.    * Note that this is an atomic operation.    *     * Return null if there is a running balancer; otherwise the output stream    * to the newly created file.    */
DECL|method|checkAndMarkRunningBalancer ()
specifier|private
name|OutputStream
name|checkAndMarkRunningBalancer
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
specifier|final
name|DataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|BALANCER_ID_PATH
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|out
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
if|if
condition|(
name|AlreadyBeingCreatedException
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/** Close the connection. */
DECL|method|close ()
name|void
name|close
parameter_list|()
block|{
name|shouldRun
operator|=
literal|false
expr_stmt|;
try|try
block|{
if|if
condition|(
name|keyupdaterthread
operator|!=
literal|null
condition|)
block|{
name|keyupdaterthread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception shutting down access key updater thread"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// close the output file
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|delete
argument_list|(
name|BALANCER_ID_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete "
operator|+
name|BALANCER_ID_PATH
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"[namenodeUri="
operator|+
name|nameNodeUri
operator|+
literal|", id="
operator|+
name|blockpoolID
operator|+
literal|"]"
return|;
block|}
comment|/**    * Periodically updates access keys.    */
DECL|class|BlockKeyUpdater
class|class
name|BlockKeyUpdater
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|shouldRun
condition|)
block|{
try|try
block|{
name|blockTokenSecretManager
operator|.
name|addKeys
argument_list|(
name|namenode
operator|.
name|getBlockKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to set keys"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|keyUpdaterInterval
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"InterruptedException in block key updater thread"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in block key updater thread"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|shouldRun
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

