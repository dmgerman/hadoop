begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.inotify
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|inotify
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Contains a set of events, the transaction ID in the edit log up to which we  * read to produce these events, and the first txid we observed when producing  * these events (the last of which is for the purpose of determining whether we  * have missed events due to edit deletion). Also contains the most recent txid  * that the NameNode has sync'ed, so the client can determine how far behind in  * the edit log it is.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|EventsList
specifier|public
class|class
name|EventsList
block|{
DECL|field|events
specifier|private
name|List
argument_list|<
name|Event
argument_list|>
name|events
decl_stmt|;
DECL|field|firstTxid
specifier|private
name|long
name|firstTxid
decl_stmt|;
DECL|field|lastTxid
specifier|private
name|long
name|lastTxid
decl_stmt|;
DECL|field|syncTxid
specifier|private
name|long
name|syncTxid
decl_stmt|;
DECL|method|EventsList (List<Event> events, long firstTxid, long lastTxid, long syncTxid)
specifier|public
name|EventsList
parameter_list|(
name|List
argument_list|<
name|Event
argument_list|>
name|events
parameter_list|,
name|long
name|firstTxid
parameter_list|,
name|long
name|lastTxid
parameter_list|,
name|long
name|syncTxid
parameter_list|)
block|{
name|this
operator|.
name|events
operator|=
name|events
expr_stmt|;
name|this
operator|.
name|firstTxid
operator|=
name|firstTxid
expr_stmt|;
name|this
operator|.
name|lastTxid
operator|=
name|lastTxid
expr_stmt|;
name|this
operator|.
name|syncTxid
operator|=
name|syncTxid
expr_stmt|;
block|}
DECL|method|getEvents ()
specifier|public
name|List
argument_list|<
name|Event
argument_list|>
name|getEvents
parameter_list|()
block|{
return|return
name|events
return|;
block|}
DECL|method|getFirstTxid ()
specifier|public
name|long
name|getFirstTxid
parameter_list|()
block|{
return|return
name|firstTxid
return|;
block|}
DECL|method|getLastTxid ()
specifier|public
name|long
name|getLastTxid
parameter_list|()
block|{
return|return
name|lastTxid
return|;
block|}
DECL|method|getSyncTxid ()
specifier|public
name|long
name|getSyncTxid
parameter_list|()
block|{
return|return
name|syncTxid
return|;
block|}
block|}
end_class

end_unit

