begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIsNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotAccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockStoragePolicySuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
operator|.
name|DirOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|EnumCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_QUOTA_BY_STORAGETYPE_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_ENABLED_KEY
import|;
end_import

begin_class
DECL|class|FSDirAttrOp
specifier|public
class|class
name|FSDirAttrOp
block|{
DECL|method|setPermission ( FSDirectory fsd, FSPermissionChecker pc, final String src, FsPermission permission)
specifier|static
name|FileStatus
name|setPermission
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|,
specifier|final
name|String
name|src
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|FSDirectory
operator|.
name|isExactReservedName
argument_list|(
name|src
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidPathException
argument_list|(
name|src
argument_list|)
throw|;
block|}
name|INodesInPath
name|iip
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|iip
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|DirOp
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|fsd
operator|.
name|checkOwner
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|)
expr_stmt|;
name|unprotectedSetPermission
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSetPermissions
argument_list|(
name|iip
operator|.
name|getPath
argument_list|()
argument_list|,
name|permission
argument_list|)
expr_stmt|;
return|return
name|fsd
operator|.
name|getAuditFileInfo
argument_list|(
name|iip
argument_list|)
return|;
block|}
DECL|method|setOwner ( FSDirectory fsd, FSPermissionChecker pc, String src, String username, String group)
specifier|static
name|FileStatus
name|setOwner
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|group
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|FSDirectory
operator|.
name|isExactReservedName
argument_list|(
name|src
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidPathException
argument_list|(
name|src
argument_list|)
throw|;
block|}
name|INodesInPath
name|iip
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|iip
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|DirOp
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|fsd
operator|.
name|checkOwner
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pc
operator|.
name|isSuperUser
argument_list|()
condition|)
block|{
if|if
condition|(
name|username
operator|!=
literal|null
operator|&&
operator|!
name|pc
operator|.
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|username
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"User "
operator|+
name|pc
operator|.
name|getUser
argument_list|()
operator|+
literal|" is not a super user (non-super user cannot change owner)."
argument_list|)
throw|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
operator|&&
operator|!
name|pc
operator|.
name|isMemberOfGroup
argument_list|(
name|group
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"User "
operator|+
name|pc
operator|.
name|getUser
argument_list|()
operator|+
literal|" does not belong to "
operator|+
name|group
argument_list|)
throw|;
block|}
block|}
name|unprotectedSetOwner
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|username
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSetOwner
argument_list|(
name|iip
operator|.
name|getPath
argument_list|()
argument_list|,
name|username
argument_list|,
name|group
argument_list|)
expr_stmt|;
return|return
name|fsd
operator|.
name|getAuditFileInfo
argument_list|(
name|iip
argument_list|)
return|;
block|}
DECL|method|setTimes ( FSDirectory fsd, FSPermissionChecker pc, String src, long mtime, long atime)
specifier|static
name|FileStatus
name|setTimes
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|,
name|String
name|src
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|)
throws|throws
name|IOException
block|{
name|INodesInPath
name|iip
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|iip
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|DirOp
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|// Write access is required to set access and modification times
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|checkPathAccess
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
specifier|final
name|INode
name|inode
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|inode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File/Directory "
operator|+
name|iip
operator|.
name|getPath
argument_list|()
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|boolean
name|changed
init|=
name|unprotectedSetTimes
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logTimes
argument_list|(
name|iip
operator|.
name|getPath
argument_list|()
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
return|return
name|fsd
operator|.
name|getAuditFileInfo
argument_list|(
name|iip
argument_list|)
return|;
block|}
DECL|method|setReplication ( FSDirectory fsd, FSPermissionChecker pc, BlockManager bm, String src, final short replication)
specifier|static
name|boolean
name|setReplication
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|,
name|BlockManager
name|bm
parameter_list|,
name|String
name|src
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
name|bm
operator|.
name|verifyReplication
argument_list|(
name|src
argument_list|,
name|replication
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|isFile
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|DirOp
operator|.
name|WRITE
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|checkPathAccess
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BlockInfo
index|[]
name|blocks
init|=
name|unprotectedSetReplication
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|replication
argument_list|)
decl_stmt|;
name|isFile
operator|=
name|blocks
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|isFile
condition|)
block|{
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSetReplication
argument_list|(
name|iip
operator|.
name|getPath
argument_list|()
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
return|return
name|isFile
return|;
block|}
DECL|method|unsetStoragePolicy (FSDirectory fsd, FSPermissionChecker pc, BlockManager bm, String src)
specifier|static
name|FileStatus
name|unsetStoragePolicy
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|,
name|BlockManager
name|bm
parameter_list|,
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|setStoragePolicy
argument_list|(
name|fsd
argument_list|,
name|pc
argument_list|,
name|bm
argument_list|,
name|src
argument_list|,
name|HdfsConstants
operator|.
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
argument_list|,
literal|"unset"
argument_list|)
return|;
block|}
DECL|method|setStoragePolicy (FSDirectory fsd, FSPermissionChecker pc, BlockManager bm, String src, final String policyName)
specifier|static
name|FileStatus
name|setStoragePolicy
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|,
name|BlockManager
name|bm
parameter_list|,
name|String
name|src
parameter_list|,
specifier|final
name|String
name|policyName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get the corresponding policy and make sure the policy name is valid
name|BlockStoragePolicy
name|policy
init|=
name|bm
operator|.
name|getStoragePolicy
argument_list|(
name|policyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Cannot find a block policy with the name "
operator|+
name|policyName
argument_list|)
throw|;
block|}
return|return
name|setStoragePolicy
argument_list|(
name|fsd
argument_list|,
name|pc
argument_list|,
name|bm
argument_list|,
name|src
argument_list|,
name|policy
operator|.
name|getId
argument_list|()
argument_list|,
literal|"set"
argument_list|)
return|;
block|}
DECL|method|setStoragePolicy (FSDirectory fsd, FSPermissionChecker pc, BlockManager bm, String src, final byte policyId, final String operation)
specifier|static
name|FileStatus
name|setStoragePolicy
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|,
name|BlockManager
name|bm
parameter_list|,
name|String
name|src
parameter_list|,
specifier|final
name|byte
name|policyId
parameter_list|,
specifier|final
name|String
name|operation
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fsd
operator|.
name|isStoragePolicyEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to %s storage policy since %s is set to false."
argument_list|,
name|operation
argument_list|,
name|DFS_STORAGE_POLICY_ENABLED_KEY
argument_list|)
argument_list|)
throw|;
block|}
name|INodesInPath
name|iip
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|iip
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|DirOp
operator|.
name|WRITE
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|checkPathAccess
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
name|unprotectedSetStoragePolicy
argument_list|(
name|fsd
argument_list|,
name|bm
argument_list|,
name|iip
argument_list|,
name|policyId
argument_list|)
expr_stmt|;
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSetStoragePolicy
argument_list|(
name|iip
operator|.
name|getPath
argument_list|()
argument_list|,
name|policyId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
return|return
name|fsd
operator|.
name|getAuditFileInfo
argument_list|(
name|iip
argument_list|)
return|;
block|}
DECL|method|getStoragePolicies (BlockManager bm)
specifier|static
name|BlockStoragePolicy
index|[]
name|getStoragePolicies
parameter_list|(
name|BlockManager
name|bm
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|bm
operator|.
name|getStoragePolicies
argument_list|()
return|;
block|}
DECL|method|getStoragePolicy (FSDirectory fsd, FSPermissionChecker pc, BlockManager bm, String path)
specifier|static
name|BlockStoragePolicy
name|getStoragePolicy
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|,
name|BlockManager
name|bm
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|fsd
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|path
argument_list|,
name|DirOp
operator|.
name|READ_LINK
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|checkPathAccess
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
name|INode
name|inode
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|inode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File/Directory does not exist: "
operator|+
name|iip
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|bm
operator|.
name|getStoragePolicy
argument_list|(
name|inode
operator|.
name|getStoragePolicyID
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getPreferredBlockSize (FSDirectory fsd, FSPermissionChecker pc, String src)
specifier|static
name|long
name|getPreferredBlockSize
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|,
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|fsd
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|DirOp
operator|.
name|READ_LINK
argument_list|)
decl_stmt|;
return|return
name|INodeFile
operator|.
name|valueOf
argument_list|(
name|iip
operator|.
name|getLastINode
argument_list|()
argument_list|,
name|iip
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getPreferredBlockSize
argument_list|()
return|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Set the namespace, storagespace and typespace quota for a directory.    *    * Note: This does not support ".inodes" relative path.    */
DECL|method|setQuota (FSDirectory fsd, FSPermissionChecker pc, String src, long nsQuota, long ssQuota, StorageType type)
specifier|static
name|void
name|setQuota
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|,
name|String
name|src
parameter_list|,
name|long
name|nsQuota
parameter_list|,
name|long
name|ssQuota
parameter_list|,
name|StorageType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|pc
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
block|}
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|DirOp
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|INodeDirectory
name|changed
init|=
name|unprotectedSetQuota
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|nsQuota
argument_list|,
name|ssQuota
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|changed
operator|!=
literal|null
condition|)
block|{
specifier|final
name|QuotaCounts
name|q
init|=
name|changed
operator|.
name|getQuotaCounts
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSetQuota
argument_list|(
name|src
argument_list|,
name|q
operator|.
name|getNameSpace
argument_list|()
argument_list|,
name|q
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSetQuotaByStorageType
argument_list|(
name|src
argument_list|,
name|q
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|unprotectedSetPermission ( FSDirectory fsd, INodesInPath iip, FsPermission permissions)
specifier|static
name|void
name|unprotectedSetPermission
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|FsPermission
name|permissions
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|QuotaExceededException
throws|,
name|SnapshotAccessControlException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
specifier|final
name|INode
name|inode
init|=
name|FSDirectory
operator|.
name|resolveLastINode
argument_list|(
name|iip
argument_list|)
decl_stmt|;
name|int
name|snapshotId
init|=
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
decl_stmt|;
name|inode
operator|.
name|setPermission
argument_list|(
name|permissions
argument_list|,
name|snapshotId
argument_list|)
expr_stmt|;
block|}
DECL|method|unprotectedSetOwner ( FSDirectory fsd, INodesInPath iip, String username, String groupname)
specifier|static
name|void
name|unprotectedSetOwner
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|QuotaExceededException
throws|,
name|SnapshotAccessControlException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
specifier|final
name|INode
name|inode
init|=
name|FSDirectory
operator|.
name|resolveLastINode
argument_list|(
name|iip
argument_list|)
decl_stmt|;
if|if
condition|(
name|username
operator|!=
literal|null
condition|)
block|{
name|inode
operator|.
name|setUser
argument_list|(
name|username
argument_list|,
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupname
operator|!=
literal|null
condition|)
block|{
name|inode
operator|.
name|setGroup
argument_list|(
name|groupname
argument_list|,
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setTimes ( FSDirectory fsd, INodesInPath iip, long mtime, long atime, boolean force)
specifier|static
name|boolean
name|setTimes
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|unprotectedSetTimes
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|,
name|force
argument_list|)
return|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * See {@link org.apache.hadoop.hdfs.protocol.ClientProtocol#setQuota(String,    *     long, long, StorageType)}    * for the contract.    * Sets quota for for a directory.    * @return INodeDirectory if any of the quotas have changed. null otherwise.    * @throws FileNotFoundException if the path does not exist.    * @throws PathIsNotDirectoryException if the path is not a directory.    * @throws QuotaExceededException if the directory tree size is    *                                greater than the given quota    * @throws UnresolvedLinkException if a symlink is encountered in src.    * @throws SnapshotAccessControlException if path is in RO snapshot    */
DECL|method|unprotectedSetQuota ( FSDirectory fsd, INodesInPath iip, long nsQuota, long ssQuota, StorageType type)
specifier|static
name|INodeDirectory
name|unprotectedSetQuota
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|long
name|nsQuota
parameter_list|,
name|long
name|ssQuota
parameter_list|,
name|StorageType
name|type
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|PathIsNotDirectoryException
throws|,
name|QuotaExceededException
throws|,
name|UnresolvedLinkException
throws|,
name|SnapshotAccessControlException
throws|,
name|UnsupportedActionException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
comment|// sanity check
if|if
condition|(
operator|(
name|nsQuota
operator|<
literal|0
operator|&&
name|nsQuota
operator|!=
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
operator|&&
name|nsQuota
operator|!=
name|HdfsConstants
operator|.
name|QUOTA_RESET
operator|)
operator|||
operator|(
name|ssQuota
operator|<
literal|0
operator|&&
name|ssQuota
operator|!=
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
operator|&&
name|ssQuota
operator|!=
name|HdfsConstants
operator|.
name|QUOTA_RESET
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal value for nsQuota or "
operator|+
literal|"ssQuota : "
operator|+
name|nsQuota
operator|+
literal|" and "
operator|+
name|ssQuota
argument_list|)
throw|;
block|}
comment|// sanity check for quota by storage type
if|if
condition|(
operator|(
name|type
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|fsd
operator|.
name|isQuotaByStorageTypeEnabled
argument_list|()
operator|||
name|nsQuota
operator|!=
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
operator|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedActionException
argument_list|(
literal|"Failed to set quota by storage type because either"
operator|+
name|DFS_QUOTA_BY_STORAGETYPE_ENABLED_KEY
operator|+
literal|" is set to "
operator|+
name|fsd
operator|.
name|isQuotaByStorageTypeEnabled
argument_list|()
operator|+
literal|" or nsQuota value is illegal "
operator|+
name|nsQuota
argument_list|)
throw|;
block|}
name|INodeDirectory
name|dirNode
init|=
name|INodeDirectory
operator|.
name|valueOf
argument_list|(
name|iip
operator|.
name|getLastINode
argument_list|()
argument_list|,
name|iip
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|QuotaCounts
name|oldQuota
init|=
name|dirNode
operator|.
name|getQuotaCounts
argument_list|()
decl_stmt|;
specifier|final
name|long
name|oldNsQuota
init|=
name|oldQuota
operator|.
name|getNameSpace
argument_list|()
decl_stmt|;
specifier|final
name|long
name|oldSsQuota
init|=
name|oldQuota
operator|.
name|getStorageSpace
argument_list|()
decl_stmt|;
if|if
condition|(
name|dirNode
operator|.
name|isRoot
argument_list|()
operator|&&
name|nsQuota
operator|==
name|HdfsConstants
operator|.
name|QUOTA_RESET
condition|)
block|{
name|nsQuota
operator|=
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nsQuota
operator|==
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
condition|)
block|{
name|nsQuota
operator|=
name|oldNsQuota
expr_stmt|;
block|}
comment|// a directory inode
if|if
condition|(
name|ssQuota
operator|==
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
condition|)
block|{
name|ssQuota
operator|=
name|oldSsQuota
expr_stmt|;
block|}
comment|// unchanged space/namespace quota
if|if
condition|(
name|type
operator|==
literal|null
operator|&&
name|oldNsQuota
operator|==
name|nsQuota
operator|&&
name|oldSsQuota
operator|==
name|ssQuota
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// unchanged type quota
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|oldTypeQuotas
init|=
name|oldQuota
operator|.
name|getTypeSpaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldTypeQuotas
operator|!=
literal|null
operator|&&
name|oldTypeQuotas
operator|.
name|get
argument_list|(
name|type
argument_list|)
operator|==
name|ssQuota
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|final
name|int
name|latest
init|=
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
decl_stmt|;
name|dirNode
operator|.
name|recordModification
argument_list|(
name|latest
argument_list|)
expr_stmt|;
name|dirNode
operator|.
name|setQuota
argument_list|(
name|fsd
operator|.
name|getBlockStoragePolicySuite
argument_list|()
argument_list|,
name|nsQuota
argument_list|,
name|ssQuota
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|dirNode
return|;
block|}
DECL|method|unprotectedSetReplication ( FSDirectory fsd, INodesInPath iip, short replication)
specifier|static
name|BlockInfo
index|[]
name|unprotectedSetReplication
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|QuotaExceededException
throws|,
name|UnresolvedLinkException
throws|,
name|SnapshotAccessControlException
throws|,
name|UnsupportedActionException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
specifier|final
name|BlockManager
name|bm
init|=
name|fsd
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
specifier|final
name|INode
name|inode
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|inode
operator|==
literal|null
operator|||
operator|!
name|inode
operator|.
name|isFile
argument_list|()
operator|||
name|inode
operator|.
name|asFile
argument_list|()
operator|.
name|isStriped
argument_list|()
condition|)
block|{
comment|// TODO we do not support replication on stripe layout files yet
return|return
literal|null
return|;
block|}
name|INodeFile
name|file
init|=
name|inode
operator|.
name|asFile
argument_list|()
decl_stmt|;
comment|// Make sure the directory has sufficient quotas
name|short
name|oldBR
init|=
name|file
operator|.
name|getPreferredBlockReplication
argument_list|()
decl_stmt|;
name|long
name|size
init|=
name|file
operator|.
name|computeFileSize
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Ensure the quota does not exceed
if|if
condition|(
name|oldBR
operator|<
name|replication
condition|)
block|{
name|fsd
operator|.
name|updateCount
argument_list|(
name|iip
argument_list|,
literal|0L
argument_list|,
name|size
argument_list|,
name|oldBR
argument_list|,
name|replication
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|setFileReplication
argument_list|(
name|replication
argument_list|,
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|)
expr_stmt|;
name|short
name|targetReplication
init|=
operator|(
name|short
operator|)
name|Math
operator|.
name|max
argument_list|(
name|replication
argument_list|,
name|file
operator|.
name|getPreferredBlockReplication
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldBR
operator|>
name|replication
condition|)
block|{
name|fsd
operator|.
name|updateCount
argument_list|(
name|iip
argument_list|,
literal|0L
argument_list|,
name|size
argument_list|,
name|oldBR
argument_list|,
name|targetReplication
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BlockInfo
name|b
range|:
name|file
operator|.
name|getBlocks
argument_list|()
control|)
block|{
name|bm
operator|.
name|setReplication
argument_list|(
name|oldBR
argument_list|,
name|targetReplication
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldBR
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|oldBR
operator|>
name|targetReplication
condition|)
block|{
name|FSDirectory
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Decreasing replication from {} to {} for {}"
argument_list|,
name|oldBR
argument_list|,
name|targetReplication
argument_list|,
name|iip
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oldBR
operator|<
name|targetReplication
condition|)
block|{
name|FSDirectory
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Increasing replication from {} to {} for {}"
argument_list|,
name|oldBR
argument_list|,
name|targetReplication
argument_list|,
name|iip
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FSDirectory
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Replication remains unchanged at {} for {}"
argument_list|,
name|oldBR
argument_list|,
name|iip
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|file
operator|.
name|getBlocks
argument_list|()
return|;
block|}
DECL|method|unprotectedSetStoragePolicy (FSDirectory fsd, BlockManager bm, INodesInPath iip, final byte policyId)
specifier|static
name|void
name|unprotectedSetStoragePolicy
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|BlockManager
name|bm
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
specifier|final
name|byte
name|policyId
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
specifier|final
name|INode
name|inode
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|inode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File/Directory does not exist: "
operator|+
name|iip
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|int
name|snapshotId
init|=
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
decl_stmt|;
if|if
condition|(
name|inode
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|policyId
operator|!=
name|HdfsConstants
operator|.
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
condition|)
block|{
name|BlockStoragePolicy
name|newPolicy
init|=
name|bm
operator|.
name|getStoragePolicy
argument_list|(
name|policyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|newPolicy
operator|.
name|isCopyOnCreateFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Policy "
operator|+
name|newPolicy
operator|+
literal|" cannot be set after file creation."
argument_list|)
throw|;
block|}
block|}
name|BlockStoragePolicy
name|currentPolicy
init|=
name|bm
operator|.
name|getStoragePolicy
argument_list|(
name|inode
operator|.
name|getLocalStoragePolicyID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentPolicy
operator|!=
literal|null
operator|&&
name|currentPolicy
operator|.
name|isCopyOnCreateFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Existing policy "
operator|+
name|currentPolicy
operator|.
name|getName
argument_list|()
operator|+
literal|" cannot be changed after file creation."
argument_list|)
throw|;
block|}
name|inode
operator|.
name|asFile
argument_list|()
operator|.
name|setStoragePolicyID
argument_list|(
name|policyId
argument_list|,
name|snapshotId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inode
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|setDirStoragePolicy
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|policyId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|iip
operator|.
name|getPath
argument_list|()
operator|+
literal|" is not a file or directory"
argument_list|)
throw|;
block|}
block|}
DECL|method|setDirStoragePolicy ( FSDirectory fsd, INodesInPath iip, byte policyId)
specifier|private
specifier|static
name|void
name|setDirStoragePolicy
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|byte
name|policyId
parameter_list|)
throws|throws
name|IOException
block|{
name|INode
name|inode
init|=
name|FSDirectory
operator|.
name|resolveLastINode
argument_list|(
name|iip
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|existingXAttrs
init|=
name|XAttrStorage
operator|.
name|readINodeXAttrs
argument_list|(
name|inode
argument_list|)
decl_stmt|;
name|XAttr
name|xAttr
init|=
name|BlockStoragePolicySuite
operator|.
name|buildXAttr
argument_list|(
name|policyId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|newXAttrs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|policyId
operator|==
name|HdfsConstants
operator|.
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
condition|)
block|{
name|List
argument_list|<
name|XAttr
argument_list|>
name|toRemove
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|toRemove
operator|.
name|add
argument_list|(
name|xAttr
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|removed
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|newXAttrs
operator|=
name|FSDirXAttrOp
operator|.
name|filterINodeXAttrs
argument_list|(
name|existingXAttrs
argument_list|,
name|toRemove
argument_list|,
name|removed
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newXAttrs
operator|=
name|FSDirXAttrOp
operator|.
name|setINodeXAttrs
argument_list|(
name|fsd
argument_list|,
name|existingXAttrs
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|xAttr
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|,
name|XAttrSetFlag
operator|.
name|REPLACE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|XAttrStorage
operator|.
name|updateINodeXAttrs
argument_list|(
name|inode
argument_list|,
name|newXAttrs
argument_list|,
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|unprotectedSetTimes ( FSDirectory fsd, INodesInPath iip, long mtime, long atime, boolean force)
specifier|static
name|boolean
name|unprotectedSetTimes
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|boolean
name|status
init|=
literal|false
decl_stmt|;
name|INode
name|inode
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
name|int
name|latest
init|=
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
decl_stmt|;
if|if
condition|(
name|mtime
operator|>=
literal|0
condition|)
block|{
name|inode
operator|=
name|inode
operator|.
name|setModificationTime
argument_list|(
name|mtime
argument_list|,
name|latest
argument_list|)
expr_stmt|;
name|status
operator|=
literal|true
expr_stmt|;
block|}
comment|// if the last access time update was within the last precision interval,
comment|// then no need to store access time
if|if
condition|(
name|atime
operator|>=
literal|0
operator|&&
operator|(
name|status
operator|||
name|force
operator|||
name|atime
operator|>
name|inode
operator|.
name|getAccessTime
argument_list|()
operator|+
name|fsd
operator|.
name|getAccessTimePrecision
argument_list|()
operator|)
condition|)
block|{
name|inode
operator|.
name|setAccessTime
argument_list|(
name|atime
argument_list|,
name|latest
argument_list|,
name|fsd
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|getSnapshotManager
argument_list|()
operator|.
name|getSkipCaptureAccessTimeOnlyChange
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
block|}
end_class

end_unit

