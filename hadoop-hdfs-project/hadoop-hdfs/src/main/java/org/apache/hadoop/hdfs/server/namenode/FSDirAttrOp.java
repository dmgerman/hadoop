begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIsNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotAccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockStoragePolicySuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACCESSTIME_PRECISION_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_ENABLED_KEY
import|;
end_import

begin_class
DECL|class|FSDirAttrOp
specifier|public
class|class
name|FSDirAttrOp
block|{
DECL|method|setPermission ( FSDirectory fsd, final String srcArg, FsPermission permission)
specifier|static
name|HdfsFileStatus
name|setPermission
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|String
name|srcArg
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|src
init|=
name|srcArg
decl_stmt|;
name|FSPermissionChecker
name|pc
init|=
name|fsd
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|pathComponents
init|=
name|FSDirectory
operator|.
name|getPathComponentsForReservedPath
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|src
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|pathComponents
argument_list|)
expr_stmt|;
specifier|final
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|fsd
operator|.
name|checkOwner
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|)
expr_stmt|;
name|unprotectedSetPermission
argument_list|(
name|fsd
argument_list|,
name|src
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSetPermissions
argument_list|(
name|src
argument_list|,
name|permission
argument_list|)
expr_stmt|;
return|return
name|fsd
operator|.
name|getAuditFileInfo
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|setOwner ( FSDirectory fsd, String src, String username, String group)
specifier|static
name|HdfsFileStatus
name|setOwner
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|group
parameter_list|)
throws|throws
name|IOException
block|{
name|FSPermissionChecker
name|pc
init|=
name|fsd
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|pathComponents
init|=
name|FSDirectory
operator|.
name|getPathComponentsForReservedPath
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|src
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|pathComponents
argument_list|)
expr_stmt|;
specifier|final
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|fsd
operator|.
name|checkOwner
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pc
operator|.
name|isSuperUser
argument_list|()
condition|)
block|{
if|if
condition|(
name|username
operator|!=
literal|null
operator|&&
operator|!
name|pc
operator|.
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|username
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Non-super user cannot change owner"
argument_list|)
throw|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
operator|&&
operator|!
name|pc
operator|.
name|containsGroup
argument_list|(
name|group
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"User does not belong to "
operator|+
name|group
argument_list|)
throw|;
block|}
block|}
name|unprotectedSetOwner
argument_list|(
name|fsd
argument_list|,
name|src
argument_list|,
name|username
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSetOwner
argument_list|(
name|src
argument_list|,
name|username
argument_list|,
name|group
argument_list|)
expr_stmt|;
return|return
name|fsd
operator|.
name|getAuditFileInfo
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|setTimes ( FSDirectory fsd, String src, long mtime, long atime)
specifier|static
name|HdfsFileStatus
name|setTimes
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fsd
operator|.
name|isAccessTimeSupported
argument_list|()
operator|&&
name|atime
operator|!=
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Access time for hdfs is not configured. "
operator|+
literal|" Please set "
operator|+
name|DFS_NAMENODE_ACCESSTIME_PRECISION_KEY
operator|+
literal|" configuration parameter."
argument_list|)
throw|;
block|}
name|FSPermissionChecker
name|pc
init|=
name|fsd
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|pathComponents
init|=
name|FSDirectory
operator|.
name|getPathComponentsForReservedPath
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|src
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|pathComponents
argument_list|)
expr_stmt|;
specifier|final
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|)
decl_stmt|;
comment|// Write access is required to set access and modification times
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|checkPathAccess
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
specifier|final
name|INode
name|inode
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|inode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File/Directory "
operator|+
name|src
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|boolean
name|changed
init|=
name|unprotectedSetTimes
argument_list|(
name|fsd
argument_list|,
name|inode
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|,
literal|true
argument_list|,
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logTimes
argument_list|(
name|src
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
return|return
name|fsd
operator|.
name|getAuditFileInfo
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|setReplication ( FSDirectory fsd, BlockManager bm, String src, final short replication)
specifier|static
name|boolean
name|setReplication
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|BlockManager
name|bm
parameter_list|,
name|String
name|src
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
name|bm
operator|.
name|verifyReplication
argument_list|(
name|src
argument_list|,
name|replication
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|isFile
decl_stmt|;
name|FSPermissionChecker
name|pc
init|=
name|fsd
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|pathComponents
init|=
name|FSDirectory
operator|.
name|getPathComponentsForReservedPath
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|src
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|pathComponents
argument_list|)
expr_stmt|;
specifier|final
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|checkPathAccess
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
specifier|final
name|short
index|[]
name|blockRepls
init|=
operator|new
name|short
index|[
literal|2
index|]
decl_stmt|;
comment|// 0: old, 1: new
specifier|final
name|Block
index|[]
name|blocks
init|=
name|unprotectedSetReplication
argument_list|(
name|fsd
argument_list|,
name|src
argument_list|,
name|replication
argument_list|,
name|blockRepls
argument_list|)
decl_stmt|;
name|isFile
operator|=
name|blocks
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|isFile
condition|)
block|{
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSetReplication
argument_list|(
name|src
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|bm
operator|.
name|setReplication
argument_list|(
name|blockRepls
index|[
literal|0
index|]
argument_list|,
name|blockRepls
index|[
literal|1
index|]
argument_list|,
name|src
argument_list|,
name|blocks
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
return|return
name|isFile
return|;
block|}
DECL|method|setStoragePolicy ( FSDirectory fsd, BlockManager bm, String src, final String policyName)
specifier|static
name|HdfsFileStatus
name|setStoragePolicy
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|BlockManager
name|bm
parameter_list|,
name|String
name|src
parameter_list|,
specifier|final
name|String
name|policyName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fsd
operator|.
name|isStoragePolicyEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to set storage policy since "
operator|+
name|DFS_STORAGE_POLICY_ENABLED_KEY
operator|+
literal|" is set to false."
argument_list|)
throw|;
block|}
name|FSPermissionChecker
name|pc
init|=
name|fsd
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|pathComponents
init|=
name|FSDirectory
operator|.
name|getPathComponentsForReservedPath
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|src
operator|=
name|FSDirectory
operator|.
name|resolvePath
argument_list|(
name|src
argument_list|,
name|pathComponents
argument_list|,
name|fsd
argument_list|)
expr_stmt|;
specifier|final
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|checkPathAccess
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
comment|// get the corresponding policy and make sure the policy name is valid
name|BlockStoragePolicy
name|policy
init|=
name|bm
operator|.
name|getStoragePolicy
argument_list|(
name|policyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Cannot find a block policy with the name "
operator|+
name|policyName
argument_list|)
throw|;
block|}
name|unprotectedSetStoragePolicy
argument_list|(
name|fsd
argument_list|,
name|bm
argument_list|,
name|iip
argument_list|,
name|policy
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSetStoragePolicy
argument_list|(
name|src
argument_list|,
name|policy
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
return|return
name|fsd
operator|.
name|getAuditFileInfo
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getStoragePolicies (BlockManager bm)
specifier|static
name|BlockStoragePolicy
index|[]
name|getStoragePolicies
parameter_list|(
name|BlockManager
name|bm
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|bm
operator|.
name|getStoragePolicies
argument_list|()
return|;
block|}
DECL|method|getPreferredBlockSize (FSDirectory fsd, String src)
specifier|static
name|long
name|getPreferredBlockSize
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|FSPermissionChecker
name|pc
init|=
name|fsd
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|pathComponents
init|=
name|FSDirectory
operator|.
name|getPathComponentsForReservedPath
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|fsd
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|src
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|pathComponents
argument_list|)
expr_stmt|;
specifier|final
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|checkTraverse
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|)
expr_stmt|;
block|}
return|return
name|INodeFile
operator|.
name|valueOf
argument_list|(
name|iip
operator|.
name|getLastINode
argument_list|()
argument_list|,
name|src
argument_list|)
operator|.
name|getPreferredBlockSize
argument_list|()
return|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Set the namespace quota and diskspace quota for a directory.    *    * Note: This does not support ".inodes" relative path.    */
DECL|method|setQuota (FSDirectory fsd, String src, long nsQuota, long dsQuota)
specifier|static
name|void
name|setQuota
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|,
name|long
name|nsQuota
parameter_list|,
name|long
name|dsQuota
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|FSPermissionChecker
name|pc
init|=
name|fsd
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|pc
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
block|}
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|INodeDirectory
name|changed
init|=
name|unprotectedSetQuota
argument_list|(
name|fsd
argument_list|,
name|src
argument_list|,
name|nsQuota
argument_list|,
name|dsQuota
argument_list|)
decl_stmt|;
if|if
condition|(
name|changed
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Quota
operator|.
name|Counts
name|q
init|=
name|changed
operator|.
name|getQuotaCounts
argument_list|()
decl_stmt|;
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSetQuota
argument_list|(
name|src
argument_list|,
name|q
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|)
argument_list|,
name|q
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|DISKSPACE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|unprotectedSetPermission ( FSDirectory fsd, String src, FsPermission permissions)
specifier|static
name|void
name|unprotectedSetPermission
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|,
name|FsPermission
name|permissions
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|QuotaExceededException
throws|,
name|SnapshotAccessControlException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
specifier|final
name|INodesInPath
name|inodesInPath
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|INode
name|inode
init|=
name|inodesInPath
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|inode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist: "
operator|+
name|src
argument_list|)
throw|;
block|}
name|int
name|snapshotId
init|=
name|inodesInPath
operator|.
name|getLatestSnapshotId
argument_list|()
decl_stmt|;
name|inode
operator|.
name|setPermission
argument_list|(
name|permissions
argument_list|,
name|snapshotId
argument_list|)
expr_stmt|;
block|}
DECL|method|unprotectedSetOwner ( FSDirectory fsd, String src, String username, String groupname)
specifier|static
name|void
name|unprotectedSetOwner
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|QuotaExceededException
throws|,
name|SnapshotAccessControlException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
specifier|final
name|INodesInPath
name|inodesInPath
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|INode
name|inode
init|=
name|inodesInPath
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|inode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist: "
operator|+
name|src
argument_list|)
throw|;
block|}
if|if
condition|(
name|username
operator|!=
literal|null
condition|)
block|{
name|inode
operator|=
name|inode
operator|.
name|setUser
argument_list|(
name|username
argument_list|,
name|inodesInPath
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupname
operator|!=
literal|null
condition|)
block|{
name|inode
operator|.
name|setGroup
argument_list|(
name|groupname
argument_list|,
name|inodesInPath
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setTimes ( FSDirectory fsd, INode inode, long mtime, long atime, boolean force, int latestSnapshotId)
specifier|static
name|boolean
name|setTimes
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INode
name|inode
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|,
name|boolean
name|force
parameter_list|,
name|int
name|latestSnapshotId
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|unprotectedSetTimes
argument_list|(
name|fsd
argument_list|,
name|inode
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|,
name|force
argument_list|,
name|latestSnapshotId
argument_list|)
return|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|unprotectedSetTimes ( FSDirectory fsd, String src, long mtime, long atime, boolean force)
specifier|static
name|boolean
name|unprotectedSetTimes
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|UnresolvedLinkException
throws|,
name|QuotaExceededException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
specifier|final
name|INodesInPath
name|i
init|=
name|fsd
operator|.
name|getINodesInPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|unprotectedSetTimes
argument_list|(
name|fsd
argument_list|,
name|i
operator|.
name|getLastINode
argument_list|()
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|,
name|force
argument_list|,
name|i
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * See {@link org.apache.hadoop.hdfs.protocol.ClientProtocol#setQuota(String, long, long)}    * for the contract.    * Sets quota for for a directory.    * @return INodeDirectory if any of the quotas have changed. null otherwise.    * @throws FileNotFoundException if the path does not exist.    * @throws PathIsNotDirectoryException if the path is not a directory.    * @throws QuotaExceededException if the directory tree size is    *                                greater than the given quota    * @throws UnresolvedLinkException if a symlink is encountered in src.    * @throws SnapshotAccessControlException if path is in RO snapshot    */
DECL|method|unprotectedSetQuota ( FSDirectory fsd, String src, long nsQuota, long dsQuota)
specifier|static
name|INodeDirectory
name|unprotectedSetQuota
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|,
name|long
name|nsQuota
parameter_list|,
name|long
name|dsQuota
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|PathIsNotDirectoryException
throws|,
name|QuotaExceededException
throws|,
name|UnresolvedLinkException
throws|,
name|SnapshotAccessControlException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
comment|// sanity check
if|if
condition|(
operator|(
name|nsQuota
operator|<
literal|0
operator|&&
name|nsQuota
operator|!=
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
operator|&&
name|nsQuota
operator|!=
name|HdfsConstants
operator|.
name|QUOTA_RESET
operator|)
operator|||
operator|(
name|dsQuota
operator|<
literal|0
operator|&&
name|dsQuota
operator|!=
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
operator|&&
name|dsQuota
operator|!=
name|HdfsConstants
operator|.
name|QUOTA_RESET
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal value for nsQuota or "
operator|+
literal|"dsQuota : "
operator|+
name|nsQuota
operator|+
literal|" and "
operator|+
name|dsQuota
argument_list|)
throw|;
block|}
name|String
name|srcs
init|=
name|FSDirectory
operator|.
name|normalizePath
argument_list|(
name|src
argument_list|)
decl_stmt|;
specifier|final
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|srcs
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|INodeDirectory
name|dirNode
init|=
name|INodeDirectory
operator|.
name|valueOf
argument_list|(
name|iip
operator|.
name|getLastINode
argument_list|()
argument_list|,
name|srcs
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirNode
operator|.
name|isRoot
argument_list|()
operator|&&
name|nsQuota
operator|==
name|HdfsConstants
operator|.
name|QUOTA_RESET
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot clear namespace quota on root."
argument_list|)
throw|;
block|}
else|else
block|{
comment|// a directory inode
specifier|final
name|Quota
operator|.
name|Counts
name|oldQuota
init|=
name|dirNode
operator|.
name|getQuotaCounts
argument_list|()
decl_stmt|;
specifier|final
name|long
name|oldNsQuota
init|=
name|oldQuota
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|)
decl_stmt|;
specifier|final
name|long
name|oldDsQuota
init|=
name|oldQuota
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|DISKSPACE
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsQuota
operator|==
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
condition|)
block|{
name|nsQuota
operator|=
name|oldNsQuota
expr_stmt|;
block|}
if|if
condition|(
name|dsQuota
operator|==
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
condition|)
block|{
name|dsQuota
operator|=
name|oldDsQuota
expr_stmt|;
block|}
if|if
condition|(
name|oldNsQuota
operator|==
name|nsQuota
operator|&&
name|oldDsQuota
operator|==
name|dsQuota
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|latest
init|=
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
decl_stmt|;
name|dirNode
operator|.
name|recordModification
argument_list|(
name|latest
argument_list|)
expr_stmt|;
name|dirNode
operator|.
name|setQuota
argument_list|(
name|nsQuota
argument_list|,
name|dsQuota
argument_list|)
expr_stmt|;
return|return
name|dirNode
return|;
block|}
block|}
DECL|method|unprotectedSetReplication ( FSDirectory fsd, String src, short replication, short[] blockRepls)
specifier|static
name|Block
index|[]
name|unprotectedSetReplication
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|,
name|short
name|replication
parameter_list|,
name|short
index|[]
name|blockRepls
parameter_list|)
throws|throws
name|QuotaExceededException
throws|,
name|UnresolvedLinkException
throws|,
name|SnapshotAccessControlException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
specifier|final
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|INode
name|inode
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|inode
operator|==
literal|null
operator|||
operator|!
name|inode
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|INodeFile
name|file
init|=
name|inode
operator|.
name|asFile
argument_list|()
decl_stmt|;
specifier|final
name|short
name|oldBR
init|=
name|file
operator|.
name|getBlockReplication
argument_list|()
decl_stmt|;
comment|// before setFileReplication, check for increasing block replication.
comment|// if replication> oldBR, then newBR == replication.
comment|// if replication< oldBR, we don't know newBR yet.
if|if
condition|(
name|replication
operator|>
name|oldBR
condition|)
block|{
name|long
name|dsDelta
init|=
operator|(
name|replication
operator|-
name|oldBR
operator|)
operator|*
operator|(
name|file
operator|.
name|diskspaceConsumed
argument_list|()
operator|/
name|oldBR
operator|)
decl_stmt|;
name|fsd
operator|.
name|updateCount
argument_list|(
name|iip
argument_list|,
literal|0
argument_list|,
name|dsDelta
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|setFileReplication
argument_list|(
name|replication
argument_list|,
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|short
name|newBR
init|=
name|file
operator|.
name|getBlockReplication
argument_list|()
decl_stmt|;
comment|// check newBR< oldBR case.
if|if
condition|(
name|newBR
operator|<
name|oldBR
condition|)
block|{
name|long
name|dsDelta
init|=
operator|(
name|newBR
operator|-
name|oldBR
operator|)
operator|*
operator|(
name|file
operator|.
name|diskspaceConsumed
argument_list|()
operator|/
name|newBR
operator|)
decl_stmt|;
name|fsd
operator|.
name|updateCount
argument_list|(
name|iip
argument_list|,
literal|0
argument_list|,
name|dsDelta
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blockRepls
operator|!=
literal|null
condition|)
block|{
name|blockRepls
index|[
literal|0
index|]
operator|=
name|oldBR
expr_stmt|;
name|blockRepls
index|[
literal|1
index|]
operator|=
name|newBR
expr_stmt|;
block|}
return|return
name|file
operator|.
name|getBlocks
argument_list|()
return|;
block|}
DECL|method|unprotectedSetStoragePolicy ( FSDirectory fsd, BlockManager bm, INodesInPath iip, byte policyId)
specifier|static
name|void
name|unprotectedSetStoragePolicy
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|BlockManager
name|bm
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|byte
name|policyId
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
specifier|final
name|INode
name|inode
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|inode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File/Directory does not exist: "
operator|+
name|iip
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|int
name|snapshotId
init|=
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
decl_stmt|;
if|if
condition|(
name|inode
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|BlockStoragePolicy
name|newPolicy
init|=
name|bm
operator|.
name|getStoragePolicy
argument_list|(
name|policyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|newPolicy
operator|.
name|isCopyOnCreateFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Policy "
operator|+
name|newPolicy
operator|+
literal|" cannot be set after file creation."
argument_list|)
throw|;
block|}
name|BlockStoragePolicy
name|currentPolicy
init|=
name|bm
operator|.
name|getStoragePolicy
argument_list|(
name|inode
operator|.
name|getLocalStoragePolicyID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentPolicy
operator|!=
literal|null
operator|&&
name|currentPolicy
operator|.
name|isCopyOnCreateFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Existing policy "
operator|+
name|currentPolicy
operator|.
name|getName
argument_list|()
operator|+
literal|" cannot be changed after file creation."
argument_list|)
throw|;
block|}
name|inode
operator|.
name|asFile
argument_list|()
operator|.
name|setStoragePolicyID
argument_list|(
name|policyId
argument_list|,
name|snapshotId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inode
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|setDirStoragePolicy
argument_list|(
name|fsd
argument_list|,
name|inode
operator|.
name|asDirectory
argument_list|()
argument_list|,
name|policyId
argument_list|,
name|snapshotId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|iip
operator|.
name|getPath
argument_list|()
operator|+
literal|" is not a file or directory"
argument_list|)
throw|;
block|}
block|}
DECL|method|setDirStoragePolicy ( FSDirectory fsd, INodeDirectory inode, byte policyId, int latestSnapshotId)
specifier|private
specifier|static
name|void
name|setDirStoragePolicy
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodeDirectory
name|inode
parameter_list|,
name|byte
name|policyId
parameter_list|,
name|int
name|latestSnapshotId
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|XAttr
argument_list|>
name|existingXAttrs
init|=
name|XAttrStorage
operator|.
name|readINodeXAttrs
argument_list|(
name|inode
argument_list|)
decl_stmt|;
name|XAttr
name|xAttr
init|=
name|BlockStoragePolicySuite
operator|.
name|buildXAttr
argument_list|(
name|policyId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|newXAttrs
init|=
name|FSDirXAttrOp
operator|.
name|setINodeXAttrs
argument_list|(
name|fsd
argument_list|,
name|existingXAttrs
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|xAttr
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|,
name|XAttrSetFlag
operator|.
name|REPLACE
argument_list|)
argument_list|)
decl_stmt|;
name|XAttrStorage
operator|.
name|updateINodeXAttrs
argument_list|(
name|inode
argument_list|,
name|newXAttrs
argument_list|,
name|latestSnapshotId
argument_list|)
expr_stmt|;
block|}
DECL|method|unprotectedSetTimes ( FSDirectory fsd, INode inode, long mtime, long atime, boolean force, int latest)
specifier|private
specifier|static
name|boolean
name|unprotectedSetTimes
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INode
name|inode
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|,
name|boolean
name|force
parameter_list|,
name|int
name|latest
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|boolean
name|status
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|mtime
operator|!=
operator|-
literal|1
condition|)
block|{
name|inode
operator|=
name|inode
operator|.
name|setModificationTime
argument_list|(
name|mtime
argument_list|,
name|latest
argument_list|)
expr_stmt|;
name|status
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|atime
operator|!=
operator|-
literal|1
condition|)
block|{
name|long
name|inodeTime
init|=
name|inode
operator|.
name|getAccessTime
argument_list|()
decl_stmt|;
comment|// if the last access time update was within the last precision interval, then
comment|// no need to store access time
if|if
condition|(
name|atime
operator|<=
name|inodeTime
operator|+
name|fsd
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|getAccessTimePrecision
argument_list|()
operator|&&
operator|!
name|force
condition|)
block|{
name|status
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|inode
operator|.
name|setAccessTime
argument_list|(
name|atime
argument_list|,
name|latest
argument_list|)
expr_stmt|;
name|status
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
block|}
end_class

end_unit

