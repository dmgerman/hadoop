begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * Class for de-duplication of instances.<br>  * Hold the references count to a single instance. If there are no references  * then the entry will be removed.<br>  * Type E should implement {@link ReferenceCounter}<br>  * Note: This class is NOT thread-safe.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|ReferenceCountMap
specifier|public
class|class
name|ReferenceCountMap
parameter_list|<
name|E
extends|extends
name|ReferenceCountMap
operator|.
name|ReferenceCounter
parameter_list|>
block|{
DECL|field|referenceMap
specifier|private
name|Map
argument_list|<
name|E
argument_list|,
name|E
argument_list|>
name|referenceMap
init|=
operator|new
name|HashMap
argument_list|<
name|E
argument_list|,
name|E
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Add the reference. If the instance already present, just increase the    * reference count.    *     * @param key Key to put in reference map    * @return Referenced instance    */
DECL|method|put (E key)
specifier|public
name|E
name|put
parameter_list|(
name|E
name|key
parameter_list|)
block|{
name|E
name|value
init|=
name|referenceMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|key
expr_stmt|;
name|referenceMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|value
operator|.
name|incrementAndGetRefCount
argument_list|()
expr_stmt|;
return|return
name|value
return|;
block|}
comment|/**    * Delete the reference. Decrease the reference count for the instance, if    * any. On all references removal delete the instance from the map.    *     * @param key Key to remove the reference.    */
DECL|method|remove (E key)
specifier|public
name|void
name|remove
parameter_list|(
name|E
name|key
parameter_list|)
block|{
name|E
name|value
init|=
name|referenceMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|decrementAndGetRefCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|referenceMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get entries in the reference Map.    *     * @return    */
annotation|@
name|VisibleForTesting
DECL|method|getEntries ()
specifier|public
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|getEntries
parameter_list|()
block|{
return|return
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|E
argument_list|>
argument_list|()
operator|.
name|addAll
argument_list|(
name|referenceMap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Get the reference count for the key    */
DECL|method|getReferenceCount (E key)
specifier|public
name|long
name|getReferenceCount
parameter_list|(
name|E
name|key
parameter_list|)
block|{
name|ReferenceCounter
name|counter
init|=
name|referenceMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|!=
literal|null
condition|)
block|{
return|return
name|counter
operator|.
name|getRefCount
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Get the number of unique elements    */
DECL|method|getUniqueElementsSize ()
specifier|public
name|int
name|getUniqueElementsSize
parameter_list|()
block|{
return|return
name|referenceMap
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Clear the contents    */
annotation|@
name|VisibleForTesting
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|referenceMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Interface for the reference count holder    */
DECL|interface|ReferenceCounter
specifier|public
specifier|static
interface|interface
name|ReferenceCounter
block|{
DECL|method|getRefCount ()
specifier|public
name|int
name|getRefCount
parameter_list|()
function_decl|;
DECL|method|incrementAndGetRefCount ()
specifier|public
name|int
name|incrementAndGetRefCount
parameter_list|()
function_decl|;
DECL|method|decrementAndGetRefCount ()
specifier|public
name|int
name|decrementAndGetRefCount
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

