begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockStoragePolicySuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ContentCounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ContentSummaryComputationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageSerialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectoryAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|QuotaCounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|SnapshotFSImageFormat
operator|.
name|ReferenceMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|Diff
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|Diff
operator|.
name|ListType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|Diff
operator|.
name|UndoInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
operator|.
name|NO_SNAPSHOT_ID
import|;
end_import

begin_comment
comment|/**  * Feature used to store and process the snapshot diff information for a  * directory. In particular, it contains a directory diff list recording changes  * made to the directory and its children for each snapshot.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DirectoryWithSnapshotFeature
specifier|public
class|class
name|DirectoryWithSnapshotFeature
implements|implements
name|INode
operator|.
name|Feature
block|{
comment|/**    * The difference between the current state and a previous snapshot    * of the children list of an INodeDirectory.    */
DECL|class|ChildrenDiff
specifier|static
class|class
name|ChildrenDiff
extends|extends
name|Diff
argument_list|<
name|byte
index|[]
argument_list|,
name|INode
argument_list|>
block|{
DECL|method|ChildrenDiff ()
name|ChildrenDiff
parameter_list|()
block|{}
DECL|method|ChildrenDiff (final List<INode> created, final List<INode> deleted)
specifier|private
name|ChildrenDiff
parameter_list|(
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|created
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|deleted
parameter_list|)
block|{
name|super
argument_list|(
name|created
argument_list|,
name|deleted
argument_list|)
expr_stmt|;
block|}
comment|/**      * Replace the given child from the created/deleted list.      * @return true if the child is replaced; false if the child is not found.      */
DECL|method|replace (final ListType type, final INode oldChild, final INode newChild)
specifier|private
name|boolean
name|replace
parameter_list|(
specifier|final
name|ListType
name|type
parameter_list|,
specifier|final
name|INode
name|oldChild
parameter_list|,
specifier|final
name|INode
name|newChild
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|list
init|=
name|getList
argument_list|(
name|type
argument_list|)
decl_stmt|;
specifier|final
name|int
name|i
init|=
name|search
argument_list|(
name|list
argument_list|,
name|oldChild
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
operator|||
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getId
argument_list|()
operator|!=
name|oldChild
operator|.
name|getId
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|INode
name|removed
init|=
name|list
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|newChild
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|removed
operator|==
name|oldChild
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|removeChild (ListType type, final INode child)
specifier|private
name|boolean
name|removeChild
parameter_list|(
name|ListType
name|type
parameter_list|,
specifier|final
name|INode
name|child
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|list
init|=
name|getList
argument_list|(
name|type
argument_list|)
decl_stmt|;
specifier|final
name|int
name|i
init|=
name|searchIndex
argument_list|(
name|type
argument_list|,
name|child
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
operator|&&
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
name|child
condition|)
block|{
name|list
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** clear the created list */
DECL|method|destroyCreatedList (INode.ReclaimContext reclaimContext, final INodeDirectory currentINode)
specifier|private
name|void
name|destroyCreatedList
parameter_list|(
name|INode
operator|.
name|ReclaimContext
name|reclaimContext
parameter_list|,
specifier|final
name|INodeDirectory
name|currentINode
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|createdList
init|=
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
decl_stmt|;
for|for
control|(
name|INode
name|c
range|:
name|createdList
control|)
block|{
name|c
operator|.
name|destroyAndCollectBlocks
argument_list|(
name|reclaimContext
argument_list|)
expr_stmt|;
comment|// c should be contained in the children list, remove it
name|currentINode
operator|.
name|removeChild
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|createdList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/** clear the deleted list */
DECL|method|destroyDeletedList (INode.ReclaimContext reclaimContext)
specifier|private
name|void
name|destroyDeletedList
parameter_list|(
name|INode
operator|.
name|ReclaimContext
name|reclaimContext
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|deletedList
init|=
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
decl_stmt|;
for|for
control|(
name|INode
name|d
range|:
name|deletedList
control|)
block|{
name|d
operator|.
name|destroyAndCollectBlocks
argument_list|(
name|reclaimContext
argument_list|)
expr_stmt|;
block|}
name|deletedList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/** Serialize {@link #created} */
DECL|method|writeCreated (DataOutput out)
specifier|private
name|void
name|writeCreated
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|created
init|=
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|created
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|INode
name|node
range|:
name|created
control|)
block|{
comment|// For INode in created list, we only need to record its local name
name|byte
index|[]
name|name
init|=
name|node
operator|.
name|getLocalNameBytes
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
name|name
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Serialize {@link #deleted} */
DECL|method|writeDeleted (DataOutput out, ReferenceMap referenceMap)
specifier|private
name|void
name|writeDeleted
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|ReferenceMap
name|referenceMap
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|deleted
init|=
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|deleted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|INode
name|node
range|:
name|deleted
control|)
block|{
name|FSImageSerialization
operator|.
name|saveINode2Image
argument_list|(
name|node
argument_list|,
name|out
argument_list|,
literal|true
argument_list|,
name|referenceMap
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Serialize to out */
DECL|method|write (DataOutput out, ReferenceMap referenceMap )
specifier|private
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|ReferenceMap
name|referenceMap
parameter_list|)
throws|throws
name|IOException
block|{
name|writeCreated
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|writeDeleted
argument_list|(
name|out
argument_list|,
name|referenceMap
argument_list|)
expr_stmt|;
block|}
comment|/** Get the list of INodeDirectory contained in the deleted list */
DECL|method|getDirsInDeleted (List<INodeDirectory> dirList)
specifier|private
name|void
name|getDirsInDeleted
parameter_list|(
name|List
argument_list|<
name|INodeDirectory
argument_list|>
name|dirList
parameter_list|)
block|{
for|for
control|(
name|INode
name|node
range|:
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
control|)
block|{
if|if
condition|(
name|node
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|dirList
operator|.
name|add
argument_list|(
name|node
operator|.
name|asDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * The difference of an {@link INodeDirectory} between two snapshots.    */
DECL|class|DirectoryDiff
specifier|public
specifier|static
class|class
name|DirectoryDiff
extends|extends
name|AbstractINodeDiff
argument_list|<
name|INodeDirectory
argument_list|,
name|INodeDirectoryAttributes
argument_list|,
name|DirectoryDiff
argument_list|>
block|{
comment|/** The size of the children list at snapshot creation time. */
DECL|field|childrenSize
specifier|private
specifier|final
name|int
name|childrenSize
decl_stmt|;
comment|/** The children list diff. */
DECL|field|diff
specifier|private
specifier|final
name|ChildrenDiff
name|diff
decl_stmt|;
DECL|field|isSnapshotRoot
specifier|private
name|boolean
name|isSnapshotRoot
init|=
literal|false
decl_stmt|;
DECL|method|DirectoryDiff (int snapshotId, INodeDirectory dir)
specifier|private
name|DirectoryDiff
parameter_list|(
name|int
name|snapshotId
parameter_list|,
name|INodeDirectory
name|dir
parameter_list|)
block|{
name|super
argument_list|(
name|snapshotId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|childrenSize
operator|=
name|dir
operator|.
name|getChildrenList
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|this
operator|.
name|diff
operator|=
operator|new
name|ChildrenDiff
argument_list|()
expr_stmt|;
block|}
comment|/** Constructor used by FSImage loading */
DECL|method|DirectoryDiff (int snapshotId, INodeDirectoryAttributes snapshotINode, DirectoryDiff posteriorDiff, int childrenSize, List<INode> createdList, List<INode> deletedList, boolean isSnapshotRoot)
name|DirectoryDiff
parameter_list|(
name|int
name|snapshotId
parameter_list|,
name|INodeDirectoryAttributes
name|snapshotINode
parameter_list|,
name|DirectoryDiff
name|posteriorDiff
parameter_list|,
name|int
name|childrenSize
parameter_list|,
name|List
argument_list|<
name|INode
argument_list|>
name|createdList
parameter_list|,
name|List
argument_list|<
name|INode
argument_list|>
name|deletedList
parameter_list|,
name|boolean
name|isSnapshotRoot
parameter_list|)
block|{
name|super
argument_list|(
name|snapshotId
argument_list|,
name|snapshotINode
argument_list|,
name|posteriorDiff
argument_list|)
expr_stmt|;
name|this
operator|.
name|childrenSize
operator|=
name|childrenSize
expr_stmt|;
name|this
operator|.
name|diff
operator|=
operator|new
name|ChildrenDiff
argument_list|(
name|createdList
argument_list|,
name|deletedList
argument_list|)
expr_stmt|;
name|this
operator|.
name|isSnapshotRoot
operator|=
name|isSnapshotRoot
expr_stmt|;
block|}
DECL|method|getChildrenDiff ()
specifier|public
name|ChildrenDiff
name|getChildrenDiff
parameter_list|()
block|{
return|return
name|diff
return|;
block|}
DECL|method|setSnapshotRoot (INodeDirectoryAttributes root)
name|void
name|setSnapshotRoot
parameter_list|(
name|INodeDirectoryAttributes
name|root
parameter_list|)
block|{
name|this
operator|.
name|snapshotINode
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|isSnapshotRoot
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|isSnapshotRoot ()
name|boolean
name|isSnapshotRoot
parameter_list|()
block|{
return|return
name|isSnapshotRoot
return|;
block|}
annotation|@
name|Override
DECL|method|combinePosteriorAndCollectBlocks ( final INode.ReclaimContext reclaimContext, final INodeDirectory currentDir, final DirectoryDiff posterior)
name|void
name|combinePosteriorAndCollectBlocks
parameter_list|(
specifier|final
name|INode
operator|.
name|ReclaimContext
name|reclaimContext
parameter_list|,
specifier|final
name|INodeDirectory
name|currentDir
parameter_list|,
specifier|final
name|DirectoryDiff
name|posterior
parameter_list|)
block|{
name|diff
operator|.
name|combinePosterior
argument_list|(
name|posterior
operator|.
name|diff
argument_list|,
operator|new
name|Diff
operator|.
name|Processor
argument_list|<
name|INode
argument_list|>
argument_list|()
block|{
comment|/** Collect blocks for deleted files. */
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|INode
name|inode
parameter_list|)
block|{
if|if
condition|(
name|inode
operator|!=
literal|null
condition|)
block|{
name|inode
operator|.
name|destroyAndCollectBlocks
argument_list|(
name|reclaimContext
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return The children list of a directory in a snapshot.      *         Since the snapshot is read-only, the logical view of the list is      *         never changed although the internal data structure may mutate.      */
DECL|method|getChildrenList (final INodeDirectory currentDir)
specifier|private
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|getChildrenList
parameter_list|(
specifier|final
name|INodeDirectory
name|currentDir
parameter_list|)
block|{
return|return
operator|new
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|INode
argument_list|>
name|children
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|INode
argument_list|>
name|initChildren
parameter_list|()
block|{
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
specifier|final
name|ChildrenDiff
name|combined
init|=
operator|new
name|ChildrenDiff
argument_list|()
decl_stmt|;
for|for
control|(
name|DirectoryDiff
name|d
init|=
name|DirectoryDiff
operator|.
name|this
init|;
name|d
operator|!=
literal|null
condition|;
name|d
operator|=
name|d
operator|.
name|getPosterior
argument_list|()
control|)
block|{
name|combined
operator|.
name|combinePosterior
argument_list|(
name|d
operator|.
name|diff
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|children
operator|=
name|combined
operator|.
name|apply2Current
argument_list|(
name|ReadOnlyList
operator|.
name|Util
operator|.
name|asList
argument_list|(
name|currentDir
operator|.
name|getChildrenList
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|INode
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|initChildren
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|childrenSize
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|childrenSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|INode
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|initChildren
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/** @return the child with the given name. */
DECL|method|getChild (byte[] name, boolean checkPosterior, INodeDirectory currentDir)
name|INode
name|getChild
parameter_list|(
name|byte
index|[]
name|name
parameter_list|,
name|boolean
name|checkPosterior
parameter_list|,
name|INodeDirectory
name|currentDir
parameter_list|)
block|{
for|for
control|(
name|DirectoryDiff
name|d
init|=
name|this
init|;
condition|;
name|d
operator|=
name|d
operator|.
name|getPosterior
argument_list|()
control|)
block|{
specifier|final
name|Container
argument_list|<
name|INode
argument_list|>
name|returned
init|=
name|d
operator|.
name|diff
operator|.
name|accessPrevious
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|returned
operator|!=
literal|null
condition|)
block|{
comment|// the diff is able to determine the inode
return|return
name|returned
operator|.
name|getElement
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|checkPosterior
condition|)
block|{
comment|// Since checkPosterior is false, return null, i.e. not found.
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|d
operator|.
name|getPosterior
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// no more posterior diff, get from current inode.
return|return
name|currentDir
operator|.
name|getChild
argument_list|(
name|name
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" childrenSize="
operator|+
name|childrenSize
operator|+
literal|", "
operator|+
name|diff
return|;
block|}
DECL|method|getChildrenSize ()
name|int
name|getChildrenSize
parameter_list|()
block|{
return|return
name|childrenSize
return|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out, ReferenceMap referenceMap)
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|ReferenceMap
name|referenceMap
parameter_list|)
throws|throws
name|IOException
block|{
name|writeSnapshot
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|childrenSize
argument_list|)
expr_stmt|;
comment|// Write snapshotINode
name|out
operator|.
name|writeBoolean
argument_list|(
name|isSnapshotRoot
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSnapshotRoot
condition|)
block|{
if|if
condition|(
name|snapshotINode
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FSImageSerialization
operator|.
name|writeINodeDirectoryAttributes
argument_list|(
name|snapshotINode
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Write diff. Node need to write poseriorDiff, since diffs is a list.
name|diff
operator|.
name|write
argument_list|(
name|out
argument_list|,
name|referenceMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|destroyDiffAndCollectBlocks ( INode.ReclaimContext reclaimContext, INodeDirectory currentINode)
name|void
name|destroyDiffAndCollectBlocks
parameter_list|(
name|INode
operator|.
name|ReclaimContext
name|reclaimContext
parameter_list|,
name|INodeDirectory
name|currentINode
parameter_list|)
block|{
comment|// this diff has been deleted
name|diff
operator|.
name|destroyDeletedList
argument_list|(
name|reclaimContext
argument_list|)
expr_stmt|;
name|INodeDirectoryAttributes
name|snapshotINode
init|=
name|getSnapshotINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapshotINode
operator|!=
literal|null
operator|&&
name|snapshotINode
operator|.
name|getAclFeature
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|AclStorage
operator|.
name|removeAclFeature
argument_list|(
name|snapshotINode
operator|.
name|getAclFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** A list of directory diffs. */
DECL|class|DirectoryDiffList
specifier|public
specifier|static
class|class
name|DirectoryDiffList
extends|extends
name|AbstractINodeDiffList
argument_list|<
name|INodeDirectory
argument_list|,
name|INodeDirectoryAttributes
argument_list|,
name|DirectoryDiff
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createDiff (int snapshot, INodeDirectory currentDir)
name|DirectoryDiff
name|createDiff
parameter_list|(
name|int
name|snapshot
parameter_list|,
name|INodeDirectory
name|currentDir
parameter_list|)
block|{
return|return
operator|new
name|DirectoryDiff
argument_list|(
name|snapshot
argument_list|,
name|currentDir
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createSnapshotCopy (INodeDirectory currentDir)
name|INodeDirectoryAttributes
name|createSnapshotCopy
parameter_list|(
name|INodeDirectory
name|currentDir
parameter_list|)
block|{
return|return
name|currentDir
operator|.
name|isQuotaSet
argument_list|()
condition|?
operator|new
name|INodeDirectoryAttributes
operator|.
name|CopyWithQuota
argument_list|(
name|currentDir
argument_list|)
else|:
operator|new
name|INodeDirectoryAttributes
operator|.
name|SnapshotCopy
argument_list|(
name|currentDir
argument_list|)
return|;
block|}
comment|/** Replace the given child in the created/deleted list, if there is any. */
DECL|method|replaceChild (final ListType type, final INode oldChild, final INode newChild)
specifier|public
name|boolean
name|replaceChild
parameter_list|(
specifier|final
name|ListType
name|type
parameter_list|,
specifier|final
name|INode
name|oldChild
parameter_list|,
specifier|final
name|INode
name|newChild
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|diffList
init|=
name|asList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|diffList
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|ChildrenDiff
name|diff
init|=
name|diffList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|diff
decl_stmt|;
if|if
condition|(
name|diff
operator|.
name|replace
argument_list|(
name|type
argument_list|,
name|oldChild
argument_list|,
name|newChild
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** Remove the given child in the created/deleted list, if there is any. */
DECL|method|removeChild (final ListType type, final INode child)
specifier|public
name|boolean
name|removeChild
parameter_list|(
specifier|final
name|ListType
name|type
parameter_list|,
specifier|final
name|INode
name|child
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|diffList
init|=
name|asList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|diffList
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|ChildrenDiff
name|diff
init|=
name|diffList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|diff
decl_stmt|;
if|if
condition|(
name|diff
operator|.
name|removeChild
argument_list|(
name|type
argument_list|,
name|child
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Find the corresponding snapshot whose deleted list contains the given      * inode.      * @return the id of the snapshot. {@link Snapshot#NO_SNAPSHOT_ID} if the      * given inode is not in any of the snapshot.      */
DECL|method|findSnapshotDeleted (final INode child)
specifier|public
name|int
name|findSnapshotDeleted
parameter_list|(
specifier|final
name|INode
name|child
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|diffList
init|=
name|asList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|diffList
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|ChildrenDiff
name|diff
init|=
name|diffList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|diff
decl_stmt|;
specifier|final
name|int
name|d
init|=
name|diff
operator|.
name|searchIndex
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|,
name|child
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|>=
literal|0
operator|&&
name|diff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
operator|.
name|get
argument_list|(
name|d
argument_list|)
operator|==
name|child
condition|)
block|{
return|return
name|diffList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getSnapshotId
argument_list|()
return|;
block|}
block|}
return|return
name|NO_SNAPSHOT_ID
return|;
block|}
block|}
DECL|method|cloneDiffList (List<INode> diffList)
specifier|private
specifier|static
name|Map
argument_list|<
name|INode
argument_list|,
name|INode
argument_list|>
name|cloneDiffList
parameter_list|(
name|List
argument_list|<
name|INode
argument_list|>
name|diffList
parameter_list|)
block|{
if|if
condition|(
name|diffList
operator|==
literal|null
operator|||
name|diffList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|INode
argument_list|,
name|INode
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|diffList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|INode
name|node
range|:
name|diffList
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
comment|/**    * Destroy a subtree under a DstReference node.    */
DECL|method|destroyDstSubtree (INode.ReclaimContext reclaimContext, INode inode, final int snapshot, final int prior)
specifier|public
specifier|static
name|void
name|destroyDstSubtree
parameter_list|(
name|INode
operator|.
name|ReclaimContext
name|reclaimContext
parameter_list|,
name|INode
name|inode
parameter_list|,
specifier|final
name|int
name|snapshot
parameter_list|,
specifier|final
name|int
name|prior
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|prior
operator|!=
name|NO_SNAPSHOT_ID
argument_list|)
expr_stmt|;
if|if
condition|(
name|inode
operator|.
name|isReference
argument_list|()
condition|)
block|{
if|if
condition|(
name|inode
operator|instanceof
name|INodeReference
operator|.
name|WithName
operator|&&
name|snapshot
operator|!=
name|Snapshot
operator|.
name|CURRENT_STATE_ID
condition|)
block|{
comment|// this inode has been renamed before the deletion of the DstReference
comment|// subtree
name|inode
operator|.
name|cleanSubtree
argument_list|(
name|reclaimContext
argument_list|,
name|snapshot
argument_list|,
name|prior
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// for DstReference node, continue this process to its subtree
name|destroyDstSubtree
argument_list|(
name|reclaimContext
argument_list|,
name|inode
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
argument_list|,
name|snapshot
argument_list|,
name|prior
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|inode
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|inode
operator|.
name|cleanSubtree
argument_list|(
name|reclaimContext
argument_list|,
name|snapshot
argument_list|,
name|prior
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inode
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|INode
argument_list|,
name|INode
argument_list|>
name|excludedNodes
init|=
literal|null
decl_stmt|;
name|INodeDirectory
name|dir
init|=
name|inode
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|dir
operator|.
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|DirectoryDiffList
name|diffList
init|=
name|sf
operator|.
name|getDiffs
argument_list|()
decl_stmt|;
name|DirectoryDiff
name|priorDiff
init|=
name|diffList
operator|.
name|getDiffById
argument_list|(
name|prior
argument_list|)
decl_stmt|;
if|if
condition|(
name|priorDiff
operator|!=
literal|null
operator|&&
name|priorDiff
operator|.
name|getSnapshotId
argument_list|()
operator|==
name|prior
condition|)
block|{
name|List
argument_list|<
name|INode
argument_list|>
name|dList
init|=
name|priorDiff
operator|.
name|diff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
decl_stmt|;
name|excludedNodes
operator|=
name|cloneDiffList
argument_list|(
name|dList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|snapshot
operator|!=
name|Snapshot
operator|.
name|CURRENT_STATE_ID
condition|)
block|{
name|diffList
operator|.
name|deleteSnapshotDiff
argument_list|(
name|reclaimContext
argument_list|,
name|snapshot
argument_list|,
name|prior
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
name|priorDiff
operator|=
name|diffList
operator|.
name|getDiffById
argument_list|(
name|prior
argument_list|)
expr_stmt|;
if|if
condition|(
name|priorDiff
operator|!=
literal|null
operator|&&
name|priorDiff
operator|.
name|getSnapshotId
argument_list|()
operator|==
name|prior
condition|)
block|{
name|priorDiff
operator|.
name|diff
operator|.
name|destroyCreatedList
argument_list|(
name|reclaimContext
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|INode
name|child
range|:
name|inode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getChildrenList
argument_list|(
name|prior
argument_list|)
control|)
block|{
if|if
condition|(
name|excludedNodes
operator|!=
literal|null
operator|&&
name|excludedNodes
operator|.
name|containsKey
argument_list|(
name|child
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|destroyDstSubtree
argument_list|(
name|reclaimContext
argument_list|,
name|child
argument_list|,
name|snapshot
argument_list|,
name|prior
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Clean an inode while we move it from the deleted list of post to the    * deleted list of prior.    * @param reclaimContext blocks and inodes that need to be reclaimed    * @param inode The inode to clean.    * @param post The post snapshot.    * @param prior The id of the prior snapshot.    */
DECL|method|cleanDeletedINode (INode.ReclaimContext reclaimContext, INode inode, final int post, final int prior)
specifier|private
specifier|static
name|void
name|cleanDeletedINode
parameter_list|(
name|INode
operator|.
name|ReclaimContext
name|reclaimContext
parameter_list|,
name|INode
name|inode
parameter_list|,
specifier|final
name|int
name|post
parameter_list|,
specifier|final
name|int
name|prior
parameter_list|)
block|{
name|Deque
argument_list|<
name|INode
argument_list|>
name|queue
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
name|queue
operator|.
name|addLast
argument_list|(
name|inode
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|INode
name|topNode
init|=
name|queue
operator|.
name|pollFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|topNode
operator|instanceof
name|INodeReference
operator|.
name|WithName
condition|)
block|{
name|INodeReference
operator|.
name|WithName
name|wn
init|=
operator|(
name|INodeReference
operator|.
name|WithName
operator|)
name|topNode
decl_stmt|;
if|if
condition|(
name|wn
operator|.
name|getLastSnapshotId
argument_list|()
operator|>=
name|post
condition|)
block|{
name|INodeReference
operator|.
name|WithCount
name|wc
init|=
operator|(
name|INodeReference
operator|.
name|WithCount
operator|)
name|wn
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|wc
operator|.
name|getLastWithName
argument_list|()
operator|==
name|wn
operator|&&
name|wc
operator|.
name|getParentReference
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// this wn is the last wn inside of the wc, also the dstRef node has
comment|// been deleted. In this case, we should treat the referred file/dir
comment|// as normal case
name|queue
operator|.
name|add
argument_list|(
name|wc
operator|.
name|getReferredINode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wn
operator|.
name|cleanSubtree
argument_list|(
name|reclaimContext
argument_list|,
name|post
argument_list|,
name|prior
argument_list|)
expr_stmt|;
block|}
block|}
comment|// For DstReference node, since the node is not in the created list of
comment|// prior, we should treat it as regular file/dir
block|}
elseif|else
if|if
condition|(
name|topNode
operator|.
name|isFile
argument_list|()
operator|&&
name|topNode
operator|.
name|asFile
argument_list|()
operator|.
name|isWithSnapshot
argument_list|()
condition|)
block|{
name|INodeFile
name|file
init|=
name|topNode
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|file
operator|.
name|getDiffs
argument_list|()
operator|.
name|deleteSnapshotDiff
argument_list|(
name|reclaimContext
argument_list|,
name|post
argument_list|,
name|prior
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topNode
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|INodeDirectory
name|dir
init|=
name|topNode
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|ChildrenDiff
name|priorChildrenDiff
init|=
literal|null
decl_stmt|;
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|dir
operator|.
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
comment|// delete files/dirs created after prior. Note that these
comment|// files/dirs, along with inode, were deleted right after post.
name|DirectoryDiff
name|priorDiff
init|=
name|sf
operator|.
name|getDiffs
argument_list|()
operator|.
name|getDiffById
argument_list|(
name|prior
argument_list|)
decl_stmt|;
if|if
condition|(
name|priorDiff
operator|!=
literal|null
operator|&&
name|priorDiff
operator|.
name|getSnapshotId
argument_list|()
operator|==
name|prior
condition|)
block|{
name|priorChildrenDiff
operator|=
name|priorDiff
operator|.
name|getChildrenDiff
argument_list|()
expr_stmt|;
name|priorChildrenDiff
operator|.
name|destroyCreatedList
argument_list|(
name|reclaimContext
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|INode
name|child
range|:
name|dir
operator|.
name|getChildrenList
argument_list|(
name|prior
argument_list|)
control|)
block|{
if|if
condition|(
name|priorChildrenDiff
operator|!=
literal|null
operator|&&
name|priorChildrenDiff
operator|.
name|search
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|,
name|child
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|queue
operator|.
name|addLast
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** Diff list sorted by snapshot IDs, i.e. in chronological order. */
DECL|field|diffs
specifier|private
specifier|final
name|DirectoryDiffList
name|diffs
decl_stmt|;
DECL|method|DirectoryWithSnapshotFeature (DirectoryDiffList diffs)
specifier|public
name|DirectoryWithSnapshotFeature
parameter_list|(
name|DirectoryDiffList
name|diffs
parameter_list|)
block|{
name|this
operator|.
name|diffs
operator|=
name|diffs
operator|!=
literal|null
condition|?
name|diffs
else|:
operator|new
name|DirectoryDiffList
argument_list|()
expr_stmt|;
block|}
comment|/** @return the last snapshot. */
DECL|method|getLastSnapshotId ()
specifier|public
name|int
name|getLastSnapshotId
parameter_list|()
block|{
return|return
name|diffs
operator|.
name|getLastSnapshotId
argument_list|()
return|;
block|}
comment|/** @return the snapshot diff list. */
DECL|method|getDiffs ()
specifier|public
name|DirectoryDiffList
name|getDiffs
parameter_list|()
block|{
return|return
name|diffs
return|;
block|}
comment|/**    * Get all the directories that are stored in some snapshot but not in the    * current children list. These directories are equivalent to the directories    * stored in the deletes lists.    */
DECL|method|getSnapshotDirectory (List<INodeDirectory> snapshotDir)
specifier|public
name|void
name|getSnapshotDirectory
parameter_list|(
name|List
argument_list|<
name|INodeDirectory
argument_list|>
name|snapshotDir
parameter_list|)
block|{
for|for
control|(
name|DirectoryDiff
name|sdiff
range|:
name|diffs
control|)
block|{
name|sdiff
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getDirsInDeleted
argument_list|(
name|snapshotDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add an inode into parent's children list. The caller of this method needs    * to make sure that parent is in the given snapshot "latest".    */
DECL|method|addChild (INodeDirectory parent, INode inode, boolean setModTime, int latestSnapshotId)
specifier|public
name|boolean
name|addChild
parameter_list|(
name|INodeDirectory
name|parent
parameter_list|,
name|INode
name|inode
parameter_list|,
name|boolean
name|setModTime
parameter_list|,
name|int
name|latestSnapshotId
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
name|ChildrenDiff
name|diff
init|=
name|diffs
operator|.
name|checkAndAddLatestSnapshotDiff
argument_list|(
name|latestSnapshotId
argument_list|,
name|parent
argument_list|)
operator|.
name|diff
decl_stmt|;
name|int
name|undoInfo
init|=
name|diff
operator|.
name|create
argument_list|(
name|inode
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|added
init|=
name|parent
operator|.
name|addChild
argument_list|(
name|inode
argument_list|,
name|setModTime
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|added
condition|)
block|{
name|diff
operator|.
name|undoCreate
argument_list|(
name|inode
argument_list|,
name|undoInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|added
return|;
block|}
comment|/**    * Remove an inode from parent's children list. The caller of this method    * needs to make sure that parent is in the given snapshot "latest".    */
DECL|method|removeChild (INodeDirectory parent, INode child, int latestSnapshotId)
specifier|public
name|boolean
name|removeChild
parameter_list|(
name|INodeDirectory
name|parent
parameter_list|,
name|INode
name|child
parameter_list|,
name|int
name|latestSnapshotId
parameter_list|)
block|{
comment|// For a directory that is not a renamed node, if isInLatestSnapshot returns
comment|// false, the directory is not in the latest snapshot, thus we do not need
comment|// to record the removed child in any snapshot.
comment|// For a directory that was moved/renamed, note that if the directory is in
comment|// any of the previous snapshots, we will create a reference node for the
comment|// directory while rename, and isInLatestSnapshot will return true in that
comment|// scenario (if all previous snapshots have been deleted, isInLatestSnapshot
comment|// still returns false). Thus if isInLatestSnapshot returns false, the
comment|// directory node cannot be in any snapshot (not in current tree, nor in
comment|// previous src tree). Thus we do not need to record the removed child in
comment|// any snapshot.
name|ChildrenDiff
name|diff
init|=
name|diffs
operator|.
name|checkAndAddLatestSnapshotDiff
argument_list|(
name|latestSnapshotId
argument_list|,
name|parent
argument_list|)
operator|.
name|diff
decl_stmt|;
name|UndoInfo
argument_list|<
name|INode
argument_list|>
name|undoInfo
init|=
name|diff
operator|.
name|delete
argument_list|(
name|child
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|removed
init|=
name|parent
operator|.
name|removeChild
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|removed
operator|&&
name|undoInfo
operator|!=
literal|null
condition|)
block|{
comment|// remove failed, undo
name|diff
operator|.
name|undoDelete
argument_list|(
name|child
argument_list|,
name|undoInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|removed
return|;
block|}
comment|/**    * @return If there is no corresponding directory diff for the given    *         snapshot, this means that the current children list should be    *         returned for the snapshot. Otherwise we calculate the children list    *         for the snapshot and return it.     */
DECL|method|getChildrenList (INodeDirectory currentINode, final int snapshotId)
specifier|public
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|getChildrenList
parameter_list|(
name|INodeDirectory
name|currentINode
parameter_list|,
specifier|final
name|int
name|snapshotId
parameter_list|)
block|{
specifier|final
name|DirectoryDiff
name|diff
init|=
name|diffs
operator|.
name|getDiffById
argument_list|(
name|snapshotId
argument_list|)
decl_stmt|;
return|return
name|diff
operator|!=
literal|null
condition|?
name|diff
operator|.
name|getChildrenList
argument_list|(
name|currentINode
argument_list|)
else|:
name|currentINode
operator|.
name|getChildrenList
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
return|;
block|}
DECL|method|getChild (INodeDirectory currentINode, byte[] name, int snapshotId)
specifier|public
name|INode
name|getChild
parameter_list|(
name|INodeDirectory
name|currentINode
parameter_list|,
name|byte
index|[]
name|name
parameter_list|,
name|int
name|snapshotId
parameter_list|)
block|{
specifier|final
name|DirectoryDiff
name|diff
init|=
name|diffs
operator|.
name|getDiffById
argument_list|(
name|snapshotId
argument_list|)
decl_stmt|;
return|return
name|diff
operator|!=
literal|null
condition|?
name|diff
operator|.
name|getChild
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|currentINode
argument_list|)
else|:
name|currentINode
operator|.
name|getChild
argument_list|(
name|name
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
return|;
block|}
comment|/** Used to record the modification of a symlink node */
DECL|method|saveChild2Snapshot (INodeDirectory currentINode, final INode child, final int latestSnapshotId, final INode snapshotCopy)
specifier|public
name|INode
name|saveChild2Snapshot
parameter_list|(
name|INodeDirectory
name|currentINode
parameter_list|,
specifier|final
name|INode
name|child
parameter_list|,
specifier|final
name|int
name|latestSnapshotId
parameter_list|,
specifier|final
name|INode
name|snapshotCopy
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|child
operator|.
name|isDirectory
argument_list|()
argument_list|,
literal|"child is a directory, child=%s"
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|latestSnapshotId
operator|!=
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
expr_stmt|;
specifier|final
name|DirectoryDiff
name|diff
init|=
name|diffs
operator|.
name|checkAndAddLatestSnapshotDiff
argument_list|(
name|latestSnapshotId
argument_list|,
name|currentINode
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|.
name|getChild
argument_list|(
name|child
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|,
literal|false
argument_list|,
name|currentINode
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// it was already saved in the latest snapshot earlier.
return|return
name|child
return|;
block|}
name|diff
operator|.
name|diff
operator|.
name|modify
argument_list|(
name|snapshotCopy
argument_list|,
name|child
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
DECL|method|clear ( INode.ReclaimContext reclaimContext, INodeDirectory currentINode)
specifier|public
name|void
name|clear
parameter_list|(
name|INode
operator|.
name|ReclaimContext
name|reclaimContext
parameter_list|,
name|INodeDirectory
name|currentINode
parameter_list|)
block|{
comment|// destroy its diff list
for|for
control|(
name|DirectoryDiff
name|diff
range|:
name|diffs
control|)
block|{
name|diff
operator|.
name|destroyDiffAndCollectBlocks
argument_list|(
name|reclaimContext
argument_list|,
name|currentINode
argument_list|)
expr_stmt|;
block|}
name|diffs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|computeQuotaUsage4CurrentDirectory ( BlockStoragePolicySuite bsps, byte storagePolicyId)
specifier|public
name|QuotaCounts
name|computeQuotaUsage4CurrentDirectory
parameter_list|(
name|BlockStoragePolicySuite
name|bsps
parameter_list|,
name|byte
name|storagePolicyId
parameter_list|)
block|{
specifier|final
name|QuotaCounts
name|counts
init|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|DirectoryDiff
name|d
range|:
name|diffs
control|)
block|{
for|for
control|(
name|INode
name|deleted
range|:
name|d
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
control|)
block|{
specifier|final
name|byte
name|childPolicyId
init|=
name|deleted
operator|.
name|getStoragePolicyIDForQuota
argument_list|(
name|storagePolicyId
argument_list|)
decl_stmt|;
name|counts
operator|.
name|add
argument_list|(
name|deleted
operator|.
name|computeQuotaUsage
argument_list|(
name|bsps
argument_list|,
name|childPolicyId
argument_list|,
literal|false
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|counts
return|;
block|}
DECL|method|computeContentSummary4Snapshot (final BlockStoragePolicySuite bsps, final ContentCounts counts)
specifier|public
name|void
name|computeContentSummary4Snapshot
parameter_list|(
specifier|final
name|BlockStoragePolicySuite
name|bsps
parameter_list|,
specifier|final
name|ContentCounts
name|counts
parameter_list|)
throws|throws
name|AccessControlException
block|{
comment|// Create a new blank summary context for blocking processing of subtree.
name|ContentSummaryComputationContext
name|summary
init|=
operator|new
name|ContentSummaryComputationContext
argument_list|(
name|bsps
argument_list|)
decl_stmt|;
for|for
control|(
name|DirectoryDiff
name|d
range|:
name|diffs
control|)
block|{
for|for
control|(
name|INode
name|deleted
range|:
name|d
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
control|)
block|{
name|deleted
operator|.
name|computeContentSummary
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|,
name|summary
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add the counts from deleted trees.
name|counts
operator|.
name|addContents
argument_list|(
name|summary
operator|.
name|getCounts
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Compute the difference between Snapshots.    *    * @param fromSnapshot Start point of the diff computation. Null indicates    *          current tree.    * @param toSnapshot End point of the diff computation. Null indicates current    *          tree.    * @param diff Used to capture the changes happening to the children. Note    *          that the diff still represents (later_snapshot - earlier_snapshot)    *          although toSnapshot can be before fromSnapshot.    * @param currentINode The {@link INodeDirectory} this feature belongs to.    * @return Whether changes happened between the startSnapshot and endSnaphsot.    */
DECL|method|computeDiffBetweenSnapshots (Snapshot fromSnapshot, Snapshot toSnapshot, ChildrenDiff diff, INodeDirectory currentINode)
name|boolean
name|computeDiffBetweenSnapshots
parameter_list|(
name|Snapshot
name|fromSnapshot
parameter_list|,
name|Snapshot
name|toSnapshot
parameter_list|,
name|ChildrenDiff
name|diff
parameter_list|,
name|INodeDirectory
name|currentINode
parameter_list|)
block|{
name|int
index|[]
name|diffIndexPair
init|=
name|diffs
operator|.
name|changedBetweenSnapshots
argument_list|(
name|fromSnapshot
argument_list|,
name|toSnapshot
argument_list|)
decl_stmt|;
if|if
condition|(
name|diffIndexPair
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|earlierDiffIndex
init|=
name|diffIndexPair
index|[
literal|0
index|]
decl_stmt|;
name|int
name|laterDiffIndex
init|=
name|diffIndexPair
index|[
literal|1
index|]
decl_stmt|;
name|boolean
name|dirMetadataChanged
init|=
literal|false
decl_stmt|;
name|INodeDirectoryAttributes
name|dirCopy
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|difflist
init|=
name|diffs
operator|.
name|asList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|earlierDiffIndex
init|;
name|i
operator|<
name|laterDiffIndex
condition|;
name|i
operator|++
control|)
block|{
name|DirectoryDiff
name|sdiff
init|=
name|difflist
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|diff
operator|.
name|combinePosterior
argument_list|(
name|sdiff
operator|.
name|diff
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dirMetadataChanged
operator|&&
name|sdiff
operator|.
name|snapshotINode
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dirCopy
operator|==
literal|null
condition|)
block|{
name|dirCopy
operator|=
name|sdiff
operator|.
name|snapshotINode
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dirCopy
operator|.
name|metadataEquals
argument_list|(
name|sdiff
operator|.
name|snapshotINode
argument_list|)
condition|)
block|{
name|dirMetadataChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|diff
operator|.
name|isEmpty
argument_list|()
operator|||
name|dirMetadataChanged
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|dirCopy
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|laterDiffIndex
init|;
name|i
operator|<
name|difflist
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|dirCopy
operator|.
name|metadataEquals
argument_list|(
name|difflist
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|snapshotINode
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
operator|!
name|dirCopy
operator|.
name|metadataEquals
argument_list|(
name|currentINode
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|cleanDirectory (INode.ReclaimContext reclaimContext, final INodeDirectory currentINode, final int snapshot, int prior)
specifier|public
name|void
name|cleanDirectory
parameter_list|(
name|INode
operator|.
name|ReclaimContext
name|reclaimContext
parameter_list|,
specifier|final
name|INodeDirectory
name|currentINode
parameter_list|,
specifier|final
name|int
name|snapshot
parameter_list|,
name|int
name|prior
parameter_list|)
block|{
name|Map
argument_list|<
name|INode
argument_list|,
name|INode
argument_list|>
name|priorCreated
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|INode
argument_list|,
name|INode
argument_list|>
name|priorDeleted
init|=
literal|null
decl_stmt|;
name|QuotaCounts
name|old
init|=
name|reclaimContext
operator|.
name|quotaDelta
argument_list|()
operator|.
name|getCountsCopy
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapshot
operator|==
name|Snapshot
operator|.
name|CURRENT_STATE_ID
condition|)
block|{
comment|// delete the current directory
name|currentINode
operator|.
name|recordModification
argument_list|(
name|prior
argument_list|)
expr_stmt|;
comment|// delete everything in created list
name|DirectoryDiff
name|lastDiff
init|=
name|diffs
operator|.
name|getLast
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastDiff
operator|!=
literal|null
condition|)
block|{
name|lastDiff
operator|.
name|diff
operator|.
name|destroyCreatedList
argument_list|(
name|reclaimContext
argument_list|,
name|currentINode
argument_list|)
expr_stmt|;
block|}
name|currentINode
operator|.
name|cleanSubtreeRecursively
argument_list|(
name|reclaimContext
argument_list|,
name|snapshot
argument_list|,
name|prior
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// update prior
name|prior
operator|=
name|getDiffs
argument_list|()
operator|.
name|updatePrior
argument_list|(
name|snapshot
argument_list|,
name|prior
argument_list|)
expr_stmt|;
comment|// if there is a snapshot diff associated with prior, we need to record
comment|// its original created and deleted list before deleting post
if|if
condition|(
name|prior
operator|!=
name|NO_SNAPSHOT_ID
condition|)
block|{
name|DirectoryDiff
name|priorDiff
init|=
name|this
operator|.
name|getDiffs
argument_list|()
operator|.
name|getDiffById
argument_list|(
name|prior
argument_list|)
decl_stmt|;
if|if
condition|(
name|priorDiff
operator|!=
literal|null
operator|&&
name|priorDiff
operator|.
name|getSnapshotId
argument_list|()
operator|==
name|prior
condition|)
block|{
name|List
argument_list|<
name|INode
argument_list|>
name|cList
init|=
name|priorDiff
operator|.
name|diff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|INode
argument_list|>
name|dList
init|=
name|priorDiff
operator|.
name|diff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
decl_stmt|;
name|priorCreated
operator|=
name|cloneDiffList
argument_list|(
name|cList
argument_list|)
expr_stmt|;
name|priorDeleted
operator|=
name|cloneDiffList
argument_list|(
name|dList
argument_list|)
expr_stmt|;
block|}
block|}
name|getDiffs
argument_list|()
operator|.
name|deleteSnapshotDiff
argument_list|(
name|reclaimContext
argument_list|,
name|snapshot
argument_list|,
name|prior
argument_list|,
name|currentINode
argument_list|)
expr_stmt|;
name|currentINode
operator|.
name|cleanSubtreeRecursively
argument_list|(
name|reclaimContext
argument_list|,
name|snapshot
argument_list|,
name|prior
argument_list|,
name|priorDeleted
argument_list|)
expr_stmt|;
comment|// check priorDiff again since it may be created during the diff deletion
if|if
condition|(
name|prior
operator|!=
name|NO_SNAPSHOT_ID
condition|)
block|{
name|DirectoryDiff
name|priorDiff
init|=
name|this
operator|.
name|getDiffs
argument_list|()
operator|.
name|getDiffById
argument_list|(
name|prior
argument_list|)
decl_stmt|;
if|if
condition|(
name|priorDiff
operator|!=
literal|null
operator|&&
name|priorDiff
operator|.
name|getSnapshotId
argument_list|()
operator|==
name|prior
condition|)
block|{
comment|// For files/directories created between "prior" and "snapshot",
comment|// we need to clear snapshot copies for "snapshot". Note that we must
comment|// use null as prior in the cleanSubtree call. Files/directories that
comment|// were created before "prior" will be covered by the later
comment|// cleanSubtreeRecursively call.
if|if
condition|(
name|priorCreated
operator|!=
literal|null
condition|)
block|{
comment|// we only check the node originally in prior's created list
for|for
control|(
name|INode
name|cNode
range|:
name|priorDiff
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
control|)
block|{
if|if
condition|(
name|priorCreated
operator|.
name|containsKey
argument_list|(
name|cNode
argument_list|)
condition|)
block|{
name|cNode
operator|.
name|cleanSubtree
argument_list|(
name|reclaimContext
argument_list|,
name|snapshot
argument_list|,
name|NO_SNAPSHOT_ID
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// When a directory is moved from the deleted list of the posterior
comment|// diff to the deleted list of this diff, we need to destroy its
comment|// descendants that were 1) created after taking this diff and 2)
comment|// deleted after taking posterior diff.
comment|// For files moved from posterior's deleted list, we also need to
comment|// delete its snapshot copy associated with the posterior snapshot.
for|for
control|(
name|INode
name|dNode
range|:
name|priorDiff
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
control|)
block|{
if|if
condition|(
name|priorDeleted
operator|==
literal|null
operator|||
operator|!
name|priorDeleted
operator|.
name|containsKey
argument_list|(
name|dNode
argument_list|)
condition|)
block|{
name|cleanDeletedINode
argument_list|(
name|reclaimContext
argument_list|,
name|dNode
argument_list|,
name|snapshot
argument_list|,
name|prior
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|QuotaCounts
name|current
init|=
name|reclaimContext
operator|.
name|quotaDelta
argument_list|()
operator|.
name|getCountsCopy
argument_list|()
decl_stmt|;
name|current
operator|.
name|subtract
argument_list|(
name|old
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentINode
operator|.
name|isQuotaSet
argument_list|()
condition|)
block|{
name|reclaimContext
operator|.
name|quotaDelta
argument_list|()
operator|.
name|addQuotaDirUpdate
argument_list|(
name|currentINode
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

