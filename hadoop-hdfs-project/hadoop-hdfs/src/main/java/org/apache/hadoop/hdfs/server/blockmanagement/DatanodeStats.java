begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Datanode statistics.  * For decommissioning/decommissioned nodes, only used capacity is counted.  */
end_comment

begin_class
DECL|class|DatanodeStats
class|class
name|DatanodeStats
block|{
DECL|field|statsMap
specifier|private
specifier|final
name|StorageTypeStatsMap
name|statsMap
init|=
operator|new
name|StorageTypeStatsMap
argument_list|()
decl_stmt|;
DECL|field|capacityTotal
specifier|private
name|long
name|capacityTotal
init|=
literal|0L
decl_stmt|;
DECL|field|capacityUsed
specifier|private
name|long
name|capacityUsed
init|=
literal|0L
decl_stmt|;
DECL|field|capacityRemaining
specifier|private
name|long
name|capacityRemaining
init|=
literal|0L
decl_stmt|;
DECL|field|blockPoolUsed
specifier|private
name|long
name|blockPoolUsed
init|=
literal|0L
decl_stmt|;
DECL|field|xceiverCount
specifier|private
name|int
name|xceiverCount
init|=
literal|0
decl_stmt|;
DECL|field|cacheCapacity
specifier|private
name|long
name|cacheCapacity
init|=
literal|0L
decl_stmt|;
DECL|field|cacheUsed
specifier|private
name|long
name|cacheUsed
init|=
literal|0L
decl_stmt|;
DECL|field|nodesInService
specifier|private
name|int
name|nodesInService
init|=
literal|0
decl_stmt|;
DECL|field|nodesInServiceXceiverCount
specifier|private
name|int
name|nodesInServiceXceiverCount
init|=
literal|0
decl_stmt|;
DECL|field|expiredHeartbeats
specifier|private
name|int
name|expiredHeartbeats
init|=
literal|0
decl_stmt|;
DECL|method|add (final DatanodeDescriptor node)
specifier|synchronized
name|void
name|add
parameter_list|(
specifier|final
name|DatanodeDescriptor
name|node
parameter_list|)
block|{
name|capacityUsed
operator|+=
name|node
operator|.
name|getDfsUsed
argument_list|()
expr_stmt|;
name|blockPoolUsed
operator|+=
name|node
operator|.
name|getBlockPoolUsed
argument_list|()
expr_stmt|;
name|xceiverCount
operator|+=
name|node
operator|.
name|getXceiverCount
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|node
operator|.
name|isDecommissionInProgress
argument_list|()
operator|||
name|node
operator|.
name|isDecommissioned
argument_list|()
operator|)
condition|)
block|{
name|nodesInService
operator|++
expr_stmt|;
name|nodesInServiceXceiverCount
operator|+=
name|node
operator|.
name|getXceiverCount
argument_list|()
expr_stmt|;
name|capacityTotal
operator|+=
name|node
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
name|capacityRemaining
operator|+=
name|node
operator|.
name|getRemaining
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|capacityTotal
operator|+=
name|node
operator|.
name|getDfsUsed
argument_list|()
expr_stmt|;
block|}
name|cacheCapacity
operator|+=
name|node
operator|.
name|getCacheCapacity
argument_list|()
expr_stmt|;
name|cacheUsed
operator|+=
name|node
operator|.
name|getCacheUsed
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|StorageType
argument_list|>
name|storageTypes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeStorageInfo
name|storageInfo
range|:
name|node
operator|.
name|getStorageInfos
argument_list|()
control|)
block|{
name|statsMap
operator|.
name|addStorage
argument_list|(
name|storageInfo
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|storageTypes
operator|.
name|add
argument_list|(
name|storageInfo
operator|.
name|getStorageType
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StorageType
name|storageType
range|:
name|storageTypes
control|)
block|{
name|statsMap
operator|.
name|addNode
argument_list|(
name|storageType
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|subtract (final DatanodeDescriptor node)
specifier|synchronized
name|void
name|subtract
parameter_list|(
specifier|final
name|DatanodeDescriptor
name|node
parameter_list|)
block|{
name|capacityUsed
operator|-=
name|node
operator|.
name|getDfsUsed
argument_list|()
expr_stmt|;
name|blockPoolUsed
operator|-=
name|node
operator|.
name|getBlockPoolUsed
argument_list|()
expr_stmt|;
name|xceiverCount
operator|-=
name|node
operator|.
name|getXceiverCount
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|node
operator|.
name|isDecommissionInProgress
argument_list|()
operator|||
name|node
operator|.
name|isDecommissioned
argument_list|()
operator|)
condition|)
block|{
name|nodesInService
operator|--
expr_stmt|;
name|nodesInServiceXceiverCount
operator|-=
name|node
operator|.
name|getXceiverCount
argument_list|()
expr_stmt|;
name|capacityTotal
operator|-=
name|node
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
name|capacityRemaining
operator|-=
name|node
operator|.
name|getRemaining
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|capacityTotal
operator|-=
name|node
operator|.
name|getDfsUsed
argument_list|()
expr_stmt|;
block|}
name|cacheCapacity
operator|-=
name|node
operator|.
name|getCacheCapacity
argument_list|()
expr_stmt|;
name|cacheUsed
operator|-=
name|node
operator|.
name|getCacheUsed
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|StorageType
argument_list|>
name|storageTypes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeStorageInfo
name|storageInfo
range|:
name|node
operator|.
name|getStorageInfos
argument_list|()
control|)
block|{
name|statsMap
operator|.
name|subtractStorage
argument_list|(
name|storageInfo
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|storageTypes
operator|.
name|add
argument_list|(
name|storageInfo
operator|.
name|getStorageType
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StorageType
name|storageType
range|:
name|storageTypes
control|)
block|{
name|statsMap
operator|.
name|subtractNode
argument_list|(
name|storageType
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Increment expired heartbeat counter. */
DECL|method|incrExpiredHeartbeats ()
name|void
name|incrExpiredHeartbeats
parameter_list|()
block|{
name|expiredHeartbeats
operator|++
expr_stmt|;
block|}
DECL|method|getStatsMap ()
specifier|synchronized
name|Map
argument_list|<
name|StorageType
argument_list|,
name|StorageTypeStats
argument_list|>
name|getStatsMap
parameter_list|()
block|{
return|return
name|statsMap
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getCapacityTotal ()
specifier|synchronized
name|long
name|getCapacityTotal
parameter_list|()
block|{
return|return
name|capacityTotal
return|;
block|}
DECL|method|getCapacityUsed ()
specifier|synchronized
name|long
name|getCapacityUsed
parameter_list|()
block|{
return|return
name|capacityUsed
return|;
block|}
DECL|method|getCapacityRemaining ()
specifier|synchronized
name|long
name|getCapacityRemaining
parameter_list|()
block|{
return|return
name|capacityRemaining
return|;
block|}
DECL|method|getBlockPoolUsed ()
specifier|synchronized
name|long
name|getBlockPoolUsed
parameter_list|()
block|{
return|return
name|blockPoolUsed
return|;
block|}
DECL|method|getXceiverCount ()
specifier|synchronized
name|int
name|getXceiverCount
parameter_list|()
block|{
return|return
name|xceiverCount
return|;
block|}
DECL|method|getCacheCapacity ()
specifier|synchronized
name|long
name|getCacheCapacity
parameter_list|()
block|{
return|return
name|cacheCapacity
return|;
block|}
DECL|method|getCacheUsed ()
specifier|synchronized
name|long
name|getCacheUsed
parameter_list|()
block|{
return|return
name|cacheUsed
return|;
block|}
DECL|method|getNodesInService ()
specifier|synchronized
name|int
name|getNodesInService
parameter_list|()
block|{
return|return
name|nodesInService
return|;
block|}
DECL|method|getNodesInServiceXceiverCount ()
specifier|synchronized
name|int
name|getNodesInServiceXceiverCount
parameter_list|()
block|{
return|return
name|nodesInServiceXceiverCount
return|;
block|}
DECL|method|getExpiredHeartbeats ()
specifier|synchronized
name|int
name|getExpiredHeartbeats
parameter_list|()
block|{
return|return
name|expiredHeartbeats
return|;
block|}
DECL|method|getCapacityRemainingPercent ()
specifier|synchronized
name|float
name|getCapacityRemainingPercent
parameter_list|()
block|{
return|return
name|DFSUtilClient
operator|.
name|getPercentRemaining
argument_list|(
name|capacityRemaining
argument_list|,
name|capacityTotal
argument_list|)
return|;
block|}
DECL|method|getPercentBlockPoolUsed ()
specifier|synchronized
name|float
name|getPercentBlockPoolUsed
parameter_list|()
block|{
return|return
name|DFSUtilClient
operator|.
name|getPercentUsed
argument_list|(
name|blockPoolUsed
argument_list|,
name|capacityTotal
argument_list|)
return|;
block|}
DECL|method|getCapacityUsedNonDFS ()
specifier|synchronized
name|long
name|getCapacityUsedNonDFS
parameter_list|()
block|{
specifier|final
name|long
name|nonDFSUsed
init|=
name|capacityTotal
operator|-
name|capacityRemaining
operator|-
name|capacityUsed
decl_stmt|;
return|return
name|nonDFSUsed
operator|<
literal|0L
condition|?
literal|0L
else|:
name|nonDFSUsed
return|;
block|}
DECL|method|getCapacityUsedPercent ()
specifier|synchronized
name|float
name|getCapacityUsedPercent
parameter_list|()
block|{
return|return
name|DFSUtilClient
operator|.
name|getPercentUsed
argument_list|(
name|capacityUsed
argument_list|,
name|capacityTotal
argument_list|)
return|;
block|}
DECL|class|StorageTypeStatsMap
specifier|static
specifier|final
class|class
name|StorageTypeStatsMap
block|{
DECL|field|storageTypeStatsMap
specifier|private
name|Map
argument_list|<
name|StorageType
argument_list|,
name|StorageTypeStats
argument_list|>
name|storageTypeStatsMap
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|StorageType
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|get ()
specifier|private
name|Map
argument_list|<
name|StorageType
argument_list|,
name|StorageTypeStats
argument_list|>
name|get
parameter_list|()
block|{
return|return
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|storageTypeStatsMap
argument_list|)
return|;
block|}
DECL|method|addNode (StorageType storageType, final DatanodeDescriptor node)
specifier|private
name|void
name|addNode
parameter_list|(
name|StorageType
name|storageType
parameter_list|,
specifier|final
name|DatanodeDescriptor
name|node
parameter_list|)
block|{
name|StorageTypeStats
name|storageTypeStats
init|=
name|storageTypeStatsMap
operator|.
name|get
argument_list|(
name|storageType
argument_list|)
decl_stmt|;
if|if
condition|(
name|storageTypeStats
operator|==
literal|null
condition|)
block|{
name|storageTypeStats
operator|=
operator|new
name|StorageTypeStats
argument_list|()
expr_stmt|;
name|storageTypeStatsMap
operator|.
name|put
argument_list|(
name|storageType
argument_list|,
name|storageTypeStats
argument_list|)
expr_stmt|;
block|}
name|storageTypeStats
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
DECL|method|addStorage (final DatanodeStorageInfo info, final DatanodeDescriptor node)
specifier|private
name|void
name|addStorage
parameter_list|(
specifier|final
name|DatanodeStorageInfo
name|info
parameter_list|,
specifier|final
name|DatanodeDescriptor
name|node
parameter_list|)
block|{
name|StorageTypeStats
name|storageTypeStats
init|=
name|storageTypeStatsMap
operator|.
name|get
argument_list|(
name|info
operator|.
name|getStorageType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|storageTypeStats
operator|==
literal|null
condition|)
block|{
name|storageTypeStats
operator|=
operator|new
name|StorageTypeStats
argument_list|()
expr_stmt|;
name|storageTypeStatsMap
operator|.
name|put
argument_list|(
name|info
operator|.
name|getStorageType
argument_list|()
argument_list|,
name|storageTypeStats
argument_list|)
expr_stmt|;
block|}
name|storageTypeStats
operator|.
name|addStorage
argument_list|(
name|info
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
DECL|method|subtractStorage (final DatanodeStorageInfo info, final DatanodeDescriptor node)
specifier|private
name|void
name|subtractStorage
parameter_list|(
specifier|final
name|DatanodeStorageInfo
name|info
parameter_list|,
specifier|final
name|DatanodeDescriptor
name|node
parameter_list|)
block|{
name|StorageTypeStats
name|storageTypeStats
init|=
name|storageTypeStatsMap
operator|.
name|get
argument_list|(
name|info
operator|.
name|getStorageType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|storageTypeStats
operator|!=
literal|null
condition|)
block|{
name|storageTypeStats
operator|.
name|subtractStorage
argument_list|(
name|info
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|subtractNode (StorageType storageType, final DatanodeDescriptor node)
specifier|private
name|void
name|subtractNode
parameter_list|(
name|StorageType
name|storageType
parameter_list|,
specifier|final
name|DatanodeDescriptor
name|node
parameter_list|)
block|{
name|StorageTypeStats
name|storageTypeStats
init|=
name|storageTypeStatsMap
operator|.
name|get
argument_list|(
name|storageType
argument_list|)
decl_stmt|;
if|if
condition|(
name|storageTypeStats
operator|!=
literal|null
condition|)
block|{
name|storageTypeStats
operator|.
name|subtractNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

