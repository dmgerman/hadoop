begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.web.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * A response entity for a HdfsDataInputStream.  */
end_comment

begin_class
DECL|class|OpenEntity
specifier|public
class|class
name|OpenEntity
block|{
DECL|field|in
specifier|private
specifier|final
name|HdfsDataInputStream
name|in
decl_stmt|;
DECL|field|length
specifier|private
specifier|final
name|long
name|length
decl_stmt|;
DECL|field|outBufferSize
specifier|private
specifier|final
name|int
name|outBufferSize
decl_stmt|;
DECL|field|dfsclient
specifier|private
specifier|final
name|DFSClient
name|dfsclient
decl_stmt|;
DECL|method|OpenEntity (final HdfsDataInputStream in, final long length, final int outBufferSize, final DFSClient dfsclient)
name|OpenEntity
parameter_list|(
specifier|final
name|HdfsDataInputStream
name|in
parameter_list|,
specifier|final
name|long
name|length
parameter_list|,
specifier|final
name|int
name|outBufferSize
parameter_list|,
specifier|final
name|DFSClient
name|dfsclient
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|outBufferSize
operator|=
name|outBufferSize
expr_stmt|;
name|this
operator|.
name|dfsclient
operator|=
name|dfsclient
expr_stmt|;
block|}
comment|/**    * A {@link MessageBodyWriter} for {@link OpenEntity}.    */
annotation|@
name|Provider
DECL|class|Writer
specifier|public
specifier|static
class|class
name|Writer
implements|implements
name|MessageBodyWriter
argument_list|<
name|OpenEntity
argument_list|>
block|{
annotation|@
name|Override
DECL|method|isWriteable (Class<?> clazz, Type genericType, Annotation[] annotations, MediaType mediaType)
specifier|public
name|boolean
name|isWriteable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
name|clazz
operator|==
name|OpenEntity
operator|.
name|class
operator|&&
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM_TYPE
operator|.
name|isCompatible
argument_list|(
name|mediaType
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSize (OpenEntity e, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)
specifier|public
name|long
name|getSize
parameter_list|(
name|OpenEntity
name|e
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
name|e
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo (OpenEntity e, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream out )
specifier|public
name|void
name|writeTo
parameter_list|(
name|OpenEntity
name|e
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpHeaders
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|e
operator|.
name|outBufferSize
index|]
decl_stmt|;
name|long
name|remaining
init|=
name|e
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
name|int
name|read
init|=
name|e
operator|.
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|buf
operator|.
name|length
argument_list|,
name|remaining
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|==
operator|-
literal|1
condition|)
block|{
comment|// EOF
break|break;
block|}
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|remaining
operator|-=
name|read
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|DatanodeWebHdfsMethods
operator|.
name|LOG
argument_list|,
name|e
operator|.
name|in
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|DatanodeWebHdfsMethods
operator|.
name|LOG
argument_list|,
name|e
operator|.
name|dfsclient
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

