begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.bkjournal
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|bkjournal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bookkeeper
operator|.
name|client
operator|.
name|LedgerHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bookkeeper
operator|.
name|client
operator|.
name|BKException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bookkeeper
operator|.
name|client
operator|.
name|AsyncCallback
operator|.
name|AddCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOp
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Output stream for BookKeeper Journal.  * Multiple complete edit log entries are packed into a single bookkeeper  * entry before sending it over the network. The fact that the edit log entries  * are complete in the bookkeeper entries means that each bookkeeper log entry  *can be read as a complete edit log. This is useful for recover, as we don't  * need to read through the entire edit log segment to get the last written  * entry.  */
end_comment

begin_class
DECL|class|BookKeeperEditLogOutputStream
class|class
name|BookKeeperEditLogOutputStream
extends|extends
name|EditLogOutputStream
implements|implements
name|AddCallback
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BookKeeperEditLogOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|bufCurrent
specifier|private
specifier|final
name|DataOutputBuffer
name|bufCurrent
decl_stmt|;
DECL|field|outstandingRequests
specifier|private
specifier|final
name|AtomicInteger
name|outstandingRequests
decl_stmt|;
DECL|field|transmissionThreshold
specifier|private
specifier|final
name|int
name|transmissionThreshold
decl_stmt|;
DECL|field|lh
specifier|private
specifier|final
name|LedgerHandle
name|lh
decl_stmt|;
DECL|field|syncLatch
specifier|private
name|CountDownLatch
name|syncLatch
decl_stmt|;
DECL|field|transmitResult
specifier|private
specifier|final
name|AtomicInteger
name|transmitResult
init|=
operator|new
name|AtomicInteger
argument_list|(
name|BKException
operator|.
name|Code
operator|.
name|OK
argument_list|)
decl_stmt|;
DECL|field|writer
specifier|private
specifier|final
name|Writer
name|writer
decl_stmt|;
comment|/**    * Construct an edit log output stream which writes to a ledger.     */
DECL|method|BookKeeperEditLogOutputStream (Configuration conf, LedgerHandle lh)
specifier|protected
name|BookKeeperEditLogOutputStream
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|LedgerHandle
name|lh
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|bufCurrent
operator|=
operator|new
name|DataOutputBuffer
argument_list|()
expr_stmt|;
name|outstandingRequests
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|syncLatch
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|lh
operator|=
name|lh
expr_stmt|;
name|this
operator|.
name|writer
operator|=
operator|new
name|Writer
argument_list|(
name|bufCurrent
argument_list|)
expr_stmt|;
name|this
operator|.
name|transmissionThreshold
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|BookKeeperJournalManager
operator|.
name|BKJM_OUTPUT_BUFFER_SIZE
argument_list|,
name|BookKeeperJournalManager
operator|.
name|BKJM_OUTPUT_BUFFER_SIZE_DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create (int layoutVersion)
specifier|public
name|void
name|create
parameter_list|(
name|int
name|layoutVersion
parameter_list|)
throws|throws
name|IOException
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|setReadyToFlush
argument_list|()
expr_stmt|;
name|flushAndSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|lh
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted waiting on close"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|BKException
name|bke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"BookKeeper error during close"
argument_list|,
name|bke
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|abort ()
specifier|public
name|void
name|abort
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|lh
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted waiting on close"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|BKException
name|bke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"BookKeeper error during abort"
argument_list|,
name|bke
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeRaw (final byte[] data, int off, int len)
specifier|public
name|void
name|writeRaw
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not supported for BK"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|write (FSEditLogOp op)
specifier|public
name|void
name|write
parameter_list|(
name|FSEditLogOp
name|op
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|writeOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|bufCurrent
operator|.
name|getLength
argument_list|()
operator|>
name|transmissionThreshold
condition|)
block|{
name|transmit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setReadyToFlush ()
specifier|public
name|void
name|setReadyToFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|transmit
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|syncLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|outstandingRequests
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|flushAndSync (boolean durable)
specifier|public
name|void
name|flushAndSync
parameter_list|(
name|boolean
name|durable
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|syncLatch
operator|!=
literal|null
operator|)
assert|;
try|try
block|{
name|syncLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted waiting on latch"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
if|if
condition|(
name|transmitResult
operator|.
name|get
argument_list|()
operator|!=
name|BKException
operator|.
name|Code
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to write to bookkeeper; Error is ("
operator|+
name|transmitResult
operator|.
name|get
argument_list|()
operator|+
literal|") "
operator|+
name|BKException
operator|.
name|getMessage
argument_list|(
name|transmitResult
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|syncLatch
operator|=
literal|null
expr_stmt|;
comment|// wait for whatever we wait on
block|}
comment|/**    * Transmit the current buffer to bookkeeper.    * Synchronised at the FSEditLog level. #write() and #setReadyToFlush()    * are never called at the same time.    */
DECL|method|transmit ()
specifier|private
name|void
name|transmit
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|transmitResult
operator|.
name|compareAndSet
argument_list|(
name|BKException
operator|.
name|Code
operator|.
name|OK
argument_list|,
name|BKException
operator|.
name|Code
operator|.
name|OK
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Trying to write to an errored stream;"
operator|+
literal|" Error code : ("
operator|+
name|transmitResult
operator|.
name|get
argument_list|()
operator|+
literal|") "
operator|+
name|BKException
operator|.
name|getMessage
argument_list|(
name|transmitResult
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|bufCurrent
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|entry
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|bufCurrent
operator|.
name|getData
argument_list|()
argument_list|,
name|bufCurrent
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|lh
operator|.
name|asyncAddEntry
argument_list|(
name|entry
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|bufCurrent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|outstandingRequests
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addComplete (int rc, LedgerHandle handle, long entryId, Object ctx)
specifier|public
name|void
name|addComplete
parameter_list|(
name|int
name|rc
parameter_list|,
name|LedgerHandle
name|handle
parameter_list|,
name|long
name|entryId
parameter_list|,
name|Object
name|ctx
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|outstandingRequests
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|transmitResult
operator|.
name|compareAndSet
argument_list|(
name|BKException
operator|.
name|Code
operator|.
name|OK
argument_list|,
name|rc
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Tried to set transmit result to ("
operator|+
name|rc
operator|+
literal|") \""
operator|+
name|BKException
operator|.
name|getMessage
argument_list|(
name|rc
argument_list|)
operator|+
literal|"\""
operator|+
literal|" but is already ("
operator|+
name|transmitResult
operator|.
name|get
argument_list|()
operator|+
literal|") \""
operator|+
name|BKException
operator|.
name|getMessage
argument_list|(
name|transmitResult
operator|.
name|get
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|CountDownLatch
name|l
init|=
name|syncLatch
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|l
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

