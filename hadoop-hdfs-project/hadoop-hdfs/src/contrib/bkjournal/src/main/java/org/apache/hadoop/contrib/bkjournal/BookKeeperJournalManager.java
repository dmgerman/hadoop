begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.bkjournal
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|bkjournal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|JournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bookkeeper
operator|.
name|conf
operator|.
name|ClientConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bookkeeper
operator|.
name|client
operator|.
name|BKException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bookkeeper
operator|.
name|client
operator|.
name|BookKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bookkeeper
operator|.
name|client
operator|.
name|LedgerHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * BookKeeper Journal Manager  *  * To use, add the following to hdfs-site.xml.  *<pre>  * {@code  *<property>  *<name>dfs.namenode.edits.dir</name>  *<value>bookkeeper://zk1:2181;zk2:2181;zk3:2181/hdfsjournal</value>  *</property>  *  *<property>  *<name>dfs.namenode.edits.journalPlugin.bookkeeper</name>  *<value>org.apache.hadoop.contrib.bkjournal.BookKeeperJournalManager</value>  *</property>  * }  *</pre>  * The URI format for bookkeeper is bookkeeper://[zkEnsemble]/[rootZnode]  * [zookkeeper ensemble] is a list of semi-colon separated, zookeeper host:port  * pairs. In the example above there are 3 servers, in the ensemble,  * zk1, zk2&amp; zk3, each one listening on port 2181.  *  * [root znode] is the path of the zookeeper znode, under which the editlog  * information will be stored.  *  * Other configuration options are:  *<ul>  *<li><b>dfs.namenode.bookkeeperjournal.output-buffer-size</b>  *       Number of bytes a bookkeeper journal stream will buffer before  *       forcing a flush. Default is 1024.</li>  *<li><b>dfs.namenode.bookkeeperjournal.ensemble-size</b>  *       Number of bookkeeper servers in edit log ledger ensembles. This  *       is the number of bookkeeper servers which need to be available  *       for the ledger to be writable. Default is 3.</li>  *<li><b>dfs.namenode.bookkeeperjournal.quorum-size</b>  *       Number of bookkeeper servers in the write quorum. This is the  *       number of bookkeeper servers which must have acknowledged the  *       write of an entry before it is considered written.  *       Default is 2.</li>  *<li><b>dfs.namenode.bookkeeperjournal.digestPw</b>  *       Password to use when creating ledgers.</li>  *</ul>  */
end_comment

begin_class
DECL|class|BookKeeperJournalManager
specifier|public
class|class
name|BookKeeperJournalManager
implements|implements
name|JournalManager
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BookKeeperJournalManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BKJM_OUTPUT_BUFFER_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|BKJM_OUTPUT_BUFFER_SIZE
init|=
literal|"dfs.namenode.bookkeeperjournal.output-buffer-size"
decl_stmt|;
DECL|field|BKJM_OUTPUT_BUFFER_SIZE_DEFAULT
specifier|public
specifier|static
specifier|final
name|int
name|BKJM_OUTPUT_BUFFER_SIZE_DEFAULT
init|=
literal|1024
decl_stmt|;
DECL|field|BKJM_BOOKKEEPER_ENSEMBLE_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|BKJM_BOOKKEEPER_ENSEMBLE_SIZE
init|=
literal|"dfs.namenode.bookkeeperjournal.ensemble-size"
decl_stmt|;
DECL|field|BKJM_BOOKKEEPER_ENSEMBLE_SIZE_DEFAULT
specifier|public
specifier|static
specifier|final
name|int
name|BKJM_BOOKKEEPER_ENSEMBLE_SIZE_DEFAULT
init|=
literal|3
decl_stmt|;
DECL|field|BKJM_BOOKKEEPER_QUORUM_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|BKJM_BOOKKEEPER_QUORUM_SIZE
init|=
literal|"dfs.namenode.bookkeeperjournal.quorum-size"
decl_stmt|;
DECL|field|BKJM_BOOKKEEPER_QUORUM_SIZE_DEFAULT
specifier|public
specifier|static
specifier|final
name|int
name|BKJM_BOOKKEEPER_QUORUM_SIZE_DEFAULT
init|=
literal|2
decl_stmt|;
DECL|field|BKJM_BOOKKEEPER_DIGEST_PW
specifier|public
specifier|static
specifier|final
name|String
name|BKJM_BOOKKEEPER_DIGEST_PW
init|=
literal|"dfs.namenode.bookkeeperjournal.digestPw"
decl_stmt|;
DECL|field|BKJM_BOOKKEEPER_DIGEST_PW_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|BKJM_BOOKKEEPER_DIGEST_PW_DEFAULT
init|=
literal|""
decl_stmt|;
DECL|field|BKJM_LAYOUT_VERSION
specifier|private
specifier|static
specifier|final
name|int
name|BKJM_LAYOUT_VERSION
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|zkc
specifier|private
specifier|final
name|ZooKeeper
name|zkc
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|bkc
specifier|private
specifier|final
name|BookKeeper
name|bkc
decl_stmt|;
DECL|field|wl
specifier|private
specifier|final
name|WriteLock
name|wl
decl_stmt|;
DECL|field|ledgerPath
specifier|private
specifier|final
name|String
name|ledgerPath
decl_stmt|;
DECL|field|maxTxId
specifier|private
specifier|final
name|MaxTxId
name|maxTxId
decl_stmt|;
DECL|field|ensembleSize
specifier|private
specifier|final
name|int
name|ensembleSize
decl_stmt|;
DECL|field|quorumSize
specifier|private
specifier|final
name|int
name|quorumSize
decl_stmt|;
DECL|field|digestpw
specifier|private
specifier|final
name|String
name|digestpw
decl_stmt|;
DECL|field|zkConnectLatch
specifier|private
specifier|final
name|CountDownLatch
name|zkConnectLatch
decl_stmt|;
DECL|field|currentLedger
specifier|private
name|LedgerHandle
name|currentLedger
init|=
literal|null
decl_stmt|;
DECL|method|bytesToInt (byte[] b)
specifier|private
name|int
name|bytesToInt
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
assert|assert
name|b
operator|.
name|length
operator|>=
literal|4
assert|;
return|return
name|b
index|[
literal|0
index|]
operator|<<
literal|24
operator||
name|b
index|[
literal|1
index|]
operator|<<
literal|16
operator||
name|b
index|[
literal|2
index|]
operator|<<
literal|8
operator||
name|b
index|[
literal|3
index|]
return|;
block|}
DECL|method|intToBytes (int i)
specifier|private
name|byte
index|[]
name|intToBytes
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|i
operator|>>
literal|24
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|i
operator|>>
literal|16
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|i
operator|>>
literal|8
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|i
argument_list|)
block|}
return|;
block|}
comment|/**    * Construct a Bookkeeper journal manager.    */
DECL|method|BookKeeperJournalManager (Configuration conf, URI uri)
specifier|public
name|BookKeeperJournalManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|String
name|zkConnect
init|=
name|uri
operator|.
name|getAuthority
argument_list|()
operator|.
name|replace
argument_list|(
literal|";"
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|String
name|zkPath
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|ensembleSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|BKJM_BOOKKEEPER_ENSEMBLE_SIZE
argument_list|,
name|BKJM_BOOKKEEPER_ENSEMBLE_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|quorumSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|BKJM_BOOKKEEPER_QUORUM_SIZE
argument_list|,
name|BKJM_BOOKKEEPER_QUORUM_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|ledgerPath
operator|=
name|zkPath
operator|+
literal|"/ledgers"
expr_stmt|;
name|String
name|maxTxIdPath
init|=
name|zkPath
operator|+
literal|"/maxtxid"
decl_stmt|;
name|String
name|lockPath
init|=
name|zkPath
operator|+
literal|"/lock"
decl_stmt|;
name|String
name|versionPath
init|=
name|zkPath
operator|+
literal|"/version"
decl_stmt|;
name|digestpw
operator|=
name|conf
operator|.
name|get
argument_list|(
name|BKJM_BOOKKEEPER_DIGEST_PW
argument_list|,
name|BKJM_BOOKKEEPER_DIGEST_PW_DEFAULT
argument_list|)
expr_stmt|;
try|try
block|{
name|zkConnectLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|zkc
operator|=
operator|new
name|ZooKeeper
argument_list|(
name|zkConnect
argument_list|,
literal|3000
argument_list|,
operator|new
name|ZkConnectionWatcher
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|zkConnectLatch
operator|.
name|await
argument_list|(
literal|6000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error connecting to zookeeper"
argument_list|)
throw|;
block|}
if|if
condition|(
name|zkc
operator|.
name|exists
argument_list|(
name|zkPath
argument_list|,
literal|false
argument_list|)
operator|==
literal|null
condition|)
block|{
name|zkc
operator|.
name|create
argument_list|(
name|zkPath
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
name|Stat
name|versionStat
init|=
name|zkc
operator|.
name|exists
argument_list|(
name|versionPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionStat
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|d
init|=
name|zkc
operator|.
name|getData
argument_list|(
name|versionPath
argument_list|,
literal|false
argument_list|,
name|versionStat
argument_list|)
decl_stmt|;
comment|// There's only one version at the moment
assert|assert
name|bytesToInt
argument_list|(
name|d
argument_list|)
operator|==
name|BKJM_LAYOUT_VERSION
assert|;
block|}
else|else
block|{
name|zkc
operator|.
name|create
argument_list|(
name|versionPath
argument_list|,
name|intToBytes
argument_list|(
name|BKJM_LAYOUT_VERSION
argument_list|)
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|zkc
operator|.
name|exists
argument_list|(
name|ledgerPath
argument_list|,
literal|false
argument_list|)
operator|==
literal|null
condition|)
block|{
name|zkc
operator|.
name|create
argument_list|(
name|ledgerPath
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
name|bkc
operator|=
operator|new
name|BookKeeper
argument_list|(
operator|new
name|ClientConfiguration
argument_list|()
argument_list|,
name|zkc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error initializing zk"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|wl
operator|=
operator|new
name|WriteLock
argument_list|(
name|zkc
argument_list|,
name|lockPath
argument_list|)
expr_stmt|;
name|maxTxId
operator|=
operator|new
name|MaxTxId
argument_list|(
name|zkc
argument_list|,
name|maxTxIdPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start a new log segment in a BookKeeper ledger.    * First ensure that we have the write lock for this journal.    * Then create a ledger and stream based on that ledger.    * The ledger id is written to the inprogress znode, so that in the    * case of a crash, a recovery process can find the ledger we were writing    * to when we crashed.    * @param txId First transaction id to be written to the stream    */
annotation|@
name|Override
DECL|method|startLogSegment (long txId)
specifier|public
name|EditLogOutputStream
name|startLogSegment
parameter_list|(
name|long
name|txId
parameter_list|)
throws|throws
name|IOException
block|{
name|wl
operator|.
name|acquire
argument_list|()
expr_stmt|;
if|if
condition|(
name|txId
operator|<=
name|maxTxId
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"We've already seen "
operator|+
name|txId
operator|+
literal|". A new stream cannot be created with it"
argument_list|)
throw|;
block|}
if|if
condition|(
name|currentLedger
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Already writing to a ledger, id="
operator|+
name|currentLedger
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|currentLedger
operator|=
name|bkc
operator|.
name|createLedger
argument_list|(
name|ensembleSize
argument_list|,
name|quorumSize
argument_list|,
name|BookKeeper
operator|.
name|DigestType
operator|.
name|MAC
argument_list|,
name|digestpw
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|znodePath
init|=
name|inprogressZNode
argument_list|()
decl_stmt|;
name|EditLogLedgerMetadata
name|l
init|=
operator|new
name|EditLogLedgerMetadata
argument_list|(
name|znodePath
argument_list|,
name|HdfsConstants
operator|.
name|LAYOUT_VERSION
argument_list|,
name|currentLedger
operator|.
name|getId
argument_list|()
argument_list|,
name|txId
argument_list|)
decl_stmt|;
comment|/* Write the ledger metadata out to the inprogress ledger znode        * This can fail if for some reason our write lock has        * expired (@see WriteLock) and another process has managed to        * create the inprogress znode.        * In this case, throw an exception. We don't want to continue        * as this would lead to a split brain situation.        */
name|l
operator|.
name|write
argument_list|(
name|zkc
argument_list|,
name|znodePath
argument_list|)
expr_stmt|;
return|return
operator|new
name|BookKeeperEditLogOutputStream
argument_list|(
name|conf
argument_list|,
name|currentLedger
argument_list|,
name|wl
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|currentLedger
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|currentLedger
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
comment|//log& ignore, an IOException will be thrown soon
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing ledger"
argument_list|,
name|e2
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error creating ledger"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Finalize a log segment. If the journal manager is currently    * writing to a ledger, ensure that this is the ledger of the log segment    * being finalized.    *    * Otherwise this is the recovery case. In the recovery case, ensure that    * the firstTxId of the ledger matches firstTxId for the segment we are    * trying to finalize.    */
annotation|@
name|Override
DECL|method|finalizeLogSegment (long firstTxId, long lastTxId)
specifier|public
name|void
name|finalizeLogSegment
parameter_list|(
name|long
name|firstTxId
parameter_list|,
name|long
name|lastTxId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|inprogressPath
init|=
name|inprogressZNode
argument_list|()
decl_stmt|;
try|try
block|{
name|Stat
name|inprogressStat
init|=
name|zkc
operator|.
name|exists
argument_list|(
name|inprogressPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|inprogressStat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Inprogress znode "
operator|+
name|inprogressPath
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
name|wl
operator|.
name|checkWriteLock
argument_list|()
expr_stmt|;
name|EditLogLedgerMetadata
name|l
init|=
name|EditLogLedgerMetadata
operator|.
name|read
argument_list|(
name|zkc
argument_list|,
name|inprogressPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentLedger
operator|!=
literal|null
condition|)
block|{
comment|// normal, non-recovery case
if|if
condition|(
name|l
operator|.
name|getLedgerId
argument_list|()
operator|==
name|currentLedger
operator|.
name|getId
argument_list|()
condition|)
block|{
try|try
block|{
name|currentLedger
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BKException
name|bke
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing current ledger"
argument_list|,
name|bke
argument_list|)
expr_stmt|;
block|}
name|currentLedger
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Active ledger has different ID to inprogress. "
operator|+
name|l
operator|.
name|getLedgerId
argument_list|()
operator|+
literal|" found, "
operator|+
name|currentLedger
operator|.
name|getId
argument_list|()
operator|+
literal|" expected"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|l
operator|.
name|getFirstTxId
argument_list|()
operator|!=
name|firstTxId
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Transaction id not as expected, "
operator|+
name|l
operator|.
name|getFirstTxId
argument_list|()
operator|+
literal|" found, "
operator|+
name|firstTxId
operator|+
literal|" expected"
argument_list|)
throw|;
block|}
name|l
operator|.
name|finalizeLedger
argument_list|(
name|lastTxId
argument_list|)
expr_stmt|;
name|String
name|finalisedPath
init|=
name|finalizedLedgerZNode
argument_list|(
name|firstTxId
argument_list|,
name|lastTxId
argument_list|)
decl_stmt|;
try|try
block|{
name|l
operator|.
name|write
argument_list|(
name|zkc
argument_list|,
name|finalisedPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|nee
parameter_list|)
block|{
if|if
condition|(
operator|!
name|l
operator|.
name|verify
argument_list|(
name|zkc
argument_list|,
name|finalisedPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Node "
operator|+
name|finalisedPath
operator|+
literal|" already exists"
operator|+
literal|" but data doesn't match"
argument_list|)
throw|;
block|}
block|}
name|maxTxId
operator|.
name|store
argument_list|(
name|lastTxId
argument_list|)
expr_stmt|;
name|zkc
operator|.
name|delete
argument_list|(
name|inprogressPath
argument_list|,
name|inprogressStat
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error finalising ledger"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error finalising ledger"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
finally|finally
block|{
name|wl
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getInputStream (long fromTxnId)
specifier|public
name|EditLogInputStream
name|getInputStream
parameter_list|(
name|long
name|fromTxnId
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|EditLogLedgerMetadata
name|l
range|:
name|getLedgerList
argument_list|()
control|)
block|{
if|if
condition|(
name|l
operator|.
name|getFirstTxId
argument_list|()
operator|==
name|fromTxnId
condition|)
block|{
try|try
block|{
name|LedgerHandle
name|h
init|=
name|bkc
operator|.
name|openLedger
argument_list|(
name|l
operator|.
name|getLedgerId
argument_list|()
argument_list|,
name|BookKeeper
operator|.
name|DigestType
operator|.
name|MAC
argument_list|,
name|digestpw
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|BookKeeperEditLogInputStream
argument_list|(
name|h
argument_list|,
name|l
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not open ledger for "
operator|+
name|fromTxnId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No ledger for fromTxnId "
operator|+
name|fromTxnId
operator|+
literal|" found."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getNumberOfTransactions (long fromTxnId)
specifier|public
name|long
name|getNumberOfTransactions
parameter_list|(
name|long
name|fromTxnId
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|count
init|=
literal|0
decl_stmt|;
name|long
name|expectedStart
init|=
literal|0
decl_stmt|;
for|for
control|(
name|EditLogLedgerMetadata
name|l
range|:
name|getLedgerList
argument_list|()
control|)
block|{
if|if
condition|(
name|l
operator|.
name|isInProgress
argument_list|()
condition|)
block|{
name|long
name|endTxId
init|=
name|recoverLastTxId
argument_list|(
name|l
argument_list|)
decl_stmt|;
if|if
condition|(
name|endTxId
operator|==
name|HdfsConstants
operator|.
name|INVALID_TXID
condition|)
block|{
break|break;
block|}
name|count
operator|+=
operator|(
name|endTxId
operator|-
name|l
operator|.
name|getFirstTxId
argument_list|()
operator|)
operator|+
literal|1
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|l
operator|.
name|getFirstTxId
argument_list|()
operator|<
name|fromTxnId
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|l
operator|.
name|getFirstTxId
argument_list|()
operator|==
name|fromTxnId
condition|)
block|{
name|count
operator|=
operator|(
name|l
operator|.
name|getLastTxId
argument_list|()
operator|-
name|l
operator|.
name|getFirstTxId
argument_list|()
operator|)
operator|+
literal|1
expr_stmt|;
name|expectedStart
operator|=
name|l
operator|.
name|getLastTxId
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|expectedStart
operator|!=
name|l
operator|.
name|getFirstTxId
argument_list|()
condition|)
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|CorruptionException
argument_list|(
literal|"StartTxId "
operator|+
name|l
operator|.
name|getFirstTxId
argument_list|()
operator|+
literal|" is not as expected "
operator|+
name|expectedStart
operator|+
literal|". Gap in transaction log?"
argument_list|)
throw|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|count
operator|+=
operator|(
name|l
operator|.
name|getLastTxId
argument_list|()
operator|-
name|l
operator|.
name|getFirstTxId
argument_list|()
operator|)
operator|+
literal|1
expr_stmt|;
name|expectedStart
operator|=
name|l
operator|.
name|getLastTxId
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
DECL|method|recoverUnfinalizedSegments ()
specifier|public
name|void
name|recoverUnfinalizedSegments
parameter_list|()
throws|throws
name|IOException
block|{
name|wl
operator|.
name|acquire
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|EditLogLedgerMetadata
name|l
init|=
name|EditLogLedgerMetadata
operator|.
name|read
argument_list|(
name|zkc
argument_list|,
name|inprogressZNode
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|endTxId
init|=
name|recoverLastTxId
argument_list|(
name|l
argument_list|)
decl_stmt|;
if|if
condition|(
name|endTxId
operator|==
name|HdfsConstants
operator|.
name|INVALID_TXID
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unrecoverable corruption has occurred in segment "
operator|+
name|l
operator|.
name|toString
argument_list|()
operator|+
literal|" at path "
operator|+
name|inprogressZNode
argument_list|()
operator|+
literal|". Unable to continue recovery."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unrecoverable corruption, please check logs."
argument_list|)
throw|;
block|}
name|finalizeLogSegment
argument_list|(
name|l
operator|.
name|getFirstTxId
argument_list|()
argument_list|,
name|endTxId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{
comment|// nothing to recover, ignore
block|}
finally|finally
block|{
if|if
condition|(
name|wl
operator|.
name|haveLock
argument_list|()
condition|)
block|{
name|wl
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|purgeLogsOlderThan (long minTxIdToKeep)
specifier|public
name|void
name|purgeLogsOlderThan
parameter_list|(
name|long
name|minTxIdToKeep
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|EditLogLedgerMetadata
name|l
range|:
name|getLedgerList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|l
operator|.
name|isInProgress
argument_list|()
operator|&&
name|l
operator|.
name|getLastTxId
argument_list|()
operator|<
name|minTxIdToKeep
condition|)
block|{
try|try
block|{
name|Stat
name|stat
init|=
name|zkc
operator|.
name|exists
argument_list|(
name|l
operator|.
name|getZkPath
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|zkc
operator|.
name|delete
argument_list|(
name|l
operator|.
name|getZkPath
argument_list|()
argument_list|,
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|bkc
operator|.
name|deleteLedger
argument_list|(
name|l
operator|.
name|getLedgerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Interrupted while purging "
operator|+
name|l
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BKException
name|bke
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't delete ledger from bookkeeper"
argument_list|,
name|bke
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error deleting ledger entry in zookeeper"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|bkc
operator|.
name|close
argument_list|()
expr_stmt|;
name|zkc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't close zookeeper client"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Set the amount of memory that this stream should use to buffer edits.    * Setting this will only affect future output stream. Streams    * which have currently be created won't be affected.    */
annotation|@
name|Override
DECL|method|setOutputBufferCapacity (int size)
specifier|public
name|void
name|setOutputBufferCapacity
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|conf
operator|.
name|getInt
argument_list|(
name|BKJM_OUTPUT_BUFFER_SIZE
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**    * Find the id of the last edit log transaction writen to a edit log    * ledger.    */
DECL|method|recoverLastTxId (EditLogLedgerMetadata l)
specifier|private
name|long
name|recoverLastTxId
parameter_list|(
name|EditLogLedgerMetadata
name|l
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|LedgerHandle
name|lh
init|=
name|bkc
operator|.
name|openLedger
argument_list|(
name|l
operator|.
name|getLedgerId
argument_list|()
argument_list|,
name|BookKeeper
operator|.
name|DigestType
operator|.
name|MAC
argument_list|,
name|digestpw
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|lastAddConfirmed
init|=
name|lh
operator|.
name|getLastAddConfirmed
argument_list|()
decl_stmt|;
name|BookKeeperEditLogInputStream
name|in
init|=
operator|new
name|BookKeeperEditLogInputStream
argument_list|(
name|lh
argument_list|,
name|l
argument_list|,
name|lastAddConfirmed
argument_list|)
decl_stmt|;
name|long
name|endTxId
init|=
name|HdfsConstants
operator|.
name|INVALID_TXID
decl_stmt|;
name|FSEditLogOp
name|op
init|=
name|in
operator|.
name|readOp
argument_list|()
decl_stmt|;
while|while
condition|(
name|op
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|endTxId
operator|==
name|HdfsConstants
operator|.
name|INVALID_TXID
operator|||
name|op
operator|.
name|getTransactionId
argument_list|()
operator|==
name|endTxId
operator|+
literal|1
condition|)
block|{
name|endTxId
operator|=
name|op
operator|.
name|getTransactionId
argument_list|()
expr_stmt|;
block|}
name|op
operator|=
name|in
operator|.
name|readOp
argument_list|()
expr_stmt|;
block|}
return|return
name|endTxId
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception retreiving last tx id for ledger "
operator|+
name|l
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get a list of all segments in the journal.    */
DECL|method|getLedgerList ()
specifier|private
name|List
argument_list|<
name|EditLogLedgerMetadata
argument_list|>
name|getLedgerList
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|EditLogLedgerMetadata
argument_list|>
name|ledgers
init|=
operator|new
name|ArrayList
argument_list|<
name|EditLogLedgerMetadata
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ledgerNames
init|=
name|zkc
operator|.
name|getChildren
argument_list|(
name|ledgerPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|ledgerNames
control|)
block|{
name|ledgers
operator|.
name|add
argument_list|(
name|EditLogLedgerMetadata
operator|.
name|read
argument_list|(
name|zkc
argument_list|,
name|ledgerPath
operator|+
literal|"/"
operator|+
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception reading ledger list from zk"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|ledgers
argument_list|,
name|EditLogLedgerMetadata
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
return|return
name|ledgers
return|;
block|}
comment|/**    * Get the znode path for a finalize ledger    */
DECL|method|finalizedLedgerZNode (long startTxId, long endTxId)
name|String
name|finalizedLedgerZNode
parameter_list|(
name|long
name|startTxId
parameter_list|,
name|long
name|endTxId
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s/edits_%018d_%018d"
argument_list|,
name|ledgerPath
argument_list|,
name|startTxId
argument_list|,
name|endTxId
argument_list|)
return|;
block|}
comment|/**    * Get the znode path for the inprogressZNode    */
DECL|method|inprogressZNode ()
name|String
name|inprogressZNode
parameter_list|()
block|{
return|return
name|ledgerPath
operator|+
literal|"/inprogress"
return|;
block|}
comment|/**    * Simple watcher to notify when zookeeper has connected    */
DECL|class|ZkConnectionWatcher
specifier|private
class|class
name|ZkConnectionWatcher
implements|implements
name|Watcher
block|{
DECL|method|process (WatchedEvent event)
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|Event
operator|.
name|KeeperState
operator|.
name|SyncConnected
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
name|zkConnectLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

