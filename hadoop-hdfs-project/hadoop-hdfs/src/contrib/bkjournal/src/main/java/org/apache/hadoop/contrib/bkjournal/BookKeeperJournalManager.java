begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.bkjournal
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|bkjournal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|JournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bookkeeper
operator|.
name|conf
operator|.
name|ClientConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bookkeeper
operator|.
name|client
operator|.
name|BKException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bookkeeper
operator|.
name|client
operator|.
name|BookKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bookkeeper
operator|.
name|client
operator|.
name|LedgerHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bookkeeper
operator|.
name|util
operator|.
name|ZkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|AsyncCallback
operator|.
name|StringCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|bkjournal
operator|.
name|BKJournalProtos
operator|.
name|VersionProto
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * BookKeeper Journal Manager  *  * To use, add the following to hdfs-site.xml.  *<pre>  * {@code  *<property>  *<name>dfs.namenode.edits.dir</name>  *<value>bookkeeper://zk1:2181;zk2:2181;zk3:2181/hdfsjournal</value>  *</property>  *  *<property>  *<name>dfs.namenode.edits.journal-plugin.bookkeeper</name>  *<value>org.apache.hadoop.contrib.bkjournal.BookKeeperJournalManager</value>  *</property>  * }  *</pre>  * The URI format for bookkeeper is bookkeeper://[zkEnsemble]/[rootZnode]  * [zookkeeper ensemble] is a list of semi-colon separated, zookeeper host:port  * pairs. In the example above there are 3 servers, in the ensemble,  * zk1, zk2&amp; zk3, each one listening on port 2181.  *  * [root znode] is the path of the zookeeper znode, under which the editlog  * information will be stored.  *  * Other configuration options are:  *<ul>  *<li><b>dfs.namenode.bookkeeperjournal.output-buffer-size</b>  *       Number of bytes a bookkeeper journal stream will buffer before  *       forcing a flush. Default is 1024.</li>  *<li><b>dfs.namenode.bookkeeperjournal.ensemble-size</b>  *       Number of bookkeeper servers in edit log ledger ensembles. This  *       is the number of bookkeeper servers which need to be available  *       for the ledger to be writable. Default is 3.</li>  *<li><b>dfs.namenode.bookkeeperjournal.quorum-size</b>  *       Number of bookkeeper servers in the write quorum. This is the  *       number of bookkeeper servers which must have acknowledged the  *       write of an entry before it is considered written.  *       Default is 2.</li>  *<li><b>dfs.namenode.bookkeeperjournal.digestPw</b>  *       Password to use when creating ledgers.</li>  *<li><b>dfs.namenode.bookkeeperjournal.zk.session.timeout</b>  *       Session timeout for Zookeeper client from BookKeeper Journal Manager.  *       Hadoop recommends that, this value should be less than the ZKFC   *       session timeout value. Default value is 3000.</li>  *</ul>  */
end_comment

begin_class
DECL|class|BookKeeperJournalManager
specifier|public
class|class
name|BookKeeperJournalManager
implements|implements
name|JournalManager
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BookKeeperJournalManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BKJM_OUTPUT_BUFFER_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|BKJM_OUTPUT_BUFFER_SIZE
init|=
literal|"dfs.namenode.bookkeeperjournal.output-buffer-size"
decl_stmt|;
DECL|field|BKJM_OUTPUT_BUFFER_SIZE_DEFAULT
specifier|public
specifier|static
specifier|final
name|int
name|BKJM_OUTPUT_BUFFER_SIZE_DEFAULT
init|=
literal|1024
decl_stmt|;
DECL|field|BKJM_BOOKKEEPER_ENSEMBLE_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|BKJM_BOOKKEEPER_ENSEMBLE_SIZE
init|=
literal|"dfs.namenode.bookkeeperjournal.ensemble-size"
decl_stmt|;
DECL|field|BKJM_BOOKKEEPER_ENSEMBLE_SIZE_DEFAULT
specifier|public
specifier|static
specifier|final
name|int
name|BKJM_BOOKKEEPER_ENSEMBLE_SIZE_DEFAULT
init|=
literal|3
decl_stmt|;
DECL|field|BKJM_BOOKKEEPER_QUORUM_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|BKJM_BOOKKEEPER_QUORUM_SIZE
init|=
literal|"dfs.namenode.bookkeeperjournal.quorum-size"
decl_stmt|;
DECL|field|BKJM_BOOKKEEPER_QUORUM_SIZE_DEFAULT
specifier|public
specifier|static
specifier|final
name|int
name|BKJM_BOOKKEEPER_QUORUM_SIZE_DEFAULT
init|=
literal|2
decl_stmt|;
DECL|field|BKJM_BOOKKEEPER_DIGEST_PW
specifier|public
specifier|static
specifier|final
name|String
name|BKJM_BOOKKEEPER_DIGEST_PW
init|=
literal|"dfs.namenode.bookkeeperjournal.digestPw"
decl_stmt|;
DECL|field|BKJM_BOOKKEEPER_DIGEST_PW_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|BKJM_BOOKKEEPER_DIGEST_PW_DEFAULT
init|=
literal|""
decl_stmt|;
DECL|field|BKJM_LAYOUT_VERSION
specifier|private
specifier|static
specifier|final
name|int
name|BKJM_LAYOUT_VERSION
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|BKJM_ZK_SESSION_TIMEOUT
specifier|public
specifier|static
specifier|final
name|String
name|BKJM_ZK_SESSION_TIMEOUT
init|=
literal|"dfs.namenode.bookkeeperjournal.zk.session.timeout"
decl_stmt|;
DECL|field|BKJM_ZK_SESSION_TIMEOUT_DEFAULT
specifier|public
specifier|static
specifier|final
name|int
name|BKJM_ZK_SESSION_TIMEOUT_DEFAULT
init|=
literal|3000
decl_stmt|;
DECL|field|BKJM_EDIT_INPROGRESS
specifier|private
specifier|static
specifier|final
name|String
name|BKJM_EDIT_INPROGRESS
init|=
literal|"inprogress_"
decl_stmt|;
DECL|field|BKJM_ZK_LEDGERS_AVAILABLE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|BKJM_ZK_LEDGERS_AVAILABLE_PATH
init|=
literal|"dfs.namenode.bookkeeperjournal.zk.availablebookies"
decl_stmt|;
DECL|field|BKJM_ZK_LEDGERS_AVAILABLE_PATH_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|BKJM_ZK_LEDGERS_AVAILABLE_PATH_DEFAULT
init|=
literal|"/ledgers/available"
decl_stmt|;
DECL|field|zkc
specifier|private
name|ZooKeeper
name|zkc
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|bkc
specifier|private
specifier|final
name|BookKeeper
name|bkc
decl_stmt|;
DECL|field|ci
specifier|private
specifier|final
name|CurrentInprogress
name|ci
decl_stmt|;
DECL|field|basePath
specifier|private
specifier|final
name|String
name|basePath
decl_stmt|;
DECL|field|ledgerPath
specifier|private
specifier|final
name|String
name|ledgerPath
decl_stmt|;
DECL|field|versionPath
specifier|private
specifier|final
name|String
name|versionPath
decl_stmt|;
DECL|field|maxTxId
specifier|private
specifier|final
name|MaxTxId
name|maxTxId
decl_stmt|;
DECL|field|ensembleSize
specifier|private
specifier|final
name|int
name|ensembleSize
decl_stmt|;
DECL|field|quorumSize
specifier|private
specifier|final
name|int
name|quorumSize
decl_stmt|;
DECL|field|digestpw
specifier|private
specifier|final
name|String
name|digestpw
decl_stmt|;
DECL|field|zkConnectLatch
specifier|private
specifier|final
name|CountDownLatch
name|zkConnectLatch
decl_stmt|;
DECL|field|nsInfo
specifier|private
specifier|final
name|NamespaceInfo
name|nsInfo
decl_stmt|;
DECL|field|initialized
specifier|private
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
DECL|field|currentLedger
specifier|private
name|LedgerHandle
name|currentLedger
init|=
literal|null
decl_stmt|;
comment|/**    * Construct a Bookkeeper journal manager.    */
DECL|method|BookKeeperJournalManager (Configuration conf, URI uri, NamespaceInfo nsInfo)
specifier|public
name|BookKeeperJournalManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|uri
parameter_list|,
name|NamespaceInfo
name|nsInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|nsInfo
operator|=
name|nsInfo
expr_stmt|;
name|String
name|zkConnect
init|=
name|uri
operator|.
name|getAuthority
argument_list|()
operator|.
name|replace
argument_list|(
literal|";"
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|basePath
operator|=
name|uri
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|ensembleSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|BKJM_BOOKKEEPER_ENSEMBLE_SIZE
argument_list|,
name|BKJM_BOOKKEEPER_ENSEMBLE_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|quorumSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|BKJM_BOOKKEEPER_QUORUM_SIZE
argument_list|,
name|BKJM_BOOKKEEPER_QUORUM_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|ledgerPath
operator|=
name|basePath
operator|+
literal|"/ledgers"
expr_stmt|;
name|String
name|maxTxIdPath
init|=
name|basePath
operator|+
literal|"/maxtxid"
decl_stmt|;
name|String
name|currentInprogressNodePath
init|=
name|basePath
operator|+
literal|"/CurrentInprogress"
decl_stmt|;
name|versionPath
operator|=
name|basePath
operator|+
literal|"/version"
expr_stmt|;
name|digestpw
operator|=
name|conf
operator|.
name|get
argument_list|(
name|BKJM_BOOKKEEPER_DIGEST_PW
argument_list|,
name|BKJM_BOOKKEEPER_DIGEST_PW_DEFAULT
argument_list|)
expr_stmt|;
try|try
block|{
name|zkConnectLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|int
name|bkjmZKSessionTimeout
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|BKJM_ZK_SESSION_TIMEOUT
argument_list|,
name|BKJM_ZK_SESSION_TIMEOUT_DEFAULT
argument_list|)
decl_stmt|;
name|zkc
operator|=
operator|new
name|ZooKeeper
argument_list|(
name|zkConnect
argument_list|,
name|bkjmZKSessionTimeout
argument_list|,
operator|new
name|ZkConnectionWatcher
argument_list|()
argument_list|)
expr_stmt|;
comment|// Configured zk session timeout + some extra grace period (here
comment|// BKJM_ZK_SESSION_TIMEOUT_DEFAULT used as grace period)
name|int
name|zkConnectionLatchTimeout
init|=
name|bkjmZKSessionTimeout
operator|+
name|BKJM_ZK_SESSION_TIMEOUT_DEFAULT
decl_stmt|;
if|if
condition|(
operator|!
name|zkConnectLatch
operator|.
name|await
argument_list|(
name|zkConnectionLatchTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error connecting to zookeeper"
argument_list|)
throw|;
block|}
name|prepareBookKeeperEnv
argument_list|()
expr_stmt|;
name|bkc
operator|=
operator|new
name|BookKeeper
argument_list|(
operator|new
name|ClientConfiguration
argument_list|()
argument_list|,
name|zkc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error initializing zk"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted while initializing bk journal manager"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
name|ci
operator|=
operator|new
name|CurrentInprogress
argument_list|(
name|zkc
argument_list|,
name|currentInprogressNodePath
argument_list|)
expr_stmt|;
name|maxTxId
operator|=
operator|new
name|MaxTxId
argument_list|(
name|zkc
argument_list|,
name|maxTxIdPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Pre-creating bookkeeper metadata path in zookeeper.    */
DECL|method|prepareBookKeeperEnv ()
specifier|private
name|void
name|prepareBookKeeperEnv
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create bookie available path in zookeeper if it doesn't exists
specifier|final
name|String
name|zkAvailablePath
init|=
name|conf
operator|.
name|get
argument_list|(
name|BKJM_ZK_LEDGERS_AVAILABLE_PATH
argument_list|,
name|BKJM_ZK_LEDGERS_AVAILABLE_PATH_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|zkPathLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|success
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|StringCallback
name|callback
init|=
operator|new
name|StringCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|processResult
parameter_list|(
name|int
name|rc
parameter_list|,
name|String
name|path
parameter_list|,
name|Object
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|KeeperException
operator|.
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
operator|==
name|rc
operator|||
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
operator|.
name|intValue
argument_list|()
operator|==
name|rc
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully created bookie available path : "
operator|+
name|zkAvailablePath
argument_list|)
expr_stmt|;
name|success
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|KeeperException
operator|.
name|Code
name|code
init|=
name|KeeperException
operator|.
name|Code
operator|.
name|get
argument_list|(
name|rc
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Error : "
operator|+
name|KeeperException
operator|.
name|create
argument_list|(
name|code
argument_list|,
name|path
argument_list|)
operator|.
name|getMessage
argument_list|()
operator|+
literal|", failed to create bookie available path : "
operator|+
name|zkAvailablePath
argument_list|)
expr_stmt|;
block|}
name|zkPathLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ZkUtils
operator|.
name|asyncCreateFullPathOptimistic
argument_list|(
name|zkc
argument_list|,
name|zkAvailablePath
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
name|callback
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|zkPathLatch
operator|.
name|await
argument_list|(
name|zkc
operator|.
name|getSessionTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|||
operator|!
name|success
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't create bookie available path :"
operator|+
name|zkAvailablePath
operator|+
literal|", timed out "
operator|+
name|zkc
operator|.
name|getSessionTimeout
argument_list|()
operator|+
literal|" millis"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted when creating the bookie available path : "
operator|+
name|zkAvailablePath
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|format (NamespaceInfo ns)
specifier|public
name|void
name|format
parameter_list|(
name|NamespaceInfo
name|ns
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// delete old info
name|Stat
name|baseStat
init|=
literal|null
decl_stmt|;
name|Stat
name|ledgerStat
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|baseStat
operator|=
name|zkc
operator|.
name|exists
argument_list|(
name|basePath
argument_list|,
literal|false
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|ledgerStat
operator|=
name|zkc
operator|.
name|exists
argument_list|(
name|ledgerPath
argument_list|,
literal|false
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|EditLogLedgerMetadata
name|l
range|:
name|getLedgerList
argument_list|(
literal|true
argument_list|)
control|)
block|{
try|try
block|{
name|bkc
operator|.
name|deleteLedger
argument_list|(
name|l
operator|.
name|getLedgerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BKException
operator|.
name|BKNoSuchLedgerExistsException
name|bke
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ledger "
operator|+
name|l
operator|.
name|getLedgerId
argument_list|()
operator|+
literal|" does not exist;"
operator|+
literal|" Cannot delete."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ZKUtil
operator|.
name|deleteRecursive
argument_list|(
name|zkc
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
block|}
comment|// should be clean now.
name|zkc
operator|.
name|create
argument_list|(
name|basePath
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|VersionProto
operator|.
name|Builder
name|builder
init|=
name|VersionProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNamespaceInfo
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|ns
argument_list|)
argument_list|)
operator|.
name|setLayoutVersion
argument_list|(
name|BKJM_LAYOUT_VERSION
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|TextFormat
operator|.
name|printToString
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|zkc
operator|.
name|create
argument_list|(
name|versionPath
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|zkc
operator|.
name|create
argument_list|(
name|ledgerPath
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error accessing zookeeper to format"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error accessing zookeeper to format"
argument_list|,
name|ke
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted during format"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|BKException
name|bke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error cleaning up ledgers during format"
argument_list|,
name|bke
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|hasSomeData ()
specifier|public
name|boolean
name|hasSomeData
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|zkc
operator|.
name|exists
argument_list|(
name|basePath
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't contact zookeeper"
argument_list|,
name|ke
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted while checking for data"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
DECL|method|checkEnv ()
specifier|synchronized
specifier|private
name|void
name|checkEnv
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
try|try
block|{
name|Stat
name|versionStat
init|=
name|zkc
operator|.
name|exists
argument_list|(
name|versionPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionStat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Environment not initialized. "
operator|+
literal|"Have you forgotten to format?"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|d
init|=
name|zkc
operator|.
name|getData
argument_list|(
name|versionPath
argument_list|,
literal|false
argument_list|,
name|versionStat
argument_list|)
decl_stmt|;
name|VersionProto
operator|.
name|Builder
name|builder
init|=
name|VersionProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|TextFormat
operator|.
name|merge
argument_list|(
operator|new
name|String
argument_list|(
name|d
argument_list|,
name|UTF_8
argument_list|)
argument_list|,
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|builder
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid/Incomplete data in znode"
argument_list|)
throw|;
block|}
name|VersionProto
name|vp
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// There's only one version at the moment
assert|assert
name|vp
operator|.
name|getLayoutVersion
argument_list|()
operator|==
name|BKJM_LAYOUT_VERSION
assert|;
name|NamespaceInfo
name|readns
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|vp
operator|.
name|getNamespaceInfo
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsInfo
operator|.
name|getNamespaceID
argument_list|()
operator|!=
name|readns
operator|.
name|getNamespaceID
argument_list|()
operator|||
operator|!
name|nsInfo
operator|.
name|clusterID
operator|.
name|equals
argument_list|(
name|readns
operator|.
name|getClusterID
argument_list|()
argument_list|)
operator|||
operator|!
name|nsInfo
operator|.
name|getBlockPoolID
argument_list|()
operator|.
name|equals
argument_list|(
name|readns
operator|.
name|getBlockPoolID
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|err
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Environment mismatch. Running process %s"
operator|+
literal|", stored in ZK %s"
argument_list|,
name|nsInfo
argument_list|,
name|readns
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|err
argument_list|)
throw|;
block|}
name|ci
operator|.
name|init
argument_list|()
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot access ZooKeeper"
argument_list|,
name|ke
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted while checking environment"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Start a new log segment in a BookKeeper ledger.    * First ensure that we have the write lock for this journal.    * Then create a ledger and stream based on that ledger.    * The ledger id is written to the inprogress znode, so that in the    * case of a crash, a recovery process can find the ledger we were writing    * to when we crashed.    * @param txId First transaction id to be written to the stream    */
annotation|@
name|Override
DECL|method|startLogSegment (long txId, int layoutVersion)
specifier|public
name|EditLogOutputStream
name|startLogSegment
parameter_list|(
name|long
name|txId
parameter_list|,
name|int
name|layoutVersion
parameter_list|)
throws|throws
name|IOException
block|{
name|checkEnv
argument_list|()
expr_stmt|;
if|if
condition|(
name|txId
operator|<=
name|maxTxId
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"We've already seen "
operator|+
name|txId
operator|+
literal|". A new stream cannot be created with it"
argument_list|)
throw|;
block|}
try|try
block|{
name|String
name|existingInprogressNode
init|=
name|ci
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|existingInprogressNode
operator|&&
name|zkc
operator|.
name|exists
argument_list|(
name|existingInprogressNode
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Inprogress node already exists"
argument_list|)
throw|;
block|}
if|if
condition|(
name|currentLedger
operator|!=
literal|null
condition|)
block|{
comment|// bookkeeper errored on last stream, clean up ledger
name|currentLedger
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|currentLedger
operator|=
name|bkc
operator|.
name|createLedger
argument_list|(
name|ensembleSize
argument_list|,
name|quorumSize
argument_list|,
name|BookKeeper
operator|.
name|DigestType
operator|.
name|MAC
argument_list|,
name|digestpw
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BKException
name|bke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error creating ledger"
argument_list|,
name|bke
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error in zookeeper while creating ledger"
argument_list|,
name|ke
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted creating ledger"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
try|try
block|{
name|String
name|znodePath
init|=
name|inprogressZNode
argument_list|(
name|txId
argument_list|)
decl_stmt|;
name|EditLogLedgerMetadata
name|l
init|=
operator|new
name|EditLogLedgerMetadata
argument_list|(
name|znodePath
argument_list|,
name|layoutVersion
argument_list|,
name|currentLedger
operator|.
name|getId
argument_list|()
argument_list|,
name|txId
argument_list|)
decl_stmt|;
comment|/* Write the ledger metadata out to the inprogress ledger znode        * This can fail if for some reason our write lock has        * expired (@see WriteLock) and another process has managed to        * create the inprogress znode.        * In this case, throw an exception. We don't want to continue        * as this would lead to a split brain situation.        */
name|l
operator|.
name|write
argument_list|(
name|zkc
argument_list|,
name|znodePath
argument_list|)
expr_stmt|;
name|maxTxId
operator|.
name|store
argument_list|(
name|txId
argument_list|)
expr_stmt|;
name|ci
operator|.
name|update
argument_list|(
name|znodePath
argument_list|)
expr_stmt|;
return|return
operator|new
name|BookKeeperEditLogOutputStream
argument_list|(
name|conf
argument_list|,
name|currentLedger
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|cleanupLedger
argument_list|(
name|currentLedger
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error storing ledger metadata"
argument_list|,
name|ke
argument_list|)
throw|;
block|}
block|}
DECL|method|cleanupLedger (LedgerHandle lh)
specifier|private
name|void
name|cleanupLedger
parameter_list|(
name|LedgerHandle
name|lh
parameter_list|)
block|{
try|try
block|{
name|long
name|id
init|=
name|currentLedger
operator|.
name|getId
argument_list|()
decl_stmt|;
name|currentLedger
operator|.
name|close
argument_list|()
expr_stmt|;
name|bkc
operator|.
name|deleteLedger
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BKException
name|bke
parameter_list|)
block|{
comment|//log& ignore, an IOException will be thrown soon
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing ledger"
argument_list|,
name|bke
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while closing ledger"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Finalize a log segment. If the journal manager is currently    * writing to a ledger, ensure that this is the ledger of the log segment    * being finalized.    *    * Otherwise this is the recovery case. In the recovery case, ensure that    * the firstTxId of the ledger matches firstTxId for the segment we are    * trying to finalize.    */
annotation|@
name|Override
DECL|method|finalizeLogSegment (long firstTxId, long lastTxId)
specifier|public
name|void
name|finalizeLogSegment
parameter_list|(
name|long
name|firstTxId
parameter_list|,
name|long
name|lastTxId
parameter_list|)
throws|throws
name|IOException
block|{
name|checkEnv
argument_list|()
expr_stmt|;
name|String
name|inprogressPath
init|=
name|inprogressZNode
argument_list|(
name|firstTxId
argument_list|)
decl_stmt|;
try|try
block|{
name|Stat
name|inprogressStat
init|=
name|zkc
operator|.
name|exists
argument_list|(
name|inprogressPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|inprogressStat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Inprogress znode "
operator|+
name|inprogressPath
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
name|EditLogLedgerMetadata
name|l
init|=
name|EditLogLedgerMetadata
operator|.
name|read
argument_list|(
name|zkc
argument_list|,
name|inprogressPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentLedger
operator|!=
literal|null
condition|)
block|{
comment|// normal, non-recovery case
if|if
condition|(
name|l
operator|.
name|getLedgerId
argument_list|()
operator|==
name|currentLedger
operator|.
name|getId
argument_list|()
condition|)
block|{
try|try
block|{
name|currentLedger
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BKException
name|bke
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing current ledger"
argument_list|,
name|bke
argument_list|)
expr_stmt|;
block|}
name|currentLedger
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Active ledger has different ID to inprogress. "
operator|+
name|l
operator|.
name|getLedgerId
argument_list|()
operator|+
literal|" found, "
operator|+
name|currentLedger
operator|.
name|getId
argument_list|()
operator|+
literal|" expected"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|l
operator|.
name|getFirstTxId
argument_list|()
operator|!=
name|firstTxId
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Transaction id not as expected, "
operator|+
name|l
operator|.
name|getFirstTxId
argument_list|()
operator|+
literal|" found, "
operator|+
name|firstTxId
operator|+
literal|" expected"
argument_list|)
throw|;
block|}
name|l
operator|.
name|finalizeLedger
argument_list|(
name|lastTxId
argument_list|)
expr_stmt|;
name|String
name|finalisedPath
init|=
name|finalizedLedgerZNode
argument_list|(
name|firstTxId
argument_list|,
name|lastTxId
argument_list|)
decl_stmt|;
try|try
block|{
name|l
operator|.
name|write
argument_list|(
name|zkc
argument_list|,
name|finalisedPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|nee
parameter_list|)
block|{
if|if
condition|(
operator|!
name|l
operator|.
name|verify
argument_list|(
name|zkc
argument_list|,
name|finalisedPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Node "
operator|+
name|finalisedPath
operator|+
literal|" already exists"
operator|+
literal|" but data doesn't match"
argument_list|)
throw|;
block|}
block|}
name|maxTxId
operator|.
name|store
argument_list|(
name|lastTxId
argument_list|)
expr_stmt|;
name|zkc
operator|.
name|delete
argument_list|(
name|inprogressPath
argument_list|,
name|inprogressStat
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|inprogressPathFromCI
init|=
name|ci
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|inprogressPath
operator|.
name|equals
argument_list|(
name|inprogressPathFromCI
argument_list|)
condition|)
block|{
name|ci
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error finalising ledger"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error finalising ledger"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|selectInputStreams (Collection<EditLogInputStream> streams, long fromTxId, boolean inProgressOk)
specifier|public
name|void
name|selectInputStreams
parameter_list|(
name|Collection
argument_list|<
name|EditLogInputStream
argument_list|>
name|streams
parameter_list|,
name|long
name|fromTxId
parameter_list|,
name|boolean
name|inProgressOk
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|EditLogLedgerMetadata
argument_list|>
name|currentLedgerList
init|=
name|getLedgerList
argument_list|(
name|fromTxId
argument_list|,
name|inProgressOk
argument_list|)
decl_stmt|;
try|try
block|{
name|BookKeeperEditLogInputStream
name|elis
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EditLogLedgerMetadata
name|l
range|:
name|currentLedgerList
control|)
block|{
name|long
name|lastTxId
init|=
name|l
operator|.
name|getLastTxId
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|isInProgress
argument_list|()
condition|)
block|{
name|lastTxId
operator|=
name|recoverLastTxId
argument_list|(
name|l
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Check once again, required in case of InProgress and is case of any
comment|// gap.
if|if
condition|(
name|fromTxId
operator|>=
name|l
operator|.
name|getFirstTxId
argument_list|()
operator|&&
name|fromTxId
operator|<=
name|lastTxId
condition|)
block|{
name|LedgerHandle
name|h
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|isInProgress
argument_list|()
condition|)
block|{
comment|// we don't want to fence the current journal
name|h
operator|=
name|bkc
operator|.
name|openLedgerNoRecovery
argument_list|(
name|l
operator|.
name|getLedgerId
argument_list|()
argument_list|,
name|BookKeeper
operator|.
name|DigestType
operator|.
name|MAC
argument_list|,
name|digestpw
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|h
operator|=
name|bkc
operator|.
name|openLedger
argument_list|(
name|l
operator|.
name|getLedgerId
argument_list|()
argument_list|,
name|BookKeeper
operator|.
name|DigestType
operator|.
name|MAC
argument_list|,
name|digestpw
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|elis
operator|=
operator|new
name|BookKeeperEditLogInputStream
argument_list|(
name|h
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|elis
operator|.
name|skipTo
argument_list|(
name|fromTxId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If mismatches then there might be some gap, so we should not check
comment|// further.
return|return;
block|}
name|streams
operator|.
name|add
argument_list|(
name|elis
argument_list|)
expr_stmt|;
if|if
condition|(
name|elis
operator|.
name|getLastTxId
argument_list|()
operator|==
name|HdfsConstants
operator|.
name|INVALID_TXID
condition|)
block|{
return|return;
block|}
name|fromTxId
operator|=
name|elis
operator|.
name|getLastTxId
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|BKException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not open ledger for "
operator|+
name|fromTxId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted opening ledger for "
operator|+
name|fromTxId
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
DECL|method|getNumberOfTransactions (long fromTxId, boolean inProgressOk)
name|long
name|getNumberOfTransactions
parameter_list|(
name|long
name|fromTxId
parameter_list|,
name|boolean
name|inProgressOk
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|count
init|=
literal|0
decl_stmt|;
name|long
name|expectedStart
init|=
literal|0
decl_stmt|;
for|for
control|(
name|EditLogLedgerMetadata
name|l
range|:
name|getLedgerList
argument_list|(
name|inProgressOk
argument_list|)
control|)
block|{
name|long
name|lastTxId
init|=
name|l
operator|.
name|getLastTxId
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|isInProgress
argument_list|()
condition|)
block|{
name|lastTxId
operator|=
name|recoverLastTxId
argument_list|(
name|l
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastTxId
operator|==
name|HdfsConstants
operator|.
name|INVALID_TXID
condition|)
block|{
break|break;
block|}
block|}
assert|assert
name|lastTxId
operator|>=
name|l
operator|.
name|getFirstTxId
argument_list|()
assert|;
if|if
condition|(
name|lastTxId
operator|<
name|fromTxId
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|l
operator|.
name|getFirstTxId
argument_list|()
operator|<=
name|fromTxId
operator|&&
name|lastTxId
operator|>=
name|fromTxId
condition|)
block|{
comment|// we can start in the middle of a segment
name|count
operator|=
operator|(
name|lastTxId
operator|-
name|l
operator|.
name|getFirstTxId
argument_list|()
operator|)
operator|+
literal|1
expr_stmt|;
name|expectedStart
operator|=
name|lastTxId
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|expectedStart
operator|!=
name|l
operator|.
name|getFirstTxId
argument_list|()
condition|)
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|CorruptionException
argument_list|(
literal|"StartTxId "
operator|+
name|l
operator|.
name|getFirstTxId
argument_list|()
operator|+
literal|" is not as expected "
operator|+
name|expectedStart
operator|+
literal|". Gap in transaction log?"
argument_list|)
throw|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|count
operator|+=
operator|(
name|lastTxId
operator|-
name|l
operator|.
name|getFirstTxId
argument_list|()
operator|)
operator|+
literal|1
expr_stmt|;
name|expectedStart
operator|=
name|lastTxId
operator|+
literal|1
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
DECL|method|recoverUnfinalizedSegments ()
specifier|public
name|void
name|recoverUnfinalizedSegments
parameter_list|()
throws|throws
name|IOException
block|{
name|checkEnv
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|zkc
operator|.
name|getChildren
argument_list|(
name|ledgerPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
operator|!
name|child
operator|.
name|startsWith
argument_list|(
name|BKJM_EDIT_INPROGRESS
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|znode
init|=
name|ledgerPath
operator|+
literal|"/"
operator|+
name|child
decl_stmt|;
name|EditLogLedgerMetadata
name|l
init|=
name|EditLogLedgerMetadata
operator|.
name|read
argument_list|(
name|zkc
argument_list|,
name|znode
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|endTxId
init|=
name|recoverLastTxId
argument_list|(
name|l
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|endTxId
operator|==
name|HdfsConstants
operator|.
name|INVALID_TXID
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unrecoverable corruption has occurred in segment "
operator|+
name|l
operator|.
name|toString
argument_list|()
operator|+
literal|" at path "
operator|+
name|znode
operator|+
literal|". Unable to continue recovery."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unrecoverable corruption,"
operator|+
literal|" please check logs."
argument_list|)
throw|;
block|}
name|finalizeLogSegment
argument_list|(
name|l
operator|.
name|getFirstTxId
argument_list|()
argument_list|,
name|endTxId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SegmentEmptyException
name|see
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Inprogress znode "
operator|+
name|child
operator|+
literal|" refers to a ledger which is empty. This occurs when the NN"
operator|+
literal|" crashes after opening a segment, but before writing the"
operator|+
literal|" OP_START_LOG_SEGMENT op. It is safe to delete."
operator|+
literal|" MetaData ["
operator|+
name|l
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
comment|// If the max seen transaction is the same as what would
comment|// have been the first transaction of the failed ledger,
comment|// decrement it, as that transaction never happened and as
comment|// such, is _not_ the last seen
if|if
condition|(
name|maxTxId
operator|.
name|get
argument_list|()
operator|==
name|l
operator|.
name|getFirstTxId
argument_list|()
condition|)
block|{
name|maxTxId
operator|.
name|reset
argument_list|(
name|maxTxId
operator|.
name|get
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|zkc
operator|.
name|delete
argument_list|(
name|znode
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{
comment|// nothing to recover, ignore
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't get list of inprogress segments"
argument_list|,
name|ke
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted getting list of inprogress segments"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|purgeLogsOlderThan (long minTxIdToKeep)
specifier|public
name|void
name|purgeLogsOlderThan
parameter_list|(
name|long
name|minTxIdToKeep
parameter_list|)
throws|throws
name|IOException
block|{
name|checkEnv
argument_list|()
expr_stmt|;
for|for
control|(
name|EditLogLedgerMetadata
name|l
range|:
name|getLedgerList
argument_list|(
literal|false
argument_list|)
control|)
block|{
if|if
condition|(
name|l
operator|.
name|getLastTxId
argument_list|()
operator|<
name|minTxIdToKeep
condition|)
block|{
try|try
block|{
name|Stat
name|stat
init|=
name|zkc
operator|.
name|exists
argument_list|(
name|l
operator|.
name|getZkPath
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|zkc
operator|.
name|delete
argument_list|(
name|l
operator|.
name|getZkPath
argument_list|()
argument_list|,
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|bkc
operator|.
name|deleteLedger
argument_list|(
name|l
operator|.
name|getLedgerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Interrupted while purging "
operator|+
name|l
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BKException
name|bke
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't delete ledger from bookkeeper"
argument_list|,
name|bke
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error deleting ledger entry in zookeeper"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doPreUpgrade ()
specifier|public
name|void
name|doPreUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|doUpgrade (Storage storage)
specifier|public
name|void
name|doUpgrade
parameter_list|(
name|Storage
name|storage
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getJournalCTime ()
specifier|public
name|long
name|getJournalCTime
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|doFinalize ()
specifier|public
name|void
name|doFinalize
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|canRollBack (StorageInfo storage, StorageInfo prevStorage, int targetLayoutVersion)
specifier|public
name|boolean
name|canRollBack
parameter_list|(
name|StorageInfo
name|storage
parameter_list|,
name|StorageInfo
name|prevStorage
parameter_list|,
name|int
name|targetLayoutVersion
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|doRollback ()
specifier|public
name|void
name|doRollback
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|discardSegments (long startTxId)
specifier|public
name|void
name|discardSegments
parameter_list|(
name|long
name|startTxId
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|bkc
operator|.
name|close
argument_list|()
expr_stmt|;
name|zkc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BKException
name|bke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't close bookkeeper client"
argument_list|,
name|bke
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted while closing journal manager"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Set the amount of memory that this stream should use to buffer edits.    * Setting this will only affect future output stream. Streams    * which have currently be created won't be affected.    */
annotation|@
name|Override
DECL|method|setOutputBufferCapacity (int size)
specifier|public
name|void
name|setOutputBufferCapacity
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|conf
operator|.
name|getInt
argument_list|(
name|BKJM_OUTPUT_BUFFER_SIZE
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**    * Find the id of the last edit log transaction writen to a edit log    * ledger.    */
DECL|method|recoverLastTxId (EditLogLedgerMetadata l, boolean fence)
specifier|private
name|long
name|recoverLastTxId
parameter_list|(
name|EditLogLedgerMetadata
name|l
parameter_list|,
name|boolean
name|fence
parameter_list|)
throws|throws
name|IOException
throws|,
name|SegmentEmptyException
block|{
name|LedgerHandle
name|lh
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fence
condition|)
block|{
name|lh
operator|=
name|bkc
operator|.
name|openLedger
argument_list|(
name|l
operator|.
name|getLedgerId
argument_list|()
argument_list|,
name|BookKeeper
operator|.
name|DigestType
operator|.
name|MAC
argument_list|,
name|digestpw
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lh
operator|=
name|bkc
operator|.
name|openLedgerNoRecovery
argument_list|(
name|l
operator|.
name|getLedgerId
argument_list|()
argument_list|,
name|BookKeeper
operator|.
name|DigestType
operator|.
name|MAC
argument_list|,
name|digestpw
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|BKException
name|bke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception opening ledger for "
operator|+
name|l
argument_list|,
name|bke
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted opening ledger for "
operator|+
name|l
argument_list|,
name|ie
argument_list|)
throw|;
block|}
name|BookKeeperEditLogInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|long
name|lastAddConfirmed
init|=
name|lh
operator|.
name|getLastAddConfirmed
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastAddConfirmed
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|SegmentEmptyException
argument_list|()
throw|;
block|}
name|in
operator|=
operator|new
name|BookKeeperEditLogInputStream
argument_list|(
name|lh
argument_list|,
name|l
argument_list|,
name|lastAddConfirmed
argument_list|)
expr_stmt|;
name|long
name|endTxId
init|=
name|HdfsConstants
operator|.
name|INVALID_TXID
decl_stmt|;
name|FSEditLogOp
name|op
init|=
name|in
operator|.
name|readOp
argument_list|()
decl_stmt|;
while|while
condition|(
name|op
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|endTxId
operator|==
name|HdfsConstants
operator|.
name|INVALID_TXID
operator|||
name|op
operator|.
name|getTransactionId
argument_list|()
operator|==
name|endTxId
operator|+
literal|1
condition|)
block|{
name|endTxId
operator|=
name|op
operator|.
name|getTransactionId
argument_list|()
expr_stmt|;
block|}
name|op
operator|=
name|in
operator|.
name|readOp
argument_list|()
expr_stmt|;
block|}
return|return
name|endTxId
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get a list of all segments in the journal.    */
DECL|method|getLedgerList (boolean inProgressOk)
name|List
argument_list|<
name|EditLogLedgerMetadata
argument_list|>
name|getLedgerList
parameter_list|(
name|boolean
name|inProgressOk
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getLedgerList
argument_list|(
operator|-
literal|1
argument_list|,
name|inProgressOk
argument_list|)
return|;
block|}
DECL|method|getLedgerList (long fromTxId, boolean inProgressOk)
specifier|private
name|List
argument_list|<
name|EditLogLedgerMetadata
argument_list|>
name|getLedgerList
parameter_list|(
name|long
name|fromTxId
parameter_list|,
name|boolean
name|inProgressOk
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|EditLogLedgerMetadata
argument_list|>
name|ledgers
init|=
operator|new
name|ArrayList
argument_list|<
name|EditLogLedgerMetadata
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ledgerNames
init|=
name|zkc
operator|.
name|getChildren
argument_list|(
name|ledgerPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ledgerName
range|:
name|ledgerNames
control|)
block|{
if|if
condition|(
operator|!
name|inProgressOk
operator|&&
name|ledgerName
operator|.
name|contains
argument_list|(
name|BKJM_EDIT_INPROGRESS
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|legderMetadataPath
init|=
name|ledgerPath
operator|+
literal|"/"
operator|+
name|ledgerName
decl_stmt|;
try|try
block|{
name|EditLogLedgerMetadata
name|editLogLedgerMetadata
init|=
name|EditLogLedgerMetadata
operator|.
name|read
argument_list|(
name|zkc
argument_list|,
name|legderMetadataPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|editLogLedgerMetadata
operator|.
name|getLastTxId
argument_list|()
operator|!=
name|HdfsConstants
operator|.
name|INVALID_TXID
operator|&&
name|editLogLedgerMetadata
operator|.
name|getLastTxId
argument_list|()
operator|<
name|fromTxId
condition|)
block|{
comment|// exclude already read closed edits, but include inprogress edits
comment|// as this will be handled in caller
continue|continue;
block|}
name|ledgers
operator|.
name|add
argument_list|(
name|editLogLedgerMetadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ZNode: "
operator|+
name|legderMetadataPath
operator|+
literal|" might have finalized and deleted."
operator|+
literal|" So ignoring NoNodeException."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception reading ledger list from zk"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted getting list of ledgers from zk"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|ledgers
argument_list|,
name|EditLogLedgerMetadata
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
return|return
name|ledgers
return|;
block|}
comment|/**    * Get the znode path for a finalize ledger    */
DECL|method|finalizedLedgerZNode (long startTxId, long endTxId)
name|String
name|finalizedLedgerZNode
parameter_list|(
name|long
name|startTxId
parameter_list|,
name|long
name|endTxId
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s/edits_%018d_%018d"
argument_list|,
name|ledgerPath
argument_list|,
name|startTxId
argument_list|,
name|endTxId
argument_list|)
return|;
block|}
comment|/**    * Get the znode path for the inprogressZNode    */
DECL|method|inprogressZNode (long startTxid)
name|String
name|inprogressZNode
parameter_list|(
name|long
name|startTxid
parameter_list|)
block|{
return|return
name|ledgerPath
operator|+
literal|"/inprogress_"
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|startTxid
argument_list|,
literal|16
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setZooKeeper (ZooKeeper zk)
name|void
name|setZooKeeper
parameter_list|(
name|ZooKeeper
name|zk
parameter_list|)
block|{
name|this
operator|.
name|zkc
operator|=
name|zk
expr_stmt|;
block|}
comment|/**    * Simple watcher to notify when zookeeper has connected    */
DECL|class|ZkConnectionWatcher
specifier|private
class|class
name|ZkConnectionWatcher
implements|implements
name|Watcher
block|{
DECL|method|process (WatchedEvent event)
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|Event
operator|.
name|KeeperState
operator|.
name|SyncConnected
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
name|zkConnectLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|SegmentEmptyException
specifier|private
specifier|static
class|class
name|SegmentEmptyException
extends|extends
name|IOException
block|{   }
block|}
end_class

end_unit

