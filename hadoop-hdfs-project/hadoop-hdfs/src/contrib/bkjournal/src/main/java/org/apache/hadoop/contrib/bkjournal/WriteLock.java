begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.bkjournal
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|bkjournal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
operator|.
name|Event
operator|.
name|KeeperState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Distributed lock, using ZooKeeper.  *  * The lock is vulnerable to timing issues. For example, the process could  * encounter a really long GC cycle between acquiring the lock, and writing to  * a ledger. This could have timed out the lock, and another process could have  * acquired the lock and started writing to bookkeeper. Therefore other  * mechanisms are required to ensure correctness (i.e. Fencing).  */
end_comment

begin_class
DECL|class|WriteLock
class|class
name|WriteLock
implements|implements
name|Watcher
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|WriteLock
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|zkc
specifier|private
specifier|final
name|ZooKeeper
name|zkc
decl_stmt|;
DECL|field|lockpath
specifier|private
specifier|final
name|String
name|lockpath
decl_stmt|;
DECL|field|lockCount
specifier|private
name|AtomicInteger
name|lockCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|myznode
specifier|private
name|String
name|myznode
init|=
literal|null
decl_stmt|;
DECL|method|WriteLock (ZooKeeper zkc, String lockpath)
name|WriteLock
parameter_list|(
name|ZooKeeper
name|zkc
parameter_list|,
name|String
name|lockpath
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|lockpath
operator|=
name|lockpath
expr_stmt|;
name|this
operator|.
name|zkc
operator|=
name|zkc
expr_stmt|;
try|try
block|{
if|if
condition|(
name|zkc
operator|.
name|exists
argument_list|(
name|lockpath
argument_list|,
literal|false
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|localString
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|zkc
operator|.
name|create
argument_list|(
name|lockpath
argument_list|,
name|localString
operator|.
name|getBytes
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception accessing Zookeeper"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|acquire ()
name|void
name|acquire
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|lockCount
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|lockCount
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|lockCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return;
block|}
name|myznode
operator|=
name|zkc
operator|.
name|create
argument_list|(
name|lockpath
operator|+
literal|"/lock-"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL_SEQUENTIAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Acquiring lock, trying "
operator|+
name|myznode
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|zkc
operator|.
name|getChildren
argument_list|(
name|lockpath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|nodes
argument_list|,
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|o1
parameter_list|,
name|String
name|o2
parameter_list|)
block|{
name|Integer
name|l1
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|o1
operator|.
name|replace
argument_list|(
literal|"lock-"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|Integer
name|l2
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|o2
operator|.
name|replace
argument_list|(
literal|"lock-"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|l1
operator|-
name|l2
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|lockpath
operator|+
literal|"/"
operator|+
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|equals
argument_list|(
name|myznode
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Lock acquired - "
operator|+
name|myznode
argument_list|)
expr_stmt|;
block|}
name|lockCount
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|zkc
operator|.
name|exists
argument_list|(
name|myznode
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to acquire lock with "
operator|+
name|myznode
operator|+
literal|", "
operator|+
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|" already has it"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not acquire lock"
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception accessing Zookeeper"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception accessing Zookeeper"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|int
name|ret
init|=
name|lockCount
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
name|lockCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
continue|continue;
comment|// try again;
block|}
else|else
block|{
return|return;
block|}
block|}
block|}
block|}
DECL|method|release ()
name|void
name|release
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|lockCount
operator|.
name|decrementAndGet
argument_list|()
operator|<=
literal|0
condition|)
block|{
if|if
condition|(
name|lockCount
operator|.
name|get
argument_list|()
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unbalanced lock handling somewhere, lockCount down to "
operator|+
name|lockCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|lockCount
operator|.
name|get
argument_list|()
operator|<=
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"releasing lock "
operator|+
name|myznode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myznode
operator|!=
literal|null
condition|)
block|{
name|zkc
operator|.
name|delete
argument_list|(
name|myznode
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|myznode
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception accessing Zookeeper"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|checkWriteLock ()
specifier|public
name|void
name|checkWriteLock
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|haveLock
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Lost writer lock"
argument_list|)
throw|;
block|}
block|}
DECL|method|haveLock ()
name|boolean
name|haveLock
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|lockCount
operator|.
name|get
argument_list|()
operator|>
literal|0
return|;
block|}
DECL|method|process (WatchedEvent event)
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getState
argument_list|()
operator|==
name|KeeperState
operator|.
name|Disconnected
operator|||
name|event
operator|.
name|getState
argument_list|()
operator|==
name|KeeperState
operator|.
name|Expired
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Lost zookeeper session, lost lock "
argument_list|)
expr_stmt|;
name|lockCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// reapply the watch
synchronized|synchronized
init|(
name|this
init|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Zookeeper event "
operator|+
name|event
operator|+
literal|" received, reapplying watch to "
operator|+
name|myznode
argument_list|)
expr_stmt|;
if|if
condition|(
name|myznode
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|zkc
operator|.
name|exists
argument_list|(
name|myznode
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not set watch on lock, releasing"
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|release
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not release Zk lock"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

