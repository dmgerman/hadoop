begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.bkjournal
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|bkjournal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bookkeeper
operator|.
name|proto
operator|.
name|BookieServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeLayoutVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestBookKeeperSpeculativeRead
specifier|public
class|class
name|TestBookKeeperSpeculativeRead
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestBookKeeperSpeculativeRead
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|zkc
specifier|private
name|ZooKeeper
name|zkc
decl_stmt|;
DECL|field|bkutil
specifier|private
specifier|static
name|BKJMUtil
name|bkutil
decl_stmt|;
DECL|field|numLocalBookies
specifier|private
specifier|static
name|int
name|numLocalBookies
init|=
literal|1
decl_stmt|;
DECL|field|bks
specifier|private
specifier|static
name|List
argument_list|<
name|BookieServer
argument_list|>
name|bks
init|=
operator|new
name|ArrayList
argument_list|<
name|BookieServer
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupBookkeeper ()
specifier|public
specifier|static
name|void
name|setupBookkeeper
parameter_list|()
throws|throws
name|Exception
block|{
name|bkutil
operator|=
operator|new
name|BKJMUtil
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bkutil
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardownBookkeeper ()
specifier|public
specifier|static
name|void
name|teardownBookkeeper
parameter_list|()
throws|throws
name|Exception
block|{
name|bkutil
operator|.
name|teardown
argument_list|()
expr_stmt|;
for|for
control|(
name|BookieServer
name|bk
range|:
name|bks
control|)
block|{
name|bk
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|zkc
operator|=
name|BKJMUtil
operator|.
name|connectZooKeeper
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|zkc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|newNSInfo ()
specifier|private
name|NamespaceInfo
name|newNSInfo
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
return|return
operator|new
name|NamespaceInfo
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
argument_list|,
literal|"testCluster"
argument_list|,
literal|"TestBPID"
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Test speculative read feature supported by bookkeeper. Keep one bookie    * alive and sleep all the other bookies. Non spec client will hang for long    * time to read the entries from the bookkeeper.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testSpeculativeRead ()
specifier|public
name|void
name|testSpeculativeRead
parameter_list|()
throws|throws
name|Exception
block|{
comment|// starting 9 more servers
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|bks
operator|.
name|add
argument_list|(
name|bkutil
operator|.
name|newBookie
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|NamespaceInfo
name|nsi
init|=
name|newNSInfo
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|int
name|ensembleSize
init|=
name|numLocalBookies
operator|+
literal|9
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|BookKeeperJournalManager
operator|.
name|BKJM_BOOKKEEPER_ENSEMBLE_SIZE
argument_list|,
name|ensembleSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|BookKeeperJournalManager
operator|.
name|BKJM_BOOKKEEPER_QUORUM_SIZE
argument_list|,
name|ensembleSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|BookKeeperJournalManager
operator|.
name|BKJM_BOOKKEEPER_SPECULATIVE_READ_TIMEOUT_MS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// sets 60 minute
name|conf
operator|.
name|setInt
argument_list|(
name|BookKeeperJournalManager
operator|.
name|BKJM_BOOKKEEPER_READ_ENTRY_TIMEOUT_SEC
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|BookKeeperJournalManager
name|bkjm
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|BKJMUtil
operator|.
name|createJournalURI
argument_list|(
literal|"/hdfsjournal-specread"
argument_list|)
argument_list|,
name|nsi
argument_list|)
decl_stmt|;
name|bkjm
operator|.
name|format
argument_list|(
name|nsi
argument_list|)
expr_stmt|;
specifier|final
name|long
name|numTransactions
init|=
literal|1000
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|,
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numTransactions
condition|;
name|i
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|bkjm
operator|.
name|finalizeLogSegment
argument_list|(
literal|1
argument_list|,
name|numTransactions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EditLogInputStream
argument_list|>
name|in
init|=
operator|new
name|ArrayList
argument_list|<
name|EditLogInputStream
argument_list|>
argument_list|()
decl_stmt|;
name|bkjm
operator|.
name|selectInputStreams
argument_list|(
name|in
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// sleep 9 bk servers. Now only one server is running and responding to the
comment|// clients
name|CountDownLatch
name|sleepLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|BookieServer
name|bookie
range|:
name|bks
control|)
block|{
name|sleepBookie
argument_list|(
name|sleepLatch
argument_list|,
name|bookie
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertEquals
argument_list|(
name|numTransactions
argument_list|,
name|FSEditLogTestUtil
operator|.
name|countTransactionsInStream
argument_list|(
name|in
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|sleepLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|bkjm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Sleep a bookie until I count down the latch    *    * @param latch    *          latch to wait on    * @param bookie    *          bookie server    * @throws Exception    */
DECL|method|sleepBookie (final CountDownLatch latch, final BookieServer bookie)
specifier|private
name|void
name|sleepBookie
parameter_list|(
specifier|final
name|CountDownLatch
name|latch
parameter_list|,
specifier|final
name|BookieServer
name|bookie
parameter_list|)
throws|throws
name|Exception
block|{
name|Thread
name|sleeper
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|bookie
operator|.
name|suspendProcessing
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|bookie
operator|.
name|resumeProcessing
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error suspending bookie"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|sleeper
operator|.
name|setName
argument_list|(
literal|"BookieServerSleeper-"
operator|+
name|bookie
operator|.
name|getBookie
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|sleeper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

