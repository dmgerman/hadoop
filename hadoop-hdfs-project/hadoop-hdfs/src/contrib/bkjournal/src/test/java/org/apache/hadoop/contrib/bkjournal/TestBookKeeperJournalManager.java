begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.bkjournal
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|bkjournal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|JournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bookkeeper
operator|.
name|proto
operator|.
name|BookieServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|TestBookKeeperJournalManager
specifier|public
class|class
name|TestBookKeeperJournalManager
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestBookKeeperJournalManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_SEGMENT_SIZE
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_SEGMENT_SIZE
init|=
literal|1000
decl_stmt|;
DECL|field|conf
specifier|protected
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|zkc
specifier|private
name|ZooKeeper
name|zkc
decl_stmt|;
DECL|field|bkutil
specifier|private
specifier|static
name|BKJMUtil
name|bkutil
decl_stmt|;
DECL|field|numBookies
specifier|static
name|int
name|numBookies
init|=
literal|3
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupBookkeeper ()
specifier|public
specifier|static
name|void
name|setupBookkeeper
parameter_list|()
throws|throws
name|Exception
block|{
name|bkutil
operator|=
operator|new
name|BKJMUtil
argument_list|(
name|numBookies
argument_list|)
expr_stmt|;
name|bkutil
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardownBookkeeper ()
specifier|public
specifier|static
name|void
name|teardownBookkeeper
parameter_list|()
throws|throws
name|Exception
block|{
name|bkutil
operator|.
name|teardown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|zkc
operator|=
name|BKJMUtil
operator|.
name|connectZooKeeper
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|zkc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleWrite ()
specifier|public
name|void
name|testSimpleWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|BookKeeperJournalManager
name|bkjm
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|BKJMUtil
operator|.
name|createJournalURI
argument_list|(
literal|"/hdfsjournal-simplewrite"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|txid
init|=
literal|1
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|bkjm
operator|.
name|finalizeLogSegment
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|String
name|zkpath
init|=
name|bkjm
operator|.
name|finalizedLedgerZNode
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|zkc
operator|.
name|exists
argument_list|(
name|zkpath
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|zkc
operator|.
name|exists
argument_list|(
name|bkjm
operator|.
name|inprogressZNode
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumberOfTransactions ()
specifier|public
name|void
name|testNumberOfTransactions
parameter_list|()
throws|throws
name|Exception
block|{
name|BookKeeperJournalManager
name|bkjm
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|BKJMUtil
operator|.
name|createJournalURI
argument_list|(
literal|"/hdfsjournal-txncount"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|txid
init|=
literal|1
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|bkjm
operator|.
name|finalizeLogSegment
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|long
name|numTrans
init|=
name|bkjm
operator|.
name|getNumberOfTransactions
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|numTrans
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumberOfTransactionsWithGaps ()
specifier|public
name|void
name|testNumberOfTransactionsWithGaps
parameter_list|()
throws|throws
name|Exception
block|{
name|BookKeeperJournalManager
name|bkjm
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|BKJMUtil
operator|.
name|createJournalURI
argument_list|(
literal|"/hdfsjournal-gaps"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|txid
init|=
literal|1
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|long
name|start
init|=
name|txid
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|start
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|DEFAULT_SEGMENT_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|txid
operator|++
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|bkjm
operator|.
name|finalizeLogSegment
argument_list|(
name|start
argument_list|,
name|txid
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|zkc
operator|.
name|exists
argument_list|(
name|bkjm
operator|.
name|finalizedLedgerZNode
argument_list|(
name|start
argument_list|,
name|txid
operator|-
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|zkc
operator|.
name|delete
argument_list|(
name|bkjm
operator|.
name|finalizedLedgerZNode
argument_list|(
name|DEFAULT_SEGMENT_SIZE
operator|+
literal|1
argument_list|,
name|DEFAULT_SEGMENT_SIZE
operator|*
literal|2
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|long
name|numTrans
init|=
name|bkjm
operator|.
name|getNumberOfTransactions
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_SEGMENT_SIZE
argument_list|,
name|numTrans
argument_list|)
expr_stmt|;
try|try
block|{
name|numTrans
operator|=
name|bkjm
operator|.
name|getNumberOfTransactions
argument_list|(
name|DEFAULT_SEGMENT_SIZE
operator|+
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown corruption exception by this point"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JournalManager
operator|.
name|CorruptionException
name|ce
parameter_list|)
block|{
comment|// if we get here, everything is going good
block|}
name|numTrans
operator|=
name|bkjm
operator|.
name|getNumberOfTransactions
argument_list|(
operator|(
name|DEFAULT_SEGMENT_SIZE
operator|*
literal|2
operator|)
operator|+
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_SEGMENT_SIZE
argument_list|,
name|numTrans
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumberOfTransactionsWithInprogressAtEnd ()
specifier|public
name|void
name|testNumberOfTransactionsWithInprogressAtEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|BookKeeperJournalManager
name|bkjm
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|BKJMUtil
operator|.
name|createJournalURI
argument_list|(
literal|"/hdfsjournal-inprogressAtEnd"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|txid
init|=
literal|1
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|long
name|start
init|=
name|txid
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|start
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|DEFAULT_SEGMENT_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|txid
operator|++
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|bkjm
operator|.
name|finalizeLogSegment
argument_list|(
name|start
argument_list|,
operator|(
name|txid
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|zkc
operator|.
name|exists
argument_list|(
name|bkjm
operator|.
name|finalizedLedgerZNode
argument_list|(
name|start
argument_list|,
operator|(
name|txid
operator|-
literal|1
operator|)
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|start
init|=
name|txid
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|start
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|DEFAULT_SEGMENT_SIZE
operator|/
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|txid
operator|++
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|abort
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|numTrans
init|=
name|bkjm
operator|.
name|getNumberOfTransactions
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|txid
operator|-
literal|1
operator|)
argument_list|,
name|numTrans
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a bkjm namespace, write a journal from txid 1, close stream.    * Try to create a new journal from txid 1. Should throw an exception.    */
annotation|@
name|Test
DECL|method|testWriteRestartFrom1 ()
specifier|public
name|void
name|testWriteRestartFrom1
parameter_list|()
throws|throws
name|Exception
block|{
name|BookKeeperJournalManager
name|bkjm
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|BKJMUtil
operator|.
name|createJournalURI
argument_list|(
literal|"/hdfsjournal-restartFrom1"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|txid
init|=
literal|1
decl_stmt|;
name|long
name|start
init|=
name|txid
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|txid
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|DEFAULT_SEGMENT_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|txid
operator|++
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|bkjm
operator|.
name|finalizeLogSegment
argument_list|(
name|start
argument_list|,
operator|(
name|txid
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|txid
operator|=
literal|1
expr_stmt|;
try|try
block|{
name|out
operator|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Shouldn't be able to start another journal from "
operator|+
name|txid
operator|+
literal|" when one already exists"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught exception as expected"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// test border case
name|txid
operator|=
name|DEFAULT_SEGMENT_SIZE
expr_stmt|;
try|try
block|{
name|out
operator|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Shouldn't be able to start another journal from "
operator|+
name|txid
operator|+
literal|" when one already exists"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught exception as expected"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// open journal continuing from before
name|txid
operator|=
name|DEFAULT_SEGMENT_SIZE
operator|+
literal|1
expr_stmt|;
name|start
operator|=
name|txid
expr_stmt|;
name|out
operator|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|out
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|DEFAULT_SEGMENT_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|txid
operator|++
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|bkjm
operator|.
name|finalizeLogSegment
argument_list|(
name|start
argument_list|,
operator|(
name|txid
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
comment|// open journal arbitarily far in the future
name|txid
operator|=
name|DEFAULT_SEGMENT_SIZE
operator|*
literal|4
expr_stmt|;
name|out
operator|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTwoWriters ()
specifier|public
name|void
name|testTwoWriters
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|start
init|=
literal|1
decl_stmt|;
name|BookKeeperJournalManager
name|bkjm1
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|BKJMUtil
operator|.
name|createJournalURI
argument_list|(
literal|"/hdfsjournal-dualWriter"
argument_list|)
argument_list|)
decl_stmt|;
name|BookKeeperJournalManager
name|bkjm2
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|BKJMUtil
operator|.
name|createJournalURI
argument_list|(
literal|"/hdfsjournal-dualWriter"
argument_list|)
argument_list|)
decl_stmt|;
name|EditLogOutputStream
name|out1
init|=
name|bkjm1
operator|.
name|startLogSegment
argument_list|(
name|start
argument_list|)
decl_stmt|;
try|try
block|{
name|EditLogOutputStream
name|out2
init|=
name|bkjm2
operator|.
name|startLogSegment
argument_list|(
name|start
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Shouldn't have been able to open the second writer"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught exception as expected"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSimpleRead ()
specifier|public
name|void
name|testSimpleRead
parameter_list|()
throws|throws
name|Exception
block|{
name|BookKeeperJournalManager
name|bkjm
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|BKJMUtil
operator|.
name|createJournalURI
argument_list|(
literal|"/hdfsjournal-simpleread"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|txid
init|=
literal|1
decl_stmt|;
specifier|final
name|long
name|numTransactions
init|=
literal|10000
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numTransactions
condition|;
name|i
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|bkjm
operator|.
name|finalizeLogSegment
argument_list|(
literal|1
argument_list|,
name|numTransactions
argument_list|)
expr_stmt|;
name|EditLogInputStream
name|in
init|=
name|bkjm
operator|.
name|getInputStream
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|numTransactions
argument_list|,
name|FSEditLogTestUtil
operator|.
name|countTransactionsInStream
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSimpleRecovery ()
specifier|public
name|void
name|testSimpleRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|BookKeeperJournalManager
name|bkjm
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|BKJMUtil
operator|.
name|createJournalURI
argument_list|(
literal|"/hdfsjournal-simplerecovery"
argument_list|)
argument_list|)
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|long
name|txid
init|=
literal|1
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|abort
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|zkc
operator|.
name|exists
argument_list|(
name|bkjm
operator|.
name|finalizedLedgerZNode
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|zkc
operator|.
name|exists
argument_list|(
name|bkjm
operator|.
name|inprogressZNode
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|bkjm
operator|.
name|recoverUnfinalizedSegments
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|zkc
operator|.
name|exists
argument_list|(
name|bkjm
operator|.
name|finalizedLedgerZNode
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|zkc
operator|.
name|exists
argument_list|(
name|bkjm
operator|.
name|inprogressZNode
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that if enough bookies fail to prevent an ensemble,    * writes the bookkeeper will fail. Test that when once again    * an ensemble is available, it can continue to write.    */
annotation|@
name|Test
DECL|method|testAllBookieFailure ()
specifier|public
name|void
name|testAllBookieFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|BookieServer
name|bookieToFail
init|=
name|bkutil
operator|.
name|newBookie
argument_list|()
decl_stmt|;
name|BookieServer
name|replacementBookie
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|ensembleSize
init|=
name|numBookies
operator|+
literal|1
decl_stmt|;
name|assertEquals
argument_list|(
literal|"New bookie didn't start"
argument_list|,
name|ensembleSize
argument_list|,
name|bkutil
operator|.
name|checkBookiesUp
argument_list|(
name|ensembleSize
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// ensure that the journal manager has to use all bookies,
comment|// so that a failure will fail the journal manager
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|BookKeeperJournalManager
operator|.
name|BKJM_BOOKKEEPER_ENSEMBLE_SIZE
argument_list|,
name|ensembleSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|BookKeeperJournalManager
operator|.
name|BKJM_BOOKKEEPER_QUORUM_SIZE
argument_list|,
name|ensembleSize
argument_list|)
expr_stmt|;
name|long
name|txid
init|=
literal|1
decl_stmt|;
name|BookKeeperJournalManager
name|bkjm
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|BKJMUtil
operator|.
name|createJournalURI
argument_list|(
literal|"/hdfsjournal-allbookiefailure"
argument_list|)
argument_list|)
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|txid
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|txid
operator|++
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|bookieToFail
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New bookie didn't die"
argument_list|,
name|numBookies
argument_list|,
name|bkutil
operator|.
name|checkBookiesUp
argument_list|(
name|numBookies
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|txid
operator|++
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should not get to this stage"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error writing to bookkeeper"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid exception message"
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Failed to write to bookkeeper"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|replacementBookie
operator|=
name|bkutil
operator|.
name|newBookie
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New bookie didn't start"
argument_list|,
name|numBookies
operator|+
literal|1
argument_list|,
name|bkutil
operator|.
name|checkBookiesUp
argument_list|(
name|numBookies
operator|+
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|txid
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|txid
operator|++
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in test"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|replacementBookie
operator|!=
literal|null
condition|)
block|{
name|replacementBookie
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|bookieToFail
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|bkutil
operator|.
name|checkBookiesUp
argument_list|(
name|numBookies
argument_list|,
literal|30
argument_list|)
operator|!=
name|numBookies
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not all bookies from this test shut down, expect errors"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test that a BookKeeper JM can continue to work across the    * failure of a bookie. This should be handled transparently    * by bookkeeper.    */
annotation|@
name|Test
DECL|method|testOneBookieFailure ()
specifier|public
name|void
name|testOneBookieFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|BookieServer
name|bookieToFail
init|=
name|bkutil
operator|.
name|newBookie
argument_list|()
decl_stmt|;
name|BookieServer
name|replacementBookie
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|ensembleSize
init|=
name|numBookies
operator|+
literal|1
decl_stmt|;
name|assertEquals
argument_list|(
literal|"New bookie didn't start"
argument_list|,
name|ensembleSize
argument_list|,
name|bkutil
operator|.
name|checkBookiesUp
argument_list|(
name|ensembleSize
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// ensure that the journal manager has to use all bookies,
comment|// so that a failure will fail the journal manager
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|BookKeeperJournalManager
operator|.
name|BKJM_BOOKKEEPER_ENSEMBLE_SIZE
argument_list|,
name|ensembleSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|BookKeeperJournalManager
operator|.
name|BKJM_BOOKKEEPER_QUORUM_SIZE
argument_list|,
name|ensembleSize
argument_list|)
expr_stmt|;
name|long
name|txid
init|=
literal|1
decl_stmt|;
name|BookKeeperJournalManager
name|bkjm
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|BKJMUtil
operator|.
name|createJournalURI
argument_list|(
literal|"/hdfsjournal-onebookiefailure"
argument_list|)
argument_list|)
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|txid
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|txid
operator|++
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|replacementBookie
operator|=
name|bkutil
operator|.
name|newBookie
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"replacement bookie didn't start"
argument_list|,
name|ensembleSize
operator|+
literal|1
argument_list|,
name|bkutil
operator|.
name|checkBookiesUp
argument_list|(
name|ensembleSize
operator|+
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|bookieToFail
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New bookie didn't die"
argument_list|,
name|ensembleSize
argument_list|,
name|bkutil
operator|.
name|checkBookiesUp
argument_list|(
name|ensembleSize
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|txid
operator|++
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in test"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|replacementBookie
operator|!=
literal|null
condition|)
block|{
name|replacementBookie
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|bookieToFail
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|bkutil
operator|.
name|checkBookiesUp
argument_list|(
name|numBookies
argument_list|,
literal|30
argument_list|)
operator|!=
name|numBookies
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not all bookies from this test shut down, expect errors"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

