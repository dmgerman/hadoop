begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.bkjournal
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|bkjournal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bookkeeper
operator|.
name|util
operator|.
name|LocalBookKeeper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|TestEditLog
operator|.
name|setupEdits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOpCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|JournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CheckedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|TestBookKeeperJournalManager
specifier|public
class|class
name|TestBookKeeperJournalManager
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestBookKeeperJournalManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_SEGMENT_SIZE
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_SEGMENT_SIZE
init|=
literal|1000
decl_stmt|;
DECL|field|zkEnsemble
specifier|private
specifier|static
specifier|final
name|String
name|zkEnsemble
init|=
literal|"localhost:2181"
decl_stmt|;
DECL|field|bkthread
specifier|private
specifier|static
name|Thread
name|bkthread
decl_stmt|;
DECL|field|conf
specifier|protected
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|zkc
specifier|private
name|ZooKeeper
name|zkc
decl_stmt|;
DECL|method|connectZooKeeper (String ensemble)
specifier|private
specifier|static
name|ZooKeeper
name|connectZooKeeper
parameter_list|(
name|String
name|ensemble
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ZooKeeper
name|zkc
init|=
operator|new
name|ZooKeeper
argument_list|(
name|zkEnsemble
argument_list|,
literal|3600
argument_list|,
operator|new
name|Watcher
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getState
argument_list|()
operator|==
name|Watcher
operator|.
name|Event
operator|.
name|KeeperState
operator|.
name|SyncConnected
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|latch
operator|.
name|await
argument_list|(
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Zookeeper took too long to connect"
argument_list|)
throw|;
block|}
return|return
name|zkc
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|setupBookkeeper ()
specifier|public
specifier|static
name|void
name|setupBookkeeper
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numBookies
init|=
literal|5
decl_stmt|;
name|bkthread
operator|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|numBookies
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting bk"
argument_list|)
expr_stmt|;
name|LocalBookKeeper
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// go away quietly
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error starting local bk"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|bkthread
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|LocalBookKeeper
operator|.
name|waitForServerUp
argument_list|(
name|zkEnsemble
argument_list|,
literal|10000
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Error starting zookeeper/bookkeeper"
argument_list|)
throw|;
block|}
name|ZooKeeper
name|zkc
init|=
name|connectZooKeeper
argument_list|(
name|zkEnsemble
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|up
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|zkc
operator|.
name|getChildren
argument_list|(
literal|"/ledgers/available"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|==
name|numBookies
condition|)
block|{
name|up
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|up
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not enough bookies started"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|zkc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|zkc
operator|=
name|connectZooKeeper
argument_list|(
name|zkEnsemble
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|zkc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardownBookkeeper ()
specifier|public
specifier|static
name|void
name|teardownBookkeeper
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|bkthread
operator|!=
literal|null
condition|)
block|{
name|bkthread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|bkthread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSimpleWrite ()
specifier|public
name|void
name|testSimpleWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|BookKeeperJournalManager
name|bkjm
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|URI
operator|.
name|create
argument_list|(
literal|"bookkeeper://"
operator|+
name|zkEnsemble
operator|+
literal|"/hdfsjournal-simplewrite"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|txid
init|=
literal|1
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|bkjm
operator|.
name|finalizeLogSegment
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|String
name|zkpath
init|=
name|bkjm
operator|.
name|finalizedLedgerZNode
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|zkc
operator|.
name|exists
argument_list|(
name|zkpath
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|zkc
operator|.
name|exists
argument_list|(
name|bkjm
operator|.
name|inprogressZNode
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumberOfTransactions ()
specifier|public
name|void
name|testNumberOfTransactions
parameter_list|()
throws|throws
name|Exception
block|{
name|BookKeeperJournalManager
name|bkjm
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|URI
operator|.
name|create
argument_list|(
literal|"bookkeeper://"
operator|+
name|zkEnsemble
operator|+
literal|"/hdfsjournal-txncount"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|txid
init|=
literal|1
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|bkjm
operator|.
name|finalizeLogSegment
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|long
name|numTrans
init|=
name|bkjm
operator|.
name|getNumberOfTransactions
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|numTrans
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumberOfTransactionsWithGaps ()
specifier|public
name|void
name|testNumberOfTransactionsWithGaps
parameter_list|()
throws|throws
name|Exception
block|{
name|BookKeeperJournalManager
name|bkjm
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|URI
operator|.
name|create
argument_list|(
literal|"bookkeeper://"
operator|+
name|zkEnsemble
operator|+
literal|"/hdfsjournal-gaps"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|txid
init|=
literal|1
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|long
name|start
init|=
name|txid
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|start
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|DEFAULT_SEGMENT_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|txid
operator|++
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|bkjm
operator|.
name|finalizeLogSegment
argument_list|(
name|start
argument_list|,
name|txid
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|zkc
operator|.
name|exists
argument_list|(
name|bkjm
operator|.
name|finalizedLedgerZNode
argument_list|(
name|start
argument_list|,
name|txid
operator|-
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|zkc
operator|.
name|delete
argument_list|(
name|bkjm
operator|.
name|finalizedLedgerZNode
argument_list|(
name|DEFAULT_SEGMENT_SIZE
operator|+
literal|1
argument_list|,
name|DEFAULT_SEGMENT_SIZE
operator|*
literal|2
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|long
name|numTrans
init|=
name|bkjm
operator|.
name|getNumberOfTransactions
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_SEGMENT_SIZE
argument_list|,
name|numTrans
argument_list|)
expr_stmt|;
try|try
block|{
name|numTrans
operator|=
name|bkjm
operator|.
name|getNumberOfTransactions
argument_list|(
name|DEFAULT_SEGMENT_SIZE
operator|+
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown corruption exception by this point"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JournalManager
operator|.
name|CorruptionException
name|ce
parameter_list|)
block|{
comment|// if we get here, everything is going good
block|}
name|numTrans
operator|=
name|bkjm
operator|.
name|getNumberOfTransactions
argument_list|(
operator|(
name|DEFAULT_SEGMENT_SIZE
operator|*
literal|2
operator|)
operator|+
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_SEGMENT_SIZE
argument_list|,
name|numTrans
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumberOfTransactionsWithInprogressAtEnd ()
specifier|public
name|void
name|testNumberOfTransactionsWithInprogressAtEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|BookKeeperJournalManager
name|bkjm
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|URI
operator|.
name|create
argument_list|(
literal|"bookkeeper://"
operator|+
name|zkEnsemble
operator|+
literal|"/hdfsjournal-inprogressAtEnd"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|txid
init|=
literal|1
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|long
name|start
init|=
name|txid
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|start
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|DEFAULT_SEGMENT_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|txid
operator|++
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|bkjm
operator|.
name|finalizeLogSegment
argument_list|(
name|start
argument_list|,
operator|(
name|txid
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|zkc
operator|.
name|exists
argument_list|(
name|bkjm
operator|.
name|finalizedLedgerZNode
argument_list|(
name|start
argument_list|,
operator|(
name|txid
operator|-
literal|1
operator|)
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|start
init|=
name|txid
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|start
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|DEFAULT_SEGMENT_SIZE
operator|/
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|txid
operator|++
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|abort
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|numTrans
init|=
name|bkjm
operator|.
name|getNumberOfTransactions
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|txid
operator|-
literal|1
operator|)
argument_list|,
name|numTrans
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a bkjm namespace, write a journal from txid 1, close stream.    * Try to create a new journal from txid 1. Should throw an exception.    */
annotation|@
name|Test
DECL|method|testWriteRestartFrom1 ()
specifier|public
name|void
name|testWriteRestartFrom1
parameter_list|()
throws|throws
name|Exception
block|{
name|BookKeeperJournalManager
name|bkjm
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|URI
operator|.
name|create
argument_list|(
literal|"bookkeeper://"
operator|+
name|zkEnsemble
operator|+
literal|"/hdfsjournal-restartFrom1"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|txid
init|=
literal|1
decl_stmt|;
name|long
name|start
init|=
name|txid
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|txid
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|DEFAULT_SEGMENT_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|txid
operator|++
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|bkjm
operator|.
name|finalizeLogSegment
argument_list|(
name|start
argument_list|,
operator|(
name|txid
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|txid
operator|=
literal|1
expr_stmt|;
try|try
block|{
name|out
operator|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Shouldn't be able to start another journal from "
operator|+
name|txid
operator|+
literal|" when one already exists"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught exception as expected"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// test border case
name|txid
operator|=
name|DEFAULT_SEGMENT_SIZE
expr_stmt|;
try|try
block|{
name|out
operator|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Shouldn't be able to start another journal from "
operator|+
name|txid
operator|+
literal|" when one already exists"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught exception as expected"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// open journal continuing from before
name|txid
operator|=
name|DEFAULT_SEGMENT_SIZE
operator|+
literal|1
expr_stmt|;
name|start
operator|=
name|txid
expr_stmt|;
name|out
operator|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|out
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|DEFAULT_SEGMENT_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|txid
operator|++
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|bkjm
operator|.
name|finalizeLogSegment
argument_list|(
name|start
argument_list|,
operator|(
name|txid
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
comment|// open journal arbitarily far in the future
name|txid
operator|=
name|DEFAULT_SEGMENT_SIZE
operator|*
literal|4
expr_stmt|;
name|out
operator|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTwoWriters ()
specifier|public
name|void
name|testTwoWriters
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|start
init|=
literal|1
decl_stmt|;
name|BookKeeperJournalManager
name|bkjm1
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|URI
operator|.
name|create
argument_list|(
literal|"bookkeeper://"
operator|+
name|zkEnsemble
operator|+
literal|"/hdfsjournal-dualWriter"
argument_list|)
argument_list|)
decl_stmt|;
name|BookKeeperJournalManager
name|bkjm2
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|URI
operator|.
name|create
argument_list|(
literal|"bookkeeper://"
operator|+
name|zkEnsemble
operator|+
literal|"/hdfsjournal-dualWriter"
argument_list|)
argument_list|)
decl_stmt|;
name|EditLogOutputStream
name|out1
init|=
name|bkjm1
operator|.
name|startLogSegment
argument_list|(
name|start
argument_list|)
decl_stmt|;
try|try
block|{
name|EditLogOutputStream
name|out2
init|=
name|bkjm2
operator|.
name|startLogSegment
argument_list|(
name|start
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Shouldn't have been able to open the second writer"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught exception as expected"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSimpleRead ()
specifier|public
name|void
name|testSimpleRead
parameter_list|()
throws|throws
name|Exception
block|{
name|BookKeeperJournalManager
name|bkjm
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|URI
operator|.
name|create
argument_list|(
literal|"bookkeeper://"
operator|+
name|zkEnsemble
operator|+
literal|"/hdfsjournal-simpleread"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|txid
init|=
literal|1
decl_stmt|;
specifier|final
name|long
name|numTransactions
init|=
literal|10000
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numTransactions
condition|;
name|i
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|bkjm
operator|.
name|finalizeLogSegment
argument_list|(
literal|1
argument_list|,
name|numTransactions
argument_list|)
expr_stmt|;
name|EditLogInputStream
name|in
init|=
name|bkjm
operator|.
name|getInputStream
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|numTransactions
argument_list|,
name|FSEditLogTestUtil
operator|.
name|countTransactionsInStream
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSimpleRecovery ()
specifier|public
name|void
name|testSimpleRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|BookKeeperJournalManager
name|bkjm
init|=
operator|new
name|BookKeeperJournalManager
argument_list|(
name|conf
argument_list|,
name|URI
operator|.
name|create
argument_list|(
literal|"bookkeeper://"
operator|+
name|zkEnsemble
operator|+
literal|"/hdfsjournal-simplerecovery"
argument_list|)
argument_list|)
decl_stmt|;
name|EditLogOutputStream
name|out
init|=
name|bkjm
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|long
name|txid
init|=
literal|1
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|FSEditLogOp
name|op
init|=
name|FSEditLogTestUtil
operator|.
name|getNoOpInstance
argument_list|()
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|abort
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|zkc
operator|.
name|exists
argument_list|(
name|bkjm
operator|.
name|finalizedLedgerZNode
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|zkc
operator|.
name|exists
argument_list|(
name|bkjm
operator|.
name|inprogressZNode
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|bkjm
operator|.
name|recoverUnfinalizedSegments
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|zkc
operator|.
name|exists
argument_list|(
name|bkjm
operator|.
name|finalizedLedgerZNode
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|zkc
operator|.
name|exists
argument_list|(
name|bkjm
operator|.
name|inprogressZNode
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

