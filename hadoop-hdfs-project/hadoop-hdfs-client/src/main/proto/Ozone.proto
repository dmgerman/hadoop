/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * These .proto interfaces are private and unstable.
 * Please see http://wiki.apache.org/hadoop/Compatibility
 * for what changes are allowed for a *unstable* .proto interface.
 */

option java_package = "org.apache.hadoop.ozone.protocol.proto";
option java_outer_classname = "OzoneProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
package hadoop.hdfs.ozone;
import "hdfs.proto";


// A pipeline is composed of one or more datanodes that back a container.
message Pipeline {
    required string leaderID = 1;
    repeated DatanodeIDProto members = 2;
    required string containerName = 3;
    optional LifeCycleStates state = 4 [default = OPERATIONAL];
}

message KeyValue {
    required string key = 1;
    optional string value = 2;
}

/**
 * Enum that represents the Node State. This is used in calls to getNodeList
 * and getNodeCount.
 */
enum NodeState {
    HEALTHY             = 1;
    STALE               = 2;
    DEAD                = 3;
    DECOMMISSIONING     = 4;
    DECOMMISSIONED      = 5;
    RAFT_MEMBER         = 6;
    FREE_NODE           = 7; // Not a member in raft.
    UNKNOWN             = 8;
}

enum QueryScope {
    CLUSTER = 1;
    POOL = 2;
}

message Node {
    required DatanodeIDProto nodeID = 1;
    repeated NodeState nodeStates = 2;
}

message NodePool {
    repeated Node nodes = 1;
}


enum ReplicationType {
    RATIS = 1;
    STAND_ALONE = 2;
    CHAINED = 3;
}


enum ReplicationFactor {
    ONE = 1;
    THREE = 3;
}

enum LifeCycleStates {
    CLIENT_CREATE = 1; // A request to client to create this object
    OPERATIONAL = 2; // Mostly an update to SCM via HB or client call.
    TIMED_OUT = 3; // creation has timed out from SCM's View.
    DELETED = 4; // object is deleted.
}