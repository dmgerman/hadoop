begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Locally available datanode volume information.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DatanodeVolumeInfo
specifier|public
class|class
name|DatanodeVolumeInfo
block|{
DECL|field|usedSpace
specifier|private
name|long
name|usedSpace
decl_stmt|;
DECL|field|freeSpace
specifier|private
name|long
name|freeSpace
decl_stmt|;
DECL|field|reservedSpace
specifier|private
name|long
name|reservedSpace
decl_stmt|;
DECL|field|reservedSpaceForReplicas
specifier|private
name|long
name|reservedSpaceForReplicas
decl_stmt|;
DECL|field|numBlocks
specifier|private
name|long
name|numBlocks
decl_stmt|;
DECL|field|storageType
specifier|private
name|StorageType
name|storageType
decl_stmt|;
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
DECL|method|DatanodeVolumeInfo (String path, long usedSpace, long freeSpace, long reservedSpace, long reservedSpaceForReplicas, long numBlocks, StorageType type)
specifier|public
name|DatanodeVolumeInfo
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|usedSpace
parameter_list|,
name|long
name|freeSpace
parameter_list|,
name|long
name|reservedSpace
parameter_list|,
name|long
name|reservedSpaceForReplicas
parameter_list|,
name|long
name|numBlocks
parameter_list|,
name|StorageType
name|type
parameter_list|)
block|{
name|this
operator|.
name|usedSpace
operator|=
name|usedSpace
expr_stmt|;
name|this
operator|.
name|freeSpace
operator|=
name|freeSpace
expr_stmt|;
name|this
operator|.
name|reservedSpace
operator|=
name|reservedSpace
expr_stmt|;
name|this
operator|.
name|reservedSpaceForReplicas
operator|=
name|reservedSpaceForReplicas
expr_stmt|;
name|this
operator|.
name|numBlocks
operator|=
name|numBlocks
expr_stmt|;
name|this
operator|.
name|storageType
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
comment|/** get used space. */
DECL|method|getUsedSpace ()
specifier|public
name|long
name|getUsedSpace
parameter_list|()
block|{
return|return
name|usedSpace
return|;
block|}
comment|/**    * get free space.    */
DECL|method|getFreeSpace ()
specifier|public
name|long
name|getFreeSpace
parameter_list|()
block|{
return|return
name|freeSpace
return|;
block|}
comment|/**    * get reserved space.    */
DECL|method|getReservedSpace ()
specifier|public
name|long
name|getReservedSpace
parameter_list|()
block|{
return|return
name|reservedSpace
return|;
block|}
comment|/**    * get reserved space for replicas.    */
DECL|method|getReservedSpaceForReplicas ()
specifier|public
name|long
name|getReservedSpaceForReplicas
parameter_list|()
block|{
return|return
name|reservedSpaceForReplicas
return|;
block|}
comment|/**    * get number of blocks.    */
DECL|method|getNumBlocks ()
specifier|public
name|long
name|getNumBlocks
parameter_list|()
block|{
return|return
name|numBlocks
return|;
block|}
comment|/**    * get storage type.    */
DECL|method|getStorageType ()
specifier|public
name|StorageType
name|getStorageType
parameter_list|()
block|{
return|return
name|storageType
return|;
block|}
comment|/**    * get volume path.    */
DECL|method|getPath ()
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
comment|/**    * get volume report.    */
DECL|method|getDatanodeVolumeReport ()
specifier|public
name|String
name|getDatanodeVolumeReport
parameter_list|()
block|{
name|StringBuilder
name|report
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|report
operator|.
name|append
argument_list|(
literal|"Directory: "
operator|+
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|"\nStorageType: "
operator|+
name|storageType
argument_list|)
operator|.
name|append
argument_list|(
literal|"\nCapacity Used: "
operator|+
name|usedSpace
operator|+
literal|"("
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|usedSpace
argument_list|)
operator|+
literal|")"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\nCapacity Left: "
operator|+
name|freeSpace
operator|+
literal|"("
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|freeSpace
argument_list|)
operator|+
literal|")"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\nCapacity Reserved: "
operator|+
name|reservedSpace
operator|+
literal|"("
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|reservedSpace
argument_list|)
operator|+
literal|")"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\nReserved Space for Replicas: "
operator|+
name|reservedSpaceForReplicas
operator|+
literal|"("
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|reservedSpaceForReplicas
argument_list|)
operator|+
literal|")"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\nBlocks: "
operator|+
name|numBlocks
argument_list|)
expr_stmt|;
return|return
name|report
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

