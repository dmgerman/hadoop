begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BatchedRemoteIterator
operator|.
name|BatchedListEntries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|ReencryptionInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ZoneReencryptionStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * A class representing information about re-encrypting encryption zones. It  * contains a collection of @{code ZoneReencryptionStatus} for each EZ.  *<p>  * FSDirectory lock is used for synchronization (except test-only methods, which  * are not protected).  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ReencryptionStatus
specifier|public
specifier|final
class|class
name|ReencryptionStatus
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReencryptionStatus
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|EMPTY_LIST
specifier|public
specifier|static
specifier|final
name|BatchedListEntries
argument_list|<
name|ZoneReencryptionStatus
argument_list|>
name|EMPTY_LIST
init|=
operator|new
name|BatchedListEntries
argument_list|<>
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|/**    * The zones that were submitted for re-encryption. This should preserve    * the order of submission.    */
DECL|field|zoneStatuses
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|ZoneReencryptionStatus
argument_list|>
name|zoneStatuses
decl_stmt|;
comment|// Metrics
DECL|field|zonesReencrypted
specifier|private
name|long
name|zonesReencrypted
decl_stmt|;
DECL|method|ReencryptionStatus ()
specifier|public
name|ReencryptionStatus
parameter_list|()
block|{
name|zoneStatuses
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|ReencryptionStatus (ReencryptionStatus rhs)
specifier|public
name|ReencryptionStatus
parameter_list|(
name|ReencryptionStatus
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|rhs
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|zoneStatuses
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|rhs
operator|.
name|zoneStatuses
argument_list|)
expr_stmt|;
name|this
operator|.
name|zonesReencrypted
operator|=
name|rhs
operator|.
name|zonesReencrypted
expr_stmt|;
block|}
else|else
block|{
name|zoneStatuses
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|resetMetrics ()
specifier|public
name|void
name|resetMetrics
parameter_list|()
block|{
name|zonesReencrypted
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|ZoneReencryptionStatus
argument_list|>
name|entry
range|:
name|zoneStatuses
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|resetMetrics
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getZoneStatus (final Long zondId)
specifier|public
name|ZoneReencryptionStatus
name|getZoneStatus
parameter_list|(
specifier|final
name|Long
name|zondId
parameter_list|)
block|{
return|return
name|zoneStatuses
operator|.
name|get
argument_list|(
name|zondId
argument_list|)
return|;
block|}
DECL|method|markZoneForRetry (final Long zoneId)
specifier|public
name|void
name|markZoneForRetry
parameter_list|(
specifier|final
name|Long
name|zoneId
parameter_list|)
block|{
specifier|final
name|ZoneReencryptionStatus
name|zs
init|=
name|zoneStatuses
operator|.
name|get
argument_list|(
name|zoneId
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|zs
argument_list|,
literal|"Cannot find zone "
operator|+
name|zoneId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Zone {} will retry re-encryption"
argument_list|,
name|zoneId
argument_list|)
expr_stmt|;
name|zs
operator|.
name|setState
argument_list|(
name|State
operator|.
name|Submitted
argument_list|)
expr_stmt|;
block|}
DECL|method|markZoneStarted (final Long zoneId)
specifier|public
name|void
name|markZoneStarted
parameter_list|(
specifier|final
name|Long
name|zoneId
parameter_list|)
block|{
specifier|final
name|ZoneReencryptionStatus
name|zs
init|=
name|zoneStatuses
operator|.
name|get
argument_list|(
name|zoneId
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|zs
argument_list|,
literal|"Cannot find zone "
operator|+
name|zoneId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Zone {} starts re-encryption processing"
argument_list|,
name|zoneId
argument_list|)
expr_stmt|;
name|zs
operator|.
name|setState
argument_list|(
name|State
operator|.
name|Processing
argument_list|)
expr_stmt|;
block|}
DECL|method|markZoneCompleted (final Long zoneId)
specifier|public
name|void
name|markZoneCompleted
parameter_list|(
specifier|final
name|Long
name|zoneId
parameter_list|)
block|{
specifier|final
name|ZoneReencryptionStatus
name|zs
init|=
name|zoneStatuses
operator|.
name|get
argument_list|(
name|zoneId
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|zs
argument_list|,
literal|"Cannot find zone "
operator|+
name|zoneId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Zone {} completed re-encryption."
argument_list|,
name|zoneId
argument_list|)
expr_stmt|;
name|zs
operator|.
name|setState
argument_list|(
name|State
operator|.
name|Completed
argument_list|)
expr_stmt|;
name|zonesReencrypted
operator|++
expr_stmt|;
block|}
DECL|method|getNextUnprocessedZone ()
specifier|public
name|Long
name|getNextUnprocessedZone
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|ZoneReencryptionStatus
argument_list|>
name|entry
range|:
name|zoneStatuses
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|Submitted
condition|)
block|{
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|hasRunningZone (final Long zoneId)
specifier|public
name|boolean
name|hasRunningZone
parameter_list|(
specifier|final
name|Long
name|zoneId
parameter_list|)
block|{
return|return
name|zoneStatuses
operator|.
name|containsKey
argument_list|(
name|zoneId
argument_list|)
operator|&&
name|zoneStatuses
operator|.
name|get
argument_list|(
name|zoneId
argument_list|)
operator|.
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|Completed
return|;
block|}
comment|/**    * @param zoneId    * @return true if this is a zone is added.    */
DECL|method|addZoneIfNecessary (final Long zoneId, final String name, final ReencryptionInfoProto reProto)
specifier|private
name|boolean
name|addZoneIfNecessary
parameter_list|(
specifier|final
name|Long
name|zoneId
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|ReencryptionInfoProto
name|reProto
parameter_list|)
block|{
if|if
condition|(
operator|!
name|zoneStatuses
operator|.
name|containsKey
argument_list|(
name|zoneId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding zone {} for re-encryption status"
argument_list|,
name|zoneId
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|reProto
argument_list|)
expr_stmt|;
specifier|final
name|ZoneReencryptionStatus
operator|.
name|Builder
name|builder
init|=
operator|new
name|ZoneReencryptionStatus
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|id
argument_list|(
name|zoneId
argument_list|)
operator|.
name|zoneName
argument_list|(
name|name
argument_list|)
operator|.
name|ezKeyVersionName
argument_list|(
name|reProto
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|)
operator|.
name|submissionTime
argument_list|(
name|reProto
operator|.
name|getSubmissionTime
argument_list|()
argument_list|)
operator|.
name|canceled
argument_list|(
name|reProto
operator|.
name|getCanceled
argument_list|()
argument_list|)
operator|.
name|filesReencrypted
argument_list|(
name|reProto
operator|.
name|getNumReencrypted
argument_list|()
argument_list|)
operator|.
name|fileReencryptionFailures
argument_list|(
name|reProto
operator|.
name|getNumFailures
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reProto
operator|.
name|hasCompletionTime
argument_list|()
condition|)
block|{
name|builder
operator|.
name|completionTime
argument_list|(
name|reProto
operator|.
name|getCompletionTime
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|state
argument_list|(
name|State
operator|.
name|Completed
argument_list|)
expr_stmt|;
name|zonesReencrypted
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|state
argument_list|(
name|State
operator|.
name|Submitted
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reProto
operator|.
name|hasLastFile
argument_list|()
condition|)
block|{
name|builder
operator|.
name|lastCheckpointFile
argument_list|(
name|reProto
operator|.
name|getLastFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|zoneStatuses
operator|.
name|put
argument_list|(
name|zoneId
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|==
literal|null
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|updateZoneStatus (final Long zoneId, final String zonePath, final ReencryptionInfoProto reProto)
specifier|public
name|void
name|updateZoneStatus
parameter_list|(
specifier|final
name|Long
name|zoneId
parameter_list|,
specifier|final
name|String
name|zonePath
parameter_list|,
specifier|final
name|ReencryptionInfoProto
name|reProto
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|zoneId
operator|!=
literal|null
argument_list|,
literal|"zoneId can't be null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|addZoneIfNecessary
argument_list|(
name|zoneId
argument_list|,
name|zonePath
argument_list|,
name|reProto
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|ZoneReencryptionStatus
name|zs
init|=
name|getZoneStatus
argument_list|(
name|zoneId
argument_list|)
decl_stmt|;
assert|assert
name|zs
operator|!=
literal|null
assert|;
if|if
condition|(
name|reProto
operator|.
name|hasCompletionTime
argument_list|()
condition|)
block|{
name|zs
operator|.
name|markZoneCompleted
argument_list|(
name|reProto
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|reProto
operator|.
name|hasLastFile
argument_list|()
operator|&&
operator|!
name|reProto
operator|.
name|hasCompletionTime
argument_list|()
condition|)
block|{
name|zs
operator|.
name|markZoneSubmitted
argument_list|(
name|reProto
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zs
operator|.
name|updateZoneProcess
argument_list|(
name|reProto
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeZone (final Long zoneId)
specifier|public
name|boolean
name|removeZone
parameter_list|(
specifier|final
name|Long
name|zoneId
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing re-encryption status of zone {} "
argument_list|,
name|zoneId
argument_list|)
expr_stmt|;
return|return
name|zoneStatuses
operator|.
name|remove
argument_list|(
name|zoneId
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|zonesQueued ()
specifier|public
name|int
name|zonesQueued
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|ZoneReencryptionStatus
argument_list|>
name|entry
range|:
name|zoneStatuses
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|Submitted
condition|)
block|{
name|ret
operator|++
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|zonesTotal ()
specifier|public
name|int
name|zonesTotal
parameter_list|()
block|{
return|return
name|zoneStatuses
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNumZonesReencrypted ()
specifier|public
name|long
name|getNumZonesReencrypted
parameter_list|()
block|{
return|return
name|zonesReencrypted
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|ZoneReencryptionStatus
argument_list|>
name|entry
range|:
name|zoneStatuses
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"[zone:"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" state:"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" lastProcessed:"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getLastCheckpointFile
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" filesReencrypted:"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" fileReencryptionFailures:"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getNumReencryptionFailures
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getZoneStatuses ()
specifier|public
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|ZoneReencryptionStatus
argument_list|>
name|getZoneStatuses
parameter_list|()
block|{
return|return
name|zoneStatuses
return|;
block|}
block|}
end_class

end_unit

