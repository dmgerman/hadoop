begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|HdfsPathHandleProto
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_comment
comment|/**  * Opaque handle to an entity in HDFS.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|HdfsPathHandle
specifier|public
specifier|final
class|class
name|HdfsPathHandle
implements|implements
name|PathHandle
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0xc5308795428L
decl_stmt|;
DECL|field|inodeId
specifier|private
specifier|final
name|long
name|inodeId
decl_stmt|;
DECL|method|HdfsPathHandle (HdfsFileStatus hstat)
specifier|public
name|HdfsPathHandle
parameter_list|(
name|HdfsFileStatus
name|hstat
parameter_list|)
block|{
name|this
argument_list|(
name|hstat
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|HdfsPathHandle (long inodeId)
specifier|public
name|HdfsPathHandle
parameter_list|(
name|long
name|inodeId
parameter_list|)
block|{
name|this
operator|.
name|inodeId
operator|=
name|inodeId
expr_stmt|;
block|}
DECL|method|HdfsPathHandle (ByteBuffer bytes)
specifier|public
name|HdfsPathHandle
parameter_list|(
name|ByteBuffer
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|bytes
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing PathHandle"
argument_list|)
throw|;
block|}
name|HdfsPathHandleProto
name|p
init|=
name|HdfsPathHandleProto
operator|.
name|parseFrom
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
name|inodeId
operator|=
name|p
operator|.
name|getInodeId
argument_list|()
expr_stmt|;
block|}
DECL|method|getInodeId ()
specifier|public
name|long
name|getInodeId
parameter_list|()
block|{
return|return
name|inodeId
return|;
block|}
annotation|@
name|Override
DECL|method|bytes ()
specifier|public
name|ByteBuffer
name|bytes
parameter_list|()
block|{
return|return
name|HdfsPathHandleProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setInodeId
argument_list|(
name|getInodeId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteString
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|other
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|HdfsPathHandle
operator|.
name|class
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
comment|// require exact match
return|return
literal|false
return|;
block|}
name|HdfsPathHandle
name|o
init|=
operator|(
name|HdfsPathHandle
operator|)
name|other
decl_stmt|;
return|return
name|getInodeId
argument_list|()
operator|==
name|o
operator|.
name|getInodeId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Long
operator|.
name|hashCode
argument_list|(
name|inodeId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{ "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inodeId : "
argument_list|)
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|getInodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

