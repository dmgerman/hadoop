begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client.rest
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|Versioning
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|KSMConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rest
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpRequestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URIBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_CREATED
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_OK
import|;
end_import

begin_comment
comment|/**  * Ozone REST Client Implementation, it connects Ozone Handler to execute  * client calls. This uses REST protocol for the communication with server.  */
end_comment

begin_class
DECL|class|OzoneRestClient
specifier|public
class|class
name|OzoneRestClient
implements|implements
name|OzoneClient
implements|,
name|Closeable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneRestClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SCHEMA
specifier|private
specifier|static
specifier|final
name|String
name|SCHEMA
init|=
literal|"http://"
decl_stmt|;
DECL|field|DEFAULT_OZONE_PORT
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_OZONE_PORT
init|=
literal|50070
decl_stmt|;
DECL|field|uri
specifier|private
specifier|final
name|URI
name|uri
decl_stmt|;
DECL|field|ugi
specifier|private
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
DECL|field|userRights
specifier|private
specifier|final
name|OzoneAcl
operator|.
name|OzoneACLRights
name|userRights
decl_stmt|;
DECL|field|groupRights
specifier|private
specifier|final
name|OzoneAcl
operator|.
name|OzoneACLRights
name|groupRights
decl_stmt|;
comment|/**    * Creates OzoneRpcClient instance with new OzoneConfiguration.    *    * @throws IOException    */
DECL|method|OzoneRestClient ()
specifier|public
name|OzoneRestClient
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|this
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**     * Creates OzoneRpcClient instance with the given configuration.     *     * @param conf     *     * @throws IOException     */
DECL|method|OzoneRestClient (Configuration conf)
specifier|public
name|OzoneRestClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|this
operator|.
name|userRights
operator|=
name|conf
operator|.
name|getEnum
argument_list|(
name|KSMConfigKeys
operator|.
name|OZONE_KSM_USER_RIGHTS
argument_list|,
name|KSMConfigKeys
operator|.
name|OZONE_KSM_USER_RIGHTS_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupRights
operator|=
name|conf
operator|.
name|getEnum
argument_list|(
name|KSMConfigKeys
operator|.
name|OZONE_KSM_GROUP_RIGHTS
argument_list|,
name|KSMConfigKeys
operator|.
name|OZONE_KSM_GROUP_RIGHTS_DEFAULT
argument_list|)
expr_stmt|;
comment|//TODO: get uri from property ozone.reset.servers
name|URIBuilder
name|ozoneURI
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ozoneURI
operator|=
operator|new
name|URIBuilder
argument_list|(
name|SCHEMA
operator|+
literal|"localhost"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ozoneURI
operator|.
name|getPort
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ozoneURI
operator|.
name|setPort
argument_list|(
name|DEFAULT_OZONE_PORT
argument_list|)
expr_stmt|;
block|}
name|uri
operator|=
name|ozoneURI
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|createVolume (String volumeName)
specifier|public
name|void
name|createVolume
parameter_list|(
name|String
name|volumeName
parameter_list|)
throws|throws
name|IOException
block|{
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createVolume (String volumeName, String owner)
specifier|public
name|void
name|createVolume
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|owner
argument_list|,
name|OzoneConsts
operator|.
name|MAX_QUOTA_IN_BYTES
argument_list|,
operator|(
name|OzoneAcl
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createVolume (String volumeName, String owner, OzoneAcl... acls)
specifier|public
name|void
name|createVolume
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|owner
parameter_list|,
name|OzoneAcl
modifier|...
name|acls
parameter_list|)
throws|throws
name|IOException
block|{
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|owner
argument_list|,
name|OzoneConsts
operator|.
name|MAX_QUOTA_IN_BYTES
argument_list|,
name|acls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createVolume (String volumeName, String owner, long quota)
specifier|public
name|void
name|createVolume
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|owner
parameter_list|,
name|long
name|quota
parameter_list|)
throws|throws
name|IOException
block|{
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|owner
argument_list|,
name|quota
argument_list|,
operator|(
name|OzoneAcl
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createVolume (String volumeName, String owner, long quota, OzoneAcl... acls)
specifier|public
name|void
name|createVolume
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|owner
parameter_list|,
name|long
name|quota
parameter_list|,
name|OzoneAcl
modifier|...
name|acls
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|quota
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|quota
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|OzoneAcl
argument_list|>
name|aclSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|acls
operator|!=
literal|null
condition|)
block|{
name|aclSet
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|acls
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating Volume: {}, with {} as owner and "
operator|+
literal|"quota set to {} bytes."
argument_list|,
name|volumeName
argument_list|,
name|owner
argument_list|,
name|quota
argument_list|)
expr_stmt|;
name|HttpPost
name|httpPost
init|=
literal|null
decl_stmt|;
name|HttpEntity
name|entity
init|=
literal|null
decl_stmt|;
try|try
init|(
name|CloseableHttpClient
name|httpClient
init|=
name|OzoneClientUtils
operator|.
name|newHttpClient
argument_list|()
init|)
block|{
name|URIBuilder
name|builder
init|=
operator|new
name|URIBuilder
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setPath
argument_list|(
literal|"/"
operator|+
name|volumeName
argument_list|)
expr_stmt|;
name|String
name|quotaString
init|=
name|quota
operator|+
name|Header
operator|.
name|OZONE_QUOTA_BYTES
decl_stmt|;
name|builder
operator|.
name|setParameter
argument_list|(
name|Header
operator|.
name|OZONE_QUOTA_QUERY_TAG
argument_list|,
name|quotaString
argument_list|)
expr_stmt|;
name|httpPost
operator|=
name|getHttpPost
argument_list|(
name|owner
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|OzoneAcl
name|acl
range|:
name|aclSet
control|)
block|{
name|httpPost
operator|.
name|addHeader
argument_list|(
name|Header
operator|.
name|OZONE_ACLS
argument_list|,
name|Header
operator|.
name|OZONE_ACL_ADD
operator|+
literal|" "
operator|+
name|acl
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HttpResponse
name|response
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|httpPost
argument_list|)
decl_stmt|;
name|entity
operator|=
name|response
operator|.
name|getEntity
argument_list|()
expr_stmt|;
name|int
name|errorCode
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|errorCode
operator|==
name|HTTP_OK
operator|)
operator|||
operator|(
name|errorCode
operator|==
name|HTTP_CREATED
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected null in http payload"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
decl||
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|EntityUtils
operator|.
name|consume
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|OzoneClientUtils
operator|.
name|releaseConnection
argument_list|(
name|httpPost
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setVolumeOwner (String volumeName, String owner)
specifier|public
name|void
name|setVolumeOwner
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|owner
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setVolumeQuota (String volumeName, long quota)
specifier|public
name|void
name|setVolumeQuota
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|long
name|quota
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|quota
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|quota
operator|>=
literal|0
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getVolumeDetails (String volumeName)
specifier|public
name|OzoneVolume
name|getVolumeDetails
parameter_list|(
name|String
name|volumeName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|checkVolumeAccess (String volumeName, OzoneAcl acl)
specifier|public
name|boolean
name|checkVolumeAccess
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|OzoneAcl
name|acl
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|deleteVolume (String volumeName)
specifier|public
name|void
name|deleteVolume
parameter_list|(
name|String
name|volumeName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|listVolumes (String volumePrefix)
specifier|public
name|Iterator
argument_list|<
name|OzoneVolume
argument_list|>
name|listVolumes
parameter_list|(
name|String
name|volumePrefix
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|listVolumes (String volumePrefix, String user)
specifier|public
name|Iterator
argument_list|<
name|OzoneVolume
argument_list|>
name|listVolumes
parameter_list|(
name|String
name|volumePrefix
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|createBucket (String volumeName, String bucketName)
specifier|public
name|void
name|createBucket
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|createBucket
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|Versioning
operator|.
name|NOT_DEFINED
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|,
operator|(
name|OzoneAcl
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createBucket (String volumeName, String bucketName, Versioning versioning)
specifier|public
name|void
name|createBucket
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|Versioning
name|versioning
parameter_list|)
throws|throws
name|IOException
block|{
name|createBucket
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|versioning
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|,
operator|(
name|OzoneAcl
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createBucket (String volumeName, String bucketName, StorageType storageType)
specifier|public
name|void
name|createBucket
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
throws|throws
name|IOException
block|{
name|createBucket
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|Versioning
operator|.
name|NOT_DEFINED
argument_list|,
name|storageType
argument_list|,
operator|(
name|OzoneAcl
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createBucket (String volumeName, String bucketName, OzoneAcl... acls)
specifier|public
name|void
name|createBucket
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|OzoneAcl
modifier|...
name|acls
parameter_list|)
throws|throws
name|IOException
block|{
name|createBucket
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|Versioning
operator|.
name|NOT_DEFINED
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|,
name|acls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createBucket (String volumeName, String bucketName, Versioning versioning, StorageType storageType, OzoneAcl... acls)
specifier|public
name|void
name|createBucket
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|Versioning
name|versioning
parameter_list|,
name|StorageType
name|storageType
parameter_list|,
name|OzoneAcl
modifier|...
name|acls
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|versioning
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|storageType
argument_list|)
expr_stmt|;
name|String
name|owner
init|=
name|ugi
operator|.
name|getUserName
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|listOfAcls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//User ACL
name|OzoneAcl
name|userAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|OzoneAcl
operator|.
name|OzoneACLType
operator|.
name|USER
argument_list|,
name|owner
argument_list|,
name|userRights
argument_list|)
decl_stmt|;
name|listOfAcls
operator|.
name|add
argument_list|(
name|userAcl
argument_list|)
expr_stmt|;
comment|//Group ACLs of the User
name|List
argument_list|<
name|String
argument_list|>
name|userGroups
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|owner
argument_list|)
operator|.
name|getGroupNames
argument_list|()
argument_list|)
decl_stmt|;
name|userGroups
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|group
parameter_list|)
lambda|->
name|listOfAcls
operator|.
name|add
argument_list|(
operator|new
name|OzoneAcl
argument_list|(
name|OzoneAcl
operator|.
name|OzoneACLType
operator|.
name|GROUP
argument_list|,
name|group
argument_list|,
name|groupRights
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//ACLs passed as argument
if|if
condition|(
name|acls
operator|!=
literal|null
condition|)
block|{
name|Arrays
operator|.
name|stream
argument_list|(
name|acls
argument_list|)
operator|.
name|forEach
argument_list|(
parameter_list|(
name|acl
parameter_list|)
lambda|->
name|listOfAcls
operator|.
name|add
argument_list|(
name|acl
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating Bucket: {}/{}, with Versioning {} and "
operator|+
literal|"Storage Type set to {}"
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|versioning
argument_list|,
name|storageType
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
comment|/**    * Converts OzoneConts.Versioning enum to boolean.    *    * @param version    * @return corresponding boolean value    */
DECL|method|getBucketVersioningProtobuf ( Versioning version)
specifier|private
name|boolean
name|getBucketVersioningProtobuf
parameter_list|(
name|Versioning
name|version
parameter_list|)
block|{
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|version
condition|)
block|{
case|case
name|ENABLED
case|:
return|return
literal|true
return|;
case|case
name|NOT_DEFINED
case|:
case|case
name|DISABLED
case|:
default|default:
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|addBucketAcls (String volumeName, String bucketName, List<OzoneAcl> addAcls)
specifier|public
name|void
name|addBucketAcls
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|addAcls
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|addAcls
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|removeBucketAcls (String volumeName, String bucketName, List<OzoneAcl> removeAcls)
specifier|public
name|void
name|removeBucketAcls
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|removeAcls
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|removeAcls
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setBucketVersioning (String volumeName, String bucketName, Versioning versioning)
specifier|public
name|void
name|setBucketVersioning
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|Versioning
name|versioning
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|versioning
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setBucketStorageType (String volumeName, String bucketName, StorageType storageType)
specifier|public
name|void
name|setBucketStorageType
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|storageType
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|deleteBucket (String volumeName, String bucketName)
specifier|public
name|void
name|deleteBucket
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|checkBucketAccess (String volumeName, String bucketName)
specifier|public
name|void
name|checkBucketAccess
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getBucketDetails (String volumeName, String bucketName)
specifier|public
name|OzoneBucket
name|getBucketDetails
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|listBuckets (String volumeName, String bucketPrefix)
specifier|public
name|Iterator
argument_list|<
name|OzoneBucket
argument_list|>
name|listBuckets
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketPrefix
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|createKey (String volumeName, String bucketName, String keyName, long size)
specifier|public
name|OzoneOutputStream
name|createKey
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|keyName
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getKey (String volumeName, String bucketName, String keyName)
specifier|public
name|OzoneInputStream
name|getKey
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|keyName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|deleteKey (String volumeName, String bucketName, String keyName)
specifier|public
name|void
name|deleteKey
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|keyName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|listKeys (String volumeName, String bucketName, String keyPrefix)
specifier|public
name|List
argument_list|<
name|OzoneKey
argument_list|>
name|listKeys
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getKeyDetails (String volumeName, String bucketName, String keyName)
specifier|public
name|OzoneKey
name|getKeyDetails
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|keyName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
comment|/**    * Converts Versioning to boolean.    *    * @param version    * @return corresponding boolean value    */
DECL|method|getBucketVersioningFlag ( Versioning version)
specifier|private
name|boolean
name|getBucketVersioningFlag
parameter_list|(
name|Versioning
name|version
parameter_list|)
block|{
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|version
condition|)
block|{
case|case
name|ENABLED
case|:
return|return
literal|true
return|;
case|case
name|DISABLED
case|:
case|case
name|NOT_DEFINED
case|:
default|default:
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns a standard HttpPost Object to use for ozone post requests.    *    * @param user - If the use is being made on behalf of user, that user    * @param uriString  - UriString    * @return HttpPost    */
DECL|method|getHttpPost (String user, String uriString)
specifier|public
name|HttpPost
name|getHttpPost
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|uriString
parameter_list|)
block|{
name|HttpPost
name|httpPost
init|=
operator|new
name|HttpPost
argument_list|(
name|uriString
argument_list|)
decl_stmt|;
name|addOzoneHeaders
argument_list|(
name|httpPost
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|httpPost
operator|.
name|addHeader
argument_list|(
name|Header
operator|.
name|OZONE_USER
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
return|return
name|httpPost
return|;
block|}
comment|/**    * Add Ozone Headers.    *    * @param httpRequest - Http Request    */
DECL|method|addOzoneHeaders (HttpRequestBase httpRequest)
specifier|private
name|void
name|addOzoneHeaders
parameter_list|(
name|HttpRequestBase
name|httpRequest
parameter_list|)
block|{
name|SimpleDateFormat
name|format
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, dd MMM yyyy HH:mm:ss ZZZ"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|httpRequest
operator|.
name|addHeader
argument_list|(
name|Header
operator|.
name|OZONE_VERSION_HEADER
argument_list|,
name|Header
operator|.
name|OZONE_V1_VERSION_HEADER
argument_list|)
expr_stmt|;
name|httpRequest
operator|.
name|addHeader
argument_list|(
name|HttpHeaders
operator|.
name|DATE
argument_list|,
name|format
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|httpRequest
operator|.
name|addHeader
argument_list|(
name|HttpHeaders
operator|.
name|AUTHORIZATION
argument_list|,
name|Header
operator|.
name|OZONE_SIMPLE_AUTHENTICATION_SCHEME
operator|+
literal|" "
operator|+
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{   }
block|}
end_class

end_unit

