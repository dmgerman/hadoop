begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.ksm.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmBucketArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmKeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|protocol
operator|.
name|KeySpaceManagerProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|BucketArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|BucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|CreateBucketRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|CreateBucketResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|InfoBucketRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|InfoBucketResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|SetBucketPropertyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|SetBucketPropertyResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|DeleteBucketRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|DeleteBucketResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|CreateVolumeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|CreateVolumeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|LocateKeyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|LocateKeyResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|KeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|SetVolumePropertyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|SetVolumePropertyResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|DeleteVolumeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|DeleteVolumeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|InfoVolumeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|InfoVolumeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|CheckVolumeAccessRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|CheckVolumeAccessResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|ListBucketsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|ListBucketsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|ListKeysRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|ListKeysResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|VolumeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|OzoneAclInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|ListVolumeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|ListVolumeResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  *  The client side implementation of KeySpaceManagerProtocol.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|KeySpaceManagerProtocolClientSideTranslatorPB
specifier|public
specifier|final
class|class
name|KeySpaceManagerProtocolClientSideTranslatorPB
implements|implements
name|KeySpaceManagerProtocol
implements|,
name|ProtocolTranslator
implements|,
name|Closeable
block|{
comment|/**    * RpcController is not used and hence is set to null.    */
DECL|field|NULL_RPC_CONTROLLER
specifier|private
specifier|static
specifier|final
name|RpcController
name|NULL_RPC_CONTROLLER
init|=
literal|null
decl_stmt|;
DECL|field|rpcProxy
specifier|private
specifier|final
name|KeySpaceManagerProtocolPB
name|rpcProxy
decl_stmt|;
comment|/**    * Constructor for KeySpaceManger Client.    * @param rpcProxy    */
DECL|method|KeySpaceManagerProtocolClientSideTranslatorPB ( KeySpaceManagerProtocolPB rpcProxy)
specifier|public
name|KeySpaceManagerProtocolClientSideTranslatorPB
parameter_list|(
name|KeySpaceManagerProtocolPB
name|rpcProxy
parameter_list|)
block|{
name|this
operator|.
name|rpcProxy
operator|=
name|rpcProxy
expr_stmt|;
block|}
comment|/**    * Closes this stream and releases any system resources associated    * with it. If the stream is already closed then invoking this    * method has no effect.    *<p>    *<p> As noted in {@link AutoCloseable#close()}, cases where the    * close may fail require careful attention. It is strongly advised    * to relinquish the underlying resources and to internally    *<em>mark</em> the {@code Closeable} as closed, prior to throwing    * the {@code IOException}.    *    * @throws IOException if an I/O error occurs    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{    }
comment|/**    * Creates a volume.    *    * @param args - Arguments to create Volume.    * @throws IOException    */
annotation|@
name|Override
DECL|method|createVolume (KsmVolumeArgs args)
specifier|public
name|void
name|createVolume
parameter_list|(
name|KsmVolumeArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|CreateVolumeRequest
operator|.
name|Builder
name|req
init|=
name|CreateVolumeRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|VolumeInfo
name|volumeInfo
init|=
name|args
operator|.
name|getProtobuf
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeInfo
argument_list|(
name|volumeInfo
argument_list|)
expr_stmt|;
specifier|final
name|CreateVolumeResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|createVolume
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Volume creation failed, error:"
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Changes the owner of a volume.    *    * @param volume - Name of the volume.    * @param owner - Name of the owner.    * @throws IOException    */
annotation|@
name|Override
DECL|method|setOwner (String volume, String owner)
specifier|public
name|void
name|setOwner
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
name|SetVolumePropertyRequest
operator|.
name|Builder
name|req
init|=
name|SetVolumePropertyRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|owner
argument_list|)
expr_stmt|;
specifier|final
name|SetVolumePropertyResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|setVolumeProperty
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Volume owner change failed, error:"
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Changes the Quota on a volume.    *    * @param volume - Name of the volume.    * @param quota - Quota in bytes.    * @throws IOException    */
annotation|@
name|Override
DECL|method|setQuota (String volume, long quota)
specifier|public
name|void
name|setQuota
parameter_list|(
name|String
name|volume
parameter_list|,
name|long
name|quota
parameter_list|)
throws|throws
name|IOException
block|{
name|SetVolumePropertyRequest
operator|.
name|Builder
name|req
init|=
name|SetVolumePropertyRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
operator|.
name|setQuotaInBytes
argument_list|(
name|quota
argument_list|)
expr_stmt|;
specifier|final
name|SetVolumePropertyResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|setVolumeProperty
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Volume quota change failed, error:"
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Checks if the specified user can access this volume.    *    * @param volume - volume    * @param userAcl - user acls which needs to be checked for access    * @return true if the user has required access for the volume,    *         false otherwise    * @throws IOException    */
annotation|@
name|Override
DECL|method|checkVolumeAccess (String volume, OzoneAclInfo userAcl)
specifier|public
name|boolean
name|checkVolumeAccess
parameter_list|(
name|String
name|volume
parameter_list|,
name|OzoneAclInfo
name|userAcl
parameter_list|)
throws|throws
name|IOException
block|{
name|CheckVolumeAccessRequest
operator|.
name|Builder
name|req
init|=
name|CheckVolumeAccessRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
operator|.
name|setUserAcl
argument_list|(
name|userAcl
argument_list|)
expr_stmt|;
specifier|final
name|CheckVolumeAccessResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|checkVolumeAccess
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|ACCESS_DENIED
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|OK
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Check Volume Access failed, error:"
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Gets the volume information.    *    * @param volume - Volume name.    * @return KsmVolumeArgs or exception is thrown.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getVolumeInfo (String volume)
specifier|public
name|KsmVolumeArgs
name|getVolumeInfo
parameter_list|(
name|String
name|volume
parameter_list|)
throws|throws
name|IOException
block|{
name|InfoVolumeRequest
operator|.
name|Builder
name|req
init|=
name|InfoVolumeRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
expr_stmt|;
specifier|final
name|InfoVolumeResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|infoVolume
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Info Volume failed, error:"
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|KsmVolumeArgs
operator|.
name|getFromProtobuf
argument_list|(
name|resp
operator|.
name|getVolumeInfo
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Deletes an existing empty volume.    *    * @param volume - Name of the volume.    * @throws IOException    */
annotation|@
name|Override
DECL|method|deleteVolume (String volume)
specifier|public
name|void
name|deleteVolume
parameter_list|(
name|String
name|volume
parameter_list|)
throws|throws
name|IOException
block|{
name|DeleteVolumeRequest
operator|.
name|Builder
name|req
init|=
name|DeleteVolumeRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
expr_stmt|;
specifier|final
name|DeleteVolumeResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|deleteVolume
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Delete Volume failed, error:"
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Lists volume owned by a specific user.    *    * @param userName - user name    * @param prefix - Filter prefix -- Return only entries that match this.    * @param prevKey - Previous key -- List starts from the next from the    * prevkey    * @param maxKeys - Max number of keys to return.    * @return List of Volumes.    * @throws IOException    */
annotation|@
name|Override
DECL|method|listVolumeByUser (String userName, String prefix, String prevKey, int maxKeys)
specifier|public
name|List
argument_list|<
name|KsmVolumeArgs
argument_list|>
name|listVolumeByUser
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|prevKey
parameter_list|,
name|int
name|maxKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|ListVolumeRequest
operator|.
name|Builder
name|builder
init|=
name|ListVolumeRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|prevKey
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setPrevKey
argument_list|(
name|prevKey
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setMaxKeys
argument_list|(
name|maxKeys
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setScope
argument_list|(
name|ListVolumeRequest
operator|.
name|Scope
operator|.
name|VOLUMES_BY_USER
argument_list|)
expr_stmt|;
return|return
name|listVolume
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Lists volume all volumes in the cluster.    *    * @param prefix - Filter prefix -- Return only entries that match this.    * @param prevKey - Previous key -- List starts from the next from the    * prevkey    * @param maxKeys - Max number of keys to return.    * @return List of Volumes.    * @throws IOException    */
annotation|@
name|Override
DECL|method|listAllVolumes (String prefix, String prevKey, int maxKeys)
specifier|public
name|List
argument_list|<
name|KsmVolumeArgs
argument_list|>
name|listAllVolumes
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|prevKey
parameter_list|,
name|int
name|maxKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|ListVolumeRequest
operator|.
name|Builder
name|builder
init|=
name|ListVolumeRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|prevKey
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setPrevKey
argument_list|(
name|prevKey
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setMaxKeys
argument_list|(
name|maxKeys
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setScope
argument_list|(
name|ListVolumeRequest
operator|.
name|Scope
operator|.
name|VOLUMES_BY_CLUSTER
argument_list|)
expr_stmt|;
return|return
name|listVolume
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|listVolume (ListVolumeRequest request)
specifier|private
name|List
argument_list|<
name|KsmVolumeArgs
argument_list|>
name|listVolume
parameter_list|(
name|ListVolumeRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ListVolumeResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|listVolumes
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"List volume failed, error: "
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|KsmVolumeArgs
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|VolumeInfo
name|volInfo
range|:
name|resp
operator|.
name|getVolumeInfoList
argument_list|()
control|)
block|{
name|KsmVolumeArgs
name|volArgs
init|=
name|KsmVolumeArgs
operator|.
name|getFromProtobuf
argument_list|(
name|volInfo
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|volArgs
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
operator|.
name|getVolumeInfoList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|item
lambda|->
name|KsmVolumeArgs
operator|.
name|getFromProtobuf
argument_list|(
name|item
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a bucket.    *    * @param bucketInfo - BucketInfo to create bucket.    * @throws IOException    */
annotation|@
name|Override
DECL|method|createBucket (KsmBucketInfo bucketInfo)
specifier|public
name|void
name|createBucket
parameter_list|(
name|KsmBucketInfo
name|bucketInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|CreateBucketRequest
operator|.
name|Builder
name|req
init|=
name|CreateBucketRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|BucketInfo
name|bucketInfoProtobuf
init|=
name|bucketInfo
operator|.
name|getProtobuf
argument_list|()
decl_stmt|;
name|req
operator|.
name|setBucketInfo
argument_list|(
name|bucketInfoProtobuf
argument_list|)
expr_stmt|;
specifier|final
name|CreateBucketResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|createBucket
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Bucket creation failed, error: "
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Gets the bucket information.    *    * @param volume - Volume name.    * @param bucket - Bucket name.    * @return KsmBucketInfo or exception is thrown.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getBucketInfo (String volume, String bucket)
specifier|public
name|KsmBucketInfo
name|getBucketInfo
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
name|InfoBucketRequest
operator|.
name|Builder
name|req
init|=
name|InfoBucketRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|req
operator|.
name|setBucketName
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
specifier|final
name|InfoBucketResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|infoBucket
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|OK
condition|)
block|{
return|return
name|KsmBucketInfo
operator|.
name|getFromProtobuf
argument_list|(
name|resp
operator|.
name|getBucketInfo
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Info Bucket failed, error: "
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sets bucket property from args.    * @param args - BucketArgs.    * @throws IOException    */
annotation|@
name|Override
DECL|method|setBucketProperty (KsmBucketArgs args)
specifier|public
name|void
name|setBucketProperty
parameter_list|(
name|KsmBucketArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|SetBucketPropertyRequest
operator|.
name|Builder
name|req
init|=
name|SetBucketPropertyRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|BucketArgs
name|bucketArgs
init|=
name|args
operator|.
name|getProtobuf
argument_list|()
decl_stmt|;
name|req
operator|.
name|setBucketArgs
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
specifier|final
name|SetBucketPropertyResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|setBucketProperty
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Setting bucket property failed, error: "
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * List buckets in a volume.    *    * @param volumeName    * @param startKey    * @param prefix    * @param count    * @return    * @throws IOException    */
annotation|@
name|Override
DECL|method|listBuckets (String volumeName, String startKey, String prefix, int count)
specifier|public
name|List
argument_list|<
name|KsmBucketInfo
argument_list|>
name|listBuckets
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|startKey
parameter_list|,
name|String
name|prefix
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|KsmBucketInfo
argument_list|>
name|buckets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ListBucketsRequest
operator|.
name|Builder
name|reqBuilder
init|=
name|ListBucketsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|reqBuilder
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|reqBuilder
operator|.
name|setCount
argument_list|(
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|startKey
operator|!=
literal|null
condition|)
block|{
name|reqBuilder
operator|.
name|setStartKey
argument_list|(
name|startKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|reqBuilder
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|ListBucketsRequest
name|request
init|=
name|reqBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ListBucketsResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|listBuckets
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|OK
condition|)
block|{
name|buckets
operator|.
name|addAll
argument_list|(
name|resp
operator|.
name|getBucketInfoList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|KsmBucketInfo
operator|::
name|getFromProtobuf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buckets
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"List Buckets failed, error: "
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Allocate a block for a key, then use the returned meta info to talk to data    * node to actually write the key.    * @param args the args for the key to be allocated    * @return a handler to the key, returned client    * @throws IOException    */
annotation|@
name|Override
DECL|method|allocateKey (KsmKeyArgs args)
specifier|public
name|KsmKeyInfo
name|allocateKey
parameter_list|(
name|KsmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|LocateKeyRequest
operator|.
name|Builder
name|req
init|=
name|LocateKeyRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|KeyArgs
name|keyArgs
init|=
name|KeyArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|setDataSize
argument_list|(
name|args
operator|.
name|getDataSize
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|args
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|setFactor
argument_list|(
name|args
operator|.
name|getFactor
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|req
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
specifier|final
name|LocateKeyResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|createKey
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Create key failed, error:"
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|KsmKeyInfo
operator|.
name|getFromProtobuf
argument_list|(
name|resp
operator|.
name|getKeyInfo
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lookupKey (KsmKeyArgs args)
specifier|public
name|KsmKeyInfo
name|lookupKey
parameter_list|(
name|KsmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|LocateKeyRequest
operator|.
name|Builder
name|req
init|=
name|LocateKeyRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|KeyArgs
name|keyArgs
init|=
name|KeyArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|setDataSize
argument_list|(
name|args
operator|.
name|getDataSize
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|req
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
specifier|final
name|LocateKeyResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|lookupKey
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Lookup key failed, error:"
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|KsmKeyInfo
operator|.
name|getFromProtobuf
argument_list|(
name|resp
operator|.
name|getKeyInfo
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Deletes an existing key.    *    * @param args the args of the key.    * @throws IOException    */
annotation|@
name|Override
DECL|method|deleteKey (KsmKeyArgs args)
specifier|public
name|void
name|deleteKey
parameter_list|(
name|KsmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|LocateKeyRequest
operator|.
name|Builder
name|req
init|=
name|LocateKeyRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|KeyArgs
name|keyArgs
init|=
name|KeyArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|req
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
specifier|final
name|LocateKeyResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|deleteKey
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Delete key failed, error:"
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Deletes an existing empty bucket from volume.    * @param volume - Name of the volume.    * @param bucket - Name of the bucket.    * @throws IOException    */
DECL|method|deleteBucket (String volume, String bucket)
specifier|public
name|void
name|deleteBucket
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
name|DeleteBucketRequest
operator|.
name|Builder
name|req
init|=
name|DeleteBucketRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|req
operator|.
name|setBucketName
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
specifier|final
name|DeleteBucketResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|deleteBucket
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Delete Bucket failed, error:"
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * List keys in a bucket.    */
annotation|@
name|Override
DECL|method|listKeys (String volumeName, String bucketName, String startKey, String prefix, int maxKeys)
specifier|public
name|List
argument_list|<
name|KsmKeyInfo
argument_list|>
name|listKeys
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|startKey
parameter_list|,
name|String
name|prefix
parameter_list|,
name|int
name|maxKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|KsmKeyInfo
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ListKeysRequest
operator|.
name|Builder
name|reqBuilder
init|=
name|ListKeysRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|reqBuilder
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|reqBuilder
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|reqBuilder
operator|.
name|setCount
argument_list|(
name|maxKeys
argument_list|)
expr_stmt|;
if|if
condition|(
name|startKey
operator|!=
literal|null
condition|)
block|{
name|reqBuilder
operator|.
name|setStartKey
argument_list|(
name|startKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|reqBuilder
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|ListKeysRequest
name|request
init|=
name|reqBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ListKeysResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|listKeys
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|OK
condition|)
block|{
name|keys
operator|.
name|addAll
argument_list|(
name|resp
operator|.
name|getKeyInfoList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|KsmKeyInfo
operator|::
name|getFromProtobuf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|keys
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"List Keys failed, error: "
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return the proxy object underlying this protocol translator.    *    * @return the proxy object underlying this protocol translator.    */
annotation|@
name|Override
DECL|method|getUnderlyingProxyObject ()
specifier|public
name|Object
name|getUnderlyingProxyObject
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

