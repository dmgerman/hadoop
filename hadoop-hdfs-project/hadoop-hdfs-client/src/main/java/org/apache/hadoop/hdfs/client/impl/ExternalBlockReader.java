begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.client.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ReadOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|BlockReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ReplicaAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
operator|.
name|ClientMmap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_comment
comment|/**  * An ExternalBlockReader uses pluggable ReplicaAccessor objects to read from  * replicas.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ExternalBlockReader
specifier|public
specifier|final
class|class
name|ExternalBlockReader
implements|implements
name|BlockReader
block|{
DECL|field|accessor
specifier|private
specifier|final
name|ReplicaAccessor
name|accessor
decl_stmt|;
DECL|field|visibleLength
specifier|private
specifier|final
name|long
name|visibleLength
decl_stmt|;
DECL|field|pos
specifier|private
name|long
name|pos
decl_stmt|;
DECL|method|ExternalBlockReader (ReplicaAccessor accessor, long visibleLength, long startOffset)
name|ExternalBlockReader
parameter_list|(
name|ReplicaAccessor
name|accessor
parameter_list|,
name|long
name|visibleLength
parameter_list|,
name|long
name|startOffset
parameter_list|)
block|{
name|this
operator|.
name|accessor
operator|=
name|accessor
expr_stmt|;
name|this
operator|.
name|visibleLength
operator|=
name|visibleLength
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|startOffset
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] buf, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|nread
init|=
name|accessor
operator|.
name|read
argument_list|(
name|pos
argument_list|,
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|nread
operator|<
literal|0
condition|)
block|{
return|return
name|nread
return|;
block|}
name|pos
operator|+=
name|nread
expr_stmt|;
return|return
name|nread
return|;
block|}
annotation|@
name|Override
DECL|method|read (ByteBuffer buf)
specifier|public
name|int
name|read
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|nread
init|=
name|accessor
operator|.
name|read
argument_list|(
name|pos
argument_list|,
name|buf
argument_list|)
decl_stmt|;
if|if
condition|(
name|nread
operator|<
literal|0
condition|)
block|{
return|return
name|nread
return|;
block|}
name|pos
operator|+=
name|nread
expr_stmt|;
return|return
name|nread
return|;
block|}
annotation|@
name|Override
DECL|method|skip (long n)
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
comment|// You cannot skip backwards
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// You can't skip past the last offset that we want to read with this
comment|// block reader.
name|long
name|oldPos
init|=
name|pos
decl_stmt|;
name|pos
operator|+=
name|n
expr_stmt|;
if|if
condition|(
name|pos
operator|>
name|visibleLength
condition|)
block|{
name|pos
operator|=
name|visibleLength
expr_stmt|;
block|}
return|return
name|pos
operator|-
name|oldPos
return|;
block|}
annotation|@
name|Override
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
block|{
comment|// We return the amount of bytes between the current offset and the visible
comment|// length.  Some of the other block readers return a shorter length than
comment|// that.  The only advantage to returning a shorter length is that the
comment|// DFSInputStream will trash your block reader and create a new one if
comment|// someone tries to seek() beyond the available() region.
name|long
name|diff
init|=
name|visibleLength
operator|-
name|pos
decl_stmt|;
if|if
condition|(
name|diff
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
else|else
block|{
return|return
operator|(
name|int
operator|)
name|diff
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|accessor
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFully (byte[] buf, int offset, int len)
specifier|public
name|void
name|readFully
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockReaderUtil
operator|.
name|readFully
argument_list|(
name|this
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readAll (byte[] buf, int offset, int len)
specifier|public
name|int
name|readAll
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|BlockReaderUtil
operator|.
name|readAll
argument_list|(
name|this
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isShortCircuit ()
specifier|public
name|boolean
name|isShortCircuit
parameter_list|()
block|{
return|return
name|accessor
operator|.
name|isShortCircuit
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getClientMmap (EnumSet<ReadOption> opts)
specifier|public
name|ClientMmap
name|getClientMmap
parameter_list|(
name|EnumSet
argument_list|<
name|ReadOption
argument_list|>
name|opts
parameter_list|)
block|{
comment|// For now, pluggable ReplicaAccessors do not support zero-copy.
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getDataChecksum ()
specifier|public
name|DataChecksum
name|getDataChecksum
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getNetworkDistance ()
specifier|public
name|int
name|getNetworkDistance
parameter_list|()
block|{
return|return
name|accessor
operator|.
name|getNetworkDistance
argument_list|()
return|;
block|}
block|}
end_class

end_unit

