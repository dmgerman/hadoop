begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * Rolling upgrade information  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|RollingUpgradeInfo
specifier|public
class|class
name|RollingUpgradeInfo
extends|extends
name|RollingUpgradeStatus
block|{
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|finalizeTime
specifier|private
name|long
name|finalizeTime
decl_stmt|;
DECL|field|createdRollbackImages
specifier|private
name|boolean
name|createdRollbackImages
decl_stmt|;
DECL|method|RollingUpgradeInfo (String blockPoolId, boolean createdRollbackImages, long startTime, long finalizeTime)
specifier|public
name|RollingUpgradeInfo
parameter_list|(
name|String
name|blockPoolId
parameter_list|,
name|boolean
name|createdRollbackImages
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|finalizeTime
parameter_list|)
block|{
name|super
argument_list|(
name|blockPoolId
argument_list|,
name|finalizeTime
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|createdRollbackImages
operator|=
name|createdRollbackImages
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|finalizeTime
operator|=
name|finalizeTime
expr_stmt|;
block|}
DECL|method|createdRollbackImages ()
specifier|public
name|boolean
name|createdRollbackImages
parameter_list|()
block|{
return|return
name|createdRollbackImages
return|;
block|}
DECL|method|setCreatedRollbackImages (boolean created)
specifier|public
name|void
name|setCreatedRollbackImages
parameter_list|(
name|boolean
name|created
parameter_list|)
block|{
name|this
operator|.
name|createdRollbackImages
operator|=
name|created
expr_stmt|;
block|}
DECL|method|isStarted ()
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|startTime
operator|!=
literal|0
return|;
block|}
comment|/** @return The rolling upgrade starting time. */
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
annotation|@
name|Override
DECL|method|isFinalized ()
specifier|public
name|boolean
name|isFinalized
parameter_list|()
block|{
return|return
name|finalizeTime
operator|!=
literal|0
return|;
block|}
comment|/**    * Finalize the upgrade if not already finalized    */
DECL|method|finalize (long finalizeTime)
specifier|public
name|void
name|finalize
parameter_list|(
name|long
name|finalizeTime
parameter_list|)
block|{
if|if
condition|(
name|finalizeTime
operator|!=
literal|0
condition|)
block|{
name|this
operator|.
name|finalizeTime
operator|=
name|finalizeTime
expr_stmt|;
name|createdRollbackImages
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|method|getFinalizeTime ()
specifier|public
name|long
name|getFinalizeTime
parameter_list|()
block|{
return|return
name|finalizeTime
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|//only use lower 32 bits
return|return
name|super
operator|.
name|hashCode
argument_list|()
operator|^
operator|(
name|int
operator|)
name|startTime
operator|^
operator|(
name|int
operator|)
name|finalizeTime
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|RollingUpgradeInfo
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|RollingUpgradeInfo
name|that
init|=
operator|(
name|RollingUpgradeInfo
operator|)
name|obj
decl_stmt|;
return|return
name|super
operator|.
name|equals
argument_list|(
name|that
argument_list|)
operator|&&
name|this
operator|.
name|startTime
operator|==
name|that
operator|.
name|startTime
operator|&&
name|this
operator|.
name|finalizeTime
operator|==
name|that
operator|.
name|finalizeTime
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|"\n     Start Time: "
operator|+
operator|(
name|startTime
operator|==
literal|0
condition|?
literal|"<NOT STARTED>"
else|:
name|timestamp2String
argument_list|(
name|startTime
argument_list|)
operator|)
operator|+
literal|"\n  Finalize Time: "
operator|+
operator|(
name|finalizeTime
operator|==
literal|0
condition|?
literal|"<NOT FINALIZED>"
else|:
name|timestamp2String
argument_list|(
name|finalizeTime
argument_list|)
operator|)
return|;
block|}
DECL|method|timestamp2String (long timestamp)
specifier|private
specifier|static
name|String
name|timestamp2String
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
return|return
operator|new
name|Date
argument_list|(
name|timestamp
argument_list|)
operator|+
literal|" (="
operator|+
name|timestamp
operator|+
literal|")"
return|;
block|}
DECL|class|Bean
specifier|public
specifier|static
class|class
name|Bean
block|{
DECL|field|blockPoolId
specifier|private
specifier|final
name|String
name|blockPoolId
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|finalizeTime
specifier|private
specifier|final
name|long
name|finalizeTime
decl_stmt|;
DECL|field|createdRollbackImages
specifier|private
specifier|final
name|boolean
name|createdRollbackImages
decl_stmt|;
DECL|method|Bean (RollingUpgradeInfo f)
specifier|public
name|Bean
parameter_list|(
name|RollingUpgradeInfo
name|f
parameter_list|)
block|{
name|this
operator|.
name|blockPoolId
operator|=
name|f
operator|.
name|getBlockPoolId
argument_list|()
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|f
operator|.
name|startTime
expr_stmt|;
name|this
operator|.
name|finalizeTime
operator|=
name|f
operator|.
name|finalizeTime
expr_stmt|;
name|this
operator|.
name|createdRollbackImages
operator|=
name|f
operator|.
name|createdRollbackImages
argument_list|()
expr_stmt|;
block|}
DECL|method|getBlockPoolId ()
specifier|public
name|String
name|getBlockPoolId
parameter_list|()
block|{
return|return
name|blockPoolId
return|;
block|}
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
DECL|method|getFinalizeTime ()
specifier|public
name|long
name|getFinalizeTime
parameter_list|()
block|{
return|return
name|finalizeTime
return|;
block|}
DECL|method|isCreatedRollbackImages ()
specifier|public
name|boolean
name|isCreatedRollbackImages
parameter_list|()
block|{
return|return
name|createdRollbackImages
return|;
block|}
block|}
block|}
end_class

end_unit

