begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|BlockReadStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|StripingChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|AlignedStripe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|StripingChunkReadResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|RawErasureDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
operator|.
name|CorruptedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_comment
comment|/**  * The reader for reading a complete {@link StripedBlockUtil.AlignedStripe}.  * Note that an {@link StripedBlockUtil.AlignedStripe} may cross multiple  * stripes with cellSize width.  */
end_comment

begin_class
DECL|class|StripeReader
specifier|abstract
class|class
name|StripeReader
block|{
DECL|class|ReaderRetryPolicy
specifier|static
class|class
name|ReaderRetryPolicy
block|{
DECL|field|fetchEncryptionKeyTimes
specifier|private
name|int
name|fetchEncryptionKeyTimes
init|=
literal|1
decl_stmt|;
DECL|field|fetchTokenTimes
specifier|private
name|int
name|fetchTokenTimes
init|=
literal|1
decl_stmt|;
DECL|method|refetchEncryptionKey ()
name|void
name|refetchEncryptionKey
parameter_list|()
block|{
name|fetchEncryptionKeyTimes
operator|--
expr_stmt|;
block|}
DECL|method|refetchToken ()
name|void
name|refetchToken
parameter_list|()
block|{
name|fetchTokenTimes
operator|--
expr_stmt|;
block|}
DECL|method|shouldRefetchEncryptionKey ()
name|boolean
name|shouldRefetchEncryptionKey
parameter_list|()
block|{
return|return
name|fetchEncryptionKeyTimes
operator|>
literal|0
return|;
block|}
DECL|method|shouldRefetchToken ()
name|boolean
name|shouldRefetchToken
parameter_list|()
block|{
return|return
name|fetchTokenTimes
operator|>
literal|0
return|;
block|}
block|}
DECL|class|BlockReaderInfo
specifier|static
class|class
name|BlockReaderInfo
block|{
DECL|field|reader
specifier|final
name|BlockReader
name|reader
decl_stmt|;
DECL|field|datanode
specifier|final
name|DatanodeInfo
name|datanode
decl_stmt|;
comment|/**      * when initializing block readers, their starting offsets are set to the      * same number: the smallest internal block offsets among all the readers.      * This is because it is possible that for some internal blocks we have to      * read "backwards" for decoding purpose. We thus use this offset array to      * track offsets for all the block readers so that we can skip data if      * necessary.      */
DECL|field|blockReaderOffset
name|long
name|blockReaderOffset
decl_stmt|;
comment|/**      * We use this field to indicate whether we should use this reader. In case      * we hit any issue with this reader, we set this field to true and avoid      * using it for the next stripe.      */
DECL|field|shouldSkip
name|boolean
name|shouldSkip
init|=
literal|false
decl_stmt|;
DECL|method|BlockReaderInfo (BlockReader reader, DatanodeInfo dn, long offset)
name|BlockReaderInfo
parameter_list|(
name|BlockReader
name|reader
parameter_list|,
name|DatanodeInfo
name|dn
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|datanode
operator|=
name|dn
expr_stmt|;
name|this
operator|.
name|blockReaderOffset
operator|=
name|offset
expr_stmt|;
block|}
DECL|method|setOffset (long offset)
name|void
name|setOffset
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
name|this
operator|.
name|blockReaderOffset
operator|=
name|offset
expr_stmt|;
block|}
DECL|method|skip ()
name|void
name|skip
parameter_list|()
block|{
name|this
operator|.
name|shouldSkip
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|field|futures
specifier|private
specifier|final
name|Map
argument_list|<
name|Future
argument_list|<
name|BlockReadStats
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|futures
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|alignedStripe
specifier|protected
specifier|final
name|AlignedStripe
name|alignedStripe
decl_stmt|;
DECL|field|service
specifier|private
specifier|final
name|CompletionService
argument_list|<
name|BlockReadStats
argument_list|>
name|service
decl_stmt|;
DECL|field|targetBlocks
specifier|protected
specifier|final
name|LocatedBlock
index|[]
name|targetBlocks
decl_stmt|;
DECL|field|corruptedBlocks
specifier|protected
specifier|final
name|CorruptedBlocks
name|corruptedBlocks
decl_stmt|;
DECL|field|readerInfos
specifier|protected
specifier|final
name|BlockReaderInfo
index|[]
name|readerInfos
decl_stmt|;
DECL|field|ecPolicy
specifier|protected
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
decl_stmt|;
DECL|field|dataBlkNum
specifier|protected
specifier|final
name|short
name|dataBlkNum
decl_stmt|;
DECL|field|parityBlkNum
specifier|protected
specifier|final
name|short
name|parityBlkNum
decl_stmt|;
DECL|field|cellSize
specifier|protected
specifier|final
name|int
name|cellSize
decl_stmt|;
DECL|field|decoder
specifier|protected
specifier|final
name|RawErasureDecoder
name|decoder
decl_stmt|;
DECL|field|dfsStripedInputStream
specifier|protected
specifier|final
name|DFSStripedInputStream
name|dfsStripedInputStream
decl_stmt|;
DECL|field|decodeInputs
specifier|protected
name|ECChunk
index|[]
name|decodeInputs
decl_stmt|;
DECL|method|StripeReader (AlignedStripe alignedStripe, ErasureCodingPolicy ecPolicy, LocatedBlock[] targetBlocks, BlockReaderInfo[] readerInfos, CorruptedBlocks corruptedBlocks, RawErasureDecoder decoder, DFSStripedInputStream dfsStripedInputStream)
name|StripeReader
parameter_list|(
name|AlignedStripe
name|alignedStripe
parameter_list|,
name|ErasureCodingPolicy
name|ecPolicy
parameter_list|,
name|LocatedBlock
index|[]
name|targetBlocks
parameter_list|,
name|BlockReaderInfo
index|[]
name|readerInfos
parameter_list|,
name|CorruptedBlocks
name|corruptedBlocks
parameter_list|,
name|RawErasureDecoder
name|decoder
parameter_list|,
name|DFSStripedInputStream
name|dfsStripedInputStream
parameter_list|)
block|{
name|this
operator|.
name|alignedStripe
operator|=
name|alignedStripe
expr_stmt|;
name|this
operator|.
name|ecPolicy
operator|=
name|ecPolicy
expr_stmt|;
name|this
operator|.
name|dataBlkNum
operator|=
operator|(
name|short
operator|)
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
expr_stmt|;
name|this
operator|.
name|parityBlkNum
operator|=
operator|(
name|short
operator|)
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
expr_stmt|;
name|this
operator|.
name|cellSize
operator|=
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|targetBlocks
operator|=
name|targetBlocks
expr_stmt|;
name|this
operator|.
name|readerInfos
operator|=
name|readerInfos
expr_stmt|;
name|this
operator|.
name|corruptedBlocks
operator|=
name|corruptedBlocks
expr_stmt|;
name|this
operator|.
name|decoder
operator|=
name|decoder
expr_stmt|;
name|this
operator|.
name|dfsStripedInputStream
operator|=
name|dfsStripedInputStream
expr_stmt|;
name|service
operator|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|dfsStripedInputStream
operator|.
name|getStripedReadsThreadPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prepare all the data chunks.    */
DECL|method|prepareDecodeInputs ()
specifier|abstract
name|void
name|prepareDecodeInputs
parameter_list|()
function_decl|;
comment|/**    * Prepare the parity chunk and block reader if necessary.    */
DECL|method|prepareParityChunk (int index)
specifier|abstract
name|boolean
name|prepareParityChunk
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
comment|/**    * Decode to get the missing data.    * @throws IOException if the decoder is closed.    */
DECL|method|decode ()
specifier|abstract
name|void
name|decode
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/*    * Default close do nothing.    */
DECL|method|close ()
name|void
name|close
parameter_list|()
block|{   }
DECL|method|updateState4SuccessRead (StripingChunkReadResult result)
name|void
name|updateState4SuccessRead
parameter_list|(
name|StripingChunkReadResult
name|result
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|result
operator|.
name|state
operator|==
name|StripingChunkReadResult
operator|.
name|SUCCESSFUL
argument_list|)
expr_stmt|;
name|readerInfos
index|[
name|result
operator|.
name|index
index|]
operator|.
name|setOffset
argument_list|(
name|alignedStripe
operator|.
name|getOffsetInBlock
argument_list|()
operator|+
name|alignedStripe
operator|.
name|getSpanInBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkMissingBlocks ()
specifier|private
name|void
name|checkMissingBlocks
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|alignedStripe
operator|.
name|missingChunksNum
operator|>
name|parityBlkNum
condition|)
block|{
name|clearFutures
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|alignedStripe
operator|.
name|missingChunksNum
operator|+
literal|" missing blocks, the stripe is: "
operator|+
name|alignedStripe
operator|+
literal|"; locatedBlocks is: "
operator|+
name|dfsStripedInputStream
operator|.
name|getLocatedBlocks
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * We need decoding. Thus go through all the data chunks and make sure we    * submit read requests for all of them.    */
DECL|method|readDataForDecoding ()
specifier|private
name|void
name|readDataForDecoding
parameter_list|()
throws|throws
name|IOException
block|{
name|prepareDecodeInputs
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataBlkNum
condition|;
name|i
operator|++
control|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
operator|.
name|state
operator|==
name|StripingChunk
operator|.
name|REQUESTED
condition|)
block|{
if|if
condition|(
operator|!
name|readChunk
argument_list|(
name|targetBlocks
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
condition|)
block|{
name|alignedStripe
operator|.
name|missingChunksNum
operator|++
expr_stmt|;
block|}
block|}
block|}
name|checkMissingBlocks
argument_list|()
expr_stmt|;
block|}
DECL|method|readParityChunks (int num)
name|void
name|readParityChunks
parameter_list|(
name|int
name|num
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|dataBlkNum
init|,
name|j
init|=
literal|0
init|;
name|i
operator|<
name|dataBlkNum
operator|+
name|parityBlkNum
operator|&&
name|j
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|prepareParityChunk
argument_list|(
name|i
argument_list|)
operator|&&
name|readChunk
argument_list|(
name|targetBlocks
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
condition|)
block|{
name|j
operator|++
expr_stmt|;
block|}
else|else
block|{
name|alignedStripe
operator|.
name|missingChunksNum
operator|++
expr_stmt|;
block|}
block|}
block|}
name|checkMissingBlocks
argument_list|()
expr_stmt|;
block|}
DECL|method|getReadStrategies (StripingChunk chunk)
specifier|private
name|ByteBufferStrategy
index|[]
name|getReadStrategies
parameter_list|(
name|StripingChunk
name|chunk
parameter_list|)
block|{
if|if
condition|(
name|chunk
operator|.
name|useByteBuffer
argument_list|()
condition|)
block|{
name|ByteBufferStrategy
name|strategy
init|=
operator|new
name|ByteBufferStrategy
argument_list|(
name|chunk
operator|.
name|getByteBuffer
argument_list|()
argument_list|,
name|dfsStripedInputStream
operator|.
name|getReadStatistics
argument_list|()
argument_list|,
name|dfsStripedInputStream
operator|.
name|getDFSClient
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ByteBufferStrategy
index|[]
block|{
name|strategy
block|}
return|;
block|}
name|ByteBufferStrategy
index|[]
name|strategies
init|=
operator|new
name|ByteBufferStrategy
index|[
name|chunk
operator|.
name|getChunkBuffer
argument_list|()
operator|.
name|getSlices
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strategies
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ByteBuffer
name|buffer
init|=
name|chunk
operator|.
name|getChunkBuffer
argument_list|()
operator|.
name|getSlice
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|strategies
index|[
name|i
index|]
operator|=
operator|new
name|ByteBufferStrategy
argument_list|(
name|buffer
argument_list|,
name|dfsStripedInputStream
operator|.
name|getReadStatistics
argument_list|()
argument_list|,
name|dfsStripedInputStream
operator|.
name|getDFSClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|strategies
return|;
block|}
DECL|method|readToBuffer (BlockReader blockReader, DatanodeInfo currentNode, ByteBufferStrategy strategy, ExtendedBlock currentBlock)
specifier|private
name|int
name|readToBuffer
parameter_list|(
name|BlockReader
name|blockReader
parameter_list|,
name|DatanodeInfo
name|currentNode
parameter_list|,
name|ByteBufferStrategy
name|strategy
parameter_list|,
name|ExtendedBlock
name|currentBlock
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|targetLength
init|=
name|strategy
operator|.
name|getTargetLength
argument_list|()
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|length
operator|<
name|targetLength
condition|)
block|{
name|int
name|ret
init|=
name|strategy
operator|.
name|readFromBlock
argument_list|(
name|blockReader
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected EOS from the reader"
argument_list|)
throw|;
block|}
name|length
operator|+=
name|ret
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
catch|catch
parameter_list|(
name|ChecksumException
name|ce
parameter_list|)
block|{
name|DFSClient
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found Checksum error for "
operator|+
name|currentBlock
operator|+
literal|" from "
operator|+
name|currentNode
operator|+
literal|" at "
operator|+
name|ce
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
comment|//Clear buffer to make next decode success
name|strategy
operator|.
name|getReadBuffer
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// we want to remember which block replicas we have tried
name|corruptedBlocks
operator|.
name|addCorruptedBlock
argument_list|(
name|currentBlock
argument_list|,
name|currentNode
argument_list|)
expr_stmt|;
throw|throw
name|ce
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|DFSClient
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while reading from "
operator|+
name|currentBlock
operator|+
literal|" of "
operator|+
name|dfsStripedInputStream
operator|.
name|getSrc
argument_list|()
operator|+
literal|" from "
operator|+
name|currentNode
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//Clear buffer to make next decode success
name|strategy
operator|.
name|getReadBuffer
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|readCells (final BlockReader reader, final DatanodeInfo datanode, final long currentReaderOffset, final long targetReaderOffset, final ByteBufferStrategy[] strategies, final ExtendedBlock currentBlock)
specifier|private
name|Callable
argument_list|<
name|BlockReadStats
argument_list|>
name|readCells
parameter_list|(
specifier|final
name|BlockReader
name|reader
parameter_list|,
specifier|final
name|DatanodeInfo
name|datanode
parameter_list|,
specifier|final
name|long
name|currentReaderOffset
parameter_list|,
specifier|final
name|long
name|targetReaderOffset
parameter_list|,
specifier|final
name|ByteBufferStrategy
index|[]
name|strategies
parameter_list|,
specifier|final
name|ExtendedBlock
name|currentBlock
parameter_list|)
block|{
return|return
parameter_list|()
lambda|->
block|{
comment|// reader can be null if getBlockReaderWithRetry failed or
comment|// the reader hit exception before
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The BlockReader is null. "
operator|+
literal|"The BlockReader creation failed or the reader hit exception."
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|currentReaderOffset
operator|<=
name|targetReaderOffset
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentReaderOffset
operator|<
name|targetReaderOffset
condition|)
block|{
name|long
name|skipped
init|=
name|reader
operator|.
name|skip
argument_list|(
name|targetReaderOffset
operator|-
name|currentReaderOffset
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|skipped
operator|==
name|targetReaderOffset
operator|-
name|currentReaderOffset
argument_list|)
expr_stmt|;
block|}
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ByteBufferStrategy
name|strategy
range|:
name|strategies
control|)
block|{
name|int
name|bytesReead
init|=
name|readToBuffer
argument_list|(
name|reader
argument_list|,
name|datanode
argument_list|,
name|strategy
argument_list|,
name|currentBlock
argument_list|)
decl_stmt|;
name|ret
operator|+=
name|bytesReead
expr_stmt|;
block|}
return|return
operator|new
name|BlockReadStats
argument_list|(
name|ret
argument_list|,
name|reader
operator|.
name|isShortCircuit
argument_list|()
argument_list|,
name|reader
operator|.
name|getNetworkDistance
argument_list|()
argument_list|)
return|;
block|}
return|;
block|}
DECL|method|readChunk (final LocatedBlock block, int chunkIndex)
name|boolean
name|readChunk
parameter_list|(
specifier|final
name|LocatedBlock
name|block
parameter_list|,
name|int
name|chunkIndex
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StripingChunk
name|chunk
init|=
name|alignedStripe
operator|.
name|chunks
index|[
name|chunkIndex
index|]
decl_stmt|;
if|if
condition|(
name|block
operator|==
literal|null
condition|)
block|{
name|chunk
operator|.
name|state
operator|=
name|StripingChunk
operator|.
name|MISSING
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|readerInfos
index|[
name|chunkIndex
index|]
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|dfsStripedInputStream
operator|.
name|createBlockReader
argument_list|(
name|block
argument_list|,
name|alignedStripe
operator|.
name|getOffsetInBlock
argument_list|()
argument_list|,
name|targetBlocks
argument_list|,
name|readerInfos
argument_list|,
name|chunkIndex
argument_list|)
condition|)
block|{
name|chunk
operator|.
name|state
operator|=
name|StripingChunk
operator|.
name|MISSING
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|readerInfos
index|[
name|chunkIndex
index|]
operator|.
name|shouldSkip
condition|)
block|{
name|chunk
operator|.
name|state
operator|=
name|StripingChunk
operator|.
name|MISSING
expr_stmt|;
return|return
literal|false
return|;
block|}
name|chunk
operator|.
name|state
operator|=
name|StripingChunk
operator|.
name|PENDING
expr_stmt|;
name|Callable
argument_list|<
name|BlockReadStats
argument_list|>
name|readCallable
init|=
name|readCells
argument_list|(
name|readerInfos
index|[
name|chunkIndex
index|]
operator|.
name|reader
argument_list|,
name|readerInfos
index|[
name|chunkIndex
index|]
operator|.
name|datanode
argument_list|,
name|readerInfos
index|[
name|chunkIndex
index|]
operator|.
name|blockReaderOffset
argument_list|,
name|alignedStripe
operator|.
name|getOffsetInBlock
argument_list|()
argument_list|,
name|getReadStrategies
argument_list|(
name|chunk
argument_list|)
argument_list|,
name|block
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|BlockReadStats
argument_list|>
name|request
init|=
name|service
operator|.
name|submit
argument_list|(
name|readCallable
argument_list|)
decl_stmt|;
name|futures
operator|.
name|put
argument_list|(
name|request
argument_list|,
name|chunkIndex
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * read the whole stripe. do decoding if necessary    */
DECL|method|readStripe ()
name|void
name|readStripe
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataBlkNum
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
operator|.
name|state
operator|!=
name|StripingChunk
operator|.
name|ALLZERO
condition|)
block|{
if|if
condition|(
operator|!
name|readChunk
argument_list|(
name|targetBlocks
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
condition|)
block|{
name|alignedStripe
operator|.
name|missingChunksNum
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|// There are missing block locations at this stage. Thus we need to read
comment|// the full stripe and one more parity block.
if|if
condition|(
name|alignedStripe
operator|.
name|missingChunksNum
operator|>
literal|0
condition|)
block|{
name|checkMissingBlocks
argument_list|()
expr_stmt|;
name|readDataForDecoding
argument_list|()
expr_stmt|;
comment|// read parity chunks
name|readParityChunks
argument_list|(
name|alignedStripe
operator|.
name|missingChunksNum
argument_list|)
expr_stmt|;
block|}
comment|// TODO: for a full stripe we can start reading (dataBlkNum + 1) chunks
comment|// Input buffers for potential decode operation, which remains null until
comment|// first read failure
while|while
condition|(
operator|!
name|futures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|StripingChunkReadResult
name|r
init|=
name|StripedBlockUtil
operator|.
name|getNextCompletedStripedRead
argument_list|(
name|service
argument_list|,
name|futures
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|dfsStripedInputStream
operator|.
name|updateReadStats
argument_list|(
name|r
operator|.
name|getReadStats
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|DFSClient
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|DFSClient
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Read task returned: "
operator|+
name|r
operator|+
literal|", for stripe "
operator|+
name|alignedStripe
argument_list|)
expr_stmt|;
block|}
name|StripingChunk
name|returnedChunk
init|=
name|alignedStripe
operator|.
name|chunks
index|[
name|r
operator|.
name|index
index|]
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|returnedChunk
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|returnedChunk
operator|.
name|state
operator|==
name|StripingChunk
operator|.
name|PENDING
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|state
operator|==
name|StripingChunkReadResult
operator|.
name|SUCCESSFUL
condition|)
block|{
name|returnedChunk
operator|.
name|state
operator|=
name|StripingChunk
operator|.
name|FETCHED
expr_stmt|;
name|alignedStripe
operator|.
name|fetchedChunksNum
operator|++
expr_stmt|;
name|updateState4SuccessRead
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|alignedStripe
operator|.
name|fetchedChunksNum
operator|==
name|dataBlkNum
condition|)
block|{
name|clearFutures
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|returnedChunk
operator|.
name|state
operator|=
name|StripingChunk
operator|.
name|MISSING
expr_stmt|;
comment|// close the corresponding reader
name|dfsStripedInputStream
operator|.
name|closeReader
argument_list|(
name|readerInfos
index|[
name|r
operator|.
name|index
index|]
argument_list|)
expr_stmt|;
specifier|final
name|int
name|missing
init|=
name|alignedStripe
operator|.
name|missingChunksNum
decl_stmt|;
name|alignedStripe
operator|.
name|missingChunksNum
operator|++
expr_stmt|;
name|checkMissingBlocks
argument_list|()
expr_stmt|;
name|readDataForDecoding
argument_list|()
expr_stmt|;
name|readParityChunks
argument_list|(
name|alignedStripe
operator|.
name|missingChunksNum
operator|-
name|missing
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|String
name|err
init|=
literal|"Read request interrupted"
decl_stmt|;
name|DFSClient
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|clearFutures
argument_list|()
expr_stmt|;
comment|// Don't decode if read interrupted
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|alignedStripe
operator|.
name|missingChunksNum
operator|>
literal|0
condition|)
block|{
name|decode
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Some fetched {@link StripingChunk} might be stored in original application    * buffer instead of prepared decode input buffers. Some others are beyond    * the range of the internal blocks and should correspond to all zero bytes.    * When all pending requests have returned, this method should be called to    * finalize decode input buffers.    */
DECL|method|finalizeDecodeInputs ()
name|void
name|finalizeDecodeInputs
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alignedStripe
operator|.
name|chunks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StripingChunk
name|chunk
init|=
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|chunk
operator|!=
literal|null
operator|&&
name|chunk
operator|.
name|state
operator|==
name|StripingChunk
operator|.
name|FETCHED
condition|)
block|{
if|if
condition|(
name|chunk
operator|.
name|useChunkBuffer
argument_list|()
condition|)
block|{
name|chunk
operator|.
name|getChunkBuffer
argument_list|()
operator|.
name|copyTo
argument_list|(
name|decodeInputs
index|[
name|i
index|]
operator|.
name|getBuffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|chunk
operator|.
name|getByteBuffer
argument_list|()
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|chunk
operator|!=
literal|null
operator|&&
name|chunk
operator|.
name|state
operator|==
name|StripingChunk
operator|.
name|ALLZERO
condition|)
block|{
name|decodeInputs
index|[
name|i
index|]
operator|.
name|setAllZero
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Decode based on the given input buffers and erasure coding policy.    */
DECL|method|decodeAndFillBuffer (boolean fillBuffer)
name|void
name|decodeAndFillBuffer
parameter_list|(
name|boolean
name|fillBuffer
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Step 1: prepare indices and output buffers for missing data units
name|int
index|[]
name|decodeIndices
init|=
name|prepareErasedIndices
argument_list|()
decl_stmt|;
specifier|final
name|int
name|decodeChunkNum
init|=
name|decodeIndices
operator|.
name|length
decl_stmt|;
name|ECChunk
index|[]
name|outputs
init|=
operator|new
name|ECChunk
index|[
name|decodeChunkNum
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|decodeChunkNum
condition|;
name|i
operator|++
control|)
block|{
name|outputs
index|[
name|i
index|]
operator|=
name|decodeInputs
index|[
name|decodeIndices
index|[
name|i
index|]
index|]
expr_stmt|;
name|decodeInputs
index|[
name|decodeIndices
index|[
name|i
index|]
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|long
name|start
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
comment|// Step 2: decode into prepared output buffers
name|decoder
operator|.
name|decode
argument_list|(
name|decodeInputs
argument_list|,
name|decodeIndices
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
comment|// Step 3: fill original application buffer with decoded data
if|if
condition|(
name|fillBuffer
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|decodeIndices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|missingBlkIdx
init|=
name|decodeIndices
index|[
name|i
index|]
decl_stmt|;
name|StripingChunk
name|chunk
init|=
name|alignedStripe
operator|.
name|chunks
index|[
name|missingBlkIdx
index|]
decl_stmt|;
if|if
condition|(
name|chunk
operator|.
name|state
operator|==
name|StripingChunk
operator|.
name|MISSING
operator|&&
name|chunk
operator|.
name|useChunkBuffer
argument_list|()
condition|)
block|{
name|chunk
operator|.
name|getChunkBuffer
argument_list|()
operator|.
name|copyFrom
argument_list|(
name|outputs
index|[
name|i
index|]
operator|.
name|getBuffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|long
name|end
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
comment|// Decoding time includes CPU time on erasure coding and memory copying of
comment|// decoded data.
name|dfsStripedInputStream
operator|.
name|readStatistics
operator|.
name|addErasureCodingDecodingTime
argument_list|(
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prepare erased indices.    */
DECL|method|prepareErasedIndices ()
name|int
index|[]
name|prepareErasedIndices
parameter_list|()
block|{
name|int
index|[]
name|decodeIndices
init|=
operator|new
name|int
index|[
name|parityBlkNum
index|]
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alignedStripe
operator|.
name|chunks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
operator|.
name|state
operator|==
name|StripingChunk
operator|.
name|MISSING
condition|)
block|{
name|decodeIndices
index|[
name|pos
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
name|int
index|[]
name|erasedIndices
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|decodeIndices
argument_list|,
name|pos
argument_list|)
decl_stmt|;
return|return
name|erasedIndices
return|;
block|}
DECL|method|clearFutures ()
name|void
name|clearFutures
parameter_list|()
block|{
for|for
control|(
name|Future
name|future
range|:
name|futures
operator|.
name|keySet
argument_list|()
control|)
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|futures
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|useDirectBuffer ()
name|boolean
name|useDirectBuffer
parameter_list|()
block|{
return|return
name|decoder
operator|.
name|preferDirectBuffer
argument_list|()
return|;
block|}
block|}
end_class

end_unit

