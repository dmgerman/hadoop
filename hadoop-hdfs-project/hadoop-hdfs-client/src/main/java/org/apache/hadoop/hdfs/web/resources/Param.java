begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/** Base class of parameters. */
end_comment

begin_class
DECL|class|Param
specifier|public
specifier|abstract
class|class
name|Param
parameter_list|<
name|T
parameter_list|,
name|D
extends|extends
name|Param
operator|.
name|Domain
parameter_list|<
name|T
parameter_list|>
parameter_list|>
block|{
DECL|field|NULL
specifier|static
specifier|final
name|String
name|NULL
init|=
literal|"null"
decl_stmt|;
DECL|field|NAME_CMP
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|NAME_CMP
init|=
operator|new
name|Comparator
argument_list|<
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|left
parameter_list|,
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|right
parameter_list|)
block|{
return|return
name|left
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|right
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
empty_stmt|;
comment|/** Convert the parameters to a sorted String.    *    * @param separator URI parameter separator character    * @param parameters parameters to encode into a string    * @return the encoded URI string    */
DECL|method|toSortedString (final String separator, final Param<?, ?>... parameters)
specifier|public
specifier|static
name|String
name|toSortedString
parameter_list|(
specifier|final
name|String
name|separator
parameter_list|,
specifier|final
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
modifier|...
name|parameters
parameter_list|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|parameters
argument_list|,
name|NAME_CMP
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|p
range|:
name|parameters
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|separator
argument_list|)
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|p
operator|.
name|getValueString
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|// Sane systems know about UTF-8, so this should never happen.
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** The domain of the parameter. */
DECL|field|domain
specifier|final
name|D
name|domain
decl_stmt|;
comment|/** The actual parameter value. */
DECL|field|value
specifier|final
name|T
name|value
decl_stmt|;
DECL|method|Param (final D domain, final T value)
name|Param
parameter_list|(
specifier|final
name|D
name|domain
parameter_list|,
specifier|final
name|T
name|value
parameter_list|)
block|{
name|this
operator|.
name|domain
operator|=
name|domain
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/** @return the parameter value. */
DECL|method|getValue ()
specifier|public
specifier|final
name|T
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/** @return the parameter value as a string */
DECL|method|getValueString ()
specifier|public
specifier|abstract
name|String
name|getValueString
parameter_list|()
function_decl|;
comment|/** @return the parameter name. */
DECL|method|getName ()
specifier|public
specifier|abstract
name|String
name|getName
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|+
literal|"="
operator|+
name|value
return|;
block|}
comment|/** Base class of parameter domains. */
DECL|class|Domain
specifier|static
specifier|abstract
class|class
name|Domain
parameter_list|<
name|T
parameter_list|>
block|{
comment|/** Parameter name. */
DECL|field|paramName
specifier|final
name|String
name|paramName
decl_stmt|;
DECL|method|Domain (final String paramName)
name|Domain
parameter_list|(
specifier|final
name|String
name|paramName
parameter_list|)
block|{
name|this
operator|.
name|paramName
operator|=
name|paramName
expr_stmt|;
block|}
comment|/** @return the parameter name. */
DECL|method|getParamName ()
specifier|public
specifier|final
name|String
name|getParamName
parameter_list|()
block|{
return|return
name|paramName
return|;
block|}
comment|/** @return a string description of the domain of the parameter. */
DECL|method|getDomain ()
specifier|public
specifier|abstract
name|String
name|getDomain
parameter_list|()
function_decl|;
comment|/** @return the parameter value represented by the string. */
DECL|method|parse (String str)
specifier|abstract
name|T
name|parse
parameter_list|(
name|String
name|str
parameter_list|)
function_decl|;
comment|/** Parse the given string.      * @return the parameter value represented by the string.      */
DECL|method|parse (final String varName, final String str)
specifier|public
specifier|final
name|T
name|parse
parameter_list|(
specifier|final
name|String
name|varName
parameter_list|,
specifier|final
name|String
name|str
parameter_list|)
block|{
try|try
block|{
return|return
name|str
operator|!=
literal|null
operator|&&
name|str
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|parse
argument_list|(
name|str
argument_list|)
else|:
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse \""
operator|+
name|str
operator|+
literal|"\" for the parameter "
operator|+
name|varName
operator|+
literal|".  The value must be in the domain "
operator|+
name|getDomain
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

