begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * A class that allows DataNode to communicate information about  * usage statistics/metrics to NameNode.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|DataNodeUsageReport
specifier|public
specifier|final
class|class
name|DataNodeUsageReport
block|{
DECL|field|bytesWrittenPerSec
specifier|private
name|long
name|bytesWrittenPerSec
decl_stmt|;
DECL|field|bytesReadPerSec
specifier|private
name|long
name|bytesReadPerSec
decl_stmt|;
DECL|field|writeTime
specifier|private
name|long
name|writeTime
decl_stmt|;
DECL|field|readTime
specifier|private
name|long
name|readTime
decl_stmt|;
DECL|field|blocksWrittenPerSec
specifier|private
name|long
name|blocksWrittenPerSec
decl_stmt|;
DECL|field|blocksReadPerSec
specifier|private
name|long
name|blocksReadPerSec
decl_stmt|;
DECL|field|timestamp
specifier|private
name|long
name|timestamp
decl_stmt|;
DECL|method|DataNodeUsageReport ()
name|DataNodeUsageReport
parameter_list|()
block|{   }
DECL|method|DataNodeUsageReport (Builder builder)
specifier|private
name|DataNodeUsageReport
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|bytesWrittenPerSec
operator|=
name|builder
operator|.
name|bytesWrittenPerSec
expr_stmt|;
name|this
operator|.
name|bytesReadPerSec
operator|=
name|builder
operator|.
name|bytesReadPerSec
expr_stmt|;
name|this
operator|.
name|writeTime
operator|=
name|builder
operator|.
name|writeTime
expr_stmt|;
name|this
operator|.
name|readTime
operator|=
name|builder
operator|.
name|readTime
expr_stmt|;
name|this
operator|.
name|blocksWrittenPerSec
operator|=
name|builder
operator|.
name|blocksWrittenPerSec
expr_stmt|;
name|this
operator|.
name|blocksReadPerSec
operator|=
name|builder
operator|.
name|blocksReadPerSec
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|builder
operator|.
name|timestamp
expr_stmt|;
block|}
comment|/**    * An object representing a DataNodeUsageReport with default values. Should    * be used instead of null or creating new objects when there are    * no statistics to report.    */
DECL|field|EMPTY_REPORT
specifier|public
specifier|static
specifier|final
name|DataNodeUsageReport
name|EMPTY_REPORT
init|=
operator|new
name|DataNodeUsageReport
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"bytesWrittenPerSec:"
operator|+
name|bytesWrittenPerSec
operator|+
literal|" "
operator|+
literal|" bytesReadPerSec:"
operator|+
name|bytesReadPerSec
operator|+
literal|" writeTime:"
operator|+
name|writeTime
operator|+
literal|" readTime:"
operator|+
name|readTime
operator|+
literal|" blocksWrittenPerSec:"
operator|+
name|blocksWrittenPerSec
operator|+
literal|" blocksReadPerSec:"
operator|+
name|blocksReadPerSec
operator|+
literal|" timestamp:"
operator|+
name|timestamp
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|timestamp
operator|+
name|bytesWrittenPerSec
operator|+
name|bytesReadPerSec
operator|+
name|writeTime
operator|+
name|readTime
operator|+
name|blocksWrittenPerSec
operator|+
name|blocksReadPerSec
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|// If the object is compared with itself then return true
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|DataNodeUsageReport
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|DataNodeUsageReport
name|c
init|=
operator|(
name|DataNodeUsageReport
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|timestamp
operator|==
name|c
operator|.
name|timestamp
operator|&&
name|this
operator|.
name|readTime
operator|==
name|c
operator|.
name|readTime
operator|&&
name|this
operator|.
name|writeTime
operator|==
name|c
operator|.
name|writeTime
operator|&&
name|this
operator|.
name|bytesWrittenPerSec
operator|==
name|c
operator|.
name|bytesWrittenPerSec
operator|&&
name|this
operator|.
name|bytesReadPerSec
operator|==
name|c
operator|.
name|bytesReadPerSec
operator|&&
name|this
operator|.
name|blocksWrittenPerSec
operator|==
name|c
operator|.
name|blocksWrittenPerSec
operator|&&
name|this
operator|.
name|blocksReadPerSec
operator|==
name|c
operator|.
name|blocksReadPerSec
return|;
block|}
DECL|method|getBytesWrittenPerSec ()
specifier|public
name|long
name|getBytesWrittenPerSec
parameter_list|()
block|{
return|return
name|bytesWrittenPerSec
return|;
block|}
DECL|method|getBytesReadPerSec ()
specifier|public
name|long
name|getBytesReadPerSec
parameter_list|()
block|{
return|return
name|bytesReadPerSec
return|;
block|}
DECL|method|getWriteTime ()
specifier|public
name|long
name|getWriteTime
parameter_list|()
block|{
return|return
name|writeTime
return|;
block|}
DECL|method|getReadTime ()
specifier|public
name|long
name|getReadTime
parameter_list|()
block|{
return|return
name|readTime
return|;
block|}
DECL|method|getBlocksWrittenPerSec ()
specifier|public
name|long
name|getBlocksWrittenPerSec
parameter_list|()
block|{
return|return
name|blocksWrittenPerSec
return|;
block|}
DECL|method|getBlocksReadPerSec ()
specifier|public
name|long
name|getBlocksReadPerSec
parameter_list|()
block|{
return|return
name|blocksReadPerSec
return|;
block|}
DECL|method|getTimestamp ()
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
comment|/**    * Builder class for {@link DataNodeUsageReport}.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|bytesWrittenPerSec
specifier|private
name|long
name|bytesWrittenPerSec
decl_stmt|;
DECL|field|bytesReadPerSec
specifier|private
name|long
name|bytesReadPerSec
decl_stmt|;
DECL|field|writeTime
specifier|private
name|long
name|writeTime
decl_stmt|;
DECL|field|readTime
specifier|private
name|long
name|readTime
decl_stmt|;
DECL|field|blocksWrittenPerSec
specifier|private
name|long
name|blocksWrittenPerSec
decl_stmt|;
DECL|field|blocksReadPerSec
specifier|private
name|long
name|blocksReadPerSec
decl_stmt|;
DECL|field|timestamp
specifier|private
name|long
name|timestamp
decl_stmt|;
DECL|method|build ()
specifier|public
name|DataNodeUsageReport
name|build
parameter_list|()
block|{
return|return
operator|new
name|DataNodeUsageReport
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|setBytesWrittenPerSec (long bWrittenPerSec)
specifier|public
name|Builder
name|setBytesWrittenPerSec
parameter_list|(
name|long
name|bWrittenPerSec
parameter_list|)
block|{
name|this
operator|.
name|bytesWrittenPerSec
operator|=
name|bWrittenPerSec
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setBytesReadPerSec (long bReadPerSec)
specifier|public
name|Builder
name|setBytesReadPerSec
parameter_list|(
name|long
name|bReadPerSec
parameter_list|)
block|{
name|this
operator|.
name|bytesReadPerSec
operator|=
name|bReadPerSec
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setWriteTime (long wTime)
specifier|public
name|Builder
name|setWriteTime
parameter_list|(
name|long
name|wTime
parameter_list|)
block|{
name|this
operator|.
name|writeTime
operator|=
name|wTime
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setReadTime (long rTime)
specifier|public
name|Builder
name|setReadTime
parameter_list|(
name|long
name|rTime
parameter_list|)
block|{
name|this
operator|.
name|readTime
operator|=
name|rTime
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setBlocksWrittenPerSec (long wBlock)
specifier|public
name|Builder
name|setBlocksWrittenPerSec
parameter_list|(
name|long
name|wBlock
parameter_list|)
block|{
name|this
operator|.
name|blocksWrittenPerSec
operator|=
name|wBlock
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setBlocksReadPerSec (long rBlock)
specifier|public
name|Builder
name|setBlocksReadPerSec
parameter_list|(
name|long
name|rBlock
parameter_list|)
block|{
name|this
operator|.
name|blocksReadPerSec
operator|=
name|rBlock
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setTimestamp (long ts)
specifier|public
name|Builder
name|setTimestamp
parameter_list|(
name|long
name|ts
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|ts
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{     }
block|}
block|}
end_class

end_unit

