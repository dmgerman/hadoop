begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.scm.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|ImmutablePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|KeyData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneProtos
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|XceiverClientSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|storage
operator|.
name|ContainerProtocolCalls
operator|.
name|putKey
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|storage
operator|.
name|ContainerProtocolCalls
operator|.
name|writeChunk
import|;
end_import

begin_comment
comment|/**  * An {@link OutputStream} used by the REST service in combination with the  * SCMClient to write the value of a key to a sequence  * of container chunks.  Writes are buffered locally and periodically written to  * the container as a new chunk.  In order to preserve the semantics that  * replacement of a pre-existing key is atomic, each instance of the stream has  * an internal unique identifier.  This unique identifier and a monotonically  * increasing chunk index form a composite key that is used as the chunk name.  * After all data is written, a putKey call creates or updates the corresponding  * container key, and this call includes the full list of chunks that make up  * the key data.  The list of chunks is updated all at once.  Therefore, a  * concurrent reader never can see an intermediate state in which different  * chunks of data from different versions of the key data are interleaved.  * This class encapsulates all state management for buffering and writing  * through to the container.  */
end_comment

begin_class
DECL|class|ChunkOutputStream
specifier|public
class|class
name|ChunkOutputStream
extends|extends
name|OutputStream
block|{
DECL|field|containerKey
specifier|private
specifier|final
name|String
name|containerKey
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|traceID
specifier|private
specifier|final
name|String
name|traceID
decl_stmt|;
DECL|field|containerKeyData
specifier|private
specifier|final
name|KeyData
operator|.
name|Builder
name|containerKeyData
decl_stmt|;
DECL|field|streamId
specifier|private
specifier|final
name|String
name|streamId
decl_stmt|;
DECL|field|xceiverClientManager
specifier|private
name|XceiverClientManager
name|xceiverClientManager
decl_stmt|;
DECL|field|xceiverClient
specifier|private
name|XceiverClientSpi
name|xceiverClient
decl_stmt|;
DECL|field|buffer
specifier|private
name|ByteBuffer
name|buffer
decl_stmt|;
DECL|field|chunkSize
specifier|private
name|int
name|chunkSize
decl_stmt|;
DECL|field|streamBufferSize
specifier|private
name|int
name|streamBufferSize
decl_stmt|;
comment|/**    * Creates a new ChunkOutputStream.    *    * @param containerKey container key    * @param key chunk key    * @param xceiverClientManager client manager that controls client    * @param xceiverClient client to perform container calls    * @param traceID container protocol call args    * @param chunkSize chunk size    * @param maxBufferSize -- Controls the maximum amount of memory that we need    * to allocate data buffering.    */
DECL|method|ChunkOutputStream (String containerKey, String key, XceiverClientManager xceiverClientManager, XceiverClientSpi xceiverClient, String traceID, int chunkSize, int maxBufferSize)
specifier|public
name|ChunkOutputStream
parameter_list|(
name|String
name|containerKey
parameter_list|,
name|String
name|key
parameter_list|,
name|XceiverClientManager
name|xceiverClientManager
parameter_list|,
name|XceiverClientSpi
name|xceiverClient
parameter_list|,
name|String
name|traceID
parameter_list|,
name|int
name|chunkSize
parameter_list|,
name|int
name|maxBufferSize
parameter_list|)
block|{
name|this
operator|.
name|containerKey
operator|=
name|containerKey
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|traceID
operator|=
name|traceID
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
name|chunkSize
expr_stmt|;
name|this
operator|.
name|streamBufferSize
operator|=
name|maxBufferSize
expr_stmt|;
name|KeyValue
name|keyValue
init|=
name|KeyValue
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"TYPE"
argument_list|)
operator|.
name|setValue
argument_list|(
literal|"KEY"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|this
operator|.
name|containerKeyData
operator|=
name|KeyData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|xceiverClient
operator|.
name|getPipeline
argument_list|()
operator|.
name|getContainerName
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|containerKey
argument_list|)
operator|.
name|addMetadata
argument_list|(
name|keyValue
argument_list|)
expr_stmt|;
name|this
operator|.
name|xceiverClientManager
operator|=
name|xceiverClientManager
expr_stmt|;
name|this
operator|.
name|xceiverClient
operator|=
name|xceiverClient
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|maxBufferSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|streamId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|byte
index|[]
name|c
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|c
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|write
argument_list|(
name|c
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|write (byte[] b, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|(
name|off
operator|<
literal|0
operator|)
operator|||
operator|(
name|off
operator|>
name|b
operator|.
name|length
operator|)
operator|||
operator|(
name|len
operator|<
literal|0
operator|)
operator|||
operator|(
operator|(
name|off
operator|+
name|len
operator|)
operator|>
name|b
operator|.
name|length
operator|)
operator|||
operator|(
operator|(
name|off
operator|+
name|len
operator|)
operator|<
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|checkOpen
argument_list|()
expr_stmt|;
name|int
name|rollbackPosition
init|=
name|buffer
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|rollbackLimit
init|=
name|buffer
operator|.
name|limit
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|ImmutablePair
argument_list|<
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
argument_list|,
name|ChunkInfo
argument_list|>
argument_list|>
name|writeFutures
init|=
name|writeInParallel
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
comment|// This is a rendezvous point for this function call, all chunk I/O
comment|// for this block must complete before we can declare this call as
comment|// complete.
comment|// Wait until all the futures complete or throws an exception if any of
comment|// the calls ended with an exception this call will throw.
comment|// if futures is null, it means that we wrote the data to the buffer and
comment|// returned.
if|if
condition|(
name|writeFutures
operator|!=
literal|null
condition|)
block|{
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|writeFutures
operator|.
name|toArray
argument_list|(
operator|new
name|CompletableFuture
index|[
name|writeFutures
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Wrote this data, we will clear this buffer now.
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|buffer
operator|.
name|position
argument_list|(
name|rollbackPosition
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|limit
argument_list|(
name|rollbackLimit
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected error in write. "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Write a given block into many small chunks in parallel.    *    * @param b    * @param off    * @param len    * @throws IOException    * @throws ExecutionException    * @throws InterruptedException    */
specifier|public
name|List
argument_list|<
name|ImmutablePair
argument_list|<
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
argument_list|,
name|ChunkInfo
argument_list|>
argument_list|>
DECL|method|writeInParallel (byte[] b, int off, int len)
name|writeInParallel
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|len
operator|<=
name|streamBufferSize
argument_list|,
literal|"A chunk write cannot be "
operator|+
literal|"larger than max buffer size limit."
argument_list|)
expr_stmt|;
name|long
name|newBlockCount
init|=
name|len
operator|/
name|chunkSize
decl_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ImmutablePair
argument_list|<
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
argument_list|,
name|ChunkInfo
argument_list|>
argument_list|>
name|writeFutures
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// We if must have at least a chunkSize of data ready to write, if so we
comment|// will go ahead and start writing that data.
if|if
condition|(
name|buffer
operator|.
name|position
argument_list|()
operator|>=
name|chunkSize
condition|)
block|{
comment|// Allocate new byte slices which will point to each chunk of data
comment|// that we want to write. Divide the byte buffer into individual chunks
comment|// each of length equals to chunkSize max where each chunk will be
comment|// assigned a chunkId where, for each chunk the async write requests will
comment|// be made and wait for all of them to return before the write call
comment|// returns.
for|for
control|(
name|int
name|chunkId
init|=
literal|0
init|;
name|chunkId
operator|<
name|newBlockCount
condition|;
name|chunkId
operator|++
control|)
block|{
comment|// Please note : We are not flipping the slice when we write since
comment|// the slices are pointing the buffer start and end as needed for
comment|// the chunk write. Also please note, Duplicate does not create a
comment|// copy of data, it only creates metadata that points to the data
comment|// stream.
name|ByteBuffer
name|chunk
init|=
name|buffer
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|(
name|chunkId
operator|*
name|chunkSize
operator|)
operator|<
name|buffer
operator|.
name|limit
argument_list|()
argument_list|,
literal|"Chunk offset cannot be beyond the limits of the buffer."
argument_list|)
expr_stmt|;
name|chunk
operator|.
name|position
argument_list|(
name|chunkId
operator|*
name|chunkSize
argument_list|)
expr_stmt|;
comment|// Min handles the case where the last block might be lesser than
comment|// chunk Size.
name|chunk
operator|.
name|limit
argument_list|(
name|chunk
operator|.
name|position
argument_list|()
operator|+
name|Math
operator|.
name|min
argument_list|(
name|chunkSize
argument_list|,
name|chunk
operator|.
name|remaining
argument_list|()
operator|-
operator|(
name|chunkId
operator|*
name|chunkSize
operator|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Schedule all the writes, this is a non-block call which returns
comment|// futures. We collect these futures and wait for all  of them to
comment|// complete in the next line.
name|writeFutures
operator|.
name|add
argument_list|(
name|writeChunkToContainer
argument_list|(
name|chunk
argument_list|,
literal|0
argument_list|,
name|chunkSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|writeFutures
return|;
block|}
comment|// Nothing to do , return null.
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
specifier|synchronized
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|position
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|rollbackPosition
init|=
name|buffer
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|rollbackLimit
init|=
name|buffer
operator|.
name|limit
argument_list|()
decl_stmt|;
name|ByteBuffer
name|chunk
init|=
name|buffer
operator|.
name|duplicate
argument_list|()
decl_stmt|;
try|try
block|{
name|ImmutablePair
argument_list|<
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
argument_list|,
name|ChunkInfo
argument_list|>
name|result
init|=
name|writeChunkToContainer
argument_list|(
name|chunk
argument_list|,
literal|0
argument_list|,
name|chunkSize
argument_list|)
decl_stmt|;
name|updateChunkInfo
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|buffer
operator|.
name|position
argument_list|(
name|rollbackPosition
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|limit
argument_list|(
name|rollbackLimit
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failure in flush"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|xceiverClientManager
operator|!=
literal|null
operator|&&
name|xceiverClient
operator|!=
literal|null
operator|&&
name|buffer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|buffer
operator|.
name|position
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// This flip is needed since this is the real buffer to which we
comment|// are writing and position will have moved each time we did a put.
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
comment|// Call get immediately to make this call Synchronous.
name|ImmutablePair
argument_list|<
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
argument_list|,
name|ChunkInfo
argument_list|>
name|result
init|=
name|writeChunkToContainer
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|limit
argument_list|()
argument_list|)
decl_stmt|;
name|updateChunkInfo
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|putKey
argument_list|(
name|xceiverClient
argument_list|,
name|containerKeyData
operator|.
name|build
argument_list|()
argument_list|,
name|traceID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected Storage Container Exception: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|xceiverClientManager
operator|.
name|releaseClient
argument_list|(
name|xceiverClient
argument_list|)
expr_stmt|;
name|xceiverClientManager
operator|=
literal|null
expr_stmt|;
name|xceiverClient
operator|=
literal|null
expr_stmt|;
name|buffer
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateChunkInfo ( ImmutablePair< CompletableFuture<ContainerProtos.ContainerCommandResponseProto>, ChunkInfo > result)
specifier|private
name|void
name|updateChunkInfo
parameter_list|(
name|ImmutablePair
argument_list|<
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
argument_list|,
name|ChunkInfo
argument_list|>
name|result
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
comment|// Wait for this call to complete.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|response
init|=
name|result
operator|.
name|getLeft
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// If the write call to the chunk is successful, we need to add that
comment|// chunk information to the containerKeyData.
comment|// TODO: Clean up the garbage in case of failure.
if|if
condition|(
name|response
operator|.
name|getResult
argument_list|()
operator|==
name|SUCCESS
condition|)
block|{
name|ChunkInfo
name|chunk
init|=
name|result
operator|.
name|getRight
argument_list|()
decl_stmt|;
name|containerKeyData
operator|.
name|addChunks
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Checks if the stream is open.  If not, throws an exception.    *    * @throws IOException if stream is closed    */
DECL|method|checkOpen ()
specifier|private
specifier|synchronized
name|void
name|checkOpen
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|xceiverClient
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"ChunkOutputStream has been closed."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Writes buffered data as a new chunk to the container and saves chunk    * information to be used later in putKey call.    *    * @param data -- Data to write.    * @param offset - offset to the data buffer    * @param len - Length in bytes    * @return Returns a Immutable pair -- A future object that will contian    * the result of the operation, and the chunkInfo that we wrote.    *    * @throws IOException    * @throws ExecutionException    * @throws InterruptedException    */
specifier|private
name|ImmutablePair
argument_list|<
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
argument_list|,
name|ChunkInfo
argument_list|>
DECL|method|writeChunkToContainer (ByteBuffer data, int offset, int len)
name|writeChunkToContainer
parameter_list|(
name|ByteBuffer
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|ByteString
name|dataString
init|=
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|ChunkInfo
name|chunk
init|=
name|ChunkInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setChunkName
argument_list|(
name|DigestUtils
operator|.
name|md5Hex
argument_list|(
name|key
argument_list|)
operator|+
literal|"_stream_"
operator|+
name|streamId
operator|+
literal|"_chunk_"
operator|+
name|Time
operator|.
name|monotonicNowNanos
argument_list|()
argument_list|)
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
operator|.
name|setLen
argument_list|(
name|len
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
name|response
init|=
name|writeChunk
argument_list|(
name|xceiverClient
argument_list|,
name|chunk
argument_list|,
name|key
argument_list|,
name|dataString
argument_list|,
name|traceID
argument_list|)
decl_stmt|;
return|return
operator|new
name|ImmutablePair
argument_list|(
name|response
argument_list|,
name|chunk
argument_list|)
return|;
block|}
block|}
end_class

end_unit

