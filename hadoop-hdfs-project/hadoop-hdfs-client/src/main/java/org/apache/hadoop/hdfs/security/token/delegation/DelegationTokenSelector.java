begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.security.token.delegation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenSelector
import|;
end_import

begin_comment
comment|/**  * A delegation token that is specialized for HDFS  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DelegationTokenSelector
specifier|public
class|class
name|DelegationTokenSelector
extends|extends
name|AbstractDelegationTokenSelector
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
block|{
DECL|field|SERVICE_NAME_KEY
specifier|public
specifier|static
specifier|final
name|String
name|SERVICE_NAME_KEY
init|=
literal|"hdfs.service.host_"
decl_stmt|;
comment|/**    * Select the delegation token for hdfs.  The port will be rewritten to    * the port of hdfs.service.host_$nnAddr, or the default rpc namenode port.    * This method should only be called by non-hdfs filesystems that do not    * use the rpc port to acquire tokens.  Ex. webhdfs    * @param nnUri of the remote namenode    * @param tokens as a collection    * @param conf hadoop configuration    * @return Token    */
DECL|method|selectToken ( final URI nnUri, Collection<Token<?>> tokens, final Configuration conf)
specifier|public
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|selectToken
parameter_list|(
specifier|final
name|URI
name|nnUri
parameter_list|,
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|tokens
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
comment|// this guesses the remote cluster's rpc service port.
comment|// the current token design assumes it's the same as the local cluster's
comment|// rpc port unless a config key is set.  there should be a way to automatic
comment|// and correctly determine the value
name|Text
name|serviceName
init|=
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
name|nnUri
argument_list|)
decl_stmt|;
specifier|final
name|String
name|nnServiceName
init|=
name|conf
operator|.
name|get
argument_list|(
name|SERVICE_NAME_KEY
operator|+
name|serviceName
argument_list|)
decl_stmt|;
name|int
name|nnRpcPort
init|=
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMENODE_RPC_PORT_DEFAULT
decl_stmt|;
if|if
condition|(
name|nnServiceName
operator|!=
literal|null
condition|)
block|{
name|nnRpcPort
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|nnServiceName
argument_list|,
name|nnRpcPort
argument_list|)
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
comment|// use original hostname from the uri to avoid unintentional host resolving
name|serviceName
operator|=
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
name|NetUtils
operator|.
name|createSocketAddrForHost
argument_list|(
name|nnUri
operator|.
name|getHost
argument_list|()
argument_list|,
name|nnRpcPort
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|selectToken
argument_list|(
name|serviceName
argument_list|,
name|tokens
argument_list|)
return|;
block|}
DECL|method|DelegationTokenSelector ()
specifier|public
name|DelegationTokenSelector
parameter_list|()
block|{
name|super
argument_list|(
name|DelegationTokenIdentifier
operator|.
name|HDFS_DELEGATION_KIND
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

