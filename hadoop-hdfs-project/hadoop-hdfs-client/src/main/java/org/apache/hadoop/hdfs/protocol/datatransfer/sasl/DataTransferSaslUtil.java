begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol.datatransfer.sasl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|sasl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_RPC_PROTECTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_DATA_TRANSFER_PROTECTION_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_DATA_TRANSFER_SASL_PROPS_RESOLVER_CLASS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelperClient
operator|.
name|vintPrefixed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CipherOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CipherSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|net
operator|.
name|Peer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|IOStreamPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|InvalidEncryptionKeyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|DataTransferEncryptorMessageProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|DataTransferEncryptorMessageProto
operator|.
name|DataTransferEncryptorStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|CipherOptionProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelperClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslPropertiesResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|QualityOfProtection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InetAddresses
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_comment
comment|/**  * Utility methods implementing SASL negotiation for DataTransferProtocol.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DataTransferSaslUtil
specifier|public
specifier|final
class|class
name|DataTransferSaslUtil
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DataTransferSaslUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Delimiter for the three-part SASL username string.    */
DECL|field|NAME_DELIMITER
specifier|public
specifier|static
specifier|final
name|String
name|NAME_DELIMITER
init|=
literal|" "
decl_stmt|;
comment|/**    * Sent by clients and validated by servers. We use a number that's unlikely    * to ever be sent as the value of the DATA_TRANSFER_VERSION.    */
DECL|field|SASL_TRANSFER_MAGIC_NUMBER
specifier|public
specifier|static
specifier|final
name|int
name|SASL_TRANSFER_MAGIC_NUMBER
init|=
literal|0xDEADBEEF
decl_stmt|;
comment|/**    * Checks that SASL negotiation has completed for the given participant, and    * the negotiated quality of protection is included in the given SASL    * properties and therefore acceptable.    *    * @param sasl participant to check    * @param saslProps properties of SASL negotiation    * @throws IOException for any error    */
DECL|method|checkSaslComplete (SaslParticipant sasl, Map<String, String> saslProps)
specifier|public
specifier|static
name|void
name|checkSaslComplete
parameter_list|(
name|SaslParticipant
name|sasl
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|sasl
operator|.
name|isComplete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to complete SASL handshake"
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|requestedQop
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|saslProps
operator|.
name|get
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|negotiatedQop
init|=
name|sasl
operator|.
name|getNegotiatedQop
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Verifying QOP, requested QOP = {}, negotiated QOP = {}"
argument_list|,
name|requestedQop
argument_list|,
name|negotiatedQop
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|requestedQop
operator|.
name|contains
argument_list|(
name|negotiatedQop
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SASL handshake completed, but "
operator|+
literal|"channel does not have acceptable quality of protection, "
operator|+
literal|"requested = %s, negotiated = %s"
argument_list|,
name|requestedQop
argument_list|,
name|negotiatedQop
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Check whether requested SASL Qop contains privacy.    *     * @param saslProps properties of SASL negotiation    * @return boolean true if privacy exists    */
DECL|method|requestedQopContainsPrivacy ( Map<String, String> saslProps)
specifier|public
specifier|static
name|boolean
name|requestedQopContainsPrivacy
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|requestedQop
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|saslProps
operator|.
name|get
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|requestedQop
operator|.
name|contains
argument_list|(
literal|"auth-conf"
argument_list|)
return|;
block|}
comment|/**    * Creates SASL properties required for an encrypted SASL negotiation.    *    * @param encryptionAlgorithm to use for SASL negotation    * @return properties of encrypted SASL negotiation    */
DECL|method|createSaslPropertiesForEncryption ( String encryptionAlgorithm)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createSaslPropertiesForEncryption
parameter_list|(
name|String
name|encryptionAlgorithm
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|saslProps
operator|.
name|put
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|,
name|QualityOfProtection
operator|.
name|PRIVACY
operator|.
name|getSaslQop
argument_list|()
argument_list|)
expr_stmt|;
name|saslProps
operator|.
name|put
argument_list|(
name|Sasl
operator|.
name|SERVER_AUTH
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|saslProps
operator|.
name|put
argument_list|(
literal|"com.sun.security.sasl.digest.cipher"
argument_list|,
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
return|return
name|saslProps
return|;
block|}
comment|/**    * For an encrypted SASL negotiation, encodes an encryption key to a SASL    * password.    *    * @param encryptionKey to encode    * @return key encoded as SASL password    */
DECL|method|encryptionKeyToPassword (byte[] encryptionKey)
specifier|public
specifier|static
name|char
index|[]
name|encryptionKeyToPassword
parameter_list|(
name|byte
index|[]
name|encryptionKey
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|encryptionKey
argument_list|,
literal|false
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|toCharArray
argument_list|()
return|;
block|}
comment|/**    * Returns InetAddress from peer.  The getRemoteAddressString has the form    * [host][/ip-address]:port.  The host may be missing.  The IP address (and    * preceding '/') may be missing.  The port preceded by ':' is always present.    *    * @param peer    * @return InetAddress from peer    */
DECL|method|getPeerAddress (Peer peer)
specifier|public
specifier|static
name|InetAddress
name|getPeerAddress
parameter_list|(
name|Peer
name|peer
parameter_list|)
block|{
name|String
name|remoteAddr
init|=
name|peer
operator|.
name|getRemoteAddressString
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|int
name|slashIdx
init|=
name|remoteAddr
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
return|return
name|InetAddresses
operator|.
name|forString
argument_list|(
name|slashIdx
operator|!=
operator|-
literal|1
condition|?
name|remoteAddr
operator|.
name|substring
argument_list|(
name|slashIdx
operator|+
literal|1
argument_list|,
name|remoteAddr
operator|.
name|length
argument_list|()
argument_list|)
else|:
name|remoteAddr
argument_list|)
return|;
block|}
comment|/**    * Creates a SaslPropertiesResolver from the given configuration.  This method    * works by cloning the configuration, translating configuration properties    * specific to DataTransferProtocol to what SaslPropertiesResolver expects,    * and then delegating to SaslPropertiesResolver for initialization.  This    * method returns null if SASL protection has not been configured for    * DataTransferProtocol.    *    * @param conf configuration to read    * @return SaslPropertiesResolver for DataTransferProtocol, or null if not    *   configured    */
DECL|method|getSaslPropertiesResolver ( Configuration conf)
specifier|public
specifier|static
name|SaslPropertiesResolver
name|getSaslPropertiesResolver
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|qops
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_DATA_TRANSFER_PROTECTION_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|qops
operator|==
literal|null
operator|||
name|qops
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DataTransferProtocol not using SaslPropertiesResolver, no "
operator|+
literal|"QOP found in configuration for {}"
argument_list|,
name|DFS_DATA_TRANSFER_PROTECTION_KEY
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Configuration
name|saslPropsResolverConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|saslPropsResolverConf
operator|.
name|set
argument_list|(
name|HADOOP_RPC_PROTECTION
argument_list|,
name|qops
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|SaslPropertiesResolver
argument_list|>
name|resolverClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS
argument_list|,
name|SaslPropertiesResolver
operator|.
name|class
argument_list|,
name|SaslPropertiesResolver
operator|.
name|class
argument_list|)
decl_stmt|;
name|resolverClass
operator|=
name|conf
operator|.
name|getClass
argument_list|(
name|DFS_DATA_TRANSFER_SASL_PROPS_RESOLVER_CLASS_KEY
argument_list|,
name|resolverClass
argument_list|,
name|SaslPropertiesResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|saslPropsResolverConf
operator|.
name|setClass
argument_list|(
name|HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS
argument_list|,
name|resolverClass
argument_list|,
name|SaslPropertiesResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|SaslPropertiesResolver
name|resolver
init|=
name|SaslPropertiesResolver
operator|.
name|getInstance
argument_list|(
name|saslPropsResolverConf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"DataTransferProtocol using SaslPropertiesResolver, configured "
operator|+
literal|"QOP {} = {}, configured class {} = {}"
argument_list|,
name|DFS_DATA_TRANSFER_PROTECTION_KEY
argument_list|,
name|qops
argument_list|,
name|DFS_DATA_TRANSFER_SASL_PROPS_RESOLVER_CLASS_KEY
argument_list|,
name|resolverClass
argument_list|)
expr_stmt|;
return|return
name|resolver
return|;
block|}
comment|/**    * Reads a SASL negotiation message.    *    * @param in stream to read    * @return bytes of SASL negotiation messsage    * @throws IOException for any error    */
DECL|method|readSaslMessage (InputStream in)
specifier|public
specifier|static
name|byte
index|[]
name|readSaslMessage
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|DataTransferEncryptorMessageProto
name|proto
init|=
name|DataTransferEncryptorMessageProto
operator|.
name|parseFrom
argument_list|(
name|vintPrefixed
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|getStatus
argument_list|()
operator|==
name|DataTransferEncryptorStatus
operator|.
name|ERROR_UNKNOWN_KEY
condition|)
block|{
throw|throw
operator|new
name|InvalidEncryptionKeyException
argument_list|(
name|proto
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|proto
operator|.
name|getStatus
argument_list|()
operator|==
name|DataTransferEncryptorStatus
operator|.
name|ERROR
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|proto
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|proto
operator|.
name|getPayload
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
comment|/**    * Reads a SASL negotiation message and negotiation cipher options.     *     * @param in stream to read    * @param cipherOptions list to store negotiation cipher options    * @return byte[] SASL negotiation message    * @throws IOException for any error    */
DECL|method|readSaslMessageAndNegotiationCipherOptions ( InputStream in, List<CipherOption> cipherOptions)
specifier|public
specifier|static
name|byte
index|[]
name|readSaslMessageAndNegotiationCipherOptions
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|List
argument_list|<
name|CipherOption
argument_list|>
name|cipherOptions
parameter_list|)
throws|throws
name|IOException
block|{
name|DataTransferEncryptorMessageProto
name|proto
init|=
name|DataTransferEncryptorMessageProto
operator|.
name|parseFrom
argument_list|(
name|vintPrefixed
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|getStatus
argument_list|()
operator|==
name|DataTransferEncryptorStatus
operator|.
name|ERROR_UNKNOWN_KEY
condition|)
block|{
throw|throw
operator|new
name|InvalidEncryptionKeyException
argument_list|(
name|proto
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|proto
operator|.
name|getStatus
argument_list|()
operator|==
name|DataTransferEncryptorStatus
operator|.
name|ERROR
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|proto
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|List
argument_list|<
name|CipherOptionProto
argument_list|>
name|optionProtos
init|=
name|proto
operator|.
name|getCipherOptionList
argument_list|()
decl_stmt|;
if|if
condition|(
name|optionProtos
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CipherOptionProto
name|optionProto
range|:
name|optionProtos
control|)
block|{
name|cipherOptions
operator|.
name|add
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|optionProto
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|proto
operator|.
name|getPayload
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
comment|/**    * Negotiate a cipher option which server supports.    *     * @param conf the configuration    * @param options the cipher options which client supports    * @return CipherOption negotiated cipher option    */
DECL|method|negotiateCipherOption (Configuration conf, List<CipherOption> options)
specifier|public
specifier|static
name|CipherOption
name|negotiateCipherOption
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|CipherOption
argument_list|>
name|options
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Negotiate cipher suites if configured.  Currently, the only supported
comment|// cipher suite is AES/CTR/NoPadding, but the protocol allows multiple
comment|// values for future expansion.
name|String
name|cipherSuites
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|cipherSuites
operator|==
literal|null
operator|||
name|cipherSuites
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|cipherSuites
operator|.
name|equals
argument_list|(
name|CipherSuite
operator|.
name|AES_CTR_NOPADDING
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid cipher suite, %s=%s"
argument_list|,
name|DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY
argument_list|,
name|cipherSuites
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|options
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CipherOption
name|option
range|:
name|options
control|)
block|{
name|CipherSuite
name|suite
init|=
name|option
operator|.
name|getCipherSuite
argument_list|()
decl_stmt|;
if|if
condition|(
name|suite
operator|==
name|CipherSuite
operator|.
name|AES_CTR_NOPADDING
condition|)
block|{
name|int
name|keyLen
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_KEY
argument_list|,
name|DFS_ENCRYPT_DATA_TRANSFER_CIPHER_KEY_BITLENGTH_DEFAULT
argument_list|)
operator|/
literal|8
decl_stmt|;
name|CryptoCodec
name|codec
init|=
name|CryptoCodec
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
name|suite
argument_list|)
decl_stmt|;
name|byte
index|[]
name|inKey
init|=
operator|new
name|byte
index|[
name|keyLen
index|]
decl_stmt|;
name|byte
index|[]
name|inIv
init|=
operator|new
name|byte
index|[
name|suite
operator|.
name|getAlgorithmBlockSize
argument_list|()
index|]
decl_stmt|;
name|byte
index|[]
name|outKey
init|=
operator|new
name|byte
index|[
name|keyLen
index|]
decl_stmt|;
name|byte
index|[]
name|outIv
init|=
operator|new
name|byte
index|[
name|suite
operator|.
name|getAlgorithmBlockSize
argument_list|()
index|]
decl_stmt|;
name|codec
operator|.
name|generateSecureRandom
argument_list|(
name|inKey
argument_list|)
expr_stmt|;
name|codec
operator|.
name|generateSecureRandom
argument_list|(
name|inIv
argument_list|)
expr_stmt|;
name|codec
operator|.
name|generateSecureRandom
argument_list|(
name|outKey
argument_list|)
expr_stmt|;
name|codec
operator|.
name|generateSecureRandom
argument_list|(
name|outIv
argument_list|)
expr_stmt|;
return|return
operator|new
name|CipherOption
argument_list|(
name|suite
argument_list|,
name|inKey
argument_list|,
name|inIv
argument_list|,
name|outKey
argument_list|,
name|outIv
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Send SASL message and negotiated cipher option to client.    *     * @param out stream to receive message    * @param payload to send    * @param option negotiated cipher option    * @throws IOException for any error    */
DECL|method|sendSaslMessageAndNegotiatedCipherOption ( OutputStream out, byte[] payload, CipherOption option)
specifier|public
specifier|static
name|void
name|sendSaslMessageAndNegotiatedCipherOption
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|byte
index|[]
name|payload
parameter_list|,
name|CipherOption
name|option
parameter_list|)
throws|throws
name|IOException
block|{
name|DataTransferEncryptorMessageProto
operator|.
name|Builder
name|builder
init|=
name|DataTransferEncryptorMessageProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setStatus
argument_list|(
name|DataTransferEncryptorStatus
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
if|if
condition|(
name|payload
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPayload
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|payload
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addCipherOption
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|option
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DataTransferEncryptorMessageProto
name|proto
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|proto
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create IOStreamPair of {@link org.apache.hadoop.crypto.CryptoInputStream}    * and {@link org.apache.hadoop.crypto.CryptoOutputStream}    *     * @param conf the configuration    * @param cipherOption negotiated cipher option    * @param out underlying output stream    * @param in underlying input stream    * @param isServer is server side    * @return IOStreamPair the stream pair    * @throws IOException for any error    */
DECL|method|createStreamPair (Configuration conf, CipherOption cipherOption, OutputStream out, InputStream in, boolean isServer)
specifier|public
specifier|static
name|IOStreamPair
name|createStreamPair
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CipherOption
name|cipherOption
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|InputStream
name|in
parameter_list|,
name|boolean
name|isServer
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating IOStreamPair of CryptoInputStream and "
operator|+
literal|"CryptoOutputStream."
argument_list|)
expr_stmt|;
name|CryptoCodec
name|codec
init|=
name|CryptoCodec
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
name|cipherOption
operator|.
name|getCipherSuite
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|inKey
init|=
name|cipherOption
operator|.
name|getInKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|inIv
init|=
name|cipherOption
operator|.
name|getInIv
argument_list|()
decl_stmt|;
name|byte
index|[]
name|outKey
init|=
name|cipherOption
operator|.
name|getOutKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|outIv
init|=
name|cipherOption
operator|.
name|getOutIv
argument_list|()
decl_stmt|;
name|InputStream
name|cIn
init|=
operator|new
name|CryptoInputStream
argument_list|(
name|in
argument_list|,
name|codec
argument_list|,
name|isServer
condition|?
name|inKey
else|:
name|outKey
argument_list|,
name|isServer
condition|?
name|inIv
else|:
name|outIv
argument_list|)
decl_stmt|;
name|OutputStream
name|cOut
init|=
operator|new
name|CryptoOutputStream
argument_list|(
name|out
argument_list|,
name|codec
argument_list|,
name|isServer
condition|?
name|outKey
else|:
name|inKey
argument_list|,
name|isServer
condition|?
name|outIv
else|:
name|inIv
argument_list|)
decl_stmt|;
return|return
operator|new
name|IOStreamPair
argument_list|(
name|cIn
argument_list|,
name|cOut
argument_list|)
return|;
block|}
comment|/**    * Sends a SASL negotiation message indicating an error.    *    * @param out stream to receive message    * @param message to send    * @throws IOException for any error    */
DECL|method|sendGenericSaslErrorMessage (OutputStream out, String message)
specifier|public
specifier|static
name|void
name|sendGenericSaslErrorMessage
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|sendSaslMessage
argument_list|(
name|out
argument_list|,
name|DataTransferEncryptorStatus
operator|.
name|ERROR
argument_list|,
literal|null
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sends a SASL negotiation message.    *    * @param out stream to receive message    * @param payload to send    * @throws IOException for any error    */
DECL|method|sendSaslMessage (OutputStream out, byte[] payload)
specifier|public
specifier|static
name|void
name|sendSaslMessage
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|byte
index|[]
name|payload
parameter_list|)
throws|throws
name|IOException
block|{
name|sendSaslMessage
argument_list|(
name|out
argument_list|,
name|DataTransferEncryptorStatus
operator|.
name|SUCCESS
argument_list|,
name|payload
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Send a SASL negotiation message and negotiation cipher options to server.    *     * @param out stream to receive message    * @param payload to send    * @param options cipher options to negotiate    * @throws IOException for any error    */
DECL|method|sendSaslMessageAndNegotiationCipherOptions ( OutputStream out, byte[] payload, List<CipherOption> options)
specifier|public
specifier|static
name|void
name|sendSaslMessageAndNegotiationCipherOptions
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|byte
index|[]
name|payload
parameter_list|,
name|List
argument_list|<
name|CipherOption
argument_list|>
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|DataTransferEncryptorMessageProto
operator|.
name|Builder
name|builder
init|=
name|DataTransferEncryptorMessageProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setStatus
argument_list|(
name|DataTransferEncryptorStatus
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
if|if
condition|(
name|payload
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPayload
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|payload
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAllCipherOption
argument_list|(
name|PBHelperClient
operator|.
name|convertCipherOptions
argument_list|(
name|options
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DataTransferEncryptorMessageProto
name|proto
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|proto
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**    * Read SASL message and negotiated cipher option from server.    *     * @param in stream to read    * @return SaslResponseWithNegotiatedCipherOption SASL message and     * negotiated cipher option    * @throws IOException for any error    */
specifier|public
specifier|static
name|SaslResponseWithNegotiatedCipherOption
DECL|method|readSaslMessageAndNegotiatedCipherOption (InputStream in)
name|readSaslMessageAndNegotiatedCipherOption
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|DataTransferEncryptorMessageProto
name|proto
init|=
name|DataTransferEncryptorMessageProto
operator|.
name|parseFrom
argument_list|(
name|vintPrefixed
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|getStatus
argument_list|()
operator|==
name|DataTransferEncryptorStatus
operator|.
name|ERROR_UNKNOWN_KEY
condition|)
block|{
throw|throw
operator|new
name|InvalidEncryptionKeyException
argument_list|(
name|proto
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|proto
operator|.
name|getStatus
argument_list|()
operator|==
name|DataTransferEncryptorStatus
operator|.
name|ERROR
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|proto
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|byte
index|[]
name|response
init|=
name|proto
operator|.
name|getPayload
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CipherOption
argument_list|>
name|options
init|=
name|PBHelperClient
operator|.
name|convertCipherOptionProtos
argument_list|(
name|proto
operator|.
name|getCipherOptionList
argument_list|()
argument_list|)
decl_stmt|;
name|CipherOption
name|option
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|options
operator|!=
literal|null
operator|&&
operator|!
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|option
operator|=
name|options
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SaslResponseWithNegotiatedCipherOption
argument_list|(
name|response
argument_list|,
name|option
argument_list|)
return|;
block|}
block|}
comment|/**    * Encrypt the key and iv of the negotiated cipher option.    *     * @param option negotiated cipher option    * @param sasl SASL participant representing server    * @return CipherOption negotiated cipher option which contains the     * encrypted key and iv    * @throws IOException for any error    */
DECL|method|wrap (CipherOption option, SaslParticipant sasl)
specifier|public
specifier|static
name|CipherOption
name|wrap
parameter_list|(
name|CipherOption
name|option
parameter_list|,
name|SaslParticipant
name|sasl
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|inKey
init|=
name|option
operator|.
name|getInKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|inKey
operator|!=
literal|null
condition|)
block|{
name|inKey
operator|=
name|sasl
operator|.
name|wrap
argument_list|(
name|inKey
argument_list|,
literal|0
argument_list|,
name|inKey
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|outKey
init|=
name|option
operator|.
name|getOutKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|outKey
operator|!=
literal|null
condition|)
block|{
name|outKey
operator|=
name|sasl
operator|.
name|wrap
argument_list|(
name|outKey
argument_list|,
literal|0
argument_list|,
name|outKey
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|CipherOption
argument_list|(
name|option
operator|.
name|getCipherSuite
argument_list|()
argument_list|,
name|inKey
argument_list|,
name|option
operator|.
name|getInIv
argument_list|()
argument_list|,
name|outKey
argument_list|,
name|option
operator|.
name|getOutIv
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Decrypt the key and iv of the negotiated cipher option.    *     * @param option negotiated cipher option    * @param sasl SASL participant representing client    * @return CipherOption negotiated cipher option which contains the     * decrypted key and iv    * @throws IOException for any error    */
DECL|method|unwrap (CipherOption option, SaslParticipant sasl)
specifier|public
specifier|static
name|CipherOption
name|unwrap
parameter_list|(
name|CipherOption
name|option
parameter_list|,
name|SaslParticipant
name|sasl
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|inKey
init|=
name|option
operator|.
name|getInKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|inKey
operator|!=
literal|null
condition|)
block|{
name|inKey
operator|=
name|sasl
operator|.
name|unwrap
argument_list|(
name|inKey
argument_list|,
literal|0
argument_list|,
name|inKey
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|outKey
init|=
name|option
operator|.
name|getOutKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|outKey
operator|!=
literal|null
condition|)
block|{
name|outKey
operator|=
name|sasl
operator|.
name|unwrap
argument_list|(
name|outKey
argument_list|,
literal|0
argument_list|,
name|outKey
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|CipherOption
argument_list|(
name|option
operator|.
name|getCipherSuite
argument_list|()
argument_list|,
name|inKey
argument_list|,
name|option
operator|.
name|getInIv
argument_list|()
argument_list|,
name|outKey
argument_list|,
name|option
operator|.
name|getOutIv
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Sends a SASL negotiation message.    *    * @param out stream to receive message    * @param status negotiation status    * @param payload to send    * @param message to send    * @throws IOException for any error    */
DECL|method|sendSaslMessage (OutputStream out, DataTransferEncryptorStatus status, byte[] payload, String message)
specifier|public
specifier|static
name|void
name|sendSaslMessage
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|DataTransferEncryptorStatus
name|status
parameter_list|,
name|byte
index|[]
name|payload
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|DataTransferEncryptorMessageProto
operator|.
name|Builder
name|builder
init|=
name|DataTransferEncryptorMessageProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|payload
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPayload
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|payload
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|DataTransferEncryptorMessageProto
name|proto
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|proto
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**    * There is no reason to instantiate this class.    */
DECL|method|DataTransferSaslUtil ()
specifier|private
name|DataTransferSaslUtil
parameter_list|()
block|{   }
block|}
end_class

end_unit

