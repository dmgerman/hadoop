begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeAdminProperties
import|;
end_import

begin_comment
comment|/**  * Writer support for JSON-based datanode configuration, an alternative format  * to the exclude/include files configuration.  * The JSON file format defines the array of elements where each element  * in the array describes the properties of a datanode. The properties of  * a datanode is defined by {@link DatanodeAdminProperties}. For example,  *  * [  *   {"hostName": "host1"},  *   {"hostName": "host2", "port": 50, "upgradeDomain": "ud0"},  *   {"hostName": "host3", "port": 0, "adminState": "DECOMMISSIONED"}  * ]  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|CombinedHostsFileWriter
specifier|public
specifier|final
class|class
name|CombinedHostsFileWriter
block|{
DECL|method|CombinedHostsFileWriter ()
specifier|private
name|CombinedHostsFileWriter
parameter_list|()
block|{   }
comment|/**    * Serialize a set of DatanodeAdminProperties to a json file.    * @param hostsFile the json file name.    * @param allDNs the set of DatanodeAdminProperties    * @throws IOException    */
DECL|method|writeFile (final String hostsFile, final Set<DatanodeAdminProperties> allDNs)
specifier|public
specifier|static
name|void
name|writeFile
parameter_list|(
specifier|final
name|String
name|hostsFile
parameter_list|,
specifier|final
name|Set
argument_list|<
name|DatanodeAdminProperties
argument_list|>
name|allDNs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ObjectMapper
name|objectMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
try|try
init|(
name|Writer
name|output
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|Files
operator|.
name|newOutputStream
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|hostsFile
argument_list|)
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
init|)
block|{
name|objectMapper
operator|.
name|writeValue
argument_list|(
name|output
argument_list|,
name|allDNs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

