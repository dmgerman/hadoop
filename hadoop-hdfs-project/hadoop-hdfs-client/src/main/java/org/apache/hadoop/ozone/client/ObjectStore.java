begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * ObjectStore class is responsible for the client operations that can be  * performed on Ozone Object Store.  */
end_comment

begin_class
DECL|class|ObjectStore
specifier|public
class|class
name|ObjectStore
block|{
comment|/**    * The proxy used for connecting to the cluster and perform    * client operations.    */
DECL|field|proxy
specifier|private
specifier|final
name|ClientProtocol
name|proxy
decl_stmt|;
comment|/**    * Creates an instance of ObjectStore with the proxy.    * @param proxy ClientProtocol proxy    */
DECL|method|ObjectStore (ClientProtocol proxy)
specifier|public
name|ObjectStore
parameter_list|(
name|ClientProtocol
name|proxy
parameter_list|)
block|{
name|this
operator|.
name|proxy
operator|=
name|proxy
expr_stmt|;
block|}
comment|/**    * Creates the volume with default values.    * @param volumeName Name of the volume to be created.    * @throws IOException    */
DECL|method|createVolume (String volumeName)
specifier|public
name|void
name|createVolume
parameter_list|(
name|String
name|volumeName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates the volume.    * @param volumeName Name of the volume to be created.    * @param volumeArgs Volume properties.    * @throws IOException    */
DECL|method|createVolume (String volumeName, VolumeArgs volumeArgs)
specifier|public
name|void
name|createVolume
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|VolumeArgs
name|volumeArgs
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeArgs
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|volumeArgs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the volume information.    * @param volumeName Name of the volume.    * @return OzoneVolume    * @throws IOException    */
DECL|method|getVolume (String volumeName)
specifier|public
name|OzoneVolume
name|getVolume
parameter_list|(
name|String
name|volumeName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|proxy
operator|.
name|getVolumeDetails
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|volume
operator|.
name|setClientProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
return|return
name|volume
return|;
block|}
comment|/**    * Deletes the volume.    * @param volumeName Name of the volume.    * @throws IOException    */
DECL|method|deleteVolume (String volumeName)
specifier|public
name|void
name|deleteVolume
parameter_list|(
name|String
name|volumeName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|deleteVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

