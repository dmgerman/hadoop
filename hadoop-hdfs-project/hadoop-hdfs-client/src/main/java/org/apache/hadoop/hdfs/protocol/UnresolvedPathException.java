begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * Thrown when a symbolic link is encountered in a path.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|UnresolvedPathException
specifier|public
specifier|final
class|class
name|UnresolvedPathException
extends|extends
name|UnresolvedLinkException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
comment|// The path containing the link
DECL|field|preceding
specifier|private
name|String
name|preceding
decl_stmt|;
comment|// The path part preceding the link
DECL|field|remainder
specifier|private
name|String
name|remainder
decl_stmt|;
comment|// The path part following the link
DECL|field|linkTarget
specifier|private
name|String
name|linkTarget
decl_stmt|;
comment|// The link's target
comment|/**    * Used by RemoteException to instantiate an UnresolvedPathException.    */
DECL|method|UnresolvedPathException (String msg)
specifier|public
name|UnresolvedPathException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|UnresolvedPathException (String path, String preceding, String remainder, String linkTarget)
specifier|public
name|UnresolvedPathException
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|preceding
parameter_list|,
name|String
name|remainder
parameter_list|,
name|String
name|linkTarget
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|preceding
operator|=
name|preceding
expr_stmt|;
name|this
operator|.
name|remainder
operator|=
name|remainder
expr_stmt|;
name|this
operator|.
name|linkTarget
operator|=
name|linkTarget
expr_stmt|;
block|}
comment|/**    * Return a path with the link resolved with the target.    */
DECL|method|getResolvedPath ()
specifier|public
name|Path
name|getResolvedPath
parameter_list|()
block|{
comment|// If the path is absolute we cam throw out the preceding part and
comment|// just append the remainder to the target, otherwise append each
comment|// piece to resolve the link in path.
name|boolean
name|noRemainder
init|=
operator|(
name|remainder
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|remainder
argument_list|)
operator|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|linkTarget
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|.
name|isUriPathAbsolute
argument_list|()
condition|)
block|{
return|return
name|noRemainder
condition|?
name|target
else|:
operator|new
name|Path
argument_list|(
name|target
argument_list|,
name|remainder
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|noRemainder
condition|?
operator|new
name|Path
argument_list|(
name|preceding
argument_list|,
name|target
argument_list|)
else|:
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|preceding
argument_list|,
name|linkTarget
argument_list|)
argument_list|,
name|remainder
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
name|String
name|msg
init|=
name|super
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
return|return
name|msg
return|;
block|}
return|return
name|getResolvedPath
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

