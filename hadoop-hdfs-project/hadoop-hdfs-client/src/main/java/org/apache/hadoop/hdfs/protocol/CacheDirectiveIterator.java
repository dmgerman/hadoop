begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BatchedRemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Sampler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Trace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|TraceScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * CacheDirectiveIterator is a remote iterator that iterates cache directives.  * It supports retrying in case of namenode failover.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|CacheDirectiveIterator
specifier|public
class|class
name|CacheDirectiveIterator
extends|extends
name|BatchedRemoteIterator
argument_list|<
name|Long
argument_list|,
name|CacheDirectiveEntry
argument_list|>
block|{
DECL|field|filter
specifier|private
name|CacheDirectiveInfo
name|filter
decl_stmt|;
DECL|field|namenode
specifier|private
specifier|final
name|ClientProtocol
name|namenode
decl_stmt|;
DECL|field|traceSampler
specifier|private
specifier|final
name|Sampler
argument_list|<
name|?
argument_list|>
name|traceSampler
decl_stmt|;
DECL|method|CacheDirectiveIterator (ClientProtocol namenode, CacheDirectiveInfo filter, Sampler<?> traceSampler)
specifier|public
name|CacheDirectiveIterator
parameter_list|(
name|ClientProtocol
name|namenode
parameter_list|,
name|CacheDirectiveInfo
name|filter
parameter_list|,
name|Sampler
argument_list|<
name|?
argument_list|>
name|traceSampler
parameter_list|)
block|{
name|super
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|this
operator|.
name|namenode
operator|=
name|namenode
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|traceSampler
operator|=
name|traceSampler
expr_stmt|;
block|}
DECL|method|removeIdFromFilter (CacheDirectiveInfo filter)
specifier|private
specifier|static
name|CacheDirectiveInfo
name|removeIdFromFilter
parameter_list|(
name|CacheDirectiveInfo
name|filter
parameter_list|)
block|{
name|CacheDirectiveInfo
operator|.
name|Builder
name|builder
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Used for compatibility when communicating with a server version that    * does not support filtering directives by ID.    */
DECL|class|SingleEntry
specifier|private
specifier|static
class|class
name|SingleEntry
implements|implements
name|BatchedEntries
argument_list|<
name|CacheDirectiveEntry
argument_list|>
block|{
DECL|field|entry
specifier|private
specifier|final
name|CacheDirectiveEntry
name|entry
decl_stmt|;
DECL|method|SingleEntry (final CacheDirectiveEntry entry)
specifier|public
name|SingleEntry
parameter_list|(
specifier|final
name|CacheDirectiveEntry
name|entry
parameter_list|)
block|{
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get (int i)
specifier|public
name|CacheDirectiveEntry
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|entry
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|hasMore ()
specifier|public
name|boolean
name|hasMore
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|makeRequest (Long prevKey)
specifier|public
name|BatchedEntries
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|makeRequest
parameter_list|(
name|Long
name|prevKey
parameter_list|)
throws|throws
name|IOException
block|{
name|BatchedEntries
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|entries
init|=
literal|null
decl_stmt|;
name|TraceScope
name|scope
init|=
name|Trace
operator|.
name|startSpan
argument_list|(
literal|"listCacheDirectives"
argument_list|,
name|traceSampler
argument_list|)
decl_stmt|;
try|try
block|{
name|entries
operator|=
name|namenode
operator|.
name|listCacheDirectives
argument_list|(
name|prevKey
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Filtering by ID is unsupported"
argument_list|)
condition|)
block|{
comment|// Retry case for old servers, do the filtering client-side
name|long
name|id
init|=
name|filter
operator|.
name|getId
argument_list|()
decl_stmt|;
name|filter
operator|=
name|removeIdFromFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
comment|// Using id - 1 as prevId should get us a window containing the id
comment|// This is somewhat brittle, since it depends on directives being
comment|// returned in order of ascending ID.
name|entries
operator|=
name|namenode
operator|.
name|listCacheDirectives
argument_list|(
name|id
operator|-
literal|1
argument_list|,
name|filter
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CacheDirectiveEntry
name|entry
init|=
name|entries
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getInfo
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
name|Long
operator|)
name|id
argument_list|)
condition|)
block|{
return|return
operator|new
name|SingleEntry
argument_list|(
name|entry
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|RemoteException
argument_list|(
name|InvalidRequestException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Did not find requested id "
operator|+
name|id
argument_list|)
throw|;
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|scope
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|entries
argument_list|)
expr_stmt|;
return|return
name|entries
return|;
block|}
annotation|@
name|Override
DECL|method|elementToPrevKey (CacheDirectiveEntry entry)
specifier|public
name|Long
name|elementToPrevKey
parameter_list|(
name|CacheDirectiveEntry
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|getInfo
argument_list|()
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
end_class

end_unit

