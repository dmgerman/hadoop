begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.scm.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Holds the nodes that currently host the container for an object key hash.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|LocatedContainer
specifier|public
specifier|final
class|class
name|LocatedContainer
block|{
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|matchedKeyPrefix
specifier|private
specifier|final
name|String
name|matchedKeyPrefix
decl_stmt|;
DECL|field|containerName
specifier|private
specifier|final
name|String
name|containerName
decl_stmt|;
DECL|field|locations
specifier|private
specifier|final
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
name|locations
decl_stmt|;
DECL|field|leader
specifier|private
specifier|final
name|DatanodeInfo
name|leader
decl_stmt|;
comment|/**    * Creates a LocatedContainer.    *    * @param key object key    * @param matchedKeyPrefix prefix of key that was used to find the location    * @param containerName container name    * @param locations nodes that currently host the container    * @param leader node that currently acts as pipeline leader    */
DECL|method|LocatedContainer (String key, String matchedKeyPrefix, String containerName, Set<DatanodeInfo> locations, DatanodeInfo leader)
specifier|public
name|LocatedContainer
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|matchedKeyPrefix
parameter_list|,
name|String
name|containerName
parameter_list|,
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
name|locations
parameter_list|,
name|DatanodeInfo
name|leader
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|matchedKeyPrefix
operator|=
name|matchedKeyPrefix
expr_stmt|;
name|this
operator|.
name|containerName
operator|=
name|containerName
expr_stmt|;
name|this
operator|.
name|locations
operator|=
name|locations
expr_stmt|;
name|this
operator|.
name|leader
operator|=
name|leader
expr_stmt|;
block|}
comment|/**    * Returns the container name.    *    * @return container name    */
DECL|method|getContainerName ()
specifier|public
name|String
name|getContainerName
parameter_list|()
block|{
return|return
name|this
operator|.
name|containerName
return|;
block|}
comment|/**    * Returns the object key.    *    * @return object key    */
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|key
return|;
block|}
comment|/**    * Returns the node that currently acts as pipeline leader.    *    * @return node that currently acts as pipeline leader    */
DECL|method|getLeader ()
specifier|public
name|DatanodeInfo
name|getLeader
parameter_list|()
block|{
return|return
name|this
operator|.
name|leader
return|;
block|}
comment|/**    * Returns the nodes that currently host the container.    *    * @return Set<DatanodeInfo> nodes that currently host the container    */
DECL|method|getLocations ()
specifier|public
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
name|getLocations
parameter_list|()
block|{
return|return
name|this
operator|.
name|locations
return|;
block|}
comment|/**    * Returns the prefix of the key that was used to find the location.    *    * @return prefix of the key that was used to find the location    */
DECL|method|getMatchedKeyPrefix ()
specifier|public
name|String
name|getMatchedKeyPrefix
parameter_list|()
block|{
return|return
name|this
operator|.
name|matchedKeyPrefix
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object otherObj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|otherObj
parameter_list|)
block|{
if|if
condition|(
name|otherObj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|otherObj
operator|instanceof
name|LocatedContainer
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LocatedContainer
name|other
init|=
operator|(
name|LocatedContainer
operator|)
name|otherObj
decl_stmt|;
return|return
name|this
operator|.
name|key
operator|==
literal|null
condition|?
name|other
operator|.
name|key
operator|==
literal|null
else|:
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|other
operator|.
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|key
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"{key="
operator|+
name|key
operator|+
literal|"; matchedKeyPrefix="
operator|+
name|matchedKeyPrefix
operator|+
literal|"; containerName="
operator|+
name|containerName
operator|+
literal|"; locations="
operator|+
name|locations
operator|+
literal|"; leader="
operator|+
name|leader
operator|+
literal|"}"
return|;
block|}
block|}
end_class

end_unit

