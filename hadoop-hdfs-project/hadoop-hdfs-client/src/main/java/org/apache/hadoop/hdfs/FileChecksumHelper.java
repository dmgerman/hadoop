begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CompositeCrcFileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|MD5MD5CRC32CastagnoliFileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|MD5MD5CRC32GzipFileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|ChecksumCombineMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockChecksumOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockChecksumType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|StripedBlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|DataTransferProtoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|IOStreamPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|Op
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|Sender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|InvalidEncryptionKeyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|BlockOpResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|OpBlockChecksumResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelperClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|InvalidBlockTokenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|CrcComposer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|CrcUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Utility classes to compute file checksum for both replicated and striped  * files.  */
end_comment

begin_class
DECL|class|FileChecksumHelper
specifier|final
class|class
name|FileChecksumHelper
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileChecksumHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|FileChecksumHelper ()
specifier|private
name|FileChecksumHelper
parameter_list|()
block|{}
comment|/**    * A common abstract class to compute file checksum.    */
DECL|class|FileChecksumComputer
specifier|static
specifier|abstract
class|class
name|FileChecksumComputer
block|{
DECL|field|src
specifier|private
specifier|final
name|String
name|src
decl_stmt|;
DECL|field|length
specifier|private
specifier|final
name|long
name|length
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|DFSClient
name|client
decl_stmt|;
DECL|field|namenode
specifier|private
specifier|final
name|ClientProtocol
name|namenode
decl_stmt|;
DECL|field|combineMode
specifier|private
specifier|final
name|ChecksumCombineMode
name|combineMode
decl_stmt|;
DECL|field|blockChecksumType
specifier|private
specifier|final
name|BlockChecksumType
name|blockChecksumType
decl_stmt|;
DECL|field|blockChecksumBuf
specifier|private
specifier|final
name|DataOutputBuffer
name|blockChecksumBuf
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
DECL|field|fileChecksum
specifier|private
name|FileChecksum
name|fileChecksum
decl_stmt|;
DECL|field|blockLocations
specifier|private
name|LocatedBlocks
name|blockLocations
decl_stmt|;
DECL|field|timeout
specifier|private
name|int
name|timeout
decl_stmt|;
DECL|field|locatedBlocks
specifier|private
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|locatedBlocks
decl_stmt|;
DECL|field|remaining
specifier|private
name|long
name|remaining
init|=
literal|0L
decl_stmt|;
DECL|field|bytesPerCRC
specifier|private
name|int
name|bytesPerCRC
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|crcType
specifier|private
name|DataChecksum
operator|.
name|Type
name|crcType
init|=
name|DataChecksum
operator|.
name|Type
operator|.
name|DEFAULT
decl_stmt|;
DECL|field|crcPerBlock
specifier|private
name|long
name|crcPerBlock
init|=
literal|0
decl_stmt|;
DECL|field|isRefetchBlocks
specifier|private
name|boolean
name|isRefetchBlocks
init|=
literal|false
decl_stmt|;
DECL|field|lastRetriedIndex
specifier|private
name|int
name|lastRetriedIndex
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * Constructor that accepts all the input parameters for the computing.      */
DECL|method|FileChecksumComputer (String src, long length, LocatedBlocks blockLocations, ClientProtocol namenode, DFSClient client, ChecksumCombineMode combineMode)
name|FileChecksumComputer
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|length
parameter_list|,
name|LocatedBlocks
name|blockLocations
parameter_list|,
name|ClientProtocol
name|namenode
parameter_list|,
name|DFSClient
name|client
parameter_list|,
name|ChecksumCombineMode
name|combineMode
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|src
operator|=
name|src
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|blockLocations
operator|=
name|blockLocations
expr_stmt|;
name|this
operator|.
name|namenode
operator|=
name|namenode
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|combineMode
operator|=
name|combineMode
expr_stmt|;
switch|switch
condition|(
name|combineMode
condition|)
block|{
case|case
name|MD5MD5CRC
case|:
name|this
operator|.
name|blockChecksumType
operator|=
name|BlockChecksumType
operator|.
name|MD5CRC
expr_stmt|;
break|break;
case|case
name|COMPOSITE_CRC
case|:
name|this
operator|.
name|blockChecksumType
operator|=
name|BlockChecksumType
operator|.
name|COMPOSITE_CRC
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown ChecksumCombineMode: "
operator|+
name|combineMode
argument_list|)
throw|;
block|}
name|this
operator|.
name|remaining
operator|=
name|length
expr_stmt|;
if|if
condition|(
name|blockLocations
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|src
operator|.
name|contains
argument_list|(
name|HdfsConstants
operator|.
name|SEPARATOR_DOT_SNAPSHOT_DIR_SEPARATOR
argument_list|)
condition|)
block|{
name|this
operator|.
name|remaining
operator|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|blockLocations
operator|.
name|getFileLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|locatedBlocks
operator|=
name|blockLocations
operator|.
name|getLocatedBlocks
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getSrc ()
name|String
name|getSrc
parameter_list|()
block|{
return|return
name|src
return|;
block|}
DECL|method|getLength ()
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
DECL|method|getClient ()
name|DFSClient
name|getClient
parameter_list|()
block|{
return|return
name|client
return|;
block|}
DECL|method|getNamenode ()
name|ClientProtocol
name|getNamenode
parameter_list|()
block|{
return|return
name|namenode
return|;
block|}
DECL|method|getCombineMode ()
name|ChecksumCombineMode
name|getCombineMode
parameter_list|()
block|{
return|return
name|combineMode
return|;
block|}
DECL|method|getBlockChecksumType ()
name|BlockChecksumType
name|getBlockChecksumType
parameter_list|()
block|{
return|return
name|blockChecksumType
return|;
block|}
DECL|method|getBlockChecksumBuf ()
name|DataOutputBuffer
name|getBlockChecksumBuf
parameter_list|()
block|{
return|return
name|blockChecksumBuf
return|;
block|}
DECL|method|getFileChecksum ()
name|FileChecksum
name|getFileChecksum
parameter_list|()
block|{
return|return
name|fileChecksum
return|;
block|}
DECL|method|getBlockLocations ()
name|LocatedBlocks
name|getBlockLocations
parameter_list|()
block|{
return|return
name|blockLocations
return|;
block|}
DECL|method|refetchBlocks ()
name|void
name|refetchBlocks
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|blockLocations
operator|=
name|getClient
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|getSrc
argument_list|()
argument_list|,
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|locatedBlocks
operator|=
name|getBlockLocations
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|()
expr_stmt|;
name|this
operator|.
name|isRefetchBlocks
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|getTimeout ()
name|int
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
DECL|method|setTimeout (int timeout)
name|void
name|setTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
DECL|method|getLocatedBlocks ()
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|getLocatedBlocks
parameter_list|()
block|{
return|return
name|locatedBlocks
return|;
block|}
DECL|method|getRemaining ()
name|long
name|getRemaining
parameter_list|()
block|{
return|return
name|remaining
return|;
block|}
DECL|method|setRemaining (long remaining)
name|void
name|setRemaining
parameter_list|(
name|long
name|remaining
parameter_list|)
block|{
name|this
operator|.
name|remaining
operator|=
name|remaining
expr_stmt|;
block|}
DECL|method|getBytesPerCRC ()
name|int
name|getBytesPerCRC
parameter_list|()
block|{
return|return
name|bytesPerCRC
return|;
block|}
DECL|method|setBytesPerCRC (int bytesPerCRC)
name|void
name|setBytesPerCRC
parameter_list|(
name|int
name|bytesPerCRC
parameter_list|)
block|{
name|this
operator|.
name|bytesPerCRC
operator|=
name|bytesPerCRC
expr_stmt|;
block|}
DECL|method|getCrcType ()
name|DataChecksum
operator|.
name|Type
name|getCrcType
parameter_list|()
block|{
return|return
name|crcType
return|;
block|}
DECL|method|setCrcType (DataChecksum.Type crcType)
name|void
name|setCrcType
parameter_list|(
name|DataChecksum
operator|.
name|Type
name|crcType
parameter_list|)
block|{
name|this
operator|.
name|crcType
operator|=
name|crcType
expr_stmt|;
block|}
DECL|method|getCrcPerBlock ()
name|long
name|getCrcPerBlock
parameter_list|()
block|{
return|return
name|crcPerBlock
return|;
block|}
DECL|method|setCrcPerBlock (long crcPerBlock)
name|void
name|setCrcPerBlock
parameter_list|(
name|long
name|crcPerBlock
parameter_list|)
block|{
name|this
operator|.
name|crcPerBlock
operator|=
name|crcPerBlock
expr_stmt|;
block|}
DECL|method|isRefetchBlocks ()
name|boolean
name|isRefetchBlocks
parameter_list|()
block|{
return|return
name|isRefetchBlocks
return|;
block|}
DECL|method|setRefetchBlocks (boolean refetchBlocks)
name|void
name|setRefetchBlocks
parameter_list|(
name|boolean
name|refetchBlocks
parameter_list|)
block|{
name|this
operator|.
name|isRefetchBlocks
operator|=
name|refetchBlocks
expr_stmt|;
block|}
DECL|method|getLastRetriedIndex ()
name|int
name|getLastRetriedIndex
parameter_list|()
block|{
return|return
name|lastRetriedIndex
return|;
block|}
DECL|method|setLastRetriedIndex (int lastRetriedIndex)
name|void
name|setLastRetriedIndex
parameter_list|(
name|int
name|lastRetriedIndex
parameter_list|)
block|{
name|this
operator|.
name|lastRetriedIndex
operator|=
name|lastRetriedIndex
expr_stmt|;
block|}
comment|/**      * Perform the file checksum computing. The intermediate results are stored      * in the object and will be used later.      * @throws IOException      */
DECL|method|compute ()
name|void
name|compute
parameter_list|()
throws|throws
name|IOException
block|{
comment|/**        * request length is 0 or the file is empty, return one with the        * magic entry that matches what previous hdfs versions return.        */
if|if
condition|(
name|locatedBlocks
operator|==
literal|null
operator|||
name|locatedBlocks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Explicitly specified here in case the default DataOutputBuffer
comment|// buffer length value is changed in future. This matters because the
comment|// fixed value 32 has to be used to repeat the magic value for previous
comment|// HDFS version.
specifier|final
name|int
name|lenOfZeroBytes
init|=
literal|32
decl_stmt|;
name|byte
index|[]
name|emptyBlockMd5
init|=
operator|new
name|byte
index|[
name|lenOfZeroBytes
index|]
decl_stmt|;
name|MD5Hash
name|fileMD5
init|=
name|MD5Hash
operator|.
name|digest
argument_list|(
name|emptyBlockMd5
argument_list|)
decl_stmt|;
name|fileChecksum
operator|=
operator|new
name|MD5MD5CRC32GzipFileChecksum
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|fileMD5
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checksumBlocks
argument_list|()
expr_stmt|;
name|fileChecksum
operator|=
name|makeFinalResult
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Compute block checksums block by block and append the raw bytes of the      * block checksums into getBlockChecksumBuf().      *      * @throws IOException      */
DECL|method|checksumBlocks ()
specifier|abstract
name|void
name|checksumBlocks
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Make final file checksum result given the per-block or per-block-group      * checksums collected into getBlockChecksumBuf().      */
DECL|method|makeFinalResult ()
name|FileChecksum
name|makeFinalResult
parameter_list|()
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|combineMode
condition|)
block|{
case|case
name|MD5MD5CRC
case|:
return|return
name|makeMd5CrcResult
argument_list|()
return|;
case|case
name|COMPOSITE_CRC
case|:
return|return
name|makeCompositeCrcResult
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown ChecksumCombineMode: "
operator|+
name|combineMode
argument_list|)
throw|;
block|}
block|}
DECL|method|makeMd5CrcResult ()
name|FileChecksum
name|makeMd5CrcResult
parameter_list|()
block|{
comment|//compute file MD5
specifier|final
name|MD5Hash
name|fileMD5
init|=
name|MD5Hash
operator|.
name|digest
argument_list|(
name|blockChecksumBuf
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|crcType
condition|)
block|{
case|case
name|CRC32
case|:
return|return
operator|new
name|MD5MD5CRC32GzipFileChecksum
argument_list|(
name|bytesPerCRC
argument_list|,
name|crcPerBlock
argument_list|,
name|fileMD5
argument_list|)
return|;
case|case
name|CRC32C
case|:
return|return
operator|new
name|MD5MD5CRC32CastagnoliFileChecksum
argument_list|(
name|bytesPerCRC
argument_list|,
name|crcPerBlock
argument_list|,
name|fileMD5
argument_list|)
return|;
default|default:
comment|// we will get here when crcType is "NULL".
return|return
literal|null
return|;
block|}
block|}
DECL|method|makeCompositeCrcResult ()
name|FileChecksum
name|makeCompositeCrcResult
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|blockSizeHint
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|locatedBlocks
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blockSizeHint
operator|=
name|locatedBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlockSize
argument_list|()
expr_stmt|;
block|}
name|CrcComposer
name|crcComposer
init|=
name|CrcComposer
operator|.
name|newCrcComposer
argument_list|(
name|getCrcType
argument_list|()
argument_list|,
name|blockSizeHint
argument_list|)
decl_stmt|;
name|byte
index|[]
name|blockChecksumBytes
init|=
name|blockChecksumBuf
operator|.
name|getData
argument_list|()
decl_stmt|;
name|long
name|sumBlockLengths
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locatedBlocks
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|LocatedBlock
name|block
init|=
name|locatedBlocks
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// For everything except the last LocatedBlock, we expect getBlockSize()
comment|// to accurately reflect the number of file bytes digested in the block
comment|// checksum.
name|sumBlockLengths
operator|+=
name|block
operator|.
name|getBlockSize
argument_list|()
expr_stmt|;
name|int
name|blockCrc
init|=
name|CrcUtil
operator|.
name|readInt
argument_list|(
name|blockChecksumBytes
argument_list|,
name|i
operator|*
literal|4
argument_list|)
decl_stmt|;
name|crcComposer
operator|.
name|update
argument_list|(
name|blockCrc
argument_list|,
name|block
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added blockCrc 0x{} for block index {} of size {}"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|blockCrc
argument_list|,
literal|16
argument_list|)
argument_list|,
name|i
argument_list|,
name|block
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// NB: In some cases the located blocks have their block size adjusted
comment|// explicitly based on the requested length, but not all cases;
comment|// these numbers may or may not reflect actual sizes on disk.
name|long
name|reportedLastBlockSize
init|=
name|blockLocations
operator|.
name|getLastLocatedBlock
argument_list|()
operator|.
name|getBlockSize
argument_list|()
decl_stmt|;
name|long
name|consumedLastBlockLength
init|=
name|reportedLastBlockSize
decl_stmt|;
if|if
condition|(
name|length
operator|-
name|sumBlockLengths
operator|<
name|reportedLastBlockSize
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Last block length {} is less than reportedLastBlockSize {}"
argument_list|,
name|length
operator|-
name|sumBlockLengths
argument_list|,
name|reportedLastBlockSize
argument_list|)
expr_stmt|;
name|consumedLastBlockLength
operator|=
name|length
operator|-
name|sumBlockLengths
expr_stmt|;
block|}
comment|// NB: blockChecksumBytes.length may be much longer than actual bytes
comment|// written into the DataOutput.
name|int
name|lastBlockCrc
init|=
name|CrcUtil
operator|.
name|readInt
argument_list|(
name|blockChecksumBytes
argument_list|,
literal|4
operator|*
operator|(
name|locatedBlocks
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
name|crcComposer
operator|.
name|update
argument_list|(
name|lastBlockCrc
argument_list|,
name|consumedLastBlockLength
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added lastBlockCrc 0x{} for block index {} of size {}"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|lastBlockCrc
argument_list|,
literal|16
argument_list|)
argument_list|,
name|locatedBlocks
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|consumedLastBlockLength
argument_list|)
expr_stmt|;
name|int
name|compositeCrc
init|=
name|CrcUtil
operator|.
name|readInt
argument_list|(
name|crcComposer
operator|.
name|digest
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
operator|new
name|CompositeCrcFileChecksum
argument_list|(
name|compositeCrc
argument_list|,
name|getCrcType
argument_list|()
argument_list|,
name|bytesPerCRC
argument_list|)
return|;
block|}
comment|/**      * Create and return a sender given an IO stream pair.      */
DECL|method|createSender (IOStreamPair pair)
name|Sender
name|createSender
parameter_list|(
name|IOStreamPair
name|pair
parameter_list|)
block|{
name|DataOutputStream
name|out
init|=
operator|(
name|DataOutputStream
operator|)
name|pair
operator|.
name|out
decl_stmt|;
return|return
operator|new
name|Sender
argument_list|(
name|out
argument_list|)
return|;
block|}
comment|/**      * Close an IO stream pair.      */
DECL|method|close (IOStreamPair pair)
name|void
name|close
parameter_list|(
name|IOStreamPair
name|pair
parameter_list|)
block|{
if|if
condition|(
name|pair
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|pair
operator|.
name|in
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|pair
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Parses out various checksum properties like bytesPerCrc, crcPerBlock,      * and crcType from {@code checksumData} and either stores them as the      * authoritative value or compares them to a previously extracted value      * to check comppatibility.      *      * @param checksumData response from the datanode      * @param locatedBlock the block corresponding to the response      * @param datanode the datanode which produced the response      * @param blockIdx the block or block-group index of the response      */
DECL|method|extractChecksumProperties ( OpBlockChecksumResponseProto checksumData, LocatedBlock locatedBlock, DatanodeInfo datanode, int blockIdx)
name|void
name|extractChecksumProperties
parameter_list|(
name|OpBlockChecksumResponseProto
name|checksumData
parameter_list|,
name|LocatedBlock
name|locatedBlock
parameter_list|,
name|DatanodeInfo
name|datanode
parameter_list|,
name|int
name|blockIdx
parameter_list|)
throws|throws
name|IOException
block|{
comment|//read byte-per-checksum
specifier|final
name|int
name|bpc
init|=
name|checksumData
operator|.
name|getBytesPerCrc
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockIdx
operator|==
literal|0
condition|)
block|{
comment|//first block
name|setBytesPerCRC
argument_list|(
name|bpc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bpc
operator|!=
name|getBytesPerCRC
argument_list|()
condition|)
block|{
if|if
condition|(
name|getBlockChecksumType
argument_list|()
operator|==
name|BlockChecksumType
operator|.
name|COMPOSITE_CRC
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Current bytesPerCRC={} doesn't match next bpc={}, but "
operator|+
literal|"continuing anyway because we're using COMPOSITE_CRC. "
operator|+
literal|"If trying to preserve CHECKSUMTYPE, only the current "
operator|+
literal|"bytesPerCRC will be preserved."
argument_list|,
name|getBytesPerCRC
argument_list|()
argument_list|,
name|bpc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Byte-per-checksum not matched: bpc="
operator|+
name|bpc
operator|+
literal|" but bytesPerCRC="
operator|+
name|getBytesPerCRC
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|//read crc-per-block
specifier|final
name|long
name|cpb
init|=
name|checksumData
operator|.
name|getCrcPerBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|blockIdx
operator|==
literal|0
condition|)
block|{
name|setCrcPerBlock
argument_list|(
name|cpb
argument_list|)
expr_stmt|;
block|}
comment|// read crc-type
specifier|final
name|DataChecksum
operator|.
name|Type
name|ct
decl_stmt|;
if|if
condition|(
name|checksumData
operator|.
name|hasCrcType
argument_list|()
condition|)
block|{
name|ct
operator|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|checksumData
operator|.
name|getCrcType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retrieving checksum from an earlier-version DataNode: "
operator|+
literal|"inferring checksum by reading first byte"
argument_list|)
expr_stmt|;
name|ct
operator|=
name|getClient
argument_list|()
operator|.
name|inferChecksumTypeByReading
argument_list|(
name|locatedBlock
argument_list|,
name|datanode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blockIdx
operator|==
literal|0
condition|)
block|{
name|setCrcType
argument_list|(
name|ct
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getCrcType
argument_list|()
operator|!=
name|DataChecksum
operator|.
name|Type
operator|.
name|MIXED
operator|&&
name|getCrcType
argument_list|()
operator|!=
name|ct
condition|)
block|{
if|if
condition|(
name|getBlockChecksumType
argument_list|()
operator|==
name|BlockChecksumType
operator|.
name|COMPOSITE_CRC
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"DataChecksum.Type.MIXED is not supported for COMPOSITE_CRC"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// if crc types are mixed in a file
name|setCrcType
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|MIXED
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|blockIdx
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"set bytesPerCRC={}, crcPerBlock={}"
argument_list|,
name|getBytesPerCRC
argument_list|()
argument_list|,
name|getCrcPerBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Parses out the raw blockChecksum bytes from {@code checksumData}      * according to the blockChecksumType and populates the cumulative      * blockChecksumBuf with it.      *      * @return a debug-string representation of the parsed checksum if      *     debug is enabled, otherwise null.      */
DECL|method|populateBlockChecksumBuf (OpBlockChecksumResponseProto checksumData)
name|String
name|populateBlockChecksumBuf
parameter_list|(
name|OpBlockChecksumResponseProto
name|checksumData
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|blockChecksumForDebug
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|getBlockChecksumType
argument_list|()
condition|)
block|{
case|case
name|MD5CRC
case|:
comment|//read md5
specifier|final
name|MD5Hash
name|md5
init|=
operator|new
name|MD5Hash
argument_list|(
name|checksumData
operator|.
name|getBlockChecksum
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|md5
operator|.
name|write
argument_list|(
name|getBlockChecksumBuf
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|blockChecksumForDebug
operator|=
name|md5
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|COMPOSITE_CRC
case|:
name|BlockChecksumType
name|returnedType
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|checksumData
operator|.
name|getBlockChecksumOptions
argument_list|()
operator|.
name|getBlockChecksumType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnedType
operator|!=
name|BlockChecksumType
operator|.
name|COMPOSITE_CRC
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected blockChecksumType '%s', expecting COMPOSITE_CRC"
argument_list|,
name|returnedType
argument_list|)
argument_list|)
throw|;
block|}
name|byte
index|[]
name|crcBytes
init|=
name|checksumData
operator|.
name|getBlockChecksum
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|blockChecksumForDebug
operator|=
name|CrcUtil
operator|.
name|toSingleCrcString
argument_list|(
name|crcBytes
argument_list|)
expr_stmt|;
block|}
name|getBlockChecksumBuf
argument_list|()
operator|.
name|write
argument_list|(
name|crcBytes
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown BlockChecksumType: "
operator|+
name|getBlockChecksumType
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|blockChecksumForDebug
return|;
block|}
block|}
comment|/**    * Replicated file checksum computer.    */
DECL|class|ReplicatedFileChecksumComputer
specifier|static
class|class
name|ReplicatedFileChecksumComputer
extends|extends
name|FileChecksumComputer
block|{
DECL|field|blockIdx
specifier|private
name|int
name|blockIdx
decl_stmt|;
DECL|method|ReplicatedFileChecksumComputer (String src, long length, LocatedBlocks blockLocations, ClientProtocol namenode, DFSClient client, ChecksumCombineMode combineMode)
name|ReplicatedFileChecksumComputer
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|length
parameter_list|,
name|LocatedBlocks
name|blockLocations
parameter_list|,
name|ClientProtocol
name|namenode
parameter_list|,
name|DFSClient
name|client
parameter_list|,
name|ChecksumCombineMode
name|combineMode
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|src
argument_list|,
name|length
argument_list|,
name|blockLocations
argument_list|,
name|namenode
argument_list|,
name|client
argument_list|,
name|combineMode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checksumBlocks ()
name|void
name|checksumBlocks
parameter_list|()
throws|throws
name|IOException
block|{
comment|// get block checksum for each block
for|for
control|(
name|blockIdx
operator|=
literal|0
init|;
name|blockIdx
operator|<
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
operator|&&
name|getRemaining
argument_list|()
operator|>=
literal|0
condition|;
name|blockIdx
operator|++
control|)
block|{
if|if
condition|(
name|isRefetchBlocks
argument_list|()
condition|)
block|{
comment|// refetch to get fresh tokens
name|refetchBlocks
argument_list|()
expr_stmt|;
block|}
name|LocatedBlock
name|locatedBlock
init|=
name|getLocatedBlocks
argument_list|()
operator|.
name|get
argument_list|(
name|blockIdx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checksumBlock
argument_list|(
name|locatedBlock
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PathIOException
argument_list|(
name|getSrc
argument_list|()
argument_list|,
literal|"Fail to get block MD5 for "
operator|+
name|locatedBlock
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Return true when sounds good to continue or retry, false when severe      * condition or totally failed.      */
DECL|method|checksumBlock (LocatedBlock locatedBlock)
specifier|private
name|boolean
name|checksumBlock
parameter_list|(
name|LocatedBlock
name|locatedBlock
parameter_list|)
block|{
name|ExtendedBlock
name|block
init|=
name|locatedBlock
operator|.
name|getBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|getRemaining
argument_list|()
operator|<
name|block
operator|.
name|getNumBytes
argument_list|()
condition|)
block|{
name|block
operator|.
name|setNumBytes
argument_list|(
name|getRemaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setRemaining
argument_list|(
name|getRemaining
argument_list|()
operator|-
name|block
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|DatanodeInfo
index|[]
name|datanodes
init|=
name|locatedBlock
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|int
name|tmpTimeout
init|=
literal|3000
operator|*
name|datanodes
operator|.
name|length
operator|+
name|getClient
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|getSocketTimeout
argument_list|()
decl_stmt|;
name|setTimeout
argument_list|(
name|tmpTimeout
argument_list|)
expr_stmt|;
comment|//try each datanode location of the block
name|boolean
name|done
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
operator|!
name|done
operator|&&
name|j
operator|<
name|datanodes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
try|try
block|{
name|tryDatanode
argument_list|(
name|locatedBlock
argument_list|,
name|datanodes
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidBlockTokenException
name|ibte
parameter_list|)
block|{
if|if
condition|(
name|blockIdx
operator|>
name|getLastRetriedIndex
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got access token error in response to OP_BLOCK_CHECKSUM "
operator|+
literal|"for file {} for block {} from datanode {}. Will retry "
operator|+
literal|"the block once."
argument_list|,
name|getSrc
argument_list|()
argument_list|,
name|block
argument_list|,
name|datanodes
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|setLastRetriedIndex
argument_list|(
name|blockIdx
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
comment|// actually it's not done; but we'll retry
name|blockIdx
operator|--
expr_stmt|;
comment|// repeat at blockIdx-th block
name|setRefetchBlocks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidEncryptionKeyException
name|iee
parameter_list|)
block|{
if|if
condition|(
name|blockIdx
operator|>
name|getLastRetriedIndex
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got invalid encryption key error in response to "
operator|+
literal|"OP_BLOCK_CHECKSUM for file {} for block {} from "
operator|+
literal|"datanode {}. Will retry "
operator|+
literal|"the block once."
argument_list|,
name|getSrc
argument_list|()
argument_list|,
name|block
argument_list|,
name|datanodes
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|setLastRetriedIndex
argument_list|(
name|blockIdx
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
comment|// actually it's not done; but we'll retry
name|blockIdx
operator|--
expr_stmt|;
comment|// repeat at i-th block
name|getClient
argument_list|()
operator|.
name|clearDataEncryptionKey
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"src={}"
operator|+
literal|", datanodes[{}]={}"
argument_list|,
name|getSrc
argument_list|()
argument_list|,
name|j
argument_list|,
name|datanodes
index|[
name|j
index|]
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|done
return|;
block|}
comment|/**      * Try one replica or datanode to compute the block checksum given a block.      */
DECL|method|tryDatanode (LocatedBlock locatedBlock, DatanodeInfo datanode)
specifier|private
name|void
name|tryDatanode
parameter_list|(
name|LocatedBlock
name|locatedBlock
parameter_list|,
name|DatanodeInfo
name|datanode
parameter_list|)
throws|throws
name|IOException
block|{
name|ExtendedBlock
name|block
init|=
name|locatedBlock
operator|.
name|getBlock
argument_list|()
decl_stmt|;
try|try
init|(
name|IOStreamPair
name|pair
init|=
name|getClient
argument_list|()
operator|.
name|connectToDN
argument_list|(
name|datanode
argument_list|,
name|getTimeout
argument_list|()
argument_list|,
name|locatedBlock
operator|.
name|getBlockToken
argument_list|()
argument_list|)
init|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"write to {}: {}, block={}"
argument_list|,
name|datanode
argument_list|,
name|Op
operator|.
name|BLOCK_CHECKSUM
argument_list|,
name|block
argument_list|)
expr_stmt|;
comment|// get block checksum
name|createSender
argument_list|(
name|pair
argument_list|)
operator|.
name|blockChecksum
argument_list|(
name|block
argument_list|,
name|locatedBlock
operator|.
name|getBlockToken
argument_list|()
argument_list|,
operator|new
name|BlockChecksumOptions
argument_list|(
name|getBlockChecksumType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|BlockOpResponseProto
name|reply
init|=
name|BlockOpResponseProto
operator|.
name|parseFrom
argument_list|(
name|PBHelperClient
operator|.
name|vintPrefixed
argument_list|(
name|pair
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|logInfo
init|=
literal|"for block "
operator|+
name|block
operator|+
literal|" from datanode "
operator|+
name|datanode
decl_stmt|;
name|DataTransferProtoUtil
operator|.
name|checkBlockOpStatus
argument_list|(
name|reply
argument_list|,
name|logInfo
argument_list|)
expr_stmt|;
name|OpBlockChecksumResponseProto
name|checksumData
init|=
name|reply
operator|.
name|getChecksumResponse
argument_list|()
decl_stmt|;
name|extractChecksumProperties
argument_list|(
name|checksumData
argument_list|,
name|locatedBlock
argument_list|,
name|datanode
argument_list|,
name|blockIdx
argument_list|)
expr_stmt|;
name|String
name|blockChecksumForDebug
init|=
name|populateBlockChecksumBuf
argument_list|(
name|checksumData
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"got reply from {}: blockChecksum={}, blockChecksumType={}"
argument_list|,
name|datanode
argument_list|,
name|blockChecksumForDebug
argument_list|,
name|getBlockChecksumType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Non-striped checksum computing for striped files.    */
DECL|class|StripedFileNonStripedChecksumComputer
specifier|static
class|class
name|StripedFileNonStripedChecksumComputer
extends|extends
name|FileChecksumComputer
block|{
DECL|field|ecPolicy
specifier|private
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
decl_stmt|;
DECL|field|bgIdx
specifier|private
name|int
name|bgIdx
decl_stmt|;
DECL|method|StripedFileNonStripedChecksumComputer (String src, long length, LocatedBlocks blockLocations, ClientProtocol namenode, DFSClient client, ErasureCodingPolicy ecPolicy, ChecksumCombineMode combineMode)
name|StripedFileNonStripedChecksumComputer
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|length
parameter_list|,
name|LocatedBlocks
name|blockLocations
parameter_list|,
name|ClientProtocol
name|namenode
parameter_list|,
name|DFSClient
name|client
parameter_list|,
name|ErasureCodingPolicy
name|ecPolicy
parameter_list|,
name|ChecksumCombineMode
name|combineMode
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|src
argument_list|,
name|length
argument_list|,
name|blockLocations
argument_list|,
name|namenode
argument_list|,
name|client
argument_list|,
name|combineMode
argument_list|)
expr_stmt|;
name|this
operator|.
name|ecPolicy
operator|=
name|ecPolicy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checksumBlocks ()
name|void
name|checksumBlocks
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|tmpTimeout
init|=
literal|3000
operator|*
literal|1
operator|+
name|getClient
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|getSocketTimeout
argument_list|()
decl_stmt|;
name|setTimeout
argument_list|(
name|tmpTimeout
argument_list|)
expr_stmt|;
for|for
control|(
name|bgIdx
operator|=
literal|0
init|;
name|bgIdx
operator|<
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
operator|&&
name|getRemaining
argument_list|()
operator|>=
literal|0
condition|;
name|bgIdx
operator|++
control|)
block|{
if|if
condition|(
name|isRefetchBlocks
argument_list|()
condition|)
block|{
comment|// refetch to get fresh tokens
name|refetchBlocks
argument_list|()
expr_stmt|;
block|}
name|LocatedBlock
name|locatedBlock
init|=
name|getLocatedBlocks
argument_list|()
operator|.
name|get
argument_list|(
name|bgIdx
argument_list|)
decl_stmt|;
name|LocatedStripedBlock
name|blockGroup
init|=
operator|(
name|LocatedStripedBlock
operator|)
name|locatedBlock
decl_stmt|;
if|if
condition|(
operator|!
name|checksumBlockGroup
argument_list|(
name|blockGroup
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PathIOException
argument_list|(
name|getSrc
argument_list|()
argument_list|,
literal|"Fail to get block checksum for "
operator|+
name|locatedBlock
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|checksumBlockGroup ( LocatedStripedBlock blockGroup)
specifier|private
name|boolean
name|checksumBlockGroup
parameter_list|(
name|LocatedStripedBlock
name|blockGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|ExtendedBlock
name|block
init|=
name|blockGroup
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|long
name|requestedNumBytes
init|=
name|block
operator|.
name|getNumBytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|getRemaining
argument_list|()
operator|<
name|block
operator|.
name|getNumBytes
argument_list|()
condition|)
block|{
name|requestedNumBytes
operator|=
name|getRemaining
argument_list|()
expr_stmt|;
block|}
name|setRemaining
argument_list|(
name|getRemaining
argument_list|()
operator|-
name|requestedNumBytes
argument_list|)
expr_stmt|;
name|StripedBlockInfo
name|stripedBlockInfo
init|=
operator|new
name|StripedBlockInfo
argument_list|(
name|block
argument_list|,
name|blockGroup
operator|.
name|getLocations
argument_list|()
argument_list|,
name|blockGroup
operator|.
name|getBlockTokens
argument_list|()
argument_list|,
name|blockGroup
operator|.
name|getBlockIndices
argument_list|()
argument_list|,
name|ecPolicy
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|datanodes
init|=
name|blockGroup
operator|.
name|getLocations
argument_list|()
decl_stmt|;
comment|//try each datanode in the block group.
name|boolean
name|done
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
operator|!
name|done
operator|&&
name|j
operator|<
name|datanodes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
try|try
block|{
name|tryDatanode
argument_list|(
name|blockGroup
argument_list|,
name|stripedBlockInfo
argument_list|,
name|datanodes
index|[
name|j
index|]
argument_list|,
name|requestedNumBytes
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidBlockTokenException
name|ibte
parameter_list|)
block|{
if|if
condition|(
name|bgIdx
operator|>
name|getLastRetriedIndex
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got access token error in response to OP_BLOCK_CHECKSUM "
operator|+
literal|"for file {} for block {} from datanode {}. Will retry "
operator|+
literal|"the block once."
argument_list|,
name|getSrc
argument_list|()
argument_list|,
name|block
argument_list|,
name|datanodes
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|setLastRetriedIndex
argument_list|(
name|bgIdx
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
comment|// actually it's not done; but we'll retry
name|bgIdx
operator|--
expr_stmt|;
comment|// repeat at bgIdx-th block
name|setRefetchBlocks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"src={}"
operator|+
literal|", datanodes[{}]={}"
argument_list|,
name|getSrc
argument_list|()
argument_list|,
name|j
argument_list|,
name|datanodes
index|[
name|j
index|]
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|done
return|;
block|}
comment|/**      * Return true when sounds good to continue or retry, false when severe      * condition or totally failed.      */
DECL|method|tryDatanode (LocatedStripedBlock blockGroup, StripedBlockInfo stripedBlockInfo, DatanodeInfo datanode, long requestedNumBytes)
specifier|private
name|void
name|tryDatanode
parameter_list|(
name|LocatedStripedBlock
name|blockGroup
parameter_list|,
name|StripedBlockInfo
name|stripedBlockInfo
parameter_list|,
name|DatanodeInfo
name|datanode
parameter_list|,
name|long
name|requestedNumBytes
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|IOStreamPair
name|pair
init|=
name|getClient
argument_list|()
operator|.
name|connectToDN
argument_list|(
name|datanode
argument_list|,
name|getTimeout
argument_list|()
argument_list|,
name|blockGroup
operator|.
name|getBlockToken
argument_list|()
argument_list|)
init|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"write to {}: {}, blockGroup={}"
argument_list|,
name|datanode
argument_list|,
name|Op
operator|.
name|BLOCK_GROUP_CHECKSUM
argument_list|,
name|blockGroup
argument_list|)
expr_stmt|;
comment|// get block group checksum
name|createSender
argument_list|(
name|pair
argument_list|)
operator|.
name|blockGroupChecksum
argument_list|(
name|stripedBlockInfo
argument_list|,
name|blockGroup
operator|.
name|getBlockToken
argument_list|()
argument_list|,
name|requestedNumBytes
argument_list|,
operator|new
name|BlockChecksumOptions
argument_list|(
name|getBlockChecksumType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|BlockOpResponseProto
name|reply
init|=
name|BlockOpResponseProto
operator|.
name|parseFrom
argument_list|(
name|PBHelperClient
operator|.
name|vintPrefixed
argument_list|(
name|pair
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|logInfo
init|=
literal|"for blockGroup "
operator|+
name|blockGroup
operator|+
literal|" from datanode "
operator|+
name|datanode
decl_stmt|;
name|DataTransferProtoUtil
operator|.
name|checkBlockOpStatus
argument_list|(
name|reply
argument_list|,
name|logInfo
argument_list|)
expr_stmt|;
name|OpBlockChecksumResponseProto
name|checksumData
init|=
name|reply
operator|.
name|getChecksumResponse
argument_list|()
decl_stmt|;
name|extractChecksumProperties
argument_list|(
name|checksumData
argument_list|,
name|blockGroup
argument_list|,
name|datanode
argument_list|,
name|bgIdx
argument_list|)
expr_stmt|;
name|String
name|blockChecksumForDebug
init|=
name|populateBlockChecksumBuf
argument_list|(
name|checksumData
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"got reply from {}: blockChecksum={}, blockChecksumType={}"
argument_list|,
name|datanode
argument_list|,
name|blockChecksumForDebug
argument_list|,
name|getBlockChecksumType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

