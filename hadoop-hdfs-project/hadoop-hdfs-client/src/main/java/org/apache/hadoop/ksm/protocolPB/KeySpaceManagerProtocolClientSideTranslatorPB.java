begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ksm.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ksm
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmBucketArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ksm
operator|.
name|protocol
operator|.
name|KeySpaceManagerProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|BucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|CreateBucketRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|CreateBucketResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|CreateVolumeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|CreateVolumeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|SetVolumePropertyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|SetVolumePropertyResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|InfoVolumeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|InfoVolumeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|VolumeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  The client side implementation of KeySpaceManagerProtocol.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|KeySpaceManagerProtocolClientSideTranslatorPB
specifier|public
specifier|final
class|class
name|KeySpaceManagerProtocolClientSideTranslatorPB
implements|implements
name|KeySpaceManagerProtocol
implements|,
name|ProtocolTranslator
implements|,
name|Closeable
block|{
comment|/**    * RpcController is not used and hence is set to null.    */
DECL|field|NULL_RPC_CONTROLLER
specifier|private
specifier|static
specifier|final
name|RpcController
name|NULL_RPC_CONTROLLER
init|=
literal|null
decl_stmt|;
DECL|field|rpcProxy
specifier|private
specifier|final
name|KeySpaceManagerProtocolPB
name|rpcProxy
decl_stmt|;
comment|/**    * Constructor for KeySpaceManger Client.    * @param rpcProxy    */
DECL|method|KeySpaceManagerProtocolClientSideTranslatorPB ( KeySpaceManagerProtocolPB rpcProxy)
specifier|public
name|KeySpaceManagerProtocolClientSideTranslatorPB
parameter_list|(
name|KeySpaceManagerProtocolPB
name|rpcProxy
parameter_list|)
block|{
name|this
operator|.
name|rpcProxy
operator|=
name|rpcProxy
expr_stmt|;
block|}
comment|/**    * Closes this stream and releases any system resources associated    * with it. If the stream is already closed then invoking this    * method has no effect.    *<p>    *<p> As noted in {@link AutoCloseable#close()}, cases where the    * close may fail require careful attention. It is strongly advised    * to relinquish the underlying resources and to internally    *<em>mark</em> the {@code Closeable} as closed, prior to throwing    * the {@code IOException}.    *    * @throws IOException if an I/O error occurs    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{    }
comment|/**    * Creates a volume.    *    * @param args - Arguments to create Volume.    * @throws IOException    */
annotation|@
name|Override
DECL|method|createVolume (KsmVolumeArgs args)
specifier|public
name|void
name|createVolume
parameter_list|(
name|KsmVolumeArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|CreateVolumeRequest
operator|.
name|Builder
name|req
init|=
name|CreateVolumeRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|VolumeInfo
name|volumeInfo
init|=
name|args
operator|.
name|getProtobuf
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeInfo
argument_list|(
name|volumeInfo
argument_list|)
expr_stmt|;
specifier|final
name|CreateVolumeResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|createVolume
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Volume creation failed, error:"
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Changes the owner of a volume.    *    * @param volume - Name of the volume.    * @param owner - Name of the owner.    * @throws IOException    */
annotation|@
name|Override
DECL|method|setOwner (String volume, String owner)
specifier|public
name|void
name|setOwner
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
name|SetVolumePropertyRequest
operator|.
name|Builder
name|req
init|=
name|SetVolumePropertyRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|owner
argument_list|)
expr_stmt|;
specifier|final
name|SetVolumePropertyResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|setVolumeProperty
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Volume owner change failed, error:"
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Changes the Quota on a volume.    *    * @param volume - Name of the volume.    * @param quota - Quota in bytes.    * @throws IOException    */
annotation|@
name|Override
DECL|method|setQuota (String volume, long quota)
specifier|public
name|void
name|setQuota
parameter_list|(
name|String
name|volume
parameter_list|,
name|long
name|quota
parameter_list|)
throws|throws
name|IOException
block|{
name|SetVolumePropertyRequest
operator|.
name|Builder
name|req
init|=
name|SetVolumePropertyRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
operator|.
name|setQuotaInBytes
argument_list|(
name|quota
argument_list|)
expr_stmt|;
specifier|final
name|SetVolumePropertyResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|setVolumeProperty
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Volume quota change failed, error:"
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Checks if the specified user can access this volume.    *    * @param volume - volume    * @param userName - user name    * @throws IOException    */
annotation|@
name|Override
DECL|method|checkVolumeAccess (String volume, String userName)
specifier|public
name|void
name|checkVolumeAccess
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|IOException
block|{    }
comment|/**    * Gets the volume information.    *    * @param volume - Volume name.    * @return KsmVolumeArgs or exception is thrown.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getVolumeInfo (String volume)
specifier|public
name|KsmVolumeArgs
name|getVolumeInfo
parameter_list|(
name|String
name|volume
parameter_list|)
throws|throws
name|IOException
block|{
name|InfoVolumeRequest
operator|.
name|Builder
name|req
init|=
name|InfoVolumeRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
expr_stmt|;
specifier|final
name|InfoVolumeResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|infoVolume
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Info Volume failed, error:"
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|KsmVolumeArgs
operator|.
name|getFromProtobuf
argument_list|(
name|resp
operator|.
name|getVolumeInfo
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Deletes an existing empty volume.    *    * @param volume - Name of the volume.    * @throws IOException    */
annotation|@
name|Override
DECL|method|deleteVolume (String volume)
specifier|public
name|void
name|deleteVolume
parameter_list|(
name|String
name|volume
parameter_list|)
throws|throws
name|IOException
block|{    }
comment|/**    * Lists volume owned by a specific user.    *    * @param userName - user name    * @param prefix - Filter prefix -- Return only entries that match this.    * @param prevKey - Previous key -- List starts from the next from the    * prevkey    * @param maxKeys - Max number of keys to return.    * @return List of Volumes.    * @throws IOException    */
annotation|@
name|Override
DECL|method|listVolumeByUser (String userName, String prefix, String prevKey, long maxKeys)
specifier|public
name|List
argument_list|<
name|KsmVolumeArgs
argument_list|>
name|listVolumeByUser
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|prevKey
parameter_list|,
name|long
name|maxKeys
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Lists volume all volumes in the cluster.    *    * @param prefix - Filter prefix -- Return only entries that match this.    * @param prevKey - Previous key -- List starts from the next from the    * prevkey    * @param maxKeys - Max number of keys to return.    * @return List of Volumes.    * @throws IOException    */
annotation|@
name|Override
DECL|method|listAllVolumes (String prefix, String prevKey, long maxKeys)
specifier|public
name|List
argument_list|<
name|KsmVolumeArgs
argument_list|>
name|listAllVolumes
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|prevKey
parameter_list|,
name|long
name|maxKeys
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Creates a bucket.    *    * @param args - Arguments to create Bucket.    * @throws IOException    */
annotation|@
name|Override
DECL|method|createBucket (KsmBucketArgs args)
specifier|public
name|void
name|createBucket
parameter_list|(
name|KsmBucketArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|CreateBucketRequest
operator|.
name|Builder
name|req
init|=
name|CreateBucketRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|BucketInfo
name|bucketInfo
init|=
name|args
operator|.
name|getProtobuf
argument_list|()
decl_stmt|;
name|req
operator|.
name|setBucketInfo
argument_list|(
name|bucketInfo
argument_list|)
expr_stmt|;
specifier|final
name|CreateBucketResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|rpcProxy
operator|.
name|createBucket
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Bucket creation failed, error: "
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return the proxy object underlying this protocol translator.    *    * @return the proxy object underlying this protocol translator.    */
annotation|@
name|Override
DECL|method|getUnderlyingProxyObject ()
specifier|public
name|Object
name|getUnderlyingProxyObject
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

