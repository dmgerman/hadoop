begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
import|;
end_import

begin_comment
comment|/**  * A FailoverProxyProvider implementation which allows one to configure  * multiple URIs to connect to during fail-over. A random configured address is  * tried first, and on a fail-over event the other addresses are tried  * sequentially in a random order.  */
end_comment

begin_class
DECL|class|ConfiguredFailoverProxyProvider
specifier|public
class|class
name|ConfiguredFailoverProxyProvider
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractNNFailoverProxyProvider
argument_list|<
name|T
argument_list|>
block|{
DECL|field|proxies
specifier|protected
specifier|final
name|List
argument_list|<
name|NNProxyInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|proxies
decl_stmt|;
DECL|field|currentProxyIndex
specifier|private
name|int
name|currentProxyIndex
init|=
literal|0
decl_stmt|;
DECL|method|ConfiguredFailoverProxyProvider (Configuration conf, URI uri, Class<T> xface, HAProxyFactory<T> factory)
specifier|public
name|ConfiguredFailoverProxyProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|uri
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|xface
parameter_list|,
name|HAProxyFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|uri
argument_list|,
name|xface
argument_list|,
name|factory
argument_list|,
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
expr_stmt|;
block|}
DECL|method|ConfiguredFailoverProxyProvider (Configuration conf, URI uri, Class<T> xface, HAProxyFactory<T> factory, String addressKey)
specifier|public
name|ConfiguredFailoverProxyProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|uri
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|xface
parameter_list|,
name|HAProxyFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|,
name|String
name|addressKey
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|uri
argument_list|,
name|xface
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|this
operator|.
name|proxies
operator|=
name|getProxyAddresses
argument_list|(
name|uri
argument_list|,
name|addressKey
argument_list|)
expr_stmt|;
block|}
comment|/**    * Lazily initialize the RPC proxy object.    */
annotation|@
name|Override
DECL|method|getProxy ()
specifier|public
specifier|synchronized
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|getProxy
parameter_list|()
block|{
name|NNProxyInfo
argument_list|<
name|T
argument_list|>
name|current
init|=
name|proxies
operator|.
name|get
argument_list|(
name|currentProxyIndex
argument_list|)
decl_stmt|;
return|return
name|createProxyIfNeeded
argument_list|(
name|current
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|performFailover (T currentProxy)
specifier|public
name|void
name|performFailover
parameter_list|(
name|T
name|currentProxy
parameter_list|)
block|{
name|incrementProxyIndex
argument_list|()
expr_stmt|;
block|}
DECL|method|incrementProxyIndex ()
specifier|synchronized
name|void
name|incrementProxyIndex
parameter_list|()
block|{
name|currentProxyIndex
operator|=
operator|(
name|currentProxyIndex
operator|+
literal|1
operator|)
operator|%
name|proxies
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|/**    * Close all the proxy objects which have been opened over the lifetime of    * this proxy provider.    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|proxy
range|:
name|proxies
control|)
block|{
if|if
condition|(
name|proxy
operator|.
name|proxy
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|proxy
operator|.
name|proxy
operator|instanceof
name|Closeable
condition|)
block|{
operator|(
operator|(
name|Closeable
operator|)
name|proxy
operator|.
name|proxy
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy
operator|.
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Logical URI is required for this failover proxy provider.    */
annotation|@
name|Override
DECL|method|useLogicalURI ()
specifier|public
name|boolean
name|useLogicalURI
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

