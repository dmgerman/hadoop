begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.client.impl.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|impl
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableRollingAverages
import|;
end_import

begin_comment
comment|/**  * This class maintains a metric of rolling average latency for short circuit  * reads.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Metrics
argument_list|(
name|name
operator|=
literal|"HdfsShortCircuitReads"
argument_list|,
name|about
operator|=
literal|"Block Reader Local's Short Circuit Read latency"
argument_list|,
name|context
operator|=
literal|"dfs"
argument_list|)
DECL|class|BlockReaderLocalMetrics
specifier|public
class|class
name|BlockReaderLocalMetrics
block|{
annotation|@
name|Metric
argument_list|(
name|value
operator|=
literal|"short circuit read operation rate"
argument_list|,
name|valueName
operator|=
literal|"LatencyMs"
argument_list|)
DECL|field|shortCircuitReadRollingAverages
specifier|private
name|MutableRollingAverages
name|shortCircuitReadRollingAverages
decl_stmt|;
DECL|field|SHORT_CIRCUIT_READ_METRIC_REGISTERED_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SHORT_CIRCUIT_READ_METRIC_REGISTERED_NAME
init|=
literal|"HdfsShortCircuitReads"
decl_stmt|;
DECL|field|SHORT_CIRCUIT_LOCAL_READS_METRIC_VALUE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SHORT_CIRCUIT_LOCAL_READS_METRIC_VALUE_NAME
init|=
literal|"ShortCircuitLocalReads"
decl_stmt|;
DECL|method|create ()
specifier|public
specifier|static
name|BlockReaderLocalMetrics
name|create
parameter_list|()
block|{
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
name|BlockReaderLocalMetrics
name|metrics
init|=
operator|new
name|BlockReaderLocalMetrics
argument_list|()
decl_stmt|;
name|ms
operator|.
name|register
argument_list|(
name|SHORT_CIRCUIT_READ_METRIC_REGISTERED_NAME
argument_list|,
literal|null
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
return|return
name|metrics
return|;
block|}
comment|/**    * Adds short circuit read elapsed time.    */
DECL|method|addShortCircuitReadLatency (final long latency)
specifier|public
name|void
name|addShortCircuitReadLatency
parameter_list|(
specifier|final
name|long
name|latency
parameter_list|)
block|{
name|shortCircuitReadRollingAverages
operator|.
name|add
argument_list|(
name|SHORT_CIRCUIT_LOCAL_READS_METRIC_VALUE_NAME
argument_list|,
name|latency
argument_list|)
expr_stmt|;
block|}
comment|/**    * Collects states maintained in {@link ThreadLocal}, if any.    */
DECL|method|collectThreadLocalStates ()
specifier|public
name|void
name|collectThreadLocalStates
parameter_list|()
block|{
name|shortCircuitReadRollingAverages
operator|.
name|collectThreadLocalStates
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the MutableRollingAverage metric for testing only.    * @return    */
annotation|@
name|VisibleForTesting
DECL|method|getShortCircuitReadRollingAverages ()
specifier|public
name|MutableRollingAverages
name|getShortCircuitReadRollingAverages
parameter_list|()
block|{
return|return
name|shortCircuitReadRollingAverages
return|;
block|}
block|}
end_class

end_unit

