begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileEncryptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * HDFS metadata for an entity in the filesystem without locations. Note that  * symlinks and directories are returned as {@link HdfsLocatedFileStatus} for  * backwards compatibility.  */
end_comment

begin_class
DECL|class|HdfsNamedFileStatus
specifier|public
class|class
name|HdfsNamedFileStatus
extends|extends
name|FileStatus
implements|implements
name|HdfsFileStatus
block|{
comment|// local name of the inode that's encoded in java UTF8
DECL|field|uPath
specifier|private
name|byte
index|[]
name|uPath
decl_stmt|;
DECL|field|uSymlink
specifier|private
name|byte
index|[]
name|uSymlink
decl_stmt|;
comment|// symlink target encoded in java UTF8/null
DECL|field|fileId
specifier|private
specifier|final
name|long
name|fileId
decl_stmt|;
DECL|field|feInfo
specifier|private
specifier|final
name|FileEncryptionInfo
name|feInfo
decl_stmt|;
DECL|field|ecPolicy
specifier|private
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
decl_stmt|;
comment|// Used by dir, not including dot and dotdot. Always zero for a regular file.
DECL|field|childrenNum
specifier|private
specifier|final
name|int
name|childrenNum
decl_stmt|;
DECL|field|storagePolicy
specifier|private
specifier|final
name|byte
name|storagePolicy
decl_stmt|;
comment|/**    * Constructor.    * @param length the number of bytes the file has    * @param isdir if the path is a directory    * @param replication the replication factor    * @param blocksize the block size    * @param mtime modification time    * @param atime access time    * @param permission permission    * @param owner the owner of the path    * @param group the group of the path    * @param symlink symlink target encoded in java UTF8 or null    * @param path the local name in java UTF8 encoding the same as that in-memory    * @param fileId the file id    * @param childrenNum the number of children. Used by directory.    * @param feInfo the file's encryption info    * @param storagePolicy ID which specifies storage policy    * @param ecPolicy the erasure coding policy    */
DECL|method|HdfsNamedFileStatus (long length, boolean isdir, int replication, long blocksize, long mtime, long atime, FsPermission permission, Set<Flags> flags, String owner, String group, byte[] symlink, byte[] path, long fileId, int childrenNum, FileEncryptionInfo feInfo, byte storagePolicy, ErasureCodingPolicy ecPolicy)
name|HdfsNamedFileStatus
parameter_list|(
name|long
name|length
parameter_list|,
name|boolean
name|isdir
parameter_list|,
name|int
name|replication
parameter_list|,
name|long
name|blocksize
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|Set
argument_list|<
name|Flags
argument_list|>
name|flags
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|group
parameter_list|,
name|byte
index|[]
name|symlink
parameter_list|,
name|byte
index|[]
name|path
parameter_list|,
name|long
name|fileId
parameter_list|,
name|int
name|childrenNum
parameter_list|,
name|FileEncryptionInfo
name|feInfo
parameter_list|,
name|byte
name|storagePolicy
parameter_list|,
name|ErasureCodingPolicy
name|ecPolicy
parameter_list|)
block|{
name|super
argument_list|(
name|length
argument_list|,
name|isdir
argument_list|,
name|replication
argument_list|,
name|blocksize
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|,
name|HdfsFileStatus
operator|.
name|convert
argument_list|(
name|isdir
argument_list|,
name|symlink
operator|!=
literal|null
argument_list|,
name|permission
argument_list|,
name|flags
argument_list|)
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HdfsFileStatus
operator|.
name|convert
argument_list|(
name|flags
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|uSymlink
operator|=
name|symlink
expr_stmt|;
name|this
operator|.
name|uPath
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|fileId
operator|=
name|fileId
expr_stmt|;
name|this
operator|.
name|childrenNum
operator|=
name|childrenNum
expr_stmt|;
name|this
operator|.
name|feInfo
operator|=
name|feInfo
expr_stmt|;
name|this
operator|.
name|storagePolicy
operator|=
name|storagePolicy
expr_stmt|;
name|this
operator|.
name|ecPolicy
operator|=
name|ecPolicy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setOwner (String owner)
specifier|public
name|void
name|setOwner
parameter_list|(
name|String
name|owner
parameter_list|)
block|{
name|super
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setGroup (String group)
specifier|public
name|void
name|setGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|super
operator|.
name|setOwner
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isSymlink ()
specifier|public
name|boolean
name|isSymlink
parameter_list|()
block|{
return|return
name|uSymlink
operator|!=
literal|null
operator|&&
name|uSymlink
operator|.
name|length
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getSymlink ()
specifier|public
name|Path
name|getSymlink
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isSymlink
argument_list|()
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|DFSUtilClient
operator|.
name|bytes2String
argument_list|(
name|getSymlinkInBytes
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Path "
operator|+
name|getPath
argument_list|()
operator|+
literal|" is not a symbolic link"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setPermission (FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
name|FsPermission
name|permission
parameter_list|)
block|{
name|super
operator|.
name|setPermission
argument_list|(
name|permission
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the Java UTF8 representation of the local name.    *    * @return the local name in java UTF8    */
annotation|@
name|Override
DECL|method|getLocalNameInBytes ()
specifier|public
name|byte
index|[]
name|getLocalNameInBytes
parameter_list|()
block|{
return|return
name|uPath
return|;
block|}
annotation|@
name|Override
DECL|method|setSymlink (Path sym)
specifier|public
name|void
name|setSymlink
parameter_list|(
name|Path
name|sym
parameter_list|)
block|{
name|uSymlink
operator|=
name|DFSUtilClient
operator|.
name|string2Bytes
argument_list|(
name|sym
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Opaque referant for the symlink, to be resolved at the client.    */
annotation|@
name|Override
DECL|method|getSymlinkInBytes ()
specifier|public
name|byte
index|[]
name|getSymlinkInBytes
parameter_list|()
block|{
return|return
name|uSymlink
return|;
block|}
annotation|@
name|Override
DECL|method|getFileId ()
specifier|public
name|long
name|getFileId
parameter_list|()
block|{
return|return
name|fileId
return|;
block|}
annotation|@
name|Override
DECL|method|getFileEncryptionInfo ()
specifier|public
name|FileEncryptionInfo
name|getFileEncryptionInfo
parameter_list|()
block|{
return|return
name|feInfo
return|;
block|}
comment|/**    * Get the erasure coding policy if it's set.    *    * @return the erasure coding policy    */
annotation|@
name|Override
DECL|method|getErasureCodingPolicy ()
specifier|public
name|ErasureCodingPolicy
name|getErasureCodingPolicy
parameter_list|()
block|{
return|return
name|ecPolicy
return|;
block|}
annotation|@
name|Override
DECL|method|getChildrenNum ()
specifier|public
name|int
name|getChildrenNum
parameter_list|()
block|{
return|return
name|childrenNum
return|;
block|}
comment|/** @return the storage policy id */
annotation|@
name|Override
DECL|method|getStoragePolicy ()
specifier|public
name|byte
name|getStoragePolicy
parameter_list|()
block|{
return|return
name|storagePolicy
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|// satisfy findbugs
return|return
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// satisfy findbugs
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

