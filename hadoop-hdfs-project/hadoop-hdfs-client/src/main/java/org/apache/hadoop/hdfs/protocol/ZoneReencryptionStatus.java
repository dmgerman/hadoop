begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|ReencryptionInfoProto
import|;
end_import

begin_comment
comment|/**  * A class representing information about re-encryption of an encryption zone.  *<p>  * FSDirectory lock is used for synchronization (except test-only methods, which  * are not protected).  */
end_comment

begin_class
DECL|class|ZoneReencryptionStatus
specifier|public
class|class
name|ZoneReencryptionStatus
block|{
comment|/**    * State of re-encryption.    */
DECL|enum|State
specifier|public
enum|enum
name|State
block|{
comment|/**      * Submitted for re-encryption but hasn't been picked up.      * This is the initial state.      */
DECL|enumConstant|Submitted
name|Submitted
block|,
comment|/**      * Currently re-encrypting.      */
DECL|enumConstant|Processing
name|Processing
block|,
comment|/**      * Re-encryption completed.      */
DECL|enumConstant|Completed
name|Completed
block|}
DECL|field|id
specifier|private
name|long
name|id
decl_stmt|;
DECL|field|zoneName
specifier|private
name|String
name|zoneName
decl_stmt|;
comment|/**    * The re-encryption status of the zone. Note this is a in-memory only    * variable. On failover it will always be submitted, or completed if    * completionTime != 0;    */
DECL|field|state
specifier|private
name|State
name|state
decl_stmt|;
DECL|field|ezKeyVersionName
specifier|private
name|String
name|ezKeyVersionName
decl_stmt|;
DECL|field|submissionTime
specifier|private
name|long
name|submissionTime
decl_stmt|;
DECL|field|completionTime
specifier|private
name|long
name|completionTime
decl_stmt|;
DECL|field|canceled
specifier|private
name|boolean
name|canceled
decl_stmt|;
comment|/**    * Name of last file processed. It's important to record name (not inode)    * because we want to restore to the position even if the inode is removed.    */
DECL|field|lastCheckpointFile
specifier|private
name|String
name|lastCheckpointFile
decl_stmt|;
DECL|field|filesReencrypted
specifier|private
name|long
name|filesReencrypted
decl_stmt|;
DECL|field|numReencryptionFailures
specifier|private
name|long
name|numReencryptionFailures
decl_stmt|;
comment|/**    * Builder of {@link ZoneReencryptionStatus}.    */
DECL|class|Builder
specifier|public
specifier|static
specifier|final
class|class
name|Builder
block|{
DECL|field|id
specifier|private
name|long
name|id
decl_stmt|;
DECL|field|zoneName
specifier|private
name|String
name|zoneName
decl_stmt|;
DECL|field|state
specifier|private
name|State
name|state
decl_stmt|;
DECL|field|ezKeyVersionName
specifier|private
name|String
name|ezKeyVersionName
decl_stmt|;
DECL|field|submissionTime
specifier|private
name|long
name|submissionTime
decl_stmt|;
DECL|field|completionTime
specifier|private
name|long
name|completionTime
decl_stmt|;
DECL|field|canceled
specifier|private
name|boolean
name|canceled
decl_stmt|;
DECL|field|lastCheckpointFile
specifier|private
name|String
name|lastCheckpointFile
decl_stmt|;
DECL|field|filesReencrypted
specifier|private
name|long
name|filesReencrypted
decl_stmt|;
DECL|field|fileReencryptionFailures
specifier|private
name|long
name|fileReencryptionFailures
decl_stmt|;
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{     }
DECL|method|id (final long inodeid)
specifier|public
name|Builder
name|id
parameter_list|(
specifier|final
name|long
name|inodeid
parameter_list|)
block|{
name|id
operator|=
name|inodeid
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|zoneName (final String ezName)
specifier|public
name|Builder
name|zoneName
parameter_list|(
specifier|final
name|String
name|ezName
parameter_list|)
block|{
name|zoneName
operator|=
name|ezName
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|state (final State st)
specifier|public
name|Builder
name|state
parameter_list|(
specifier|final
name|State
name|st
parameter_list|)
block|{
name|state
operator|=
name|st
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|ezKeyVersionName (final String ezkvn)
specifier|public
name|Builder
name|ezKeyVersionName
parameter_list|(
specifier|final
name|String
name|ezkvn
parameter_list|)
block|{
name|ezKeyVersionName
operator|=
name|ezkvn
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|submissionTime (final long submission)
specifier|public
name|Builder
name|submissionTime
parameter_list|(
specifier|final
name|long
name|submission
parameter_list|)
block|{
name|submissionTime
operator|=
name|submission
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|completionTime (final long completion)
specifier|public
name|Builder
name|completionTime
parameter_list|(
specifier|final
name|long
name|completion
parameter_list|)
block|{
name|completionTime
operator|=
name|completion
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|canceled (final boolean isCanceled)
specifier|public
name|Builder
name|canceled
parameter_list|(
specifier|final
name|boolean
name|isCanceled
parameter_list|)
block|{
name|canceled
operator|=
name|isCanceled
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|lastCheckpointFile (final String lastFile)
specifier|public
name|Builder
name|lastCheckpointFile
parameter_list|(
specifier|final
name|String
name|lastFile
parameter_list|)
block|{
name|lastCheckpointFile
operator|=
name|lastFile
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|filesReencrypted (final long numReencrypted)
specifier|public
name|Builder
name|filesReencrypted
parameter_list|(
specifier|final
name|long
name|numReencrypted
parameter_list|)
block|{
name|filesReencrypted
operator|=
name|numReencrypted
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|fileReencryptionFailures (final long numFailures)
specifier|public
name|Builder
name|fileReencryptionFailures
parameter_list|(
specifier|final
name|long
name|numFailures
parameter_list|)
block|{
name|fileReencryptionFailures
operator|=
name|numFailures
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|ZoneReencryptionStatus
name|build
parameter_list|()
block|{
name|ZoneReencryptionStatus
name|ret
init|=
operator|new
name|ZoneReencryptionStatus
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|id
operator|!=
literal|0
argument_list|,
literal|"no inode id set."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|state
argument_list|,
literal|"no state id set."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|ezKeyVersionName
argument_list|,
literal|"no keyVersionName set."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|submissionTime
operator|!=
literal|0
argument_list|,
literal|"no submission time set."
argument_list|)
expr_stmt|;
name|ret
operator|.
name|id
operator|=
name|this
operator|.
name|id
expr_stmt|;
name|ret
operator|.
name|zoneName
operator|=
name|this
operator|.
name|zoneName
expr_stmt|;
name|ret
operator|.
name|state
operator|=
name|this
operator|.
name|state
expr_stmt|;
name|ret
operator|.
name|ezKeyVersionName
operator|=
name|this
operator|.
name|ezKeyVersionName
expr_stmt|;
name|ret
operator|.
name|submissionTime
operator|=
name|this
operator|.
name|submissionTime
expr_stmt|;
name|ret
operator|.
name|completionTime
operator|=
name|this
operator|.
name|completionTime
expr_stmt|;
name|ret
operator|.
name|canceled
operator|=
name|this
operator|.
name|canceled
expr_stmt|;
name|ret
operator|.
name|lastCheckpointFile
operator|=
name|this
operator|.
name|lastCheckpointFile
expr_stmt|;
name|ret
operator|.
name|filesReencrypted
operator|=
name|this
operator|.
name|filesReencrypted
expr_stmt|;
name|ret
operator|.
name|numReencryptionFailures
operator|=
name|this
operator|.
name|fileReencryptionFailures
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
DECL|method|ZoneReencryptionStatus ()
specifier|public
name|ZoneReencryptionStatus
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|resetMetrics ()
name|void
name|resetMetrics
parameter_list|()
block|{
name|filesReencrypted
operator|=
literal|0
expr_stmt|;
name|numReencryptionFailures
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|getZoneName ()
specifier|public
name|String
name|getZoneName
parameter_list|()
block|{
return|return
name|zoneName
return|;
block|}
DECL|method|setState (final State s)
name|void
name|setState
parameter_list|(
specifier|final
name|State
name|s
parameter_list|)
block|{
name|state
operator|=
name|s
expr_stmt|;
block|}
DECL|method|getState ()
specifier|public
name|State
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
DECL|method|getEzKeyVersionName ()
specifier|public
name|String
name|getEzKeyVersionName
parameter_list|()
block|{
return|return
name|ezKeyVersionName
return|;
block|}
DECL|method|getSubmissionTime ()
specifier|public
name|long
name|getSubmissionTime
parameter_list|()
block|{
return|return
name|submissionTime
return|;
block|}
DECL|method|getCompletionTime ()
specifier|public
name|long
name|getCompletionTime
parameter_list|()
block|{
return|return
name|completionTime
return|;
block|}
DECL|method|isCanceled ()
specifier|public
name|boolean
name|isCanceled
parameter_list|()
block|{
return|return
name|canceled
return|;
block|}
DECL|method|getLastCheckpointFile ()
specifier|public
name|String
name|getLastCheckpointFile
parameter_list|()
block|{
return|return
name|lastCheckpointFile
return|;
block|}
DECL|method|getFilesReencrypted ()
specifier|public
name|long
name|getFilesReencrypted
parameter_list|()
block|{
return|return
name|filesReencrypted
return|;
block|}
DECL|method|getNumReencryptionFailures ()
specifier|public
name|long
name|getNumReencryptionFailures
parameter_list|()
block|{
return|return
name|numReencryptionFailures
return|;
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|state
operator|=
name|State
operator|.
name|Submitted
expr_stmt|;
name|ezKeyVersionName
operator|=
literal|null
expr_stmt|;
name|submissionTime
operator|=
literal|0
expr_stmt|;
name|completionTime
operator|=
literal|0
expr_stmt|;
name|canceled
operator|=
literal|false
expr_stmt|;
name|lastCheckpointFile
operator|=
literal|null
expr_stmt|;
name|resetMetrics
argument_list|()
expr_stmt|;
block|}
comment|/**    * Set the zone name. The zone name is resolved from inode id and set during    * a listReencryptionStatus call, for the crypto admin to consume.    */
DECL|method|setZoneName (final String name)
specifier|public
name|void
name|setZoneName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|name
argument_list|,
literal|"zone name cannot be null"
argument_list|)
expr_stmt|;
name|zoneName
operator|=
name|name
expr_stmt|;
block|}
DECL|method|cancel ()
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|canceled
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|markZoneCompleted (final ReencryptionInfoProto proto)
name|void
name|markZoneCompleted
parameter_list|(
specifier|final
name|ReencryptionInfoProto
name|proto
parameter_list|)
block|{
name|state
operator|=
name|ZoneReencryptionStatus
operator|.
name|State
operator|.
name|Completed
expr_stmt|;
name|completionTime
operator|=
name|proto
operator|.
name|getCompletionTime
argument_list|()
expr_stmt|;
name|lastCheckpointFile
operator|=
literal|null
expr_stmt|;
name|canceled
operator|=
name|proto
operator|.
name|getCanceled
argument_list|()
expr_stmt|;
name|filesReencrypted
operator|=
name|proto
operator|.
name|getNumReencrypted
argument_list|()
expr_stmt|;
name|numReencryptionFailures
operator|=
name|proto
operator|.
name|getNumFailures
argument_list|()
expr_stmt|;
block|}
DECL|method|markZoneSubmitted (final ReencryptionInfoProto proto)
name|void
name|markZoneSubmitted
parameter_list|(
specifier|final
name|ReencryptionInfoProto
name|proto
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|state
operator|=
name|ZoneReencryptionStatus
operator|.
name|State
operator|.
name|Submitted
expr_stmt|;
name|ezKeyVersionName
operator|=
name|proto
operator|.
name|getEzKeyVersionName
argument_list|()
expr_stmt|;
name|submissionTime
operator|=
name|proto
operator|.
name|getSubmissionTime
argument_list|()
expr_stmt|;
name|filesReencrypted
operator|=
name|proto
operator|.
name|getNumReencrypted
argument_list|()
expr_stmt|;
name|numReencryptionFailures
operator|=
name|proto
operator|.
name|getNumFailures
argument_list|()
expr_stmt|;
block|}
DECL|method|updateZoneProcess (final ReencryptionInfoProto proto)
name|void
name|updateZoneProcess
parameter_list|(
specifier|final
name|ReencryptionInfoProto
name|proto
parameter_list|)
block|{
name|lastCheckpointFile
operator|=
name|proto
operator|.
name|getLastFile
argument_list|()
expr_stmt|;
name|filesReencrypted
operator|=
name|proto
operator|.
name|getNumReencrypted
argument_list|()
expr_stmt|;
name|numReencryptionFailures
operator|=
name|proto
operator|.
name|getNumFailures
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

