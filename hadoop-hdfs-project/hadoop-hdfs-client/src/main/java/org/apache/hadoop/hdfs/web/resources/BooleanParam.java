begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_comment
comment|/** Boolean parameter. */
end_comment

begin_class
DECL|class|BooleanParam
specifier|abstract
class|class
name|BooleanParam
extends|extends
name|Param
argument_list|<
name|Boolean
argument_list|,
name|BooleanParam
operator|.
name|Domain
argument_list|>
block|{
DECL|field|TRUE
specifier|static
specifier|final
name|String
name|TRUE
init|=
literal|"true"
decl_stmt|;
DECL|field|FALSE
specifier|static
specifier|final
name|String
name|FALSE
init|=
literal|"false"
decl_stmt|;
comment|/** @return the parameter value as a string */
annotation|@
name|Override
DECL|method|getValueString ()
specifier|public
name|String
name|getValueString
parameter_list|()
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|BooleanParam (final Domain domain, final Boolean value)
name|BooleanParam
parameter_list|(
specifier|final
name|Domain
name|domain
parameter_list|,
specifier|final
name|Boolean
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|domain
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/** The domain of the parameter. */
DECL|class|Domain
specifier|static
specifier|final
class|class
name|Domain
extends|extends
name|Param
operator|.
name|Domain
argument_list|<
name|Boolean
argument_list|>
block|{
DECL|method|Domain (final String paramName)
name|Domain
parameter_list|(
specifier|final
name|String
name|paramName
parameter_list|)
block|{
name|super
argument_list|(
name|paramName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDomain ()
specifier|public
name|String
name|getDomain
parameter_list|()
block|{
return|return
literal|"<"
operator|+
name|NULL
operator|+
literal|" | boolean>"
return|;
block|}
annotation|@
name|Override
DECL|method|parse (final String str)
name|Boolean
name|parse
parameter_list|(
specifier|final
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|TRUE
operator|.
name|equalsIgnoreCase
argument_list|(
name|str
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|FALSE
operator|.
name|equalsIgnoreCase
argument_list|(
name|str
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse \""
operator|+
name|str
operator|+
literal|"\" to Boolean."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

