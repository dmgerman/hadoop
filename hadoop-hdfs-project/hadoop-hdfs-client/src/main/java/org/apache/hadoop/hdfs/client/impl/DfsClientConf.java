begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.client.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|ChecksumOpt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ReplicaAccessorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ByteArrayManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|BlockWrite
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_BLOCK_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CHECKSUM_TYPE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CHECKSUM_TYPE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_CACHED_CONN_RETRY_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_CACHED_CONN_RETRY_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DATANODE_RESTART_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DATANODE_RESTART_TIMEOUT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_KEY_PROVIDER_CACHE_EXPIRY_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_KEY_PROVIDER_CACHE_EXPIRY_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_MAX_BLOCK_ACQUIRE_FAILURES_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_MAX_BLOCK_ACQUIRE_FAILURES_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_SLOW_IO_WARNING_THRESHOLD_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_SLOW_IO_WARNING_THRESHOLD_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_CACHE_CAPACITY_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_CACHE_CAPACITY_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_TIMEOUT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_USE_DN_HOSTNAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_USE_DN_HOSTNAME_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_USE_LEGACY_BLOCKREADER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_USE_LEGACY_BLOCKREADER_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_WRITE_PACKET_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_WRITE_PACKET_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_DOMAIN_SOCKET_PATH_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_DOMAIN_SOCKET_PATH_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_REPLICATION_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_REPLICATION_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_SHORT_CIRCUIT_SHARED_MEMORY_WATCHER_INTERRUPT_CHECK_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_SHORT_CIRCUIT_SHARED_MEMORY_WATCHER_INTERRUPT_CHECK_MS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|Failover
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|HedgedRead
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|Mmap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|Read
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|Retry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|ShortCircuit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|Write
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * DFSClient configuration.  */
end_comment

begin_class
DECL|class|DfsClientConf
specifier|public
class|class
name|DfsClientConf
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DfsClientConf
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|hdfsTimeout
specifier|private
specifier|final
name|int
name|hdfsTimeout
decl_stmt|;
comment|// timeout value for a DFS operation.
DECL|field|maxFailoverAttempts
specifier|private
specifier|final
name|int
name|maxFailoverAttempts
decl_stmt|;
DECL|field|maxRetryAttempts
specifier|private
specifier|final
name|int
name|maxRetryAttempts
decl_stmt|;
DECL|field|failoverSleepBaseMillis
specifier|private
specifier|final
name|int
name|failoverSleepBaseMillis
decl_stmt|;
DECL|field|failoverSleepMaxMillis
specifier|private
specifier|final
name|int
name|failoverSleepMaxMillis
decl_stmt|;
DECL|field|maxBlockAcquireFailures
specifier|private
specifier|final
name|int
name|maxBlockAcquireFailures
decl_stmt|;
DECL|field|datanodeSocketWriteTimeout
specifier|private
specifier|final
name|int
name|datanodeSocketWriteTimeout
decl_stmt|;
DECL|field|ioBufferSize
specifier|private
specifier|final
name|int
name|ioBufferSize
decl_stmt|;
DECL|field|defaultChecksumOpt
specifier|private
specifier|final
name|ChecksumOpt
name|defaultChecksumOpt
decl_stmt|;
DECL|field|writePacketSize
specifier|private
specifier|final
name|int
name|writePacketSize
decl_stmt|;
DECL|field|writeMaxPackets
specifier|private
specifier|final
name|int
name|writeMaxPackets
decl_stmt|;
DECL|field|writeByteArrayManagerConf
specifier|private
specifier|final
name|ByteArrayManager
operator|.
name|Conf
name|writeByteArrayManagerConf
decl_stmt|;
DECL|field|socketTimeout
specifier|private
specifier|final
name|int
name|socketTimeout
decl_stmt|;
DECL|field|excludedNodesCacheExpiry
specifier|private
specifier|final
name|long
name|excludedNodesCacheExpiry
decl_stmt|;
comment|/** Wait time window (in msec) if BlockMissingException is caught. */
DECL|field|timeWindow
specifier|private
specifier|final
name|int
name|timeWindow
decl_stmt|;
DECL|field|numCachedConnRetry
specifier|private
specifier|final
name|int
name|numCachedConnRetry
decl_stmt|;
DECL|field|numBlockWriteRetry
specifier|private
specifier|final
name|int
name|numBlockWriteRetry
decl_stmt|;
DECL|field|numBlockWriteLocateFollowingRetry
specifier|private
specifier|final
name|int
name|numBlockWriteLocateFollowingRetry
decl_stmt|;
DECL|field|blockWriteLocateFollowingInitialDelayMs
specifier|private
specifier|final
name|int
name|blockWriteLocateFollowingInitialDelayMs
decl_stmt|;
DECL|field|defaultBlockSize
specifier|private
specifier|final
name|long
name|defaultBlockSize
decl_stmt|;
DECL|field|prefetchSize
specifier|private
specifier|final
name|long
name|prefetchSize
decl_stmt|;
DECL|field|defaultReplication
specifier|private
specifier|final
name|short
name|defaultReplication
decl_stmt|;
DECL|field|taskId
specifier|private
specifier|final
name|String
name|taskId
decl_stmt|;
DECL|field|uMask
specifier|private
specifier|final
name|FsPermission
name|uMask
decl_stmt|;
DECL|field|connectToDnViaHostname
specifier|private
specifier|final
name|boolean
name|connectToDnViaHostname
decl_stmt|;
DECL|field|retryTimesForGetLastBlockLength
specifier|private
specifier|final
name|int
name|retryTimesForGetLastBlockLength
decl_stmt|;
DECL|field|retryIntervalForGetLastBlockLength
specifier|private
specifier|final
name|int
name|retryIntervalForGetLastBlockLength
decl_stmt|;
DECL|field|datanodeRestartTimeout
specifier|private
specifier|final
name|long
name|datanodeRestartTimeout
decl_stmt|;
DECL|field|slowIoWarningThresholdMs
specifier|private
specifier|final
name|long
name|slowIoWarningThresholdMs
decl_stmt|;
DECL|field|shortCircuitConf
specifier|private
specifier|final
name|ShortCircuitConf
name|shortCircuitConf
decl_stmt|;
DECL|field|hedgedReadThresholdMillis
specifier|private
specifier|final
name|long
name|hedgedReadThresholdMillis
decl_stmt|;
DECL|field|hedgedReadThreadpoolSize
specifier|private
specifier|final
name|int
name|hedgedReadThreadpoolSize
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ReplicaAccessorBuilder
argument_list|>
argument_list|>
DECL|field|replicaAccessorBuilderClasses
name|replicaAccessorBuilderClasses
decl_stmt|;
DECL|field|stripedReadThreadpoolSize
specifier|private
specifier|final
name|int
name|stripedReadThreadpoolSize
decl_stmt|;
DECL|method|DfsClientConf (Configuration conf)
specifier|public
name|DfsClientConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// The hdfsTimeout is currently the same as the ipc timeout
name|hdfsTimeout
operator|=
name|Client
operator|.
name|getTimeout
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|maxRetryAttempts
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|Retry
operator|.
name|MAX_ATTEMPTS_KEY
argument_list|,
name|Retry
operator|.
name|MAX_ATTEMPTS_DEFAULT
argument_list|)
expr_stmt|;
name|timeWindow
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|Retry
operator|.
name|WINDOW_BASE_KEY
argument_list|,
name|Retry
operator|.
name|WINDOW_BASE_DEFAULT
argument_list|)
expr_stmt|;
name|retryTimesForGetLastBlockLength
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|Retry
operator|.
name|TIMES_GET_LAST_BLOCK_LENGTH_KEY
argument_list|,
name|Retry
operator|.
name|TIMES_GET_LAST_BLOCK_LENGTH_DEFAULT
argument_list|)
expr_stmt|;
name|retryIntervalForGetLastBlockLength
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|Retry
operator|.
name|INTERVAL_GET_LAST_BLOCK_LENGTH_KEY
argument_list|,
name|Retry
operator|.
name|INTERVAL_GET_LAST_BLOCK_LENGTH_DEFAULT
argument_list|)
expr_stmt|;
name|maxFailoverAttempts
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|Failover
operator|.
name|MAX_ATTEMPTS_KEY
argument_list|,
name|Failover
operator|.
name|MAX_ATTEMPTS_DEFAULT
argument_list|)
expr_stmt|;
name|failoverSleepBaseMillis
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|Failover
operator|.
name|SLEEPTIME_BASE_KEY
argument_list|,
name|Failover
operator|.
name|SLEEPTIME_BASE_DEFAULT
argument_list|)
expr_stmt|;
name|failoverSleepMaxMillis
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|Failover
operator|.
name|SLEEPTIME_MAX_KEY
argument_list|,
name|Failover
operator|.
name|SLEEPTIME_MAX_DEFAULT
argument_list|)
expr_stmt|;
name|maxBlockAcquireFailures
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_MAX_BLOCK_ACQUIRE_FAILURES_KEY
argument_list|,
name|DFS_CLIENT_MAX_BLOCK_ACQUIRE_FAILURES_DEFAULT
argument_list|)
expr_stmt|;
name|datanodeSocketWriteTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY
argument_list|,
name|HdfsConstants
operator|.
name|WRITE_TIMEOUT
argument_list|)
expr_stmt|;
name|ioBufferSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|defaultChecksumOpt
operator|=
name|getChecksumOptFromConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|socketTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_SOCKET_TIMEOUT_KEY
argument_list|,
name|HdfsConstants
operator|.
name|READ_TIMEOUT
argument_list|)
expr_stmt|;
comment|/** dfs.write.packet.size is an internal config variable */
name|writePacketSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_WRITE_PACKET_SIZE_KEY
argument_list|,
name|DFS_CLIENT_WRITE_PACKET_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|writeMaxPackets
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|Write
operator|.
name|MAX_PACKETS_IN_FLIGHT_KEY
argument_list|,
name|Write
operator|.
name|MAX_PACKETS_IN_FLIGHT_DEFAULT
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|byteArrayManagerEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|Write
operator|.
name|ByteArrayManager
operator|.
name|ENABLED_KEY
argument_list|,
name|Write
operator|.
name|ByteArrayManager
operator|.
name|ENABLED_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|byteArrayManagerEnabled
condition|)
block|{
name|writeByteArrayManagerConf
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|countThreshold
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|Write
operator|.
name|ByteArrayManager
operator|.
name|COUNT_THRESHOLD_KEY
argument_list|,
name|Write
operator|.
name|ByteArrayManager
operator|.
name|COUNT_THRESHOLD_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|int
name|countLimit
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|Write
operator|.
name|ByteArrayManager
operator|.
name|COUNT_LIMIT_KEY
argument_list|,
name|Write
operator|.
name|ByteArrayManager
operator|.
name|COUNT_LIMIT_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|long
name|countResetTimePeriodMs
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|Write
operator|.
name|ByteArrayManager
operator|.
name|COUNT_RESET_TIME_PERIOD_MS_KEY
argument_list|,
name|Write
operator|.
name|ByteArrayManager
operator|.
name|COUNT_RESET_TIME_PERIOD_MS_DEFAULT
argument_list|)
decl_stmt|;
name|writeByteArrayManagerConf
operator|=
operator|new
name|ByteArrayManager
operator|.
name|Conf
argument_list|(
name|countThreshold
argument_list|,
name|countLimit
argument_list|,
name|countResetTimePeriodMs
argument_list|)
expr_stmt|;
block|}
name|defaultBlockSize
operator|=
name|conf
operator|.
name|getLongBytes
argument_list|(
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DFS_BLOCK_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|defaultReplication
operator|=
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_REPLICATION_KEY
argument_list|,
name|DFS_REPLICATION_DEFAULT
argument_list|)
expr_stmt|;
name|taskId
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"mapreduce.task.attempt.id"
argument_list|,
literal|"NONMAPREDUCE"
argument_list|)
expr_stmt|;
name|excludedNodesCacheExpiry
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|Write
operator|.
name|EXCLUDE_NODES_CACHE_EXPIRY_INTERVAL_KEY
argument_list|,
name|Write
operator|.
name|EXCLUDE_NODES_CACHE_EXPIRY_INTERVAL_DEFAULT
argument_list|)
expr_stmt|;
name|prefetchSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|Read
operator|.
name|PREFETCH_SIZE_KEY
argument_list|,
literal|10
operator|*
name|defaultBlockSize
argument_list|)
expr_stmt|;
name|numCachedConnRetry
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_CACHED_CONN_RETRY_KEY
argument_list|,
name|DFS_CLIENT_CACHED_CONN_RETRY_DEFAULT
argument_list|)
expr_stmt|;
name|numBlockWriteRetry
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|BlockWrite
operator|.
name|RETRIES_KEY
argument_list|,
name|BlockWrite
operator|.
name|RETRIES_DEFAULT
argument_list|)
expr_stmt|;
name|numBlockWriteLocateFollowingRetry
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|BlockWrite
operator|.
name|LOCATEFOLLOWINGBLOCK_RETRIES_KEY
argument_list|,
name|BlockWrite
operator|.
name|LOCATEFOLLOWINGBLOCK_RETRIES_DEFAULT
argument_list|)
expr_stmt|;
name|blockWriteLocateFollowingInitialDelayMs
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|BlockWrite
operator|.
name|LOCATEFOLLOWINGBLOCK_INITIAL_DELAY_MS_KEY
argument_list|,
name|BlockWrite
operator|.
name|LOCATEFOLLOWINGBLOCK_INITIAL_DELAY_MS_DEFAULT
argument_list|)
expr_stmt|;
name|uMask
operator|=
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|connectToDnViaHostname
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_CLIENT_USE_DN_HOSTNAME
argument_list|,
name|DFS_CLIENT_USE_DN_HOSTNAME_DEFAULT
argument_list|)
expr_stmt|;
name|datanodeRestartTimeout
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_CLIENT_DATANODE_RESTART_TIMEOUT_KEY
argument_list|,
name|DFS_CLIENT_DATANODE_RESTART_TIMEOUT_DEFAULT
argument_list|)
operator|*
literal|1000
expr_stmt|;
name|slowIoWarningThresholdMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_CLIENT_SLOW_IO_WARNING_THRESHOLD_KEY
argument_list|,
name|DFS_CLIENT_SLOW_IO_WARNING_THRESHOLD_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitConf
operator|=
operator|new
name|ShortCircuitConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|hedgedReadThresholdMillis
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HedgedRead
operator|.
name|THRESHOLD_MILLIS_KEY
argument_list|,
name|HedgedRead
operator|.
name|THRESHOLD_MILLIS_DEFAULT
argument_list|)
expr_stmt|;
name|hedgedReadThreadpoolSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|HedgedRead
operator|.
name|THREADPOOL_SIZE_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|HedgedRead
operator|.
name|THREADPOOL_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|stripedReadThreadpoolSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|StripedRead
operator|.
name|THREADPOOL_SIZE_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|StripedRead
operator|.
name|THREADPOOL_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|stripedReadThreadpoolSize
operator|>
literal|0
argument_list|,
literal|"The value of "
operator|+
name|HdfsClientConfigKeys
operator|.
name|StripedRead
operator|.
name|THREADPOOL_SIZE_KEY
operator|+
literal|" must be greater than 0."
argument_list|)
expr_stmt|;
name|replicaAccessorBuilderClasses
operator|=
name|loadReplicaAccessorBuilderClasses
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ReplicaAccessorBuilder
argument_list|>
argument_list|>
DECL|method|loadReplicaAccessorBuilderClasses (Configuration conf)
name|loadReplicaAccessorBuilderClasses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
index|[]
name|classNames
init|=
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|REPLICA_ACCESSOR_BUILDER_CLASSES_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|classNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ReplicaAccessorBuilder
argument_list|>
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|className
range|:
name|classNames
control|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ReplicaAccessorBuilder
argument_list|>
name|cls
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|ReplicaAccessorBuilder
argument_list|>
operator|)
name|classLoader
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|cls
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to load "
operator|+
name|className
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|classes
return|;
block|}
DECL|method|getChecksumType (Configuration conf)
specifier|private
name|DataChecksum
operator|.
name|Type
name|getChecksumType
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|String
name|checksum
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_CHECKSUM_TYPE_KEY
argument_list|,
name|DFS_CHECKSUM_TYPE_DEFAULT
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|DataChecksum
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|checksum
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Bad checksum type: {}. Using default {}"
argument_list|,
name|checksum
argument_list|,
name|DFS_CHECKSUM_TYPE_DEFAULT
argument_list|)
expr_stmt|;
return|return
name|DataChecksum
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|DFS_CHECKSUM_TYPE_DEFAULT
argument_list|)
return|;
block|}
block|}
comment|// Construct a checksum option from conf
DECL|method|getChecksumOptFromConf (Configuration conf)
specifier|private
name|ChecksumOpt
name|getChecksumOptFromConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|DataChecksum
operator|.
name|Type
name|type
init|=
name|getChecksumType
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|bytesPerChecksum
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|DFS_BYTES_PER_CHECKSUM_DEFAULT
argument_list|)
decl_stmt|;
return|return
operator|new
name|ChecksumOpt
argument_list|(
name|type
argument_list|,
name|bytesPerChecksum
argument_list|)
return|;
block|}
comment|/** create a DataChecksum with the given option. */
DECL|method|createChecksum (ChecksumOpt userOpt)
specifier|public
name|DataChecksum
name|createChecksum
parameter_list|(
name|ChecksumOpt
name|userOpt
parameter_list|)
block|{
comment|// Fill in any missing field with the default.
name|ChecksumOpt
name|opt
init|=
name|ChecksumOpt
operator|.
name|processChecksumOpt
argument_list|(
name|defaultChecksumOpt
argument_list|,
name|userOpt
argument_list|)
decl_stmt|;
name|DataChecksum
name|dataChecksum
init|=
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|opt
operator|.
name|getChecksumType
argument_list|()
argument_list|,
name|opt
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataChecksum
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Invalid checksum type: userOpt="
operator|+
name|userOpt
operator|+
literal|", default="
operator|+
name|defaultChecksumOpt
operator|+
literal|", effective=null"
argument_list|)
throw|;
block|}
return|return
name|dataChecksum
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getBlockWriteLocateFollowingInitialDelayMs ()
specifier|public
name|int
name|getBlockWriteLocateFollowingInitialDelayMs
parameter_list|()
block|{
return|return
name|blockWriteLocateFollowingInitialDelayMs
return|;
block|}
comment|/**    * @return the hdfsTimeout    */
DECL|method|getHdfsTimeout ()
specifier|public
name|int
name|getHdfsTimeout
parameter_list|()
block|{
return|return
name|hdfsTimeout
return|;
block|}
comment|/**    * @return the maxFailoverAttempts    */
DECL|method|getMaxFailoverAttempts ()
specifier|public
name|int
name|getMaxFailoverAttempts
parameter_list|()
block|{
return|return
name|maxFailoverAttempts
return|;
block|}
comment|/**    * @return the maxRetryAttempts    */
DECL|method|getMaxRetryAttempts ()
specifier|public
name|int
name|getMaxRetryAttempts
parameter_list|()
block|{
return|return
name|maxRetryAttempts
return|;
block|}
comment|/**    * @return the failoverSleepBaseMillis    */
DECL|method|getFailoverSleepBaseMillis ()
specifier|public
name|int
name|getFailoverSleepBaseMillis
parameter_list|()
block|{
return|return
name|failoverSleepBaseMillis
return|;
block|}
comment|/**    * @return the failoverSleepMaxMillis    */
DECL|method|getFailoverSleepMaxMillis ()
specifier|public
name|int
name|getFailoverSleepMaxMillis
parameter_list|()
block|{
return|return
name|failoverSleepMaxMillis
return|;
block|}
comment|/**    * @return the maxBlockAcquireFailures    */
DECL|method|getMaxBlockAcquireFailures ()
specifier|public
name|int
name|getMaxBlockAcquireFailures
parameter_list|()
block|{
return|return
name|maxBlockAcquireFailures
return|;
block|}
comment|/**    * @return the datanodeSocketWriteTimeout    */
DECL|method|getDatanodeSocketWriteTimeout ()
specifier|public
name|int
name|getDatanodeSocketWriteTimeout
parameter_list|()
block|{
return|return
name|datanodeSocketWriteTimeout
return|;
block|}
comment|/**    * @return the ioBufferSize    */
DECL|method|getIoBufferSize ()
specifier|public
name|int
name|getIoBufferSize
parameter_list|()
block|{
return|return
name|ioBufferSize
return|;
block|}
comment|/**    * @return the defaultChecksumOpt    */
DECL|method|getDefaultChecksumOpt ()
specifier|public
name|ChecksumOpt
name|getDefaultChecksumOpt
parameter_list|()
block|{
return|return
name|defaultChecksumOpt
return|;
block|}
comment|/**    * @return the writePacketSize    */
DECL|method|getWritePacketSize ()
specifier|public
name|int
name|getWritePacketSize
parameter_list|()
block|{
return|return
name|writePacketSize
return|;
block|}
comment|/**    * @return the writeMaxPackets    */
DECL|method|getWriteMaxPackets ()
specifier|public
name|int
name|getWriteMaxPackets
parameter_list|()
block|{
return|return
name|writeMaxPackets
return|;
block|}
comment|/**    * @return the writeByteArrayManagerConf    */
DECL|method|getWriteByteArrayManagerConf ()
specifier|public
name|ByteArrayManager
operator|.
name|Conf
name|getWriteByteArrayManagerConf
parameter_list|()
block|{
return|return
name|writeByteArrayManagerConf
return|;
block|}
comment|/**    * @return the socketTimeout    */
DECL|method|getSocketTimeout ()
specifier|public
name|int
name|getSocketTimeout
parameter_list|()
block|{
return|return
name|socketTimeout
return|;
block|}
comment|/**    * @return the excludedNodesCacheExpiry    */
DECL|method|getExcludedNodesCacheExpiry ()
specifier|public
name|long
name|getExcludedNodesCacheExpiry
parameter_list|()
block|{
return|return
name|excludedNodesCacheExpiry
return|;
block|}
comment|/**    * @return the timeWindow    */
DECL|method|getTimeWindow ()
specifier|public
name|int
name|getTimeWindow
parameter_list|()
block|{
return|return
name|timeWindow
return|;
block|}
comment|/**    * @return the numCachedConnRetry    */
DECL|method|getNumCachedConnRetry ()
specifier|public
name|int
name|getNumCachedConnRetry
parameter_list|()
block|{
return|return
name|numCachedConnRetry
return|;
block|}
comment|/**    * @return the numBlockWriteRetry    */
DECL|method|getNumBlockWriteRetry ()
specifier|public
name|int
name|getNumBlockWriteRetry
parameter_list|()
block|{
return|return
name|numBlockWriteRetry
return|;
block|}
comment|/**    * @return the numBlockWriteLocateFollowingRetry    */
DECL|method|getNumBlockWriteLocateFollowingRetry ()
specifier|public
name|int
name|getNumBlockWriteLocateFollowingRetry
parameter_list|()
block|{
return|return
name|numBlockWriteLocateFollowingRetry
return|;
block|}
comment|/**    * @return the defaultBlockSize    */
DECL|method|getDefaultBlockSize ()
specifier|public
name|long
name|getDefaultBlockSize
parameter_list|()
block|{
return|return
name|defaultBlockSize
return|;
block|}
comment|/**    * @return the prefetchSize    */
DECL|method|getPrefetchSize ()
specifier|public
name|long
name|getPrefetchSize
parameter_list|()
block|{
return|return
name|prefetchSize
return|;
block|}
comment|/**    * @return the defaultReplication    */
DECL|method|getDefaultReplication ()
specifier|public
name|short
name|getDefaultReplication
parameter_list|()
block|{
return|return
name|defaultReplication
return|;
block|}
comment|/**    * @return the taskId    */
DECL|method|getTaskId ()
specifier|public
name|String
name|getTaskId
parameter_list|()
block|{
return|return
name|taskId
return|;
block|}
comment|/**    * @return the uMask    */
DECL|method|getUMask ()
specifier|public
name|FsPermission
name|getUMask
parameter_list|()
block|{
return|return
name|uMask
return|;
block|}
comment|/**    * @return the connectToDnViaHostname    */
DECL|method|isConnectToDnViaHostname ()
specifier|public
name|boolean
name|isConnectToDnViaHostname
parameter_list|()
block|{
return|return
name|connectToDnViaHostname
return|;
block|}
comment|/**    * @return the retryTimesForGetLastBlockLength    */
DECL|method|getRetryTimesForGetLastBlockLength ()
specifier|public
name|int
name|getRetryTimesForGetLastBlockLength
parameter_list|()
block|{
return|return
name|retryTimesForGetLastBlockLength
return|;
block|}
comment|/**    * @return the retryIntervalForGetLastBlockLength    */
DECL|method|getRetryIntervalForGetLastBlockLength ()
specifier|public
name|int
name|getRetryIntervalForGetLastBlockLength
parameter_list|()
block|{
return|return
name|retryIntervalForGetLastBlockLength
return|;
block|}
comment|/**    * @return the datanodeRestartTimeout    */
DECL|method|getDatanodeRestartTimeout ()
specifier|public
name|long
name|getDatanodeRestartTimeout
parameter_list|()
block|{
return|return
name|datanodeRestartTimeout
return|;
block|}
comment|/**    * @return the slowIoWarningThresholdMs    */
DECL|method|getSlowIoWarningThresholdMs ()
specifier|public
name|long
name|getSlowIoWarningThresholdMs
parameter_list|()
block|{
return|return
name|slowIoWarningThresholdMs
return|;
block|}
comment|/**    * @return the hedgedReadThresholdMillis    */
DECL|method|getHedgedReadThresholdMillis ()
specifier|public
name|long
name|getHedgedReadThresholdMillis
parameter_list|()
block|{
return|return
name|hedgedReadThresholdMillis
return|;
block|}
comment|/**    * @return the hedgedReadThreadpoolSize    */
DECL|method|getHedgedReadThreadpoolSize ()
specifier|public
name|int
name|getHedgedReadThreadpoolSize
parameter_list|()
block|{
return|return
name|hedgedReadThreadpoolSize
return|;
block|}
comment|/**    * @return the stripedReadThreadpoolSize    */
DECL|method|getStripedReadThreadpoolSize ()
specifier|public
name|int
name|getStripedReadThreadpoolSize
parameter_list|()
block|{
return|return
name|stripedReadThreadpoolSize
return|;
block|}
comment|/**    * @return the replicaAccessorBuilderClasses    */
specifier|public
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ReplicaAccessorBuilder
argument_list|>
argument_list|>
DECL|method|getReplicaAccessorBuilderClasses ()
name|getReplicaAccessorBuilderClasses
parameter_list|()
block|{
return|return
name|replicaAccessorBuilderClasses
return|;
block|}
comment|/**    * @return the shortCircuitConf    */
DECL|method|getShortCircuitConf ()
specifier|public
name|ShortCircuitConf
name|getShortCircuitConf
parameter_list|()
block|{
return|return
name|shortCircuitConf
return|;
block|}
comment|/**    * Configuration for short-circuit reads.    */
DECL|class|ShortCircuitConf
specifier|public
specifier|static
class|class
name|ShortCircuitConf
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|DfsClientConf
operator|.
name|LOG
decl_stmt|;
DECL|field|socketCacheCapacity
specifier|private
specifier|final
name|int
name|socketCacheCapacity
decl_stmt|;
DECL|field|socketCacheExpiry
specifier|private
specifier|final
name|long
name|socketCacheExpiry
decl_stmt|;
DECL|field|useLegacyBlockReader
specifier|private
specifier|final
name|boolean
name|useLegacyBlockReader
decl_stmt|;
DECL|field|useLegacyBlockReaderLocal
specifier|private
specifier|final
name|boolean
name|useLegacyBlockReaderLocal
decl_stmt|;
DECL|field|domainSocketPath
specifier|private
specifier|final
name|String
name|domainSocketPath
decl_stmt|;
DECL|field|skipShortCircuitChecksums
specifier|private
specifier|final
name|boolean
name|skipShortCircuitChecksums
decl_stmt|;
DECL|field|shortCircuitBufferSize
specifier|private
specifier|final
name|int
name|shortCircuitBufferSize
decl_stmt|;
DECL|field|shortCircuitLocalReads
specifier|private
specifier|final
name|boolean
name|shortCircuitLocalReads
decl_stmt|;
DECL|field|domainSocketDataTraffic
specifier|private
specifier|final
name|boolean
name|domainSocketDataTraffic
decl_stmt|;
DECL|field|shortCircuitStreamsCacheSize
specifier|private
specifier|final
name|int
name|shortCircuitStreamsCacheSize
decl_stmt|;
DECL|field|shortCircuitStreamsCacheExpiryMs
specifier|private
specifier|final
name|long
name|shortCircuitStreamsCacheExpiryMs
decl_stmt|;
DECL|field|shortCircuitSharedMemoryWatcherInterruptCheckMs
specifier|private
specifier|final
name|int
name|shortCircuitSharedMemoryWatcherInterruptCheckMs
decl_stmt|;
DECL|field|shortCircuitMmapEnabled
specifier|private
specifier|final
name|boolean
name|shortCircuitMmapEnabled
decl_stmt|;
DECL|field|shortCircuitMmapCacheSize
specifier|private
specifier|final
name|int
name|shortCircuitMmapCacheSize
decl_stmt|;
DECL|field|shortCircuitMmapCacheExpiryMs
specifier|private
specifier|final
name|long
name|shortCircuitMmapCacheExpiryMs
decl_stmt|;
DECL|field|shortCircuitMmapCacheRetryTimeout
specifier|private
specifier|final
name|long
name|shortCircuitMmapCacheRetryTimeout
decl_stmt|;
DECL|field|shortCircuitCacheStaleThresholdMs
specifier|private
specifier|final
name|long
name|shortCircuitCacheStaleThresholdMs
decl_stmt|;
DECL|field|keyProviderCacheExpiryMs
specifier|private
specifier|final
name|long
name|keyProviderCacheExpiryMs
decl_stmt|;
DECL|method|ShortCircuitConf (Configuration conf)
specifier|public
name|ShortCircuitConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|socketCacheCapacity
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_SOCKET_CACHE_CAPACITY_KEY
argument_list|,
name|DFS_CLIENT_SOCKET_CACHE_CAPACITY_DEFAULT
argument_list|)
expr_stmt|;
name|socketCacheExpiry
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_KEY
argument_list|,
name|DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_DEFAULT
argument_list|)
expr_stmt|;
name|useLegacyBlockReader
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_CLIENT_USE_LEGACY_BLOCKREADER
argument_list|,
name|DFS_CLIENT_USE_LEGACY_BLOCKREADER_DEFAULT
argument_list|)
expr_stmt|;
name|useLegacyBlockReaderLocal
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL
argument_list|,
name|DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitLocalReads
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|Read
operator|.
name|ShortCircuit
operator|.
name|KEY
argument_list|,
name|Read
operator|.
name|ShortCircuit
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|domainSocketDataTraffic
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC
argument_list|,
name|DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC_DEFAULT
argument_list|)
expr_stmt|;
name|domainSocketPath
operator|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|DFS_DOMAIN_SOCKET_PATH_KEY
argument_list|,
name|DFS_DOMAIN_SOCKET_PATH_DEFAULT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL
operator|+
literal|" = {}"
argument_list|,
name|useLegacyBlockReaderLocal
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Read
operator|.
name|ShortCircuit
operator|.
name|KEY
operator|+
literal|" = {}"
argument_list|,
name|shortCircuitLocalReads
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC
operator|+
literal|" = {}"
argument_list|,
name|domainSocketDataTraffic
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|DFS_DOMAIN_SOCKET_PATH_KEY
operator|+
literal|" = {}"
argument_list|,
name|domainSocketPath
argument_list|)
expr_stmt|;
name|skipShortCircuitChecksums
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|Read
operator|.
name|ShortCircuit
operator|.
name|SKIP_CHECKSUM_KEY
argument_list|,
name|Read
operator|.
name|ShortCircuit
operator|.
name|SKIP_CHECKSUM_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitBufferSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|Read
operator|.
name|ShortCircuit
operator|.
name|BUFFER_SIZE_KEY
argument_list|,
name|Read
operator|.
name|ShortCircuit
operator|.
name|BUFFER_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitStreamsCacheSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|Read
operator|.
name|ShortCircuit
operator|.
name|STREAMS_CACHE_SIZE_KEY
argument_list|,
name|Read
operator|.
name|ShortCircuit
operator|.
name|STREAMS_CACHE_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitStreamsCacheExpiryMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|Read
operator|.
name|ShortCircuit
operator|.
name|STREAMS_CACHE_EXPIRY_MS_KEY
argument_list|,
name|Read
operator|.
name|ShortCircuit
operator|.
name|STREAMS_CACHE_EXPIRY_MS_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitMmapEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|Mmap
operator|.
name|ENABLED_KEY
argument_list|,
name|Mmap
operator|.
name|ENABLED_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitMmapCacheSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|Mmap
operator|.
name|CACHE_SIZE_KEY
argument_list|,
name|Mmap
operator|.
name|CACHE_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitMmapCacheExpiryMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|Mmap
operator|.
name|CACHE_TIMEOUT_MS_KEY
argument_list|,
name|Mmap
operator|.
name|CACHE_TIMEOUT_MS_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitMmapCacheRetryTimeout
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|Mmap
operator|.
name|RETRY_TIMEOUT_MS_KEY
argument_list|,
name|Mmap
operator|.
name|RETRY_TIMEOUT_MS_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitCacheStaleThresholdMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|ShortCircuit
operator|.
name|REPLICA_STALE_THRESHOLD_MS_KEY
argument_list|,
name|ShortCircuit
operator|.
name|REPLICA_STALE_THRESHOLD_MS_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitSharedMemoryWatcherInterruptCheckMs
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_SHORT_CIRCUIT_SHARED_MEMORY_WATCHER_INTERRUPT_CHECK_MS
argument_list|,
name|DFS_SHORT_CIRCUIT_SHARED_MEMORY_WATCHER_INTERRUPT_CHECK_MS_DEFAULT
argument_list|)
expr_stmt|;
name|keyProviderCacheExpiryMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_CLIENT_KEY_PROVIDER_CACHE_EXPIRY_MS
argument_list|,
name|DFS_CLIENT_KEY_PROVIDER_CACHE_EXPIRY_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the socketCacheCapacity      */
DECL|method|getSocketCacheCapacity ()
specifier|public
name|int
name|getSocketCacheCapacity
parameter_list|()
block|{
return|return
name|socketCacheCapacity
return|;
block|}
comment|/**      * @return the socketCacheExpiry      */
DECL|method|getSocketCacheExpiry ()
specifier|public
name|long
name|getSocketCacheExpiry
parameter_list|()
block|{
return|return
name|socketCacheExpiry
return|;
block|}
DECL|method|isUseLegacyBlockReaderLocal ()
specifier|public
name|boolean
name|isUseLegacyBlockReaderLocal
parameter_list|()
block|{
return|return
name|useLegacyBlockReaderLocal
return|;
block|}
DECL|method|getDomainSocketPath ()
specifier|public
name|String
name|getDomainSocketPath
parameter_list|()
block|{
return|return
name|domainSocketPath
return|;
block|}
DECL|method|isShortCircuitLocalReads ()
specifier|public
name|boolean
name|isShortCircuitLocalReads
parameter_list|()
block|{
return|return
name|shortCircuitLocalReads
return|;
block|}
DECL|method|isDomainSocketDataTraffic ()
specifier|public
name|boolean
name|isDomainSocketDataTraffic
parameter_list|()
block|{
return|return
name|domainSocketDataTraffic
return|;
block|}
comment|/**      * @return the useLegacyBlockReader      */
DECL|method|isUseLegacyBlockReader ()
specifier|public
name|boolean
name|isUseLegacyBlockReader
parameter_list|()
block|{
return|return
name|useLegacyBlockReader
return|;
block|}
comment|/**      * @return the skipShortCircuitChecksums      */
DECL|method|isSkipShortCircuitChecksums ()
specifier|public
name|boolean
name|isSkipShortCircuitChecksums
parameter_list|()
block|{
return|return
name|skipShortCircuitChecksums
return|;
block|}
comment|/**      * @return the shortCircuitBufferSize      */
DECL|method|getShortCircuitBufferSize ()
specifier|public
name|int
name|getShortCircuitBufferSize
parameter_list|()
block|{
return|return
name|shortCircuitBufferSize
return|;
block|}
comment|/**      * @return the shortCircuitStreamsCacheSize      */
DECL|method|getShortCircuitStreamsCacheSize ()
specifier|public
name|int
name|getShortCircuitStreamsCacheSize
parameter_list|()
block|{
return|return
name|shortCircuitStreamsCacheSize
return|;
block|}
comment|/**      * @return the shortCircuitStreamsCacheExpiryMs      */
DECL|method|getShortCircuitStreamsCacheExpiryMs ()
specifier|public
name|long
name|getShortCircuitStreamsCacheExpiryMs
parameter_list|()
block|{
return|return
name|shortCircuitStreamsCacheExpiryMs
return|;
block|}
comment|/**      * @return the shortCircuitSharedMemoryWatcherInterruptCheckMs      */
DECL|method|getShortCircuitSharedMemoryWatcherInterruptCheckMs ()
specifier|public
name|int
name|getShortCircuitSharedMemoryWatcherInterruptCheckMs
parameter_list|()
block|{
return|return
name|shortCircuitSharedMemoryWatcherInterruptCheckMs
return|;
block|}
comment|/**      * @return the shortCircuitMmapEnabled      */
DECL|method|isShortCircuitMmapEnabled ()
specifier|public
name|boolean
name|isShortCircuitMmapEnabled
parameter_list|()
block|{
return|return
name|shortCircuitMmapEnabled
return|;
block|}
comment|/**      * @return the shortCircuitMmapCacheSize      */
DECL|method|getShortCircuitMmapCacheSize ()
specifier|public
name|int
name|getShortCircuitMmapCacheSize
parameter_list|()
block|{
return|return
name|shortCircuitMmapCacheSize
return|;
block|}
comment|/**      * @return the shortCircuitMmapCacheExpiryMs      */
DECL|method|getShortCircuitMmapCacheExpiryMs ()
specifier|public
name|long
name|getShortCircuitMmapCacheExpiryMs
parameter_list|()
block|{
return|return
name|shortCircuitMmapCacheExpiryMs
return|;
block|}
comment|/**      * @return the shortCircuitMmapCacheRetryTimeout      */
DECL|method|getShortCircuitMmapCacheRetryTimeout ()
specifier|public
name|long
name|getShortCircuitMmapCacheRetryTimeout
parameter_list|()
block|{
return|return
name|shortCircuitMmapCacheRetryTimeout
return|;
block|}
comment|/**      * @return the shortCircuitCacheStaleThresholdMs      */
DECL|method|getShortCircuitCacheStaleThresholdMs ()
specifier|public
name|long
name|getShortCircuitCacheStaleThresholdMs
parameter_list|()
block|{
return|return
name|shortCircuitCacheStaleThresholdMs
return|;
block|}
comment|/**      * @return the keyProviderCacheExpiryMs      */
DECL|method|getKeyProviderCacheExpiryMs ()
specifier|public
name|long
name|getKeyProviderCacheExpiryMs
parameter_list|()
block|{
return|return
name|keyProviderCacheExpiryMs
return|;
block|}
DECL|method|confAsString ()
specifier|public
name|String
name|confAsString
parameter_list|()
block|{
return|return
literal|"shortCircuitStreamsCacheSize = "
operator|+
name|shortCircuitStreamsCacheSize
operator|+
literal|", shortCircuitStreamsCacheExpiryMs = "
operator|+
name|shortCircuitStreamsCacheExpiryMs
operator|+
literal|", shortCircuitMmapCacheSize = "
operator|+
name|shortCircuitMmapCacheSize
operator|+
literal|", shortCircuitMmapCacheExpiryMs = "
operator|+
name|shortCircuitMmapCacheExpiryMs
operator|+
literal|", shortCircuitMmapCacheRetryTimeout = "
operator|+
name|shortCircuitMmapCacheRetryTimeout
operator|+
literal|", shortCircuitCacheStaleThresholdMs = "
operator|+
name|shortCircuitCacheStaleThresholdMs
operator|+
literal|", socketCacheCapacity = "
operator|+
name|socketCacheCapacity
operator|+
literal|", socketCacheExpiry = "
operator|+
name|socketCacheExpiry
operator|+
literal|", shortCircuitLocalReads = "
operator|+
name|shortCircuitLocalReads
operator|+
literal|", useLegacyBlockReaderLocal = "
operator|+
name|useLegacyBlockReaderLocal
operator|+
literal|", domainSocketDataTraffic = "
operator|+
name|domainSocketDataTraffic
operator|+
literal|", shortCircuitSharedMemoryWatcherInterruptCheckMs = "
operator|+
name|shortCircuitSharedMemoryWatcherInterruptCheckMs
operator|+
literal|", keyProviderCacheExpiryMs = "
operator|+
name|keyProviderCacheExpiryMs
return|;
block|}
block|}
block|}
end_class

end_unit

