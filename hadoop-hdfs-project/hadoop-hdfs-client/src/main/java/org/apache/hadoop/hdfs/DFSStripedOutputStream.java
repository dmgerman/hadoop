begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StreamCapabilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|DatanodeInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|BlockConstructionStage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ByteBufferPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ElasticByteBufferPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MultipleIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ErasureCoderOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|RawErasureEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|TraceScope
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedChannelException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * This class supports writing files in striped layout and erasure coded format.  * Each stripe contains a sequence of cells.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DFSStripedOutputStream
specifier|public
class|class
name|DFSStripedOutputStream
extends|extends
name|DFSOutputStream
implements|implements
name|StreamCapabilities
block|{
DECL|field|BUFFER_POOL
specifier|private
specifier|static
specifier|final
name|ByteBufferPool
name|BUFFER_POOL
init|=
operator|new
name|ElasticByteBufferPool
argument_list|()
decl_stmt|;
DECL|class|MultipleBlockingQueue
specifier|static
class|class
name|MultipleBlockingQueue
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|queues
specifier|private
specifier|final
name|List
argument_list|<
name|BlockingQueue
argument_list|<
name|T
argument_list|>
argument_list|>
name|queues
decl_stmt|;
DECL|method|MultipleBlockingQueue (int numQueue, int queueSize)
name|MultipleBlockingQueue
parameter_list|(
name|int
name|numQueue
parameter_list|,
name|int
name|queueSize
parameter_list|)
block|{
name|queues
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numQueue
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueue
condition|;
name|i
operator|++
control|)
block|{
name|queues
operator|.
name|add
argument_list|(
operator|new
name|LinkedBlockingQueue
argument_list|<
name|T
argument_list|>
argument_list|(
name|queueSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|offer (int i, T object)
name|void
name|offer
parameter_list|(
name|int
name|i
parameter_list|,
name|T
name|object
parameter_list|)
block|{
specifier|final
name|boolean
name|b
init|=
name|queues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|offer
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|b
argument_list|,
literal|"Failed to offer "
operator|+
name|object
operator|+
literal|" to queue, i="
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
DECL|method|take (int i)
name|T
name|take
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
try|try
block|{
return|return
name|queues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|take
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
name|DFSUtilClient
operator|.
name|toInterruptedIOException
argument_list|(
literal|"take interrupted, i="
operator|+
name|i
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
DECL|method|takeWithTimeout (int i)
name|T
name|takeWithTimeout
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
try|try
block|{
return|return
name|queues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|poll
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
name|DFSUtilClient
operator|.
name|toInterruptedIOException
argument_list|(
literal|"take interrupted, i="
operator|+
name|i
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|poll (int i)
name|T
name|poll
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|queues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|poll
argument_list|()
return|;
block|}
DECL|method|peek (int i)
name|T
name|peek
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|queues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|peek
argument_list|()
return|;
block|}
DECL|method|clear ()
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|BlockingQueue
argument_list|<
name|T
argument_list|>
name|q
range|:
name|queues
control|)
block|{
name|q
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Coordinate the communication between the streamers. */
DECL|class|Coordinator
specifier|static
class|class
name|Coordinator
block|{
comment|/**      * The next internal block to write to for each streamers. The      * DFSStripedOutputStream makes the {@link ClientProtocol#addBlock} RPC to      * get a new block group. The block group is split to internal blocks, which      * are then distributed into the queue for streamers to retrieve.      */
DECL|field|followingBlocks
specifier|private
specifier|final
name|MultipleBlockingQueue
argument_list|<
name|LocatedBlock
argument_list|>
name|followingBlocks
decl_stmt|;
comment|/**      * Used to sync among all the streamers before allocating a new block. The      * DFSStripedOutputStream uses this to make sure every streamer has finished      * writing the previous block.      */
DECL|field|endBlocks
specifier|private
specifier|final
name|MultipleBlockingQueue
argument_list|<
name|ExtendedBlock
argument_list|>
name|endBlocks
decl_stmt|;
comment|/**      * The following data structures are used for syncing while handling errors      */
DECL|field|newBlocks
specifier|private
specifier|final
name|MultipleBlockingQueue
argument_list|<
name|LocatedBlock
argument_list|>
name|newBlocks
decl_stmt|;
DECL|field|updateStreamerMap
specifier|private
specifier|final
name|Map
argument_list|<
name|StripedDataStreamer
argument_list|,
name|Boolean
argument_list|>
name|updateStreamerMap
decl_stmt|;
DECL|field|streamerUpdateResult
specifier|private
specifier|final
name|MultipleBlockingQueue
argument_list|<
name|Boolean
argument_list|>
name|streamerUpdateResult
decl_stmt|;
DECL|method|Coordinator (final int numAllBlocks)
name|Coordinator
parameter_list|(
specifier|final
name|int
name|numAllBlocks
parameter_list|)
block|{
name|followingBlocks
operator|=
operator|new
name|MultipleBlockingQueue
argument_list|<>
argument_list|(
name|numAllBlocks
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|endBlocks
operator|=
operator|new
name|MultipleBlockingQueue
argument_list|<>
argument_list|(
name|numAllBlocks
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|newBlocks
operator|=
operator|new
name|MultipleBlockingQueue
argument_list|<>
argument_list|(
name|numAllBlocks
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|updateStreamerMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|(
name|numAllBlocks
argument_list|)
expr_stmt|;
name|streamerUpdateResult
operator|=
operator|new
name|MultipleBlockingQueue
argument_list|<>
argument_list|(
name|numAllBlocks
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|getFollowingBlocks ()
name|MultipleBlockingQueue
argument_list|<
name|LocatedBlock
argument_list|>
name|getFollowingBlocks
parameter_list|()
block|{
return|return
name|followingBlocks
return|;
block|}
DECL|method|getNewBlocks ()
name|MultipleBlockingQueue
argument_list|<
name|LocatedBlock
argument_list|>
name|getNewBlocks
parameter_list|()
block|{
return|return
name|newBlocks
return|;
block|}
DECL|method|offerEndBlock (int i, ExtendedBlock block)
name|void
name|offerEndBlock
parameter_list|(
name|int
name|i
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|)
block|{
name|endBlocks
operator|.
name|offer
argument_list|(
name|i
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
DECL|method|offerStreamerUpdateResult (int i, boolean success)
name|void
name|offerStreamerUpdateResult
parameter_list|(
name|int
name|i
parameter_list|,
name|boolean
name|success
parameter_list|)
block|{
name|streamerUpdateResult
operator|.
name|offer
argument_list|(
name|i
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
DECL|method|takeStreamerUpdateResult (int i)
name|boolean
name|takeStreamerUpdateResult
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
return|return
name|streamerUpdateResult
operator|.
name|take
argument_list|(
name|i
argument_list|)
return|;
block|}
DECL|method|updateStreamer (StripedDataStreamer streamer, boolean success)
name|void
name|updateStreamer
parameter_list|(
name|StripedDataStreamer
name|streamer
parameter_list|,
name|boolean
name|success
parameter_list|)
block|{
assert|assert
operator|!
name|updateStreamerMap
operator|.
name|containsKey
argument_list|(
name|streamer
argument_list|)
assert|;
name|updateStreamerMap
operator|.
name|put
argument_list|(
name|streamer
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
DECL|method|clearFailureStates ()
name|void
name|clearFailureStates
parameter_list|()
block|{
name|newBlocks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|updateStreamerMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|streamerUpdateResult
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Buffers for writing the data and parity cells of a stripe. */
DECL|class|CellBuffers
class|class
name|CellBuffers
block|{
DECL|field|buffers
specifier|private
specifier|final
name|ByteBuffer
index|[]
name|buffers
decl_stmt|;
DECL|field|checksumArrays
specifier|private
specifier|final
name|byte
index|[]
index|[]
name|checksumArrays
decl_stmt|;
DECL|method|CellBuffers (int numParityBlocks)
name|CellBuffers
parameter_list|(
name|int
name|numParityBlocks
parameter_list|)
block|{
if|if
condition|(
name|cellSize
operator|%
name|bytesPerChecksum
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Invalid values: "
operator|+
name|HdfsClientConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
operator|+
literal|" (="
operator|+
name|bytesPerChecksum
operator|+
literal|") must divide cell size (="
operator|+
name|cellSize
operator|+
literal|")."
argument_list|)
throw|;
block|}
name|checksumArrays
operator|=
operator|new
name|byte
index|[
name|numParityBlocks
index|]
index|[]
expr_stmt|;
specifier|final
name|int
name|size
init|=
name|getChecksumSize
argument_list|()
operator|*
operator|(
name|cellSize
operator|/
name|bytesPerChecksum
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|checksumArrays
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|checksumArrays
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[
name|size
index|]
expr_stmt|;
block|}
name|buffers
operator|=
operator|new
name|ByteBuffer
index|[
name|numAllBlocks
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buffers
index|[
name|i
index|]
operator|=
name|BUFFER_POOL
operator|.
name|getBuffer
argument_list|(
name|useDirectBuffer
argument_list|()
argument_list|,
name|cellSize
argument_list|)
expr_stmt|;
name|buffers
index|[
name|i
index|]
operator|.
name|limit
argument_list|(
name|cellSize
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getBuffers ()
specifier|private
name|ByteBuffer
index|[]
name|getBuffers
parameter_list|()
block|{
return|return
name|buffers
return|;
block|}
DECL|method|getChecksumArray (int i)
name|byte
index|[]
name|getChecksumArray
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|checksumArrays
index|[
name|i
operator|-
name|numDataBlocks
index|]
return|;
block|}
DECL|method|addTo (int i, byte[] b, int off, int len)
specifier|private
name|int
name|addTo
parameter_list|(
name|int
name|i
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
specifier|final
name|ByteBuffer
name|buf
init|=
name|buffers
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|int
name|pos
init|=
name|buf
operator|.
name|position
argument_list|()
operator|+
name|len
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|pos
operator|<=
name|cellSize
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|pos
return|;
block|}
DECL|method|clear ()
specifier|private
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
name|buffers
index|[
name|i
index|]
operator|.
name|clear
argument_list|()
expr_stmt|;
name|buffers
index|[
name|i
index|]
operator|.
name|limit
argument_list|(
name|cellSize
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|release ()
specifier|private
name|void
name|release
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|buffers
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|BUFFER_POOL
operator|.
name|putBuffer
argument_list|(
name|buffers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|buffers
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|flipDataBuffers ()
specifier|private
name|void
name|flipDataBuffers
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDataBlocks
condition|;
name|i
operator|++
control|)
block|{
name|buffers
index|[
name|i
index|]
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|field|coordinator
specifier|private
specifier|final
name|Coordinator
name|coordinator
decl_stmt|;
DECL|field|cellBuffers
specifier|private
specifier|final
name|CellBuffers
name|cellBuffers
decl_stmt|;
DECL|field|ecPolicy
specifier|private
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
decl_stmt|;
DECL|field|encoder
specifier|private
specifier|final
name|RawErasureEncoder
name|encoder
decl_stmt|;
DECL|field|streamers
specifier|private
specifier|final
name|List
argument_list|<
name|StripedDataStreamer
argument_list|>
name|streamers
decl_stmt|;
DECL|field|currentPackets
specifier|private
specifier|final
name|DFSPacket
index|[]
name|currentPackets
decl_stmt|;
comment|// current Packet of each streamer
comment|// Size of each striping cell, must be a multiple of bytesPerChecksum.
DECL|field|cellSize
specifier|private
specifier|final
name|int
name|cellSize
decl_stmt|;
DECL|field|numAllBlocks
specifier|private
specifier|final
name|int
name|numAllBlocks
decl_stmt|;
DECL|field|numDataBlocks
specifier|private
specifier|final
name|int
name|numDataBlocks
decl_stmt|;
DECL|field|currentBlockGroup
specifier|private
name|ExtendedBlock
name|currentBlockGroup
decl_stmt|;
DECL|field|favoredNodes
specifier|private
specifier|final
name|String
index|[]
name|favoredNodes
decl_stmt|;
DECL|field|failedStreamers
specifier|private
specifier|final
name|List
argument_list|<
name|StripedDataStreamer
argument_list|>
name|failedStreamers
decl_stmt|;
DECL|field|corruptBlockCountMap
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|corruptBlockCountMap
decl_stmt|;
DECL|field|flushAllExecutor
specifier|private
name|ExecutorService
name|flushAllExecutor
decl_stmt|;
DECL|field|flushAllExecutorCompletionService
specifier|private
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|flushAllExecutorCompletionService
decl_stmt|;
DECL|field|blockGroupIndex
specifier|private
name|int
name|blockGroupIndex
decl_stmt|;
comment|/** Construct a new output stream for creating a file. */
DECL|method|DFSStripedOutputStream (DFSClient dfsClient, String src, HdfsFileStatus stat, EnumSet<CreateFlag> flag, Progressable progress, DataChecksum checksum, String[] favoredNodes)
name|DFSStripedOutputStream
parameter_list|(
name|DFSClient
name|dfsClient
parameter_list|,
name|String
name|src
parameter_list|,
name|HdfsFileStatus
name|stat
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|Progressable
name|progress
parameter_list|,
name|DataChecksum
name|checksum
parameter_list|,
name|String
index|[]
name|favoredNodes
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dfsClient
argument_list|,
name|src
argument_list|,
name|stat
argument_list|,
name|flag
argument_list|,
name|progress
argument_list|,
name|checksum
argument_list|,
name|favoredNodes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating DFSStripedOutputStream for "
operator|+
name|src
argument_list|)
expr_stmt|;
block|}
name|ecPolicy
operator|=
name|stat
operator|.
name|getErasureCodingPolicy
argument_list|()
expr_stmt|;
specifier|final
name|int
name|numParityBlocks
init|=
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
name|cellSize
operator|=
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
expr_stmt|;
name|numDataBlocks
operator|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
expr_stmt|;
name|numAllBlocks
operator|=
name|numDataBlocks
operator|+
name|numParityBlocks
expr_stmt|;
name|this
operator|.
name|favoredNodes
operator|=
name|favoredNodes
expr_stmt|;
name|failedStreamers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|corruptBlockCountMap
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|flushAllExecutor
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numAllBlocks
argument_list|)
expr_stmt|;
name|flushAllExecutorCompletionService
operator|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|flushAllExecutor
argument_list|)
expr_stmt|;
name|ErasureCoderOptions
name|coderOptions
init|=
operator|new
name|ErasureCoderOptions
argument_list|(
name|numDataBlocks
argument_list|,
name|numParityBlocks
argument_list|)
decl_stmt|;
name|encoder
operator|=
name|CodecUtil
operator|.
name|createRawEncoder
argument_list|(
name|dfsClient
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|ecPolicy
operator|.
name|getCodecName
argument_list|()
argument_list|,
name|coderOptions
argument_list|)
expr_stmt|;
name|coordinator
operator|=
operator|new
name|Coordinator
argument_list|(
name|numAllBlocks
argument_list|)
expr_stmt|;
name|cellBuffers
operator|=
operator|new
name|CellBuffers
argument_list|(
name|numParityBlocks
argument_list|)
expr_stmt|;
name|streamers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numAllBlocks
argument_list|)
expr_stmt|;
for|for
control|(
name|short
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
name|StripedDataStreamer
name|streamer
init|=
operator|new
name|StripedDataStreamer
argument_list|(
name|stat
argument_list|,
name|dfsClient
argument_list|,
name|src
argument_list|,
name|progress
argument_list|,
name|checksum
argument_list|,
name|cachingStrategy
argument_list|,
name|byteArrayManager
argument_list|,
name|favoredNodes
argument_list|,
name|i
argument_list|,
name|coordinator
argument_list|,
name|getAddBlockFlags
argument_list|()
argument_list|)
decl_stmt|;
name|streamers
operator|.
name|add
argument_list|(
name|streamer
argument_list|)
expr_stmt|;
block|}
name|currentPackets
operator|=
operator|new
name|DFSPacket
index|[
name|streamers
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|setCurrentStreamer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|useDirectBuffer ()
specifier|private
name|boolean
name|useDirectBuffer
parameter_list|()
block|{
return|return
name|encoder
operator|.
name|preferDirectBuffer
argument_list|()
return|;
block|}
DECL|method|getStripedDataStreamer (int i)
name|StripedDataStreamer
name|getStripedDataStreamer
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|streamers
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
DECL|method|getCurrentIndex ()
name|int
name|getCurrentIndex
parameter_list|()
block|{
return|return
name|getCurrentStreamer
argument_list|()
operator|.
name|getIndex
argument_list|()
return|;
block|}
DECL|method|getCurrentStreamer ()
specifier|private
specifier|synchronized
name|StripedDataStreamer
name|getCurrentStreamer
parameter_list|()
block|{
return|return
operator|(
name|StripedDataStreamer
operator|)
name|streamer
return|;
block|}
DECL|method|setCurrentStreamer (int newIdx)
specifier|private
specifier|synchronized
name|StripedDataStreamer
name|setCurrentStreamer
parameter_list|(
name|int
name|newIdx
parameter_list|)
block|{
comment|// backup currentPacket for current streamer
if|if
condition|(
name|streamer
operator|!=
literal|null
condition|)
block|{
name|int
name|oldIdx
init|=
name|streamers
operator|.
name|indexOf
argument_list|(
name|getCurrentStreamer
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldIdx
operator|>=
literal|0
condition|)
block|{
name|currentPackets
index|[
name|oldIdx
index|]
operator|=
name|currentPacket
expr_stmt|;
block|}
block|}
name|streamer
operator|=
name|getStripedDataStreamer
argument_list|(
name|newIdx
argument_list|)
expr_stmt|;
name|currentPacket
operator|=
name|currentPackets
index|[
name|newIdx
index|]
expr_stmt|;
name|adjustChunkBoundary
argument_list|()
expr_stmt|;
return|return
name|getCurrentStreamer
argument_list|()
return|;
block|}
comment|/**    * Encode the buffers, i.e. compute parities.    *    * @param buffers data buffers + parity buffers    */
DECL|method|encode (RawErasureEncoder encoder, int numData, ByteBuffer[] buffers)
specifier|private
specifier|static
name|void
name|encode
parameter_list|(
name|RawErasureEncoder
name|encoder
parameter_list|,
name|int
name|numData
parameter_list|,
name|ByteBuffer
index|[]
name|buffers
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ByteBuffer
index|[]
name|dataBuffers
init|=
operator|new
name|ByteBuffer
index|[
name|numData
index|]
decl_stmt|;
specifier|final
name|ByteBuffer
index|[]
name|parityBuffers
init|=
operator|new
name|ByteBuffer
index|[
name|buffers
operator|.
name|length
operator|-
name|numData
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffers
argument_list|,
literal|0
argument_list|,
name|dataBuffers
argument_list|,
literal|0
argument_list|,
name|dataBuffers
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffers
argument_list|,
name|numData
argument_list|,
name|parityBuffers
argument_list|,
literal|0
argument_list|,
name|parityBuffers
operator|.
name|length
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|encode
argument_list|(
name|dataBuffers
argument_list|,
name|parityBuffers
argument_list|)
expr_stmt|;
block|}
comment|/**    * check all the existing StripedDataStreamer and find newly failed streamers.    * @return The newly failed streamers.    * @throws IOException if less than {@link #numDataBlocks} streamers are still    *                     healthy.    */
DECL|method|checkStreamers ()
specifier|private
name|Set
argument_list|<
name|StripedDataStreamer
argument_list|>
name|checkStreamers
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|StripedDataStreamer
argument_list|>
name|newFailed
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|StripedDataStreamer
name|s
range|:
name|streamers
control|)
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|isHealthy
argument_list|()
operator|&&
operator|!
name|failedStreamers
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|newFailed
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|failCount
init|=
name|failedStreamers
operator|.
name|size
argument_list|()
operator|+
name|newFailed
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"checkStreamers: "
operator|+
name|streamers
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"healthy streamer count="
operator|+
operator|(
name|numAllBlocks
operator|-
name|failCount
operator|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"original failed streamers: "
operator|+
name|failedStreamers
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"newly failed streamers: "
operator|+
name|newFailed
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failCount
operator|>
operator|(
name|numAllBlocks
operator|-
name|numDataBlocks
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed: the number of failed blocks = "
operator|+
name|failCount
operator|+
literal|"> the number of parity blocks = "
operator|+
operator|(
name|numAllBlocks
operator|-
name|numDataBlocks
operator|)
argument_list|)
throw|;
block|}
return|return
name|newFailed
return|;
block|}
DECL|method|handleCurrentStreamerFailure (String err, Exception e)
specifier|private
name|void
name|handleCurrentStreamerFailure
parameter_list|(
name|String
name|err
parameter_list|,
name|Exception
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|currentPacket
operator|=
literal|null
expr_stmt|;
name|handleStreamerFailure
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|getCurrentStreamer
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|handleStreamerFailure (String err, Exception e, StripedDataStreamer streamer)
specifier|private
name|void
name|handleStreamerFailure
parameter_list|(
name|String
name|err
parameter_list|,
name|Exception
name|e
parameter_list|,
name|StripedDataStreamer
name|streamer
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed: "
operator|+
name|err
operator|+
literal|", "
operator|+
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|streamer
operator|.
name|getErrorState
argument_list|()
operator|.
name|setInternalError
argument_list|()
expr_stmt|;
name|streamer
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkStreamers
argument_list|()
expr_stmt|;
name|currentPackets
index|[
name|streamer
operator|.
name|getIndex
argument_list|()
index|]
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|replaceFailedStreamers ()
specifier|private
name|void
name|replaceFailedStreamers
parameter_list|()
block|{
assert|assert
name|streamers
operator|.
name|size
argument_list|()
operator|==
name|numAllBlocks
assert|;
specifier|final
name|int
name|currentIndex
init|=
name|getCurrentIndex
argument_list|()
decl_stmt|;
assert|assert
name|currentIndex
operator|==
literal|0
assert|;
for|for
control|(
name|short
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StripedDataStreamer
name|oldStreamer
init|=
name|getStripedDataStreamer
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldStreamer
operator|.
name|isHealthy
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"replacing previously failed streamer "
operator|+
name|oldStreamer
argument_list|)
expr_stmt|;
name|StripedDataStreamer
name|streamer
init|=
operator|new
name|StripedDataStreamer
argument_list|(
name|oldStreamer
operator|.
name|stat
argument_list|,
name|dfsClient
argument_list|,
name|src
argument_list|,
name|oldStreamer
operator|.
name|progress
argument_list|,
name|oldStreamer
operator|.
name|checksum4WriteBlock
argument_list|,
name|cachingStrategy
argument_list|,
name|byteArrayManager
argument_list|,
name|favoredNodes
argument_list|,
name|i
argument_list|,
name|coordinator
argument_list|,
name|getAddBlockFlags
argument_list|()
argument_list|)
decl_stmt|;
name|streamers
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|streamer
argument_list|)
expr_stmt|;
name|currentPackets
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|currentIndex
condition|)
block|{
name|this
operator|.
name|streamer
operator|=
name|streamer
expr_stmt|;
name|this
operator|.
name|currentPacket
operator|=
literal|null
expr_stmt|;
block|}
name|streamer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|waitEndBlocks (int i)
specifier|private
name|void
name|waitEndBlocks
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|getStripedDataStreamer
argument_list|(
name|i
argument_list|)
operator|.
name|isHealthy
argument_list|()
condition|)
block|{
specifier|final
name|ExtendedBlock
name|b
init|=
name|coordinator
operator|.
name|endBlocks
operator|.
name|takeWithTimeout
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|StripedBlockUtil
operator|.
name|checkBlocks
argument_list|(
name|currentBlockGroup
argument_list|,
name|i
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|method|getExcludedNodes ()
specifier|private
name|DatanodeInfo
index|[]
name|getExcludedNodes
parameter_list|()
block|{
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|excluded
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|StripedDataStreamer
name|streamer
range|:
name|streamers
control|)
block|{
for|for
control|(
name|DatanodeInfo
name|e
range|:
name|streamer
operator|.
name|getExcludedNodes
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|excluded
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|excluded
operator|.
name|toArray
argument_list|(
operator|new
name|DatanodeInfo
index|[
name|excluded
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|allocateNewBlock ()
specifier|private
name|void
name|allocateNewBlock
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentBlockGroup
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
comment|// sync all the healthy streamers before writing to the new block
name|waitEndBlocks
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|failedStreamers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|DatanodeInfo
index|[]
name|excludedNodes
init|=
name|getExcludedNodes
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Excluding DataNodes when allocating new block: "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|excludedNodes
argument_list|)
argument_list|)
expr_stmt|;
comment|// replace failed streamers
name|replaceFailedStreamers
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Allocating new block group. The previous block group: "
operator|+
name|currentBlockGroup
argument_list|)
expr_stmt|;
specifier|final
name|LocatedBlock
name|lb
init|=
name|addBlock
argument_list|(
name|excludedNodes
argument_list|,
name|dfsClient
argument_list|,
name|src
argument_list|,
name|currentBlockGroup
argument_list|,
name|fileId
argument_list|,
name|favoredNodes
argument_list|,
name|getAddBlockFlags
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|lb
operator|.
name|isStriped
argument_list|()
assert|;
comment|// assign the new block to the current block group
name|currentBlockGroup
operator|=
name|lb
operator|.
name|getBlock
argument_list|()
expr_stmt|;
name|blockGroupIndex
operator|++
expr_stmt|;
specifier|final
name|LocatedBlock
index|[]
name|blocks
init|=
name|StripedBlockUtil
operator|.
name|parseStripedBlockGroup
argument_list|(
operator|(
name|LocatedStripedBlock
operator|)
name|lb
argument_list|,
name|cellSize
argument_list|,
name|numDataBlocks
argument_list|,
name|numAllBlocks
operator|-
name|numDataBlocks
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|StripedDataStreamer
name|si
init|=
name|getStripedDataStreamer
argument_list|(
name|i
argument_list|)
decl_stmt|;
assert|assert
name|si
operator|.
name|isHealthy
argument_list|()
assert|;
if|if
condition|(
name|blocks
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
comment|// allocBlock() should guarantee that all data blocks are successfully
comment|// allocated.
assert|assert
name|i
operator|>=
name|numDataBlocks
assert|;
comment|// Set exception and close streamer as there is no block locations
comment|// found for the parity block.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot allocate parity block(index={}, policy={}). "
operator|+
literal|"Not enough datanodes? Exclude nodes={}"
argument_list|,
name|i
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|,
name|excludedNodes
argument_list|)
expr_stmt|;
name|si
operator|.
name|getLastException
argument_list|()
operator|.
name|set
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Failed to get parity block, index="
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|si
operator|.
name|getErrorState
argument_list|()
operator|.
name|setInternalError
argument_list|()
expr_stmt|;
name|si
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|coordinator
operator|.
name|getFollowingBlocks
argument_list|()
operator|.
name|offer
argument_list|(
name|i
argument_list|,
name|blocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|shouldEndBlockGroup ()
specifier|private
name|boolean
name|shouldEndBlockGroup
parameter_list|()
block|{
return|return
name|currentBlockGroup
operator|!=
literal|null
operator|&&
name|currentBlockGroup
operator|.
name|getNumBytes
argument_list|()
operator|==
name|blockSize
operator|*
name|numDataBlocks
return|;
block|}
annotation|@
name|Override
DECL|method|writeChunk (byte[] bytes, int offset, int len, byte[] checksum, int ckoff, int cklen)
specifier|protected
specifier|synchronized
name|void
name|writeChunk
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|,
name|byte
index|[]
name|checksum
parameter_list|,
name|int
name|ckoff
parameter_list|,
name|int
name|cklen
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|index
init|=
name|getCurrentIndex
argument_list|()
decl_stmt|;
specifier|final
name|int
name|pos
init|=
name|cellBuffers
operator|.
name|addTo
argument_list|(
name|index
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|cellFull
init|=
name|pos
operator|==
name|cellSize
decl_stmt|;
if|if
condition|(
name|currentBlockGroup
operator|==
literal|null
operator|||
name|shouldEndBlockGroup
argument_list|()
condition|)
block|{
comment|// the incoming data should belong to a new block. Allocate a new block.
name|allocateNewBlock
argument_list|()
expr_stmt|;
block|}
name|currentBlockGroup
operator|.
name|setNumBytes
argument_list|(
name|currentBlockGroup
operator|.
name|getNumBytes
argument_list|()
operator|+
name|len
argument_list|)
expr_stmt|;
comment|// note: the current streamer can be refreshed after allocating a new block
specifier|final
name|StripedDataStreamer
name|current
init|=
name|getCurrentStreamer
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|isHealthy
argument_list|()
condition|)
block|{
try|try
block|{
name|super
operator|.
name|writeChunk
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|,
name|checksum
argument_list|,
name|ckoff
argument_list|,
name|cklen
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleCurrentStreamerFailure
argument_list|(
literal|"offset="
operator|+
name|offset
operator|+
literal|", length="
operator|+
name|len
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Two extra steps are needed when a striping cell is full:
comment|// 1. Forward the current index pointer
comment|// 2. Generate parity packets if a full stripe of data cells are present
if|if
condition|(
name|cellFull
condition|)
block|{
name|int
name|next
init|=
name|index
operator|+
literal|1
decl_stmt|;
comment|//When all data cells in a stripe are ready, we need to encode
comment|//them and generate some parity cells. These cells will be
comment|//converted to packets and put to their DataStreamer's queue.
if|if
condition|(
name|next
operator|==
name|numDataBlocks
condition|)
block|{
name|cellBuffers
operator|.
name|flipDataBuffers
argument_list|()
expr_stmt|;
name|writeParityCells
argument_list|()
expr_stmt|;
name|next
operator|=
literal|0
expr_stmt|;
comment|// if this is the end of the block group, end each internal block
if|if
condition|(
name|shouldEndBlockGroup
argument_list|()
condition|)
block|{
name|flushAllInternals
argument_list|()
expr_stmt|;
name|checkStreamerFailures
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StripedDataStreamer
name|s
init|=
name|setCurrentStreamer
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|isHealthy
argument_list|()
condition|)
block|{
try|try
block|{
name|endBlock
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{}
block|}
block|}
block|}
else|else
block|{
comment|// check failure state for all the streamers. Bump GS if necessary
name|checkStreamerFailures
argument_list|()
expr_stmt|;
block|}
block|}
name|setCurrentStreamer
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|enqueueCurrentPacketFull ()
specifier|synchronized
name|void
name|enqueueCurrentPacketFull
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"enqueue full {}, src={}, bytesCurBlock={}, blockSize={},"
operator|+
literal|" appendChunk={}, {}"
argument_list|,
name|currentPacket
argument_list|,
name|src
argument_list|,
name|getStreamer
argument_list|()
operator|.
name|getBytesCurBlock
argument_list|()
argument_list|,
name|blockSize
argument_list|,
name|getStreamer
argument_list|()
operator|.
name|getAppendChunk
argument_list|()
argument_list|,
name|getStreamer
argument_list|()
argument_list|)
expr_stmt|;
name|enqueueCurrentPacket
argument_list|()
expr_stmt|;
name|adjustChunkBoundary
argument_list|()
expr_stmt|;
comment|// no need to end block here
block|}
comment|/**    * @return whether the data streamer with the given index is streaming data.    * Note the streamer may not be in STREAMING stage if the block length is less    * than a stripe.    */
DECL|method|isStreamerWriting (int streamerIndex)
specifier|private
name|boolean
name|isStreamerWriting
parameter_list|(
name|int
name|streamerIndex
parameter_list|)
block|{
specifier|final
name|long
name|length
init|=
name|currentBlockGroup
operator|==
literal|null
condition|?
literal|0
else|:
name|currentBlockGroup
operator|.
name|getNumBytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|streamerIndex
operator|>=
name|numDataBlocks
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|int
name|numCells
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|length
operator|-
literal|1
operator|)
operator|/
name|cellSize
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|streamerIndex
operator|<
name|numCells
return|;
block|}
DECL|method|markExternalErrorOnStreamers ()
specifier|private
name|Set
argument_list|<
name|StripedDataStreamer
argument_list|>
name|markExternalErrorOnStreamers
parameter_list|()
block|{
name|Set
argument_list|<
name|StripedDataStreamer
argument_list|>
name|healthySet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StripedDataStreamer
name|streamer
init|=
name|getStripedDataStreamer
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|streamer
operator|.
name|isHealthy
argument_list|()
operator|&&
name|isStreamerWriting
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|streamer
operator|.
name|getStage
argument_list|()
operator|==
name|BlockConstructionStage
operator|.
name|DATA_STREAMING
argument_list|,
literal|"streamer: "
operator|+
name|streamer
argument_list|)
expr_stmt|;
name|streamer
operator|.
name|setExternalError
argument_list|()
expr_stmt|;
name|healthySet
operator|.
name|add
argument_list|(
name|streamer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|healthySet
return|;
block|}
comment|/**    * Check and handle data streamer failures. This is called only when we have    * written a full stripe (i.e., enqueue all packets for a full stripe), or    * when we're closing the outputstream.    */
DECL|method|checkStreamerFailures ()
specifier|private
name|void
name|checkStreamerFailures
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|StripedDataStreamer
argument_list|>
name|newFailed
init|=
name|checkStreamers
argument_list|()
decl_stmt|;
if|if
condition|(
name|newFailed
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// for healthy streamers, wait till all of them have fetched the new block
comment|// and flushed out all the enqueued packets.
name|flushAllInternals
argument_list|()
expr_stmt|;
comment|// recheck failed streamers again after the flush
name|newFailed
operator|=
name|checkStreamers
argument_list|()
expr_stmt|;
while|while
condition|(
name|newFailed
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|failedStreamers
operator|.
name|addAll
argument_list|(
name|newFailed
argument_list|)
expr_stmt|;
name|coordinator
operator|.
name|clearFailureStates
argument_list|()
expr_stmt|;
name|corruptBlockCountMap
operator|.
name|put
argument_list|(
name|blockGroupIndex
argument_list|,
name|failedStreamers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// mark all the healthy streamers as external error
name|Set
argument_list|<
name|StripedDataStreamer
argument_list|>
name|healthySet
init|=
name|markExternalErrorOnStreamers
argument_list|()
decl_stmt|;
comment|// we have newly failed streamers, update block for pipeline
specifier|final
name|ExtendedBlock
name|newBG
init|=
name|updateBlockForPipeline
argument_list|(
name|healthySet
argument_list|)
decl_stmt|;
comment|// wait till all the healthy streamers to
comment|// 1) get the updated block info
comment|// 2) create new block outputstream
name|newFailed
operator|=
name|waitCreatingStreamers
argument_list|(
name|healthySet
argument_list|)
expr_stmt|;
if|if
condition|(
name|newFailed
operator|.
name|size
argument_list|()
operator|+
name|failedStreamers
operator|.
name|size
argument_list|()
operator|>
name|numAllBlocks
operator|-
name|numDataBlocks
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Data streamers failed while creating new block streams: "
operator|+
name|newFailed
operator|+
literal|". There are not enough healthy streamers."
argument_list|)
throw|;
block|}
for|for
control|(
name|StripedDataStreamer
name|failedStreamer
range|:
name|newFailed
control|)
block|{
assert|assert
operator|!
name|failedStreamer
operator|.
name|isHealthy
argument_list|()
assert|;
block|}
comment|// TODO we can also succeed if all the failed streamers have not taken
comment|// the updated block
if|if
condition|(
name|newFailed
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// reset external error state of all the streamers
for|for
control|(
name|StripedDataStreamer
name|streamer
range|:
name|healthySet
control|)
block|{
assert|assert
name|streamer
operator|.
name|isHealthy
argument_list|()
assert|;
name|streamer
operator|.
name|getErrorState
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|updatePipeline
argument_list|(
name|newBG
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
name|coordinator
operator|.
name|offerStreamerUpdateResult
argument_list|(
name|i
argument_list|,
name|newFailed
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Check if the streamers were successfully updated, adding failed streamers    * in the<i>failed</i> return parameter.    * @param failed Return parameter containing failed streamers from    *<i>streamers</i>.    * @param streamers Set of streamers that are being updated    * @return total number of successful updates and failures    */
DECL|method|checkStreamerUpdates (Set<StripedDataStreamer> failed, Set<StripedDataStreamer> streamers)
specifier|private
name|int
name|checkStreamerUpdates
parameter_list|(
name|Set
argument_list|<
name|StripedDataStreamer
argument_list|>
name|failed
parameter_list|,
name|Set
argument_list|<
name|StripedDataStreamer
argument_list|>
name|streamers
parameter_list|)
block|{
for|for
control|(
name|StripedDataStreamer
name|streamer
range|:
name|streamers
control|)
block|{
if|if
condition|(
operator|!
name|coordinator
operator|.
name|updateStreamerMap
operator|.
name|containsKey
argument_list|(
name|streamer
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|streamer
operator|.
name|isHealthy
argument_list|()
operator|&&
name|coordinator
operator|.
name|getNewBlocks
argument_list|()
operator|.
name|peek
argument_list|(
name|streamer
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// this streamer had internal error before getting updated block
name|failed
operator|.
name|add
argument_list|(
name|streamer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|coordinator
operator|.
name|updateStreamerMap
operator|.
name|size
argument_list|()
operator|+
name|failed
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Waits for streamers to be created.    *    * @param healthyStreamers Set of healthy streamers    * @return Set of streamers that failed.    *    * @throws IOException    */
DECL|method|waitCreatingStreamers ( Set<StripedDataStreamer> healthyStreamers)
specifier|private
name|Set
argument_list|<
name|StripedDataStreamer
argument_list|>
name|waitCreatingStreamers
parameter_list|(
name|Set
argument_list|<
name|StripedDataStreamer
argument_list|>
name|healthyStreamers
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|StripedDataStreamer
argument_list|>
name|failed
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|expectedNum
init|=
name|healthyStreamers
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|long
name|socketTimeout
init|=
name|dfsClient
operator|.
name|getConf
argument_list|()
operator|.
name|getSocketTimeout
argument_list|()
decl_stmt|;
comment|// the total wait time should be less than the socket timeout, otherwise
comment|// a slow streamer may cause other streamers to timeout. here we wait for
comment|// half of the socket timeout
name|long
name|remaingTime
init|=
name|socketTimeout
operator|>
literal|0
condition|?
name|socketTimeout
operator|/
literal|2
else|:
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|final
name|long
name|waitInterval
init|=
literal|1000
decl_stmt|;
synchronized|synchronized
init|(
name|coordinator
init|)
block|{
while|while
condition|(
name|checkStreamerUpdates
argument_list|(
name|failed
argument_list|,
name|healthyStreamers
argument_list|)
operator|<
name|expectedNum
operator|&&
name|remaingTime
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|long
name|start
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|coordinator
operator|.
name|wait
argument_list|(
name|waitInterval
argument_list|)
expr_stmt|;
name|remaingTime
operator|-=
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|start
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
name|DFSUtilClient
operator|.
name|toInterruptedIOException
argument_list|(
literal|"Interrupted when waiting"
operator|+
literal|" for results of updating striped streamers"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
synchronized|synchronized
init|(
name|coordinator
init|)
block|{
for|for
control|(
name|StripedDataStreamer
name|streamer
range|:
name|healthyStreamers
control|)
block|{
if|if
condition|(
operator|!
name|coordinator
operator|.
name|updateStreamerMap
operator|.
name|containsKey
argument_list|(
name|streamer
argument_list|)
condition|)
block|{
comment|// close the streamer if it is too slow to create new connection
name|LOG
operator|.
name|info
argument_list|(
literal|"close the slow stream "
operator|+
name|streamer
argument_list|)
expr_stmt|;
name|streamer
operator|.
name|setStreamerAsClosed
argument_list|()
expr_stmt|;
name|failed
operator|.
name|add
argument_list|(
name|streamer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|StripedDataStreamer
argument_list|,
name|Boolean
argument_list|>
name|entry
range|:
name|coordinator
operator|.
name|updateStreamerMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|failed
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|StripedDataStreamer
name|failedStreamer
range|:
name|failed
control|)
block|{
name|healthyStreamers
operator|.
name|remove
argument_list|(
name|failedStreamer
argument_list|)
expr_stmt|;
block|}
return|return
name|failed
return|;
block|}
comment|/**    * Call {@link ClientProtocol#updateBlockForPipeline} and assign updated block    * to healthy streamers.    * @param healthyStreamers The healthy data streamers. These streamers join    *                         the failure handling.    */
DECL|method|updateBlockForPipeline ( Set<StripedDataStreamer> healthyStreamers)
specifier|private
name|ExtendedBlock
name|updateBlockForPipeline
parameter_list|(
name|Set
argument_list|<
name|StripedDataStreamer
argument_list|>
name|healthyStreamers
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LocatedBlock
name|updated
init|=
name|dfsClient
operator|.
name|namenode
operator|.
name|updateBlockForPipeline
argument_list|(
name|currentBlockGroup
argument_list|,
name|dfsClient
operator|.
name|clientName
argument_list|)
decl_stmt|;
specifier|final
name|long
name|newGS
init|=
name|updated
operator|.
name|getBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
decl_stmt|;
name|ExtendedBlock
name|newBlock
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|currentBlockGroup
argument_list|)
decl_stmt|;
name|newBlock
operator|.
name|setGenerationStamp
argument_list|(
name|newGS
argument_list|)
expr_stmt|;
specifier|final
name|LocatedBlock
index|[]
name|updatedBlks
init|=
name|StripedBlockUtil
operator|.
name|parseStripedBlockGroup
argument_list|(
operator|(
name|LocatedStripedBlock
operator|)
name|updated
argument_list|,
name|cellSize
argument_list|,
name|numDataBlocks
argument_list|,
name|numAllBlocks
operator|-
name|numDataBlocks
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
name|StripedDataStreamer
name|si
init|=
name|getStripedDataStreamer
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|healthyStreamers
operator|.
name|contains
argument_list|(
name|si
argument_list|)
condition|)
block|{
specifier|final
name|LocatedBlock
name|lb
init|=
operator|new
name|LocatedBlock
argument_list|(
operator|new
name|ExtendedBlock
argument_list|(
name|newBlock
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|updated
operator|.
name|isCorrupt
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|lb
operator|.
name|setBlockToken
argument_list|(
name|updatedBlks
index|[
name|i
index|]
operator|.
name|getBlockToken
argument_list|()
argument_list|)
expr_stmt|;
name|coordinator
operator|.
name|getNewBlocks
argument_list|()
operator|.
name|offer
argument_list|(
name|i
argument_list|,
name|lb
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newBlock
return|;
block|}
DECL|method|updatePipeline (ExtendedBlock newBG)
specifier|private
name|void
name|updatePipeline
parameter_list|(
name|ExtendedBlock
name|newBG
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DatanodeInfo
index|[]
name|newNodes
init|=
operator|new
name|DatanodeInfo
index|[
name|numAllBlocks
index|]
decl_stmt|;
specifier|final
name|String
index|[]
name|newStorageIDs
init|=
operator|new
name|String
index|[
name|numAllBlocks
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StripedDataStreamer
name|streamer
init|=
name|getStripedDataStreamer
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|DatanodeInfo
index|[]
name|nodes
init|=
name|streamer
operator|.
name|getNodes
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|storageIDs
init|=
name|streamer
operator|.
name|getStorageIDs
argument_list|()
decl_stmt|;
if|if
condition|(
name|streamer
operator|.
name|isHealthy
argument_list|()
operator|&&
name|nodes
operator|!=
literal|null
operator|&&
name|storageIDs
operator|!=
literal|null
condition|)
block|{
name|newNodes
index|[
name|i
index|]
operator|=
name|nodes
index|[
literal|0
index|]
expr_stmt|;
name|newStorageIDs
index|[
name|i
index|]
operator|=
name|storageIDs
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|newNodes
index|[
name|i
index|]
operator|=
operator|new
name|DatanodeInfoBuilder
argument_list|()
operator|.
name|setNodeID
argument_list|(
name|DatanodeID
operator|.
name|EMPTY_DATANODE_ID
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|newStorageIDs
index|[
name|i
index|]
operator|=
literal|""
expr_stmt|;
block|}
block|}
comment|// Update the NameNode with the acked length of the block group
comment|// Save and restore the unacked length
specifier|final
name|long
name|sentBytes
init|=
name|currentBlockGroup
operator|.
name|getNumBytes
argument_list|()
decl_stmt|;
specifier|final
name|long
name|ackedBytes
init|=
name|getAckedLength
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|ackedBytes
operator|<=
name|sentBytes
argument_list|,
literal|"Acked:"
operator|+
name|ackedBytes
operator|+
literal|", Sent:"
operator|+
name|sentBytes
argument_list|)
expr_stmt|;
name|currentBlockGroup
operator|.
name|setNumBytes
argument_list|(
name|ackedBytes
argument_list|)
expr_stmt|;
name|newBG
operator|.
name|setNumBytes
argument_list|(
name|ackedBytes
argument_list|)
expr_stmt|;
name|dfsClient
operator|.
name|namenode
operator|.
name|updatePipeline
argument_list|(
name|dfsClient
operator|.
name|clientName
argument_list|,
name|currentBlockGroup
argument_list|,
name|newBG
argument_list|,
name|newNodes
argument_list|,
name|newStorageIDs
argument_list|)
expr_stmt|;
name|currentBlockGroup
operator|=
name|newBG
expr_stmt|;
name|currentBlockGroup
operator|.
name|setNumBytes
argument_list|(
name|sentBytes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the length of each block in the block group.    * Unhealthy blocks have a length of -1.    *    * @return List of block lengths.    */
DECL|method|getBlockLengths ()
specifier|private
name|List
argument_list|<
name|Long
argument_list|>
name|getBlockLengths
parameter_list|()
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|blockLengths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numAllBlocks
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StripedDataStreamer
name|streamer
init|=
name|getStripedDataStreamer
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|numBytes
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|streamer
operator|.
name|isHealthy
argument_list|()
condition|)
block|{
if|if
condition|(
name|streamer
operator|.
name|getBlock
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|numBytes
operator|=
name|streamer
operator|.
name|getBlock
argument_list|()
operator|.
name|getNumBytes
argument_list|()
expr_stmt|;
block|}
block|}
name|blockLengths
operator|.
name|add
argument_list|(
name|numBytes
argument_list|)
expr_stmt|;
block|}
return|return
name|blockLengths
return|;
block|}
comment|/**    * Get the length of acked bytes in the block group.    *    *<p>    *   A full stripe is acked when at least numDataBlocks streamers have    *   the corresponding cells of the stripe, and all previous full stripes are    *   also acked. This enforces the constraint that there is at most one    *   partial stripe.    *</p>    *<p>    *   Partial stripes write all parity cells. Empty data cells are not written.    *   Parity cells are the length of the longest data cell(s). For example,    *   with RS(3,2), if we have data cells with lengths [1MB, 64KB, 0], the    *   parity blocks will be length [1MB, 1MB].    *</p>    *<p>    *   To be considered acked, a partial stripe needs at least numDataBlocks    *   empty or written cells.    *</p>    *<p>    *   Currently, partial stripes can only happen when closing the file at a    *   non-stripe boundary, but this could also happen during (currently    *   unimplemented) hflush/hsync support.    *</p>    */
DECL|method|getAckedLength ()
specifier|private
name|long
name|getAckedLength
parameter_list|()
block|{
comment|// Determine the number of full stripes that are sufficiently durable
specifier|final
name|long
name|sentBytes
init|=
name|currentBlockGroup
operator|.
name|getNumBytes
argument_list|()
decl_stmt|;
specifier|final
name|long
name|numFullStripes
init|=
name|sentBytes
operator|/
name|numDataBlocks
operator|/
name|cellSize
decl_stmt|;
specifier|final
name|long
name|fullStripeLength
init|=
name|numFullStripes
operator|*
name|numDataBlocks
operator|*
name|cellSize
decl_stmt|;
assert|assert
name|fullStripeLength
operator|<=
name|sentBytes
operator|:
literal|"Full stripe length can't be "
operator|+
literal|"greater than the block group length"
assert|;
name|long
name|ackedLength
init|=
literal|0
decl_stmt|;
comment|// Determine the length contained by at least `numDataBlocks` blocks.
comment|// Since it's sorted, all the blocks after `offset` are at least as long,
comment|// and there are at least `numDataBlocks` at or after `offset`.
name|List
argument_list|<
name|Long
argument_list|>
name|blockLengths
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|getBlockLengths
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|sortedBlockLengths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|blockLengths
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedBlockLengths
argument_list|)
expr_stmt|;
if|if
condition|(
name|numFullStripes
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|offset
init|=
name|sortedBlockLengths
operator|.
name|size
argument_list|()
operator|-
name|numDataBlocks
decl_stmt|;
name|ackedLength
operator|=
name|sortedBlockLengths
operator|.
name|get
argument_list|(
name|offset
argument_list|)
operator|*
name|numDataBlocks
expr_stmt|;
block|}
comment|// If the acked length is less than the expected full stripe length, then
comment|// we're missing a full stripe. Return the acked length.
if|if
condition|(
name|ackedLength
operator|<
name|fullStripeLength
condition|)
block|{
return|return
name|ackedLength
return|;
block|}
comment|// If the expected length is exactly a stripe boundary, then we're also done
if|if
condition|(
name|ackedLength
operator|==
name|sentBytes
condition|)
block|{
return|return
name|ackedLength
return|;
block|}
comment|/*     Otherwise, we're potentially dealing with a partial stripe.     The partial stripe is laid out as follows:        0 or more full data cells, `cellSize` in length.       0 or 1 partial data cells.       0 or more empty data cells.       `numParityBlocks` parity cells, the length of the longest data cell.      If the partial stripe is sufficiently acked, we'll update the ackedLength.     */
comment|// How many full and empty data cells do we expect?
specifier|final
name|int
name|numFullDataCells
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|sentBytes
operator|-
name|fullStripeLength
operator|)
operator|/
name|cellSize
argument_list|)
decl_stmt|;
specifier|final
name|int
name|partialLength
init|=
call|(
name|int
call|)
argument_list|(
name|sentBytes
operator|-
name|fullStripeLength
argument_list|)
operator|%
name|cellSize
decl_stmt|;
specifier|final
name|int
name|numPartialDataCells
init|=
name|partialLength
operator|==
literal|0
condition|?
literal|0
else|:
literal|1
decl_stmt|;
specifier|final
name|int
name|numEmptyDataCells
init|=
name|numDataBlocks
operator|-
name|numFullDataCells
operator|-
name|numPartialDataCells
decl_stmt|;
comment|// Calculate the expected length of the parity blocks.
specifier|final
name|int
name|parityLength
init|=
name|numFullDataCells
operator|>
literal|0
condition|?
name|cellSize
else|:
name|partialLength
decl_stmt|;
specifier|final
name|long
name|fullStripeBlockOffset
init|=
name|fullStripeLength
operator|/
name|numDataBlocks
decl_stmt|;
comment|// Iterate through each type of streamers, checking the expected length.
name|long
index|[]
name|expectedBlockLengths
init|=
operator|new
name|long
index|[
name|numAllBlocks
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
comment|// Full cells
for|for
control|(
init|;
name|idx
operator|<
name|numFullDataCells
condition|;
name|idx
operator|++
control|)
block|{
name|expectedBlockLengths
index|[
name|idx
index|]
operator|=
name|fullStripeBlockOffset
operator|+
name|cellSize
expr_stmt|;
block|}
comment|// Partial cell
for|for
control|(
init|;
name|idx
operator|<
name|numFullDataCells
operator|+
name|numPartialDataCells
condition|;
name|idx
operator|++
control|)
block|{
name|expectedBlockLengths
index|[
name|idx
index|]
operator|=
name|fullStripeBlockOffset
operator|+
name|partialLength
expr_stmt|;
block|}
comment|// Empty cells
for|for
control|(
init|;
name|idx
operator|<
name|numFullDataCells
operator|+
name|numPartialDataCells
operator|+
name|numEmptyDataCells
condition|;
name|idx
operator|++
control|)
block|{
name|expectedBlockLengths
index|[
name|idx
index|]
operator|=
name|fullStripeBlockOffset
expr_stmt|;
block|}
comment|// Parity cells
for|for
control|(
init|;
name|idx
operator|<
name|numAllBlocks
condition|;
name|idx
operator|++
control|)
block|{
name|expectedBlockLengths
index|[
name|idx
index|]
operator|=
name|fullStripeBlockOffset
operator|+
name|parityLength
expr_stmt|;
block|}
comment|// Check expected lengths against actual streamer lengths.
comment|// Update if we have sufficient durability.
name|int
name|numBlocksWithCorrectLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|blockLengths
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
name|expectedBlockLengths
index|[
name|i
index|]
condition|)
block|{
name|numBlocksWithCorrectLength
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numBlocksWithCorrectLength
operator|>=
name|numDataBlocks
condition|)
block|{
name|ackedLength
operator|=
name|sentBytes
expr_stmt|;
block|}
return|return
name|ackedLength
return|;
block|}
DECL|method|stripeDataSize ()
specifier|private
name|int
name|stripeDataSize
parameter_list|()
block|{
return|return
name|numDataBlocks
operator|*
name|cellSize
return|;
block|}
annotation|@
name|Override
DECL|method|hasCapability (String capability)
specifier|public
name|boolean
name|hasCapability
parameter_list|(
name|String
name|capability
parameter_list|)
block|{
comment|// StreamCapabilities like hsync / hflush are not supported yet.
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hflush ()
specifier|public
name|void
name|hflush
parameter_list|()
block|{
comment|// not supported yet
block|}
annotation|@
name|Override
DECL|method|hsync ()
specifier|public
name|void
name|hsync
parameter_list|()
block|{
comment|// not supported yet
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|protected
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
for|for
control|(
name|StripedDataStreamer
name|streamer
range|:
name|streamers
control|)
block|{
name|streamer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|abort ()
name|void
name|abort
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|MultipleIOException
operator|.
name|Builder
name|b
init|=
operator|new
name|MultipleIOException
operator|.
name|Builder
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|StripedDataStreamer
name|streamer
range|:
name|streamers
control|)
block|{
name|streamer
operator|.
name|getLastException
argument_list|()
operator|.
name|set
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Lease timeout of "
operator|+
operator|(
name|dfsClient
operator|.
name|getConf
argument_list|()
operator|.
name|getHdfsTimeout
argument_list|()
operator|/
literal|1000
operator|)
operator|+
literal|" seconds expired."
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|closeThreads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|b
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|dfsClient
operator|.
name|endFileLease
argument_list|(
name|fileId
argument_list|)
expr_stmt|;
specifier|final
name|IOException
name|ioe
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioe
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|isClosed ()
name|boolean
name|isClosed
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|StripedDataStreamer
name|s
range|:
name|streamers
control|)
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|streamerClosed
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|closeThreads (boolean force)
specifier|protected
name|void
name|closeThreads
parameter_list|(
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MultipleIOException
operator|.
name|Builder
name|b
init|=
operator|new
name|MultipleIOException
operator|.
name|Builder
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|StripedDataStreamer
name|streamer
range|:
name|streamers
control|)
block|{
try|try
block|{
name|streamer
operator|.
name|close
argument_list|(
name|force
argument_list|)
expr_stmt|;
name|streamer
operator|.
name|join
argument_list|()
expr_stmt|;
name|streamer
operator|.
name|closeSocket
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|handleStreamerFailure
argument_list|(
literal|"force="
operator|+
name|force
argument_list|,
name|e
argument_list|,
name|streamer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|b
operator|.
name|add
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|streamer
operator|.
name|setSocketToNull
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|setClosed
argument_list|()
expr_stmt|;
block|}
specifier|final
name|IOException
name|ioe
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioe
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
DECL|method|generateParityCellsForLastStripe ()
specifier|private
name|boolean
name|generateParityCellsForLastStripe
parameter_list|()
block|{
specifier|final
name|long
name|currentBlockGroupBytes
init|=
name|currentBlockGroup
operator|==
literal|null
condition|?
literal|0
else|:
name|currentBlockGroup
operator|.
name|getNumBytes
argument_list|()
decl_stmt|;
specifier|final
name|long
name|lastStripeSize
init|=
name|currentBlockGroupBytes
operator|%
name|stripeDataSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastStripeSize
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|long
name|parityCellSize
init|=
name|lastStripeSize
operator|<
name|cellSize
condition|?
name|lastStripeSize
else|:
name|cellSize
decl_stmt|;
specifier|final
name|ByteBuffer
index|[]
name|buffers
init|=
name|cellBuffers
operator|.
name|getBuffers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
comment|// Pad zero bytes to make all cells exactly the size of parityCellSize
comment|// If internal block is smaller than parity block, pad zero bytes.
comment|// Also pad zero bytes to all parity cells
specifier|final
name|int
name|position
init|=
name|buffers
index|[
name|i
index|]
operator|.
name|position
argument_list|()
decl_stmt|;
assert|assert
name|position
operator|<=
name|parityCellSize
operator|:
literal|"If an internal block is smaller"
operator|+
literal|" than parity block, then its last cell should be small than last"
operator|+
literal|" parity cell"
assert|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|parityCellSize
operator|-
name|position
condition|;
name|j
operator|++
control|)
block|{
name|buffers
index|[
name|i
index|]
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
name|buffers
index|[
name|i
index|]
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|writeParityCells ()
name|void
name|writeParityCells
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ByteBuffer
index|[]
name|buffers
init|=
name|cellBuffers
operator|.
name|getBuffers
argument_list|()
decl_stmt|;
comment|// Skips encoding and writing parity cells if there are no healthy parity
comment|// data streamers
if|if
condition|(
operator|!
name|checkAnyParityStreamerIsHealthy
argument_list|()
condition|)
block|{
return|return;
block|}
comment|//encode the data cells
name|encode
argument_list|(
name|encoder
argument_list|,
name|numDataBlocks
argument_list|,
name|buffers
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|numDataBlocks
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
name|writeParity
argument_list|(
name|i
argument_list|,
name|buffers
index|[
name|i
index|]
argument_list|,
name|cellBuffers
operator|.
name|getChecksumArray
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cellBuffers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|checkAnyParityStreamerIsHealthy ()
specifier|private
name|boolean
name|checkAnyParityStreamerIsHealthy
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
name|numDataBlocks
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|streamers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isHealthy
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skips encoding and writing parity cells as there are "
operator|+
literal|"no healthy parity data streamers: "
operator|+
name|streamers
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|writeParity (int index, ByteBuffer buffer, byte[] checksumBuf)
name|void
name|writeParity
parameter_list|(
name|int
name|index
parameter_list|,
name|ByteBuffer
name|buffer
parameter_list|,
name|byte
index|[]
name|checksumBuf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StripedDataStreamer
name|current
init|=
name|setCurrentStreamer
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|buffer
operator|.
name|limit
argument_list|()
decl_stmt|;
specifier|final
name|long
name|oldBytes
init|=
name|current
operator|.
name|getBytesCurBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|isHealthy
argument_list|()
condition|)
block|{
try|try
block|{
name|DataChecksum
name|sum
init|=
name|getDataChecksum
argument_list|()
decl_stmt|;
if|if
condition|(
name|buffer
operator|.
name|isDirect
argument_list|()
condition|)
block|{
name|ByteBuffer
name|directCheckSumBuf
init|=
name|BUFFER_POOL
operator|.
name|getBuffer
argument_list|(
literal|true
argument_list|,
name|checksumBuf
operator|.
name|length
argument_list|)
decl_stmt|;
name|sum
operator|.
name|calculateChunkedSums
argument_list|(
name|buffer
argument_list|,
name|directCheckSumBuf
argument_list|)
expr_stmt|;
name|directCheckSumBuf
operator|.
name|get
argument_list|(
name|checksumBuf
argument_list|)
expr_stmt|;
name|BUFFER_POOL
operator|.
name|putBuffer
argument_list|(
name|directCheckSumBuf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sum
operator|.
name|calculateChunkedSums
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|len
argument_list|,
name|checksumBuf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|+=
name|sum
operator|.
name|getBytesPerChecksum
argument_list|()
control|)
block|{
name|int
name|chunkLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|sum
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|,
name|len
operator|-
name|i
argument_list|)
decl_stmt|;
name|int
name|ckOffset
init|=
name|i
operator|/
name|sum
operator|.
name|getBytesPerChecksum
argument_list|()
operator|*
name|getChecksumSize
argument_list|()
decl_stmt|;
name|super
operator|.
name|writeChunk
argument_list|(
name|buffer
argument_list|,
name|chunkLen
argument_list|,
name|checksumBuf
argument_list|,
name|ckOffset
argument_list|,
name|getChecksumSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleCurrentStreamerFailure
argument_list|(
literal|"oldBytes="
operator|+
name|oldBytes
operator|+
literal|", len="
operator|+
name|len
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|setClosed ()
name|void
name|setClosed
parameter_list|()
block|{
name|super
operator|.
name|setClosed
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
name|getStripedDataStreamer
argument_list|(
name|i
argument_list|)
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|cellBuffers
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|closeImpl ()
specifier|protected
specifier|synchronized
name|void
name|closeImpl
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
specifier|final
name|MultipleIOException
operator|.
name|Builder
name|b
init|=
operator|new
name|MultipleIOException
operator|.
name|Builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|streamers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StripedDataStreamer
name|si
init|=
name|getStripedDataStreamer
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
block|{
name|si
operator|.
name|getLastException
argument_list|()
operator|.
name|check
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|b
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|IOException
name|ioe
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioe
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ioe
throw|;
block|}
return|return;
block|}
try|try
block|{
try|try
block|{
comment|// flush from all upper layers
name|flushBuffer
argument_list|()
expr_stmt|;
comment|// if the last stripe is incomplete, generate and write parity cells
if|if
condition|(
name|generateParityCellsForLastStripe
argument_list|()
condition|)
block|{
name|writeParityCells
argument_list|()
expr_stmt|;
block|}
name|enqueueAllCurrentPackets
argument_list|()
expr_stmt|;
comment|// flush all the data packets
name|flushAllInternals
argument_list|()
expr_stmt|;
comment|// check failures
name|checkStreamerFailures
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StripedDataStreamer
name|s
init|=
name|setCurrentStreamer
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|isHealthy
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|s
operator|.
name|getBytesCurBlock
argument_list|()
operator|>
literal|0
condition|)
block|{
name|setCurrentPacketToEmpty
argument_list|()
expr_stmt|;
block|}
comment|// flush the last "close" packet to Datanode
name|flushInternal
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO for both close and endBlock, we currently do not handle
comment|// failures when sending the last packet. We actually do not need to
comment|// bump GS for this kind of failure. Thus counting the total number
comment|// of failures may be good enough.
block|}
block|}
block|}
block|}
finally|finally
block|{
comment|// Failures may happen when flushing data/parity data out. Exceptions
comment|// may be thrown if more than 3 streamers fail, or updatePipeline RPC
comment|// fails. Streamers may keep waiting for the new block/GS information.
comment|// Thus need to force closing these threads.
name|closeThreads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|TraceScope
name|ignored
init|=
name|dfsClient
operator|.
name|getTracer
argument_list|()
operator|.
name|newScope
argument_list|(
literal|"completeFile"
argument_list|)
init|)
block|{
name|completeFile
argument_list|(
name|currentBlockGroup
argument_list|)
expr_stmt|;
block|}
name|logCorruptBlocks
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClosedChannelException
name|ignored
parameter_list|)
block|{     }
finally|finally
block|{
name|setClosed
argument_list|()
expr_stmt|;
comment|// shutdown executor of flushAll tasks
name|flushAllExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|encoder
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|enqueueAllCurrentPackets ()
name|void
name|enqueueAllCurrentPackets
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|idx
init|=
name|streamers
operator|.
name|indexOf
argument_list|(
name|getCurrentStreamer
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|streamers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StripedDataStreamer
name|si
init|=
name|setCurrentStreamer
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|isHealthy
argument_list|()
operator|&&
name|currentPacket
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|enqueueCurrentPacket
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleCurrentStreamerFailure
argument_list|(
literal|"enqueueAllCurrentPackets, i="
operator|+
name|i
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setCurrentStreamer
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
DECL|method|flushAllInternals ()
name|void
name|flushAllInternals
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|flushAllFuturesMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|future
init|=
literal|null
decl_stmt|;
name|int
name|current
init|=
name|getCurrentIndex
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StripedDataStreamer
name|s
init|=
name|setCurrentStreamer
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|isHealthy
argument_list|()
condition|)
block|{
try|try
block|{
comment|// flush all data to Datanode
specifier|final
name|long
name|toWaitFor
init|=
name|flushInternalWithoutWaitingAck
argument_list|()
decl_stmt|;
name|future
operator|=
name|flushAllExecutorCompletionService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|s
operator|.
name|waitForAckedSeqno
argument_list|(
name|toWaitFor
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|flushAllFuturesMap
operator|.
name|put
argument_list|(
name|future
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleCurrentStreamerFailure
argument_list|(
literal|"flushInternal "
operator|+
name|s
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setCurrentStreamer
argument_list|(
name|current
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|flushAllFuturesMap
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|future
operator|=
name|flushAllExecutorCompletionService
operator|.
name|take
argument_list|()
expr_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
name|DFSUtilClient
operator|.
name|toInterruptedIOException
argument_list|(
literal|"Interrupted during waiting all streamer flush, "
argument_list|,
name|ie
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ee
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught ExecutionException while waiting all streamer flush, "
argument_list|,
name|ee
argument_list|)
expr_stmt|;
name|StripedDataStreamer
name|s
init|=
name|streamers
operator|.
name|get
argument_list|(
name|flushAllFuturesMap
operator|.
name|get
argument_list|(
name|future
argument_list|)
argument_list|)
decl_stmt|;
name|handleStreamerFailure
argument_list|(
literal|"flushInternal "
operator|+
name|s
argument_list|,
operator|(
name|Exception
operator|)
name|ee
operator|.
name|getCause
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|sleep (long ms, String op)
specifier|static
name|void
name|sleep
parameter_list|(
name|long
name|ms
parameter_list|,
name|String
name|op
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|ms
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
name|DFSUtilClient
operator|.
name|toInterruptedIOException
argument_list|(
literal|"Sleep interrupted during "
operator|+
name|op
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
DECL|method|logCorruptBlocks ()
specifier|private
name|void
name|logCorruptBlocks
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|corruptBlockCountMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|bgIndex
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|corruptBlockCount
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Block group<"
argument_list|)
operator|.
name|append
argument_list|(
name|bgIndex
argument_list|)
operator|.
name|append
argument_list|(
literal|"> has "
argument_list|)
operator|.
name|append
argument_list|(
name|corruptBlockCount
argument_list|)
operator|.
name|append
argument_list|(
literal|" corrupt blocks."
argument_list|)
expr_stmt|;
if|if
condition|(
name|corruptBlockCount
operator|==
name|numAllBlocks
operator|-
name|numDataBlocks
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" It's at high risk of losing data."
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getBlock ()
name|ExtendedBlock
name|getBlock
parameter_list|()
block|{
return|return
name|currentBlockGroup
return|;
block|}
block|}
end_class

end_unit

