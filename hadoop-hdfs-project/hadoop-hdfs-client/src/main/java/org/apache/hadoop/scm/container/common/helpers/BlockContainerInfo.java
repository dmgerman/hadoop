begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.scm.container.common.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|EqualsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * Manages Block Information inside a container.  */
end_comment

begin_class
DECL|class|BlockContainerInfo
specifier|public
class|class
name|BlockContainerInfo
extends|extends
name|ContainerInfo
implements|implements
name|Comparator
argument_list|<
name|BlockContainerInfo
argument_list|>
implements|,
name|Comparable
argument_list|<
name|BlockContainerInfo
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|allocated
specifier|private
name|long
name|allocated
decl_stmt|;
DECL|field|lastUsed
specifier|private
name|long
name|lastUsed
decl_stmt|;
comment|// last used time
DECL|method|BlockContainerInfo (ContainerInfo container, long used)
specifier|public
name|BlockContainerInfo
parameter_list|(
name|ContainerInfo
name|container
parameter_list|,
name|long
name|used
parameter_list|)
block|{
name|super
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|this
operator|.
name|allocated
operator|=
name|used
expr_stmt|;
name|this
operator|.
name|lastUsed
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
DECL|method|addAllocated (long size)
specifier|public
name|long
name|addAllocated
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|allocated
operator|+=
name|size
expr_stmt|;
return|return
name|allocated
return|;
block|}
DECL|method|subtractAllocated (long size)
specifier|public
name|long
name|subtractAllocated
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|allocated
operator|-=
name|size
expr_stmt|;
return|return
name|allocated
return|;
block|}
DECL|method|getAllocated ()
specifier|public
name|long
name|getAllocated
parameter_list|()
block|{
return|return
name|this
operator|.
name|allocated
return|;
block|}
comment|/**    * Gets the last used time from SCM's perspective.    * @return time in milliseconds.    */
DECL|method|getLastUsed ()
specifier|public
name|long
name|getLastUsed
parameter_list|()
block|{
return|return
name|lastUsed
return|;
block|}
comment|/**    * Sets the last used time from SCM's perspective.    * @param lastUsed time in milliseconds.    */
DECL|method|setLastUsed (long lastUsed)
specifier|public
name|void
name|setLastUsed
parameter_list|(
name|long
name|lastUsed
parameter_list|)
block|{
name|this
operator|.
name|lastUsed
operator|=
name|lastUsed
expr_stmt|;
block|}
comment|/**    * Compares its two arguments for order.  Returns a negative integer, zero, or    * a positive integer as the first argument is less than, equal to, or greater    * than the second.<p>    *    * @param o1 the first object to be compared.    * @param o2 the second object to be compared.    * @return a negative integer, zero, or a positive integer as the first    * argument is less than, equal to, or greater than the second.    * @throws NullPointerException if an argument is null and this comparator    *                              does not permit null arguments    * @throws ClassCastException   if the arguments' types prevent them from    *                              being compared by this comparator.    */
annotation|@
name|Override
DECL|method|compare (BlockContainerInfo o1, BlockContainerInfo o2)
specifier|public
name|int
name|compare
parameter_list|(
name|BlockContainerInfo
name|o1
parameter_list|,
name|BlockContainerInfo
name|o2
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getLastUsed
argument_list|()
argument_list|,
name|o2
operator|.
name|getLastUsed
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|new
name|EqualsBuilder
argument_list|()
operator|.
name|appendSuper
argument_list|(
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
argument_list|)
operator|.
name|isEquals
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|(
literal|17
argument_list|,
literal|2017
argument_list|)
operator|.
name|appendSuper
argument_list|(
name|super
operator|.
name|hashCode
argument_list|()
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"BlockContainerInfo{"
operator|+
literal|"allocated="
operator|+
name|allocated
operator|+
literal|", lastUsed="
operator|+
name|lastUsed
operator|+
literal|", ContainerInfo="
operator|+
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|'}'
return|;
block|}
comment|/**    * Compares this object with the specified object for order.  Returns a    * negative integer, zero, or a positive integer as this object is less than,    * equal to, or greater than the specified object.    *    * @param o the object to be compared.    * @return a negative integer, zero, or a positive integer as this object is    * less than, equal to, or greater than the specified object.    * @throws NullPointerException if the specified object is null    * @throws ClassCastException   if the specified object's type prevents it    *                              from being compared to this object.    */
annotation|@
name|Override
DECL|method|compareTo (BlockContainerInfo o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|BlockContainerInfo
name|o
parameter_list|)
block|{
return|return
name|this
operator|.
name|compare
argument_list|(
name|this
argument_list|,
name|o
argument_list|)
return|;
block|}
DECL|method|canAllocate (long size, long containerSize)
specifier|public
name|boolean
name|canAllocate
parameter_list|(
name|long
name|size
parameter_list|,
name|long
name|containerSize
parameter_list|)
block|{
comment|//TODO: move container size inside Container Info
return|return
operator|(
operator|(
name|getState
argument_list|()
operator|==
name|OzoneProtos
operator|.
name|LifeCycleState
operator|.
name|ALLOCATED
operator|||
name|getState
argument_list|()
operator|==
name|OzoneProtos
operator|.
name|LifeCycleState
operator|.
name|OPEN
operator|)
operator|&&
operator|(
name|getAllocated
argument_list|()
operator|+
name|size
operator|<=
name|containerSize
operator|)
operator|)
return|;
block|}
block|}
end_class

end_unit

