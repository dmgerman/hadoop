begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_comment
comment|/**  * This class represents to  the difference between two snapshots of  * the same directory, or the difference between a snapshot of the directory and  * its current state. This Class serves the purpose of collecting diff entries  * in 3 lists : created, deleted and modified list combined size of which is set  * by dfs.snapshotdiff-report.limit over one rpc call to the namenode.  */
end_comment

begin_class
DECL|class|SnapshotDiffReportListing
specifier|public
class|class
name|SnapshotDiffReportListing
block|{
comment|/**    * Representing the full path and diff type of a file/directory where changes    * have happened.    */
DECL|class|DiffReportListingEntry
specifier|public
specifier|static
class|class
name|DiffReportListingEntry
block|{
comment|/**      * The type of the difference.      */
DECL|field|fileId
specifier|private
specifier|final
name|long
name|fileId
decl_stmt|;
DECL|field|dirId
specifier|private
specifier|final
name|long
name|dirId
decl_stmt|;
DECL|field|isReference
specifier|private
specifier|final
name|boolean
name|isReference
decl_stmt|;
comment|/**      * The relative path (related to the snapshot root) of 1) the file/directory      * where changes have happened, or 2) the source file/dir of a rename op.      * or 3) target file/dir for a rename op.      */
DECL|field|sourcePath
specifier|private
specifier|final
name|byte
index|[]
index|[]
name|sourcePath
decl_stmt|;
DECL|field|targetPath
specifier|private
specifier|final
name|byte
index|[]
index|[]
name|targetPath
decl_stmt|;
DECL|method|DiffReportListingEntry (long dirId, long fileId, byte[][] sourcePath, boolean isReference, byte[][] targetPath)
specifier|public
name|DiffReportListingEntry
parameter_list|(
name|long
name|dirId
parameter_list|,
name|long
name|fileId
parameter_list|,
name|byte
index|[]
index|[]
name|sourcePath
parameter_list|,
name|boolean
name|isReference
parameter_list|,
name|byte
index|[]
index|[]
name|targetPath
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
name|this
operator|.
name|dirId
operator|=
name|dirId
expr_stmt|;
name|this
operator|.
name|fileId
operator|=
name|fileId
expr_stmt|;
name|this
operator|.
name|sourcePath
operator|=
name|sourcePath
expr_stmt|;
name|this
operator|.
name|isReference
operator|=
name|isReference
expr_stmt|;
name|this
operator|.
name|targetPath
operator|=
name|targetPath
expr_stmt|;
block|}
DECL|method|DiffReportListingEntry (long dirId, long fileId, byte[] sourcePath, boolean isReference, byte[] targetpath)
specifier|public
name|DiffReportListingEntry
parameter_list|(
name|long
name|dirId
parameter_list|,
name|long
name|fileId
parameter_list|,
name|byte
index|[]
name|sourcePath
parameter_list|,
name|boolean
name|isReference
parameter_list|,
name|byte
index|[]
name|targetpath
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
name|this
operator|.
name|dirId
operator|=
name|dirId
expr_stmt|;
name|this
operator|.
name|fileId
operator|=
name|fileId
expr_stmt|;
name|this
operator|.
name|sourcePath
operator|=
name|DFSUtilClient
operator|.
name|bytes2byteArray
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
name|this
operator|.
name|isReference
operator|=
name|isReference
expr_stmt|;
name|this
operator|.
name|targetPath
operator|=
name|targetpath
operator|==
literal|null
condition|?
literal|null
else|:
name|DFSUtilClient
operator|.
name|bytes2byteArray
argument_list|(
name|targetpath
argument_list|)
expr_stmt|;
block|}
DECL|method|getDirId ()
specifier|public
name|long
name|getDirId
parameter_list|()
block|{
return|return
name|dirId
return|;
block|}
DECL|method|getFileId ()
specifier|public
name|long
name|getFileId
parameter_list|()
block|{
return|return
name|fileId
return|;
block|}
DECL|method|getSourcePath ()
specifier|public
name|byte
index|[]
index|[]
name|getSourcePath
parameter_list|()
block|{
return|return
name|sourcePath
return|;
block|}
DECL|method|getTargetPath ()
specifier|public
name|byte
index|[]
index|[]
name|getTargetPath
parameter_list|()
block|{
return|return
name|targetPath
return|;
block|}
DECL|method|isReference ()
specifier|public
name|boolean
name|isReference
parameter_list|()
block|{
return|return
name|isReference
return|;
block|}
block|}
comment|/** store the starting path to process across RPC's for snapshot diff. */
DECL|field|lastPath
specifier|private
specifier|final
name|byte
index|[]
name|lastPath
decl_stmt|;
DECL|field|lastIndex
specifier|private
specifier|final
name|int
name|lastIndex
decl_stmt|;
DECL|field|isFromEarlier
specifier|private
specifier|final
name|boolean
name|isFromEarlier
decl_stmt|;
comment|/** list of diff. */
DECL|field|modifyList
specifier|private
specifier|final
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|modifyList
decl_stmt|;
DECL|field|createList
specifier|private
specifier|final
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|createList
decl_stmt|;
DECL|field|deleteList
specifier|private
specifier|final
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|deleteList
decl_stmt|;
DECL|method|SnapshotDiffReportListing ()
specifier|public
name|SnapshotDiffReportListing
parameter_list|()
block|{
name|this
operator|.
name|modifyList
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|this
operator|.
name|createList
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|this
operator|.
name|deleteList
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|this
operator|.
name|lastPath
operator|=
name|DFSUtilClient
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|isFromEarlier
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|SnapshotDiffReportListing (byte[] startPath, List<DiffReportListingEntry> modifiedEntryList, List<DiffReportListingEntry> createdEntryList, List<DiffReportListingEntry> deletedEntryList, int index, boolean isFromEarlier)
specifier|public
name|SnapshotDiffReportListing
parameter_list|(
name|byte
index|[]
name|startPath
parameter_list|,
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|modifiedEntryList
parameter_list|,
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|createdEntryList
parameter_list|,
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|deletedEntryList
parameter_list|,
name|int
name|index
parameter_list|,
name|boolean
name|isFromEarlier
parameter_list|)
block|{
name|this
operator|.
name|modifyList
operator|=
name|modifiedEntryList
expr_stmt|;
name|this
operator|.
name|createList
operator|=
name|createdEntryList
expr_stmt|;
name|this
operator|.
name|deleteList
operator|=
name|deletedEntryList
expr_stmt|;
name|this
operator|.
name|lastPath
operator|=
name|startPath
operator|!=
literal|null
condition|?
name|startPath
else|:
name|DFSUtilClient
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastIndex
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|isFromEarlier
operator|=
name|isFromEarlier
expr_stmt|;
block|}
DECL|method|getModifyList ()
specifier|public
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|getModifyList
parameter_list|()
block|{
return|return
name|modifyList
return|;
block|}
DECL|method|getCreateList ()
specifier|public
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|getCreateList
parameter_list|()
block|{
return|return
name|createList
return|;
block|}
DECL|method|getDeleteList ()
specifier|public
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|getDeleteList
parameter_list|()
block|{
return|return
name|deleteList
return|;
block|}
comment|/**    * @return {@link #lastPath}    */
DECL|method|getLastPath ()
specifier|public
name|byte
index|[]
name|getLastPath
parameter_list|()
block|{
return|return
name|lastPath
return|;
block|}
DECL|method|getLastIndex ()
specifier|public
name|int
name|getLastIndex
parameter_list|()
block|{
return|return
name|lastIndex
return|;
block|}
DECL|method|getIsFromEarlier ()
specifier|public
name|boolean
name|getIsFromEarlier
parameter_list|()
block|{
return|return
name|isFromEarlier
return|;
block|}
block|}
end_class

end_unit

