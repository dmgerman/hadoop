begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.scm.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|protocol
operator|.
name|StorageContainerLocationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerLocationProtocolProtos
operator|.
name|CloseContainerRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerLocationProtocolProtos
operator|.
name|ContainerRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerLocationProtocolProtos
operator|.
name|ContainerResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerLocationProtocolProtos
operator|.
name|GetContainerRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerLocationProtocolProtos
operator|.
name|GetContainerResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerLocationProtocolProtos
operator|.
name|DeleteContainerRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerLocationProtocolProtos
operator|.
name|ListContainerRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerLocationProtocolProtos
operator|.
name|ListContainerResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerLocationProtocolProtos
operator|.
name|NodeQueryRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerLocationProtocolProtos
operator|.
name|NodeQueryResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerLocationProtocolProtos
operator|.
name|NotifyObjectCreationStageRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerLocationProtocolProtos
operator|.
name|PipelineRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerLocationProtocolProtos
operator|.
name|PipelineResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This class is the client-side translator to translate the requests made on  * the {@link StorageContainerLocationProtocol} interface to the RPC server  * implementing {@link StorageContainerLocationProtocolPB}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StorageContainerLocationProtocolClientSideTranslatorPB
specifier|public
specifier|final
class|class
name|StorageContainerLocationProtocolClientSideTranslatorPB
implements|implements
name|StorageContainerLocationProtocol
implements|,
name|ProtocolTranslator
implements|,
name|Closeable
block|{
comment|/**    * RpcController is not used and hence is set to null.    */
DECL|field|NULL_RPC_CONTROLLER
specifier|private
specifier|static
specifier|final
name|RpcController
name|NULL_RPC_CONTROLLER
init|=
literal|null
decl_stmt|;
DECL|field|rpcProxy
specifier|private
specifier|final
name|StorageContainerLocationProtocolPB
name|rpcProxy
decl_stmt|;
comment|/**    * Creates a new StorageContainerLocationProtocolClientSideTranslatorPB.    *    * @param rpcProxy {@link StorageContainerLocationProtocolPB} RPC proxy    */
DECL|method|StorageContainerLocationProtocolClientSideTranslatorPB ( StorageContainerLocationProtocolPB rpcProxy)
specifier|public
name|StorageContainerLocationProtocolClientSideTranslatorPB
parameter_list|(
name|StorageContainerLocationProtocolPB
name|rpcProxy
parameter_list|)
block|{
name|this
operator|.
name|rpcProxy
operator|=
name|rpcProxy
expr_stmt|;
block|}
comment|/**    * Asks SCM where a container should be allocated. SCM responds with the set    * of datanodes that should be used creating this container. Ozone/SCM only    * supports replication factor of either 1 or 3.    * @param type - Replication Type    * @param factor - Replication Count    * @param containerName - Name    * @return    * @throws IOException    */
annotation|@
name|Override
DECL|method|allocateContainer (OzoneProtos.ReplicationType type, OzoneProtos.ReplicationFactor factor, String containerName)
specifier|public
name|Pipeline
name|allocateContainer
parameter_list|(
name|OzoneProtos
operator|.
name|ReplicationType
name|type
parameter_list|,
name|OzoneProtos
operator|.
name|ReplicationFactor
name|factor
parameter_list|,
name|String
name|containerName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containerName
argument_list|,
literal|"Container Name cannot be Null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|containerName
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Container name cannot"
operator|+
literal|" be empty"
argument_list|)
expr_stmt|;
name|ContainerRequestProto
name|request
init|=
name|ContainerRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|containerName
argument_list|)
operator|.
name|setReplicationFactor
argument_list|(
name|factor
argument_list|)
operator|.
name|setReplicationType
argument_list|(
name|type
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ContainerResponseProto
name|response
decl_stmt|;
try|try
block|{
name|response
operator|=
name|rpcProxy
operator|.
name|allocateContainer
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|response
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|ContainerResponseProto
operator|.
name|Error
operator|.
name|success
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|response
operator|.
name|hasErrorMessage
argument_list|()
condition|?
name|response
operator|.
name|getErrorMessage
argument_list|()
else|:
literal|"Allocate container failed."
argument_list|)
throw|;
block|}
return|return
name|Pipeline
operator|.
name|getFromProtoBuf
argument_list|(
name|response
operator|.
name|getPipeline
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getContainer (String containerName)
specifier|public
name|Pipeline
name|getContainer
parameter_list|(
name|String
name|containerName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containerName
argument_list|,
literal|"Container Name cannot be Null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|containerName
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Container name cannot be empty"
argument_list|)
expr_stmt|;
name|GetContainerRequestProto
name|request
init|=
name|GetContainerRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|containerName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|GetContainerResponseProto
name|response
init|=
name|rpcProxy
operator|.
name|getContainer
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|Pipeline
operator|.
name|getFromProtoBuf
argument_list|(
name|response
operator|.
name|getPipeline
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|listContainer (String startName, String prefixName, int count)
specifier|public
name|List
argument_list|<
name|ContainerInfo
argument_list|>
name|listContainer
parameter_list|(
name|String
name|startName
parameter_list|,
name|String
name|prefixName
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|ListContainerRequestProto
operator|.
name|Builder
name|builder
init|=
name|ListContainerRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefixName
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPrefixName
argument_list|(
name|prefixName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|startName
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setStartName
argument_list|(
name|startName
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setCount
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|ListContainerRequestProto
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|ListContainerResponseProto
name|response
init|=
name|rpcProxy
operator|.
name|listContainer
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerInfo
argument_list|>
name|containerList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|OzoneProtos
operator|.
name|SCMContainerInfo
name|containerInfoProto
range|:
name|response
operator|.
name|getContainersList
argument_list|()
control|)
block|{
name|containerList
operator|.
name|add
argument_list|(
name|ContainerInfo
operator|.
name|fromProtobuf
argument_list|(
name|containerInfoProto
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|containerList
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Ask SCM to delete a container by name. SCM will remove    * the container mapping in its database.    *    * @param containerName    * @throws IOException    */
annotation|@
name|Override
DECL|method|deleteContainer (String containerName)
specifier|public
name|void
name|deleteContainer
parameter_list|(
name|String
name|containerName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|containerName
argument_list|)
argument_list|,
literal|"Container name cannot be null or empty"
argument_list|)
expr_stmt|;
name|DeleteContainerRequestProto
name|request
init|=
name|DeleteContainerRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|containerName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|rpcProxy
operator|.
name|deleteContainer
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Queries a list of Node Statuses.    *    * @param nodeStatuses    * @return List of Datanodes.    */
annotation|@
name|Override
DECL|method|queryNode (EnumSet<OzoneProtos.NodeState> nodeStatuses, OzoneProtos.QueryScope queryScope, String poolName)
specifier|public
name|OzoneProtos
operator|.
name|NodePool
name|queryNode
parameter_list|(
name|EnumSet
argument_list|<
name|OzoneProtos
operator|.
name|NodeState
argument_list|>
name|nodeStatuses
parameter_list|,
name|OzoneProtos
operator|.
name|QueryScope
name|queryScope
parameter_list|,
name|String
name|poolName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO : We support only cluster wide query right now. So ignoring checking
comment|// queryScope and poolName
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|nodeStatuses
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|nodeStatuses
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|NodeQueryRequestProto
name|request
init|=
name|NodeQueryRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllQuery
argument_list|(
name|nodeStatuses
argument_list|)
operator|.
name|setScope
argument_list|(
name|queryScope
argument_list|)
operator|.
name|setPoolName
argument_list|(
name|poolName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|NodeQueryResponseProto
name|response
init|=
name|rpcProxy
operator|.
name|queryNode
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getDatanodes
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Notify from client that creates object on datanodes.    * @param type object type    * @param name object name    * @param stage object creation stage : begin/complete    */
annotation|@
name|Override
DECL|method|notifyObjectCreationStage ( NotifyObjectCreationStageRequestProto.Type type, String name, NotifyObjectCreationStageRequestProto.Stage stage)
specifier|public
name|void
name|notifyObjectCreationStage
parameter_list|(
name|NotifyObjectCreationStageRequestProto
operator|.
name|Type
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|NotifyObjectCreationStageRequestProto
operator|.
name|Stage
name|stage
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|name
argument_list|)
argument_list|,
literal|"Object name cannot be null or empty"
argument_list|)
expr_stmt|;
name|NotifyObjectCreationStageRequestProto
name|request
init|=
name|NotifyObjectCreationStageRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|type
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
operator|.
name|setStage
argument_list|(
name|stage
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|rpcProxy
operator|.
name|notifyObjectCreationStage
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates a replication pipeline of a specified type.    *    * @param replicationType - replication type    * @param factor - factor 1 or 3    * @param nodePool - optional machine list to build a pipeline.    * @throws IOException    */
annotation|@
name|Override
DECL|method|createReplicationPipeline (OzoneProtos.ReplicationType replicationType, OzoneProtos.ReplicationFactor factor, OzoneProtos .NodePool nodePool)
specifier|public
name|Pipeline
name|createReplicationPipeline
parameter_list|(
name|OzoneProtos
operator|.
name|ReplicationType
name|replicationType
parameter_list|,
name|OzoneProtos
operator|.
name|ReplicationFactor
name|factor
parameter_list|,
name|OzoneProtos
operator|.
name|NodePool
name|nodePool
parameter_list|)
throws|throws
name|IOException
block|{
name|PipelineRequestProto
name|request
init|=
name|PipelineRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNodePool
argument_list|(
name|nodePool
argument_list|)
operator|.
name|setReplicationFactor
argument_list|(
name|factor
argument_list|)
operator|.
name|setReplicationType
argument_list|(
name|replicationType
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|PipelineResponseProto
name|response
init|=
name|rpcProxy
operator|.
name|allocatePipeline
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getErrorCode
argument_list|()
operator|==
name|PipelineResponseProto
operator|.
name|Error
operator|.
name|success
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|response
operator|.
name|hasPipeline
argument_list|()
argument_list|,
literal|"With success, "
operator|+
literal|"must come a pipeline"
argument_list|)
expr_stmt|;
return|return
name|Pipeline
operator|.
name|getFromProtoBuf
argument_list|(
name|response
operator|.
name|getPipeline
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|errorMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"create replication pipeline "
operator|+
literal|"failed. code : %s Message: %s"
argument_list|,
name|response
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|response
operator|.
name|hasErrorMessage
argument_list|()
condition|?
name|response
operator|.
name|getErrorMessage
argument_list|()
else|:
literal|""
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|closeContainer (String containerName)
specifier|public
name|void
name|closeContainer
parameter_list|(
name|String
name|containerName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|containerName
argument_list|)
argument_list|,
literal|"Container name cannot be null or empty"
argument_list|)
expr_stmt|;
name|CloseContainerRequestProto
name|request
init|=
name|CloseContainerRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|containerName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|rpcProxy
operator|.
name|closeContainer
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getUnderlyingProxyObject ()
specifier|public
name|Object
name|getUnderlyingProxyObject
parameter_list|()
block|{
return|return
name|rpcProxy
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|rpcProxy
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

