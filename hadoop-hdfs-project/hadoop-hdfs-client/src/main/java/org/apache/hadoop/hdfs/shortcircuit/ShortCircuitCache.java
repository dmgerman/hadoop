begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.shortcircuit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|MappedByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|LinkedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|mutable
operator|.
name|MutableBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ExtendedBlockId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|impl
operator|.
name|DfsClientConf
operator|.
name|ShortCircuitConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|net
operator|.
name|DomainPeer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|Sender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|ReleaseShortCircuitAccessResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelperClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
operator|.
name|ShortCircuitShm
operator|.
name|Slot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|IOUtilsClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetriableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|DomainSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|DomainSocketWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Waitable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The ShortCircuitCache tracks things which the client needs to access  * HDFS block files via short-circuit.  *  * These things include: memory-mapped regions, file descriptors, and shared  * memory areas for communicating with the DataNode.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ShortCircuitCache
specifier|public
class|class
name|ShortCircuitCache
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ShortCircuitCache
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Expiry thread which makes sure that the file descriptors get closed    * after a while.    */
DECL|class|CacheCleaner
specifier|private
class|class
name|CacheCleaner
implements|implements
name|Runnable
implements|,
name|Closeable
block|{
DECL|field|future
specifier|private
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|future
decl_stmt|;
comment|/**      * Run the CacheCleaner thread.      *      * Whenever a thread requests a ShortCircuitReplica object, we will make      * sure it gets one.  That ShortCircuitReplica object can then be re-used      * when another thread requests a ShortCircuitReplica object for the same      * block.  So in that sense, there is no maximum size to the cache.      *      * However, when a ShortCircuitReplica object is unreferenced by the      * thread(s) that are using it, it becomes evictable.  There are two      * separate eviction lists-- one for mmaped objects, and another for      * non-mmaped objects.  We do this in order to avoid having the regular      * files kick the mmaped files out of the cache too quickly.  Reusing      * an already-existing mmap gives a huge performance boost, since the      * page table entries don't have to be re-populated.  Both the mmap      * and non-mmap evictable lists have maximum sizes and maximum lifespans.      */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ShortCircuitCache
operator|.
name|this
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|ShortCircuitCache
operator|.
name|this
operator|.
name|closed
condition|)
return|return;
name|long
name|curMs
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}: cache cleaner running at {}"
argument_list|,
name|this
argument_list|,
name|curMs
argument_list|)
expr_stmt|;
name|int
name|numDemoted
init|=
name|demoteOldEvictableMmaped
argument_list|(
name|curMs
argument_list|)
decl_stmt|;
name|int
name|numPurged
init|=
literal|0
decl_stmt|;
name|Long
name|evictionTimeNs
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Object
name|eldestKey
decl_stmt|;
try|try
block|{
name|eldestKey
operator|=
name|evictable
operator|.
name|firstKey
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
break|break;
block|}
name|evictionTimeNs
operator|=
operator|(
name|Long
operator|)
name|eldestKey
expr_stmt|;
name|long
name|evictionTimeMs
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|evictionTimeNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|evictionTimeMs
operator|+
name|maxNonMmappedEvictableLifespanMs
operator|>=
name|curMs
condition|)
break|break;
name|ShortCircuitReplica
name|replica
init|=
operator|(
name|ShortCircuitReplica
operator|)
name|evictable
operator|.
name|get
argument_list|(
name|eldestKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"CacheCleaner: purging "
operator|+
name|replica
operator|+
literal|": "
operator|+
name|StringUtils
operator|.
name|getStackTrace
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|purge
argument_list|(
name|replica
argument_list|)
expr_stmt|;
name|numPurged
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}: finishing cache cleaner run started at {}. Demoted {} "
operator|+
literal|"mmapped replicas; purged {} replicas."
argument_list|,
name|this
argument_list|,
name|curMs
argument_list|,
name|numDemoted
argument_list|,
name|numPurged
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ShortCircuitCache
operator|.
name|this
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setFuture (ScheduledFuture<?> future)
specifier|public
name|void
name|setFuture
parameter_list|(
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|future
parameter_list|)
block|{
name|this
operator|.
name|future
operator|=
name|future
expr_stmt|;
block|}
comment|/**      * Get the rate at which this cleaner thread should be scheduled.      *      * We do this by taking the minimum expiration time and dividing by 4.      *      * @return the rate in milliseconds at which this thread should be      *         scheduled.      */
DECL|method|getRateInMs ()
specifier|public
name|long
name|getRateInMs
parameter_list|()
block|{
name|long
name|minLifespanMs
init|=
name|Math
operator|.
name|min
argument_list|(
name|maxNonMmappedEvictableLifespanMs
argument_list|,
name|maxEvictableMmapedLifespanMs
argument_list|)
decl_stmt|;
name|long
name|sampleTimeMs
init|=
name|minLifespanMs
operator|/
literal|4
decl_stmt|;
return|return
operator|(
name|sampleTimeMs
operator|<
literal|1
operator|)
condition|?
literal|1
else|:
name|sampleTimeMs
return|;
block|}
block|}
comment|/**    * A task which asks the DataNode to release a short-circuit shared memory    * slot.  If successful, this will tell the DataNode to stop monitoring    * changes to the mlock status of the replica associated with the slot.    * It will also allow us (the client) to re-use this slot for another    * replica.  If we can't communicate with the DataNode for some reason,    * we tear down the shared memory segment to avoid being in an inconsistent    * state.    */
DECL|class|SlotReleaser
specifier|private
class|class
name|SlotReleaser
implements|implements
name|Runnable
block|{
comment|/**      * The slot that we need to release.      */
DECL|field|slot
specifier|private
specifier|final
name|Slot
name|slot
decl_stmt|;
DECL|method|SlotReleaser (Slot slot)
name|SlotReleaser
parameter_list|(
name|Slot
name|slot
parameter_list|)
block|{
name|this
operator|.
name|slot
operator|=
name|slot
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"{}: about to release {}"
argument_list|,
name|ShortCircuitCache
operator|.
name|this
argument_list|,
name|slot
argument_list|)
expr_stmt|;
specifier|final
name|DfsClientShm
name|shm
init|=
operator|(
name|DfsClientShm
operator|)
name|slot
operator|.
name|getShm
argument_list|()
decl_stmt|;
specifier|final
name|DomainSocket
name|shmSock
init|=
name|shm
operator|.
name|getPeer
argument_list|()
operator|.
name|getDomainSocket
argument_list|()
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|shmSock
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
init|(
name|DomainSocket
name|sock
init|=
name|DomainSocket
operator|.
name|connect
argument_list|(
name|path
argument_list|)
init|;
name|DataOutputStream
name|out
operator|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|sock
operator|.
name|getOutputStream
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
operator|new
name|Sender
argument_list|(
name|out
argument_list|)
operator|.
name|releaseShortCircuitFds
argument_list|(
name|slot
operator|.
name|getSlotId
argument_list|()
argument_list|)
expr_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|sock
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|ReleaseShortCircuitAccessResponseProto
name|resp
init|=
name|ReleaseShortCircuitAccessResponseProto
operator|.
name|parseFrom
argument_list|(
name|PBHelperClient
operator|.
name|vintPrefixed
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|SUCCESS
condition|)
block|{
name|String
name|error
init|=
name|resp
operator|.
name|hasError
argument_list|()
condition|?
name|resp
operator|.
name|getError
argument_list|()
else|:
literal|"(unknown)"
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|error
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"{}: released {}"
argument_list|,
name|this
argument_list|,
name|slot
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ShortCircuitCache
operator|.
name|this
operator|+
literal|": failed to release "
operator|+
literal|"short-circuit shared memory slot "
operator|+
name|slot
operator|+
literal|" by sending "
operator|+
literal|"ReleaseShortCircuitAccessRequestProto to "
operator|+
name|path
operator|+
literal|".  Closing shared memory segment."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|shmManager
operator|.
name|freeSlot
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shm
operator|.
name|getEndpointShmManager
argument_list|()
operator|.
name|shutdown
argument_list|(
name|shm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|interface|ShortCircuitReplicaCreator
specifier|public
interface|interface
name|ShortCircuitReplicaCreator
block|{
comment|/**      * Attempt to create a ShortCircuitReplica object.      *      * This callback will be made without holding any locks.      *      * @return a non-null ShortCircuitReplicaInfo object.      */
DECL|method|createShortCircuitReplicaInfo ()
name|ShortCircuitReplicaInfo
name|createShortCircuitReplicaInfo
parameter_list|()
function_decl|;
block|}
comment|/**    * Lock protecting the cache.    */
DECL|field|lock
specifier|private
specifier|final
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
comment|/**    * The executor service that runs the cacheCleaner.    */
DECL|field|cleanerExecutor
specifier|private
specifier|final
name|ScheduledThreadPoolExecutor
name|cleanerExecutor
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"ShortCircuitCache_Cleaner"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * The executor service that runs the cacheCleaner.    */
DECL|field|releaserExecutor
specifier|private
specifier|final
name|ScheduledThreadPoolExecutor
name|releaserExecutor
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"ShortCircuitCache_SlotReleaser"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * A map containing all ShortCircuitReplicaInfo objects, organized by Key.    * ShortCircuitReplicaInfo objects may contain a replica, or an InvalidToken    * exception.    */
specifier|private
specifier|final
name|HashMap
argument_list|<
name|ExtendedBlockId
argument_list|,
name|Waitable
argument_list|<
name|ShortCircuitReplicaInfo
argument_list|>
argument_list|>
DECL|field|replicaInfoMap
name|replicaInfoMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * The CacheCleaner.  We don't create this and schedule it until it becomes    * necessary.    */
DECL|field|cacheCleaner
specifier|private
name|CacheCleaner
name|cacheCleaner
decl_stmt|;
comment|/**    * LinkedMap of evictable elements.    *    * Maps (unique) insertion time in nanoseconds to the element.    */
DECL|field|evictable
specifier|private
specifier|final
name|LinkedMap
name|evictable
init|=
operator|new
name|LinkedMap
argument_list|()
decl_stmt|;
comment|/**    * Maximum total size of the cache, including both mmapped and    * no$-mmapped elements.    */
DECL|field|maxTotalSize
specifier|private
name|int
name|maxTotalSize
decl_stmt|;
comment|/**    * Non-mmaped elements older than this will be closed.    */
DECL|field|maxNonMmappedEvictableLifespanMs
specifier|private
name|long
name|maxNonMmappedEvictableLifespanMs
decl_stmt|;
comment|/**    * LinkedMap of mmaped evictable elements.    *    * Maps (unique) insertion time in nanoseconds to the element.    */
DECL|field|evictableMmapped
specifier|private
specifier|final
name|LinkedMap
name|evictableMmapped
init|=
operator|new
name|LinkedMap
argument_list|()
decl_stmt|;
comment|/**    * Maximum number of mmaped evictable elements.    */
DECL|field|maxEvictableMmapedSize
specifier|private
name|int
name|maxEvictableMmapedSize
decl_stmt|;
comment|/**    * Mmaped elements older than this will be closed.    */
DECL|field|maxEvictableMmapedLifespanMs
specifier|private
specifier|final
name|long
name|maxEvictableMmapedLifespanMs
decl_stmt|;
comment|/**    * The minimum number of milliseconds we'll wait after an unsuccessful    * mmap attempt before trying again.    */
DECL|field|mmapRetryTimeoutMs
specifier|private
specifier|final
name|long
name|mmapRetryTimeoutMs
decl_stmt|;
comment|/**    * How long we will keep replicas in the cache before declaring them    * to be stale.    */
DECL|field|staleThresholdMs
specifier|private
specifier|final
name|long
name|staleThresholdMs
decl_stmt|;
comment|/**    * True if the ShortCircuitCache is closed.    */
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
comment|/**    * Number of existing mmaps associated with this cache.    */
DECL|field|outstandingMmapCount
specifier|private
name|int
name|outstandingMmapCount
init|=
literal|0
decl_stmt|;
comment|/**    * Manages short-circuit shared memory segments for the client.    */
DECL|field|shmManager
specifier|private
specifier|final
name|DfsClientShmManager
name|shmManager
decl_stmt|;
DECL|method|fromConf (ShortCircuitConf conf)
specifier|public
specifier|static
name|ShortCircuitCache
name|fromConf
parameter_list|(
name|ShortCircuitConf
name|conf
parameter_list|)
block|{
return|return
operator|new
name|ShortCircuitCache
argument_list|(
name|conf
operator|.
name|getShortCircuitStreamsCacheSize
argument_list|()
argument_list|,
name|conf
operator|.
name|getShortCircuitStreamsCacheExpiryMs
argument_list|()
argument_list|,
name|conf
operator|.
name|getShortCircuitMmapCacheSize
argument_list|()
argument_list|,
name|conf
operator|.
name|getShortCircuitMmapCacheExpiryMs
argument_list|()
argument_list|,
name|conf
operator|.
name|getShortCircuitMmapCacheRetryTimeout
argument_list|()
argument_list|,
name|conf
operator|.
name|getShortCircuitCacheStaleThresholdMs
argument_list|()
argument_list|,
name|conf
operator|.
name|getShortCircuitSharedMemoryWatcherInterruptCheckMs
argument_list|()
argument_list|)
return|;
block|}
DECL|method|ShortCircuitCache (int maxTotalSize, long maxNonMmappedEvictableLifespanMs, int maxEvictableMmapedSize, long maxEvictableMmapedLifespanMs, long mmapRetryTimeoutMs, long staleThresholdMs, int shmInterruptCheckMs)
specifier|public
name|ShortCircuitCache
parameter_list|(
name|int
name|maxTotalSize
parameter_list|,
name|long
name|maxNonMmappedEvictableLifespanMs
parameter_list|,
name|int
name|maxEvictableMmapedSize
parameter_list|,
name|long
name|maxEvictableMmapedLifespanMs
parameter_list|,
name|long
name|mmapRetryTimeoutMs
parameter_list|,
name|long
name|staleThresholdMs
parameter_list|,
name|int
name|shmInterruptCheckMs
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|maxTotalSize
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxTotalSize
operator|=
name|maxTotalSize
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|maxNonMmappedEvictableLifespanMs
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxNonMmappedEvictableLifespanMs
operator|=
name|maxNonMmappedEvictableLifespanMs
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|maxEvictableMmapedSize
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxEvictableMmapedSize
operator|=
name|maxEvictableMmapedSize
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|maxEvictableMmapedLifespanMs
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxEvictableMmapedLifespanMs
operator|=
name|maxEvictableMmapedLifespanMs
expr_stmt|;
name|this
operator|.
name|mmapRetryTimeoutMs
operator|=
name|mmapRetryTimeoutMs
expr_stmt|;
name|this
operator|.
name|staleThresholdMs
operator|=
name|staleThresholdMs
expr_stmt|;
name|DfsClientShmManager
name|shmManager
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|shmInterruptCheckMs
operator|>
literal|0
operator|)
operator|&&
operator|(
name|DomainSocketWatcher
operator|.
name|getLoadingFailureReason
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
try|try
block|{
name|shmManager
operator|=
operator|new
name|DfsClientShmManager
argument_list|(
name|shmInterruptCheckMs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed to create ShortCircuitShmManager"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|shmManager
operator|=
name|shmManager
expr_stmt|;
block|}
DECL|method|getStaleThresholdMs ()
specifier|public
name|long
name|getStaleThresholdMs
parameter_list|()
block|{
return|return
name|staleThresholdMs
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setMaxTotalSize (int maxTotalSize)
specifier|public
name|void
name|setMaxTotalSize
parameter_list|(
name|int
name|maxTotalSize
parameter_list|)
block|{
name|this
operator|.
name|maxTotalSize
operator|=
name|maxTotalSize
expr_stmt|;
block|}
comment|/**    * Increment the reference count of a replica, and remove it from any free    * list it may be in.    *    * You must hold the cache lock while calling this function.    *    * @param replica      The replica we're removing.    */
DECL|method|ref (ShortCircuitReplica replica)
specifier|private
name|void
name|ref
parameter_list|(
name|ShortCircuitReplica
name|replica
parameter_list|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|replica
operator|.
name|refCount
operator|>
literal|0
argument_list|,
literal|"can't ref %s because its refCount reached %d"
argument_list|,
name|replica
argument_list|,
name|replica
operator|.
name|refCount
argument_list|)
expr_stmt|;
name|Long
name|evictableTimeNs
init|=
name|replica
operator|.
name|getEvictableTimeNs
argument_list|()
decl_stmt|;
name|replica
operator|.
name|refCount
operator|++
expr_stmt|;
if|if
condition|(
name|evictableTimeNs
operator|!=
literal|null
condition|)
block|{
name|String
name|removedFrom
init|=
name|removeEvictable
argument_list|(
name|replica
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|this
operator|+
literal|": "
operator|+
name|removedFrom
operator|+
literal|" no longer contains "
operator|+
name|replica
operator|+
literal|".  refCount "
operator|+
operator|(
name|replica
operator|.
name|refCount
operator|-
literal|1
operator|)
operator|+
literal|" -> "
operator|+
name|replica
operator|.
name|refCount
operator|+
name|StringUtils
operator|.
name|getStackTrace
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|this
operator|+
literal|": replica  refCount "
operator|+
operator|(
name|replica
operator|.
name|refCount
operator|-
literal|1
operator|)
operator|+
literal|" -> "
operator|+
name|replica
operator|.
name|refCount
operator|+
name|StringUtils
operator|.
name|getStackTrace
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Unreference a replica.    *    * You must hold the cache lock while calling this function.    *    * @param replica   The replica being unreferenced.    */
DECL|method|unref (ShortCircuitReplica replica)
name|void
name|unref
parameter_list|(
name|ShortCircuitReplica
name|replica
parameter_list|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// If the replica is stale or unusable, but we haven't purged it yet,
comment|// let's do that.  It would be a shame to evict a non-stale replica so
comment|// that we could put a stale or unusable one into the cache.
if|if
condition|(
operator|!
name|replica
operator|.
name|purged
condition|)
block|{
name|String
name|purgeReason
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|replica
operator|.
name|getDataStream
argument_list|()
operator|.
name|getChannel
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|purgeReason
operator|=
literal|"purging replica because its data channel is closed."
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|replica
operator|.
name|getMetaStream
argument_list|()
operator|.
name|getChannel
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|purgeReason
operator|=
literal|"purging replica because its meta channel is closed."
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|replica
operator|.
name|isStale
argument_list|()
condition|)
block|{
name|purgeReason
operator|=
literal|"purging replica because it is stale."
expr_stmt|;
block|}
if|if
condition|(
name|purgeReason
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}: {}"
argument_list|,
name|this
argument_list|,
name|purgeReason
argument_list|)
expr_stmt|;
name|purge
argument_list|(
name|replica
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|addedString
init|=
literal|""
decl_stmt|;
name|boolean
name|shouldTrimEvictionMaps
init|=
literal|false
decl_stmt|;
name|int
name|newRefCount
init|=
operator|--
name|replica
operator|.
name|refCount
decl_stmt|;
if|if
condition|(
name|newRefCount
operator|==
literal|0
condition|)
block|{
comment|// Close replica, since there are no remaining references to it.
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|replica
operator|.
name|purged
argument_list|,
literal|"Replica %s reached a refCount of 0 without being purged"
argument_list|,
name|replica
argument_list|)
expr_stmt|;
name|replica
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newRefCount
operator|==
literal|1
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
literal|null
operator|==
name|replica
operator|.
name|getEvictableTimeNs
argument_list|()
argument_list|,
literal|"Replica %s had a refCount higher than 1, "
operator|+
literal|"but was still evictable (evictableTimeNs = %d)"
argument_list|,
name|replica
argument_list|,
name|replica
operator|.
name|getEvictableTimeNs
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|replica
operator|.
name|purged
condition|)
block|{
comment|// Add the replica to the end of an eviction list.
comment|// Eviction lists are sorted by time.
if|if
condition|(
name|replica
operator|.
name|hasMmap
argument_list|()
condition|)
block|{
name|insertEvictable
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|replica
argument_list|,
name|evictableMmapped
argument_list|)
expr_stmt|;
name|addedString
operator|=
literal|"added to evictableMmapped, "
expr_stmt|;
block|}
else|else
block|{
name|insertEvictable
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|replica
argument_list|,
name|evictable
argument_list|)
expr_stmt|;
name|addedString
operator|=
literal|"added to evictable, "
expr_stmt|;
block|}
name|shouldTrimEvictionMaps
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|replica
operator|.
name|refCount
operator|>=
literal|0
argument_list|,
literal|"replica's refCount went negative (refCount = %d"
operator|+
literal|" for %s)"
argument_list|,
name|replica
operator|.
name|refCount
argument_list|,
name|replica
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|this
operator|+
literal|": unref replica "
operator|+
name|replica
operator|+
literal|": "
operator|+
name|addedString
operator|+
literal|" refCount "
operator|+
operator|(
name|newRefCount
operator|+
literal|1
operator|)
operator|+
literal|" -> "
operator|+
name|newRefCount
operator|+
name|StringUtils
operator|.
name|getStackTrace
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shouldTrimEvictionMaps
condition|)
block|{
name|trimEvictionMaps
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Demote old evictable mmaps into the regular eviction map.    *    * You must hold the cache lock while calling this function.    *    * @param now   Current time in monotonic milliseconds.    * @return      Number of replicas demoted.    */
DECL|method|demoteOldEvictableMmaped (long now)
specifier|private
name|int
name|demoteOldEvictableMmaped
parameter_list|(
name|long
name|now
parameter_list|)
block|{
name|int
name|numDemoted
init|=
literal|0
decl_stmt|;
name|boolean
name|needMoreSpace
init|=
literal|false
decl_stmt|;
name|Long
name|evictionTimeNs
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Object
name|eldestKey
decl_stmt|;
try|try
block|{
name|eldestKey
operator|=
name|evictableMmapped
operator|.
name|firstKey
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
break|break;
block|}
name|evictionTimeNs
operator|=
operator|(
name|Long
operator|)
name|eldestKey
expr_stmt|;
name|long
name|evictionTimeMs
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|evictionTimeNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|evictionTimeMs
operator|+
name|maxEvictableMmapedLifespanMs
operator|>=
name|now
condition|)
block|{
if|if
condition|(
name|evictableMmapped
operator|.
name|size
argument_list|()
operator|<
name|maxEvictableMmapedSize
condition|)
block|{
break|break;
block|}
name|needMoreSpace
operator|=
literal|true
expr_stmt|;
block|}
name|ShortCircuitReplica
name|replica
init|=
operator|(
name|ShortCircuitReplica
operator|)
name|evictableMmapped
operator|.
name|get
argument_list|(
name|eldestKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|String
name|rationale
init|=
name|needMoreSpace
condition|?
literal|"because we need more space"
else|:
literal|"because it's too old"
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"demoteOldEvictable: demoting "
operator|+
name|replica
operator|+
literal|": "
operator|+
name|rationale
operator|+
literal|": "
operator|+
name|StringUtils
operator|.
name|getStackTrace
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|removeEvictable
argument_list|(
name|replica
argument_list|,
name|evictableMmapped
argument_list|)
expr_stmt|;
name|munmap
argument_list|(
name|replica
argument_list|)
expr_stmt|;
name|insertEvictable
argument_list|(
name|evictionTimeNs
argument_list|,
name|replica
argument_list|,
name|evictable
argument_list|)
expr_stmt|;
name|numDemoted
operator|++
expr_stmt|;
block|}
return|return
name|numDemoted
return|;
block|}
comment|/**    * Trim the eviction lists.    */
DECL|method|trimEvictionMaps ()
specifier|private
name|void
name|trimEvictionMaps
parameter_list|()
block|{
name|long
name|now
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|demoteOldEvictableMmaped
argument_list|(
name|now
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|evictableSize
init|=
name|evictable
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|evictableMmappedSize
init|=
name|evictableMmapped
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|evictableSize
operator|+
name|evictableMmappedSize
operator|<=
name|maxTotalSize
condition|)
block|{
return|return;
block|}
name|ShortCircuitReplica
name|replica
decl_stmt|;
try|try
block|{
if|if
condition|(
name|evictableSize
operator|==
literal|0
condition|)
block|{
name|replica
operator|=
operator|(
name|ShortCircuitReplica
operator|)
name|evictableMmapped
operator|.
name|get
argument_list|(
name|evictableMmapped
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|replica
operator|=
operator|(
name|ShortCircuitReplica
operator|)
name|evictable
operator|.
name|get
argument_list|(
name|evictable
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
break|break;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|this
operator|+
literal|": trimEvictionMaps is purging "
operator|+
name|replica
operator|+
name|StringUtils
operator|.
name|getStackTrace
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|purge
argument_list|(
name|replica
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Munmap a replica, updating outstandingMmapCount.    *    * @param replica  The replica to munmap.    */
DECL|method|munmap (ShortCircuitReplica replica)
specifier|private
name|void
name|munmap
parameter_list|(
name|ShortCircuitReplica
name|replica
parameter_list|)
block|{
name|replica
operator|.
name|munmap
argument_list|()
expr_stmt|;
name|outstandingMmapCount
operator|--
expr_stmt|;
block|}
comment|/**    * Remove a replica from an evictable map.    *    * @param replica   The replica to remove.    * @return          The map it was removed from.    */
DECL|method|removeEvictable (ShortCircuitReplica replica)
specifier|private
name|String
name|removeEvictable
parameter_list|(
name|ShortCircuitReplica
name|replica
parameter_list|)
block|{
if|if
condition|(
name|replica
operator|.
name|hasMmap
argument_list|()
condition|)
block|{
name|removeEvictable
argument_list|(
name|replica
argument_list|,
name|evictableMmapped
argument_list|)
expr_stmt|;
return|return
literal|"evictableMmapped"
return|;
block|}
else|else
block|{
name|removeEvictable
argument_list|(
name|replica
argument_list|,
name|evictable
argument_list|)
expr_stmt|;
return|return
literal|"evictable"
return|;
block|}
block|}
comment|/**    * Remove a replica from an evictable map.    *    * @param replica   The replica to remove.    * @param map       The map to remove it from.    */
DECL|method|removeEvictable (ShortCircuitReplica replica, LinkedMap map)
specifier|private
name|void
name|removeEvictable
parameter_list|(
name|ShortCircuitReplica
name|replica
parameter_list|,
name|LinkedMap
name|map
parameter_list|)
block|{
name|Long
name|evictableTimeNs
init|=
name|replica
operator|.
name|getEvictableTimeNs
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|evictableTimeNs
argument_list|)
expr_stmt|;
name|ShortCircuitReplica
name|removed
init|=
operator|(
name|ShortCircuitReplica
operator|)
name|map
operator|.
name|remove
argument_list|(
name|evictableTimeNs
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|removed
operator|==
name|replica
argument_list|,
literal|"failed to make %s unevictable"
argument_list|,
name|replica
argument_list|)
expr_stmt|;
name|replica
operator|.
name|setEvictableTimeNs
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Insert a replica into an evictable map.    *    * If an element already exists with this eviction time, we add a nanosecond    * to it until we find an unused key.    *    * @param evictionTimeNs   The eviction time in absolute nanoseconds.    * @param replica          The replica to insert.    * @param map              The map to insert it into.    */
DECL|method|insertEvictable (Long evictionTimeNs, ShortCircuitReplica replica, LinkedMap map)
specifier|private
name|void
name|insertEvictable
parameter_list|(
name|Long
name|evictionTimeNs
parameter_list|,
name|ShortCircuitReplica
name|replica
parameter_list|,
name|LinkedMap
name|map
parameter_list|)
block|{
while|while
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|evictionTimeNs
argument_list|)
condition|)
block|{
name|evictionTimeNs
operator|++
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
literal|null
operator|==
name|replica
operator|.
name|getEvictableTimeNs
argument_list|()
argument_list|)
expr_stmt|;
name|replica
operator|.
name|setEvictableTimeNs
argument_list|(
name|evictionTimeNs
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|evictionTimeNs
argument_list|,
name|replica
argument_list|)
expr_stmt|;
block|}
comment|/**    * Purge a replica from the cache.    *    * This doesn't necessarily close the replica, since there may be    * outstanding references to it.  However, it does mean the cache won't    * hand it out to anyone after this.    *    * You must hold the cache lock while calling this function.    *    * @param replica   The replica being removed.    */
DECL|method|purge (ShortCircuitReplica replica)
specifier|private
name|void
name|purge
parameter_list|(
name|ShortCircuitReplica
name|replica
parameter_list|)
block|{
name|boolean
name|removedFromInfoMap
init|=
literal|false
decl_stmt|;
name|String
name|evictionMapName
init|=
literal|null
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|replica
operator|.
name|purged
argument_list|)
expr_stmt|;
name|replica
operator|.
name|purged
operator|=
literal|true
expr_stmt|;
name|Waitable
argument_list|<
name|ShortCircuitReplicaInfo
argument_list|>
name|val
init|=
name|replicaInfoMap
operator|.
name|get
argument_list|(
name|replica
operator|.
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|ShortCircuitReplicaInfo
name|info
init|=
name|val
operator|.
name|getVal
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|info
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|info
operator|.
name|getReplica
argument_list|()
operator|==
name|replica
operator|)
condition|)
block|{
name|replicaInfoMap
operator|.
name|remove
argument_list|(
name|replica
operator|.
name|key
argument_list|)
expr_stmt|;
name|removedFromInfoMap
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Long
name|evictableTimeNs
init|=
name|replica
operator|.
name|getEvictableTimeNs
argument_list|()
decl_stmt|;
if|if
condition|(
name|evictableTimeNs
operator|!=
literal|null
condition|)
block|{
name|evictionMapName
operator|=
name|removeEvictable
argument_list|(
name|replica
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|this
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
literal|": purged "
argument_list|)
operator|.
name|append
argument_list|(
name|replica
argument_list|)
operator|.
name|append
argument_list|(
literal|" from the cache."
argument_list|)
expr_stmt|;
if|if
condition|(
name|removedFromInfoMap
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"  Removed from the replicaInfoMap."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|evictionMapName
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"  Removed from "
argument_list|)
operator|.
name|append
argument_list|(
name|evictionMapName
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|unref
argument_list|(
name|replica
argument_list|)
expr_stmt|;
block|}
DECL|field|FETCH_OR_CREATE_RETRY_TIMES
specifier|static
specifier|final
name|int
name|FETCH_OR_CREATE_RETRY_TIMES
init|=
literal|3
decl_stmt|;
comment|/**    * Fetch or create a replica.    *    * You must hold the cache lock while calling this function.    *    * @param key          Key to use for lookup.    * @param creator      Replica creator callback.  Will be called without    *                     the cache lock being held.    *    * @return             Null if no replica could be found or created.    *                     The replica, otherwise.    */
DECL|method|fetchOrCreate (ExtendedBlockId key, ShortCircuitReplicaCreator creator)
specifier|public
name|ShortCircuitReplicaInfo
name|fetchOrCreate
parameter_list|(
name|ExtendedBlockId
name|key
parameter_list|,
name|ShortCircuitReplicaCreator
name|creator
parameter_list|)
block|{
name|Waitable
argument_list|<
name|ShortCircuitReplicaInfo
argument_list|>
name|newWaitable
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ShortCircuitReplicaInfo
name|info
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|FETCH_OR_CREATE_RETRY_TIMES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|closed
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"{}: can't fethchOrCreate {} because the cache is closed."
argument_list|,
name|this
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Waitable
argument_list|<
name|ShortCircuitReplicaInfo
argument_list|>
name|waitable
init|=
name|replicaInfoMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|waitable
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|info
operator|=
name|fetch
argument_list|(
name|key
argument_list|,
name|waitable
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|RetriableException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}: retrying {}"
argument_list|,
name|this
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
return|return
name|info
return|;
comment|// We need to load the replica ourselves.
name|newWaitable
operator|=
operator|new
name|Waitable
argument_list|<>
argument_list|(
name|lock
operator|.
name|newCondition
argument_list|()
argument_list|)
expr_stmt|;
name|replicaInfoMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|newWaitable
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|create
argument_list|(
name|key
argument_list|,
name|creator
argument_list|,
name|newWaitable
argument_list|)
return|;
block|}
comment|/**    * Fetch an existing ReplicaInfo object.    *    * @param key       The key that we're using.    * @param waitable  The waitable object to wait on.    * @return          The existing ReplicaInfo object, or null if there is    *                  none.    *    * @throws RetriableException   If the caller needs to retry.    */
annotation|@
name|VisibleForTesting
comment|// ONLY for testing
DECL|method|fetch (ExtendedBlockId key, Waitable<ShortCircuitReplicaInfo> waitable)
specifier|protected
name|ShortCircuitReplicaInfo
name|fetch
parameter_list|(
name|ExtendedBlockId
name|key
parameter_list|,
name|Waitable
argument_list|<
name|ShortCircuitReplicaInfo
argument_list|>
name|waitable
parameter_list|)
throws|throws
name|RetriableException
block|{
comment|// Another thread is already in the process of loading this
comment|// ShortCircuitReplica.  So we simply wait for it to complete.
name|ShortCircuitReplicaInfo
name|info
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"{}: found waitable for {}"
argument_list|,
name|this
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|info
operator|=
name|waitable
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|+
literal|": interrupted while waiting for "
operator|+
name|key
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RetriableException
argument_list|(
literal|"interrupted"
argument_list|)
throw|;
block|}
if|if
condition|(
name|info
operator|.
name|getInvalidTokenException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|+
literal|": could not get "
operator|+
name|key
operator|+
literal|" due to InvalidToken "
operator|+
literal|"exception."
argument_list|,
name|info
operator|.
name|getInvalidTokenException
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
name|ShortCircuitReplica
name|replica
init|=
name|info
operator|.
name|getReplica
argument_list|()
decl_stmt|;
if|if
condition|(
name|replica
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|this
operator|+
literal|": failed to get "
operator|+
name|key
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
if|if
condition|(
name|replica
operator|.
name|purged
condition|)
block|{
comment|// Ignore replicas that have already been purged from the cache.
throw|throw
operator|new
name|RetriableException
argument_list|(
literal|"Ignoring purged replica "
operator|+
name|replica
operator|+
literal|".  Retrying."
argument_list|)
throw|;
block|}
comment|// Check if the replica is stale before using it.
comment|// If it is, purge it and retry.
if|if
condition|(
name|replica
operator|.
name|isStale
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|+
literal|": got stale replica "
operator|+
name|replica
operator|+
literal|".  Removing "
operator|+
literal|"this replica from the replicaInfoMap and retrying."
argument_list|)
expr_stmt|;
comment|// Remove the cache's reference to the replica.  This may or may not
comment|// trigger a close.
name|purge
argument_list|(
name|replica
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RetriableException
argument_list|(
literal|"ignoring stale replica "
operator|+
name|replica
argument_list|)
throw|;
block|}
name|ref
argument_list|(
name|replica
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
DECL|method|create (ExtendedBlockId key, ShortCircuitReplicaCreator creator, Waitable<ShortCircuitReplicaInfo> newWaitable)
specifier|private
name|ShortCircuitReplicaInfo
name|create
parameter_list|(
name|ExtendedBlockId
name|key
parameter_list|,
name|ShortCircuitReplicaCreator
name|creator
parameter_list|,
name|Waitable
argument_list|<
name|ShortCircuitReplicaInfo
argument_list|>
name|newWaitable
parameter_list|)
block|{
comment|// Handle loading a new replica.
name|ShortCircuitReplicaInfo
name|info
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"{}: loading {}"
argument_list|,
name|this
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|info
operator|=
name|creator
operator|.
name|createShortCircuitReplicaInfo
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|this
operator|+
literal|": failed to load "
operator|+
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|==
literal|null
condition|)
name|info
operator|=
operator|new
name|ShortCircuitReplicaInfo
argument_list|()
expr_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|info
operator|.
name|getReplica
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// On success, make sure the cache cleaner thread is running.
name|LOG
operator|.
name|trace
argument_list|(
literal|"{}: successfully loaded {}"
argument_list|,
name|this
argument_list|,
name|info
operator|.
name|getReplica
argument_list|()
argument_list|)
expr_stmt|;
name|startCacheCleanerThreadIfNeeded
argument_list|()
expr_stmt|;
comment|// Note: new ShortCircuitReplicas start with a refCount of 2,
comment|// indicating that both this cache and whoever requested the
comment|// creation of the replica hold a reference.  So we don't need
comment|// to increment the reference count here.
block|}
else|else
block|{
comment|// On failure, remove the waitable from the replicaInfoMap.
name|Waitable
argument_list|<
name|ShortCircuitReplicaInfo
argument_list|>
name|waitableInMap
init|=
name|replicaInfoMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|waitableInMap
operator|==
name|newWaitable
condition|)
name|replicaInfoMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getInvalidTokenException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|+
literal|": could not load "
operator|+
name|key
operator|+
literal|" due to InvalidToken "
operator|+
literal|"exception."
argument_list|,
name|info
operator|.
name|getInvalidTokenException
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|this
operator|+
literal|": failed to load "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|newWaitable
operator|.
name|provide
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
DECL|method|startCacheCleanerThreadIfNeeded ()
specifier|private
name|void
name|startCacheCleanerThreadIfNeeded
parameter_list|()
block|{
if|if
condition|(
name|cacheCleaner
operator|==
literal|null
condition|)
block|{
name|cacheCleaner
operator|=
operator|new
name|CacheCleaner
argument_list|()
expr_stmt|;
name|long
name|rateMs
init|=
name|cacheCleaner
operator|.
name|getRateInMs
argument_list|()
decl_stmt|;
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
name|cleanerExecutor
operator|.
name|scheduleAtFixedRate
argument_list|(
name|cacheCleaner
argument_list|,
name|rateMs
argument_list|,
name|rateMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|cacheCleaner
operator|.
name|setFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}: starting cache cleaner thread which will run every {} ms"
argument_list|,
name|this
argument_list|,
name|rateMs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getOrCreateClientMmap (ShortCircuitReplica replica, boolean anchored)
name|ClientMmap
name|getOrCreateClientMmap
parameter_list|(
name|ShortCircuitReplica
name|replica
parameter_list|,
name|boolean
name|anchored
parameter_list|)
block|{
name|Condition
name|newCond
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
name|replica
operator|.
name|mmapData
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|replica
operator|.
name|mmapData
operator|instanceof
name|MappedByteBuffer
condition|)
block|{
name|ref
argument_list|(
name|replica
argument_list|)
expr_stmt|;
name|MappedByteBuffer
name|mmap
init|=
operator|(
name|MappedByteBuffer
operator|)
name|replica
operator|.
name|mmapData
decl_stmt|;
return|return
operator|new
name|ClientMmap
argument_list|(
name|replica
argument_list|,
name|mmap
argument_list|,
name|anchored
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|replica
operator|.
name|mmapData
operator|instanceof
name|Long
condition|)
block|{
name|long
name|lastAttemptTimeMs
init|=
operator|(
name|Long
operator|)
name|replica
operator|.
name|mmapData
decl_stmt|;
name|long
name|delta
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|lastAttemptTimeMs
decl_stmt|;
if|if
condition|(
name|delta
operator|<
name|mmapRetryTimeoutMs
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"{}: can't create client mmap for {} because we failed to"
operator|+
literal|" create one just {}ms ago."
argument_list|,
name|this
argument_list|,
name|replica
argument_list|,
name|delta
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"{}: retrying client mmap for {}, {} ms after the previous "
operator|+
literal|"failure."
argument_list|,
name|this
argument_list|,
name|replica
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|replica
operator|.
name|mmapData
operator|instanceof
name|Condition
condition|)
block|{
name|Condition
name|cond
init|=
operator|(
name|Condition
operator|)
name|replica
operator|.
name|mmapData
decl_stmt|;
name|cond
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
literal|false
argument_list|,
literal|"invalid mmapData type %s"
argument_list|,
name|replica
operator|.
name|mmapData
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|newCond
operator|=
name|lock
operator|.
name|newCondition
argument_list|()
expr_stmt|;
name|replica
operator|.
name|mmapData
operator|=
name|newCond
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|MappedByteBuffer
name|map
init|=
name|replica
operator|.
name|loadMmapInternal
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|replica
operator|.
name|mmapData
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
name|newCond
operator|.
name|signalAll
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|outstandingMmapCount
operator|++
expr_stmt|;
name|replica
operator|.
name|mmapData
operator|=
name|map
expr_stmt|;
name|ref
argument_list|(
name|replica
argument_list|)
expr_stmt|;
name|newCond
operator|.
name|signalAll
argument_list|()
expr_stmt|;
return|return
operator|new
name|ClientMmap
argument_list|(
name|replica
argument_list|,
name|map
argument_list|,
name|anchored
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Close the cache and free all associated resources.    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|closed
condition|)
return|return;
name|closed
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|+
literal|": closing"
argument_list|)
expr_stmt|;
name|maxNonMmappedEvictableLifespanMs
operator|=
literal|0
expr_stmt|;
name|maxEvictableMmapedSize
operator|=
literal|0
expr_stmt|;
comment|// Close and join cacheCleaner thread.
name|IOUtilsClient
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|cacheCleaner
argument_list|)
expr_stmt|;
comment|// Purge all replicas.
while|while
condition|(
literal|true
condition|)
block|{
name|Object
name|eldestKey
decl_stmt|;
try|try
block|{
name|eldestKey
operator|=
name|evictable
operator|.
name|firstKey
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
break|break;
block|}
name|purge
argument_list|(
operator|(
name|ShortCircuitReplica
operator|)
name|evictable
operator|.
name|get
argument_list|(
name|eldestKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|Object
name|eldestKey
decl_stmt|;
try|try
block|{
name|eldestKey
operator|=
name|evictableMmapped
operator|.
name|firstKey
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
break|break;
block|}
name|purge
argument_list|(
operator|(
name|ShortCircuitReplica
operator|)
name|evictableMmapped
operator|.
name|get
argument_list|(
name|eldestKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|releaserExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cleanerExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// wait for existing tasks to terminate
try|try
block|{
if|if
condition|(
operator|!
name|releaserExecutor
operator|.
name|awaitTermination
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Forcing SlotReleaserThreadPool to shutdown!"
argument_list|)
expr_stmt|;
name|releaserExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|releaserExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Interrupted while waiting for SlotReleaserThreadPool "
operator|+
literal|"to terminate"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// wait for existing tasks to terminate
try|try
block|{
if|if
condition|(
operator|!
name|cleanerExecutor
operator|.
name|awaitTermination
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Forcing CleanerThreadPool to shutdown!"
argument_list|)
expr_stmt|;
name|cleanerExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|cleanerExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Interrupted while waiting for CleanerThreadPool "
operator|+
literal|"to terminate"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|IOUtilsClient
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|shmManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
comment|// ONLY for testing
DECL|interface|CacheVisitor
specifier|public
interface|interface
name|CacheVisitor
block|{
DECL|method|visit (int numOutstandingMmaps, Map<ExtendedBlockId, ShortCircuitReplica> replicas, Map<ExtendedBlockId, InvalidToken> failedLoads, LinkedMap evictable, LinkedMap evictableMmapped)
name|void
name|visit
parameter_list|(
name|int
name|numOutstandingMmaps
parameter_list|,
name|Map
argument_list|<
name|ExtendedBlockId
argument_list|,
name|ShortCircuitReplica
argument_list|>
name|replicas
parameter_list|,
name|Map
argument_list|<
name|ExtendedBlockId
argument_list|,
name|InvalidToken
argument_list|>
name|failedLoads
parameter_list|,
name|LinkedMap
name|evictable
parameter_list|,
name|LinkedMap
name|evictableMmapped
parameter_list|)
function_decl|;
block|}
annotation|@
name|VisibleForTesting
comment|// ONLY for testing
DECL|method|accept (CacheVisitor visitor)
specifier|public
name|void
name|accept
parameter_list|(
name|CacheVisitor
name|visitor
parameter_list|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Map
argument_list|<
name|ExtendedBlockId
argument_list|,
name|ShortCircuitReplica
argument_list|>
name|replicas
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ExtendedBlockId
argument_list|,
name|InvalidToken
argument_list|>
name|failedLoads
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ExtendedBlockId
argument_list|,
name|Waitable
argument_list|<
name|ShortCircuitReplicaInfo
argument_list|>
argument_list|>
name|entry
range|:
name|replicaInfoMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Waitable
argument_list|<
name|ShortCircuitReplicaInfo
argument_list|>
name|waitable
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|waitable
operator|.
name|hasVal
argument_list|()
condition|)
block|{
if|if
condition|(
name|waitable
operator|.
name|getVal
argument_list|()
operator|.
name|getReplica
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|replicas
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|waitable
operator|.
name|getVal
argument_list|()
operator|.
name|getReplica
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The exception may be null here, indicating a failed load that
comment|// isn't the result of an invalid block token.
name|failedLoads
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|waitable
operator|.
name|getVal
argument_list|()
operator|.
name|getInvalidTokenException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"visiting {} with outstandingMmapCount={}, replicas={}, "
operator|+
literal|"failedLoads={}, evictable={}, evictableMmapped={}"
argument_list|,
name|visitor
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|outstandingMmapCount
argument_list|,
name|replicas
argument_list|,
name|failedLoads
argument_list|,
name|evictable
argument_list|,
name|evictableMmapped
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|visit
argument_list|(
name|outstandingMmapCount
argument_list|,
name|replicas
argument_list|,
name|failedLoads
argument_list|,
name|evictable
argument_list|,
name|evictableMmapped
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ShortCircuitCache(0x"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
argument_list|)
operator|+
literal|")"
return|;
block|}
comment|/**    * Allocate a new shared memory slot.    *    * @param datanode       The datanode to allocate a shm slot with.    * @param peer           A peer connected to the datanode.    * @param usedPeer       Will be set to true if we use up the provided peer.    * @param blockId        The block id and block pool id of the block we're    *                         allocating this slot for.    * @param clientName     The name of the DFSClient allocating the shared    *                         memory.    * @return               Null if short-circuit shared memory is disabled;    *                         a short-circuit memory slot otherwise.    * @throws IOException   An exception if there was an error talking to    *                         the datanode.    */
DECL|method|allocShmSlot (DatanodeInfo datanode, DomainPeer peer, MutableBoolean usedPeer, ExtendedBlockId blockId, String clientName)
specifier|public
name|Slot
name|allocShmSlot
parameter_list|(
name|DatanodeInfo
name|datanode
parameter_list|,
name|DomainPeer
name|peer
parameter_list|,
name|MutableBoolean
name|usedPeer
parameter_list|,
name|ExtendedBlockId
name|blockId
parameter_list|,
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|shmManager
operator|!=
literal|null
condition|)
block|{
return|return
name|shmManager
operator|.
name|allocSlot
argument_list|(
name|datanode
argument_list|,
name|peer
argument_list|,
name|usedPeer
argument_list|,
name|blockId
argument_list|,
name|clientName
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Free a slot immediately.    *    * ONLY use this if the DataNode is not yet aware of the slot.    *    * @param slot           The slot to free.    */
DECL|method|freeSlot (Slot slot)
specifier|public
name|void
name|freeSlot
parameter_list|(
name|Slot
name|slot
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|shmManager
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|slot
operator|.
name|makeInvalid
argument_list|()
expr_stmt|;
name|shmManager
operator|.
name|freeSlot
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
comment|/**    * Schedule a shared memory slot to be released.    *    * @param slot           The slot to release.    */
DECL|method|scheduleSlotReleaser (Slot slot)
specifier|public
name|void
name|scheduleSlotReleaser
parameter_list|(
name|Slot
name|slot
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|shmManager
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|releaserExecutor
operator|.
name|execute
argument_list|(
operator|new
name|SlotReleaser
argument_list|(
name|slot
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDfsClientShmManager ()
specifier|public
name|DfsClientShmManager
name|getDfsClientShmManager
parameter_list|()
block|{
return|return
name|shmManager
return|;
block|}
comment|/**    * Can be used in testing to verify whether a read went through SCR, after    * the read is done and before the stream is closed.    */
annotation|@
name|VisibleForTesting
DECL|method|getReplicaInfoMapSize ()
specifier|public
name|int
name|getReplicaInfoMapSize
parameter_list|()
block|{
return|return
name|replicaInfoMap
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

