begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol.datatransfer.sasl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|sasl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_ENCRYPT_DATA_OVERWRITE_DOWNSTREAM_NEW_QOP_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|sasl
operator|.
name|DataTransferSaslUtil
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|PasswordCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|RealmCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|RealmChoiceCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CipherOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CipherSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|net
operator|.
name|EncryptedPeer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|net
operator|.
name|Peer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|IOStreamPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|TrustedChannelResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|DataEncryptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslPropertiesResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Negotiates SASL for DataTransferProtocol on behalf of a client.  There are  * two possible supported variants of SASL negotiation: either a general-purpose  * negotiation supporting any quality of protection, or a specialized  * negotiation that enforces privacy as the quality of protection using a  * cryptographically strong encryption key.  *  * This class is used in both the HDFS client and the DataNode.  The DataNode  * needs it, because it acts as a client to other DataNodes during write  * pipelines and block transfers.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|SaslDataTransferClient
specifier|public
class|class
name|SaslDataTransferClient
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SaslDataTransferClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|fallbackToSimpleAuth
specifier|private
specifier|final
name|AtomicBoolean
name|fallbackToSimpleAuth
decl_stmt|;
DECL|field|saslPropsResolver
specifier|private
specifier|final
name|SaslPropertiesResolver
name|saslPropsResolver
decl_stmt|;
DECL|field|trustedChannelResolver
specifier|private
specifier|final
name|TrustedChannelResolver
name|trustedChannelResolver
decl_stmt|;
comment|// Store the most recent successfully negotiated QOP,
comment|// for testing purpose only
DECL|field|targetQOP
specifier|private
name|String
name|targetQOP
decl_stmt|;
comment|/**    * Creates a new SaslDataTransferClient.  This constructor is used in cases    * where it is not relevant to track if a secure client did a fallback to    * simple auth.  For intra-cluster connections between data nodes in the same    * cluster, we can assume that all run under the same security configuration.    *    * @param conf the configuration    * @param saslPropsResolver for determining properties of SASL negotiation    * @param trustedChannelResolver for identifying trusted connections that do    *   not require SASL negotiation    */
DECL|method|SaslDataTransferClient (Configuration conf, SaslPropertiesResolver saslPropsResolver, TrustedChannelResolver trustedChannelResolver)
specifier|public
name|SaslDataTransferClient
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|SaslPropertiesResolver
name|saslPropsResolver
parameter_list|,
name|TrustedChannelResolver
name|trustedChannelResolver
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|saslPropsResolver
argument_list|,
name|trustedChannelResolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new SaslDataTransferClient.    *    * @param conf the configuration    * @param saslPropsResolver for determining properties of SASL negotiation    * @param trustedChannelResolver for identifying trusted connections that do    *   not require SASL negotiation    * @param fallbackToSimpleAuth checked on each attempt at general SASL    *   handshake, if true forces use of simple auth    */
DECL|method|SaslDataTransferClient (Configuration conf, SaslPropertiesResolver saslPropsResolver, TrustedChannelResolver trustedChannelResolver, AtomicBoolean fallbackToSimpleAuth)
specifier|public
name|SaslDataTransferClient
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|SaslPropertiesResolver
name|saslPropsResolver
parameter_list|,
name|TrustedChannelResolver
name|trustedChannelResolver
parameter_list|,
name|AtomicBoolean
name|fallbackToSimpleAuth
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|fallbackToSimpleAuth
operator|=
name|fallbackToSimpleAuth
expr_stmt|;
name|this
operator|.
name|saslPropsResolver
operator|=
name|saslPropsResolver
expr_stmt|;
name|this
operator|.
name|trustedChannelResolver
operator|=
name|trustedChannelResolver
expr_stmt|;
block|}
comment|/**    * Sends client SASL negotiation for a newly allocated socket if required.    *    * @param socket connection socket    * @param underlyingOut connection output stream    * @param underlyingIn connection input stream    * @param encryptionKeyFactory for creation of an encryption key    * @param accessToken connection block access token    * @param datanodeId ID of destination DataNode    * @return new pair of streams, wrapped after SASL negotiation    * @throws IOException for any error    */
DECL|method|newSocketSend (Socket socket, OutputStream underlyingOut, InputStream underlyingIn, DataEncryptionKeyFactory encryptionKeyFactory, Token<BlockTokenIdentifier> accessToken, DatanodeID datanodeId)
specifier|public
name|IOStreamPair
name|newSocketSend
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|OutputStream
name|underlyingOut
parameter_list|,
name|InputStream
name|underlyingIn
parameter_list|,
name|DataEncryptionKeyFactory
name|encryptionKeyFactory
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|accessToken
parameter_list|,
name|DatanodeID
name|datanodeId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The encryption key factory only returns a key if encryption is enabled.
name|DataEncryptionKey
name|encryptionKey
init|=
operator|!
name|trustedChannelResolver
operator|.
name|isTrusted
argument_list|()
condition|?
name|encryptionKeyFactory
operator|.
name|newDataEncryptionKey
argument_list|()
else|:
literal|null
decl_stmt|;
name|IOStreamPair
name|ios
init|=
name|send
argument_list|(
name|socket
operator|.
name|getInetAddress
argument_list|()
argument_list|,
name|underlyingOut
argument_list|,
name|underlyingIn
argument_list|,
name|encryptionKey
argument_list|,
name|accessToken
argument_list|,
name|datanodeId
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|ios
operator|!=
literal|null
condition|?
name|ios
else|:
operator|new
name|IOStreamPair
argument_list|(
name|underlyingIn
argument_list|,
name|underlyingOut
argument_list|)
return|;
block|}
comment|/**    * Sends client SASL negotiation for a peer if required.    *    * @param peer connection peer    * @param encryptionKeyFactory for creation of an encryption key    * @param accessToken connection block access token    * @param datanodeId ID of destination DataNode    * @return new pair of streams, wrapped after SASL negotiation    * @throws IOException for any error    */
DECL|method|peerSend (Peer peer, DataEncryptionKeyFactory encryptionKeyFactory, Token<BlockTokenIdentifier> accessToken, DatanodeID datanodeId)
specifier|public
name|Peer
name|peerSend
parameter_list|(
name|Peer
name|peer
parameter_list|,
name|DataEncryptionKeyFactory
name|encryptionKeyFactory
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|accessToken
parameter_list|,
name|DatanodeID
name|datanodeId
parameter_list|)
throws|throws
name|IOException
block|{
name|IOStreamPair
name|ios
init|=
name|checkTrustAndSend
argument_list|(
name|getPeerAddress
argument_list|(
name|peer
argument_list|)
argument_list|,
name|peer
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|peer
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|encryptionKeyFactory
argument_list|,
name|accessToken
argument_list|,
name|datanodeId
argument_list|)
decl_stmt|;
comment|// TODO: Consider renaming EncryptedPeer to SaslPeer.
return|return
name|ios
operator|!=
literal|null
condition|?
operator|new
name|EncryptedPeer
argument_list|(
name|peer
argument_list|,
name|ios
argument_list|)
else|:
name|peer
return|;
block|}
comment|/**    * Sends client SASL negotiation for a socket if required.    *    * @param socket connection socket    * @param underlyingOut connection output stream    * @param underlyingIn connection input stream    * @param encryptionKeyFactory for creation of an encryption key    * @param accessToken connection block access token    * @param datanodeId ID of destination DataNode    * @return new pair of streams, wrapped after SASL negotiation    * @throws IOException for any error    */
DECL|method|socketSend (Socket socket, OutputStream underlyingOut, InputStream underlyingIn, DataEncryptionKeyFactory encryptionKeyFactory, Token<BlockTokenIdentifier> accessToken, DatanodeID datanodeId)
specifier|public
name|IOStreamPair
name|socketSend
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|OutputStream
name|underlyingOut
parameter_list|,
name|InputStream
name|underlyingIn
parameter_list|,
name|DataEncryptionKeyFactory
name|encryptionKeyFactory
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|accessToken
parameter_list|,
name|DatanodeID
name|datanodeId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|socketSend
argument_list|(
name|socket
argument_list|,
name|underlyingOut
argument_list|,
name|underlyingIn
argument_list|,
name|encryptionKeyFactory
argument_list|,
name|accessToken
argument_list|,
name|datanodeId
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|socketSend ( Socket socket, OutputStream underlyingOut, InputStream underlyingIn, DataEncryptionKeyFactory encryptionKeyFactory, Token<BlockTokenIdentifier> accessToken, DatanodeID datanodeId, SecretKey secretKey)
specifier|public
name|IOStreamPair
name|socketSend
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|OutputStream
name|underlyingOut
parameter_list|,
name|InputStream
name|underlyingIn
parameter_list|,
name|DataEncryptionKeyFactory
name|encryptionKeyFactory
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|accessToken
parameter_list|,
name|DatanodeID
name|datanodeId
parameter_list|,
name|SecretKey
name|secretKey
parameter_list|)
throws|throws
name|IOException
block|{
name|IOStreamPair
name|ios
init|=
name|checkTrustAndSend
argument_list|(
name|socket
operator|.
name|getInetAddress
argument_list|()
argument_list|,
name|underlyingOut
argument_list|,
name|underlyingIn
argument_list|,
name|encryptionKeyFactory
argument_list|,
name|accessToken
argument_list|,
name|datanodeId
argument_list|,
name|secretKey
argument_list|)
decl_stmt|;
return|return
name|ios
operator|!=
literal|null
condition|?
name|ios
else|:
operator|new
name|IOStreamPair
argument_list|(
name|underlyingIn
argument_list|,
name|underlyingOut
argument_list|)
return|;
block|}
comment|/**    * Checks if an address is already trusted and then sends client SASL    * negotiation if required.    *    * @param addr connection address    * @param underlyingOut connection output stream    * @param underlyingIn connection input stream    * @param encryptionKeyFactory for creation of an encryption key    * @param accessToken connection block access token    * @param datanodeId ID of destination DataNode    * @return new pair of streams, wrapped after SASL negotiation    * @throws IOException for any error    */
DECL|method|checkTrustAndSend (InetAddress addr, OutputStream underlyingOut, InputStream underlyingIn, DataEncryptionKeyFactory encryptionKeyFactory, Token<BlockTokenIdentifier> accessToken, DatanodeID datanodeId)
specifier|private
name|IOStreamPair
name|checkTrustAndSend
parameter_list|(
name|InetAddress
name|addr
parameter_list|,
name|OutputStream
name|underlyingOut
parameter_list|,
name|InputStream
name|underlyingIn
parameter_list|,
name|DataEncryptionKeyFactory
name|encryptionKeyFactory
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|accessToken
parameter_list|,
name|DatanodeID
name|datanodeId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|checkTrustAndSend
argument_list|(
name|addr
argument_list|,
name|underlyingOut
argument_list|,
name|underlyingIn
argument_list|,
name|encryptionKeyFactory
argument_list|,
name|accessToken
argument_list|,
name|datanodeId
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|checkTrustAndSend ( InetAddress addr, OutputStream underlyingOut, InputStream underlyingIn, DataEncryptionKeyFactory encryptionKeyFactory, Token<BlockTokenIdentifier> accessToken, DatanodeID datanodeId, SecretKey secretKey)
specifier|private
name|IOStreamPair
name|checkTrustAndSend
parameter_list|(
name|InetAddress
name|addr
parameter_list|,
name|OutputStream
name|underlyingOut
parameter_list|,
name|InputStream
name|underlyingIn
parameter_list|,
name|DataEncryptionKeyFactory
name|encryptionKeyFactory
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|accessToken
parameter_list|,
name|DatanodeID
name|datanodeId
parameter_list|,
name|SecretKey
name|secretKey
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|localTrusted
init|=
name|trustedChannelResolver
operator|.
name|isTrusted
argument_list|()
decl_stmt|;
name|boolean
name|remoteTrusted
init|=
name|trustedChannelResolver
operator|.
name|isTrusted
argument_list|(
name|addr
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SASL encryption trust check: localHostTrusted = {}, "
operator|+
literal|"remoteHostTrusted = {}"
argument_list|,
name|localTrusted
argument_list|,
name|remoteTrusted
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|localTrusted
operator|||
operator|!
name|remoteTrusted
condition|)
block|{
comment|// The encryption key factory only returns a key if encryption is enabled.
name|DataEncryptionKey
name|encryptionKey
init|=
name|encryptionKeyFactory
operator|.
name|newDataEncryptionKey
argument_list|()
decl_stmt|;
return|return
name|send
argument_list|(
name|addr
argument_list|,
name|underlyingOut
argument_list|,
name|underlyingIn
argument_list|,
name|encryptionKey
argument_list|,
name|accessToken
argument_list|,
name|datanodeId
argument_list|,
name|secretKey
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client skipping handshake on trusted connection for addr = {}, "
operator|+
literal|"datanodeId = {}"
argument_list|,
name|addr
argument_list|,
name|datanodeId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Sends client SASL negotiation if required.  Determines the correct type of    * SASL handshake based on configuration.    *    * @param addr connection address    * @param underlyingOut connection output stream    * @param underlyingIn connection input stream    * @param encryptionKey for an encrypted SASL handshake    * @param accessToken connection block access token    * @param datanodeId ID of destination DataNode    * @return new pair of streams, wrapped after SASL negotiation    * @throws IOException for any error    */
DECL|method|send (InetAddress addr, OutputStream underlyingOut, InputStream underlyingIn, DataEncryptionKey encryptionKey, Token<BlockTokenIdentifier> accessToken, DatanodeID datanodeId, SecretKey secretKey)
specifier|private
name|IOStreamPair
name|send
parameter_list|(
name|InetAddress
name|addr
parameter_list|,
name|OutputStream
name|underlyingOut
parameter_list|,
name|InputStream
name|underlyingIn
parameter_list|,
name|DataEncryptionKey
name|encryptionKey
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|accessToken
parameter_list|,
name|DatanodeID
name|datanodeId
parameter_list|,
name|SecretKey
name|secretKey
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|encryptionKey
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client doing encrypted handshake for addr = {}, "
operator|+
literal|"datanodeId = {}"
argument_list|,
name|addr
argument_list|,
name|datanodeId
argument_list|)
expr_stmt|;
return|return
name|getEncryptedStreams
argument_list|(
name|addr
argument_list|,
name|underlyingOut
argument_list|,
name|underlyingIn
argument_list|,
name|encryptionKey
argument_list|,
name|accessToken
argument_list|,
name|secretKey
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client skipping handshake in unsecured configuration for "
operator|+
literal|"addr = {}, datanodeId = {}"
argument_list|,
name|addr
argument_list|,
name|datanodeId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|SecurityUtil
operator|.
name|isPrivilegedPort
argument_list|(
name|datanodeId
operator|.
name|getXferPort
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client skipping handshake in secured configuration with "
operator|+
literal|"privileged port for addr = {}, datanodeId = {}"
argument_list|,
name|addr
argument_list|,
name|datanodeId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|fallbackToSimpleAuth
operator|!=
literal|null
operator|&&
name|fallbackToSimpleAuth
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client skipping handshake in secured configuration with "
operator|+
literal|"unsecured cluster for addr = {}, datanodeId = {}"
argument_list|,
name|addr
argument_list|,
name|datanodeId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|saslPropsResolver
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client doing general handshake for addr = {}, datanodeId = {}"
argument_list|,
name|addr
argument_list|,
name|datanodeId
argument_list|)
expr_stmt|;
return|return
name|getSaslStreams
argument_list|(
name|addr
argument_list|,
name|underlyingOut
argument_list|,
name|underlyingIn
argument_list|,
name|accessToken
argument_list|,
name|secretKey
argument_list|)
return|;
block|}
else|else
block|{
comment|// It's a secured cluster using non-privileged ports, but no SASL.  The
comment|// only way this can happen is if the DataNode has
comment|// ignore.secure.ports.for.testing configured so this is a rare edge case.
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client skipping handshake in secured configuration with "
operator|+
literal|"no SASL protection configured for addr = {}, datanodeId = {}"
argument_list|,
name|addr
argument_list|,
name|datanodeId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Sends client SASL negotiation for specialized encrypted handshake.    *    * @param addr connection address    * @param underlyingOut connection output stream    * @param underlyingIn connection input stream    * @param encryptionKey for an encrypted SASL handshake    * @return new pair of streams, wrapped after SASL negotiation    * @throws IOException for any error    */
DECL|method|getEncryptedStreams (InetAddress addr, OutputStream underlyingOut, InputStream underlyingIn, DataEncryptionKey encryptionKey, Token<BlockTokenIdentifier> accessToken, SecretKey secretKey)
specifier|private
name|IOStreamPair
name|getEncryptedStreams
parameter_list|(
name|InetAddress
name|addr
parameter_list|,
name|OutputStream
name|underlyingOut
parameter_list|,
name|InputStream
name|underlyingIn
parameter_list|,
name|DataEncryptionKey
name|encryptionKey
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|accessToken
parameter_list|,
name|SecretKey
name|secretKey
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
init|=
name|createSaslPropertiesForEncryption
argument_list|(
name|encryptionKey
operator|.
name|encryptionAlgorithm
argument_list|)
decl_stmt|;
if|if
condition|(
name|secretKey
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DataNode overwriting downstream QOP"
operator|+
name|saslProps
operator|.
name|get
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|newSecret
init|=
name|SecretManager
operator|.
name|createPassword
argument_list|(
name|saslProps
operator|.
name|get
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
name|secretKey
argument_list|)
decl_stmt|;
name|accessToken
operator|.
name|setDNHandshakeSecret
argument_list|(
name|newSecret
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Client using encryption algorithm {}"
argument_list|,
name|encryptionKey
operator|.
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
name|String
name|userName
init|=
name|getUserNameFromEncryptionKey
argument_list|(
name|encryptionKey
argument_list|)
decl_stmt|;
name|char
index|[]
name|password
init|=
name|encryptionKeyToPassword
argument_list|(
name|encryptionKey
operator|.
name|encryptionKey
argument_list|)
decl_stmt|;
name|CallbackHandler
name|callbackHandler
init|=
operator|new
name|SaslClientCallbackHandler
argument_list|(
name|userName
argument_list|,
name|password
argument_list|)
decl_stmt|;
return|return
name|doSaslHandshake
argument_list|(
name|addr
argument_list|,
name|underlyingOut
argument_list|,
name|underlyingIn
argument_list|,
name|userName
argument_list|,
name|saslProps
argument_list|,
name|callbackHandler
argument_list|,
name|accessToken
argument_list|)
return|;
block|}
comment|/**    * The SASL username for an encrypted handshake consists of the keyId,    * blockPoolId, and nonce with the first two encoded as Strings, and the third    * encoded using Base64. The fields are each separated by a single space.    *    * @param encryptionKey the encryption key to encode as a SASL username.    * @return encoded username containing keyId, blockPoolId, and nonce    */
DECL|method|getUserNameFromEncryptionKey ( DataEncryptionKey encryptionKey)
specifier|private
specifier|static
name|String
name|getUserNameFromEncryptionKey
parameter_list|(
name|DataEncryptionKey
name|encryptionKey
parameter_list|)
block|{
return|return
name|encryptionKey
operator|.
name|keyId
operator|+
name|NAME_DELIMITER
operator|+
name|encryptionKey
operator|.
name|blockPoolId
operator|+
name|NAME_DELIMITER
operator|+
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|encryptionKey
operator|.
name|nonce
argument_list|,
literal|false
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
comment|/**    * Sets user name and password when asked by the client-side SASL object.    */
DECL|class|SaslClientCallbackHandler
specifier|private
specifier|static
specifier|final
class|class
name|SaslClientCallbackHandler
implements|implements
name|CallbackHandler
block|{
DECL|field|password
specifier|private
specifier|final
name|char
index|[]
name|password
decl_stmt|;
DECL|field|userName
specifier|private
specifier|final
name|String
name|userName
decl_stmt|;
comment|/**      * Creates a new SaslClientCallbackHandler.      *      * @param userName SASL user name      * @param password SASL password      */
DECL|method|SaslClientCallbackHandler (String userName, char[] password)
specifier|public
name|SaslClientCallbackHandler
parameter_list|(
name|String
name|userName
parameter_list|,
name|char
index|[]
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (Callback[] callbacks)
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
name|NameCallback
name|nc
init|=
literal|null
decl_stmt|;
name|PasswordCallback
name|pc
init|=
literal|null
decl_stmt|;
name|RealmCallback
name|rc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|NameCallback
condition|)
block|{
name|nc
operator|=
operator|(
name|NameCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|PasswordCallback
condition|)
block|{
name|pc
operator|=
operator|(
name|PasswordCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|RealmCallback
condition|)
block|{
name|rc
operator|=
operator|(
name|RealmCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|callback
operator|instanceof
name|RealmChoiceCallback
operator|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|,
literal|"Unrecognized SASL client callback"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|nc
operator|!=
literal|null
condition|)
block|{
name|nc
operator|.
name|setName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setText
argument_list|(
name|rc
operator|.
name|getDefaultText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getTargetQOP ()
specifier|public
name|String
name|getTargetQOP
parameter_list|()
block|{
return|return
name|targetQOP
return|;
block|}
comment|/**    * Sends client SASL negotiation for general-purpose handshake.    *    * @param addr connection address    * @param underlyingOut connection output stream    * @param underlyingIn connection input stream    * @param accessToken connection block access token    * @return new pair of streams, wrapped after SASL negotiation    * @throws IOException for any error    */
DECL|method|getSaslStreams (InetAddress addr, OutputStream underlyingOut, InputStream underlyingIn, Token<BlockTokenIdentifier> accessToken, SecretKey secretKey)
specifier|private
name|IOStreamPair
name|getSaslStreams
parameter_list|(
name|InetAddress
name|addr
parameter_list|,
name|OutputStream
name|underlyingOut
parameter_list|,
name|InputStream
name|underlyingIn
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|accessToken
parameter_list|,
name|SecretKey
name|secretKey
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
init|=
name|saslPropsResolver
operator|.
name|getClientProperties
argument_list|(
name|addr
argument_list|)
decl_stmt|;
comment|// secretKey != null only happens when this is called by DN
comment|// sending to downstream DN. If called from client, this will be null,
comment|// as there is no key for client to generate mac instance.
comment|// So that, if a different QOP is desired for inter-DN communication,
comment|// the check below will use new QOP to create a secret, which includes
comment|// the new QOP.
if|if
condition|(
name|secretKey
operator|!=
literal|null
condition|)
block|{
name|String
name|newQOP
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_ENCRYPT_DATA_OVERWRITE_DOWNSTREAM_NEW_QOP_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|newQOP
operator|!=
literal|null
condition|)
block|{
name|saslProps
operator|.
name|put
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|,
name|newQOP
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"DataNode overwriting downstream QOP "
operator|+
name|saslProps
operator|.
name|get
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|newSecret
init|=
name|SecretManager
operator|.
name|createPassword
argument_list|(
name|saslProps
operator|.
name|get
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
name|secretKey
argument_list|)
decl_stmt|;
name|accessToken
operator|.
name|setDNHandshakeSecret
argument_list|(
name|newSecret
argument_list|)
expr_stmt|;
block|}
name|targetQOP
operator|=
name|saslProps
operator|.
name|get
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
expr_stmt|;
name|String
name|userName
init|=
name|buildUserName
argument_list|(
name|accessToken
argument_list|)
decl_stmt|;
name|char
index|[]
name|password
init|=
name|buildClientPassword
argument_list|(
name|accessToken
argument_list|)
decl_stmt|;
name|CallbackHandler
name|callbackHandler
init|=
operator|new
name|SaslClientCallbackHandler
argument_list|(
name|userName
argument_list|,
name|password
argument_list|)
decl_stmt|;
return|return
name|doSaslHandshake
argument_list|(
name|addr
argument_list|,
name|underlyingOut
argument_list|,
name|underlyingIn
argument_list|,
name|userName
argument_list|,
name|saslProps
argument_list|,
name|callbackHandler
argument_list|,
name|accessToken
argument_list|)
return|;
block|}
comment|/**    * Builds the client's user name for the general-purpose handshake, consisting    * of the base64-encoded serialized block access token identifier.  Note that    * this includes only the token identifier, not the token itself, which would    * include the password.  The password is a shared secret, and we must not    * write it on the network during the SASL authentication exchange.    *    * @param blockToken for block access    * @return SASL user name    */
DECL|method|buildUserName (Token<BlockTokenIdentifier> blockToken)
specifier|private
specifier|static
name|String
name|buildUserName
parameter_list|(
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|blockToken
operator|.
name|getIdentifier
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
comment|/**    * Calculates the password on the client side for the general-purpose    * handshake.  The password consists of the block access token's password.    *    * @param blockToken for block access    * @return SASL password    */
DECL|method|buildClientPassword (Token<BlockTokenIdentifier> blockToken)
specifier|private
name|char
index|[]
name|buildClientPassword
parameter_list|(
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|blockToken
operator|.
name|getPassword
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|toCharArray
argument_list|()
return|;
block|}
comment|/**    * This method actually executes the client-side SASL handshake.    *    * @param addr connection address    * @param underlyingOut connection output stream    * @param underlyingIn connection input stream    * @param userName SASL user name    * @param saslProps properties of SASL negotiation    * @param callbackHandler for responding to SASL callbacks    * @return new pair of streams, wrapped after SASL negotiation    * @throws IOException for any error    */
DECL|method|doSaslHandshake (InetAddress addr, OutputStream underlyingOut, InputStream underlyingIn, String userName, Map<String, String> saslProps, CallbackHandler callbackHandler, Token<BlockTokenIdentifier> accessToken)
specifier|private
name|IOStreamPair
name|doSaslHandshake
parameter_list|(
name|InetAddress
name|addr
parameter_list|,
name|OutputStream
name|underlyingOut
parameter_list|,
name|InputStream
name|underlyingIn
parameter_list|,
name|String
name|userName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|accessToken
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|underlyingOut
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|underlyingIn
argument_list|)
decl_stmt|;
name|SaslParticipant
name|sasl
init|=
name|SaslParticipant
operator|.
name|createClientSaslParticipant
argument_list|(
name|userName
argument_list|,
name|saslProps
argument_list|,
name|callbackHandler
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|SASL_TRANSFER_MAGIC_NUMBER
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Start of handshake - "initial response" in SASL terminology.
comment|// The handshake secret can be null, this happens when client is running
comment|// a new version but the cluster does not have this feature. In which case
comment|// there will be no encrypted secret sent from NN.
name|byte
index|[]
name|handshakeSecret
init|=
name|accessToken
operator|.
name|getDnHandshakeSecret
argument_list|()
decl_stmt|;
if|if
condition|(
name|handshakeSecret
operator|==
literal|null
operator|||
name|handshakeSecret
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Handshake secret is null, sending without "
operator|+
literal|"handshake secret."
argument_list|)
expr_stmt|;
name|sendSaslMessage
argument_list|(
name|out
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sending handshake secret."
argument_list|)
expr_stmt|;
name|BlockTokenIdentifier
name|identifier
init|=
operator|new
name|BlockTokenIdentifier
argument_list|()
decl_stmt|;
name|identifier
operator|.
name|readFields
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|accessToken
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|bpid
init|=
name|identifier
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|sendSaslMessageHandshakeSecret
argument_list|(
name|out
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|handshakeSecret
argument_list|,
name|bpid
argument_list|)
expr_stmt|;
block|}
comment|// step 1
name|byte
index|[]
name|remoteResponse
init|=
name|readSaslMessage
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|byte
index|[]
name|localResponse
init|=
name|sasl
operator|.
name|evaluateChallengeOrResponse
argument_list|(
name|remoteResponse
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CipherOption
argument_list|>
name|cipherOptions
init|=
literal|null
decl_stmt|;
name|String
name|cipherSuites
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestedQopContainsPrivacy
argument_list|(
name|saslProps
argument_list|)
condition|)
block|{
comment|// Negotiate cipher suites if configured.  Currently, the only supported
comment|// cipher suite is AES/CTR/NoPadding, but the protocol allows multiple
comment|// values for future expansion.
if|if
condition|(
name|cipherSuites
operator|!=
literal|null
operator|&&
operator|!
name|cipherSuites
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|cipherSuites
operator|.
name|equals
argument_list|(
name|CipherSuite
operator|.
name|AES_CTR_NOPADDING
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid cipher suite, %s=%s"
argument_list|,
name|DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY
argument_list|,
name|cipherSuites
argument_list|)
argument_list|)
throw|;
block|}
name|CipherOption
name|option
init|=
operator|new
name|CipherOption
argument_list|(
name|CipherSuite
operator|.
name|AES_CTR_NOPADDING
argument_list|)
decl_stmt|;
name|cipherOptions
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cipherOptions
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
block|}
name|sendSaslMessageAndNegotiationCipherOptions
argument_list|(
name|out
argument_list|,
name|localResponse
argument_list|,
name|cipherOptions
argument_list|)
expr_stmt|;
comment|// step 2 (client-side only)
name|SaslResponseWithNegotiatedCipherOption
name|response
init|=
name|readSaslMessageAndNegotiatedCipherOption
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|localResponse
operator|=
name|sasl
operator|.
name|evaluateChallengeOrResponse
argument_list|(
name|response
operator|.
name|payload
argument_list|)
expr_stmt|;
assert|assert
name|localResponse
operator|==
literal|null
assert|;
comment|// SASL handshake is complete
name|checkSaslComplete
argument_list|(
name|sasl
argument_list|,
name|saslProps
argument_list|)
expr_stmt|;
name|CipherOption
name|cipherOption
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sasl
operator|.
name|isNegotiatedQopPrivacy
argument_list|()
condition|)
block|{
comment|// Unwrap the negotiated cipher option
name|cipherOption
operator|=
name|unwrap
argument_list|(
name|response
operator|.
name|cipherOption
argument_list|,
name|sasl
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|cipherOption
operator|==
literal|null
condition|)
block|{
comment|// No cipher suite is negotiated
if|if
condition|(
name|cipherSuites
operator|!=
literal|null
operator|&&
operator|!
name|cipherSuites
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// the client accepts some cipher suites, but the server does not.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Client accepts cipher suites {}, "
operator|+
literal|"but server {} does not accept any of them"
argument_list|,
name|cipherSuites
argument_list|,
name|addr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Client using cipher suite {} with server {}"
argument_list|,
name|cipherOption
operator|.
name|getCipherSuite
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|addr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// If negotiated cipher option is not null, we will use it to create
comment|// stream pair.
return|return
name|cipherOption
operator|!=
literal|null
condition|?
name|createStreamPair
argument_list|(
name|conf
argument_list|,
name|cipherOption
argument_list|,
name|underlyingOut
argument_list|,
name|underlyingIn
argument_list|,
literal|false
argument_list|)
else|:
name|sasl
operator|.
name|createStreamPair
argument_list|(
name|out
argument_list|,
name|in
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|sendGenericSaslErrorMessage
argument_list|(
name|out
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
block|}
end_class

end_unit

