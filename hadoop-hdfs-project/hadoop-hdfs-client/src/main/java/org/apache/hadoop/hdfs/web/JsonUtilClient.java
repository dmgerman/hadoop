begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsServerDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|MD5MD5CRC32CastagnoliFileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|MD5MD5CRC32FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|MD5MD5CRC32GzipFileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshottableDirectoryStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|DatanodeInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ChunkedArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|JsonUtilClient
class|class
name|JsonUtilClient
block|{
DECL|field|EMPTY_DATANODE_INFO_ARRAY
specifier|static
specifier|final
name|DatanodeInfo
index|[]
name|EMPTY_DATANODE_INFO_ARRAY
init|=
block|{}
decl_stmt|;
DECL|field|UNSUPPPORTED_EXCEPTION_STR
specifier|static
specifier|final
name|String
name|UNSUPPPORTED_EXCEPTION_STR
init|=
name|UnsupportedOperationException
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|/** Convert a Json map to a RemoteException. */
DECL|method|toRemoteException (final Map<?, ?> json)
specifier|static
name|RemoteException
name|toRemoteException
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|RemoteException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|message
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|javaClassName
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|UNSUPPPORTED_EXCEPTION_STR
operator|.
name|equals
argument_list|(
name|javaClassName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
operator|new
name|RemoteException
argument_list|(
name|javaClassName
argument_list|,
name|message
argument_list|)
return|;
block|}
comment|/** Convert a Json map to a Token. */
DECL|method|toToken ( final Map<?, ?> m)
specifier|static
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|toToken
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<>
argument_list|()
decl_stmt|;
name|token
operator|.
name|decodeFromUrlString
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"urlString"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
comment|/** Convert a Json map to a Token of BlockTokenIdentifier. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toBlockToken ( final Map<?, ?> m)
specifier|static
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|toBlockToken
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
operator|)
name|toToken
argument_list|(
name|m
argument_list|)
return|;
block|}
comment|/** Convert a string to a FsPermission object. */
DECL|method|toFsPermission (final String s)
specifier|static
name|FsPermission
name|toFsPermission
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
operator|==
name|s
condition|?
literal|null
else|:
operator|new
name|FsPermission
argument_list|(
name|Short
operator|.
name|parseShort
argument_list|(
name|s
argument_list|,
literal|8
argument_list|)
argument_list|)
return|;
block|}
comment|/** Convert a Json map to a HdfsFileStatus object. */
DECL|method|toFileStatus (final Map<?, ?> json, boolean includesType)
specifier|static
name|HdfsFileStatus
name|toFileStatus
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|,
name|boolean
name|includesType
parameter_list|)
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
name|includesType
condition|?
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|FileStatus
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
else|:
name|json
decl_stmt|;
specifier|final
name|String
name|localName
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"pathSuffix"
argument_list|)
decl_stmt|;
specifier|final
name|WebHdfsConstants
operator|.
name|PathType
name|type
init|=
name|WebHdfsConstants
operator|.
name|PathType
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|symlink
init|=
name|type
operator|!=
name|WebHdfsConstants
operator|.
name|PathType
operator|.
name|SYMLINK
condition|?
literal|null
else|:
name|DFSUtilClient
operator|.
name|string2Bytes
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"symlink"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|len
init|=
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"length"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
specifier|final
name|String
name|owner
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"owner"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|group
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
specifier|final
name|FsPermission
name|permission
init|=
name|toFsPermission
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"permission"
argument_list|)
argument_list|)
decl_stmt|;
name|Boolean
name|aclBit
init|=
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"aclBit"
argument_list|)
decl_stmt|;
name|Boolean
name|encBit
init|=
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"encBit"
argument_list|)
decl_stmt|;
name|Boolean
name|erasureBit
init|=
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"ecBit"
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|HdfsFileStatus
operator|.
name|Flags
argument_list|>
name|f
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|HdfsFileStatus
operator|.
name|Flags
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|aclBit
operator|!=
literal|null
operator|&&
name|aclBit
condition|)
block|{
name|f
operator|.
name|add
argument_list|(
name|HdfsFileStatus
operator|.
name|Flags
operator|.
name|HAS_ACL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|encBit
operator|!=
literal|null
operator|&&
name|encBit
condition|)
block|{
name|f
operator|.
name|add
argument_list|(
name|HdfsFileStatus
operator|.
name|Flags
operator|.
name|HAS_CRYPT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|erasureBit
operator|!=
literal|null
operator|&&
name|erasureBit
condition|)
block|{
name|f
operator|.
name|add
argument_list|(
name|HdfsFileStatus
operator|.
name|Flags
operator|.
name|HAS_EC
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|aTime
init|=
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"accessTime"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
specifier|final
name|long
name|mTime
init|=
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"modificationTime"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
specifier|final
name|long
name|blockSize
init|=
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"blockSize"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
specifier|final
name|short
name|replication
init|=
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"replication"
argument_list|)
operator|)
operator|.
name|shortValue
argument_list|()
decl_stmt|;
specifier|final
name|long
name|fileId
init|=
name|m
operator|.
name|containsKey
argument_list|(
literal|"fileId"
argument_list|)
condition|?
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"fileId"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
else|:
name|HdfsConstants
operator|.
name|GRANDFATHER_INODE_ID
decl_stmt|;
specifier|final
name|int
name|childrenNum
init|=
name|getInt
argument_list|(
name|m
argument_list|,
literal|"childrenNum"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|byte
name|storagePolicy
init|=
name|m
operator|.
name|containsKey
argument_list|(
literal|"storagePolicy"
argument_list|)
condition|?
call|(
name|byte
call|)
argument_list|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"storagePolicy"
argument_list|)
argument_list|)
operator|.
name|longValue
argument_list|()
else|:
name|HdfsConstants
operator|.
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
decl_stmt|;
return|return
operator|new
name|HdfsFileStatus
operator|.
name|Builder
argument_list|()
operator|.
name|length
argument_list|(
name|len
argument_list|)
operator|.
name|isdir
argument_list|(
name|type
operator|==
name|WebHdfsConstants
operator|.
name|PathType
operator|.
name|DIRECTORY
argument_list|)
operator|.
name|replication
argument_list|(
name|replication
argument_list|)
operator|.
name|blocksize
argument_list|(
name|blockSize
argument_list|)
operator|.
name|mtime
argument_list|(
name|mTime
argument_list|)
operator|.
name|atime
argument_list|(
name|aTime
argument_list|)
operator|.
name|perm
argument_list|(
name|permission
argument_list|)
operator|.
name|flags
argument_list|(
name|f
argument_list|)
operator|.
name|owner
argument_list|(
name|owner
argument_list|)
operator|.
name|group
argument_list|(
name|group
argument_list|)
operator|.
name|symlink
argument_list|(
name|symlink
argument_list|)
operator|.
name|path
argument_list|(
name|DFSUtilClient
operator|.
name|string2Bytes
argument_list|(
name|localName
argument_list|)
argument_list|)
operator|.
name|fileId
argument_list|(
name|fileId
argument_list|)
operator|.
name|children
argument_list|(
name|childrenNum
argument_list|)
operator|.
name|storagePolicy
argument_list|(
name|storagePolicy
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|toHdfsFileStatusArray (final Map<?, ?> json)
specifier|static
name|HdfsFileStatus
index|[]
name|toHdfsFileStatusArray
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|rootmap
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|FileStatus
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"es"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|array
init|=
name|JsonUtilClient
operator|.
name|getList
argument_list|(
name|rootmap
argument_list|,
name|FileStatus
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
comment|// convert FileStatus
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|array
argument_list|)
expr_stmt|;
specifier|final
name|HdfsFileStatus
index|[]
name|statuses
init|=
operator|new
name|HdfsFileStatus
index|[
name|array
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|array
control|)
block|{
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
name|statuses
index|[
name|i
operator|++
index|]
operator|=
name|JsonUtilClient
operator|.
name|toFileStatus
argument_list|(
name|m
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|statuses
return|;
block|}
DECL|method|toDirectoryListing (final Map<?, ?> json)
specifier|static
name|DirectoryListing
name|toDirectoryListing
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|listing
init|=
name|getMap
argument_list|(
name|json
argument_list|,
literal|"DirectoryListing"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|partialListing
init|=
name|getMap
argument_list|(
name|listing
argument_list|,
literal|"partialListing"
argument_list|)
decl_stmt|;
name|HdfsFileStatus
index|[]
name|fileStatuses
init|=
name|toHdfsFileStatusArray
argument_list|(
name|partialListing
argument_list|)
decl_stmt|;
name|int
name|remainingEntries
init|=
name|getInt
argument_list|(
name|listing
argument_list|,
literal|"remainingEntries"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|remainingEntries
operator|!=
operator|-
literal|1
argument_list|,
literal|"remainingEntries was not set"
argument_list|)
expr_stmt|;
return|return
operator|new
name|DirectoryListing
argument_list|(
name|fileStatuses
argument_list|,
name|remainingEntries
argument_list|)
return|;
block|}
comment|/** Convert a Json map to an ExtendedBlock object. */
DECL|method|toExtendedBlock (final Map<?, ?> m)
specifier|static
name|ExtendedBlock
name|toExtendedBlock
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|blockPoolId
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"blockPoolId"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|blockId
init|=
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"blockId"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
specifier|final
name|long
name|numBytes
init|=
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"numBytes"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
specifier|final
name|long
name|generationStamp
init|=
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"generationStamp"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
return|return
operator|new
name|ExtendedBlock
argument_list|(
name|blockPoolId
argument_list|,
name|blockId
argument_list|,
name|numBytes
argument_list|,
name|generationStamp
argument_list|)
return|;
block|}
DECL|method|getInt (Map<?, ?> m, String key, final int defaultValue)
specifier|static
name|int
name|getInt
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|,
name|String
name|key
parameter_list|,
specifier|final
name|int
name|defaultValue
parameter_list|)
block|{
name|Object
name|value
init|=
name|m
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
DECL|method|getLong (Map<?, ?> m, String key, final long defaultValue)
specifier|static
name|long
name|getLong
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|,
name|String
name|key
parameter_list|,
specifier|final
name|long
name|defaultValue
parameter_list|)
block|{
name|Object
name|value
init|=
name|m
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
DECL|method|getString ( Map<?, ?> m, String key, final String defaultValue)
specifier|static
name|String
name|getString
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|,
name|String
name|key
parameter_list|,
specifier|final
name|String
name|defaultValue
parameter_list|)
block|{
name|Object
name|value
init|=
name|m
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
return|return
operator|(
name|String
operator|)
name|value
return|;
block|}
DECL|method|getList (Map<?, ?> m, String key)
specifier|static
name|List
argument_list|<
name|?
argument_list|>
name|getList
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|Object
name|list
init|=
name|m
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|instanceof
name|List
argument_list|<
name|?
argument_list|>
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|list
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getMap (Map<?, ?> m, String key)
specifier|static
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|getMap
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|Object
name|map
init|=
name|m
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|instanceof
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
return|return
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|map
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** Convert a Json map to an DatanodeInfo object. */
DECL|method|toDatanodeInfo (final Map<?, ?> m)
specifier|static
name|DatanodeInfo
name|toDatanodeInfo
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// ipAddr and xferPort are the critical fields for accessing data.
comment|// If any one of the two is missing, an exception needs to be thrown.
comment|// Handle the case of old servers (1.x, 0.23.x) sending 'name' instead
comment|//  of ipAddr and xferPort.
name|String
name|ipAddr
init|=
name|getString
argument_list|(
name|m
argument_list|,
literal|"ipAddr"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|xferPort
init|=
name|getInt
argument_list|(
name|m
argument_list|,
literal|"xferPort"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|ipAddr
operator|==
literal|null
condition|)
block|{
name|String
name|name
init|=
name|getString
argument_list|(
name|m
argument_list|,
literal|"name"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|int
name|colonIdx
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|colonIdx
operator|>
literal|0
condition|)
block|{
name|ipAddr
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colonIdx
argument_list|)
expr_stmt|;
name|xferPort
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|colonIdx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid value in server response: name=["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing both 'ipAddr' and 'name' in server response."
argument_list|)
throw|;
block|}
comment|// ipAddr is non-null& non-empty string at this point.
block|}
comment|// Check the validity of xferPort.
if|if
condition|(
name|xferPort
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid or missing 'xferPort' in server response."
argument_list|)
throw|;
block|}
comment|// TODO: Fix storageID
return|return
operator|new
name|DatanodeInfoBuilder
argument_list|()
operator|.
name|setIpAddr
argument_list|(
name|ipAddr
argument_list|)
operator|.
name|setHostName
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"hostName"
argument_list|)
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"storageID"
argument_list|)
argument_list|)
operator|.
name|setXferPort
argument_list|(
name|xferPort
argument_list|)
operator|.
name|setInfoPort
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"infoPort"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|setInfoSecurePort
argument_list|(
name|getInt
argument_list|(
name|m
argument_list|,
literal|"infoSecurePort"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|setIpcPort
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"ipcPort"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|getLong
argument_list|(
name|m
argument_list|,
literal|"capacity"
argument_list|,
literal|0L
argument_list|)
argument_list|)
operator|.
name|setDfsUsed
argument_list|(
name|getLong
argument_list|(
name|m
argument_list|,
literal|"dfsUsed"
argument_list|,
literal|0L
argument_list|)
argument_list|)
operator|.
name|setRemaining
argument_list|(
name|getLong
argument_list|(
name|m
argument_list|,
literal|"remaining"
argument_list|,
literal|0L
argument_list|)
argument_list|)
operator|.
name|setBlockPoolUsed
argument_list|(
name|getLong
argument_list|(
name|m
argument_list|,
literal|"blockPoolUsed"
argument_list|,
literal|0L
argument_list|)
argument_list|)
operator|.
name|setCacheCapacity
argument_list|(
name|getLong
argument_list|(
name|m
argument_list|,
literal|"cacheCapacity"
argument_list|,
literal|0L
argument_list|)
argument_list|)
operator|.
name|setCacheUsed
argument_list|(
name|getLong
argument_list|(
name|m
argument_list|,
literal|"cacheUsed"
argument_list|,
literal|0L
argument_list|)
argument_list|)
operator|.
name|setLastUpdate
argument_list|(
name|getLong
argument_list|(
name|m
argument_list|,
literal|"lastUpdate"
argument_list|,
literal|0L
argument_list|)
argument_list|)
operator|.
name|setLastUpdateMonotonic
argument_list|(
name|getLong
argument_list|(
name|m
argument_list|,
literal|"lastUpdateMonotonic"
argument_list|,
literal|0L
argument_list|)
argument_list|)
operator|.
name|setXceiverCount
argument_list|(
name|getInt
argument_list|(
name|m
argument_list|,
literal|"xceiverCount"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|setNetworkLocation
argument_list|(
name|getString
argument_list|(
name|m
argument_list|,
literal|"networkLocation"
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|setAdminState
argument_list|(
name|DatanodeInfo
operator|.
name|AdminStates
operator|.
name|valueOf
argument_list|(
name|getString
argument_list|(
name|m
argument_list|,
literal|"adminState"
argument_list|,
literal|"NORMAL"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setUpgradeDomain
argument_list|(
name|getString
argument_list|(
name|m
argument_list|,
literal|"upgradeDomain"
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|setLastBlockReportTime
argument_list|(
name|getLong
argument_list|(
name|m
argument_list|,
literal|"lastBlockReportTime"
argument_list|,
literal|0L
argument_list|)
argument_list|)
operator|.
name|setLastBlockReportMonotonic
argument_list|(
name|getLong
argument_list|(
name|m
argument_list|,
literal|"lastBlockReportMonotonic"
argument_list|,
literal|0L
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/** Convert an Object[] to a DatanodeInfo[]. */
DECL|method|toDatanodeInfoArray (final List<?> objects)
specifier|static
name|DatanodeInfo
index|[]
name|toDatanodeInfoArray
parameter_list|(
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|objects
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|objects
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|objects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|EMPTY_DATANODE_INFO_ARRAY
return|;
block|}
else|else
block|{
specifier|final
name|DatanodeInfo
index|[]
name|array
init|=
operator|new
name|DatanodeInfo
index|[
name|objects
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|objects
control|)
block|{
name|array
index|[
name|i
operator|++
index|]
operator|=
name|toDatanodeInfo
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
block|}
comment|/** Convert an Object[] to a StorageType[]. */
DECL|method|toStorageTypeArray (final List<?> objects)
specifier|static
name|StorageType
index|[]
name|toStorageTypeArray
parameter_list|(
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|objects
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|objects
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|objects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|StorageType
operator|.
name|EMPTY_ARRAY
return|;
block|}
else|else
block|{
specifier|final
name|StorageType
index|[]
name|array
init|=
operator|new
name|StorageType
index|[
name|objects
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|objects
control|)
block|{
name|array
index|[
name|i
operator|++
index|]
operator|=
name|StorageType
operator|.
name|parseStorageType
argument_list|(
name|object
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
block|}
comment|/** Convert a Json map to LocatedBlock. */
DECL|method|toLocatedBlock (final Map<?, ?> m)
specifier|static
name|LocatedBlock
name|toLocatedBlock
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|ExtendedBlock
name|b
init|=
name|toExtendedBlock
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"block"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DatanodeInfo
index|[]
name|locations
init|=
name|toDatanodeInfoArray
argument_list|(
name|getList
argument_list|(
name|m
argument_list|,
literal|"locations"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|startOffset
init|=
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"startOffset"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|isCorrupt
init|=
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"isCorrupt"
argument_list|)
decl_stmt|;
specifier|final
name|DatanodeInfo
index|[]
name|cachedLocations
init|=
name|toDatanodeInfoArray
argument_list|(
name|getList
argument_list|(
name|m
argument_list|,
literal|"cachedLocations"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|StorageType
index|[]
name|storageTypes
init|=
name|toStorageTypeArray
argument_list|(
name|getList
argument_list|(
name|m
argument_list|,
literal|"storageTypes"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|LocatedBlock
name|locatedblock
init|=
operator|new
name|LocatedBlock
argument_list|(
name|b
argument_list|,
name|locations
argument_list|,
literal|null
argument_list|,
name|storageTypes
argument_list|,
name|startOffset
argument_list|,
name|isCorrupt
argument_list|,
name|cachedLocations
argument_list|)
decl_stmt|;
name|locatedblock
operator|.
name|setBlockToken
argument_list|(
name|toBlockToken
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"blockToken"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|locatedblock
return|;
block|}
comment|/** Convert an List of Object to a List of LocatedBlock. */
DECL|method|toLocatedBlockList ( final List<?> objects)
specifier|static
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|toLocatedBlockList
parameter_list|(
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|objects
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|objects
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|objects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|objects
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|objects
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|toLocatedBlock
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|object
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
comment|/** Convert a Json map to a ContentSummary. */
DECL|method|toContentSummary (final Map<?, ?> json)
specifier|static
name|ContentSummary
name|toContentSummary
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|ContentSummary
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|length
init|=
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"length"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
specifier|final
name|long
name|fileCount
init|=
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"fileCount"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
specifier|final
name|long
name|directoryCount
init|=
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"directoryCount"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
specifier|final
name|long
name|quota
init|=
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"quota"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
specifier|final
name|long
name|spaceConsumed
init|=
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"spaceConsumed"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
specifier|final
name|long
name|spaceQuota
init|=
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"spaceQuota"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|typem
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"typeQuota"
argument_list|)
decl_stmt|;
name|ContentSummary
operator|.
name|Builder
name|contentSummaryBuilder
init|=
operator|new
name|ContentSummary
operator|.
name|Builder
argument_list|()
operator|.
name|length
argument_list|(
name|length
argument_list|)
operator|.
name|fileCount
argument_list|(
name|fileCount
argument_list|)
operator|.
name|directoryCount
argument_list|(
name|directoryCount
argument_list|)
operator|.
name|quota
argument_list|(
name|quota
argument_list|)
operator|.
name|spaceConsumed
argument_list|(
name|spaceConsumed
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|spaceQuota
argument_list|)
decl_stmt|;
if|if
condition|(
name|typem
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StorageType
name|t
range|:
name|StorageType
operator|.
name|getTypesSupportingQuota
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|type
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|typem
operator|.
name|get
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|contentSummaryBuilder
operator|=
name|contentSummaryBuilder
operator|.
name|typeQuota
argument_list|(
name|t
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|type
operator|.
name|get
argument_list|(
literal|"quota"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|typeConsumed
argument_list|(
name|t
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|type
operator|.
name|get
argument_list|(
literal|"consumed"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|contentSummaryBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/** Convert a Json map to a MD5MD5CRC32FileChecksum. */
DECL|method|toMD5MD5CRC32FileChecksum ( final Map<?, ?> json)
specifier|static
name|MD5MD5CRC32FileChecksum
name|toMD5MD5CRC32FileChecksum
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|FileChecksum
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|algorithm
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"algorithm"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|length
init|=
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"length"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|StringUtils
operator|.
name|hexStringToByte
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"bytes"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DataChecksum
operator|.
name|Type
name|crcType
init|=
name|MD5MD5CRC32FileChecksum
operator|.
name|getCrcTypeFromAlgorithmName
argument_list|(
name|algorithm
argument_list|)
decl_stmt|;
specifier|final
name|MD5MD5CRC32FileChecksum
name|checksum
decl_stmt|;
comment|// Recreate what DFSClient would have returned.
switch|switch
condition|(
name|crcType
condition|)
block|{
case|case
name|CRC32
case|:
name|checksum
operator|=
operator|new
name|MD5MD5CRC32GzipFileChecksum
argument_list|()
expr_stmt|;
break|break;
case|case
name|CRC32C
case|:
name|checksum
operator|=
operator|new
name|MD5MD5CRC32CastagnoliFileChecksum
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown algorithm: "
operator|+
name|algorithm
argument_list|)
throw|;
block|}
name|checksum
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|//check algorithm name
if|if
condition|(
operator|!
name|checksum
operator|.
name|getAlgorithmName
argument_list|()
operator|.
name|equals
argument_list|(
name|algorithm
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Algorithm not matched. Expected "
operator|+
name|algorithm
operator|+
literal|", Received "
operator|+
name|checksum
operator|.
name|getAlgorithmName
argument_list|()
argument_list|)
throw|;
block|}
comment|//check length
if|if
condition|(
name|length
operator|!=
name|checksum
operator|.
name|getLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Length not matched: length="
operator|+
name|length
operator|+
literal|", checksum.getLength()="
operator|+
name|checksum
operator|.
name|getLength
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|checksum
return|;
block|}
comment|/** Convert a Json map to a AclStatus object. */
DECL|method|toAclStatus (final Map<?, ?> json)
specifier|static
name|AclStatus
name|toAclStatus
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|AclStatus
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|AclStatus
operator|.
name|Builder
name|aclStatusBuilder
init|=
operator|new
name|AclStatus
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|aclStatusBuilder
operator|.
name|owner
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"owner"
argument_list|)
argument_list|)
expr_stmt|;
name|aclStatusBuilder
operator|.
name|group
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"group"
argument_list|)
argument_list|)
expr_stmt|;
name|aclStatusBuilder
operator|.
name|stickyBit
argument_list|(
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"stickyBit"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|permString
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"permission"
argument_list|)
decl_stmt|;
if|if
condition|(
name|permString
operator|!=
literal|null
condition|)
block|{
specifier|final
name|FsPermission
name|permission
init|=
name|toFsPermission
argument_list|(
name|permString
argument_list|)
decl_stmt|;
name|aclStatusBuilder
operator|.
name|setPermission
argument_list|(
name|permission
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|entries
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"entries"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclEntryList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|entry
range|:
name|entries
control|)
block|{
name|AclEntry
name|aclEntry
init|=
name|AclEntry
operator|.
name|parseAclEntry
argument_list|(
operator|(
name|String
operator|)
name|entry
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|aclEntryList
operator|.
name|add
argument_list|(
name|aclEntry
argument_list|)
expr_stmt|;
block|}
name|aclStatusBuilder
operator|.
name|addEntries
argument_list|(
name|aclEntryList
argument_list|)
expr_stmt|;
return|return
name|aclStatusBuilder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getPath (final Map<?, ?> json)
specifier|static
name|String
name|getPath
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"Path"
argument_list|)
return|;
block|}
DECL|method|getXAttr (final Map<?, ?> json, final String name)
specifier|static
name|byte
index|[]
name|getXAttr
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrs
init|=
name|toXAttrs
argument_list|(
name|json
argument_list|)
decl_stmt|;
if|if
condition|(
name|xAttrs
operator|!=
literal|null
condition|)
block|{
return|return
name|xAttrs
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Expecting only single XAttr in the map. return its value */
DECL|method|getXAttr (final Map<?, ?> json)
specifier|static
name|byte
index|[]
name|getXAttr
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrs
init|=
name|toXAttrs
argument_list|(
name|json
argument_list|)
decl_stmt|;
if|if
condition|(
name|xAttrs
operator|!=
literal|null
operator|&&
operator|!
name|xAttrs
operator|.
name|values
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|xAttrs
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|toXAttrs (final Map<?, ?> json)
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|toXAttrs
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|toXAttrMap
argument_list|(
name|getList
argument_list|(
name|json
argument_list|,
literal|"XAttrs"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toXAttrNames (final Map<?, ?> json)
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|toXAttrNames
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|namesInJson
init|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"XAttrNames"
argument_list|)
decl_stmt|;
name|ObjectReader
name|reader
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|readerFor
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|xattrs
init|=
name|reader
operator|.
name|readValue
argument_list|(
name|namesInJson
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|json
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|xattr
range|:
name|xattrs
control|)
block|{
name|names
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|xattr
argument_list|)
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
DECL|method|toXAttrMap (final List<?> objects)
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|toXAttrMap
parameter_list|(
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|objects
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|objects
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|objects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Maps
operator|.
name|newHashMap
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrs
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|objects
control|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|xAttrs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|decodeXAttrValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|xAttrs
return|;
block|}
block|}
DECL|method|decodeXAttrValue (String value)
specifier|static
name|byte
index|[]
name|decodeXAttrValue
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|XAttrCodec
operator|.
name|decodeValue
argument_list|(
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
block|}
comment|/** Convert a Json map to a Token of DelegationTokenIdentifier. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toDelegationToken ( final Map<?, ?> json)
specifier|static
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|toDelegationToken
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|Token
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
operator|)
name|toToken
argument_list|(
name|m
argument_list|)
return|;
block|}
comment|/** Convert a Json map to LocatedBlock. */
DECL|method|toLocatedBlocks ( final Map<?, ?> json)
specifier|static
name|LocatedBlocks
name|toLocatedBlocks
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|LocatedBlocks
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|fileLength
init|=
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"fileLength"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|isUnderConstruction
init|=
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"isUnderConstruction"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|locatedBlocks
init|=
name|toLocatedBlockList
argument_list|(
name|getList
argument_list|(
name|m
argument_list|,
literal|"locatedBlocks"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|LocatedBlock
name|lastLocatedBlock
init|=
name|toLocatedBlock
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"lastLocatedBlock"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isLastBlockComplete
init|=
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"isLastBlockComplete"
argument_list|)
decl_stmt|;
return|return
operator|new
name|LocatedBlocks
argument_list|(
name|fileLength
argument_list|,
name|isUnderConstruction
argument_list|,
name|locatedBlocks
argument_list|,
name|lastLocatedBlock
argument_list|,
name|isLastBlockComplete
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getStoragePolicies ( Map<?, ?> json)
specifier|public
specifier|static
name|Collection
argument_list|<
name|BlockStoragePolicy
argument_list|>
name|getStoragePolicies
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|policiesJson
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"BlockStoragePolicies"
argument_list|)
decl_stmt|;
if|if
condition|(
name|policiesJson
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|objs
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|policiesJson
operator|.
name|get
argument_list|(
name|BlockStoragePolicy
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|objs
operator|!=
literal|null
condition|)
block|{
name|BlockStoragePolicy
index|[]
name|storagePolicies
init|=
operator|new
name|BlockStoragePolicy
index|[
name|objs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|objs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BlockStoragePolicy
name|blockStoragePolicy
init|=
name|toBlockStoragePolicy
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|storagePolicies
index|[
name|i
index|]
operator|=
name|blockStoragePolicy
expr_stmt|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|storagePolicies
argument_list|)
return|;
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|BlockStoragePolicy
argument_list|>
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|toBlockStoragePolicy (Map<?, ?> m)
specifier|public
specifier|static
name|BlockStoragePolicy
name|toBlockStoragePolicy
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
block|{
name|byte
name|id
init|=
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|)
operator|.
name|byteValue
argument_list|()
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|StorageType
index|[]
name|storageTypes
init|=
name|toStorageTypes
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"storageTypes"
argument_list|)
argument_list|)
decl_stmt|;
name|StorageType
index|[]
name|creationFallbacks
init|=
name|toStorageTypes
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"creationFallbacks"
argument_list|)
argument_list|)
decl_stmt|;
name|StorageType
index|[]
name|replicationFallbacks
init|=
name|toStorageTypes
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"replicationFallbacks"
argument_list|)
argument_list|)
decl_stmt|;
name|Boolean
name|copyOnCreateFile
init|=
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"copyOnCreateFile"
argument_list|)
decl_stmt|;
return|return
operator|new
name|BlockStoragePolicy
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|storageTypes
argument_list|,
name|creationFallbacks
argument_list|,
name|replicationFallbacks
argument_list|,
name|copyOnCreateFile
operator|.
name|booleanValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toStorageTypes (List<?> list)
specifier|private
specifier|static
name|StorageType
index|[]
name|toStorageTypes
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|StorageType
index|[]
name|storageTypes
init|=
operator|new
name|StorageType
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|storageTypes
index|[
name|i
index|]
operator|=
name|StorageType
operator|.
name|parseStorageType
argument_list|(
operator|(
name|String
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|storageTypes
return|;
block|}
block|}
comment|/*    * The parameters which have default value -1 are required fields according    * to hdfs.proto.    * The default values for optional fields are taken from    * hdfs.proto#FsServerDefaultsProto.    */
DECL|method|toFsServerDefaults (final Map<?, ?> json)
specifier|public
specifier|static
name|FsServerDefaults
name|toFsServerDefaults
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|FsServerDefaults
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|blockSize
init|=
name|getLong
argument_list|(
name|m
argument_list|,
literal|"blockSize"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|bytesPerChecksum
init|=
name|getInt
argument_list|(
name|m
argument_list|,
literal|"bytesPerChecksum"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|writePacketSize
init|=
name|getInt
argument_list|(
name|m
argument_list|,
literal|"writePacketSize"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|short
name|replication
init|=
operator|(
name|short
operator|)
name|getInt
argument_list|(
name|m
argument_list|,
literal|"replication"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|fileBufferSize
init|=
name|getInt
argument_list|(
name|m
argument_list|,
literal|"fileBufferSize"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|encryptDataTransfer
init|=
name|m
operator|.
name|containsKey
argument_list|(
literal|"encryptDataTransfer"
argument_list|)
condition|?
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"encryptDataTransfer"
argument_list|)
else|:
literal|false
decl_stmt|;
name|long
name|trashInterval
init|=
name|getLong
argument_list|(
name|m
argument_list|,
literal|"trashInterval"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DataChecksum
operator|.
name|Type
name|type
init|=
name|DataChecksum
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|getInt
argument_list|(
name|m
argument_list|,
literal|"checksumType"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|keyProviderUri
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"keyProviderUri"
argument_list|)
decl_stmt|;
name|byte
name|storagepolicyId
init|=
name|m
operator|.
name|containsKey
argument_list|(
literal|"defaultStoragePolicyId"
argument_list|)
condition|?
operator|(
operator|(
name|Number
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"defaultStoragePolicyId"
argument_list|)
operator|)
operator|.
name|byteValue
argument_list|()
else|:
name|HdfsConstants
operator|.
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
decl_stmt|;
return|return
operator|new
name|FsServerDefaults
argument_list|(
name|blockSize
argument_list|,
name|bytesPerChecksum
argument_list|,
name|writePacketSize
argument_list|,
name|replication
argument_list|,
name|fileBufferSize
argument_list|,
name|encryptDataTransfer
argument_list|,
name|trashInterval
argument_list|,
name|type
argument_list|,
name|keyProviderUri
argument_list|,
name|storagepolicyId
argument_list|)
return|;
block|}
DECL|method|toSnapshotDiffReport (final Map<?, ?> json)
specifier|public
specifier|static
name|SnapshotDiffReport
name|toSnapshotDiffReport
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|SnapshotDiffReport
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|snapshotRoot
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"snapshotRoot"
argument_list|)
decl_stmt|;
name|String
name|fromSnapshot
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"fromSnapshot"
argument_list|)
decl_stmt|;
name|String
name|toSnapshot
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"toSnapshot"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SnapshotDiffReport
operator|.
name|DiffReportEntry
argument_list|>
name|diffList
init|=
name|toDiffList
argument_list|(
name|getList
argument_list|(
name|m
argument_list|,
literal|"diffList"
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SnapshotDiffReport
argument_list|(
name|snapshotRoot
argument_list|,
name|fromSnapshot
argument_list|,
name|toSnapshot
argument_list|,
name|diffList
argument_list|)
return|;
block|}
DECL|method|toDiffList ( List<?> objs)
specifier|private
specifier|static
name|List
argument_list|<
name|SnapshotDiffReport
operator|.
name|DiffReportEntry
argument_list|>
name|toDiffList
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|objs
parameter_list|)
block|{
if|if
condition|(
name|objs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|SnapshotDiffReport
operator|.
name|DiffReportEntry
argument_list|>
name|diffList
init|=
operator|new
name|ChunkedArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|diffList
operator|.
name|add
argument_list|(
name|toDiffReportEntry
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|objs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|diffList
return|;
block|}
DECL|method|toDiffReportEntry ( Map<?, ?> json)
specifier|private
specifier|static
name|SnapshotDiffReport
operator|.
name|DiffReportEntry
name|toDiffReportEntry
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SnapshotDiffReport
operator|.
name|DiffType
name|type
init|=
name|SnapshotDiffReport
operator|.
name|DiffType
operator|.
name|parseDiffType
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sourcePath
init|=
name|toByteArray
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"sourcePath"
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|targetPath
init|=
name|toByteArray
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"targetPath"
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SnapshotDiffReport
operator|.
name|DiffReportEntry
argument_list|(
name|type
argument_list|,
name|sourcePath
argument_list|,
name|targetPath
argument_list|)
return|;
block|}
DECL|method|toByteArray (String str)
specifier|private
specifier|static
name|byte
index|[]
name|toByteArray
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|DFSUtilClient
operator|.
name|string2Bytes
argument_list|(
name|str
argument_list|)
return|;
block|}
DECL|method|toSnapshottableDirectoryList ( final Map<?, ?> json)
specifier|public
specifier|static
name|SnapshottableDirectoryStatus
index|[]
name|toSnapshottableDirectoryList
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"SnapshottableDirectoryList"
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SnapshottableDirectoryStatus
index|[]
name|statuses
init|=
operator|new
name|SnapshottableDirectoryStatus
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|statuses
index|[
name|i
index|]
operator|=
name|toSnapshottableDirectoryStatus
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|statuses
return|;
block|}
DECL|method|toSnapshottableDirectoryStatus ( Map<?, ?> json)
specifier|private
specifier|static
name|SnapshottableDirectoryStatus
name|toSnapshottableDirectoryStatus
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|snapshotNumber
init|=
name|getInt
argument_list|(
name|json
argument_list|,
literal|"snapshotNumber"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|snapshotQuota
init|=
name|getInt
argument_list|(
name|json
argument_list|,
literal|"snapshotQuota"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|parentFullPath
init|=
name|toByteArray
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"parentFullPath"
argument_list|)
argument_list|)
decl_stmt|;
name|HdfsFileStatus
name|dirStatus
init|=
name|toFileStatus
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"dirStatus"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SnapshottableDirectoryStatus
name|snapshottableDirectoryStatus
init|=
operator|new
name|SnapshottableDirectoryStatus
argument_list|(
name|dirStatus
argument_list|,
name|snapshotNumber
argument_list|,
name|snapshotQuota
argument_list|,
name|parentFullPath
argument_list|)
decl_stmt|;
return|return
name|snapshottableDirectoryStatus
return|;
block|}
block|}
end_class

end_unit

