begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmKeyLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|XceiverClientSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|storage
operator|.
name|ChunkOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|storage
operator|.
name|ContainerProtocolCalls
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Maintaining a list of ChunkInputStream. Write based on offset.  *  * Note that this may write to multiple containers in one write call. In case  * that first container succeeded but later ones failed, the succeeded writes  * are not rolled back.  *  * TODO : currently not support multi-thread access.  */
end_comment

begin_class
DECL|class|ChunkGroupOutputStream
specifier|public
class|class
name|ChunkGroupOutputStream
extends|extends
name|OutputStream
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChunkGroupOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// array list's get(index) is O(1)
DECL|field|streamEntries
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|ChunkOutputStreamEntry
argument_list|>
name|streamEntries
decl_stmt|;
DECL|field|currentStreamIndex
specifier|private
name|int
name|currentStreamIndex
decl_stmt|;
DECL|field|totalSize
specifier|private
name|long
name|totalSize
decl_stmt|;
DECL|field|byteOffset
specifier|private
name|long
name|byteOffset
decl_stmt|;
comment|//This has to be removed once HDFS-11888 is resolved.
comment|//local cache which will have list of created container names.
DECL|field|containersCreated
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|containersCreated
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|ChunkGroupOutputStream ()
specifier|public
name|ChunkGroupOutputStream
parameter_list|()
block|{
name|this
operator|.
name|streamEntries
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentStreamIndex
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|totalSize
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|byteOffset
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getByteOffset ()
specifier|public
name|long
name|getByteOffset
parameter_list|()
block|{
return|return
name|byteOffset
return|;
block|}
comment|/**    * Append another stream to the end of the list. Note that the streams are not    * actually created to this point, only enough meta data about the stream is    * stored. When something is to be actually written to the stream, the stream    * will be created (if not already).    *    * @param containerKey the key to store in the container    * @param key the ozone key    * @param xceiverClientManager xceiver manager instance    * @param xceiverClient xceiver manager instance    * @param requestID the request id    * @param chunkSize the chunk size for this key chunks    * @param length the total length of this key    */
DECL|method|addStream (String containerKey, String key, XceiverClientManager xceiverClientManager, XceiverClientSpi xceiverClient, String requestID, int chunkSize, long length)
specifier|public
specifier|synchronized
name|void
name|addStream
parameter_list|(
name|String
name|containerKey
parameter_list|,
name|String
name|key
parameter_list|,
name|XceiverClientManager
name|xceiverClientManager
parameter_list|,
name|XceiverClientSpi
name|xceiverClient
parameter_list|,
name|String
name|requestID
parameter_list|,
name|int
name|chunkSize
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|streamEntries
operator|.
name|add
argument_list|(
operator|new
name|ChunkOutputStreamEntry
argument_list|(
name|containerKey
argument_list|,
name|key
argument_list|,
name|xceiverClientManager
argument_list|,
name|xceiverClient
argument_list|,
name|requestID
argument_list|,
name|chunkSize
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|totalSize
operator|+=
name|length
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|addStream (OutputStream outputStream, long length)
specifier|public
specifier|synchronized
name|void
name|addStream
parameter_list|(
name|OutputStream
name|outputStream
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|streamEntries
operator|.
name|add
argument_list|(
operator|new
name|ChunkOutputStreamEntry
argument_list|(
name|outputStream
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|totalSize
operator|+=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|streamEntries
operator|.
name|size
argument_list|()
operator|<=
name|currentStreamIndex
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
name|ChunkOutputStreamEntry
name|entry
init|=
name|streamEntries
operator|.
name|get
argument_list|(
name|currentStreamIndex
argument_list|)
decl_stmt|;
name|entry
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getRemaining
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|currentStreamIndex
operator|+=
literal|1
expr_stmt|;
block|}
name|byteOffset
operator|+=
literal|1
expr_stmt|;
block|}
comment|/**    * Try to write the bytes sequence b[off:off+len) to streams.    *    * NOTE: Throws exception if the data could not fit into the remaining space.    * In which case nothing will be written.    * TODO:May need to revisit this behaviour.    *    * @param b byte data    * @param off starting offset    * @param len length to write    * @throws IOException    */
annotation|@
name|Override
DECL|method|write (byte[] b, int off, int len)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|(
name|off
operator|<
literal|0
operator|)
operator|||
operator|(
name|off
operator|>
name|b
operator|.
name|length
operator|)
operator|||
operator|(
name|len
operator|<
literal|0
operator|)
operator|||
operator|(
operator|(
name|off
operator|+
name|len
operator|)
operator|>
name|b
operator|.
name|length
operator|)
operator|||
operator|(
operator|(
name|off
operator|+
name|len
operator|)
operator|<
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|streamEntries
operator|.
name|size
argument_list|()
operator|<=
name|currentStreamIndex
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Write out of stream range! stream index:"
operator|+
name|currentStreamIndex
argument_list|)
throw|;
block|}
if|if
condition|(
name|totalSize
operator|-
name|byteOffset
operator|<
name|len
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not write "
operator|+
name|len
operator|+
literal|" bytes with only "
operator|+
operator|(
name|totalSize
operator|-
name|byteOffset
operator|)
operator|+
literal|" byte space"
argument_list|)
throw|;
block|}
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
comment|// in theory, this condition should never violate due the check above
comment|// still do a sanity check.
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|currentStreamIndex
operator|<
name|streamEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ChunkOutputStreamEntry
name|current
init|=
name|streamEntries
operator|.
name|get
argument_list|(
name|currentStreamIndex
argument_list|)
decl_stmt|;
name|int
name|writeLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
operator|(
name|int
operator|)
name|current
operator|.
name|getRemaining
argument_list|()
argument_list|)
decl_stmt|;
name|current
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|writeLen
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|getRemaining
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|currentStreamIndex
operator|+=
literal|1
expr_stmt|;
block|}
name|len
operator|-=
name|writeLen
expr_stmt|;
name|off
operator|+=
name|writeLen
expr_stmt|;
name|byteOffset
operator|+=
name|writeLen
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
specifier|synchronized
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|currentStreamIndex
condition|;
name|i
operator|++
control|)
block|{
name|streamEntries
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|ChunkOutputStreamEntry
name|entry
range|:
name|streamEntries
control|)
block|{
name|entry
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ChunkOutputStreamEntry
specifier|private
specifier|static
class|class
name|ChunkOutputStreamEntry
extends|extends
name|OutputStream
block|{
DECL|field|outputStream
specifier|private
name|OutputStream
name|outputStream
decl_stmt|;
DECL|field|containerKey
specifier|private
specifier|final
name|String
name|containerKey
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|xceiverClientManager
specifier|private
specifier|final
name|XceiverClientManager
name|xceiverClientManager
decl_stmt|;
DECL|field|xceiverClient
specifier|private
specifier|final
name|XceiverClientSpi
name|xceiverClient
decl_stmt|;
DECL|field|requestId
specifier|private
specifier|final
name|String
name|requestId
decl_stmt|;
DECL|field|chunkSize
specifier|private
specifier|final
name|int
name|chunkSize
decl_stmt|;
comment|// total number of bytes that should be written to this stream
DECL|field|length
specifier|private
specifier|final
name|long
name|length
decl_stmt|;
comment|// the current position of this stream 0<= currentPosition< length
DECL|field|currentPosition
specifier|private
name|long
name|currentPosition
decl_stmt|;
DECL|method|ChunkOutputStreamEntry (String containerKey, String key, XceiverClientManager xceiverClientManager, XceiverClientSpi xceiverClient, String requestId, int chunkSize, long length)
name|ChunkOutputStreamEntry
parameter_list|(
name|String
name|containerKey
parameter_list|,
name|String
name|key
parameter_list|,
name|XceiverClientManager
name|xceiverClientManager
parameter_list|,
name|XceiverClientSpi
name|xceiverClient
parameter_list|,
name|String
name|requestId
parameter_list|,
name|int
name|chunkSize
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|this
operator|.
name|outputStream
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|containerKey
operator|=
name|containerKey
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|xceiverClientManager
operator|=
name|xceiverClientManager
expr_stmt|;
name|this
operator|.
name|xceiverClient
operator|=
name|xceiverClient
expr_stmt|;
name|this
operator|.
name|requestId
operator|=
name|requestId
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
name|chunkSize
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|currentPosition
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * For testing purpose, taking a some random created stream instance.      * @param  outputStream a existing writable output stream      * @param  length the length of data to write to the stream      */
DECL|method|ChunkOutputStreamEntry (OutputStream outputStream, long length)
name|ChunkOutputStreamEntry
parameter_list|(
name|OutputStream
name|outputStream
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|this
operator|.
name|outputStream
operator|=
name|outputStream
expr_stmt|;
name|this
operator|.
name|containerKey
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|key
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|xceiverClientManager
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|xceiverClient
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|requestId
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|currentPosition
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|getLength ()
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
DECL|method|getRemaining ()
name|long
name|getRemaining
parameter_list|()
block|{
return|return
name|length
operator|-
name|currentPosition
return|;
block|}
DECL|method|checkStream ()
specifier|private
specifier|synchronized
name|void
name|checkStream
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|outputStream
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|outputStream
operator|=
operator|new
name|ChunkOutputStream
argument_list|(
name|containerKey
argument_list|,
name|key
argument_list|,
name|xceiverClientManager
argument_list|,
name|xceiverClient
argument_list|,
name|requestId
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|checkStream
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentPosition
operator|+=
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] b, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkStream
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentPosition
operator|+=
name|len
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|outputStream
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|outputStream
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getFromKsmKeyInfo ( KsmKeyInfo keyInfo, XceiverClientManager xceiverClientManager, StorageContainerLocationProtocolClientSideTranslatorPB storageContainerLocationClient, int chunkSize, String requestId)
specifier|public
specifier|static
name|ChunkGroupOutputStream
name|getFromKsmKeyInfo
parameter_list|(
name|KsmKeyInfo
name|keyInfo
parameter_list|,
name|XceiverClientManager
name|xceiverClientManager
parameter_list|,
name|StorageContainerLocationProtocolClientSideTranslatorPB
name|storageContainerLocationClient
parameter_list|,
name|int
name|chunkSize
parameter_list|,
name|String
name|requestId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: the following createContainer and key writes may fail, in which
comment|// case we should revert the above allocateKey to KSM.
comment|// check index as sanity check
name|int
name|index
init|=
literal|0
decl_stmt|;
name|String
name|containerKey
decl_stmt|;
name|ChunkGroupOutputStream
name|groupOutputStream
init|=
operator|new
name|ChunkGroupOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
name|KsmKeyLocationInfo
name|subKeyInfo
range|:
name|keyInfo
operator|.
name|getKeyLocationList
argument_list|()
control|)
block|{
name|containerKey
operator|=
name|subKeyInfo
operator|.
name|getBlockID
argument_list|()
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|index
operator|++
operator|==
name|subKeyInfo
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|containerName
init|=
name|subKeyInfo
operator|.
name|getContainerName
argument_list|()
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|storageContainerLocationClient
operator|.
name|getContainer
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|XceiverClientSpi
name|xceiverClient
init|=
name|xceiverClientManager
operator|.
name|acquireClient
argument_list|(
name|pipeline
argument_list|)
decl_stmt|;
comment|// create container if needed
comment|// TODO : should be subKeyInfo.getShouldCreateContainer(), but for now
comment|//The following change has to reverted once HDFS-11888 is fixed.
if|if
condition|(
operator|!
name|containersCreated
operator|.
name|contains
argument_list|(
name|containerName
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|containerName
operator|.
name|intern
argument_list|()
init|)
block|{
comment|//checking again, there is a chance that some other thread has
comment|// created it.
if|if
condition|(
operator|!
name|containersCreated
operator|.
name|contains
argument_list|(
name|containerName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Need to create container {}."
argument_list|,
name|containerName
argument_list|)
expr_stmt|;
try|try
block|{
name|ContainerProtocolCalls
operator|.
name|createContainer
argument_list|(
name|xceiverClient
argument_list|,
name|requestId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getResult
argument_list|()
operator|.
name|equals
argument_list|(
name|Result
operator|.
name|CONTAINER_EXISTS
argument_list|)
condition|)
block|{
comment|//container already exist.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Container {} already exists."
argument_list|,
name|containerName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Container creation failed for {}."
argument_list|,
name|containerName
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
name|containersCreated
operator|.
name|add
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|groupOutputStream
operator|.
name|addStream
argument_list|(
name|containerKey
argument_list|,
name|keyInfo
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|xceiverClientManager
argument_list|,
name|xceiverClient
argument_list|,
name|requestId
argument_list|,
name|chunkSize
argument_list|,
name|subKeyInfo
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|groupOutputStream
return|;
block|}
block|}
end_class

end_unit

