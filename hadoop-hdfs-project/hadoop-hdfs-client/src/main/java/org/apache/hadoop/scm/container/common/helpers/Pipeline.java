begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.scm.container.common.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * A pipeline represents the group of machines over which a container lives.  */
end_comment

begin_class
DECL|class|Pipeline
specifier|public
class|class
name|Pipeline
block|{
DECL|field|containerName
specifier|private
name|String
name|containerName
decl_stmt|;
DECL|field|leaderID
specifier|private
name|String
name|leaderID
decl_stmt|;
DECL|field|datanodes
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DatanodeID
argument_list|>
name|datanodes
decl_stmt|;
comment|/**    * Allows you to maintain private data on pipelines.    * This is not serialized via protobuf, just allows us to maintain some    * private data.    */
DECL|field|data
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
comment|/**    * Constructs a new pipeline data structure.    *    * @param leaderID - First machine in this pipeline.    */
DECL|method|Pipeline (String leaderID)
specifier|public
name|Pipeline
parameter_list|(
name|String
name|leaderID
parameter_list|)
block|{
name|this
operator|.
name|leaderID
operator|=
name|leaderID
expr_stmt|;
name|datanodes
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
name|data
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Gets pipeline object from protobuf.    *    * @param pipeline - ProtoBuf definition for the pipeline.    * @return Pipeline Object    */
DECL|method|getFromProtoBuf (ContainerProtos.Pipeline pipeline)
specifier|public
specifier|static
name|Pipeline
name|getFromProtoBuf
parameter_list|(
name|ContainerProtos
operator|.
name|Pipeline
name|pipeline
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|Pipeline
name|newPipeline
init|=
operator|new
name|Pipeline
argument_list|(
name|pipeline
operator|.
name|getLeaderID
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HdfsProtos
operator|.
name|DatanodeIDProto
name|dataID
range|:
name|pipeline
operator|.
name|getMembersList
argument_list|()
control|)
block|{
name|newPipeline
operator|.
name|addMember
argument_list|(
name|DatanodeID
operator|.
name|getFromProtoBuf
argument_list|(
name|dataID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newPipeline
operator|.
name|setContainerName
argument_list|(
name|pipeline
operator|.
name|getContainerName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newPipeline
return|;
block|}
comment|/**    * Adds a member to the pipeline.    *    * @param dataNodeId - Datanode to be added.    */
DECL|method|addMember (DatanodeID dataNodeId)
specifier|public
name|void
name|addMember
parameter_list|(
name|DatanodeID
name|dataNodeId
parameter_list|)
block|{
name|datanodes
operator|.
name|put
argument_list|(
name|dataNodeId
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|dataNodeId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the first machine in the set of datanodes.    *    * @return First Machine.    */
DECL|method|getLeader ()
specifier|public
name|DatanodeID
name|getLeader
parameter_list|()
block|{
return|return
name|datanodes
operator|.
name|get
argument_list|(
name|leaderID
argument_list|)
return|;
block|}
comment|/**    * Returns all machines that make up this pipeline.    *    * @return List of Machines.    */
DECL|method|getMachines ()
specifier|public
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|getMachines
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|datanodes
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Return a Protobuf Pipeline message from pipeline.    *    * @return Protobuf message    */
DECL|method|getProtobufMessage ()
specifier|public
name|ContainerProtos
operator|.
name|Pipeline
name|getProtobufMessage
parameter_list|()
block|{
name|ContainerProtos
operator|.
name|Pipeline
operator|.
name|Builder
name|builder
init|=
name|ContainerProtos
operator|.
name|Pipeline
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeID
name|datanode
range|:
name|datanodes
operator|.
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|addMembers
argument_list|(
name|datanode
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setLeaderID
argument_list|(
name|leaderID
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setContainerName
argument_list|(
name|this
operator|.
name|containerName
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns containerName if available.    *    * @return String.    */
DECL|method|getContainerName ()
specifier|public
name|String
name|getContainerName
parameter_list|()
block|{
return|return
name|containerName
return|;
block|}
comment|/**    * Sets the container Name.    *    * @param containerName - Name of the container.    */
DECL|method|setContainerName (String containerName)
specifier|public
name|void
name|setContainerName
parameter_list|(
name|String
name|containerName
parameter_list|)
block|{
name|this
operator|.
name|containerName
operator|=
name|containerName
expr_stmt|;
block|}
comment|/**    * Set private data on pipeline.    * @param data -- private data.    */
DECL|method|setData (byte[] data)
specifier|public
name|void
name|setData
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|data
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns private data that is set on this pipeline.    *    * @return blob, the user can interpret it any way they like.    */
DECL|method|getData ()
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|data
operator|!=
literal|null
condition|)
block|{
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|this
operator|.
name|data
argument_list|,
name|this
operator|.
name|data
operator|.
name|length
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

