begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.common.statemachine
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|statemachine
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Template class that wraps simple event driven state machine.  * @param<STATE> states allowed  * @param<EVENT> events allowed  */
end_comment

begin_class
DECL|class|StateMachine
specifier|public
class|class
name|StateMachine
parameter_list|<
name|STATE
extends|extends
name|Enum
parameter_list|<
name|?
parameter_list|>
parameter_list|,
name|EVENT
extends|extends
name|Enum
parameter_list|<
name|?
parameter_list|>
parameter_list|>
block|{
DECL|field|initialState
specifier|private
name|STATE
name|initialState
decl_stmt|;
DECL|field|finalStates
specifier|private
name|Set
argument_list|<
name|STATE
argument_list|>
name|finalStates
decl_stmt|;
DECL|field|transitions
specifier|private
specifier|final
name|LoadingCache
argument_list|<
name|EVENT
argument_list|,
name|Map
argument_list|<
name|STATE
argument_list|,
name|STATE
argument_list|>
argument_list|>
name|transitions
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|CacheLoader
operator|.
name|from
argument_list|(
call|(
name|Supplier
argument_list|<
name|Map
argument_list|<
name|STATE
argument_list|,
name|STATE
argument_list|>
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|HashMap
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|StateMachine (STATE initState, Set<STATE> finalStates)
specifier|public
name|StateMachine
parameter_list|(
name|STATE
name|initState
parameter_list|,
name|Set
argument_list|<
name|STATE
argument_list|>
name|finalStates
parameter_list|)
block|{
name|this
operator|.
name|initialState
operator|=
name|initState
expr_stmt|;
name|this
operator|.
name|finalStates
operator|=
name|finalStates
expr_stmt|;
block|}
DECL|method|getInitialState ()
specifier|public
name|STATE
name|getInitialState
parameter_list|()
block|{
return|return
name|initialState
return|;
block|}
DECL|method|getFinalStates ()
specifier|public
name|Set
argument_list|<
name|STATE
argument_list|>
name|getFinalStates
parameter_list|()
block|{
return|return
name|finalStates
return|;
block|}
DECL|method|getNextState (STATE from, EVENT e)
specifier|public
name|STATE
name|getNextState
parameter_list|(
name|STATE
name|from
parameter_list|,
name|EVENT
name|e
parameter_list|)
throws|throws
name|InvalidStateTransitionException
block|{
name|STATE
name|target
init|=
name|transitions
operator|.
name|getUnchecked
argument_list|(
name|e
argument_list|)
operator|.
name|get
argument_list|(
name|from
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidStateTransitionException
argument_list|(
name|from
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|target
return|;
block|}
DECL|method|addTransition (STATE from, STATE to, EVENT e)
specifier|public
name|void
name|addTransition
parameter_list|(
name|STATE
name|from
parameter_list|,
name|STATE
name|to
parameter_list|,
name|EVENT
name|e
parameter_list|)
block|{
name|transitions
operator|.
name|getUnchecked
argument_list|(
name|e
argument_list|)
operator|.
name|put
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

