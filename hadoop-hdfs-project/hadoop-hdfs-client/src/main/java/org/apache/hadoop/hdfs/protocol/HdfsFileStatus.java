begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileEncryptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_comment
comment|/** Interface that represents the over the wire information for a file.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|HdfsFileStatus
specifier|public
class|class
name|HdfsFileStatus
extends|extends
name|FileStatus
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0x126eb82a
decl_stmt|;
comment|// local name of the inode that's encoded in java UTF8
DECL|field|uPath
specifier|private
name|byte
index|[]
name|uPath
decl_stmt|;
DECL|field|uSymlink
specifier|private
name|byte
index|[]
name|uSymlink
decl_stmt|;
comment|// symlink target encoded in java UTF8/null
DECL|field|fileId
specifier|private
specifier|final
name|long
name|fileId
decl_stmt|;
DECL|field|feInfo
specifier|private
specifier|final
name|FileEncryptionInfo
name|feInfo
decl_stmt|;
DECL|field|ecPolicy
specifier|private
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
decl_stmt|;
comment|// Used by dir, not including dot and dotdot. Always zero for a regular file.
DECL|field|childrenNum
specifier|private
specifier|final
name|int
name|childrenNum
decl_stmt|;
DECL|field|storagePolicy
specifier|private
specifier|final
name|byte
name|storagePolicy
decl_stmt|;
DECL|field|EMPTY_NAME
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_NAME
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
comment|/**    * Set of features potentially active on an instance.    */
DECL|enum|Flags
specifier|public
enum|enum
name|Flags
block|{
DECL|enumConstant|HAS_ACL
name|HAS_ACL
block|,
DECL|enumConstant|HAS_CRYPT
name|HAS_CRYPT
block|,
DECL|enumConstant|HAS_EC
name|HAS_EC
block|;   }
DECL|field|flags
specifier|private
specifier|final
name|EnumSet
argument_list|<
name|Flags
argument_list|>
name|flags
decl_stmt|;
comment|/**    * Constructor.    * @param length            the number of bytes the file has    * @param isdir             if the path is a directory    * @param block_replication the replication factor    * @param blocksize         the block size    * @param modification_time modification time    * @param access_time access time    * @param permission permission    * @param owner the owner of the path    * @param group the group of the path    * @param symlink symlink target encoded in java UTF8 or null    * @param path the local name in java UTF8 encoding the same as that in-memory    * @param fileId the file id    * @param childrenNum the number of children. Used by directory.    * @param feInfo the file's encryption info    * @param storagePolicy ID which specifies storage policy    * @param ecPolicy the erasure coding policy    */
DECL|method|HdfsFileStatus (long length, boolean isdir, int block_replication, long blocksize, long modification_time, long access_time, FsPermission permission, EnumSet<Flags> flags, String owner, String group, byte[] symlink, byte[] path, long fileId, int childrenNum, FileEncryptionInfo feInfo, byte storagePolicy, ErasureCodingPolicy ecPolicy)
specifier|public
name|HdfsFileStatus
parameter_list|(
name|long
name|length
parameter_list|,
name|boolean
name|isdir
parameter_list|,
name|int
name|block_replication
parameter_list|,
name|long
name|blocksize
parameter_list|,
name|long
name|modification_time
parameter_list|,
name|long
name|access_time
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|EnumSet
argument_list|<
name|Flags
argument_list|>
name|flags
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|group
parameter_list|,
name|byte
index|[]
name|symlink
parameter_list|,
name|byte
index|[]
name|path
parameter_list|,
name|long
name|fileId
parameter_list|,
name|int
name|childrenNum
parameter_list|,
name|FileEncryptionInfo
name|feInfo
parameter_list|,
name|byte
name|storagePolicy
parameter_list|,
name|ErasureCodingPolicy
name|ecPolicy
parameter_list|)
block|{
name|super
argument_list|(
name|length
argument_list|,
name|isdir
argument_list|,
name|block_replication
argument_list|,
name|blocksize
argument_list|,
name|modification_time
argument_list|,
name|access_time
argument_list|,
name|convert
argument_list|(
name|isdir
argument_list|,
name|symlink
operator|!=
literal|null
argument_list|,
name|permission
argument_list|,
name|flags
argument_list|)
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
name|this
operator|.
name|uSymlink
operator|=
name|symlink
expr_stmt|;
name|this
operator|.
name|uPath
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|fileId
operator|=
name|fileId
expr_stmt|;
name|this
operator|.
name|childrenNum
operator|=
name|childrenNum
expr_stmt|;
name|this
operator|.
name|feInfo
operator|=
name|feInfo
expr_stmt|;
name|this
operator|.
name|storagePolicy
operator|=
name|storagePolicy
expr_stmt|;
name|this
operator|.
name|ecPolicy
operator|=
name|ecPolicy
expr_stmt|;
block|}
comment|/**    * Set redundant flags for compatibility with existing applications.    */
DECL|method|convert (boolean isdir, boolean symlink, FsPermission p, EnumSet<Flags> f)
specifier|protected
specifier|static
name|FsPermission
name|convert
parameter_list|(
name|boolean
name|isdir
parameter_list|,
name|boolean
name|symlink
parameter_list|,
name|FsPermission
name|p
parameter_list|,
name|EnumSet
argument_list|<
name|Flags
argument_list|>
name|f
parameter_list|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|FsPermissionExtension
condition|)
block|{
comment|// verify flags are set consistently
assert|assert
name|p
operator|.
name|getAclBit
argument_list|()
operator|==
name|f
operator|.
name|contains
argument_list|(
name|HdfsFileStatus
operator|.
name|Flags
operator|.
name|HAS_ACL
argument_list|)
assert|;
assert|assert
name|p
operator|.
name|getEncryptedBit
argument_list|()
operator|==
name|f
operator|.
name|contains
argument_list|(
name|HdfsFileStatus
operator|.
name|Flags
operator|.
name|HAS_CRYPT
argument_list|)
assert|;
assert|assert
name|p
operator|.
name|getErasureCodedBit
argument_list|()
operator|==
name|f
operator|.
name|contains
argument_list|(
name|HdfsFileStatus
operator|.
name|Flags
operator|.
name|HAS_EC
argument_list|)
assert|;
return|return
name|p
return|;
block|}
if|if
condition|(
literal|null
operator|==
name|p
condition|)
block|{
if|if
condition|(
name|isdir
condition|)
block|{
name|p
operator|=
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|symlink
condition|)
block|{
name|p
operator|=
name|FsPermission
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|new
name|FsPermissionExtension
argument_list|(
name|p
argument_list|,
name|f
operator|.
name|contains
argument_list|(
name|Flags
operator|.
name|HAS_ACL
argument_list|)
argument_list|,
name|f
operator|.
name|contains
argument_list|(
name|Flags
operator|.
name|HAS_CRYPT
argument_list|)
argument_list|,
name|f
operator|.
name|contains
argument_list|(
name|Flags
operator|.
name|HAS_EC
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isSymlink ()
specifier|public
name|boolean
name|isSymlink
parameter_list|()
block|{
return|return
name|uSymlink
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hasAcl ()
specifier|public
name|boolean
name|hasAcl
parameter_list|()
block|{
return|return
name|flags
operator|.
name|contains
argument_list|(
name|Flags
operator|.
name|HAS_ACL
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isEncrypted ()
specifier|public
name|boolean
name|isEncrypted
parameter_list|()
block|{
return|return
name|flags
operator|.
name|contains
argument_list|(
name|Flags
operator|.
name|HAS_CRYPT
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isErasureCoded ()
specifier|public
name|boolean
name|isErasureCoded
parameter_list|()
block|{
return|return
name|flags
operator|.
name|contains
argument_list|(
name|Flags
operator|.
name|HAS_EC
argument_list|)
return|;
block|}
comment|/**    * Check if the local name is empty.    * @return true if the name is empty    */
DECL|method|isEmptyLocalName ()
specifier|public
specifier|final
name|boolean
name|isEmptyLocalName
parameter_list|()
block|{
return|return
name|uPath
operator|.
name|length
operator|==
literal|0
return|;
block|}
comment|/**    * Get the string representation of the local name.    * @return the local name in string    */
DECL|method|getLocalName ()
specifier|public
specifier|final
name|String
name|getLocalName
parameter_list|()
block|{
return|return
name|DFSUtilClient
operator|.
name|bytes2String
argument_list|(
name|uPath
argument_list|)
return|;
block|}
comment|/**    * Get the Java UTF8 representation of the local name.    * @return the local name in java UTF8    */
DECL|method|getLocalNameInBytes ()
specifier|public
specifier|final
name|byte
index|[]
name|getLocalNameInBytes
parameter_list|()
block|{
return|return
name|uPath
return|;
block|}
comment|/**    * Get the string representation of the full path name.    * @param parent the parent path    * @return the full path in string    */
DECL|method|getFullName (final String parent)
specifier|public
specifier|final
name|String
name|getFullName
parameter_list|(
specifier|final
name|String
name|parent
parameter_list|)
block|{
if|if
condition|(
name|isEmptyLocalName
argument_list|()
condition|)
block|{
return|return
name|parent
return|;
block|}
name|StringBuilder
name|fullName
init|=
operator|new
name|StringBuilder
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parent
operator|.
name|endsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
name|fullName
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
name|fullName
operator|.
name|append
argument_list|(
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fullName
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Get the full path.    * @param parent the parent path    * @return the full path    */
DECL|method|getFullPath (final Path parent)
specifier|public
specifier|final
name|Path
name|getFullPath
parameter_list|(
specifier|final
name|Path
name|parent
parameter_list|)
block|{
if|if
condition|(
name|isEmptyLocalName
argument_list|()
condition|)
block|{
return|return
name|parent
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
name|getLocalName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSymlink ()
specifier|public
name|Path
name|getSymlink
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isSymlink
argument_list|()
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|DFSUtilClient
operator|.
name|bytes2String
argument_list|(
name|uSymlink
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Path "
operator|+
name|getPath
argument_list|()
operator|+
literal|" is not a symbolic link"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setSymlink (Path sym)
specifier|public
name|void
name|setSymlink
parameter_list|(
name|Path
name|sym
parameter_list|)
block|{
name|uSymlink
operator|=
name|DFSUtilClient
operator|.
name|string2Bytes
argument_list|(
name|sym
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Opaque referant for the symlink, to be resolved at the client.    */
DECL|method|getSymlinkInBytes ()
specifier|public
specifier|final
name|byte
index|[]
name|getSymlinkInBytes
parameter_list|()
block|{
return|return
name|uSymlink
return|;
block|}
DECL|method|getFileId ()
specifier|public
specifier|final
name|long
name|getFileId
parameter_list|()
block|{
return|return
name|fileId
return|;
block|}
DECL|method|getFileEncryptionInfo ()
specifier|public
specifier|final
name|FileEncryptionInfo
name|getFileEncryptionInfo
parameter_list|()
block|{
return|return
name|feInfo
return|;
block|}
comment|/**    * Get the erasure coding policy if it's set.    * @return the erasure coding policy    */
DECL|method|getErasureCodingPolicy ()
specifier|public
name|ErasureCodingPolicy
name|getErasureCodingPolicy
parameter_list|()
block|{
return|return
name|ecPolicy
return|;
block|}
DECL|method|getChildrenNum ()
specifier|public
specifier|final
name|int
name|getChildrenNum
parameter_list|()
block|{
return|return
name|childrenNum
return|;
block|}
comment|/** @return the storage policy id */
DECL|method|getStoragePolicy ()
specifier|public
specifier|final
name|byte
name|getStoragePolicy
parameter_list|()
block|{
return|return
name|storagePolicy
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|// satisfy findbugs
return|return
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// satisfy findbugs
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**    * Resolve the short name of the Path given the URI, parent provided. This    * FileStatus reference will not contain a valid Path until it is resolved    * by this method.    * @param defaultUri FileSystem to fully qualify HDFS path.    * @param parent Parent path of this element.    * @return Reference to this instance.    */
DECL|method|makeQualified (URI defaultUri, Path parent)
specifier|public
specifier|final
name|FileStatus
name|makeQualified
parameter_list|(
name|URI
name|defaultUri
parameter_list|,
name|Path
name|parent
parameter_list|)
block|{
comment|// fully-qualify path
name|setPath
argument_list|(
name|getFullPath
argument_list|(
name|parent
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|defaultUri
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
comment|// API compatibility
block|}
block|}
end_class

end_unit

