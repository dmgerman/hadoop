begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.client.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|SignedBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ChunkedArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReportListing
operator|.
name|DiffReportListingEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffReportEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffType
import|;
end_import

begin_comment
comment|/**  * This class represents to end users the difference between two snapshots of  * the same directory, or the difference between a snapshot of the directory and  * its current state. Instead of capturing all the details of the diff, this  * class only lists where the changes happened and their types.  */
end_comment

begin_class
DECL|class|SnapshotDiffReportGenerator
specifier|public
class|class
name|SnapshotDiffReportGenerator
block|{
comment|/**    * Compare two inodes based on their full names.    */
DECL|field|INODE_COMPARATOR
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|INODE_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|DiffReportListingEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|DiffReportListingEntry
name|left
parameter_list|,
name|DiffReportListingEntry
name|right
parameter_list|)
block|{
specifier|final
name|Comparator
argument_list|<
name|byte
index|[]
argument_list|>
name|cmp
init|=
name|SignedBytes
operator|.
name|lexicographicalComparator
argument_list|()
decl_stmt|;
comment|//source path can never be null
specifier|final
name|byte
index|[]
index|[]
name|l
init|=
name|left
operator|.
name|getSourcePath
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
index|[]
name|r
init|=
name|right
operator|.
name|getSourcePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|length
operator|==
literal|1
operator|&&
name|l
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|r
operator|.
name|length
operator|==
literal|1
operator|&&
name|r
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|length
operator|&&
name|i
operator|<
name|r
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|diff
init|=
name|cmp
operator|.
name|compare
argument_list|(
name|l
index|[
name|i
index|]
argument_list|,
name|r
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|0
condition|)
block|{
return|return
name|diff
return|;
block|}
block|}
return|return
name|l
operator|.
name|length
operator|==
name|r
operator|.
name|length
condition|?
literal|0
else|:
name|l
operator|.
name|length
operator|>
name|r
operator|.
name|length
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
block|}
block|}
decl_stmt|;
DECL|class|RenameEntry
specifier|static
class|class
name|RenameEntry
block|{
DECL|field|sourcePath
specifier|private
name|byte
index|[]
index|[]
name|sourcePath
decl_stmt|;
DECL|field|targetPath
specifier|private
name|byte
index|[]
index|[]
name|targetPath
decl_stmt|;
DECL|method|setSource (byte[][] srcPath)
name|void
name|setSource
parameter_list|(
name|byte
index|[]
index|[]
name|srcPath
parameter_list|)
block|{
name|this
operator|.
name|sourcePath
operator|=
name|srcPath
expr_stmt|;
block|}
DECL|method|setTarget (byte[][] target)
name|void
name|setTarget
parameter_list|(
name|byte
index|[]
index|[]
name|target
parameter_list|)
block|{
name|this
operator|.
name|targetPath
operator|=
name|target
expr_stmt|;
block|}
DECL|method|isRename ()
name|boolean
name|isRename
parameter_list|()
block|{
return|return
name|sourcePath
operator|!=
literal|null
operator|&&
name|targetPath
operator|!=
literal|null
return|;
block|}
DECL|method|getSourcePath ()
name|byte
index|[]
index|[]
name|getSourcePath
parameter_list|()
block|{
return|return
name|sourcePath
return|;
block|}
DECL|method|getTargetPath ()
name|byte
index|[]
index|[]
name|getTargetPath
parameter_list|()
block|{
return|return
name|targetPath
return|;
block|}
block|}
comment|/*    * A class represnting the diff in a directory between two given snapshots    * in two lists: createdList and deleted list.    */
DECL|class|ChildrenDiff
specifier|static
class|class
name|ChildrenDiff
block|{
DECL|field|createdList
specifier|private
specifier|final
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|createdList
decl_stmt|;
DECL|field|deletedList
specifier|private
specifier|final
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|deletedList
decl_stmt|;
DECL|method|ChildrenDiff (List<DiffReportListingEntry> createdList, List<DiffReportListingEntry> deletedList)
name|ChildrenDiff
parameter_list|(
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|createdList
parameter_list|,
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|deletedList
parameter_list|)
block|{
name|this
operator|.
name|createdList
operator|=
name|createdList
operator|!=
literal|null
condition|?
name|createdList
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|this
operator|.
name|deletedList
operator|=
name|deletedList
operator|!=
literal|null
condition|?
name|deletedList
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
DECL|method|getCreatedList ()
specifier|public
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|getCreatedList
parameter_list|()
block|{
return|return
name|createdList
return|;
block|}
DECL|method|getDeletedList ()
specifier|public
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|getDeletedList
parameter_list|()
block|{
return|return
name|deletedList
return|;
block|}
block|}
comment|/**    * snapshot root full path.    */
DECL|field|snapshotRoot
specifier|private
specifier|final
name|String
name|snapshotRoot
decl_stmt|;
comment|/**    * start point of the diff.    */
DECL|field|fromSnapshot
specifier|private
specifier|final
name|String
name|fromSnapshot
decl_stmt|;
comment|/**    * end point of the diff.    */
DECL|field|toSnapshot
specifier|private
specifier|final
name|String
name|toSnapshot
decl_stmt|;
comment|/**    * Flag to indicate the diff is calculated from older to newer snapshot    * or not.    */
DECL|field|isFromEarlier
specifier|private
specifier|final
name|boolean
name|isFromEarlier
decl_stmt|;
comment|/**    * A map capturing the detailed difference about file creation/deletion.    * Each key indicates a directory inode whose children have been changed    * between the two snapshots, while its associated value is a    * {@link ChildrenDiff} storing the changes (creation/deletion) happened to    * the children (files).    */
DECL|field|dirDiffMap
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|ChildrenDiff
argument_list|>
name|dirDiffMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|renameMap
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|RenameEntry
argument_list|>
name|renameMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|mlist
specifier|private
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|mlist
init|=
literal|null
decl_stmt|;
DECL|field|clist
specifier|private
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|clist
init|=
literal|null
decl_stmt|;
DECL|field|dlist
specifier|private
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|dlist
init|=
literal|null
decl_stmt|;
DECL|method|SnapshotDiffReportGenerator (String snapshotRoot, String fromSnapshot, String toSnapshot, boolean isFromEarlier, List<DiffReportListingEntry> mlist, List<DiffReportListingEntry> clist, List<DiffReportListingEntry> dlist)
specifier|public
name|SnapshotDiffReportGenerator
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|fromSnapshot
parameter_list|,
name|String
name|toSnapshot
parameter_list|,
name|boolean
name|isFromEarlier
parameter_list|,
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|mlist
parameter_list|,
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|clist
parameter_list|,
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|dlist
parameter_list|)
block|{
name|this
operator|.
name|snapshotRoot
operator|=
name|snapshotRoot
expr_stmt|;
name|this
operator|.
name|fromSnapshot
operator|=
name|fromSnapshot
expr_stmt|;
name|this
operator|.
name|toSnapshot
operator|=
name|toSnapshot
expr_stmt|;
name|this
operator|.
name|isFromEarlier
operator|=
name|isFromEarlier
expr_stmt|;
name|this
operator|.
name|mlist
operator|=
name|mlist
operator|!=
literal|null
condition|?
name|mlist
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|this
operator|.
name|clist
operator|=
name|clist
operator|!=
literal|null
condition|?
name|clist
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|this
operator|.
name|dlist
operator|=
name|dlist
operator|!=
literal|null
condition|?
name|dlist
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
DECL|method|getEntry (long inodeId)
specifier|private
name|RenameEntry
name|getEntry
parameter_list|(
name|long
name|inodeId
parameter_list|)
block|{
name|RenameEntry
name|entry
init|=
name|renameMap
operator|.
name|get
argument_list|(
name|inodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|entry
operator|=
operator|new
name|RenameEntry
argument_list|()
expr_stmt|;
name|renameMap
operator|.
name|put
argument_list|(
name|inodeId
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
DECL|method|generateReportList ()
specifier|public
name|void
name|generateReportList
parameter_list|()
block|{
name|mlist
operator|.
name|sort
argument_list|(
name|INODE_COMPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|DiffReportListingEntry
name|created
range|:
name|clist
control|)
block|{
name|ChildrenDiff
name|entry
init|=
name|dirDiffMap
operator|.
name|get
argument_list|(
name|created
operator|.
name|getDirId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|createdList
init|=
operator|new
name|ChunkedArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|createdList
operator|.
name|add
argument_list|(
name|created
argument_list|)
expr_stmt|;
name|ChildrenDiff
name|list
init|=
operator|new
name|ChildrenDiff
argument_list|(
name|createdList
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dirDiffMap
operator|.
name|put
argument_list|(
name|created
operator|.
name|getDirId
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dirDiffMap
operator|.
name|get
argument_list|(
name|created
operator|.
name|getDirId
argument_list|()
argument_list|)
operator|.
name|getCreatedList
argument_list|()
operator|.
name|add
argument_list|(
name|created
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|created
operator|.
name|isReference
argument_list|()
condition|)
block|{
name|RenameEntry
name|renameEntry
init|=
name|getEntry
argument_list|(
name|created
operator|.
name|getFileId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|renameEntry
operator|.
name|getTargetPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|renameEntry
operator|.
name|setTarget
argument_list|(
name|created
operator|.
name|getSourcePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|DiffReportListingEntry
name|deleted
range|:
name|dlist
control|)
block|{
name|ChildrenDiff
name|entry
init|=
name|dirDiffMap
operator|.
name|get
argument_list|(
name|deleted
operator|.
name|getDirId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
operator|(
name|entry
operator|.
name|getDeletedList
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|ChildrenDiff
name|list
decl_stmt|;
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|deletedList
init|=
operator|new
name|ChunkedArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|deletedList
operator|.
name|add
argument_list|(
name|deleted
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ChildrenDiff
argument_list|(
literal|null
argument_list|,
name|deletedList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|=
operator|new
name|ChildrenDiff
argument_list|(
name|entry
operator|.
name|getCreatedList
argument_list|()
argument_list|,
name|deletedList
argument_list|)
expr_stmt|;
block|}
name|dirDiffMap
operator|.
name|put
argument_list|(
name|deleted
operator|.
name|getDirId
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|getDeletedList
argument_list|()
operator|.
name|add
argument_list|(
name|deleted
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleted
operator|.
name|isReference
argument_list|()
condition|)
block|{
name|RenameEntry
name|renameEntry
init|=
name|getEntry
argument_list|(
name|deleted
operator|.
name|getFileId
argument_list|()
argument_list|)
decl_stmt|;
name|renameEntry
operator|.
name|setTarget
argument_list|(
name|deleted
operator|.
name|getTargetPath
argument_list|()
argument_list|)
expr_stmt|;
name|renameEntry
operator|.
name|setSource
argument_list|(
name|deleted
operator|.
name|getSourcePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|generateReport ()
specifier|public
name|SnapshotDiffReport
name|generateReport
parameter_list|()
block|{
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|diffReportList
init|=
operator|new
name|ChunkedArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|generateReportList
argument_list|()
expr_stmt|;
for|for
control|(
name|DiffReportListingEntry
name|modified
range|:
name|mlist
control|)
block|{
name|diffReportList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|modified
operator|.
name|getSourcePath
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|modified
operator|.
name|isReference
argument_list|()
operator|&&
name|dirDiffMap
operator|.
name|get
argument_list|(
name|modified
operator|.
name|getDirId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|subList
init|=
name|generateReport
argument_list|(
name|modified
argument_list|)
decl_stmt|;
name|diffReportList
operator|.
name|addAll
argument_list|(
name|subList
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SnapshotDiffReport
argument_list|(
name|snapshotRoot
argument_list|,
name|fromSnapshot
argument_list|,
name|toSnapshot
argument_list|,
name|diffReportList
argument_list|)
return|;
block|}
DECL|method|generateReport ( DiffReportListingEntry modified)
specifier|private
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|generateReport
parameter_list|(
name|DiffReportListingEntry
name|modified
parameter_list|)
block|{
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|diffReportList
init|=
operator|new
name|ChunkedArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ChildrenDiff
name|list
init|=
name|dirDiffMap
operator|.
name|get
argument_list|(
name|modified
operator|.
name|getDirId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DiffReportListingEntry
name|created
range|:
name|list
operator|.
name|getCreatedList
argument_list|()
control|)
block|{
name|RenameEntry
name|entry
init|=
name|renameMap
operator|.
name|get
argument_list|(
name|created
operator|.
name|getFileId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
operator|!
name|entry
operator|.
name|isRename
argument_list|()
condition|)
block|{
name|diffReportList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|isFromEarlier
condition|?
name|DiffType
operator|.
name|CREATE
else|:
name|DiffType
operator|.
name|DELETE
argument_list|,
name|created
operator|.
name|getSourcePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|DiffReportListingEntry
name|deleted
range|:
name|list
operator|.
name|getDeletedList
argument_list|()
control|)
block|{
name|RenameEntry
name|entry
init|=
name|renameMap
operator|.
name|get
argument_list|(
name|deleted
operator|.
name|getFileId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|isRename
argument_list|()
condition|)
block|{
name|diffReportList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|RENAME
argument_list|,
name|isFromEarlier
condition|?
name|entry
operator|.
name|getSourcePath
argument_list|()
else|:
name|entry
operator|.
name|getTargetPath
argument_list|()
argument_list|,
name|isFromEarlier
condition|?
name|entry
operator|.
name|getTargetPath
argument_list|()
else|:
name|entry
operator|.
name|getSourcePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diffReportList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|isFromEarlier
condition|?
name|DiffType
operator|.
name|DELETE
else|:
name|DiffType
operator|.
name|CREATE
argument_list|,
name|deleted
operator|.
name|getSourcePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|diffReportList
return|;
block|}
block|}
end_class

end_unit

