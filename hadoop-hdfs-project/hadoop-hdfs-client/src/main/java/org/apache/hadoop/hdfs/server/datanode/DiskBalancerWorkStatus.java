begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|type
operator|.
name|TypeFactory
operator|.
name|defaultInstance
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_comment
comment|/**  * Helper class that reports how much work has has been done by the node.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|DiskBalancerWorkStatus
specifier|public
class|class
name|DiskBalancerWorkStatus
block|{
DECL|field|currentState
specifier|private
specifier|final
name|List
argument_list|<
name|DiskBalancerWorkEntry
argument_list|>
name|currentState
decl_stmt|;
DECL|field|result
specifier|private
name|Result
name|result
decl_stmt|;
DECL|field|planID
specifier|private
name|String
name|planID
decl_stmt|;
comment|/**    * Constructs a default workStatus Object.    */
DECL|method|DiskBalancerWorkStatus ()
specifier|public
name|DiskBalancerWorkStatus
parameter_list|()
block|{
name|this
operator|.
name|currentState
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Constructs a workStatus Object.    *    * @param result - int    * @param planID - Plan ID    */
DECL|method|DiskBalancerWorkStatus (Result result, String planID)
specifier|public
name|DiskBalancerWorkStatus
parameter_list|(
name|Result
name|result
parameter_list|,
name|String
name|planID
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|planID
operator|=
name|planID
expr_stmt|;
block|}
comment|/**    * Constructs a workStatus Object.    *    * @param result       - int    * @param planID       - Plan ID    * @param currentState - Current State    */
DECL|method|DiskBalancerWorkStatus (Result result, String planID, List<DiskBalancerWorkEntry> currentState)
specifier|public
name|DiskBalancerWorkStatus
parameter_list|(
name|Result
name|result
parameter_list|,
name|String
name|planID
parameter_list|,
name|List
argument_list|<
name|DiskBalancerWorkEntry
argument_list|>
name|currentState
parameter_list|)
block|{
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|planID
operator|=
name|planID
expr_stmt|;
name|this
operator|.
name|currentState
operator|=
name|currentState
expr_stmt|;
block|}
comment|/**    * Constructs a workStatus Object.    *    * @param result       - int    * @param planID       - Plan ID    * @param currentState - List of WorkEntries.    */
DECL|method|DiskBalancerWorkStatus (Result result, String planID, String currentState)
specifier|public
name|DiskBalancerWorkStatus
parameter_list|(
name|Result
name|result
parameter_list|,
name|String
name|planID
parameter_list|,
name|String
name|currentState
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|planID
operator|=
name|planID
expr_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|this
operator|.
name|currentState
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|currentState
argument_list|,
name|defaultInstance
argument_list|()
operator|.
name|constructCollectionType
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|DiskBalancerWorkEntry
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns result.    *    * @return long    */
DECL|method|getResult ()
specifier|public
name|Result
name|getResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
comment|/**    * Returns planID.    *    * @return String    */
DECL|method|getPlanID ()
specifier|public
name|String
name|getPlanID
parameter_list|()
block|{
return|return
name|planID
return|;
block|}
comment|/**    * Gets current Status.    *    * @return - Json String    */
DECL|method|getCurrentState ()
specifier|public
name|List
argument_list|<
name|DiskBalancerWorkEntry
argument_list|>
name|getCurrentState
parameter_list|()
block|{
return|return
name|currentState
return|;
block|}
comment|/**    * Return current state as a string.    *    * @throws IOException    **/
DECL|method|currentStateString ()
specifier|public
name|String
name|currentStateString
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
return|return
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|currentState
argument_list|)
return|;
block|}
DECL|method|toJsonString ()
specifier|public
name|String
name|toJsonString
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
return|return
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Returns a DiskBalancerWorkStatus object from the Json .    * @param json - json String    * @return DiskBalancerWorkStatus    * @throws IOException    */
DECL|method|parseJson (String json)
specifier|public
specifier|static
name|DiskBalancerWorkStatus
name|parseJson
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|DiskBalancerWorkStatus
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Adds a new work entry to the list.    *    * @param entry - DiskBalancerWorkEntry    */
DECL|method|addWorkEntry (DiskBalancerWorkEntry entry)
specifier|public
name|void
name|addWorkEntry
parameter_list|(
name|DiskBalancerWorkEntry
name|entry
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|currentState
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
comment|/** Various result values. **/
DECL|enum|Result
specifier|public
enum|enum
name|Result
block|{
DECL|enumConstant|NO_PLAN
name|NO_PLAN
argument_list|(
literal|0
argument_list|)
block|,
DECL|enumConstant|PLAN_UNDER_PROGRESS
name|PLAN_UNDER_PROGRESS
argument_list|(
literal|1
argument_list|)
block|,
DECL|enumConstant|PLAN_DONE
name|PLAN_DONE
argument_list|(
literal|2
argument_list|)
block|,
DECL|enumConstant|PLAN_CANCELLED
name|PLAN_CANCELLED
argument_list|(
literal|3
argument_list|)
block|;
DECL|field|result
specifier|private
name|int
name|result
decl_stmt|;
DECL|method|Result (int result)
specifier|private
name|Result
parameter_list|(
name|int
name|result
parameter_list|)
block|{
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
block|}
comment|/**      * Get int value of result.      *      * @return int      */
DECL|method|getIntResult ()
specifier|public
name|int
name|getIntResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
block|}
comment|/**    * A class that is used to report each work item that we are working on. This    * class describes the Source, Destination and how much data has been already    * moved, errors encountered etc. This is useful for the disk balancer stats    * as well as the queryStatus RPC.    */
DECL|class|DiskBalancerWorkEntry
specifier|public
specifier|static
class|class
name|DiskBalancerWorkEntry
block|{
DECL|field|sourcePath
specifier|private
name|String
name|sourcePath
decl_stmt|;
DECL|field|destPath
specifier|private
name|String
name|destPath
decl_stmt|;
DECL|field|workItem
specifier|private
name|DiskBalancerWorkItem
name|workItem
decl_stmt|;
comment|/**      * Constructor needed for json serialization.      */
DECL|method|DiskBalancerWorkEntry ()
specifier|public
name|DiskBalancerWorkEntry
parameter_list|()
block|{     }
DECL|method|DiskBalancerWorkEntry (String workItem)
specifier|public
name|DiskBalancerWorkEntry
parameter_list|(
name|String
name|workItem
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|workItem
operator|=
name|DiskBalancerWorkItem
operator|.
name|parseJson
argument_list|(
name|workItem
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a Work Entry class.      *      * @param sourcePath - Source Path where we are moving data from.      * @param destPath   - Destination path to where we are moving data to.      * @param workItem   - Current work status of this move.      */
DECL|method|DiskBalancerWorkEntry (String sourcePath, String destPath, DiskBalancerWorkItem workItem)
specifier|public
name|DiskBalancerWorkEntry
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|destPath
parameter_list|,
name|DiskBalancerWorkItem
name|workItem
parameter_list|)
block|{
name|this
operator|.
name|sourcePath
operator|=
name|sourcePath
expr_stmt|;
name|this
operator|.
name|destPath
operator|=
name|destPath
expr_stmt|;
name|this
operator|.
name|workItem
operator|=
name|workItem
expr_stmt|;
block|}
comment|/**      * Returns the source path.      *      * @return - Source path      */
DECL|method|getSourcePath ()
specifier|public
name|String
name|getSourcePath
parameter_list|()
block|{
return|return
name|sourcePath
return|;
block|}
comment|/**      * Sets the Source Path.      *      * @param sourcePath - Volume Path.      */
DECL|method|setSourcePath (String sourcePath)
specifier|public
name|void
name|setSourcePath
parameter_list|(
name|String
name|sourcePath
parameter_list|)
block|{
name|this
operator|.
name|sourcePath
operator|=
name|sourcePath
expr_stmt|;
block|}
comment|/**      * Gets the Destination path.      *      * @return - Path      */
DECL|method|getDestPath ()
specifier|public
name|String
name|getDestPath
parameter_list|()
block|{
return|return
name|destPath
return|;
block|}
comment|/**      * Sets the destination path.      *      * @param destPath - Path      */
DECL|method|setDestPath (String destPath)
specifier|public
name|void
name|setDestPath
parameter_list|(
name|String
name|destPath
parameter_list|)
block|{
name|this
operator|.
name|destPath
operator|=
name|destPath
expr_stmt|;
block|}
comment|/**      * Gets the current status of work for these volumes.      *      * @return - Work Item      */
DECL|method|getWorkItem ()
specifier|public
name|DiskBalancerWorkItem
name|getWorkItem
parameter_list|()
block|{
return|return
name|workItem
return|;
block|}
comment|/**      * Sets the work item.      *      * @param workItem - sets the work item information      */
DECL|method|setWorkItem (DiskBalancerWorkItem workItem)
specifier|public
name|void
name|setWorkItem
parameter_list|(
name|DiskBalancerWorkItem
name|workItem
parameter_list|)
block|{
name|this
operator|.
name|workItem
operator|=
name|workItem
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

