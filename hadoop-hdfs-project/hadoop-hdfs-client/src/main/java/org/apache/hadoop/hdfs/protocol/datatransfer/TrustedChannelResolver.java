begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol.datatransfer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * Class used to indicate whether a channel is trusted or not.  * The default implementation is to return false indicating that  * the channel is not trusted.  * This class can be overridden to provide custom logic to determine  * whether a channel is trusted or not.   * The custom class can be specified via configuration.  *  */
end_comment

begin_class
DECL|class|TrustedChannelResolver
specifier|public
class|class
name|TrustedChannelResolver
implements|implements
name|Configurable
block|{
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
comment|/**    * Returns an instance of TrustedChannelResolver.    * Looks up the configuration to see if there is custom class specified.    * @param conf    * @return TrustedChannelResolver    */
DECL|method|getInstance (Configuration conf)
specifier|public
specifier|static
name|TrustedChannelResolver
name|getInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|TrustedChannelResolver
argument_list|>
name|clazz
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_TRUSTEDCHANNEL_RESOLVER_CLASS
argument_list|,
name|TrustedChannelResolver
operator|.
name|class
argument_list|,
name|TrustedChannelResolver
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|/**    * Return boolean value indicating whether a channel is trusted or not    * from a client's perspective.    * @return true if the channel is trusted and false otherwise.    */
DECL|method|isTrusted ()
specifier|public
name|boolean
name|isTrusted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Identify boolean value indicating whether a channel is trusted or not.    * @param peerAddress address of the peer    * @return true if the channel is trusted and false otherwise.    */
DECL|method|isTrusted (InetAddress peerAddress)
specifier|public
name|boolean
name|isTrusted
parameter_list|(
name|InetAddress
name|peerAddress
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

