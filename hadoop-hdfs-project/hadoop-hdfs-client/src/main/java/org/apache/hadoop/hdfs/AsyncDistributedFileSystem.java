begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ClientNamenodeProtocolTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractFuture
import|;
end_import

begin_comment
comment|/****************************************************************  * Implementation of the asynchronous distributed file system.  * This instance of this class is the way end-user code interacts  * with a Hadoop DistributedFileSystem in an asynchronous manner.  *  *****************************************************************/
end_comment

begin_class
annotation|@
name|Unstable
DECL|class|AsyncDistributedFileSystem
specifier|public
class|class
name|AsyncDistributedFileSystem
block|{
DECL|field|dfs
specifier|private
specifier|final
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|method|AsyncDistributedFileSystem (final DistributedFileSystem dfs)
name|AsyncDistributedFileSystem
parameter_list|(
specifier|final
name|DistributedFileSystem
name|dfs
parameter_list|)
block|{
name|this
operator|.
name|dfs
operator|=
name|dfs
expr_stmt|;
block|}
DECL|method|getReturnValue ()
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Future
argument_list|<
name|T
argument_list|>
name|getReturnValue
parameter_list|()
block|{
specifier|final
name|Callable
argument_list|<
name|T
argument_list|>
name|returnValueCallback
init|=
name|ClientNamenodeProtocolTranslatorPB
operator|.
name|getReturnValueCallback
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|T
argument_list|>
name|returnFuture
init|=
operator|new
name|AbstractFuture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|T
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
try|try
block|{
name|set
argument_list|(
name|returnValueCallback
operator|.
name|call
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
return|return
name|returnFuture
return|;
block|}
comment|/**    * Renames Path src to Path dst    *<ul>    *<li>Fails if src is a file and dst is a directory.    *<li>Fails if src is a directory and dst is a file.    *<li>Fails if the parent of dst does not exist or is a file.    *</ul>    *<p>    * If OVERWRITE option is not passed as an argument, rename fails if the dst    * already exists.    *<p>    * If OVERWRITE option is passed as an argument, rename overwrites the dst if    * it is a file or an empty directory. Rename fails if dst is a non-empty    * directory.    *<p>    * Note that atomicity of rename is dependent on the file system    * implementation. Please refer to the file system documentation for details.    * This default implementation is non atomic.    *    * @param src    *          path to be renamed    * @param dst    *          new path after rename    * @throws IOException    *           on failure    * @return an instance of Future, #get of which is invoked to wait for    *         asynchronous call being finished.    */
DECL|method|rename (Path src, Path dst, final Options.Rename... options)
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|,
specifier|final
name|Options
operator|.
name|Rename
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|dfs
operator|.
name|getFsStatistics
argument_list|()
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|absSrc
init|=
name|dfs
operator|.
name|fixRelativePart
argument_list|(
name|src
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|absDst
init|=
name|dfs
operator|.
name|fixRelativePart
argument_list|(
name|dst
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isAsync
init|=
name|Client
operator|.
name|isAsynchronousMode
argument_list|()
decl_stmt|;
name|Client
operator|.
name|setAsynchronousMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|rename
argument_list|(
name|dfs
operator|.
name|getPathName
argument_list|(
name|absSrc
argument_list|)
argument_list|,
name|dfs
operator|.
name|getPathName
argument_list|(
name|absDst
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|getReturnValue
argument_list|()
return|;
block|}
finally|finally
block|{
name|Client
operator|.
name|setAsynchronousMode
argument_list|(
name|isAsync
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

