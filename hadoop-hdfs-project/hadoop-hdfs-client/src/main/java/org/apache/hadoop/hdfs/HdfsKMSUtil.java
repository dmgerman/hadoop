begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CipherSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
operator|.
name|KeyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderDelegationTokenExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderTokenIssuer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileEncryptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|KMSUtil
import|;
end_import

begin_comment
comment|/**  * Utility class for key provider related methods in hdfs client package.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|HdfsKMSUtil
specifier|public
specifier|final
class|class
name|HdfsKMSUtil
block|{
DECL|field|DFS_KMS_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|DFS_KMS_PREFIX
init|=
literal|"dfs-kms-"
decl_stmt|;
DECL|field|keyProviderUriKeyName
specifier|private
specifier|static
name|String
name|keyProviderUriKeyName
init|=
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
decl_stmt|;
DECL|method|HdfsKMSUtil ()
specifier|private
name|HdfsKMSUtil
parameter_list|()
block|{
comment|/* Hidden constructor */
block|}
comment|/**    * Creates a new KeyProvider from the given Configuration.    *    * @param conf Configuration    * @return new KeyProvider, or null if no provider was found.    * @throws IOException if the KeyProvider is improperly specified in    *                             the Configuration    */
DECL|method|createKeyProvider ( final Configuration conf)
specifier|public
specifier|static
name|KeyProvider
name|createKeyProvider
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|KMSUtil
operator|.
name|createKeyProvider
argument_list|(
name|conf
argument_list|,
name|keyProviderUriKeyName
argument_list|)
return|;
block|}
DECL|method|addDelegationTokensForKeyProvider ( KeyProviderTokenIssuer kpTokenIssuer, final String renewer, Credentials credentials, URI namenodeUri, Token<?>[] tokens)
specifier|public
specifier|static
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|addDelegationTokensForKeyProvider
parameter_list|(
name|KeyProviderTokenIssuer
name|kpTokenIssuer
parameter_list|,
specifier|final
name|String
name|renewer
parameter_list|,
name|Credentials
name|credentials
parameter_list|,
name|URI
name|namenodeUri
parameter_list|,
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|tokens
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyProvider
name|keyProvider
init|=
name|kpTokenIssuer
operator|.
name|getKeyProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyProvider
operator|!=
literal|null
condition|)
block|{
name|KeyProviderDelegationTokenExtension
name|keyProviderDelegationTokenExtension
init|=
name|KeyProviderDelegationTokenExtension
operator|.
name|createKeyProviderDelegationTokenExtension
argument_list|(
name|keyProvider
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|kpTokens
init|=
name|keyProviderDelegationTokenExtension
operator|.
name|addDelegationTokens
argument_list|(
name|renewer
argument_list|,
name|credentials
argument_list|)
decl_stmt|;
name|credentials
operator|.
name|addSecretKey
argument_list|(
name|getKeyProviderMapKey
argument_list|(
name|namenodeUri
argument_list|)
argument_list|,
name|DFSUtilClient
operator|.
name|string2Bytes
argument_list|(
name|kpTokenIssuer
operator|.
name|getKeyProviderUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokens
operator|!=
literal|null
operator|&&
name|kpTokens
operator|!=
literal|null
condition|)
block|{
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|all
init|=
operator|new
name|Token
argument_list|<
name|?
argument_list|>
index|[
name|tokens
operator|.
name|length
operator|+
name|kpTokens
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tokens
argument_list|,
literal|0
argument_list|,
name|all
argument_list|,
literal|0
argument_list|,
name|tokens
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|kpTokens
argument_list|,
literal|0
argument_list|,
name|all
argument_list|,
name|tokens
operator|.
name|length
argument_list|,
name|kpTokens
operator|.
name|length
argument_list|)
expr_stmt|;
name|tokens
operator|=
name|all
expr_stmt|;
block|}
else|else
block|{
name|tokens
operator|=
operator|(
name|tokens
operator|!=
literal|null
operator|)
condition|?
name|tokens
else|:
name|kpTokens
expr_stmt|;
block|}
block|}
return|return
name|tokens
return|;
block|}
comment|/**    * Obtain the crypto protocol version from the provided FileEncryptionInfo,    * checking to see if this version is supported by.    *    * @param feInfo FileEncryptionInfo    * @return CryptoProtocolVersion from the feInfo    * @throws IOException if the protocol version is unsupported.    */
DECL|method|getCryptoProtocolVersion ( FileEncryptionInfo feInfo)
specifier|public
specifier|static
name|CryptoProtocolVersion
name|getCryptoProtocolVersion
parameter_list|(
name|FileEncryptionInfo
name|feInfo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|CryptoProtocolVersion
name|version
init|=
name|feInfo
operator|.
name|getCryptoProtocolVersion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|CryptoProtocolVersion
operator|.
name|supports
argument_list|(
name|version
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Client does not support specified "
operator|+
literal|"CryptoProtocolVersion "
operator|+
name|version
operator|.
name|getDescription
argument_list|()
operator|+
literal|" version "
operator|+
literal|"number"
operator|+
name|version
operator|.
name|getVersion
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|version
return|;
block|}
comment|/**    * Obtain a CryptoCodec based on the CipherSuite set in a FileEncryptionInfo    * and the available CryptoCodecs configured in the Configuration.    *    * @param conf   Configuration    * @param feInfo FileEncryptionInfo    * @return CryptoCodec    * @throws IOException if no suitable CryptoCodec for the CipherSuite is    *                     available.    */
DECL|method|getCryptoCodec (Configuration conf, FileEncryptionInfo feInfo)
specifier|public
specifier|static
name|CryptoCodec
name|getCryptoCodec
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileEncryptionInfo
name|feInfo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|CipherSuite
name|suite
init|=
name|feInfo
operator|.
name|getCipherSuite
argument_list|()
decl_stmt|;
if|if
condition|(
name|suite
operator|.
name|equals
argument_list|(
name|CipherSuite
operator|.
name|UNKNOWN
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"NameNode specified unknown CipherSuite with ID "
operator|+
name|suite
operator|.
name|getUnknownValue
argument_list|()
operator|+
literal|", cannot instantiate CryptoCodec."
argument_list|)
throw|;
block|}
specifier|final
name|CryptoCodec
name|codec
init|=
name|CryptoCodec
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
name|suite
argument_list|)
decl_stmt|;
if|if
condition|(
name|codec
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownCipherSuiteException
argument_list|(
literal|"No configuration found for the cipher suite "
operator|+
name|suite
operator|.
name|getConfigSuffix
argument_list|()
operator|+
literal|" prefixed with "
operator|+
name|HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX
operator|+
literal|". Please see the example configuration "
operator|+
literal|"hadoop.security.crypto.codec.classes.EXAMPLECIPHERSUITE "
operator|+
literal|"at core-default.xml for details."
argument_list|)
throw|;
block|}
return|return
name|codec
return|;
block|}
comment|/**    * The key provider uri is searched in the following order.    * 1. If there is a mapping in Credential's secrets map for namenode uri.    * 2. From namenode getServerDefaults call.    * 3. Finally fallback to local conf.    * @return keyProviderUri if found from either of above 3 cases,    * null otherwise    * @throws IOException    */
DECL|method|getKeyProviderUri (UserGroupInformation ugi, URI namenodeUri, String keyProviderUriStr, Configuration conf)
specifier|public
specifier|static
name|URI
name|getKeyProviderUri
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|URI
name|namenodeUri
parameter_list|,
name|String
name|keyProviderUriStr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|URI
name|keyProviderUri
init|=
literal|null
decl_stmt|;
comment|// Lookup the secret in credentials object for namenodeuri.
name|Credentials
name|credentials
init|=
name|ugi
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
name|byte
index|[]
name|keyProviderUriBytes
init|=
name|credentials
operator|.
name|getSecretKey
argument_list|(
name|getKeyProviderMapKey
argument_list|(
name|namenodeUri
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyProviderUriBytes
operator|!=
literal|null
condition|)
block|{
name|keyProviderUri
operator|=
name|URI
operator|.
name|create
argument_list|(
name|DFSUtilClient
operator|.
name|bytes2String
argument_list|(
name|keyProviderUriBytes
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|keyProviderUri
return|;
block|}
if|if
condition|(
name|keyProviderUriStr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|keyProviderUriStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|keyProviderUri
operator|=
name|URI
operator|.
name|create
argument_list|(
name|keyProviderUriStr
argument_list|)
expr_stmt|;
block|}
return|return
name|keyProviderUri
return|;
block|}
comment|// Last thing is to trust its own conf to be backwards compatible.
name|String
name|keyProviderUriFromConf
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyProviderUriFromConf
operator|!=
literal|null
operator|&&
operator|!
name|keyProviderUriFromConf
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|keyProviderUri
operator|=
name|URI
operator|.
name|create
argument_list|(
name|keyProviderUriFromConf
argument_list|)
expr_stmt|;
block|}
return|return
name|keyProviderUri
return|;
block|}
comment|/**    * Returns a key to map namenode uri to key provider uri.    * Tasks will lookup this key to find key Provider.    */
DECL|method|getKeyProviderMapKey (URI namenodeUri)
specifier|public
specifier|static
name|Text
name|getKeyProviderMapKey
parameter_list|(
name|URI
name|namenodeUri
parameter_list|)
block|{
return|return
operator|new
name|Text
argument_list|(
name|DFS_KMS_PREFIX
operator|+
name|namenodeUri
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|namenodeUri
operator|.
name|getAuthority
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createWrappedInputStream (InputStream is, KeyProvider keyProvider, FileEncryptionInfo fileEncryptionInfo, Configuration conf)
specifier|public
specifier|static
name|CryptoInputStream
name|createWrappedInputStream
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|KeyProvider
name|keyProvider
parameter_list|,
name|FileEncryptionInfo
name|fileEncryptionInfo
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// File is encrypted, wrap the stream in a crypto stream.
comment|// Currently only one version, so no special logic based on the version#
name|HdfsKMSUtil
operator|.
name|getCryptoProtocolVersion
argument_list|(
name|fileEncryptionInfo
argument_list|)
expr_stmt|;
specifier|final
name|CryptoCodec
name|codec
init|=
name|HdfsKMSUtil
operator|.
name|getCryptoCodec
argument_list|(
name|conf
argument_list|,
name|fileEncryptionInfo
argument_list|)
decl_stmt|;
specifier|final
name|KeyVersion
name|decrypted
init|=
name|decryptEncryptedDataEncryptionKey
argument_list|(
name|fileEncryptionInfo
argument_list|,
name|keyProvider
argument_list|)
decl_stmt|;
return|return
operator|new
name|CryptoInputStream
argument_list|(
name|is
argument_list|,
name|codec
argument_list|,
name|decrypted
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|fileEncryptionInfo
operator|.
name|getIV
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Decrypts a EDEK by consulting the KeyProvider.    */
DECL|method|decryptEncryptedDataEncryptionKey (FileEncryptionInfo feInfo, KeyProvider keyProvider)
specifier|static
name|KeyVersion
name|decryptEncryptedDataEncryptionKey
parameter_list|(
name|FileEncryptionInfo
name|feInfo
parameter_list|,
name|KeyProvider
name|keyProvider
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|keyProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No KeyProvider is configured, cannot access"
operator|+
literal|" an encrypted file"
argument_list|)
throw|;
block|}
name|EncryptedKeyVersion
name|ekv
init|=
name|EncryptedKeyVersion
operator|.
name|createForDecryption
argument_list|(
name|feInfo
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|feInfo
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|,
name|feInfo
operator|.
name|getIV
argument_list|()
argument_list|,
name|feInfo
operator|.
name|getEncryptedDataEncryptionKey
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProviderCryptoExtension
name|cryptoProvider
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|keyProvider
argument_list|)
decl_stmt|;
return|return
name|cryptoProvider
operator|.
name|decryptEncryptedKey
argument_list|(
name|ekv
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

