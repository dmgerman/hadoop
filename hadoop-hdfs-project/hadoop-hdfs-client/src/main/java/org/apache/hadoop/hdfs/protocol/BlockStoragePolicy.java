begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockStoragePolicySpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A block storage policy describes how to select the storage types  * for the replicas of a block.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|BlockStoragePolicy
specifier|public
class|class
name|BlockStoragePolicy
implements|implements
name|BlockStoragePolicySpi
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlockStoragePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** A 4-bit policy ID */
DECL|field|id
specifier|private
specifier|final
name|byte
name|id
decl_stmt|;
comment|/** Policy name */
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|/** The storage types to store the replicas of a new block. */
DECL|field|storageTypes
specifier|private
specifier|final
name|StorageType
index|[]
name|storageTypes
decl_stmt|;
comment|/** The fallback storage type for block creation. */
DECL|field|creationFallbacks
specifier|private
specifier|final
name|StorageType
index|[]
name|creationFallbacks
decl_stmt|;
comment|/** The fallback storage type for replication. */
DECL|field|replicationFallbacks
specifier|private
specifier|final
name|StorageType
index|[]
name|replicationFallbacks
decl_stmt|;
comment|/**    * Whether the policy is inherited during file creation.    * If set then the policy cannot be changed after file creation.    */
DECL|field|copyOnCreateFile
specifier|private
name|boolean
name|copyOnCreateFile
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|BlockStoragePolicy (byte id, String name, StorageType[] storageTypes, StorageType[] creationFallbacks, StorageType[] replicationFallbacks)
specifier|public
name|BlockStoragePolicy
parameter_list|(
name|byte
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|StorageType
index|[]
name|storageTypes
parameter_list|,
name|StorageType
index|[]
name|creationFallbacks
parameter_list|,
name|StorageType
index|[]
name|replicationFallbacks
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|storageTypes
argument_list|,
name|creationFallbacks
argument_list|,
name|replicationFallbacks
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|BlockStoragePolicy (byte id, String name, StorageType[] storageTypes, StorageType[] creationFallbacks, StorageType[] replicationFallbacks, boolean copyOnCreateFile)
specifier|public
name|BlockStoragePolicy
parameter_list|(
name|byte
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|StorageType
index|[]
name|storageTypes
parameter_list|,
name|StorageType
index|[]
name|creationFallbacks
parameter_list|,
name|StorageType
index|[]
name|replicationFallbacks
parameter_list|,
name|boolean
name|copyOnCreateFile
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|storageTypes
operator|=
name|storageTypes
expr_stmt|;
name|this
operator|.
name|creationFallbacks
operator|=
name|creationFallbacks
expr_stmt|;
name|this
operator|.
name|replicationFallbacks
operator|=
name|replicationFallbacks
expr_stmt|;
name|this
operator|.
name|copyOnCreateFile
operator|=
name|copyOnCreateFile
expr_stmt|;
block|}
comment|/**    * @return a list of {@link StorageType}s for storing the replicas of a block.    */
DECL|method|chooseStorageTypes (final short replication)
specifier|public
name|List
argument_list|<
name|StorageType
argument_list|>
name|chooseStorageTypes
parameter_list|(
specifier|final
name|short
name|replication
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|types
init|=
operator|new
name|LinkedList
argument_list|<
name|StorageType
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|,
name|j
init|=
literal|0
decl_stmt|;
comment|// Do not return transient storage types. We will not have accurate
comment|// usage information for transient types.
for|for
control|(
init|;
name|i
operator|<
name|replication
operator|&&
name|j
operator|<
name|storageTypes
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
operator|!
name|storageTypes
index|[
name|j
index|]
operator|.
name|isTransient
argument_list|()
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
name|storageTypes
index|[
name|j
index|]
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|}
specifier|final
name|StorageType
name|last
init|=
name|storageTypes
index|[
name|storageTypes
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|last
operator|.
name|isTransient
argument_list|()
condition|)
block|{
for|for
control|(
init|;
name|i
operator|<
name|replication
condition|;
name|i
operator|++
control|)
block|{
name|types
operator|.
name|add
argument_list|(
name|last
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|types
return|;
block|}
comment|/**    * Choose the storage types for storing the remaining replicas, given the    * replication number and the storage types of the chosen replicas.    *    * @param replication the replication number.    * @param chosen the storage types of the chosen replicas.    * @return a list of {@link StorageType}s for storing the replicas of a block.    */
DECL|method|chooseStorageTypes (final short replication, final Iterable<StorageType> chosen)
specifier|public
name|List
argument_list|<
name|StorageType
argument_list|>
name|chooseStorageTypes
parameter_list|(
specifier|final
name|short
name|replication
parameter_list|,
specifier|final
name|Iterable
argument_list|<
name|StorageType
argument_list|>
name|chosen
parameter_list|)
block|{
return|return
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|,
name|chosen
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|chooseStorageTypes (final short replication, final Iterable<StorageType> chosen, final List<StorageType> excess)
specifier|private
name|List
argument_list|<
name|StorageType
argument_list|>
name|chooseStorageTypes
parameter_list|(
specifier|final
name|short
name|replication
parameter_list|,
specifier|final
name|Iterable
argument_list|<
name|StorageType
argument_list|>
name|chosen
parameter_list|,
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|excess
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|types
init|=
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|)
decl_stmt|;
name|diff
argument_list|(
name|types
argument_list|,
name|chosen
argument_list|,
name|excess
argument_list|)
expr_stmt|;
return|return
name|types
return|;
block|}
comment|/**    * Choose the storage types for storing the remaining replicas, given the    * replication number, the storage types of the chosen replicas and    * the unavailable storage types. It uses fallback storage in case that    * the desired storage type is unavailable.    *    * @param replication the replication number.    * @param chosen the storage types of the chosen replicas.    * @param unavailables the unavailable storage types.    * @param isNewBlock Is it for new block creation?    * @return a list of {@link StorageType}s for storing the replicas of a block.    */
DECL|method|chooseStorageTypes (final short replication, final Iterable<StorageType> chosen, final EnumSet<StorageType> unavailables, final boolean isNewBlock)
specifier|public
name|List
argument_list|<
name|StorageType
argument_list|>
name|chooseStorageTypes
parameter_list|(
specifier|final
name|short
name|replication
parameter_list|,
specifier|final
name|Iterable
argument_list|<
name|StorageType
argument_list|>
name|chosen
parameter_list|,
specifier|final
name|EnumSet
argument_list|<
name|StorageType
argument_list|>
name|unavailables
parameter_list|,
specifier|final
name|boolean
name|isNewBlock
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|excess
init|=
operator|new
name|LinkedList
argument_list|<
name|StorageType
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|storageTypes
init|=
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|,
name|chosen
argument_list|,
name|excess
argument_list|)
decl_stmt|;
specifier|final
name|int
name|expectedSize
init|=
name|storageTypes
operator|.
name|size
argument_list|()
operator|-
name|excess
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|removed
init|=
operator|new
name|LinkedList
argument_list|<
name|StorageType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|storageTypes
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
comment|// replace/remove unavailable storage types.
specifier|final
name|StorageType
name|t
init|=
name|storageTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|unavailables
operator|.
name|contains
argument_list|(
name|t
argument_list|)
condition|)
block|{
specifier|final
name|StorageType
name|fallback
init|=
name|isNewBlock
condition|?
name|getCreationFallback
argument_list|(
name|unavailables
argument_list|)
else|:
name|getReplicationFallback
argument_list|(
name|unavailables
argument_list|)
decl_stmt|;
if|if
condition|(
name|fallback
operator|==
literal|null
condition|)
block|{
name|removed
operator|.
name|add
argument_list|(
name|storageTypes
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storageTypes
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|fallback
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// remove excess storage types after fallback replacement.
name|diff
argument_list|(
name|storageTypes
argument_list|,
name|excess
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|storageTypes
operator|.
name|size
argument_list|()
operator|<
name|expectedSize
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to place enough replicas: expected size is {}"
operator|+
literal|" but only {} storage types can be selected (replication={},"
operator|+
literal|" selected={}, unavailable={}"
operator|+
literal|", removed={}"
operator|+
literal|", policy={}"
operator|+
literal|")"
argument_list|,
name|expectedSize
argument_list|,
name|storageTypes
operator|.
name|size
argument_list|()
argument_list|,
name|replication
argument_list|,
name|storageTypes
argument_list|,
name|unavailables
argument_list|,
name|removed
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|storageTypes
return|;
block|}
comment|/**    * Compute the difference between two lists t and c so that after the diff    * computation we have: t = t - c;    * Further, if e is not null, set e = e + c - t;    */
DECL|method|diff (List<StorageType> t, Iterable<StorageType> c, List<StorageType> e)
specifier|private
specifier|static
name|void
name|diff
parameter_list|(
name|List
argument_list|<
name|StorageType
argument_list|>
name|t
parameter_list|,
name|Iterable
argument_list|<
name|StorageType
argument_list|>
name|c
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|e
parameter_list|)
block|{
for|for
control|(
name|StorageType
name|storagetype
range|:
name|c
control|)
block|{
specifier|final
name|int
name|i
init|=
name|t
operator|.
name|indexOf
argument_list|(
name|storagetype
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|t
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|add
argument_list|(
name|storagetype
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Choose excess storage types for deletion, given the    * replication number and the storage types of the chosen replicas.    *    * @param replication the replication number.    * @param chosen the storage types of the chosen replicas.    * @return a list of {@link StorageType}s for deletion.    */
DECL|method|chooseExcess (final short replication, final Iterable<StorageType> chosen)
specifier|public
name|List
argument_list|<
name|StorageType
argument_list|>
name|chooseExcess
parameter_list|(
specifier|final
name|short
name|replication
parameter_list|,
specifier|final
name|Iterable
argument_list|<
name|StorageType
argument_list|>
name|chosen
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|types
init|=
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|excess
init|=
operator|new
name|LinkedList
argument_list|<
name|StorageType
argument_list|>
argument_list|()
decl_stmt|;
name|diff
argument_list|(
name|types
argument_list|,
name|chosen
argument_list|,
name|excess
argument_list|)
expr_stmt|;
return|return
name|excess
return|;
block|}
comment|/** @return the fallback {@link StorageType} for creation. */
DECL|method|getCreationFallback (EnumSet<StorageType> unavailables)
specifier|public
name|StorageType
name|getCreationFallback
parameter_list|(
name|EnumSet
argument_list|<
name|StorageType
argument_list|>
name|unavailables
parameter_list|)
block|{
return|return
name|getFallback
argument_list|(
name|unavailables
argument_list|,
name|creationFallbacks
argument_list|)
return|;
block|}
comment|/** @return the fallback {@link StorageType} for replication. */
DECL|method|getReplicationFallback (EnumSet<StorageType> unavailables)
specifier|public
name|StorageType
name|getReplicationFallback
parameter_list|(
name|EnumSet
argument_list|<
name|StorageType
argument_list|>
name|unavailables
parameter_list|)
block|{
return|return
name|getFallback
argument_list|(
name|unavailables
argument_list|,
name|replicationFallbacks
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|BlockStoragePolicy
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|BlockStoragePolicy
name|that
init|=
operator|(
name|BlockStoragePolicy
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|id
operator|==
name|that
operator|.
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"{"
operator|+
name|name
operator|+
literal|":"
operator|+
name|id
operator|+
literal|", storageTypes="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|storageTypes
argument_list|)
operator|+
literal|", creationFallbacks="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|creationFallbacks
argument_list|)
operator|+
literal|", replicationFallbacks="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|replicationFallbacks
argument_list|)
operator|+
literal|"}"
return|;
block|}
DECL|method|getId ()
specifier|public
name|byte
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|getStorageTypes ()
specifier|public
name|StorageType
index|[]
name|getStorageTypes
parameter_list|()
block|{
return|return
name|this
operator|.
name|storageTypes
return|;
block|}
annotation|@
name|Override
DECL|method|getCreationFallbacks ()
specifier|public
name|StorageType
index|[]
name|getCreationFallbacks
parameter_list|()
block|{
return|return
name|this
operator|.
name|creationFallbacks
return|;
block|}
annotation|@
name|Override
DECL|method|getReplicationFallbacks ()
specifier|public
name|StorageType
index|[]
name|getReplicationFallbacks
parameter_list|()
block|{
return|return
name|this
operator|.
name|replicationFallbacks
return|;
block|}
DECL|method|getFallback (EnumSet<StorageType> unavailables, StorageType[] fallbacks)
specifier|private
specifier|static
name|StorageType
name|getFallback
parameter_list|(
name|EnumSet
argument_list|<
name|StorageType
argument_list|>
name|unavailables
parameter_list|,
name|StorageType
index|[]
name|fallbacks
parameter_list|)
block|{
for|for
control|(
name|StorageType
name|fb
range|:
name|fallbacks
control|)
block|{
if|if
condition|(
operator|!
name|unavailables
operator|.
name|contains
argument_list|(
name|fb
argument_list|)
condition|)
block|{
return|return
name|fb
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isCopyOnCreateFile ()
specifier|public
name|boolean
name|isCopyOnCreateFile
parameter_list|()
block|{
return|return
name|copyOnCreateFile
return|;
block|}
block|}
end_class

end_unit

