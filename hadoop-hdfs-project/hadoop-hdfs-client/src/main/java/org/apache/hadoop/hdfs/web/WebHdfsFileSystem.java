begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_WEBHDFS_REST_CSRF_CUSTOM_HEADER_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_WEBHDFS_REST_CSRF_CUSTOM_HEADER_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_WEBHDFS_REST_CSRF_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_WEBHDFS_REST_CSRF_METHODS_TO_IGNORE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_WEBHDFS_REST_CSRF_METHODS_TO_IGNORE_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|BoundedInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|DelegationTokenRenewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|GlobalStorageStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|GlobalStorageStatistics
operator|.
name|StorageStatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsCreateModes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSOpsCountStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSOpsCountStatistics
operator|.
name|OpType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|MD5MD5CRC32FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HAUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|HttpOpParam
operator|.
name|Op
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/** A FileSystem for HDFS over the web. */
end_comment

begin_class
DECL|class|WebHdfsFileSystem
specifier|public
class|class
name|WebHdfsFileSystem
extends|extends
name|FileSystem
implements|implements
name|DelegationTokenRenewer
operator|.
name|Renewable
implements|,
name|TokenAspect
operator|.
name|TokenManagementDelegator
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WebHdfsFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** WebHdfs version. */
DECL|field|VERSION
specifier|public
specifier|static
specifier|final
name|int
name|VERSION
init|=
literal|1
decl_stmt|;
comment|/** Http URI: http://namenode:port/{PATH_PREFIX}/path/to/file */
DECL|field|PATH_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
literal|"/"
operator|+
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
operator|+
literal|"/v"
operator|+
name|VERSION
decl_stmt|;
comment|/**    * Default connection factory may be overridden in tests to use smaller    * timeout values    */
DECL|field|connectionFactory
specifier|protected
name|URLConnectionFactory
name|connectionFactory
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|CANT_FALLBACK_TO_INSECURE_MSG
specifier|public
specifier|static
specifier|final
name|String
name|CANT_FALLBACK_TO_INSECURE_MSG
init|=
literal|"The client is configured to only allow connecting to secure cluster"
decl_stmt|;
DECL|field|canRefreshDelegationToken
specifier|private
name|boolean
name|canRefreshDelegationToken
decl_stmt|;
DECL|field|ugi
specifier|private
name|UserGroupInformation
name|ugi
decl_stmt|;
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|delegationToken
specifier|private
name|Token
argument_list|<
name|?
argument_list|>
name|delegationToken
decl_stmt|;
DECL|field|tokenServiceName
specifier|protected
name|Text
name|tokenServiceName
decl_stmt|;
DECL|field|retryPolicy
specifier|private
name|RetryPolicy
name|retryPolicy
init|=
literal|null
decl_stmt|;
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
decl_stmt|;
DECL|field|cachedHomeDirectory
specifier|private
name|Path
name|cachedHomeDirectory
decl_stmt|;
DECL|field|nnAddrs
specifier|private
name|InetSocketAddress
name|nnAddrs
index|[]
decl_stmt|;
DECL|field|currentNNAddrIndex
specifier|private
name|int
name|currentNNAddrIndex
decl_stmt|;
DECL|field|disallowFallbackToInsecureCluster
specifier|private
name|boolean
name|disallowFallbackToInsecureCluster
decl_stmt|;
DECL|field|restCsrfCustomHeader
specifier|private
name|String
name|restCsrfCustomHeader
decl_stmt|;
DECL|field|restCsrfMethodsToIgnore
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|restCsrfMethodsToIgnore
decl_stmt|;
DECL|field|READER
specifier|private
specifier|static
specifier|final
name|ObjectReader
name|READER
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|reader
argument_list|(
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|storageStatistics
specifier|private
name|DFSOpsCountStatistics
name|storageStatistics
decl_stmt|;
comment|/**    * Return the protocol scheme for the FileSystem.    *<p/>    *    * @return<code>webhdfs</code>    */
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
return|;
block|}
comment|/**    * return the underlying transport protocol (http / https).    */
DECL|method|getTransportScheme ()
specifier|protected
name|String
name|getTransportScheme
parameter_list|()
block|{
return|return
literal|"http"
return|;
block|}
DECL|method|getTokenKind ()
specifier|protected
name|Text
name|getTokenKind
parameter_list|()
block|{
return|return
name|WebHdfsConstants
operator|.
name|WEBHDFS_TOKEN_KIND
return|;
block|}
annotation|@
name|Override
DECL|method|initialize (URI uri, Configuration conf )
specifier|public
specifier|synchronized
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|/** set user pattern based on configuration file */
name|UserParam
operator|.
name|setUserPattern
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_WEBHDFS_USER_PATTERN_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|DFS_WEBHDFS_USER_PATTERN_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|isOAuth
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_WEBHDFS_OAUTH_ENABLED_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|DFS_WEBHDFS_OAUTH_ENABLED_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|isOAuth
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Enabling OAuth2 in WebHDFS"
argument_list|)
expr_stmt|;
name|connectionFactory
operator|=
name|URLConnectionFactory
operator|.
name|newOAuth2URLConnectionFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not enabling OAuth2 in WebHDFS"
argument_list|)
expr_stmt|;
name|connectionFactory
operator|=
name|URLConnectionFactory
operator|.
name|newDefaultURLConnectionFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|URI
operator|.
name|create
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|nnAddrs
operator|=
name|resolveNNAddr
argument_list|()
expr_stmt|;
name|boolean
name|isHA
init|=
name|HAUtilClient
operator|.
name|isClientFailoverConfigured
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|uri
argument_list|)
decl_stmt|;
name|boolean
name|isLogicalUri
init|=
name|isHA
operator|&&
name|HAUtilClient
operator|.
name|isLogicalUri
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|uri
argument_list|)
decl_stmt|;
comment|// In non-HA or non-logical URI case, the code needs to call
comment|// getCanonicalUri() in order to handle the case where no port is
comment|// specified in the URI
name|this
operator|.
name|tokenServiceName
operator|=
name|isLogicalUri
condition|?
name|HAUtilClient
operator|.
name|buildTokenServiceForLogicalUri
argument_list|(
name|uri
argument_list|,
name|getScheme
argument_list|()
argument_list|)
else|:
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
name|getCanonicalUri
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isHA
condition|)
block|{
name|this
operator|.
name|retryPolicy
operator|=
name|RetryUtils
operator|.
name|getDefaultRetryPolicy
argument_list|(
name|conf
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|HttpClient
operator|.
name|RETRY_POLICY_ENABLED_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|HttpClient
operator|.
name|RETRY_POLICY_ENABLED_DEFAULT
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|HttpClient
operator|.
name|RETRY_POLICY_SPEC_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|HttpClient
operator|.
name|RETRY_POLICY_SPEC_DEFAULT
argument_list|,
name|HdfsConstants
operator|.
name|SAFEMODE_EXCEPTION_CLASS_NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|maxFailoverAttempts
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|HttpClient
operator|.
name|FAILOVER_MAX_ATTEMPTS_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|HttpClient
operator|.
name|FAILOVER_MAX_ATTEMPTS_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|maxRetryAttempts
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|HttpClient
operator|.
name|RETRY_MAX_ATTEMPTS_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|HttpClient
operator|.
name|RETRY_MAX_ATTEMPTS_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|failoverSleepBaseMillis
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|HttpClient
operator|.
name|FAILOVER_SLEEPTIME_BASE_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|HttpClient
operator|.
name|FAILOVER_SLEEPTIME_BASE_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|failoverSleepMaxMillis
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|HttpClient
operator|.
name|FAILOVER_SLEEPTIME_MAX_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|HttpClient
operator|.
name|FAILOVER_SLEEPTIME_MAX_DEFAULT
argument_list|)
decl_stmt|;
name|this
operator|.
name|retryPolicy
operator|=
name|RetryPolicies
operator|.
name|failoverOnNetworkException
argument_list|(
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
argument_list|,
name|maxFailoverAttempts
argument_list|,
name|maxRetryAttempts
argument_list|,
name|failoverSleepBaseMillis
argument_list|,
name|failoverSleepMaxMillis
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|workingDir
operator|=
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|getHomeDirectoryString
argument_list|(
name|ugi
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|canRefreshDelegationToken
operator|=
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
expr_stmt|;
name|this
operator|.
name|disallowFallbackToInsecureCluster
operator|=
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH_ALLOWED_KEY
argument_list|,
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH_ALLOWED_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|initializeRestCsrf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegationToken
operator|=
literal|null
expr_stmt|;
name|storageStatistics
operator|=
operator|(
name|DFSOpsCountStatistics
operator|)
name|GlobalStorageStatistics
operator|.
name|INSTANCE
operator|.
name|put
argument_list|(
name|DFSOpsCountStatistics
operator|.
name|NAME
argument_list|,
operator|new
name|StorageStatisticsProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|StorageStatistics
name|provide
parameter_list|()
block|{
return|return
operator|new
name|DFSOpsCountStatistics
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initializes client-side handling of cross-site request forgery (CSRF)    * protection by figuring out the custom HTTP headers that need to be sent in    * requests and which HTTP methods are ignored because they do not require    * CSRF protection.    *    * @param conf configuration to read    */
DECL|method|initializeRestCsrf (Configuration conf)
specifier|private
name|void
name|initializeRestCsrf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_WEBHDFS_REST_CSRF_ENABLED_KEY
argument_list|,
name|DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT
argument_list|)
condition|)
block|{
name|this
operator|.
name|restCsrfCustomHeader
operator|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|DFS_WEBHDFS_REST_CSRF_CUSTOM_HEADER_KEY
argument_list|,
name|DFS_WEBHDFS_REST_CSRF_CUSTOM_HEADER_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|restCsrfMethodsToIgnore
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|restCsrfMethodsToIgnore
operator|.
name|addAll
argument_list|(
name|getTrimmedStringList
argument_list|(
name|conf
argument_list|,
name|DFS_WEBHDFS_REST_CSRF_METHODS_TO_IGNORE_KEY
argument_list|,
name|DFS_WEBHDFS_REST_CSRF_METHODS_TO_IGNORE_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|restCsrfCustomHeader
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|restCsrfMethodsToIgnore
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Returns a list of strings from a comma-delimited configuration value.    *    * @param conf configuration to check    * @param name configuration property name    * @param defaultValue default value if no value found for name    * @return list of strings from comma-delimited configuration value, or an    *     empty list if not found    */
DECL|method|getTrimmedStringList (Configuration conf, String name, String defaultValue)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getTrimmedStringList
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|valueString
init|=
name|conf
operator|.
name|get
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueString
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|StringUtils
operator|.
name|getTrimmedStringCollection
argument_list|(
name|valueString
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCanonicalUri ()
specifier|public
name|URI
name|getCanonicalUri
parameter_list|()
block|{
return|return
name|super
operator|.
name|getCanonicalUri
argument_list|()
return|;
block|}
DECL|field|tokenSelector
name|TokenSelector
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|tokenSelector
init|=
operator|new
name|AbstractDelegationTokenSelector
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|(
name|getTokenKind
argument_list|()
argument_list|)
block|{}
decl_stmt|;
comment|// the first getAuthParams() for a non-token op will either get the
comment|// internal token from the ugi or lazy fetch one
DECL|method|getDelegationToken ()
specifier|protected
specifier|synchronized
name|Token
argument_list|<
name|?
argument_list|>
name|getDelegationToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|delegationToken
operator|==
literal|null
condition|)
block|{
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|tokenSelector
operator|.
name|selectToken
argument_list|(
operator|new
name|Text
argument_list|(
name|getCanonicalServiceName
argument_list|()
argument_list|)
argument_list|,
name|ugi
operator|.
name|getTokens
argument_list|()
argument_list|)
decl_stmt|;
comment|// ugi tokens are usually indicative of a task which can't
comment|// refetch tokens.  even if ugi has credentials, don't attempt
comment|// to get another token to match hdfs/rpc behavior
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using UGI token: {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|canRefreshDelegationToken
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|canRefreshDelegationToken
condition|)
block|{
name|token
operator|=
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Fetched new token: {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// security is disabled
name|canRefreshDelegationToken
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
name|setDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
return|return
name|delegationToken
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|replaceExpiredDelegationToken ()
specifier|synchronized
name|boolean
name|replaceExpiredDelegationToken
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|replaced
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|canRefreshDelegationToken
condition|)
block|{
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Replaced expired token: {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|setDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|replaced
operator|=
operator|(
name|token
operator|!=
literal|null
operator|)
expr_stmt|;
block|}
return|return
name|replaced
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultPort ()
specifier|protected
name|int
name|getDefaultPort
parameter_list|()
block|{
return|return
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_PORT_DEFAULT
return|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|this
operator|.
name|uri
return|;
block|}
annotation|@
name|Override
DECL|method|canonicalizeUri (URI uri)
specifier|protected
name|URI
name|canonicalizeUri
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
return|return
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|uri
argument_list|,
name|getDefaultPort
argument_list|()
argument_list|)
return|;
block|}
comment|/** @return the home directory */
annotation|@
name|Deprecated
DECL|method|getHomeDirectoryString (final UserGroupInformation ugi)
specifier|public
specifier|static
name|String
name|getHomeDirectoryString
parameter_list|(
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
return|return
literal|"/user/"
operator|+
name|ugi
operator|.
name|getShortUserName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
if|if
condition|(
name|cachedHomeDirectory
operator|==
literal|null
condition|)
block|{
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|GETHOMEDIRECTORY
decl_stmt|;
try|try
block|{
name|String
name|pathFromDelegatedFS
init|=
operator|new
name|FsPathResponseRunner
argument_list|<
name|String
argument_list|>
argument_list|(
name|op
argument_list|,
literal|null
argument_list|,
operator|new
name|UserParam
argument_list|(
name|ugi
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
name|String
name|decodeResponse
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|JsonUtilClient
operator|.
name|getPath
argument_list|(
name|json
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|()
decl_stmt|;
name|cachedHomeDirectory
operator|=
operator|new
name|Path
argument_list|(
name|pathFromDelegatedFS
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|this
operator|.
name|getUri
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get HomeDirectory from original File System"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|cachedHomeDirectory
operator|=
operator|new
name|Path
argument_list|(
literal|"/user/"
operator|+
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|this
operator|.
name|getUri
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cachedHomeDirectory
return|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
specifier|synchronized
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (final Path dir)
specifier|public
specifier|synchronized
name|void
name|setWorkingDirectory
parameter_list|(
specifier|final
name|Path
name|dir
parameter_list|)
block|{
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|absolutePath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|DFSUtilClient
operator|.
name|isValidName
argument_list|(
name|result
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid DFS directory name "
operator|+
name|result
argument_list|)
throw|;
block|}
name|workingDir
operator|=
name|absolutePath
expr_stmt|;
block|}
DECL|method|makeAbsolute (Path f)
specifier|private
name|Path
name|makeAbsolute
parameter_list|(
name|Path
name|f
parameter_list|)
block|{
return|return
name|f
operator|.
name|isAbsolute
argument_list|()
condition|?
name|f
else|:
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|f
argument_list|)
return|;
block|}
DECL|method|jsonParse (final HttpURLConnection c, final boolean useErrorStream)
specifier|static
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|jsonParse
parameter_list|(
specifier|final
name|HttpURLConnection
name|c
parameter_list|,
specifier|final
name|boolean
name|useErrorStream
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|c
operator|.
name|getContentLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|InputStream
name|in
init|=
name|useErrorStream
condition|?
name|c
operator|.
name|getErrorStream
argument_list|()
else|:
name|c
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The "
operator|+
operator|(
name|useErrorStream
condition|?
literal|"error"
else|:
literal|"input"
operator|)
operator|+
literal|" stream is null."
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|String
name|contentType
init|=
name|c
operator|.
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
specifier|final
name|MediaType
name|parsed
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|.
name|isCompatible
argument_list|(
name|parsed
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Content-Type \""
operator|+
name|contentType
operator|+
literal|"\" is incompatible with \""
operator|+
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"\" (parsed=\""
operator|+
name|parsed
operator|+
literal|"\")"
argument_list|)
throw|;
block|}
block|}
return|return
name|READER
operator|.
name|readValue
argument_list|(
name|in
argument_list|)
return|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|validateResponse (final HttpOpParam.Op op, final HttpURLConnection conn, boolean unwrapException)
specifier|private
specifier|static
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|validateResponse
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
specifier|final
name|HttpURLConnection
name|conn
parameter_list|,
name|boolean
name|unwrapException
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|code
init|=
name|conn
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
comment|// server is demanding an authentication we don't support
if|if
condition|(
name|code
operator|==
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
condition|)
block|{
comment|// match hdfs/rpc exception
throw|throw
operator|new
name|AccessControlException
argument_list|(
name|conn
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|code
operator|!=
name|op
operator|.
name|getExpectedHttpResponseCode
argument_list|()
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
decl_stmt|;
try|try
block|{
name|m
operator|=
name|jsonParse
argument_list|(
name|conn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected HTTP response: code="
operator|+
name|code
operator|+
literal|" != "
operator|+
name|op
operator|.
name|getExpectedHttpResponseCode
argument_list|()
operator|+
literal|", "
operator|+
name|op
operator|.
name|toQueryString
argument_list|()
operator|+
literal|", message="
operator|+
name|conn
operator|.
name|getResponseMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected HTTP response: code="
operator|+
name|code
operator|+
literal|" != "
operator|+
name|op
operator|.
name|getExpectedHttpResponseCode
argument_list|()
operator|+
literal|", "
operator|+
name|op
operator|.
name|toQueryString
argument_list|()
operator|+
literal|", message="
operator|+
name|conn
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|m
operator|.
name|get
argument_list|(
name|RemoteException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
name|m
return|;
block|}
name|IOException
name|re
init|=
name|JsonUtilClient
operator|.
name|toRemoteException
argument_list|(
name|m
argument_list|)
decl_stmt|;
comment|// extract UGI-related exceptions and unwrap InvalidToken
comment|// the NN mangles these exceptions but the DN does not and may need
comment|// to re-fetch a token if either report the token is expired
if|if
condition|(
name|re
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|re
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|SecurityUtil
operator|.
name|FAILED_TO_GET_UGI_MSG_HEADER
argument_list|)
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|re
operator|.
name|getMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|":\\s+"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|re
operator|=
operator|new
name|RemoteException
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|,
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|re
operator|=
operator|(
operator|(
name|RemoteException
operator|)
name|re
operator|)
operator|.
name|unwrapRemoteException
argument_list|(
name|InvalidToken
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
throw|throw
name|unwrapException
condition|?
name|toIOException
argument_list|(
name|re
argument_list|)
else|:
name|re
throw|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Covert an exception to an IOException.    *    * For a non-IOException, wrap it with IOException.    * For a RemoteException, unwrap it.    * For an IOException which is not a RemoteException, return it.    */
DECL|method|toIOException (Exception e)
specifier|private
specifier|static
name|IOException
name|toIOException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|IOException
operator|)
condition|)
block|{
return|return
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
return|;
block|}
specifier|final
name|IOException
name|ioe
init|=
operator|(
name|IOException
operator|)
name|e
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ioe
operator|instanceof
name|RemoteException
operator|)
condition|)
block|{
return|return
name|ioe
return|;
block|}
return|return
operator|(
operator|(
name|RemoteException
operator|)
name|ioe
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
return|;
block|}
DECL|method|getCurrentNNAddr ()
specifier|private
specifier|synchronized
name|InetSocketAddress
name|getCurrentNNAddr
parameter_list|()
block|{
return|return
name|nnAddrs
index|[
name|currentNNAddrIndex
index|]
return|;
block|}
comment|/**    * Reset the appropriate state to gracefully fail over to another name node    */
DECL|method|resetStateToFailOver ()
specifier|private
specifier|synchronized
name|void
name|resetStateToFailOver
parameter_list|()
block|{
name|currentNNAddrIndex
operator|=
operator|(
name|currentNNAddrIndex
operator|+
literal|1
operator|)
operator|%
name|nnAddrs
operator|.
name|length
expr_stmt|;
block|}
comment|/**    * Return a URL pointing to given path on the namenode.    *    * @param path to obtain the URL for    * @param query string to append to the path    * @return namenode URL referring to the given path    * @throws IOException on error constructing the URL    */
DECL|method|getNamenodeURL (String path, String query)
specifier|private
name|URL
name|getNamenodeURL
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|InetSocketAddress
name|nnAddr
init|=
name|getCurrentNNAddr
argument_list|()
decl_stmt|;
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|getTransportScheme
argument_list|()
argument_list|,
name|nnAddr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|nnAddr
operator|.
name|getPort
argument_list|()
argument_list|,
name|path
operator|+
literal|'?'
operator|+
name|query
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"url={}"
argument_list|,
name|url
argument_list|)
expr_stmt|;
return|return
name|url
return|;
block|}
DECL|method|getAuthParameters (final HttpOpParam.Op op)
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|getAuthParameters
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|authParams
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// Skip adding delegation token for token operations because these
comment|// operations require authentication.
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|op
operator|.
name|getRequireAuth
argument_list|()
condition|)
block|{
name|token
operator|=
name|getDelegationToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|authParams
operator|.
name|add
argument_list|(
operator|new
name|DelegationParam
argument_list|(
name|token
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UserGroupInformation
name|userUgi
init|=
name|ugi
decl_stmt|;
name|UserGroupInformation
name|realUgi
init|=
name|userUgi
operator|.
name|getRealUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|realUgi
operator|!=
literal|null
condition|)
block|{
comment|// proxy user
name|authParams
operator|.
name|add
argument_list|(
operator|new
name|DoAsParam
argument_list|(
name|userUgi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|userUgi
operator|=
name|realUgi
expr_stmt|;
block|}
name|authParams
operator|.
name|add
argument_list|(
operator|new
name|UserParam
argument_list|(
name|userUgi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|authParams
operator|.
name|toArray
argument_list|(
operator|new
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|toUrl (final HttpOpParam.Op op, final Path fspath, final Param<?,?>... parameters)
name|URL
name|toUrl
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
specifier|final
name|Path
name|fspath
parameter_list|,
specifier|final
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
modifier|...
name|parameters
parameter_list|)
throws|throws
name|IOException
block|{
comment|//initialize URI path and query
specifier|final
name|String
name|path
init|=
name|PATH_PREFIX
operator|+
operator|(
name|fspath
operator|==
literal|null
condition|?
literal|"/"
else|:
name|makeQualified
argument_list|(
name|fspath
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
operator|)
decl_stmt|;
specifier|final
name|String
name|query
init|=
name|op
operator|.
name|toQueryString
argument_list|()
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
name|getAuthParameters
argument_list|(
name|op
argument_list|)
argument_list|)
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
specifier|final
name|URL
name|url
init|=
name|getNamenodeURL
argument_list|(
name|path
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"url={}"
argument_list|,
name|url
argument_list|)
expr_stmt|;
return|return
name|url
return|;
block|}
comment|/**    * This class is for initialing a HTTP connection, connecting to server,    * obtaining a response, and also handling retry on failures.    */
DECL|class|AbstractRunner
specifier|abstract
class|class
name|AbstractRunner
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|getUrl ()
specifier|abstract
specifier|protected
name|URL
name|getUrl
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|field|op
specifier|protected
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
decl_stmt|;
DECL|field|redirected
specifier|private
specifier|final
name|boolean
name|redirected
decl_stmt|;
DECL|field|excludeDatanodes
specifier|protected
name|ExcludeDatanodesParam
name|excludeDatanodes
init|=
operator|new
name|ExcludeDatanodesParam
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|checkRetry
specifier|private
name|boolean
name|checkRetry
decl_stmt|;
DECL|field|redirectHost
specifier|private
name|String
name|redirectHost
decl_stmt|;
DECL|method|AbstractRunner (final HttpOpParam.Op op, boolean redirected)
specifier|protected
name|AbstractRunner
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
name|boolean
name|redirected
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
name|this
operator|.
name|redirected
operator|=
name|redirected
expr_stmt|;
block|}
DECL|method|run ()
name|T
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|connectUgi
init|=
name|ugi
operator|.
name|getRealUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectUgi
operator|==
literal|null
condition|)
block|{
name|connectUgi
operator|=
name|ugi
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|.
name|getRequireAuth
argument_list|()
condition|)
block|{
name|connectUgi
operator|.
name|checkTGTAndReloginFromKeytab
argument_list|()
expr_stmt|;
block|}
try|try
block|{
comment|// the entire lifecycle of the connection must be run inside the
comment|// doAs to ensure authentication is performed correctly
return|return
name|connectUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|runWithRetry
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Two-step requests redirected to a DN      *      * Create/Append:      * Step 1) Submit a Http request with neither auto-redirect nor data.      * Step 2) Submit another Http request with the URL from the Location header      * with data.      *      * The reason of having two-step create/append is for preventing clients to      * send out the data before the redirect. This issue is addressed by the      * "Expect: 100-continue" header in HTTP/1.1; see RFC 2616, Section 8.2.3.      * Unfortunately, there are software library bugs (e.g. Jetty 6 http server      * and Java 6 http client), which do not correctly implement "Expect:      * 100-continue". The two-step create/append is a temporary workaround for      * the software library bugs.      *      * Open/Checksum      * Also implements two-step connects for other operations redirected to      * a DN such as open and checksum      */
DECL|method|connect (URL url)
specifier|protected
name|HttpURLConnection
name|connect
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
comment|//redirect hostname and port
name|redirectHost
operator|=
literal|null
expr_stmt|;
comment|// resolve redirects for a DN operation unless already resolved
if|if
condition|(
name|op
operator|.
name|getRedirect
argument_list|()
operator|&&
operator|!
name|redirected
condition|)
block|{
specifier|final
name|HttpOpParam
operator|.
name|Op
name|redirectOp
init|=
name|HttpOpParam
operator|.
name|TemporaryRedirectOp
operator|.
name|valueOf
argument_list|(
name|op
argument_list|)
decl_stmt|;
specifier|final
name|HttpURLConnection
name|conn
init|=
name|connect
argument_list|(
name|redirectOp
argument_list|,
name|url
argument_list|)
decl_stmt|;
comment|// application level proxy like httpfs might not issue a redirect
if|if
condition|(
name|conn
operator|.
name|getResponseCode
argument_list|()
operator|==
name|op
operator|.
name|getExpectedHttpResponseCode
argument_list|()
condition|)
block|{
return|return
name|conn
return|;
block|}
try|try
block|{
name|validateResponse
argument_list|(
name|redirectOp
argument_list|,
name|conn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Location"
argument_list|)
argument_list|)
expr_stmt|;
name|redirectHost
operator|=
name|url
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|url
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
return|return
name|connect
argument_list|(
name|op
argument_list|,
name|url
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|redirectHost
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|excludeDatanodes
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|excludeDatanodes
operator|=
operator|new
name|ExcludeDatanodesParam
argument_list|(
name|redirectHost
operator|+
literal|","
operator|+
name|excludeDatanodes
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|excludeDatanodes
operator|=
operator|new
name|ExcludeDatanodesParam
argument_list|(
name|redirectHost
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
name|ioe
throw|;
block|}
block|}
DECL|method|connect (final HttpOpParam.Op op, final URL url)
specifier|private
name|HttpURLConnection
name|connect
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
specifier|final
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|connectionFactory
operator|.
name|openConnection
argument_list|(
name|url
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|doOutput
init|=
name|op
operator|.
name|getDoOutput
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|op
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|restCsrfCustomHeader
operator|!=
literal|null
operator|&&
operator|!
name|restCsrfMethodsToIgnore
operator|.
name|contains
argument_list|(
name|op
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
comment|// The value of the header is unimportant.  Only its presence matters.
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|restCsrfCustomHeader
argument_list|,
literal|"\"\""
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|op
operator|.
name|getType
argument_list|()
condition|)
block|{
comment|// if not sending a message body for a POST or PUT operation, need
comment|// to ensure the server/proxy knows this
case|case
name|POST
case|:
case|case
name|PUT
case|:
block|{
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|doOutput
condition|)
block|{
comment|// explicitly setting content-length to 0 won't do spnego!!
comment|// opening and closing the stream will send "Content-Length: 0"
name|conn
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|conn
operator|.
name|setRequestProperty
argument_list|(
literal|"Content-Type"
argument_list|,
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setChunkedStreamingMode
argument_list|(
literal|32
operator|<<
literal|10
argument_list|)
expr_stmt|;
comment|//32kB-chunk
block|}
break|break;
block|}
default|default:
name|conn
operator|.
name|setDoOutput
argument_list|(
name|doOutput
argument_list|)
expr_stmt|;
break|break;
block|}
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
return|return
name|conn
return|;
block|}
DECL|method|runWithRetry ()
specifier|private
name|T
name|runWithRetry
parameter_list|()
throws|throws
name|IOException
block|{
comment|/**        * Do the real work.        *        * There are three cases that the code inside the loop can throw an        * IOException:        *        *<ul>        *<li>The connection has failed (e.g., ConnectException,        * @see FailoverOnNetworkExceptionRetry for more details)</li>        *<li>The namenode enters the standby state (i.e., StandbyException).</li>        *<li>The server returns errors for the command (i.e., RemoteException)</li>        *</ul>        *        * The call to shouldRetry() will conduct the retry policy. The policy        * examines the exception and swallows it if it decides to rerun the work.        */
for|for
control|(
name|int
name|retry
init|=
literal|0
init|;
condition|;
name|retry
operator|++
control|)
block|{
name|checkRetry
operator|=
operator|!
name|redirected
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|getUrl
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|HttpURLConnection
name|conn
init|=
name|connect
argument_list|(
name|url
argument_list|)
decl_stmt|;
comment|// output streams will validate on close
if|if
condition|(
operator|!
name|op
operator|.
name|getDoOutput
argument_list|()
condition|)
block|{
name|validateResponse
argument_list|(
name|op
argument_list|,
name|conn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|getResponse
argument_list|(
name|conn
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
comment|// no retries for auth failures
throw|throw
name|ace
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidToken
name|it
parameter_list|)
block|{
comment|// try to replace the expired token with a new one.  the attempt
comment|// to acquire a new token must be outside this operation's retry
comment|// so if it fails after its own retries, this operation fails too.
if|if
condition|(
name|op
operator|.
name|getRequireAuth
argument_list|()
operator|||
operator|!
name|replaceExpiredDelegationToken
argument_list|()
condition|)
block|{
throw|throw
name|it
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Attempt to include the redirected node in the exception. If the
comment|// attempt to recreate the exception fails, just use the original.
name|String
name|node
init|=
name|redirectHost
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|node
operator|=
name|url
operator|.
name|getAuthority
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|IOException
name|newIoe
init|=
name|ioe
operator|.
name|getClass
argument_list|()
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|node
operator|+
literal|": "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|newIoe
operator|.
name|setStackTrace
argument_list|(
name|ioe
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
name|ioe
operator|=
name|newIoe
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|SecurityException
decl||
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|IllegalArgumentException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{           }
name|shouldRetry
argument_list|(
name|ioe
argument_list|,
name|retry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|shouldRetry (final IOException ioe, final int retry )
specifier|private
name|void
name|shouldRetry
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|,
specifier|final
name|int
name|retry
parameter_list|)
throws|throws
name|IOException
block|{
name|InetSocketAddress
name|nnAddr
init|=
name|getCurrentNNAddr
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkRetry
condition|)
block|{
try|try
block|{
specifier|final
name|RetryPolicy
operator|.
name|RetryAction
name|a
init|=
name|retryPolicy
operator|.
name|shouldRetry
argument_list|(
name|ioe
argument_list|,
name|retry
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|isRetry
init|=
name|a
operator|.
name|action
operator|==
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|RetryDecision
operator|.
name|RETRY
decl_stmt|;
name|boolean
name|isFailoverAndRetry
init|=
name|a
operator|.
name|action
operator|==
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|RetryDecision
operator|.
name|FAILOVER_AND_RETRY
decl_stmt|;
if|if
condition|(
name|isRetry
operator|||
name|isFailoverAndRetry
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Retrying connect to namenode: {}. Already tried {}"
operator|+
literal|" time(s); retry policy is {}, delay {}ms."
argument_list|,
name|nnAddr
argument_list|,
name|retry
argument_list|,
name|retryPolicy
argument_list|,
name|a
operator|.
name|delayMillis
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFailoverAndRetry
condition|)
block|{
name|resetStateToFailOver
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|a
operator|.
name|delayMillis
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Original exception is "
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|toIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
throw|throw
name|toIOException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
DECL|method|getResponse (HttpURLConnection conn)
specifier|abstract
name|T
name|getResponse
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Abstract base class to handle path-based operations with params    */
DECL|class|AbstractFsPathRunner
specifier|abstract
class|class
name|AbstractFsPathRunner
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractRunner
argument_list|<
name|T
argument_list|>
block|{
DECL|field|fspath
specifier|private
specifier|final
name|Path
name|fspath
decl_stmt|;
DECL|field|parameters
specifier|private
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|parameters
decl_stmt|;
DECL|method|AbstractFsPathRunner (final HttpOpParam.Op op, final Path fspath, Param<?,?>... parameters)
name|AbstractFsPathRunner
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
specifier|final
name|Path
name|fspath
parameter_list|,
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
modifier|...
name|parameters
parameter_list|)
block|{
name|super
argument_list|(
name|op
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|fspath
operator|=
name|fspath
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
DECL|method|AbstractFsPathRunner (final HttpOpParam.Op op, Param<?,?>[] parameters, final Path fspath)
name|AbstractFsPathRunner
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|parameters
parameter_list|,
specifier|final
name|Path
name|fspath
parameter_list|)
block|{
name|super
argument_list|(
name|op
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|fspath
operator|=
name|fspath
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
DECL|method|updateURLParameters (Param<?, ?>.... p)
specifier|protected
name|void
name|updateURLParameters
parameter_list|(
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
modifier|...
name|p
parameter_list|)
block|{
name|this
operator|.
name|parameters
operator|=
name|p
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUrl ()
specifier|protected
name|URL
name|getUrl
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|excludeDatanodes
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|tmpParam
init|=
operator|new
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[
name|parameters
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|parameters
argument_list|,
literal|0
argument_list|,
name|tmpParam
argument_list|,
literal|0
argument_list|,
name|parameters
operator|.
name|length
argument_list|)
expr_stmt|;
name|tmpParam
index|[
name|parameters
operator|.
name|length
index|]
operator|=
name|excludeDatanodes
expr_stmt|;
return|return
name|toUrl
argument_list|(
name|op
argument_list|,
name|fspath
argument_list|,
name|tmpParam
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|toUrl
argument_list|(
name|op
argument_list|,
name|fspath
argument_list|,
name|parameters
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Default path-based implementation expects no json response    */
DECL|class|FsPathRunner
class|class
name|FsPathRunner
extends|extends
name|AbstractFsPathRunner
argument_list|<
name|Void
argument_list|>
block|{
DECL|method|FsPathRunner (Op op, Path fspath, Param<?,?>... parameters)
name|FsPathRunner
parameter_list|(
name|Op
name|op
parameter_list|,
name|Path
name|fspath
parameter_list|,
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
modifier|...
name|parameters
parameter_list|)
block|{
name|super
argument_list|(
name|op
argument_list|,
name|fspath
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResponse (HttpURLConnection conn)
name|Void
name|getResponse
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Handle path-based operations with a json response    */
DECL|class|FsPathResponseRunner
specifier|abstract
class|class
name|FsPathResponseRunner
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractFsPathRunner
argument_list|<
name|T
argument_list|>
block|{
DECL|method|FsPathResponseRunner (final HttpOpParam.Op op, final Path fspath, Param<?,?>... parameters)
name|FsPathResponseRunner
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
specifier|final
name|Path
name|fspath
parameter_list|,
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
modifier|...
name|parameters
parameter_list|)
block|{
name|super
argument_list|(
name|op
argument_list|,
name|fspath
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
DECL|method|FsPathResponseRunner (final HttpOpParam.Op op, Param<?,?>[] parameters, final Path fspath)
name|FsPathResponseRunner
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|parameters
parameter_list|,
specifier|final
name|Path
name|fspath
parameter_list|)
block|{
name|super
argument_list|(
name|op
argument_list|,
name|parameters
argument_list|,
name|fspath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResponse (HttpURLConnection conn)
specifier|final
name|T
name|getResponse
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
init|=
name|jsonParse
argument_list|(
name|conn
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
comment|// match exception class thrown by parser
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Missing response"
argument_list|)
throw|;
block|}
return|return
name|decodeResponse
argument_list|(
name|json
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|ioe
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// catch json parser errors
specifier|final
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
literal|"Response decoding failure: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Response decoding failure."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
finally|finally
block|{
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|decodeResponse (Map<?,?> json)
specifier|abstract
name|T
name|decodeResponse
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Handle path-based operations with json boolean response    */
DECL|class|FsPathBooleanRunner
class|class
name|FsPathBooleanRunner
extends|extends
name|FsPathResponseRunner
argument_list|<
name|Boolean
argument_list|>
block|{
DECL|method|FsPathBooleanRunner (Op op, Path fspath, Param<?,?>... parameters)
name|FsPathBooleanRunner
parameter_list|(
name|Op
name|op
parameter_list|,
name|Path
name|fspath
parameter_list|,
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
modifier|...
name|parameters
parameter_list|)
block|{
name|super
argument_list|(
name|op
argument_list|,
name|fspath
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|decodeResponse (Map<?,?> json)
name|Boolean
name|decodeResponse
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"boolean"
argument_list|)
return|;
block|}
block|}
comment|/**    * Handle create/append output streams    */
DECL|class|FsPathOutputStreamRunner
class|class
name|FsPathOutputStreamRunner
extends|extends
name|AbstractFsPathRunner
argument_list|<
name|FSDataOutputStream
argument_list|>
block|{
DECL|field|bufferSize
specifier|private
specifier|final
name|int
name|bufferSize
decl_stmt|;
DECL|method|FsPathOutputStreamRunner (Op op, Path fspath, int bufferSize, Param<?,?>... parameters)
name|FsPathOutputStreamRunner
parameter_list|(
name|Op
name|op
parameter_list|,
name|Path
name|fspath
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
modifier|...
name|parameters
parameter_list|)
block|{
name|super
argument_list|(
name|op
argument_list|,
name|fspath
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResponse (final HttpURLConnection conn)
name|FSDataOutputStream
name|getResponse
parameter_list|(
specifier|final
name|HttpURLConnection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|conn
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|bufferSize
argument_list|)
argument_list|,
name|statistics
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|validateResponse
argument_list|(
name|op
argument_list|,
name|conn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|;
block|}
block|}
DECL|class|FsPathConnectionRunner
class|class
name|FsPathConnectionRunner
extends|extends
name|AbstractFsPathRunner
argument_list|<
name|HttpURLConnection
argument_list|>
block|{
DECL|method|FsPathConnectionRunner (Op op, Path fspath, Param<?,?>... parameters)
name|FsPathConnectionRunner
parameter_list|(
name|Op
name|op
parameter_list|,
name|Path
name|fspath
parameter_list|,
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
modifier|...
name|parameters
parameter_list|)
block|{
name|super
argument_list|(
name|op
argument_list|,
name|fspath
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResponse (final HttpURLConnection conn)
name|HttpURLConnection
name|getResponse
parameter_list|(
specifier|final
name|HttpURLConnection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|conn
return|;
block|}
block|}
comment|/**    * Used by open() which tracks the resolved url itself    */
DECL|class|URLRunner
specifier|final
class|class
name|URLRunner
extends|extends
name|AbstractRunner
argument_list|<
name|HttpURLConnection
argument_list|>
block|{
DECL|field|url
specifier|private
specifier|final
name|URL
name|url
decl_stmt|;
annotation|@
name|Override
DECL|method|getUrl ()
specifier|protected
name|URL
name|getUrl
parameter_list|()
block|{
return|return
name|url
return|;
block|}
DECL|method|URLRunner (final HttpOpParam.Op op, final URL url, boolean redirected)
specifier|protected
name|URLRunner
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
specifier|final
name|URL
name|url
parameter_list|,
name|boolean
name|redirected
parameter_list|)
block|{
name|super
argument_list|(
name|op
argument_list|,
name|redirected
argument_list|)
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResponse (HttpURLConnection conn)
name|HttpURLConnection
name|getResponse
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|conn
return|;
block|}
block|}
DECL|method|applyUMask (FsPermission permission)
specifier|private
name|FsPermission
name|applyUMask
parameter_list|(
name|FsPermission
name|permission
parameter_list|)
block|{
if|if
condition|(
name|permission
operator|==
literal|null
condition|)
block|{
name|permission
operator|=
name|FsPermission
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
return|return
name|FsCreateModes
operator|.
name|applyUMask
argument_list|(
name|permission
argument_list|,
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getHdfsFileStatus (Path f)
specifier|private
name|HdfsFileStatus
name|getHdfsFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|GETFILESTATUS
decl_stmt|;
name|HdfsFileStatus
name|status
init|=
operator|new
name|FsPathResponseRunner
argument_list|<
name|HdfsFileStatus
argument_list|>
argument_list|(
name|op
argument_list|,
name|f
argument_list|)
block|{
annotation|@
name|Override
name|HdfsFileStatus
name|decodeResponse
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
return|return
name|JsonUtilClient
operator|.
name|toFileStatus
argument_list|(
name|json
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist: "
operator|+
name|f
argument_list|)
throw|;
block|}
return|return
name|status
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|GET_FILE_STATUS
argument_list|)
expr_stmt|;
return|return
name|makeQualified
argument_list|(
name|getHdfsFileStatus
argument_list|(
name|f
argument_list|)
argument_list|,
name|f
argument_list|)
return|;
block|}
DECL|method|makeQualified (HdfsFileStatus f, Path parent)
specifier|private
name|FileStatus
name|makeQualified
parameter_list|(
name|HdfsFileStatus
name|f
parameter_list|,
name|Path
name|parent
parameter_list|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
name|f
operator|.
name|getLen
argument_list|()
argument_list|,
name|f
operator|.
name|isDir
argument_list|()
argument_list|,
name|f
operator|.
name|getReplication
argument_list|()
argument_list|,
name|f
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|f
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|f
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|f
operator|.
name|getPermission
argument_list|()
argument_list|,
name|f
operator|.
name|getOwner
argument_list|()
argument_list|,
name|f
operator|.
name|getGroup
argument_list|()
argument_list|,
name|f
operator|.
name|isSymlink
argument_list|()
condition|?
operator|new
name|Path
argument_list|(
name|f
operator|.
name|getSymlink
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
name|f
operator|.
name|getFullPath
argument_list|(
name|parent
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|getUri
argument_list|()
argument_list|,
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAclStatus (Path f)
specifier|public
name|AclStatus
name|getAclStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|GETACLSTATUS
decl_stmt|;
name|AclStatus
name|status
init|=
operator|new
name|FsPathResponseRunner
argument_list|<
name|AclStatus
argument_list|>
argument_list|(
name|op
argument_list|,
name|f
argument_list|)
block|{
annotation|@
name|Override
name|AclStatus
name|decodeResponse
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
return|return
name|JsonUtilClient
operator|.
name|toAclStatus
argument_list|(
name|json
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist: "
operator|+
name|f
argument_list|)
throw|;
block|}
return|return
name|status
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|MKDIRS
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|MKDIRS
decl_stmt|;
specifier|final
name|FsPermission
name|modes
init|=
name|applyUMask
argument_list|(
name|permission
argument_list|)
decl_stmt|;
return|return
operator|new
name|FsPathBooleanRunner
argument_list|(
name|op
argument_list|,
name|f
argument_list|,
operator|new
name|PermissionParam
argument_list|(
name|modes
operator|.
name|getMasked
argument_list|()
argument_list|)
argument_list|,
operator|new
name|UnmaskedPermissionParam
argument_list|(
name|modes
operator|.
name|getUnmasked
argument_list|()
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
return|;
block|}
comment|/**    * Create a symlink pointing to the destination path.    */
DECL|method|createSymlink (Path destination, Path f, boolean createParent )
specifier|public
name|void
name|createSymlink
parameter_list|(
name|Path
name|destination
parameter_list|,
name|Path
name|f
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|CREATE_SYM_LINK
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|CREATESYMLINK
decl_stmt|;
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|f
argument_list|,
operator|new
name|DestinationParam
argument_list|(
name|makeQualified
argument_list|(
name|destination
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
operator|new
name|CreateParentParam
argument_list|(
name|createParent
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rename (final Path src, final Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|RENAME
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|RENAME
decl_stmt|;
return|return
operator|new
name|FsPathBooleanRunner
argument_list|(
name|op
argument_list|,
name|src
argument_list|,
operator|new
name|DestinationParam
argument_list|(
name|makeQualified
argument_list|(
name|dst
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|rename (final Path src, final Path dst, final Options.Rename... options)
specifier|public
name|void
name|rename
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|dst
parameter_list|,
specifier|final
name|Options
operator|.
name|Rename
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|RENAME
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|RENAME
decl_stmt|;
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|src
argument_list|,
operator|new
name|DestinationParam
argument_list|(
name|makeQualified
argument_list|(
name|dst
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
operator|new
name|RenameOptionSetParam
argument_list|(
name|options
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setXAttr (Path p, String name, byte[] value, EnumSet<XAttrSetFlag> flag)
specifier|public
name|void
name|setXAttr
parameter_list|(
name|Path
name|p
parameter_list|,
name|String
name|name
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|EnumSet
argument_list|<
name|XAttrSetFlag
argument_list|>
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|SET_XATTR
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|SETXATTR
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|p
argument_list|,
operator|new
name|XAttrNameParam
argument_list|(
name|name
argument_list|)
argument_list|,
operator|new
name|XAttrValueParam
argument_list|(
name|XAttrCodec
operator|.
name|encodeValue
argument_list|(
name|value
argument_list|,
name|XAttrCodec
operator|.
name|HEX
argument_list|)
argument_list|)
argument_list|,
operator|new
name|XAttrSetFlagParam
argument_list|(
name|flag
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|p
argument_list|,
operator|new
name|XAttrNameParam
argument_list|(
name|name
argument_list|)
argument_list|,
operator|new
name|XAttrSetFlagParam
argument_list|(
name|flag
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getXAttr (Path p, final String name)
specifier|public
name|byte
index|[]
name|getXAttr
parameter_list|(
name|Path
name|p
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|GET_XATTR
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|GETXATTRS
decl_stmt|;
return|return
operator|new
name|FsPathResponseRunner
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|op
argument_list|,
name|p
argument_list|,
operator|new
name|XAttrNameParam
argument_list|(
name|name
argument_list|)
argument_list|,
operator|new
name|XAttrEncodingParam
argument_list|(
name|XAttrCodec
operator|.
name|HEX
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
name|byte
index|[]
name|decodeResponse
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|JsonUtilClient
operator|.
name|getXAttr
argument_list|(
name|json
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getXAttrs (Path p)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|getXAttrs
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|GETXATTRS
decl_stmt|;
return|return
operator|new
name|FsPathResponseRunner
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|(
name|op
argument_list|,
name|p
argument_list|,
operator|new
name|XAttrEncodingParam
argument_list|(
name|XAttrCodec
operator|.
name|HEX
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|decodeResponse
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|JsonUtilClient
operator|.
name|toXAttrs
argument_list|(
name|json
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getXAttrs (Path p, final List<String> names)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|getXAttrs
parameter_list|(
name|Path
name|p
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|names
operator|!=
literal|null
operator|&&
operator|!
name|names
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"XAttr names cannot be null or empty."
argument_list|)
expr_stmt|;
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|parameters
init|=
operator|new
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[
name|names
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|parameters
index|[
name|i
index|]
operator|=
operator|new
name|XAttrNameParam
argument_list|(
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parameters
index|[
name|parameters
operator|.
name|length
operator|-
literal|1
index|]
operator|=
operator|new
name|XAttrEncodingParam
argument_list|(
name|XAttrCodec
operator|.
name|HEX
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|GETXATTRS
decl_stmt|;
return|return
operator|new
name|FsPathResponseRunner
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|(
name|op
argument_list|,
name|parameters
argument_list|,
name|p
argument_list|)
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|decodeResponse
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|JsonUtilClient
operator|.
name|toXAttrs
argument_list|(
name|json
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|listXAttrs (Path p)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listXAttrs
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|LISTXATTRS
decl_stmt|;
return|return
operator|new
name|FsPathResponseRunner
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|op
argument_list|,
name|p
argument_list|)
block|{
annotation|@
name|Override
name|List
argument_list|<
name|String
argument_list|>
name|decodeResponse
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|JsonUtilClient
operator|.
name|toXAttrNames
argument_list|(
name|json
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|removeXAttr (Path p, String name)
specifier|public
name|void
name|removeXAttr
parameter_list|(
name|Path
name|p
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|REMOVE_XATTR
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|REMOVEXATTR
decl_stmt|;
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|p
argument_list|,
operator|new
name|XAttrNameParam
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setOwner (final Path p, final String owner, final String group )
specifier|public
name|void
name|setOwner
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|String
name|owner
parameter_list|,
specifier|final
name|String
name|group
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|owner
operator|==
literal|null
operator|&&
name|group
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"owner == null&& group == null"
argument_list|)
throw|;
block|}
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|SET_OWNER
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|SETOWNER
decl_stmt|;
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|p
argument_list|,
operator|new
name|OwnerParam
argument_list|(
name|owner
argument_list|)
argument_list|,
operator|new
name|GroupParam
argument_list|(
name|group
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setPermission (final Path p, final FsPermission permission )
specifier|public
name|void
name|setPermission
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|SET_PERMISSION
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|SETPERMISSION
decl_stmt|;
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|p
argument_list|,
operator|new
name|PermissionParam
argument_list|(
name|permission
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|modifyAclEntries (Path path, List<AclEntry> aclSpec)
specifier|public
name|void
name|modifyAclEntries
parameter_list|(
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|MODIFY_ACL_ENTRIES
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|MODIFYACLENTRIES
decl_stmt|;
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|path
argument_list|,
operator|new
name|AclPermissionParam
argument_list|(
name|aclSpec
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeAclEntries (Path path, List<AclEntry> aclSpec)
specifier|public
name|void
name|removeAclEntries
parameter_list|(
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|REMOVE_ACL_ENTRIES
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|REMOVEACLENTRIES
decl_stmt|;
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|path
argument_list|,
operator|new
name|AclPermissionParam
argument_list|(
name|aclSpec
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeDefaultAcl (Path path)
specifier|public
name|void
name|removeDefaultAcl
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|REMOVE_DEFAULT_ACL
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|REMOVEDEFAULTACL
decl_stmt|;
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|path
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeAcl (Path path)
specifier|public
name|void
name|removeAcl
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|REMOVE_ACL
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|REMOVEACL
decl_stmt|;
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|path
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setAcl (final Path p, final List<AclEntry> aclSpec)
specifier|public
name|void
name|setAcl
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|SET_ACL
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|SETACL
decl_stmt|;
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|p
argument_list|,
operator|new
name|AclPermissionParam
argument_list|(
name|aclSpec
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
DECL|method|allowSnapshot (final Path p)
specifier|public
name|void
name|allowSnapshot
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|ALLOW_SNAPSHOT
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|ALLOWSNAPSHOT
decl_stmt|;
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|p
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createSnapshot (final Path path, final String snapshotName)
specifier|public
name|Path
name|createSnapshot
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|CREATE_SNAPSHOT
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|CREATESNAPSHOT
decl_stmt|;
return|return
operator|new
name|FsPathResponseRunner
argument_list|<
name|Path
argument_list|>
argument_list|(
name|op
argument_list|,
name|path
argument_list|,
operator|new
name|SnapshotNameParam
argument_list|(
name|snapshotName
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
name|Path
name|decodeResponse
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|Path
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|()
return|;
block|}
DECL|method|disallowSnapshot (final Path p)
specifier|public
name|void
name|disallowSnapshot
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|DISALLOW_SNAPSHOT
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|DISALLOWSNAPSHOT
decl_stmt|;
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|p
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|deleteSnapshot (final Path path, final String snapshotName)
specifier|public
name|void
name|deleteSnapshot
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|DELETE_SNAPSHOT
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|DeleteOpParam
operator|.
name|Op
operator|.
name|DELETESNAPSHOT
decl_stmt|;
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|path
argument_list|,
operator|new
name|SnapshotNameParam
argument_list|(
name|snapshotName
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|renameSnapshot (final Path path, final String snapshotOldName, final String snapshotNewName)
specifier|public
name|void
name|renameSnapshot
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|String
name|snapshotOldName
parameter_list|,
specifier|final
name|String
name|snapshotNewName
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|RENAME_SNAPSHOT
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|RENAMESNAPSHOT
decl_stmt|;
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|path
argument_list|,
operator|new
name|OldSnapshotNameParam
argument_list|(
name|snapshotOldName
argument_list|)
argument_list|,
operator|new
name|SnapshotNameParam
argument_list|(
name|snapshotNewName
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setReplication (final Path p, final short replication )
specifier|public
name|boolean
name|setReplication
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|SET_REPLICATION
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|SETREPLICATION
decl_stmt|;
return|return
operator|new
name|FsPathBooleanRunner
argument_list|(
name|op
argument_list|,
name|p
argument_list|,
operator|new
name|ReplicationParam
argument_list|(
name|replication
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setTimes (final Path p, final long mtime, final long atime )
specifier|public
name|void
name|setTimes
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|long
name|mtime
parameter_list|,
specifier|final
name|long
name|atime
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|SET_TIMES
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|SETTIMES
decl_stmt|;
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|p
argument_list|,
operator|new
name|ModificationTimeParam
argument_list|(
name|mtime
argument_list|)
argument_list|,
operator|new
name|AccessTimeParam
argument_list|(
name|atime
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDefaultBlockSize ()
specifier|public
name|long
name|getDefaultBlockSize
parameter_list|()
block|{
return|return
name|getConf
argument_list|()
operator|.
name|getLongBytes
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|DFS_BLOCK_SIZE_DEFAULT
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultReplication ()
specifier|public
name|short
name|getDefaultReplication
parameter_list|()
block|{
return|return
operator|(
name|short
operator|)
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|DFS_REPLICATION_DEFAULT
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|concat (final Path trg, final Path [] srcs)
specifier|public
name|void
name|concat
parameter_list|(
specifier|final
name|Path
name|trg
parameter_list|,
specifier|final
name|Path
index|[]
name|srcs
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|CONCAT
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PostOpParam
operator|.
name|Op
operator|.
name|CONCAT
decl_stmt|;
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|trg
argument_list|,
operator|new
name|ConcatSourcesParam
argument_list|(
name|srcs
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create (final Path f, final FsPermission permission, final boolean overwrite, final int bufferSize, final short replication, final long blockSize, final Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|,
specifier|final
name|boolean
name|overwrite
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|,
specifier|final
name|long
name|blockSize
parameter_list|,
specifier|final
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
specifier|final
name|FsPermission
name|modes
init|=
name|applyUMask
argument_list|(
name|permission
argument_list|)
decl_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|CREATE
decl_stmt|;
return|return
operator|new
name|FsPathOutputStreamRunner
argument_list|(
name|op
argument_list|,
name|f
argument_list|,
name|bufferSize
argument_list|,
operator|new
name|PermissionParam
argument_list|(
name|modes
operator|.
name|getMasked
argument_list|()
argument_list|)
argument_list|,
operator|new
name|UnmaskedPermissionParam
argument_list|(
name|modes
operator|.
name|getUnmasked
argument_list|()
argument_list|)
argument_list|,
operator|new
name|OverwriteParam
argument_list|(
name|overwrite
argument_list|)
argument_list|,
operator|new
name|BufferSizeParam
argument_list|(
name|bufferSize
argument_list|)
argument_list|,
operator|new
name|ReplicationParam
argument_list|(
name|replication
argument_list|)
argument_list|,
operator|new
name|BlockSizeParam
argument_list|(
name|blockSize
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createNonRecursive (final Path f, final FsPermission permission, final EnumSet<CreateFlag> flag, final int bufferSize, final short replication, final long blockSize, final Progressable progress)
specifier|public
name|FSDataOutputStream
name|createNonRecursive
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|,
specifier|final
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|,
specifier|final
name|long
name|blockSize
parameter_list|,
specifier|final
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|CREATE_NON_RECURSIVE
argument_list|)
expr_stmt|;
specifier|final
name|FsPermission
name|modes
init|=
name|applyUMask
argument_list|(
name|permission
argument_list|)
decl_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|CREATE
decl_stmt|;
return|return
operator|new
name|FsPathOutputStreamRunner
argument_list|(
name|op
argument_list|,
name|f
argument_list|,
name|bufferSize
argument_list|,
operator|new
name|PermissionParam
argument_list|(
name|modes
operator|.
name|getMasked
argument_list|()
argument_list|)
argument_list|,
operator|new
name|UnmaskedPermissionParam
argument_list|(
name|modes
operator|.
name|getUnmasked
argument_list|()
argument_list|)
argument_list|,
operator|new
name|CreateFlagParam
argument_list|(
name|flag
argument_list|)
argument_list|,
operator|new
name|CreateParentParam
argument_list|(
literal|false
argument_list|)
argument_list|,
operator|new
name|BufferSizeParam
argument_list|(
name|bufferSize
argument_list|)
argument_list|,
operator|new
name|ReplicationParam
argument_list|(
name|replication
argument_list|)
argument_list|,
operator|new
name|BlockSizeParam
argument_list|(
name|blockSize
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|append (final Path f, final int bufferSize, final Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|,
specifier|final
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|APPEND
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PostOpParam
operator|.
name|Op
operator|.
name|APPEND
decl_stmt|;
return|return
operator|new
name|FsPathOutputStreamRunner
argument_list|(
name|op
argument_list|,
name|f
argument_list|,
name|bufferSize
argument_list|,
operator|new
name|BufferSizeParam
argument_list|(
name|bufferSize
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|truncate (Path f, long newLength)
specifier|public
name|boolean
name|truncate
parameter_list|(
name|Path
name|f
parameter_list|,
name|long
name|newLength
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|TRUNCATE
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PostOpParam
operator|.
name|Op
operator|.
name|TRUNCATE
decl_stmt|;
return|return
operator|new
name|FsPathBooleanRunner
argument_list|(
name|op
argument_list|,
name|f
argument_list|,
operator|new
name|NewLengthParam
argument_list|(
name|newLength
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|DELETE
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|DeleteOpParam
operator|.
name|Op
operator|.
name|DELETE
decl_stmt|;
return|return
operator|new
name|FsPathBooleanRunner
argument_list|(
name|op
argument_list|,
name|f
argument_list|,
operator|new
name|RecursiveParam
argument_list|(
name|recursive
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|open (final Path f, final int bufferSize )
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|OPEN
argument_list|)
expr_stmt|;
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|WebHdfsInputStream
argument_list|(
name|f
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|canRefreshDelegationToken
operator|&&
name|delegationToken
operator|!=
literal|null
condition|)
block|{
name|cancelDelegationToken
argument_list|(
name|delegationToken
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Token cancel failed: "
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// use FsPathConnectionRunner to ensure retries for InvalidTokens
DECL|class|UnresolvedUrlOpener
class|class
name|UnresolvedUrlOpener
extends|extends
name|ByteRangeInputStream
operator|.
name|URLOpener
block|{
DECL|field|runner
specifier|private
specifier|final
name|FsPathConnectionRunner
name|runner
decl_stmt|;
DECL|method|UnresolvedUrlOpener (FsPathConnectionRunner runner)
name|UnresolvedUrlOpener
parameter_list|(
name|FsPathConnectionRunner
name|runner
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|runner
operator|=
name|runner
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|connect (long offset, boolean resolved)
specifier|protected
name|HttpURLConnection
name|connect
parameter_list|(
name|long
name|offset
parameter_list|,
name|boolean
name|resolved
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|offset
operator|==
literal|0
assert|;
name|HttpURLConnection
name|conn
init|=
name|runner
operator|.
name|run
argument_list|()
decl_stmt|;
name|setURL
argument_list|(
name|conn
operator|.
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|conn
return|;
block|}
block|}
DECL|class|OffsetUrlOpener
class|class
name|OffsetUrlOpener
extends|extends
name|ByteRangeInputStream
operator|.
name|URLOpener
block|{
DECL|method|OffsetUrlOpener (final URL url)
name|OffsetUrlOpener
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|)
block|{
name|super
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
comment|/** Setup offset url and connect. */
annotation|@
name|Override
DECL|method|connect (final long offset, final boolean resolved)
specifier|protected
name|HttpURLConnection
name|connect
parameter_list|(
specifier|final
name|long
name|offset
parameter_list|,
specifier|final
name|boolean
name|resolved
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|URL
name|offsetUrl
init|=
name|offset
operator|==
literal|0L
condition|?
name|url
else|:
operator|new
name|URL
argument_list|(
name|url
operator|+
literal|"&"
operator|+
operator|new
name|OffsetParam
argument_list|(
name|offset
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|URLRunner
argument_list|(
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
argument_list|,
name|offsetUrl
argument_list|,
name|resolved
argument_list|)
operator|.
name|run
argument_list|()
return|;
block|}
block|}
DECL|field|OFFSET_PARAM_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|OFFSET_PARAM_PREFIX
init|=
name|OffsetParam
operator|.
name|NAME
operator|+
literal|"="
decl_stmt|;
comment|/** Remove offset parameter, if there is any, from the url */
DECL|method|removeOffsetParam (final URL url)
specifier|static
name|URL
name|removeOffsetParam
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|String
name|query
init|=
name|url
operator|.
name|getQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
return|return
name|url
return|;
block|}
specifier|final
name|String
name|lower
init|=
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lower
operator|.
name|startsWith
argument_list|(
name|OFFSET_PARAM_PREFIX
argument_list|)
operator|&&
operator|!
name|lower
operator|.
name|contains
argument_list|(
literal|"&"
operator|+
name|OFFSET_PARAM_PREFIX
argument_list|)
condition|)
block|{
return|return
name|url
return|;
block|}
comment|//rebuild query
name|StringBuilder
name|b
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|query
argument_list|,
literal|"&"
argument_list|)
init|;
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
specifier|final
name|String
name|token
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|token
argument_list|)
operator|.
name|startsWith
argument_list|(
name|OFFSET_PARAM_PREFIX
argument_list|)
condition|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
name|b
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"?"
argument_list|)
operator|.
name|append
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
operator|.
name|append
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|query
operator|=
name|b
operator|==
literal|null
condition|?
literal|""
else|:
name|b
operator|.
name|toString
argument_list|()
expr_stmt|;
specifier|final
name|String
name|urlStr
init|=
name|url
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|new
name|URL
argument_list|(
name|urlStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|urlStr
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
argument_list|)
operator|+
name|query
argument_list|)
return|;
block|}
DECL|class|OffsetUrlInputStream
specifier|static
class|class
name|OffsetUrlInputStream
extends|extends
name|ByteRangeInputStream
block|{
DECL|method|OffsetUrlInputStream (UnresolvedUrlOpener o, OffsetUrlOpener r)
name|OffsetUrlInputStream
parameter_list|(
name|UnresolvedUrlOpener
name|o
parameter_list|,
name|OffsetUrlOpener
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|o
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
comment|/** Remove offset parameter before returning the resolved url. */
annotation|@
name|Override
DECL|method|getResolvedUrl (final HttpURLConnection connection )
specifier|protected
name|URL
name|getResolvedUrl
parameter_list|(
specifier|final
name|HttpURLConnection
name|connection
parameter_list|)
throws|throws
name|MalformedURLException
block|{
return|return
name|removeOffsetParam
argument_list|(
name|connection
operator|.
name|getURL
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|listStatus (final Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|LIST_STATUS
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|LISTSTATUS
decl_stmt|;
return|return
operator|new
name|FsPathResponseRunner
argument_list|<
name|FileStatus
index|[]
argument_list|>
argument_list|(
name|op
argument_list|,
name|f
argument_list|)
block|{
annotation|@
name|Override
name|FileStatus
index|[]
name|decodeResponse
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|rootmap
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|FileStatus
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"es"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|array
init|=
name|JsonUtilClient
operator|.
name|getList
argument_list|(
name|rootmap
argument_list|,
name|FileStatus
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
comment|//convert FileStatus
assert|assert
name|array
operator|!=
literal|null
assert|;
specifier|final
name|FileStatus
index|[]
name|statuses
init|=
operator|new
name|FileStatus
index|[
name|array
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|array
control|)
block|{
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
name|statuses
index|[
name|i
operator|++
index|]
operator|=
name|makeQualified
argument_list|(
name|JsonUtilClient
operator|.
name|toFileStatus
argument_list|(
name|m
argument_list|,
literal|false
argument_list|)
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|statuses
return|;
block|}
block|}
operator|.
name|run
argument_list|()
return|;
block|}
DECL|field|EMPTY_ARRAY
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_ARRAY
init|=
operator|new
name|byte
index|[]
block|{}
decl_stmt|;
DECL|class|DirListingIterator
specifier|private
class|class
name|DirListingIterator
parameter_list|<
name|T
extends|extends
name|FileStatus
parameter_list|>
implements|implements
name|RemoteIterator
argument_list|<
name|T
argument_list|>
block|{
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|thisListing
specifier|private
name|DirectoryListing
name|thisListing
decl_stmt|;
DECL|field|i
specifier|private
name|int
name|i
init|=
literal|0
decl_stmt|;
DECL|field|prevKey
specifier|private
name|byte
index|[]
name|prevKey
init|=
name|EMPTY_ARRAY
decl_stmt|;
DECL|method|DirListingIterator (Path path)
name|DirListingIterator
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|thisListing
operator|==
literal|null
condition|)
block|{
name|fetchMore
argument_list|()
expr_stmt|;
block|}
return|return
name|i
operator|<
name|thisListing
operator|.
name|getPartialListing
argument_list|()
operator|.
name|length
operator|||
name|thisListing
operator|.
name|hasMore
argument_list|()
return|;
block|}
DECL|method|fetchMore ()
specifier|private
name|void
name|fetchMore
parameter_list|()
throws|throws
name|IOException
block|{
name|thisListing
operator|=
operator|new
name|FsPathResponseRunner
argument_list|<
name|DirectoryListing
argument_list|>
argument_list|(
name|GetOpParam
operator|.
name|Op
operator|.
name|LISTSTATUS_BATCH
argument_list|,
name|path
argument_list|,
operator|new
name|StartAfterParam
argument_list|(
operator|new
name|String
argument_list|(
name|prevKey
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
name|DirectoryListing
name|decodeResponse
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|JsonUtilClient
operator|.
name|toDirectoryListing
argument_list|(
name|json
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|()
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
name|prevKey
operator|=
name|thisListing
operator|.
name|getLastName
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|next ()
specifier|public
name|T
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|hasNext
argument_list|()
argument_list|,
literal|"No more items in iterator"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|thisListing
operator|.
name|getPartialListing
argument_list|()
operator|.
name|length
condition|)
block|{
name|fetchMore
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|T
operator|)
name|makeQualified
argument_list|(
name|thisListing
operator|.
name|getPartialListing
argument_list|()
index|[
name|i
operator|++
index|]
argument_list|,
name|path
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|listStatusIterator (final Path f)
specifier|public
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|listStatusIterator
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
return|return
operator|new
name|DirListingIterator
argument_list|<>
argument_list|(
name|f
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDelegationToken ( final String renewer)
specifier|public
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
specifier|final
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|GETDELEGATIONTOKEN
decl_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|FsPathResponseRunner
argument_list|<
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|>
argument_list|(
name|op
argument_list|,
literal|null
argument_list|,
operator|new
name|RenewerParam
argument_list|(
name|renewer
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|decodeResponse
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|JsonUtilClient
operator|.
name|toDelegationToken
argument_list|(
name|json
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|token
operator|.
name|setService
argument_list|(
name|tokenServiceName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|disallowFallbackToInsecureCluster
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
name|CANT_FALLBACK_TO_INSECURE_MSG
argument_list|)
throw|;
block|}
block|}
return|return
name|token
return|;
block|}
annotation|@
name|Override
DECL|method|getRenewToken ()
specifier|public
specifier|synchronized
name|Token
argument_list|<
name|?
argument_list|>
name|getRenewToken
parameter_list|()
block|{
return|return
name|delegationToken
return|;
block|}
annotation|@
name|Override
DECL|method|setDelegationToken ( final Token<T> token)
specifier|public
parameter_list|<
name|T
extends|extends
name|TokenIdentifier
parameter_list|>
name|void
name|setDelegationToken
parameter_list|(
specifier|final
name|Token
argument_list|<
name|T
argument_list|>
name|token
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|delegationToken
operator|=
name|token
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|renewDelegationToken (final Token<?> token )
specifier|public
specifier|synchronized
name|long
name|renewDelegationToken
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|RENEWDELEGATIONTOKEN
decl_stmt|;
return|return
operator|new
name|FsPathResponseRunner
argument_list|<
name|Long
argument_list|>
argument_list|(
name|op
argument_list|,
literal|null
argument_list|,
operator|new
name|TokenArgumentParam
argument_list|(
name|token
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
name|Long
name|decodeResponse
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"long"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
block|}
operator|.
name|run
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|cancelDelegationToken (final Token<?> token )
specifier|public
specifier|synchronized
name|void
name|cancelDelegationToken
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|CANCELDELEGATIONTOKEN
decl_stmt|;
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
literal|null
argument_list|,
operator|new
name|TokenArgumentParam
argument_list|(
name|token
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFileBlockLocations (final FileStatus status, final long offset, final long length)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
specifier|final
name|FileStatus
name|status
parameter_list|,
specifier|final
name|long
name|offset
parameter_list|,
specifier|final
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getFileBlockLocations
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileBlockLocations (final Path p, final long offset, final long length)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|long
name|offset
parameter_list|,
specifier|final
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|GET_FILE_BLOCK_LOCATIONS
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|GET_BLOCK_LOCATIONS
decl_stmt|;
return|return
operator|new
name|FsPathResponseRunner
argument_list|<
name|BlockLocation
index|[]
argument_list|>
argument_list|(
name|op
argument_list|,
name|p
argument_list|,
operator|new
name|OffsetParam
argument_list|(
name|offset
argument_list|)
argument_list|,
operator|new
name|LengthParam
argument_list|(
name|length
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
name|BlockLocation
index|[]
name|decodeResponse
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DFSUtilClient
operator|.
name|locatedBlocks2Locations
argument_list|(
name|JsonUtilClient
operator|.
name|toLocatedBlocks
argument_list|(
name|json
argument_list|)
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|access (final Path path, final FsAction mode)
specifier|public
name|void
name|access
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|FsAction
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|CHECKACCESS
decl_stmt|;
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|path
argument_list|,
operator|new
name|FsActionParam
argument_list|(
name|mode
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getContentSummary (final Path p)
specifier|public
name|ContentSummary
name|getContentSummary
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|GET_CONTENT_SUMMARY
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|GETCONTENTSUMMARY
decl_stmt|;
return|return
operator|new
name|FsPathResponseRunner
argument_list|<
name|ContentSummary
argument_list|>
argument_list|(
name|op
argument_list|,
name|p
argument_list|)
block|{
annotation|@
name|Override
name|ContentSummary
name|decodeResponse
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
return|return
name|JsonUtilClient
operator|.
name|toContentSummary
argument_list|(
name|json
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getFileChecksum (final Path p )
specifier|public
name|MD5MD5CRC32FileChecksum
name|getFileChecksum
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|storageStatistics
operator|.
name|incrementOpCounter
argument_list|(
name|OpType
operator|.
name|GET_FILE_CHECKSUM
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|GETFILECHECKSUM
decl_stmt|;
return|return
operator|new
name|FsPathResponseRunner
argument_list|<
name|MD5MD5CRC32FileChecksum
argument_list|>
argument_list|(
name|op
argument_list|,
name|p
argument_list|)
block|{
annotation|@
name|Override
name|MD5MD5CRC32FileChecksum
name|decodeResponse
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|JsonUtilClient
operator|.
name|toMD5MD5CRC32FileChecksum
argument_list|(
name|json
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|()
return|;
block|}
comment|/**    * Resolve an HDFS URL into real INetSocketAddress. It works like a DNS    * resolver when the URL points to an non-HA cluster. When the URL points to    * an HA cluster with its logical name, the resolver further resolves the    * logical name(i.e., the authority in the URL) into real namenode addresses.    */
DECL|method|resolveNNAddr ()
specifier|private
name|InetSocketAddress
index|[]
name|resolveNNAddr
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
specifier|final
name|String
name|scheme
init|=
name|uri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|InetSocketAddress
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|HAUtilClient
operator|.
name|isLogicalUri
argument_list|(
name|conf
argument_list|,
name|uri
argument_list|)
condition|)
block|{
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|getDefaultPort
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|addresses
init|=
name|DFSUtilClient
operator|.
name|getHaNnWebHdfsAddresses
argument_list|(
name|conf
argument_list|,
name|scheme
argument_list|)
decl_stmt|;
comment|// Extract the entry corresponding to the logical name.
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
name|addrs
init|=
name|addresses
operator|.
name|get
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|InetSocketAddress
name|addr
range|:
name|addrs
operator|.
name|values
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
block|}
name|InetSocketAddress
index|[]
name|r
init|=
operator|new
name|InetSocketAddress
index|[
name|ret
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|ret
operator|.
name|toArray
argument_list|(
name|r
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCanonicalServiceName ()
specifier|public
name|String
name|getCanonicalServiceName
parameter_list|()
block|{
return|return
name|tokenServiceName
operator|==
literal|null
condition|?
name|super
operator|.
name|getCanonicalServiceName
argument_list|()
else|:
name|tokenServiceName
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getResolvedNNAddr ()
name|InetSocketAddress
index|[]
name|getResolvedNNAddr
parameter_list|()
block|{
return|return
name|nnAddrs
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setRetryPolicy (RetryPolicy rp)
specifier|public
name|void
name|setRetryPolicy
parameter_list|(
name|RetryPolicy
name|rp
parameter_list|)
block|{
name|this
operator|.
name|retryPolicy
operator|=
name|rp
expr_stmt|;
block|}
comment|/**    * This class is used for opening, reading, and seeking files while using the    * WebHdfsFileSystem. This class will invoke the retry policy when performing    * any of these actions.    */
annotation|@
name|VisibleForTesting
DECL|class|WebHdfsInputStream
specifier|public
class|class
name|WebHdfsInputStream
extends|extends
name|FSInputStream
block|{
DECL|field|readRunner
specifier|private
name|ReadRunner
name|readRunner
init|=
literal|null
decl_stmt|;
DECL|method|WebHdfsInputStream (Path path, int buffersize)
name|WebHdfsInputStream
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|buffersize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Only create the ReadRunner once. Each read's byte array and position
comment|// will be updated within the ReadRunner object before every read.
name|readRunner
operator|=
operator|new
name|ReadRunner
argument_list|(
name|path
argument_list|,
name|buffersize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
return|return
operator|(
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|==
operator|-
literal|1
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|b
index|[
literal|0
index|]
operator|&
literal|0xff
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte b[], int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readRunner
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|seek (long newPos)
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|newPos
parameter_list|)
throws|throws
name|IOException
block|{
name|readRunner
operator|.
name|seek
argument_list|(
name|newPos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|readRunner
operator|.
name|getPos
argument_list|()
return|;
block|}
DECL|method|getBufferSize ()
specifier|protected
name|int
name|getBufferSize
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|readRunner
operator|.
name|getBufferSize
argument_list|()
return|;
block|}
DECL|method|getPath ()
specifier|protected
name|Path
name|getPath
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|readRunner
operator|.
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|readRunner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|setFileLength (long len)
specifier|public
name|void
name|setFileLength
parameter_list|(
name|long
name|len
parameter_list|)
block|{
name|readRunner
operator|.
name|setFileLength
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|getFileLength ()
specifier|public
name|long
name|getFileLength
parameter_list|()
block|{
return|return
name|readRunner
operator|.
name|getFileLength
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getReadRunner ()
name|ReadRunner
name|getReadRunner
parameter_list|()
block|{
return|return
name|readRunner
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setReadRunner (ReadRunner rr)
name|void
name|setReadRunner
parameter_list|(
name|ReadRunner
name|rr
parameter_list|)
block|{
name|this
operator|.
name|readRunner
operator|=
name|rr
expr_stmt|;
block|}
block|}
DECL|enum|RunnerState
enum|enum
name|RunnerState
block|{
DECL|enumConstant|DISCONNECTED
name|DISCONNECTED
block|,
comment|// Connection is closed programmatically by ReadRunner
DECL|enumConstant|OPEN
name|OPEN
block|,
comment|// Connection has been established by ReadRunner
DECL|enumConstant|SEEK
name|SEEK
block|,
comment|// Calling code has explicitly called seek()
DECL|enumConstant|CLOSED
name|CLOSED
comment|// Calling code has explicitly called close()
block|}
comment|/**    * This class will allow retries to occur for both open and read operations.    * The first WebHdfsFileSystem#open creates a new WebHdfsInputStream object,    * which creates a new ReadRunner object that will be used to open a    * connection and read or seek into the input stream.    *    * ReadRunner is a subclass of the AbstractRunner class, which will run the    * ReadRunner#getUrl(), ReadRunner#connect(URL), and ReadRunner#getResponse    * methods within a retry loop, based on the configured retry policy.    * ReadRunner#connect will create a connection if one has not already been    * created. Otherwise, it will return the previously created connection    * object. This is necessary because a new connection should not be created    * for every read.    * Likewise, ReadRunner#getUrl will construct a new URL object only if the    * connection has not previously been established. Otherwise, it will return    * the previously created URL object.    * ReadRunner#getResponse will initialize the input stream if it has not    * already been initialized and read the requested data from the specified    * input stream.    */
annotation|@
name|VisibleForTesting
DECL|class|ReadRunner
specifier|protected
class|class
name|ReadRunner
extends|extends
name|AbstractFsPathRunner
argument_list|<
name|Integer
argument_list|>
block|{
DECL|field|in
specifier|private
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
DECL|field|cachedConnection
specifier|private
name|HttpURLConnection
name|cachedConnection
init|=
literal|null
decl_stmt|;
DECL|field|readBuffer
specifier|private
name|byte
index|[]
name|readBuffer
decl_stmt|;
DECL|field|readOffset
specifier|private
name|int
name|readOffset
decl_stmt|;
DECL|field|readLength
specifier|private
name|int
name|readLength
decl_stmt|;
DECL|field|runnerState
specifier|private
name|RunnerState
name|runnerState
init|=
name|RunnerState
operator|.
name|DISCONNECTED
decl_stmt|;
DECL|field|originalUrl
specifier|private
name|URL
name|originalUrl
init|=
literal|null
decl_stmt|;
DECL|field|resolvedUrl
specifier|private
name|URL
name|resolvedUrl
init|=
literal|null
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|bufferSize
specifier|private
specifier|final
name|int
name|bufferSize
decl_stmt|;
DECL|field|pos
specifier|private
name|long
name|pos
init|=
literal|0
decl_stmt|;
DECL|field|fileLength
specifier|private
name|long
name|fileLength
init|=
literal|0
decl_stmt|;
comment|/* The following methods are WebHdfsInputStream helpers. */
DECL|method|ReadRunner (Path p, int bs)
name|ReadRunner
parameter_list|(
name|Path
name|p
parameter_list|,
name|int
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
argument_list|,
name|p
argument_list|,
operator|new
name|BufferSizeParam
argument_list|(
name|bs
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|p
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|bs
expr_stmt|;
block|}
DECL|method|read (byte[] b, int off, int len)
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|runnerState
operator|==
name|RunnerState
operator|.
name|CLOSED
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream closed"
argument_list|)
throw|;
block|}
comment|// Before the first read, pos and fileLength will be 0 and readBuffer
comment|// will all be null. They will be initialized once the first connection
comment|// is made. Only after that it makes sense to compare pos and fileLength.
if|if
condition|(
name|pos
operator|>=
name|fileLength
operator|&&
name|readBuffer
operator|!=
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// If a seek is occurring, the input stream will have been closed, so it
comment|// needs to be reopened. Use the URLRunner to call AbstractRunner#connect
comment|// with the previously-cached resolved URL and with the 'redirected' flag
comment|// set to 'true'. The resolved URL contains the URL of the previously
comment|// opened DN as opposed to the NN. It is preferable to use the resolved
comment|// URL when creating a connection because it does not hit the NN or every
comment|// seek, nor does it open a connection to a new DN after every seek.
comment|// The redirect flag is needed so that AbstractRunner#connect knows the
comment|// URL is already resolved.
comment|// Note that when the redirected flag is set, retries are not attempted.
comment|// So, if the connection fails using URLRunner, clear out the connection
comment|// and fall through to establish the connection using ReadRunner.
if|if
condition|(
name|runnerState
operator|==
name|RunnerState
operator|.
name|SEEK
condition|)
block|{
try|try
block|{
specifier|final
name|URL
name|rurl
init|=
operator|new
name|URL
argument_list|(
name|resolvedUrl
operator|+
literal|"&"
operator|+
operator|new
name|OffsetParam
argument_list|(
name|pos
argument_list|)
argument_list|)
decl_stmt|;
name|cachedConnection
operator|=
operator|new
name|URLRunner
argument_list|(
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
argument_list|,
name|rurl
argument_list|,
literal|true
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|closeInputStream
argument_list|(
name|RunnerState
operator|.
name|DISCONNECTED
argument_list|)
expr_stmt|;
block|}
block|}
name|readBuffer
operator|=
name|b
expr_stmt|;
name|readOffset
operator|=
name|off
expr_stmt|;
name|readLength
operator|=
name|len
expr_stmt|;
name|int
name|count
init|=
operator|-
literal|1
decl_stmt|;
name|count
operator|=
name|this
operator|.
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
name|count
operator|>=
literal|0
condition|)
block|{
name|statistics
operator|.
name|incrementBytesRead
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|count
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pos
operator|<
name|fileLength
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Premature EOF: pos="
operator|+
name|pos
operator|+
literal|"< filelength="
operator|+
name|fileLength
argument_list|)
throw|;
block|}
return|return
name|count
return|;
block|}
DECL|method|seek (long newPos)
name|void
name|seek
parameter_list|(
name|long
name|newPos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|!=
name|newPos
condition|)
block|{
name|pos
operator|=
name|newPos
expr_stmt|;
name|closeInputStream
argument_list|(
name|RunnerState
operator|.
name|SEEK
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closeInputStream
argument_list|(
name|RunnerState
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
block|}
comment|/* The following methods are overriding AbstractRunner methods,      * to be called within the retry policy context by runWithRetry.      */
annotation|@
name|Override
DECL|method|getUrl ()
specifier|protected
name|URL
name|getUrl
parameter_list|()
throws|throws
name|IOException
block|{
comment|// This method is called every time either a read is executed.
comment|// The check for connection == null is to ensure that a new URL is only
comment|// created upon a new connection and not for every read.
if|if
condition|(
name|cachedConnection
operator|==
literal|null
condition|)
block|{
comment|// Update URL with current offset. BufferSize doesn't change, but it
comment|// still must be included when creating the new URL.
name|updateURLParameters
argument_list|(
operator|new
name|BufferSizeParam
argument_list|(
name|bufferSize
argument_list|)
argument_list|,
operator|new
name|OffsetParam
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|originalUrl
operator|=
name|super
operator|.
name|getUrl
argument_list|()
expr_stmt|;
block|}
return|return
name|originalUrl
return|;
block|}
comment|/* Only make the connection if it is not already open. Don't cache the      * connection here. After this method is called, runWithRetry will call      * validateResponse, and then call the below ReadRunner#getResponse. If      * the code path makes it that far, then we can cache the connection.      */
annotation|@
name|Override
DECL|method|connect (URL url)
specifier|protected
name|HttpURLConnection
name|connect
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|conn
init|=
name|cachedConnection
decl_stmt|;
if|if
condition|(
name|conn
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|conn
operator|=
name|super
operator|.
name|connect
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|closeInputStream
argument_list|(
name|RunnerState
operator|.
name|DISCONNECTED
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
return|return
name|conn
return|;
block|}
comment|/*      * This method is used to perform reads within the retry policy context.      * This code is relying on runWithRetry to always call the above connect      * method and the verifyResponse method prior to calling getResponse.      */
annotation|@
name|Override
DECL|method|getResponse (final HttpURLConnection conn)
name|Integer
name|getResponse
parameter_list|(
specifier|final
name|HttpURLConnection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// In the "open-then-read" use case, runWithRetry will have executed
comment|// ReadRunner#connect to make the connection and then executed
comment|// validateResponse to validate the response code. Only then do we want
comment|// to cache the connection.
comment|// In the "read-after-seek" use case, the connection is made and the
comment|// response is validated by the URLRunner. ReadRunner#read then caches
comment|// the connection and the ReadRunner#connect will pass on the cached
comment|// connection
comment|// In either case, stream initialization is done here if necessary.
name|cachedConnection
operator|=
name|conn
expr_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|in
operator|=
name|initializeInputStream
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
name|int
name|count
init|=
name|in
operator|.
name|read
argument_list|(
name|readBuffer
argument_list|,
name|readOffset
argument_list|,
name|readLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|0
operator|&&
name|pos
operator|<
name|fileLength
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Premature EOF: pos="
operator|+
name|pos
operator|+
literal|"< filelength="
operator|+
name|fileLength
argument_list|)
throw|;
block|}
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|count
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|redirectHost
init|=
name|resolvedUrl
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludeDatanodes
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|excludeDatanodes
operator|=
operator|new
name|ExcludeDatanodesParam
argument_list|(
name|redirectHost
operator|+
literal|","
operator|+
name|excludeDatanodes
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|excludeDatanodes
operator|=
operator|new
name|ExcludeDatanodesParam
argument_list|(
name|redirectHost
argument_list|)
expr_stmt|;
block|}
comment|// If an exception occurs, close the input stream and null it out so
comment|// that if the abstract runner decides to retry, it will reconnect.
name|closeInputStream
argument_list|(
name|RunnerState
operator|.
name|DISCONNECTED
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|initializeInputStream (HttpURLConnection conn)
name|InputStream
name|initializeInputStream
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Cache the resolved URL so that it can be used in the event of
comment|// a future seek operation.
name|resolvedUrl
operator|=
name|removeOffsetParam
argument_list|(
name|conn
operator|.
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|cl
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_LENGTH
argument_list|)
decl_stmt|;
name|InputStream
name|inStream
init|=
name|conn
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"open file: "
operator|+
name|conn
operator|.
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cl
operator|!=
literal|null
condition|)
block|{
name|long
name|streamLength
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|cl
argument_list|)
decl_stmt|;
name|fileLength
operator|=
name|pos
operator|+
name|streamLength
expr_stmt|;
comment|// Java has a bug with>2GB request streams.  It won't bounds check
comment|// the reads so the transfer blocks until the server times out
name|inStream
operator|=
operator|new
name|BoundedInputStream
argument_list|(
name|inStream
argument_list|,
name|streamLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileLength
operator|=
name|getHdfsFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
comment|// Wrapping in BufferedInputStream because it is more performant than
comment|// BoundedInputStream by itself.
name|runnerState
operator|=
name|RunnerState
operator|.
name|OPEN
expr_stmt|;
return|return
operator|new
name|BufferedInputStream
argument_list|(
name|inStream
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
comment|// Close both the InputStream and the connection.
annotation|@
name|VisibleForTesting
DECL|method|closeInputStream (RunnerState rs)
name|void
name|closeInputStream
parameter_list|(
name|RunnerState
name|rs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|cachedConnection
argument_list|)
expr_stmt|;
name|in
operator|=
literal|null
expr_stmt|;
block|}
name|cachedConnection
operator|=
literal|null
expr_stmt|;
name|runnerState
operator|=
name|rs
expr_stmt|;
block|}
comment|/* Getters and Setters */
annotation|@
name|VisibleForTesting
DECL|method|getInputStream ()
specifier|protected
name|InputStream
name|getInputStream
parameter_list|()
block|{
return|return
name|in
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setInputStream (InputStream inStream)
specifier|protected
name|void
name|setInputStream
parameter_list|(
name|InputStream
name|inStream
parameter_list|)
block|{
name|in
operator|=
name|inStream
expr_stmt|;
block|}
DECL|method|getPath ()
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|getBufferSize ()
name|int
name|getBufferSize
parameter_list|()
block|{
return|return
name|bufferSize
return|;
block|}
DECL|method|getFileLength ()
name|long
name|getFileLength
parameter_list|()
block|{
return|return
name|fileLength
return|;
block|}
DECL|method|setFileLength (long len)
name|void
name|setFileLength
parameter_list|(
name|long
name|len
parameter_list|)
block|{
name|fileLength
operator|=
name|len
expr_stmt|;
block|}
DECL|method|getPos ()
name|long
name|getPos
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
block|}
block|}
end_class

end_unit

