begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_PROTOCOL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_PROTOCOL_REST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_PROTOCOL_RPC
import|;
end_import

begin_comment
comment|/**  * Factory class to create different types of OzoneClients.  * Based on<code>ozone.client.protocol</code>, it decides which  * protocol to use for the communication.  * Default value is  *<code>org.apache.hadoop.ozone.client.rpc.RpcClient</code>.<br>  * OzoneClientFactory constructs a proxy using  * {@link OzoneClientInvocationHandler}  * and creates OzoneClient instance with it.  * {@link OzoneClientInvocationHandler} dispatches the call to  * underlying {@link ClientProtocol} implementation.  */
end_comment

begin_class
DECL|class|OzoneClientFactory
specifier|public
specifier|final
class|class
name|OzoneClientFactory
block|{
DECL|enum|ClientType
specifier|private
enum|enum
name|ClientType
block|{
DECL|enumConstant|RPC
DECL|enumConstant|REST
name|RPC
block|,
name|REST
block|}
comment|/**    * Private constructor, class is not meant to be initialized.    */
DECL|method|OzoneClientFactory ()
specifier|private
name|OzoneClientFactory
parameter_list|()
block|{}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneClientFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|static
name|Configuration
name|configuration
decl_stmt|;
comment|/**    * Returns an OzoneClient which will use protocol defined through    *<code>ozone.client.protocol</code> to perform client operations.    * @return OzoneClient    * @throws IOException    */
DECL|method|getClient ()
specifier|public
specifier|static
name|OzoneClient
name|getClient
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getClient
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * Returns an OzoneClient which will use RPC protocol to perform    * client operations.    * @return OzoneClient    * @throws IOException    */
DECL|method|getRpcClient ()
specifier|public
specifier|static
name|OzoneClient
name|getRpcClient
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getClient
argument_list|(
name|ClientType
operator|.
name|RPC
argument_list|)
return|;
block|}
comment|/**    * Returns an OzoneClient which will use REST protocol to perform    * client operations.    * @return OzoneClient    * @throws IOException    */
DECL|method|getRestClient ()
specifier|public
specifier|static
name|OzoneClient
name|getRestClient
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getClient
argument_list|(
name|ClientType
operator|.
name|REST
argument_list|)
return|;
block|}
comment|/**    * Returns OzoneClient with protocol type set base on ClientType.    * @param clientType    * @return OzoneClient    * @throws IOException    */
DECL|method|getClient (ClientType clientType)
specifier|private
specifier|static
name|OzoneClient
name|getClient
parameter_list|(
name|ClientType
name|clientType
parameter_list|)
throws|throws
name|IOException
block|{
name|OzoneClientInvocationHandler
name|clientHandler
init|=
operator|new
name|OzoneClientInvocationHandler
argument_list|(
name|getProtocolClass
argument_list|(
name|clientType
argument_list|)
argument_list|)
decl_stmt|;
name|ClientProtocol
name|proxy
init|=
operator|(
name|ClientProtocol
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|OzoneClientInvocationHandler
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|ClientProtocol
operator|.
name|class
block|}
operator|,
name|clientHandler
block|)
function|;
return|return
operator|new
name|OzoneClient
argument_list|(
name|proxy
argument_list|)
return|;
block|}
end_class

begin_comment
comment|/**    * Returns the configuration if it's already set, else creates a new    * {@link OzoneConfiguration} and returns it.    *    * @return Configuration    */
end_comment

begin_function
DECL|method|getConfiguration ()
specifier|private
specifier|static
specifier|synchronized
name|Configuration
name|getConfiguration
parameter_list|()
block|{
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
name|setConfiguration
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|configuration
return|;
block|}
end_function

begin_comment
comment|/**    * Based on the clientType, client protocol instance is created.    * If clientType is null,<code>ozone.client.protocol</code> property    * will be used to decide the protocol to be used.    * @param clientType type of client protocol to be created    * @return ClientProtocol implementation    * @throws IOException    */
end_comment

begin_function
DECL|method|getProtocolClass (ClientType clientType)
specifier|private
specifier|static
name|ClientProtocol
name|getProtocolClass
parameter_list|(
name|ClientType
name|clientType
parameter_list|)
throws|throws
name|IOException
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ClientProtocol
argument_list|>
name|protocolClass
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|clientType
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|clientType
condition|)
block|{
case|case
name|RPC
case|:
name|protocolClass
operator|=
name|OZONE_CLIENT_PROTOCOL_RPC
expr_stmt|;
break|break;
case|case
name|REST
case|:
name|protocolClass
operator|=
name|OZONE_CLIENT_PROTOCOL_REST
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid ClientProtocol type, falling back to RPC."
argument_list|)
expr_stmt|;
name|protocolClass
operator|=
name|OZONE_CLIENT_PROTOCOL_RPC
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|protocolClass
operator|=
operator|(
name|Class
argument_list|<
name|ClientProtocol
argument_list|>
operator|)
name|getConfiguration
argument_list|()
operator|.
name|getClass
argument_list|(
name|OZONE_CLIENT_PROTOCOL
argument_list|,
name|OZONE_CLIENT_PROTOCOL_RPC
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|ClientProtocol
argument_list|>
name|ctor
init|=
name|protocolClass
operator|.
name|getConstructor
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ctor
operator|.
name|newInstance
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|String
name|message
init|=
literal|"Couldn't create protocol "
operator|+
name|protocolClass
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Sets the configuration, which will be used while creating OzoneClient.    *    * @param conf    */
end_comment

begin_function
DECL|method|setConfiguration (Configuration conf)
specifier|public
specifier|static
name|void
name|setConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|configuration
operator|=
name|conf
expr_stmt|;
block|}
end_function

unit|}
end_unit

