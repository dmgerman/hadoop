begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * {@link LocatedBlock} with striped block support. For a striped block, each  * datanode storage is associated with a block in the block group. We need to  * record the index (in the striped block group) for each of them.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|LocatedStripedBlock
specifier|public
class|class
name|LocatedStripedBlock
extends|extends
name|LocatedBlock
block|{
DECL|field|EMPTY_INDICES
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|EMPTY_INDICES
init|=
block|{}
decl_stmt|;
DECL|field|EMPTY_TOKEN
specifier|private
specifier|static
specifier|final
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|EMPTY_TOKEN
init|=
operator|new
name|Token
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|blockIndices
specifier|private
name|int
index|[]
name|blockIndices
decl_stmt|;
DECL|field|blockTokens
specifier|private
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
index|[]
name|blockTokens
decl_stmt|;
DECL|method|LocatedStripedBlock (ExtendedBlock b, DatanodeInfo[] locs, String[] storageIDs, StorageType[] storageTypes, int[] indices, long startOffset, boolean corrupt, DatanodeInfo[] cachedLocs)
specifier|public
name|LocatedStripedBlock
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|DatanodeInfo
index|[]
name|locs
parameter_list|,
name|String
index|[]
name|storageIDs
parameter_list|,
name|StorageType
index|[]
name|storageTypes
parameter_list|,
name|int
index|[]
name|indices
parameter_list|,
name|long
name|startOffset
parameter_list|,
name|boolean
name|corrupt
parameter_list|,
name|DatanodeInfo
index|[]
name|cachedLocs
parameter_list|)
block|{
name|super
argument_list|(
name|b
argument_list|,
name|locs
argument_list|,
name|storageIDs
argument_list|,
name|storageTypes
argument_list|,
name|startOffset
argument_list|,
name|corrupt
argument_list|,
name|cachedLocs
argument_list|)
expr_stmt|;
if|if
condition|(
name|indices
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|blockIndices
operator|=
name|EMPTY_INDICES
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|blockIndices
operator|=
operator|new
name|int
index|[
name|indices
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|indices
argument_list|,
literal|0
argument_list|,
name|blockIndices
argument_list|,
literal|0
argument_list|,
name|indices
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|blockTokens
operator|=
operator|new
name|Token
index|[
name|blockIndices
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockIndices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|blockTokens
index|[
name|i
index|]
operator|=
name|EMPTY_TOKEN
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"{"
operator|+
name|getBlock
argument_list|()
operator|+
literal|"; getBlockSize()="
operator|+
name|getBlockSize
argument_list|()
operator|+
literal|"; corrupt="
operator|+
name|isCorrupt
argument_list|()
operator|+
literal|"; offset="
operator|+
name|getStartOffset
argument_list|()
operator|+
literal|"; locs="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|getLocations
argument_list|()
argument_list|)
operator|+
literal|"; indices="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|blockIndices
argument_list|)
operator|+
literal|"}"
return|;
block|}
DECL|method|getBlockIndices ()
specifier|public
name|int
index|[]
name|getBlockIndices
parameter_list|()
block|{
return|return
name|this
operator|.
name|blockIndices
return|;
block|}
annotation|@
name|Override
DECL|method|isStriped ()
specifier|public
name|boolean
name|isStriped
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getBlockTokens ()
specifier|public
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
index|[]
name|getBlockTokens
parameter_list|()
block|{
return|return
name|blockTokens
return|;
block|}
DECL|method|setBlockTokens (Token<BlockTokenIdentifier>[] tokens)
specifier|public
name|void
name|setBlockTokens
parameter_list|(
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
index|[]
name|tokens
parameter_list|)
block|{
name|this
operator|.
name|blockTokens
operator|=
name|tokens
expr_stmt|;
block|}
block|}
end_class

end_unit

