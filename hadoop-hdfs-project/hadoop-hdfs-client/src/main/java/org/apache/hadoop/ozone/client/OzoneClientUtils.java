begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HostAndPort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|config
operator|.
name|RequestConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpRequestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZonedDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_SERVICERPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_SERVICERPC_HOSTNAME_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_SERVICERPC_PORT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_JSCSIRPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_JSCSI_PORT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|KSMConfigKeys
operator|.
name|OZONE_KSM_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|KSMConfigKeys
operator|.
name|OZONE_KSM_BIND_HOST_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|KSMConfigKeys
operator|.
name|OZONE_KSM_PORT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DEADNODE_INTERVAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DEADNODE_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_LOG_WARN_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_LOG_WARN_INTERVAL_COUNT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_RPC_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_RPC_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_STALENODE_INTERVAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_STALENODE_INTERVAL
import|;
end_import

begin_comment
comment|/**  * Utility methods for Ozone and Container Clients.  *  * The methods to retrieve SCM service endpoints assume there is a single  * SCM service instance. This will change when we switch to replicated service  * instances for redundancy.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|OzoneClientUtils
specifier|public
specifier|final
class|class
name|OzoneClientUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneClientUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NO_PORT
specifier|private
specifier|static
specifier|final
name|int
name|NO_PORT
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * Date format that used in ozone. Here the format is thread safe to use.    */
DECL|field|DATE_FORMAT
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|DateTimeFormatter
argument_list|>
name|DATE_FORMAT
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
parameter_list|()
lambda|->
block|{
name|DateTimeFormatter
name|format
init|=
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_DATE_FORMAT
argument_list|)
decl_stmt|;
return|return
name|format
operator|.
name|withZone
argument_list|(
name|ZoneId
operator|.
name|of
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_TIME_ZONE
argument_list|)
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
comment|/**    * The service ID of the solitary Ozone SCM service.    */
DECL|field|OZONE_SCM_SERVICE_ID
specifier|public
specifier|static
specifier|final
name|String
name|OZONE_SCM_SERVICE_ID
init|=
literal|"OzoneScmService"
decl_stmt|;
DECL|field|OZONE_SCM_SERVICE_INSTANCE_ID
specifier|public
specifier|static
specifier|final
name|String
name|OZONE_SCM_SERVICE_INSTANCE_ID
init|=
literal|"OzoneScmServiceInstance"
decl_stmt|;
DECL|method|OzoneClientUtils ()
specifier|private
name|OzoneClientUtils
parameter_list|()
block|{
comment|// Never constructed
block|}
comment|/**    * Retrieve the socket addresses of all storage container managers.    *    * @param conf    * @return A collection of SCM addresses    * @throws IllegalArgumentException If the configuration is invalid    */
DECL|method|getSCMAddresses ( Configuration conf)
specifier|public
specifier|static
name|Collection
argument_list|<
name|InetSocketAddress
argument_list|>
name|getSCMAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|Collection
argument_list|<
name|InetSocketAddress
argument_list|>
name|addresses
init|=
operator|new
name|HashSet
argument_list|<
name|InetSocketAddress
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_NAMES
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|==
literal|null
operator|||
name|names
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_NAMES
operator|+
literal|" need to be a set of valid DNS names or IP addresses."
operator|+
literal|" Null or empty address list found."
argument_list|)
throw|;
block|}
specifier|final
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
argument_list|<
name|Integer
argument_list|>
name|defaultPort
init|=
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
operator|.
name|of
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DEFAULT_PORT
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|address
range|:
name|names
control|)
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
argument_list|<
name|String
argument_list|>
name|hostname
init|=
name|OzoneClientUtils
operator|.
name|getHostName
argument_list|(
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hostname
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid hostname for SCM: "
operator|+
name|hostname
argument_list|)
throw|;
block|}
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|OzoneClientUtils
operator|.
name|getHostPort
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|hostname
operator|.
name|get
argument_list|()
argument_list|,
name|port
operator|.
name|or
argument_list|(
name|defaultPort
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|addresses
operator|.
name|add
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
return|return
name|addresses
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by clients to connect    * to the SCM.    *    * @param conf    * @return Target InetSocketAddress for the SCM client endpoint.    */
DECL|method|getScmAddressForClients (Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getScmAddressForClients
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|host
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
operator|+
literal|" must be defined. See"
operator|+
literal|" https://wiki.apache.org/hadoop/Ozone#Configuration for details"
operator|+
literal|" on configuring Ozone."
argument_list|)
throw|;
block|}
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|get
argument_list|()
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by clients to connect    * to the SCM for block service. If    * {@link ScmConfigKeys#OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY} is not defined    * then {@link ScmConfigKeys#OZONE_SCM_CLIENT_ADDRESS_KEY} is used.    *    * @param conf    * @return Target InetSocketAddress for the SCM block client endpoint.    * @throws IllegalArgumentException if configuration is not defined.    */
DECL|method|getScmAddressForBlockClients ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getScmAddressForBlockClients
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|host
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|host
operator|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|host
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY
operator|+
literal|" must be defined. See"
operator|+
literal|" https://wiki.apache.org/hadoop/Ozone#Configuration"
operator|+
literal|" for details on configuring Ozone."
argument_list|)
throw|;
block|}
block|}
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|get
argument_list|()
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_BLOCK_CLIENT_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by DataNodes to connect    * to the SCM.    *    * @param conf    * @return Target InetSocketAddress for the SCM service endpoint.    */
DECL|method|getScmAddressForDataNodes ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getScmAddressForDataNodes
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// We try the following settings in decreasing priority to retrieve the
comment|// target host.
comment|// - OZONE_SCM_DATANODE_ADDRESS_KEY
comment|// - OZONE_SCM_CLIENT_ADDRESS_KEY
comment|//
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ADDRESS_KEY
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|host
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
operator|+
literal|" must be defined. See"
operator|+
literal|" https://wiki.apache.org/hadoop/Ozone#Configuration for details"
operator|+
literal|" on configuring Ozone."
argument_list|)
throw|;
block|}
comment|// If no port number is specified then we'll just try the defaultBindPort.
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ADDRESS_KEY
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|get
argument_list|()
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_PORT_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|addr
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by clients to connect    * to the SCM.    *    * @param conf    * @return Target InetSocketAddress for the SCM client endpoint.    */
DECL|method|getScmClientBindAddress ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getScmClientBindAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_BIND_HOST_KEY
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_BIND_HOST_DEFAULT
argument_list|)
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by clients to connect    * to the SCM Block service.    *    * @param conf    * @return Target InetSocketAddress for the SCM block client endpoint.    */
DECL|method|getScmBlockClientBindAddress ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getScmBlockClientBindAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_BLOCK_CLIENT_BIND_HOST_KEY
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_BLOCK_CLIENT_BIND_HOST_DEFAULT
argument_list|)
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_BLOCK_CLIENT_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by DataNodes to connect    * to the SCM.    *    * @param conf    * @return Target InetSocketAddress for the SCM service endpoint.    */
DECL|method|getScmDataNodeBindAddress ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getScmDataNodeBindAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_BIND_HOST_KEY
argument_list|)
decl_stmt|;
comment|// If no port number is specified then we'll just try the defaultBindPort.
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_BIND_HOST_DEFAULT
argument_list|)
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that is used by KSM.    * @param conf    * @return Target InetSocketAddress for the SCM service endpoint.    */
DECL|method|getKsmAddress ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getKsmAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OZONE_KSM_ADDRESS_KEY
argument_list|)
decl_stmt|;
comment|// If no port number is specified then we'll just try the defaultBindPort.
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OZONE_KSM_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|or
argument_list|(
name|OZONE_KSM_BIND_HOST_DEFAULT
argument_list|)
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|OZONE_KSM_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by clients to connect    * to KSM.    * @param conf    * @return Target InetSocketAddress for the KSM service endpoint.    */
DECL|method|getKsmAddressForClients ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getKsmAddressForClients
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OZONE_KSM_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|host
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|OZONE_KSM_ADDRESS_KEY
operator|+
literal|" must be defined. See"
operator|+
literal|" https://wiki.apache.org/hadoop/Ozone#Configuration for"
operator|+
literal|" details on configuring Ozone."
argument_list|)
throw|;
block|}
comment|// If no port number is specified then we'll just try the defaultBindPort.
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OZONE_KSM_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|get
argument_list|()
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|OZONE_KSM_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that is used by CBlock Service.    * @param conf    * @return Target InetSocketAddress for the CBlock Service endpoint.    */
DECL|method|getCblockServiceRpcAddr ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getCblockServiceRpcAddr
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|DFS_CBLOCK_SERVICERPC_ADDRESS_KEY
argument_list|)
decl_stmt|;
comment|// If no port number is specified then we'll just try the defaultBindPort.
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|DFS_CBLOCK_SERVICERPC_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|or
argument_list|(
name|DFS_CBLOCK_SERVICERPC_HOSTNAME_DEFAULT
argument_list|)
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|DFS_CBLOCK_SERVICERPC_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that is used by CBlock Server.    * @param conf    * @return Target InetSocketAddress for the CBlock Server endpoint.    */
DECL|method|getCblockServerRpcAddr ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getCblockServerRpcAddr
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|DFS_CBLOCK_JSCSIRPC_ADDRESS_KEY
argument_list|)
decl_stmt|;
comment|// If no port number is specified then we'll just try the defaultBindPort.
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|DFS_CBLOCK_JSCSIRPC_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|or
argument_list|(
name|DFS_CBLOCK_SERVICERPC_HOSTNAME_DEFAULT
argument_list|)
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|DFS_CBLOCK_JSCSI_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the hostname, trying the supplied config keys in order.    * Each config value may be absent, or if present in the format    * host:port (the :port part is optional).    *    * @param conf  - Conf    * @param keys a list of configuration key names.    *    * @return first hostname component found from the given keys, or absent.    * @throws IllegalArgumentException if any values are not in the 'host'    *             or host:port format.    */
DECL|method|getHostNameFromConfigKeys (Configuration conf, String... keys)
specifier|public
specifier|static
name|Optional
argument_list|<
name|String
argument_list|>
name|getHostNameFromConfigKeys
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
for|for
control|(
specifier|final
name|String
name|key
range|:
name|keys
control|)
block|{
specifier|final
name|String
name|value
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|key
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|hostName
init|=
name|getHostName
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostName
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|hostName
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
comment|/**    * Gets the hostname or Indicates that it is absent.    * @param value host or host:port    * @return hostname    */
DECL|method|getHostName (String value)
specifier|public
specifier|static
name|Optional
argument_list|<
name|String
argument_list|>
name|getHostName
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|==
literal|null
operator|)
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|HostAndPort
operator|.
name|fromString
argument_list|(
name|value
argument_list|)
operator|.
name|getHostText
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Gets the port if there is one, throws otherwise.    * @param value  String in host:port format.    * @return Port    */
DECL|method|getHostPort (String value)
specifier|public
specifier|static
name|Optional
argument_list|<
name|Integer
argument_list|>
name|getHostPort
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|==
literal|null
operator|)
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
name|int
name|port
init|=
name|HostAndPort
operator|.
name|fromString
argument_list|(
name|value
argument_list|)
operator|.
name|getPortOrDefault
argument_list|(
name|NO_PORT
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|==
name|NO_PORT
condition|)
block|{
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|port
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns the cache value to be used for list calls.    * @param conf Configuration object    * @return list cache size    */
DECL|method|getListCacheSize (Configuration conf)
specifier|public
specifier|static
name|int
name|getListCacheSize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_LIST_CACHE_SIZE
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_LIST_CACHE_SIZE_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Retrieve the port number, trying the supplied config keys in order.    * Each config value may be absent, or if present in the format    * host:port (the :port part is optional).    *    * @param conf Conf    * @param keys a list of configuration key names.    *    * @return first port number component found from the given keys, or absent.    * @throws IllegalArgumentException if any values are not in the 'host'    *             or host:port format.    */
DECL|method|getPortNumberFromConfigKeys ( Configuration conf, String... keys)
specifier|public
specifier|static
name|Optional
argument_list|<
name|Integer
argument_list|>
name|getPortNumberFromConfigKeys
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
for|for
control|(
specifier|final
name|String
name|key
range|:
name|keys
control|)
block|{
specifier|final
name|String
name|value
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|key
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|hostPort
init|=
name|getHostPort
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostPort
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|hostPort
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
comment|/**    * Return the list of service addresses for the Ozone SCM. This method is used    * by the DataNodes to determine the service instances to connect to.    *    * @param conf    * @return list of SCM service addresses.    */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
DECL|method|getScmServiceRpcAddresses (Configuration conf)
name|getScmServiceRpcAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
name|serviceInstances
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|serviceInstances
operator|.
name|put
argument_list|(
name|OZONE_SCM_SERVICE_INSTANCE_ID
argument_list|,
name|getScmAddressForDataNodes
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|services
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|services
operator|.
name|put
argument_list|(
name|OZONE_SCM_SERVICE_ID
argument_list|,
name|serviceInstances
argument_list|)
expr_stmt|;
return|return
name|services
return|;
block|}
comment|/**    * Checks that a given value is with a range.    *    * For example, sanitizeUserArgs(17, 3, 5, 10)    * ensures that 17 is greater/equal than 3 * 5 and less/equal to 3 * 10.    *    * @param valueTocheck  - value to check    * @param baseValue     - the base value that is being used.    * @param minFactor     - range min - a 2 here makes us ensure that value    *                        valueTocheck is at least twice the baseValue.    * @param maxFactor     - range max    * @return long    */
DECL|method|sanitizeUserArgs (long valueTocheck, long baseValue, long minFactor, long maxFactor)
specifier|private
specifier|static
name|long
name|sanitizeUserArgs
parameter_list|(
name|long
name|valueTocheck
parameter_list|,
name|long
name|baseValue
parameter_list|,
name|long
name|minFactor
parameter_list|,
name|long
name|maxFactor
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|(
name|valueTocheck
operator|>=
operator|(
name|baseValue
operator|*
name|minFactor
operator|)
operator|)
operator|&&
operator|(
name|valueTocheck
operator|<=
operator|(
name|baseValue
operator|*
name|maxFactor
operator|)
operator|)
condition|)
block|{
return|return
name|valueTocheck
return|;
block|}
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%d is not within min = %d or max = "
operator|+
literal|"%d"
argument_list|,
name|valueTocheck
argument_list|,
name|baseValue
operator|*
name|minFactor
argument_list|,
name|baseValue
operator|*
name|maxFactor
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
comment|/**    * Returns the interval in which the heartbeat processor thread runs.    *    * @param conf - Configuration    * @return long in Milliseconds.    */
DECL|method|getScmheartbeatCheckerInterval (Configuration conf)
specifier|public
specifier|static
name|long
name|getScmheartbeatCheckerInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
comment|/**    * Heartbeat Interval - Defines the heartbeat frequency from a datanode to    * SCM.    *    * @param conf - Ozone Config    * @return - HB interval in seconds.    */
DECL|method|getScmHeartbeatInterval (Configuration conf)
specifier|public
specifier|static
name|long
name|getScmHeartbeatInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_SCM_HEARTBEAT_INTERVAL
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARBEAT_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
comment|/**    * Get the Stale Node interval, which is used by SCM to flag a datanode as    * stale, if the heartbeat from that node has been missing for this duration.    *    * @param conf - Configuration.    * @return - Long, Milliseconds to wait before flagging a node as stale.    */
DECL|method|getStaleNodeInterval (Configuration conf)
specifier|public
specifier|static
name|long
name|getStaleNodeInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|staleNodeIntervalMs
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_SCM_STALENODE_INTERVAL
argument_list|,
name|OZONE_SCM_STALENODE_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|long
name|heartbeatThreadFrequencyMs
init|=
name|getScmheartbeatCheckerInterval
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|heartbeatIntervalMs
init|=
name|getScmHeartbeatInterval
argument_list|(
name|conf
argument_list|)
operator|*
literal|1000
decl_stmt|;
comment|// Make sure that StaleNodeInterval is configured way above the frequency
comment|// at which we run the heartbeat thread.
comment|//
comment|// Here we check that staleNodeInterval is at least five times more than the
comment|// frequency at which the accounting thread is going to run.
try|try
block|{
name|sanitizeUserArgs
argument_list|(
name|staleNodeIntervalMs
argument_list|,
name|heartbeatThreadFrequencyMs
argument_list|,
literal|5
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Stale Node Interval is cannot be honored due to "
operator|+
literal|"mis-configured {}. ex:  {}"
argument_list|,
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
comment|// Make sure that stale node value is greater than configured value that
comment|// datanodes are going to send HBs.
try|try
block|{
name|sanitizeUserArgs
argument_list|(
name|staleNodeIntervalMs
argument_list|,
name|heartbeatIntervalMs
argument_list|,
literal|3
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Stale Node Interval MS is cannot be honored due to "
operator|+
literal|"mis-configured {}. ex:  {}"
argument_list|,
name|OZONE_SCM_HEARTBEAT_INTERVAL
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
return|return
name|staleNodeIntervalMs
return|;
block|}
comment|/**    * Gets the interval for dead node flagging. This has to be a value that is    * greater than stale node value,  and by transitive relation we also know    * that this value is greater than heartbeat interval and heartbeatProcess    * Interval.    *    * @param conf - Configuration.    * @return - the interval for dead node flagging.    */
DECL|method|getDeadNodeInterval (Configuration conf)
specifier|public
specifier|static
name|long
name|getDeadNodeInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|staleNodeIntervalMs
init|=
name|getStaleNodeInterval
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|deadNodeIntervalMs
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_SCM_DEADNODE_INTERVAL
argument_list|,
name|OZONE_SCM_DEADNODE_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Make sure that dead nodes Ms is at least twice the time for staleNodes
comment|// with a max of 1000 times the staleNodes.
name|sanitizeUserArgs
argument_list|(
name|deadNodeIntervalMs
argument_list|,
name|staleNodeIntervalMs
argument_list|,
literal|2
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Dead Node Interval MS is cannot be honored due to "
operator|+
literal|"mis-configured {}. ex:  {}"
argument_list|,
name|OZONE_SCM_STALENODE_INTERVAL
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
return|return
name|deadNodeIntervalMs
return|;
block|}
comment|/**    * Returns the maximum number of heartbeat to process per loop of the process    * thread.    * @param conf Configuration    * @return - int -- Number of HBs to process    */
DECL|method|getMaxHBToProcessPerLoop (Configuration conf)
specifier|public
specifier|static
name|int
name|getMaxHBToProcessPerLoop
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_MAX_HB_COUNT_TO_PROCESS
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_MAX_HB_COUNT_TO_PROCESS_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Timeout value for the RPC from Datanode to SCM, primarily used for    * Heartbeats and container reports.    *    * @param conf - Ozone Config    * @return - Rpc timeout in Milliseconds.    */
DECL|method|getScmRpcTimeOutInMilliseconds (Configuration conf)
specifier|public
specifier|static
name|long
name|getScmRpcTimeOutInMilliseconds
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_SCM_HEARTBEAT_RPC_TIMEOUT
argument_list|,
name|OZONE_SCM_HEARTBEAT_RPC_TIMEOUT_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
comment|/**    * Log Warn interval.    *    * @param conf - Ozone Config    * @return - Log warn interval.    */
DECL|method|getLogWarnInterval (Configuration conf)
specifier|public
specifier|static
name|int
name|getLogWarnInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_SCM_HEARTBEAT_LOG_WARN_INTERVAL_COUNT
argument_list|,
name|OZONE_SCM_HEARTBEAT_LOG_WARN_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * returns the Container port.    * @param conf - Conf    * @return port number.    */
DECL|method|getContainerPort (Configuration conf)
specifier|public
specifier|static
name|int
name|getContainerPort
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_IPC_PORT
argument_list|,
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_IPC_PORT_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * After starting an RPC server, updates configuration with the actual    * listening address of that server. The listening address may be different    * from the configured address if, for example, the configured address uses    * port 0 to request use of an ephemeral port.    *    * @param conf configuration to update    * @param rpcAddressKey configuration key for RPC server address    * @param addr configured address    * @param rpcServer started RPC server.    */
DECL|method|updateRPCListenAddress ( OzoneConfiguration conf, String rpcAddressKey, InetSocketAddress addr, RPC.Server rpcServer)
specifier|public
specifier|static
name|InetSocketAddress
name|updateRPCListenAddress
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|String
name|rpcAddressKey
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|RPC
operator|.
name|Server
name|rpcServer
parameter_list|)
block|{
return|return
name|updateListenAddress
argument_list|(
name|conf
argument_list|,
name|rpcAddressKey
argument_list|,
name|addr
argument_list|,
name|rpcServer
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * After starting an server, updates configuration with the actual    * listening address of that server. The listening address may be different    * from the configured address if, for example, the configured address uses    * port 0 to request use of an ephemeral port.    *    * @param conf       configuration to update    * @param addressKey configuration key for RPC server address    * @param addr       configured address    * @param listenAddr the real listening address.    */
DECL|method|updateListenAddress (OzoneConfiguration conf, String addressKey, InetSocketAddress addr, InetSocketAddress listenAddr)
specifier|public
specifier|static
name|InetSocketAddress
name|updateListenAddress
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|String
name|addressKey
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|InetSocketAddress
name|listenAddr
parameter_list|)
block|{
name|InetSocketAddress
name|updatedAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|listenAddr
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|addressKey
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
operator|+
literal|":"
operator|+
name|listenAddr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|updatedAddr
return|;
block|}
comment|/**    * Releases a http connection if the request is not null.    * @param request    */
DECL|method|releaseConnection (HttpRequestBase request)
specifier|public
specifier|static
name|void
name|releaseConnection
parameter_list|(
name|HttpRequestBase
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @return a default instance of {@link CloseableHttpClient}.    */
DECL|method|newHttpClient ()
specifier|public
specifier|static
name|CloseableHttpClient
name|newHttpClient
parameter_list|()
block|{
return|return
name|OzoneClientUtils
operator|.
name|newHttpClient
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a {@link CloseableHttpClient} configured by given configuration.    * If conf is null, returns a default instance.    *    * @param conf configuration    * @return a {@link CloseableHttpClient} instance.    */
DECL|method|newHttpClient (Configuration conf)
specifier|public
specifier|static
name|CloseableHttpClient
name|newHttpClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|socketTimeout
init|=
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_SOCKET_TIMEOUT_DEFAULT
decl_stmt|;
name|long
name|connectionTimeout
init|=
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_CONNECTION_TIMEOUT_DEFAULT
decl_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|socketTimeout
operator|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_SOCKET_TIMEOUT
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_SOCKET_TIMEOUT_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|connectionTimeout
operator|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_CONNECTION_TIMEOUT
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_CONNECTION_TIMEOUT_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
name|CloseableHttpClient
name|client
init|=
name|HttpClients
operator|.
name|custom
argument_list|()
operator|.
name|setDefaultRequestConfig
argument_list|(
name|RequestConfig
operator|.
name|custom
argument_list|()
operator|.
name|setSocketTimeout
argument_list|(
name|Math
operator|.
name|toIntExact
argument_list|(
name|socketTimeout
argument_list|)
argument_list|)
operator|.
name|setConnectTimeout
argument_list|(
name|Math
operator|.
name|toIntExact
argument_list|(
name|connectionTimeout
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|client
return|;
block|}
comment|/**    * verifies that bucket name / volume name is a valid DNS name.    *    * @param resName Bucket or volume Name to be validated    *    * @throws IllegalArgumentException    */
DECL|method|verifyResourceName (String resName)
specifier|public
specifier|static
name|void
name|verifyResourceName
parameter_list|(
name|String
name|resName
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|resName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bucket or Volume name is null"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|resName
operator|.
name|length
argument_list|()
operator|<
name|OzoneConsts
operator|.
name|OZONE_MIN_BUCKET_NAME_LENGTH
operator|)
operator|||
operator|(
name|resName
operator|.
name|length
argument_list|()
operator|>
name|OzoneConsts
operator|.
name|OZONE_MAX_BUCKET_NAME_LENGTH
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bucket or Volume length is illegal, "
operator|+
literal|"valid length is 3-63 characters"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|resName
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'.'
operator|)
operator|||
operator|(
name|resName
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bucket or Volume name cannot start with a period or dash"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|resName
operator|.
name|charAt
argument_list|(
name|resName
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'.'
operator|)
operator|||
operator|(
name|resName
operator|.
name|charAt
argument_list|(
name|resName
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'-'
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bucket or Volume name cannot end with a period or dash"
argument_list|)
throw|;
block|}
name|boolean
name|isIPv4
init|=
literal|true
decl_stmt|;
name|char
name|prev
init|=
operator|(
name|char
operator|)
literal|0
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|resName
operator|.
name|length
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|char
name|currChar
init|=
name|resName
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|currChar
operator|!=
literal|'.'
condition|)
block|{
name|isIPv4
operator|=
operator|(
operator|(
name|currChar
operator|>=
literal|'0'
operator|)
operator|&&
operator|(
name|currChar
operator|<=
literal|'9'
operator|)
operator|)
operator|&&
name|isIPv4
expr_stmt|;
block|}
if|if
condition|(
name|currChar
operator|>
literal|'A'
operator|&&
name|currChar
operator|<
literal|'Z'
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bucket or Volume name does not support uppercase characters"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|currChar
operator|!=
literal|'.'
operator|)
operator|&&
operator|(
name|currChar
operator|!=
literal|'-'
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|currChar
operator|<
literal|'0'
operator|)
operator|||
operator|(
name|currChar
operator|>
literal|'9'
operator|&&
name|currChar
operator|<
literal|'a'
operator|)
operator|||
operator|(
name|currChar
operator|>
literal|'z'
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bucket or Volume name has an "
operator|+
literal|"unsupported character : "
operator|+
name|currChar
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|(
name|prev
operator|==
literal|'.'
operator|)
operator|&&
operator|(
name|currChar
operator|==
literal|'.'
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bucket or Volume name should not "
operator|+
literal|"have two contiguous periods"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|prev
operator|==
literal|'-'
operator|)
operator|&&
operator|(
name|currChar
operator|==
literal|'.'
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bucket or Volume name should not have period after dash"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|prev
operator|==
literal|'.'
operator|)
operator|&&
operator|(
name|currChar
operator|==
literal|'-'
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bucket or Volume name should not have dash after period"
argument_list|)
throw|;
block|}
name|prev
operator|=
name|currChar
expr_stmt|;
block|}
if|if
condition|(
name|isIPv4
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bucket or Volume name cannot be an IPv4 address or all numeric"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert time in millisecond to a human readable format required in ozone.    * @return a human readable string for the input time    */
DECL|method|formatDateTime (long millis)
specifier|public
specifier|static
name|String
name|formatDateTime
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
name|ZonedDateTime
name|dateTime
init|=
name|ZonedDateTime
operator|.
name|ofInstant
argument_list|(
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
name|millis
argument_list|)
argument_list|,
name|DATE_FORMAT
operator|.
name|get
argument_list|()
operator|.
name|getZone
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|DATE_FORMAT
operator|.
name|get
argument_list|()
operator|.
name|format
argument_list|(
name|dateTime
argument_list|)
return|;
block|}
comment|/**    * Convert time in ozone date format to millisecond.    * @return time in milliseconds    */
DECL|method|formatDateTime (String date)
specifier|public
specifier|static
name|long
name|formatDateTime
parameter_list|(
name|String
name|date
parameter_list|)
throws|throws
name|ParseException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|date
argument_list|,
literal|"Date string should not be null."
argument_list|)
expr_stmt|;
return|return
name|ZonedDateTime
operator|.
name|parse
argument_list|(
name|date
argument_list|,
name|DATE_FORMAT
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|toInstant
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
return|;
block|}
block|}
end_class

end_unit

