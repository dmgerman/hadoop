begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ClientGSIContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxiesClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|AlignmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|StandbyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A {@link org.apache.hadoop.io.retry.FailoverProxyProvider} implementation  * that supports reading from observer namenode(s).  *  * This constructs a wrapper proxy that sends the request to observer  * namenode(s), if observer read is enabled. In case there are multiple  * observer namenodes, it will try them one by one in case the RPC failed. It  * will fail back to the active namenode after it has exhausted all the  * observer namenodes.  *  * Read and write requests will still be sent to active NN if reading from  * observer is turned off.  */
end_comment

begin_class
DECL|class|ObserverReadProxyProvider
specifier|public
class|class
name|ObserverReadProxyProvider
parameter_list|<
name|T
extends|extends
name|ClientProtocol
parameter_list|>
extends|extends
name|ConfiguredFailoverProxyProvider
argument_list|<
name|T
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ObserverReadProxyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Client-side context for syncing with the NameNode server side */
DECL|field|alignmentContext
specifier|private
name|AlignmentContext
name|alignmentContext
decl_stmt|;
comment|/** Proxies for the observer namenodes */
DECL|field|observerProxies
specifier|private
specifier|final
name|List
argument_list|<
name|AddressRpcProxyPair
argument_list|<
name|T
argument_list|>
argument_list|>
name|observerProxies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Whether reading from observer is enabled. If this is false, all read    * requests will still go to active NN.    */
DECL|field|observerReadEnabled
specifier|private
name|boolean
name|observerReadEnabled
decl_stmt|;
comment|/**    * Thread-local index to record the current index in the observer list.    */
DECL|field|currentIndex
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
name|currentIndex
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
parameter_list|()
lambda|->
literal|0
argument_list|)
decl_stmt|;
comment|/** The last proxy that has been used. Only used for testing */
DECL|field|lastProxy
specifier|private
specifier|volatile
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|lastProxy
init|=
literal|null
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|ObserverReadProxyProvider ( Configuration conf, URI uri, Class<T> xface, HAProxyFactory<T> factory)
specifier|public
name|ObserverReadProxyProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|uri
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|xface
parameter_list|,
name|HAProxyFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|uri
argument_list|,
name|xface
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|alignmentContext
operator|=
operator|new
name|ClientGSIContext
argument_list|()
expr_stmt|;
operator|(
operator|(
name|ClientHAProxyFactory
argument_list|<
name|T
argument_list|>
operator|)
name|factory
operator|)
operator|.
name|setAlignmentContext
argument_list|(
name|alignmentContext
argument_list|)
expr_stmt|;
comment|// Find out all the observer proxies
for|for
control|(
name|AddressRpcProxyPair
argument_list|<
name|T
argument_list|>
name|ap
range|:
name|this
operator|.
name|proxies
control|)
block|{
name|ap
operator|.
name|namenode
operator|=
operator|(
name|T
operator|)
name|NameNodeProxiesClient
operator|.
name|createProxyWithAlignmentContext
argument_list|(
name|ap
operator|.
name|address
argument_list|,
name|conf
argument_list|,
name|ugi
argument_list|,
literal|false
argument_list|,
name|getFallbackToSimpleAuth
argument_list|()
argument_list|,
name|alignmentContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|isObserverState
argument_list|(
name|ap
argument_list|)
condition|)
block|{
name|observerProxies
operator|.
name|add
argument_list|(
name|ap
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|observerProxies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't find any namenode proxy in "
operator|+
literal|"OBSERVER state"
argument_list|)
throw|;
block|}
comment|// Randomize the list to prevent all clients pointing to the same one
name|boolean
name|randomized
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|RANDOM_ORDER
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|RANDOM_ORDER_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomized
condition|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|observerProxies
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAlignmentContext ()
specifier|public
specifier|synchronized
name|AlignmentContext
name|getAlignmentContext
parameter_list|()
block|{
return|return
name|alignmentContext
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|getProxy ()
specifier|public
specifier|synchronized
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|getProxy
parameter_list|()
block|{
comment|// We just create a wrapped proxy containing all the proxies
name|List
argument_list|<
name|ProxyInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|observerProxies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|combinedInfo
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|observerProxies
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|combinedInfo
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|AddressRpcProxyPair
argument_list|<
name|T
argument_list|>
name|p
init|=
name|this
operator|.
name|observerProxies
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|pInfo
init|=
name|getProxy
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|observerProxies
operator|.
name|add
argument_list|(
name|pInfo
argument_list|)
expr_stmt|;
name|combinedInfo
operator|.
name|append
argument_list|(
name|pInfo
operator|.
name|proxyInfo
argument_list|)
expr_stmt|;
block|}
name|combinedInfo
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|T
name|wrappedProxy
init|=
operator|(
name|T
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|ObserverReadInvocationHandler
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|xface
block|}
operator|,
operator|new
name|ObserverReadInvocationHandler
argument_list|(
name|observerProxies
argument_list|)
block|)
function|;
return|return
operator|new
name|ProxyInfo
argument_list|<>
argument_list|(
name|wrappedProxy
argument_list|,
name|combinedInfo
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
end_class

begin_comment
comment|/**    * Check if a method is read-only.    *    * @return whether the 'method' is a read-only operation.    */
end_comment

begin_function
DECL|method|isRead (Method method)
specifier|private
name|boolean
name|isRead
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
return|return
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|ReadOnly
operator|.
name|class
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|VisibleForTesting
DECL|method|setObserverReadEnabled (boolean flag)
name|void
name|setObserverReadEnabled
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|observerReadEnabled
operator|=
name|flag
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * After getting exception 'ex', whether we should retry the current request    * on a different observer.    */
end_comment

begin_function
DECL|method|shouldRetry (Exception ex)
specifier|private
name|boolean
name|shouldRetry
parameter_list|(
name|Exception
name|ex
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO: implement retry policy
return|return
literal|true
return|;
block|}
end_function

begin_function
annotation|@
name|VisibleForTesting
DECL|method|getLastProxy ()
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|getLastProxy
parameter_list|()
block|{
return|return
name|lastProxy
return|;
block|}
end_function

begin_function
DECL|method|isObserverState (AddressRpcProxyPair<T> ap)
name|boolean
name|isObserverState
parameter_list|(
name|AddressRpcProxyPair
argument_list|<
name|T
argument_list|>
name|ap
parameter_list|)
block|{
comment|// TODO: should introduce new ClientProtocol method to verify the
comment|// underlying service state, which does not require superuser access
comment|// The is a workaround
name|IOException
name|ioe
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Verify write access first
name|ap
operator|.
name|namenode
operator|.
name|reportBadBlocks
argument_list|(
operator|new
name|LocatedBlock
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// Only active NameNode allows write
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
name|IOException
name|sbe
init|=
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|StandbyException
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|sbe
operator|instanceof
name|StandbyException
operator|)
condition|)
block|{
name|ioe
operator|=
name|re
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ioe
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|ioe
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to connect to {}"
argument_list|,
name|ap
operator|.
name|address
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Verify read access
comment|// For now we assume only Observer nodes allow reads
comment|// Stale reads on StandbyNode should be turned off
try|try
block|{
name|ap
operator|.
name|namenode
operator|.
name|checkAccess
argument_list|(
literal|"/"
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
name|IOException
name|sbe
init|=
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|StandbyException
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|sbe
operator|instanceof
name|StandbyException
operator|)
condition|)
block|{
name|ioe
operator|=
name|re
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ioe
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|ioe
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to connect to {}"
argument_list|,
name|ap
operator|.
name|address
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_class
DECL|class|ObserverReadInvocationHandler
class|class
name|ObserverReadInvocationHandler
implements|implements
name|InvocationHandler
block|{
DECL|field|observerProxies
specifier|final
name|List
argument_list|<
name|ProxyInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|observerProxies
decl_stmt|;
DECL|field|activeProxy
specifier|final
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|activeProxy
decl_stmt|;
DECL|method|ObserverReadInvocationHandler (List<ProxyInfo<T>> observerProxies)
name|ObserverReadInvocationHandler
parameter_list|(
name|List
argument_list|<
name|ProxyInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|observerProxies
parameter_list|)
block|{
name|this
operator|.
name|observerProxies
operator|=
name|observerProxies
expr_stmt|;
name|this
operator|.
name|activeProxy
operator|=
name|ObserverReadProxyProvider
operator|.
name|super
operator|.
name|getProxy
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sends read operations to the observer (if enabled) specified by the      * current index, and send write operations to the active. If a observer      * fails, we increment the index and retry the next one. If all observers      * fail, the request is forwarded to the active.      *      * Write requests are always forwarded to the active.      */
annotation|@
name|Override
DECL|method|invoke (Object proxy, final Method method, final Object[] args)
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
specifier|final
name|Method
name|method
parameter_list|,
specifier|final
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|lastProxy
operator|=
literal|null
expr_stmt|;
name|Object
name|retVal
decl_stmt|;
if|if
condition|(
name|observerReadEnabled
operator|&&
name|isRead
argument_list|(
name|method
argument_list|)
condition|)
block|{
comment|// Loop through all the proxies, starting from the current index.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|observerProxies
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|current
init|=
name|observerProxies
operator|.
name|get
argument_list|(
name|currentIndex
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|retVal
operator|=
name|method
operator|.
name|invoke
argument_list|(
name|current
operator|.
name|proxy
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|lastProxy
operator|=
name|current
expr_stmt|;
return|return
name|retVal
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|shouldRetry
argument_list|(
name|e
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|currentIndex
operator|.
name|set
argument_list|(
operator|(
name|currentIndex
operator|.
name|get
argument_list|()
operator|+
literal|1
operator|)
operator|%
name|observerProxies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invocation returned exception on [{}]"
argument_list|,
name|current
operator|.
name|proxyInfo
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If we get here, it means all observers have failed.
name|LOG
operator|.
name|warn
argument_list|(
literal|"All observers have failed for read request {}. "
operator|+
literal|"Fall back on active: {}"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|activeProxy
argument_list|)
expr_stmt|;
block|}
comment|// Either all observers have failed, or that it is a write request.
comment|// In either case, we'll forward the request to active NameNode.
try|try
block|{
name|retVal
operator|=
name|method
operator|.
name|invoke
argument_list|(
name|activeProxy
operator|.
name|proxy
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
name|lastProxy
operator|=
name|activeProxy
expr_stmt|;
return|return
name|retVal
return|;
block|}
block|}
end_class

unit|}
end_unit

