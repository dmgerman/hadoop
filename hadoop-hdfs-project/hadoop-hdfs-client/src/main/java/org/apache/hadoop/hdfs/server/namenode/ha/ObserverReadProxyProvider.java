begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ClientGSIContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|AtMostOnce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|Idempotent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
operator|.
name|RetryAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|AlignmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|StandbyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * A {@link org.apache.hadoop.io.retry.FailoverProxyProvider} implementation  * that supports reading from observer namenode(s).  *  * This constructs a wrapper proxy that sends the request to observer  * namenode(s), if observer read is enabled. In case there are multiple  * observer namenodes, it will try them one by one in case the RPC failed. It  * will fail back to the active namenode after it has exhausted all the  * observer namenodes.  *  * Read and write requests will still be sent to active NN if reading from  * observer is turned off.  */
end_comment

begin_class
DECL|class|ObserverReadProxyProvider
specifier|public
class|class
name|ObserverReadProxyProvider
parameter_list|<
name|T
extends|extends
name|ClientProtocol
parameter_list|>
extends|extends
name|AbstractNNFailoverProxyProvider
argument_list|<
name|T
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ObserverReadProxyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Client-side context for syncing with the NameNode server side. */
DECL|field|alignmentContext
specifier|private
specifier|final
name|AlignmentContext
name|alignmentContext
decl_stmt|;
comment|/** The inner proxy provider used for active/standby failover. */
DECL|field|failoverProxy
specifier|private
specifier|final
name|AbstractNNFailoverProxyProvider
argument_list|<
name|T
argument_list|>
name|failoverProxy
decl_stmt|;
comment|/** List of all NameNode proxies. */
DECL|field|nameNodeProxies
specifier|private
specifier|final
name|List
argument_list|<
name|NNProxyInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|nameNodeProxies
decl_stmt|;
comment|/** The policy used to determine if an exception is fatal or retriable. */
DECL|field|observerRetryPolicy
specifier|private
specifier|final
name|RetryPolicy
name|observerRetryPolicy
decl_stmt|;
comment|/** The combined proxy which redirects to other proxies as necessary. */
DECL|field|combinedProxy
specifier|private
specifier|final
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|combinedProxy
decl_stmt|;
comment|/**    * Whether reading from observer is enabled. If this is false, all read    * requests will still go to active NN.    */
DECL|field|observerReadEnabled
specifier|private
name|boolean
name|observerReadEnabled
decl_stmt|;
comment|/**    * The index into the nameNodeProxies list currently being used. Should only    * be accessed in synchronized methods.    */
DECL|field|currentIndex
specifier|private
name|int
name|currentIndex
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * The proxy being used currently; this will match with currentIndex above.    * This field is volatile to allow reads without synchronization; updates    * should still be performed synchronously to maintain consistency between    * currentIndex and this field.    */
DECL|field|currentProxy
specifier|private
specifier|volatile
name|NNProxyInfo
argument_list|<
name|T
argument_list|>
name|currentProxy
decl_stmt|;
comment|/** The last proxy that has been used. Only used for testing. */
DECL|field|lastProxy
specifier|private
specifier|volatile
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|lastProxy
init|=
literal|null
decl_stmt|;
comment|/**    * By default ObserverReadProxyProvider uses    * {@link ConfiguredFailoverProxyProvider} for failover.    */
DECL|method|ObserverReadProxyProvider ( Configuration conf, URI uri, Class<T> xface, HAProxyFactory<T> factory)
specifier|public
name|ObserverReadProxyProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|uri
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|xface
parameter_list|,
name|HAProxyFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|uri
argument_list|,
name|xface
argument_list|,
name|factory
argument_list|,
operator|new
name|ConfiguredFailoverProxyProvider
argument_list|<>
argument_list|(
name|conf
argument_list|,
name|uri
argument_list|,
name|xface
argument_list|,
name|factory
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|ObserverReadProxyProvider ( Configuration conf, URI uri, Class<T> xface, HAProxyFactory<T> factory, AbstractNNFailoverProxyProvider<T> failoverProxy)
specifier|public
name|ObserverReadProxyProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|uri
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|xface
parameter_list|,
name|HAProxyFactory
argument_list|<
name|T
argument_list|>
name|factory
parameter_list|,
name|AbstractNNFailoverProxyProvider
argument_list|<
name|T
argument_list|>
name|failoverProxy
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|uri
argument_list|,
name|xface
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|this
operator|.
name|failoverProxy
operator|=
name|failoverProxy
expr_stmt|;
name|this
operator|.
name|alignmentContext
operator|=
operator|new
name|ClientGSIContext
argument_list|()
expr_stmt|;
operator|(
operator|(
name|ClientHAProxyFactory
argument_list|<
name|T
argument_list|>
operator|)
name|factory
operator|)
operator|.
name|setAlignmentContext
argument_list|(
name|alignmentContext
argument_list|)
expr_stmt|;
comment|// Don't bother configuring the number of retries and such on the retry
comment|// policy since it is mainly only used for determining whether or not an
comment|// exception is retriable or fatal
name|observerRetryPolicy
operator|=
name|RetryPolicies
operator|.
name|failoverOnNetworkException
argument_list|(
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Get all NameNode proxies
name|nameNodeProxies
operator|=
name|getProxyAddresses
argument_list|(
name|uri
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
expr_stmt|;
comment|// Create a wrapped proxy containing all the proxies. Since this combined
comment|// proxy is just redirecting to other proxies, all invocations can share it.
name|StringBuilder
name|combinedInfo
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nameNodeProxies
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|combinedInfo
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|combinedInfo
operator|.
name|append
argument_list|(
name|nameNodeProxies
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|proxyInfo
argument_list|)
expr_stmt|;
block|}
name|combinedInfo
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|T
name|wrappedProxy
init|=
operator|(
name|T
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|ObserverReadInvocationHandler
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|xface
block|}
operator|,
operator|new
name|ObserverReadInvocationHandler
argument_list|()
block|)
empty_stmt|;
name|combinedProxy
operator|=
operator|new
name|ProxyInfo
argument_list|<>
argument_list|(
name|wrappedProxy
argument_list|,
name|combinedInfo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_class

begin_function
DECL|method|getAlignmentContext ()
specifier|public
name|AlignmentContext
name|getAlignmentContext
parameter_list|()
block|{
return|return
name|alignmentContext
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getProxy ()
specifier|public
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|getProxy
parameter_list|()
block|{
return|return
name|combinedProxy
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|performFailover (T currentProxy)
specifier|public
name|void
name|performFailover
parameter_list|(
name|T
name|currentProxy
parameter_list|)
block|{
name|failoverProxy
operator|.
name|performFailover
argument_list|(
name|currentProxy
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Check if a method is read-only.    *    * @return whether the 'method' is a read-only operation.    */
end_comment

begin_function
DECL|method|isRead (Method method)
specifier|private
specifier|static
name|boolean
name|isRead
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
if|if
condition|(
operator|!
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|ReadOnly
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|!
name|method
operator|.
name|getAnnotationsByType
argument_list|(
name|ReadOnly
operator|.
name|class
argument_list|)
index|[
literal|0
index|]
operator|.
name|activeOnly
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|VisibleForTesting
DECL|method|setObserverReadEnabled (boolean flag)
name|void
name|setObserverReadEnabled
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|observerReadEnabled
operator|=
name|flag
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|VisibleForTesting
DECL|method|getLastProxy ()
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|getLastProxy
parameter_list|()
block|{
return|return
name|lastProxy
return|;
block|}
end_function

begin_function
DECL|method|getServiceState ( NNProxyInfo<T> pi)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|ClientProtocol
parameter_list|>
name|HAServiceState
name|getServiceState
parameter_list|(
name|NNProxyInfo
argument_list|<
name|T
argument_list|>
name|pi
parameter_list|)
block|{
comment|// TODO: should introduce new ClientProtocol method to verify the
comment|// underlying service state, which does not require superuser access
comment|// The is a workaround
name|IOException
name|ioe
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Verify write access first
name|pi
operator|.
name|proxy
operator|.
name|reportBadBlocks
argument_list|(
operator|new
name|LocatedBlock
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
name|HAServiceState
operator|.
name|ACTIVE
return|;
comment|// Only active NameNode allows write
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
name|IOException
name|sbe
init|=
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|StandbyException
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|sbe
operator|instanceof
name|StandbyException
operator|)
condition|)
block|{
name|ioe
operator|=
name|re
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ioe
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|ioe
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to connect to {}"
argument_list|,
name|pi
operator|.
name|getAddress
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return
name|HAServiceState
operator|.
name|STANDBY
return|;
comment|// Just assume standby in this case
comment|// Anything besides observer is fine
block|}
comment|// Verify read access
comment|// For now we assume only Observer nodes allow reads
comment|// Stale reads on StandbyNode should be turned off
try|try
block|{
name|pi
operator|.
name|proxy
operator|.
name|checkAccess
argument_list|(
literal|"/"
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
name|HAServiceState
operator|.
name|OBSERVER
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
name|IOException
name|sbe
init|=
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|StandbyException
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|sbe
operator|instanceof
name|StandbyException
operator|)
condition|)
block|{
name|ioe
operator|=
name|re
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ioe
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|ioe
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to connect to {}"
argument_list|,
name|pi
operator|.
name|getAddress
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
return|return
name|HAServiceState
operator|.
name|STANDBY
return|;
block|}
end_function

begin_comment
comment|/**    * Return the currently used proxy. If there is none, first calls    * {@link #changeProxy(NNProxyInfo)} to initialize one.    */
end_comment

begin_function
DECL|method|getCurrentProxy ()
specifier|private
name|NNProxyInfo
argument_list|<
name|T
argument_list|>
name|getCurrentProxy
parameter_list|()
block|{
if|if
condition|(
name|currentProxy
operator|==
literal|null
condition|)
block|{
name|changeProxy
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|currentProxy
return|;
block|}
end_function

begin_comment
comment|/**    * Move to the next proxy in the proxy list. If the NNProxyInfo supplied by    * the caller does not match the current proxy, the call is ignored; this is    * to handle concurrent calls (to avoid changing the proxy multiple times).    * The service state of the newly selected proxy will be updated before    * returning.    *    * @param initial The expected current proxy    */
end_comment

begin_function
DECL|method|changeProxy (NNProxyInfo<T> initial)
specifier|private
specifier|synchronized
name|void
name|changeProxy
parameter_list|(
name|NNProxyInfo
argument_list|<
name|T
argument_list|>
name|initial
parameter_list|)
block|{
if|if
condition|(
name|currentProxy
operator|!=
name|initial
condition|)
block|{
comment|// Must have been a concurrent modification; ignore the move request
return|return;
block|}
comment|// Attempt to force concurrent callers of getCurrentProxy to wait for the
comment|// new proxy; best-effort by setting currentProxy to null
name|currentProxy
operator|=
literal|null
expr_stmt|;
name|currentIndex
operator|=
operator|(
name|currentIndex
operator|+
literal|1
operator|)
operator|%
name|nameNodeProxies
operator|.
name|size
argument_list|()
expr_stmt|;
name|currentProxy
operator|=
name|createProxyIfNeeded
argument_list|(
name|nameNodeProxies
operator|.
name|get
argument_list|(
name|currentIndex
argument_list|)
argument_list|)
expr_stmt|;
name|currentProxy
operator|.
name|setCachedState
argument_list|(
name|getServiceState
argument_list|(
name|currentProxy
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Changed current proxy from {} to {}"
argument_list|,
name|initial
operator|==
literal|null
condition|?
literal|"none"
else|:
name|initial
operator|.
name|proxyInfo
argument_list|,
name|currentProxy
operator|.
name|proxyInfo
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * An InvocationHandler to handle incoming requests. This class's invoke    * method contains the primary logic for redirecting to observers.    *     * If observer reads are enabled, attempt to send read operations to the    * current proxy. If it is not an observer, or the observer fails, adjust    * the current proxy and retry on the next one. If all proxies are tried    * without success, the request is forwarded to the active.    *    * Write requests are always forwarded to the active.    */
end_comment

begin_class
DECL|class|ObserverReadInvocationHandler
specifier|private
class|class
name|ObserverReadInvocationHandler
implements|implements
name|InvocationHandler
block|{
annotation|@
name|Override
DECL|method|invoke (Object proxy, final Method method, final Object[] args)
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
specifier|final
name|Method
name|method
parameter_list|,
specifier|final
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|lastProxy
operator|=
literal|null
expr_stmt|;
name|Object
name|retVal
decl_stmt|;
if|if
condition|(
name|observerReadEnabled
operator|&&
name|isRead
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|int
name|failedObserverCount
init|=
literal|0
decl_stmt|;
name|int
name|activeCount
init|=
literal|0
decl_stmt|;
name|int
name|standbyCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nameNodeProxies
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|NNProxyInfo
argument_list|<
name|T
argument_list|>
name|current
init|=
name|getCurrentProxy
argument_list|()
decl_stmt|;
name|HAServiceState
name|currState
init|=
name|current
operator|.
name|getCachedState
argument_list|()
decl_stmt|;
if|if
condition|(
name|currState
operator|!=
name|HAServiceState
operator|.
name|OBSERVER
condition|)
block|{
if|if
condition|(
name|currState
operator|==
name|HAServiceState
operator|.
name|ACTIVE
condition|)
block|{
name|activeCount
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currState
operator|==
name|HAServiceState
operator|.
name|STANDBY
condition|)
block|{
name|standbyCount
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping proxy {} for {} because it is in state {}"
argument_list|,
name|current
operator|.
name|proxyInfo
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|currState
argument_list|)
expr_stmt|;
name|changeProxy
argument_list|(
name|current
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Attempting to service {} using proxy {}"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|current
operator|.
name|proxyInfo
argument_list|)
expr_stmt|;
try|try
block|{
name|retVal
operator|=
name|method
operator|.
name|invoke
argument_list|(
name|current
operator|.
name|proxy
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|lastProxy
operator|=
name|current
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Invocation of {} using {} was successful"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|current
operator|.
name|proxyInfo
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|ite
operator|.
name|getCause
argument_list|()
operator|instanceof
name|Exception
operator|)
condition|)
block|{
throw|throw
name|ite
operator|.
name|getCause
argument_list|()
throw|;
block|}
name|Exception
name|e
init|=
operator|(
name|Exception
operator|)
name|ite
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|RetryAction
name|retryInfo
init|=
name|observerRetryPolicy
operator|.
name|shouldRetry
argument_list|(
name|e
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|Idempotent
operator|.
name|class
argument_list|)
operator|||
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|AtMostOnce
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|retryInfo
operator|.
name|action
operator|==
name|RetryAction
operator|.
name|RetryDecision
operator|.
name|FAIL
condition|)
block|{
throw|throw
name|e
throw|;
block|}
else|else
block|{
name|failedObserverCount
operator|++
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invocation returned exception on [{}]; {} failure(s) so far"
argument_list|,
name|current
operator|.
name|proxyInfo
argument_list|,
name|failedObserverCount
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|changeProxy
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// If we get here, it means all observers have failed.
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} observers have failed for read request {}; also found "
operator|+
literal|"{} standby and {} active. Falling back to active."
argument_list|,
name|failedObserverCount
argument_list|,
name|standbyCount
argument_list|,
name|activeCount
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Either all observers have failed, or that it is a write request.
comment|// In either case, we'll forward the request to active NameNode.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using failoverProxy to service {}"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|activeProxy
init|=
name|failoverProxy
operator|.
name|getProxy
argument_list|()
decl_stmt|;
try|try
block|{
name|retVal
operator|=
name|method
operator|.
name|invoke
argument_list|(
name|activeProxy
operator|.
name|proxy
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
comment|// This exception will be handled by higher layers
throw|throw
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
name|lastProxy
operator|=
name|activeProxy
expr_stmt|;
return|return
name|retVal
return|;
block|}
block|}
end_class

begin_function
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|pi
range|:
name|nameNodeProxies
control|)
block|{
if|if
condition|(
name|pi
operator|.
name|proxy
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|pi
operator|.
name|proxy
operator|instanceof
name|Closeable
condition|)
block|{
operator|(
operator|(
name|Closeable
operator|)
name|pi
operator|.
name|proxy
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|pi
operator|.
name|proxy
argument_list|)
expr_stmt|;
block|}
comment|// Set to null to avoid the failoverProxy having to re-do the close
comment|// if it is sharing a proxy instance
name|pi
operator|.
name|proxy
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|failoverProxy
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|useLogicalURI ()
specifier|public
name|boolean
name|useLogicalURI
parameter_list|()
block|{
return|return
name|failoverProxy
operator|.
name|useLogicalURI
argument_list|()
return|;
block|}
end_function

unit|}
end_unit

