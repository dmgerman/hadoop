begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web.oauth2
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|okhttp
operator|.
name|OkHttpClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|okhttp
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|okhttp
operator|.
name|RequestBody
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|okhttp
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|URLConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|OAUTH_CLIENT_ID_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|OAUTH_REFRESH_URL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|OAuth2Constants
operator|.
name|ACCESS_TOKEN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|OAuth2Constants
operator|.
name|CLIENT_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|OAuth2Constants
operator|.
name|EXPIRES_IN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|OAuth2Constants
operator|.
name|GRANT_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|OAuth2Constants
operator|.
name|REFRESH_TOKEN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|OAuth2Constants
operator|.
name|URLENCODED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
operator|.
name|Utils
operator|.
name|notNull
import|;
end_import

begin_comment
comment|/**  * Supply a access token obtained via a refresh token (provided through the  * Configuration using the second half of the  *<a href="https://tools.ietf.org/html/rfc6749#section-4.1">  *   Authorization Code Grant workflow</a>.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|ConfRefreshTokenBasedAccessTokenProvider
specifier|public
class|class
name|ConfRefreshTokenBasedAccessTokenProvider
extends|extends
name|AccessTokenProvider
block|{
DECL|field|READER
specifier|private
specifier|static
specifier|final
name|ObjectReader
name|READER
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|readerFor
argument_list|(
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|OAUTH_REFRESH_TOKEN_KEY
specifier|public
specifier|static
specifier|final
name|String
name|OAUTH_REFRESH_TOKEN_KEY
init|=
literal|"dfs.webhdfs.oauth2.refresh.token"
decl_stmt|;
DECL|field|OAUTH_REFRESH_TOKEN_EXPIRES_KEY
specifier|public
specifier|static
specifier|final
name|String
name|OAUTH_REFRESH_TOKEN_EXPIRES_KEY
init|=
literal|"dfs.webhdfs.oauth2.refresh.token.expires.ms.since.epoch"
decl_stmt|;
DECL|field|accessTokenTimer
specifier|private
name|AccessTokenTimer
name|accessTokenTimer
decl_stmt|;
DECL|field|accessToken
specifier|private
name|String
name|accessToken
decl_stmt|;
DECL|field|refreshToken
specifier|private
name|String
name|refreshToken
decl_stmt|;
DECL|field|clientId
specifier|private
name|String
name|clientId
decl_stmt|;
DECL|field|refreshURL
specifier|private
name|String
name|refreshURL
decl_stmt|;
DECL|method|ConfRefreshTokenBasedAccessTokenProvider ()
specifier|public
name|ConfRefreshTokenBasedAccessTokenProvider
parameter_list|()
block|{
name|this
operator|.
name|accessTokenTimer
operator|=
operator|new
name|AccessTokenTimer
argument_list|()
expr_stmt|;
block|}
DECL|method|ConfRefreshTokenBasedAccessTokenProvider (Timer timer)
specifier|public
name|ConfRefreshTokenBasedAccessTokenProvider
parameter_list|(
name|Timer
name|timer
parameter_list|)
block|{
name|this
operator|.
name|accessTokenTimer
operator|=
operator|new
name|AccessTokenTimer
argument_list|(
name|timer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|refreshToken
operator|=
name|notNull
argument_list|(
name|conf
argument_list|,
operator|(
name|OAUTH_REFRESH_TOKEN_KEY
operator|)
argument_list|)
expr_stmt|;
name|accessTokenTimer
operator|.
name|setExpiresInMSSinceEpoch
argument_list|(
name|notNull
argument_list|(
name|conf
argument_list|,
name|OAUTH_REFRESH_TOKEN_EXPIRES_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|clientId
operator|=
name|notNull
argument_list|(
name|conf
argument_list|,
name|OAUTH_CLIENT_ID_KEY
argument_list|)
expr_stmt|;
name|refreshURL
operator|=
name|notNull
argument_list|(
name|conf
argument_list|,
name|OAUTH_REFRESH_URL_KEY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAccessToken ()
specifier|public
specifier|synchronized
name|String
name|getAccessToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|accessTokenTimer
operator|.
name|shouldRefresh
argument_list|()
condition|)
block|{
name|refresh
argument_list|()
expr_stmt|;
block|}
return|return
name|accessToken
return|;
block|}
DECL|method|refresh ()
name|void
name|refresh
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|OkHttpClient
name|client
init|=
operator|new
name|OkHttpClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|setConnectTimeout
argument_list|(
name|URLConnectionFactory
operator|.
name|DEFAULT_SOCKET_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|client
operator|.
name|setReadTimeout
argument_list|(
name|URLConnectionFactory
operator|.
name|DEFAULT_SOCKET_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|String
name|bodyString
init|=
name|Utils
operator|.
name|postBody
argument_list|(
name|GRANT_TYPE
argument_list|,
name|REFRESH_TOKEN
argument_list|,
name|REFRESH_TOKEN
argument_list|,
name|refreshToken
argument_list|,
name|CLIENT_ID
argument_list|,
name|clientId
argument_list|)
decl_stmt|;
name|RequestBody
name|body
init|=
name|RequestBody
operator|.
name|create
argument_list|(
name|URLENCODED
argument_list|,
name|bodyString
argument_list|)
decl_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
operator|.
name|Builder
argument_list|()
operator|.
name|url
argument_list|(
name|refreshURL
argument_list|)
operator|.
name|post
argument_list|(
name|body
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Response
name|responseBody
init|=
name|client
operator|.
name|newCall
argument_list|(
name|request
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|responseBody
operator|.
name|code
argument_list|()
operator|!=
name|HttpStatus
operator|.
name|SC_OK
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Received invalid http response: "
operator|+
name|responseBody
operator|.
name|code
argument_list|()
operator|+
literal|", text = "
operator|+
name|responseBody
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|response
init|=
name|READER
operator|.
name|readValue
argument_list|(
name|responseBody
operator|.
name|body
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|newExpiresIn
init|=
name|response
operator|.
name|get
argument_list|(
name|EXPIRES_IN
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|accessTokenTimer
operator|.
name|setExpiresIn
argument_list|(
name|newExpiresIn
argument_list|)
expr_stmt|;
name|accessToken
operator|=
name|response
operator|.
name|get
argument_list|(
name|ACCESS_TOKEN
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while refreshing access token"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getRefreshToken ()
specifier|public
name|String
name|getRefreshToken
parameter_list|()
block|{
return|return
name|refreshToken
return|;
block|}
block|}
end_class

end_unit

