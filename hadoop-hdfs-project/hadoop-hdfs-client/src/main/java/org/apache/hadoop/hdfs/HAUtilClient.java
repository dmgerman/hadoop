begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|HA_DT_SERVICE_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
operator|.
name|buildTokenService
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|HAUtilClient
specifier|public
class|class
name|HAUtilClient
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HAUtilClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|tokenSelector
specifier|private
specifier|static
specifier|final
name|DelegationTokenSelector
name|tokenSelector
init|=
operator|new
name|DelegationTokenSelector
argument_list|()
decl_stmt|;
comment|/**    * @return true if the given nameNodeUri appears to be a logical URI.    */
DECL|method|isLogicalUri ( Configuration conf, URI nameNodeUri)
specifier|public
specifier|static
name|boolean
name|isLogicalUri
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|nameNodeUri
parameter_list|)
block|{
name|String
name|host
init|=
name|nameNodeUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
comment|// A logical name must be one of the service IDs.
return|return
name|DFSUtilClient
operator|.
name|getNameServiceIds
argument_list|(
name|conf
argument_list|)
operator|.
name|contains
argument_list|(
name|host
argument_list|)
return|;
block|}
comment|/**    * Check whether the client has a failover proxy provider configured    * for the namenode/nameservice.    *    * @param conf Configuration    * @param nameNodeUri The URI of namenode    * @return true if failover is configured.    */
DECL|method|isClientFailoverConfigured ( Configuration conf, URI nameNodeUri)
specifier|public
specifier|static
name|boolean
name|isClientFailoverConfigured
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|nameNodeUri
parameter_list|)
block|{
name|String
name|host
init|=
name|nameNodeUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
name|configKey
init|=
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|PROXY_PROVIDER_KEY_PREFIX
operator|+
literal|"."
operator|+
name|host
decl_stmt|;
return|return
name|conf
operator|.
name|get
argument_list|(
name|configKey
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * Get the service name used in the delegation token for the given logical    * HA service.    * @param uri the logical URI of the cluster    * @param scheme the scheme of the corresponding FileSystem    * @return the service name    */
DECL|method|buildTokenServiceForLogicalUri (final URI uri, final String scheme)
specifier|public
specifier|static
name|Text
name|buildTokenServiceForLogicalUri
parameter_list|(
specifier|final
name|URI
name|uri
parameter_list|,
specifier|final
name|String
name|scheme
parameter_list|)
block|{
return|return
operator|new
name|Text
argument_list|(
name|buildTokenServicePrefixForLogicalUri
argument_list|(
name|scheme
argument_list|)
operator|+
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
return|;
block|}
DECL|method|buildTokenServicePrefixForLogicalUri (String scheme)
specifier|public
specifier|static
name|String
name|buildTokenServicePrefixForLogicalUri
parameter_list|(
name|String
name|scheme
parameter_list|)
block|{
return|return
name|HA_DT_SERVICE_PREFIX
operator|+
name|scheme
operator|+
literal|":"
return|;
block|}
comment|/**    * Parse the file system URI out of the provided token.    */
DECL|method|getServiceUriFromToken (final String scheme, Token<?> token)
specifier|public
specifier|static
name|URI
name|getServiceUriFromToken
parameter_list|(
specifier|final
name|String
name|scheme
parameter_list|,
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
block|{
name|String
name|tokStr
init|=
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|prefix
init|=
name|buildTokenServicePrefixForLogicalUri
argument_list|(
name|scheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokStr
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|tokStr
operator|=
name|tokStr
operator|.
name|replaceFirst
argument_list|(
name|prefix
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|URI
operator|.
name|create
argument_list|(
name|scheme
operator|+
literal|"://"
operator|+
name|tokStr
argument_list|)
return|;
block|}
comment|/**    * @return true if this token corresponds to a logical nameservice    * rather than a specific namenode.    */
DECL|method|isTokenForLogicalUri (Token<?> token)
specifier|public
specifier|static
name|boolean
name|isTokenForLogicalUri
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
block|{
return|return
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|HA_DT_SERVICE_PREFIX
argument_list|)
return|;
block|}
comment|/**    * Locate a delegation token associated with the given HA cluster URI, and if    * one is found, clone it to also represent the underlying namenode address.    * @param ugi the UGI to modify    * @param haUri the logical URI for the cluster    * @param nnAddrs collection of NNs in the cluster to which the token    * applies    */
DECL|method|cloneDelegationTokenForLogicalUri ( UserGroupInformation ugi, URI haUri, Collection<InetSocketAddress> nnAddrs)
specifier|public
specifier|static
name|void
name|cloneDelegationTokenForLogicalUri
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|URI
name|haUri
parameter_list|,
name|Collection
argument_list|<
name|InetSocketAddress
argument_list|>
name|nnAddrs
parameter_list|)
block|{
comment|// this cloning logic is only used by hdfs
name|Text
name|haService
init|=
name|HAUtilClient
operator|.
name|buildTokenServiceForLogicalUri
argument_list|(
name|haUri
argument_list|,
name|HdfsConstants
operator|.
name|HDFS_URI_SCHEME
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|haToken
init|=
name|tokenSelector
operator|.
name|selectToken
argument_list|(
name|haService
argument_list|,
name|ugi
operator|.
name|getTokens
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|haToken
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|InetSocketAddress
name|singleNNAddr
range|:
name|nnAddrs
control|)
block|{
comment|// this is a minor hack to prevent physical HA tokens from being
comment|// exposed to the user via UGI.getCredentials(), otherwise these
comment|// cloned tokens may be inadvertently propagated to jobs
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|specificToken
init|=
name|haToken
operator|.
name|privateClone
argument_list|(
name|buildTokenService
argument_list|(
name|singleNNAddr
argument_list|)
argument_list|)
decl_stmt|;
name|Text
name|alias
init|=
operator|new
name|Text
argument_list|(
name|HAUtilClient
operator|.
name|buildTokenServicePrefixForLogicalUri
argument_list|(
name|HdfsConstants
operator|.
name|HDFS_URI_SCHEME
argument_list|)
operator|+
literal|"//"
operator|+
name|specificToken
operator|.
name|getService
argument_list|()
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|alias
argument_list|,
name|specificToken
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Mapped HA service delegation token for logical URI "
operator|+
name|haUri
operator|+
literal|" to namenode "
operator|+
name|singleNNAddr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No HA service delegation token found for logical URI "
operator|+
name|haUri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

