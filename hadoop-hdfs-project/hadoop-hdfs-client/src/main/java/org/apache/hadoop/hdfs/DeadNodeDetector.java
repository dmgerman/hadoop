begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * Detect the dead nodes in advance, and share this information among all the  * DFSInputStreams in the same client.  */
end_comment

begin_class
DECL|class|DeadNodeDetector
specifier|public
class|class
name|DeadNodeDetector
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DeadNodeDetector
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Waiting time when DeadNodeDetector happens error.    */
DECL|field|ERROR_SLEEP_MS
specifier|private
specifier|static
specifier|final
name|long
name|ERROR_SLEEP_MS
init|=
literal|5000
decl_stmt|;
comment|/**    * Waiting time when DeadNodeDetector's state is idle.    */
DECL|field|IDLE_SLEEP_MS
specifier|private
specifier|static
specifier|final
name|long
name|IDLE_SLEEP_MS
init|=
literal|10000
decl_stmt|;
comment|/**    * Client context name.    */
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
comment|/**    * Dead nodes shared by all the DFSInputStreams of the client.    */
DECL|field|deadNodes
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|DatanodeInfo
argument_list|>
name|deadNodes
decl_stmt|;
comment|/**    * Record dead nodes by one DFSInputStream. When dead node is not used by one    * DFSInputStream, remove it from dfsInputStreamNodes#DFSInputStream. If    * DFSInputStream does not include any dead node, remove DFSInputStream from    * dfsInputStreamNodes.    */
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|DFSInputStream
argument_list|,
name|HashSet
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
DECL|field|dfsInputStreamNodes
name|dfsInputStreamNodes
decl_stmt|;
comment|/**    * The state of DeadNodeDetector.    */
DECL|enum|State
specifier|private
enum|enum
name|State
block|{
DECL|enumConstant|INIT
DECL|enumConstant|CHECK_DEAD
DECL|enumConstant|IDLE
DECL|enumConstant|ERROR
name|INIT
block|,
name|CHECK_DEAD
block|,
name|IDLE
block|,
name|ERROR
block|}
DECL|field|state
specifier|private
name|State
name|state
decl_stmt|;
DECL|method|DeadNodeDetector (String name)
specifier|public
name|DeadNodeDetector
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|deadNodes
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|DatanodeInfo
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|dfsInputStreamNodes
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|DFSInputStream
argument_list|,
name|HashSet
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Start dead node detector for DFSClient {}."
argument_list|,
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|INIT
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|clearAndGetDetectedDeadNodes
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Current detector state {}, the detected nodes: {}."
argument_list|,
name|state
argument_list|,
name|deadNodes
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|INIT
case|:
name|init
argument_list|()
expr_stmt|;
break|break;
case|case
name|IDLE
case|:
name|idle
argument_list|()
expr_stmt|;
break|break;
case|case
name|ERROR
case|:
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|ERROR_SLEEP_MS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
return|return;
default|default:
break|break;
block|}
block|}
block|}
DECL|method|idle ()
specifier|private
name|void
name|idle
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|IDLE_SLEEP_MS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{      }
name|state
operator|=
name|State
operator|.
name|IDLE
expr_stmt|;
block|}
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
block|{
name|state
operator|=
name|State
operator|.
name|IDLE
expr_stmt|;
block|}
DECL|method|addToDead (DatanodeInfo datanodeInfo)
specifier|private
name|void
name|addToDead
parameter_list|(
name|DatanodeInfo
name|datanodeInfo
parameter_list|)
block|{
name|deadNodes
operator|.
name|put
argument_list|(
name|datanodeInfo
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|datanodeInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|isDeadNode (DatanodeInfo datanodeInfo)
specifier|public
name|boolean
name|isDeadNode
parameter_list|(
name|DatanodeInfo
name|datanodeInfo
parameter_list|)
block|{
return|return
name|deadNodes
operator|.
name|containsKey
argument_list|(
name|datanodeInfo
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Add datanode in deadNodes and dfsInputStreamNodes. The node is considered    * to dead node. The dead node is shared by all the DFSInputStreams in the    * same client.    */
DECL|method|addNodeToDetect (DFSInputStream dfsInputStream, DatanodeInfo datanodeInfo)
specifier|public
specifier|synchronized
name|void
name|addNodeToDetect
parameter_list|(
name|DFSInputStream
name|dfsInputStream
parameter_list|,
name|DatanodeInfo
name|datanodeInfo
parameter_list|)
block|{
name|HashSet
argument_list|<
name|DatanodeInfo
argument_list|>
name|datanodeInfos
init|=
name|dfsInputStreamNodes
operator|.
name|get
argument_list|(
name|dfsInputStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|datanodeInfos
operator|==
literal|null
condition|)
block|{
name|datanodeInfos
operator|=
operator|new
name|HashSet
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|()
expr_stmt|;
name|datanodeInfos
operator|.
name|add
argument_list|(
name|datanodeInfo
argument_list|)
expr_stmt|;
name|dfsInputStreamNodes
operator|.
name|putIfAbsent
argument_list|(
name|dfsInputStream
argument_list|,
name|datanodeInfos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|datanodeInfos
operator|.
name|add
argument_list|(
name|datanodeInfo
argument_list|)
expr_stmt|;
block|}
name|addToDead
argument_list|(
name|datanodeInfo
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove dead node which is not used by any DFSInputStream from deadNodes.    * @return new dead node shared by all DFSInputStreams.    */
DECL|method|clearAndGetDetectedDeadNodes ()
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
name|clearAndGetDetectedDeadNodes
parameter_list|()
block|{
comment|// remove the dead nodes who doesn't have any inputstream first
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
name|newDeadNodes
init|=
operator|new
name|HashSet
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HashSet
argument_list|<
name|DatanodeInfo
argument_list|>
name|datanodeInfos
range|:
name|dfsInputStreamNodes
operator|.
name|values
argument_list|()
control|)
block|{
name|newDeadNodes
operator|.
name|addAll
argument_list|(
name|datanodeInfos
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DatanodeInfo
name|datanodeInfo
range|:
name|deadNodes
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|newDeadNodes
operator|.
name|contains
argument_list|(
name|datanodeInfo
argument_list|)
condition|)
block|{
name|deadNodes
operator|.
name|remove
argument_list|(
name|datanodeInfo
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|deadNodes
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Remove dead node from dfsInputStreamNodes#dfsInputStream. If    * dfsInputStreamNodes#dfsInputStream does not contain any dead node, remove    * it from dfsInputStreamNodes.    */
DECL|method|removeNodeFromDeadNodeDetector ( DFSInputStream dfsInputStream, DatanodeInfo datanodeInfo)
specifier|public
specifier|synchronized
name|void
name|removeNodeFromDeadNodeDetector
parameter_list|(
name|DFSInputStream
name|dfsInputStream
parameter_list|,
name|DatanodeInfo
name|datanodeInfo
parameter_list|)
block|{
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
name|datanodeInfos
init|=
name|dfsInputStreamNodes
operator|.
name|get
argument_list|(
name|dfsInputStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|datanodeInfos
operator|!=
literal|null
condition|)
block|{
name|datanodeInfos
operator|.
name|remove
argument_list|(
name|datanodeInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|datanodeInfos
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dfsInputStreamNodes
operator|.
name|remove
argument_list|(
name|dfsInputStream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

