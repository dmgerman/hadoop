begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeLocalInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DEAD_NODE_DETECTION_DEAD_NODE_QUEUE_MAX_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DEAD_NODE_DETECTION_DEAD_NODE_QUEUE_MAX_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_CONNECTION_TIMEOUT_MS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_CONNECTION_TIMEOUT_MS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_DEAD_NODE_INTERVAL_MS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_DEAD_NODE_INTERVAL_MS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_DEAD_NODE_THREADS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_DEAD_NODE_THREADS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_SUSPECT_NODE_INTERVAL_MS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_SUSPECT_NODE_INTERVAL_MS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_SUSPECT_NODE_THREADS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_SUSPECT_NODE_THREADS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DEAD_NODE_DETECTION_RPC_THREADS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DEAD_NODE_DETECTION_RPC_THREADS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DEAD_NODE_DETECTION_SUSPECT_NODE_QUEUE_MAX_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DEAD_NODE_DETECTION_SUSPECT_NODE_QUEUE_MAX_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_TIMEOUT_KEY
import|;
end_import

begin_comment
comment|/**  * Detect the dead nodes in advance, and share this information among all the  * DFSInputStreams in the same client.  */
end_comment

begin_class
DECL|class|DeadNodeDetector
specifier|public
class|class
name|DeadNodeDetector
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DeadNodeDetector
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Waiting time when DeadNodeDetector happens error.    */
DECL|field|ERROR_SLEEP_MS
specifier|private
specifier|static
specifier|final
name|long
name|ERROR_SLEEP_MS
init|=
literal|5000
decl_stmt|;
comment|/**    * Waiting time when DeadNodeDetector's state is idle.    */
DECL|field|IDLE_SLEEP_MS
specifier|private
specifier|static
specifier|final
name|long
name|IDLE_SLEEP_MS
init|=
literal|10000
decl_stmt|;
comment|/**    * Client context name.    */
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|/**    * Dead nodes shared by all the DFSInputStreams of the client.    */
DECL|field|deadNodes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|DatanodeInfo
argument_list|>
name|deadNodes
decl_stmt|;
comment|/**    * Record suspect and dead nodes by one DFSInputStream. When node is not used    * by one DFSInputStream, remove it from suspectAndDeadNodes#DFSInputStream.    * If DFSInputStream does not include any node, remove DFSInputStream from    * suspectAndDeadNodes.    */
specifier|private
specifier|final
name|Map
argument_list|<
name|DFSInputStream
argument_list|,
name|HashSet
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
DECL|field|suspectAndDeadNodes
name|suspectAndDeadNodes
decl_stmt|;
comment|/**    * Datanodes that is being probed.    */
DECL|field|probeInProg
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DatanodeInfo
argument_list|>
name|probeInProg
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|DatanodeInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * The last time when detect dead node.    */
DECL|field|lastDetectDeadTS
specifier|private
name|long
name|lastDetectDeadTS
init|=
literal|0
decl_stmt|;
comment|/**    * Interval time in milliseconds for probing dead node behavior.    */
DECL|field|deadNodeDetectInterval
specifier|private
name|long
name|deadNodeDetectInterval
init|=
literal|0
decl_stmt|;
comment|/**    * Interval time in milliseconds for probing suspect node behavior.    */
DECL|field|suspectNodeDetectInterval
specifier|private
name|long
name|suspectNodeDetectInterval
init|=
literal|0
decl_stmt|;
comment|/**    * The max queue size of probing dead node.    */
DECL|field|maxDeadNodesProbeQueueLen
specifier|private
name|int
name|maxDeadNodesProbeQueueLen
init|=
literal|0
decl_stmt|;
comment|/**    * The max queue size of probing suspect node.    */
DECL|field|maxSuspectNodesProbeQueueLen
specifier|private
name|int
name|maxSuspectNodesProbeQueueLen
decl_stmt|;
comment|/**    * Connection timeout for probing dead node in milliseconds.    */
DECL|field|probeConnectionTimeoutMs
specifier|private
name|long
name|probeConnectionTimeoutMs
decl_stmt|;
comment|/**    * The dead node probe queue.    */
DECL|field|deadNodesProbeQueue
specifier|private
name|Queue
argument_list|<
name|DatanodeInfo
argument_list|>
name|deadNodesProbeQueue
decl_stmt|;
comment|/**    * The suspect node probe queue.    */
DECL|field|suspectNodesProbeQueue
specifier|private
name|Queue
argument_list|<
name|DatanodeInfo
argument_list|>
name|suspectNodesProbeQueue
decl_stmt|;
comment|/**    * The thread pool of probing dead node.    */
DECL|field|probeDeadNodesThreadPool
specifier|private
name|ExecutorService
name|probeDeadNodesThreadPool
decl_stmt|;
comment|/**    * The thread pool of probing suspect node.    */
DECL|field|probeSuspectNodesThreadPool
specifier|private
name|ExecutorService
name|probeSuspectNodesThreadPool
decl_stmt|;
comment|/**    * The scheduler thread of probing dead node.    */
DECL|field|probeDeadNodesSchedulerThr
specifier|private
name|Thread
name|probeDeadNodesSchedulerThr
decl_stmt|;
comment|/**    * The scheduler thread of probing suspect node.    */
DECL|field|probeSuspectNodesSchedulerThr
specifier|private
name|Thread
name|probeSuspectNodesSchedulerThr
decl_stmt|;
comment|/**    * The thread pool of probing datanodes' rpc request. Sometimes the data node    * can hang and not respond to the client in a short time. And these node will    * filled with probe thread pool and block other normal node probing.    */
DECL|field|rpcThreadPool
specifier|private
name|ExecutorService
name|rpcThreadPool
decl_stmt|;
DECL|field|socketTimeout
specifier|private
name|int
name|socketTimeout
decl_stmt|;
comment|/**    * The type of probe.    */
DECL|enum|ProbeType
specifier|private
enum|enum
name|ProbeType
block|{
DECL|enumConstant|CHECK_DEAD
DECL|enumConstant|CHECK_SUSPECT
name|CHECK_DEAD
block|,
name|CHECK_SUSPECT
block|}
comment|/**    * The state of DeadNodeDetector.    */
DECL|enum|State
specifier|private
enum|enum
name|State
block|{
DECL|enumConstant|INIT
DECL|enumConstant|CHECK_DEAD
DECL|enumConstant|IDLE
DECL|enumConstant|ERROR
name|INIT
block|,
name|CHECK_DEAD
block|,
name|IDLE
block|,
name|ERROR
block|}
comment|/**    * Disabled start probe suspect/dead thread for the testing.    */
DECL|field|disabledProbeThreadForTest
specifier|private
specifier|static
specifier|volatile
name|boolean
name|disabledProbeThreadForTest
init|=
literal|false
decl_stmt|;
DECL|field|state
specifier|private
name|State
name|state
decl_stmt|;
DECL|method|DeadNodeDetector (String name, Configuration conf)
specifier|public
name|DeadNodeDetector
parameter_list|(
name|String
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|deadNodes
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|DatanodeInfo
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|suspectAndDeadNodes
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|DFSInputStream
argument_list|,
name|HashSet
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|deadNodeDetectInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_DEAD_NODE_INTERVAL_MS_KEY
argument_list|,
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_DEAD_NODE_INTERVAL_MS_DEFAULT
argument_list|)
expr_stmt|;
name|suspectNodeDetectInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_SUSPECT_NODE_INTERVAL_MS_KEY
argument_list|,
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_SUSPECT_NODE_INTERVAL_MS_DEFAULT
argument_list|)
expr_stmt|;
name|socketTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_SOCKET_TIMEOUT_KEY
argument_list|,
name|HdfsConstants
operator|.
name|READ_TIMEOUT
argument_list|)
expr_stmt|;
name|maxDeadNodesProbeQueueLen
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_DEAD_NODE_DETECTION_DEAD_NODE_QUEUE_MAX_KEY
argument_list|,
name|DFS_CLIENT_DEAD_NODE_DETECTION_DEAD_NODE_QUEUE_MAX_DEFAULT
argument_list|)
expr_stmt|;
name|maxSuspectNodesProbeQueueLen
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_DEAD_NODE_DETECTION_SUSPECT_NODE_QUEUE_MAX_KEY
argument_list|,
name|DFS_CLIENT_DEAD_NODE_DETECTION_SUSPECT_NODE_QUEUE_MAX_DEFAULT
argument_list|)
expr_stmt|;
name|probeConnectionTimeoutMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_CONNECTION_TIMEOUT_MS_KEY
argument_list|,
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_CONNECTION_TIMEOUT_MS_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|deadNodesProbeQueue
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|(
name|maxDeadNodesProbeQueueLen
argument_list|)
expr_stmt|;
name|this
operator|.
name|suspectNodesProbeQueue
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|(
name|maxSuspectNodesProbeQueueLen
argument_list|)
expr_stmt|;
name|int
name|deadNodeDetectDeadThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_DEAD_NODE_THREADS_KEY
argument_list|,
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_DEAD_NODE_THREADS_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|suspectNodeDetectDeadThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_SUSPECT_NODE_THREADS_KEY
argument_list|,
name|DFS_CLIENT_DEAD_NODE_DETECTION_PROBE_SUSPECT_NODE_THREADS_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|rpcThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_DEAD_NODE_DETECTION_RPC_THREADS_KEY
argument_list|,
name|DFS_CLIENT_DEAD_NODE_DETECTION_RPC_THREADS_DEFAULT
argument_list|)
decl_stmt|;
name|probeDeadNodesThreadPool
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|deadNodeDetectDeadThreads
argument_list|,
operator|new
name|Daemon
operator|.
name|DaemonFactory
argument_list|()
argument_list|)
expr_stmt|;
name|probeSuspectNodesThreadPool
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|suspectNodeDetectDeadThreads
argument_list|,
operator|new
name|Daemon
operator|.
name|DaemonFactory
argument_list|()
argument_list|)
expr_stmt|;
name|rpcThreadPool
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|rpcThreads
argument_list|,
operator|new
name|Daemon
operator|.
name|DaemonFactory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|disabledProbeThreadForTest
condition|)
block|{
name|startProbeScheduler
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Start dead node detector for DFSClient {}."
argument_list|,
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|INIT
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|clearAndGetDetectedDeadNodes
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Current detector state {}, the detected nodes: {}."
argument_list|,
name|state
argument_list|,
name|deadNodes
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|INIT
case|:
name|init
argument_list|()
expr_stmt|;
break|break;
case|case
name|CHECK_DEAD
case|:
name|checkDeadNodes
argument_list|()
expr_stmt|;
break|break;
case|case
name|IDLE
case|:
name|idle
argument_list|()
expr_stmt|;
break|break;
case|case
name|ERROR
case|:
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|ERROR_SLEEP_MS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
return|return;
default|default:
break|break;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|disabledProbeThreadForTest ()
specifier|static
name|void
name|disabledProbeThreadForTest
parameter_list|()
block|{
name|disabledProbeThreadForTest
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Start probe dead node and suspect node thread.    */
annotation|@
name|VisibleForTesting
DECL|method|startProbeScheduler ()
name|void
name|startProbeScheduler
parameter_list|()
block|{
name|probeDeadNodesSchedulerThr
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|ProbeScheduler
argument_list|(
name|this
argument_list|,
name|ProbeType
operator|.
name|CHECK_DEAD
argument_list|)
argument_list|)
expr_stmt|;
name|probeDeadNodesSchedulerThr
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|probeDeadNodesSchedulerThr
operator|.
name|start
argument_list|()
expr_stmt|;
name|probeSuspectNodesSchedulerThr
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|ProbeScheduler
argument_list|(
name|this
argument_list|,
name|ProbeType
operator|.
name|CHECK_SUSPECT
argument_list|)
argument_list|)
expr_stmt|;
name|probeSuspectNodesSchedulerThr
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|probeSuspectNodesSchedulerThr
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Prode datanode by probe byte.    */
DECL|method|scheduleProbe (ProbeType type)
specifier|private
name|void
name|scheduleProbe
parameter_list|(
name|ProbeType
name|type
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Schedule probe datanode for probe type: {}."
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|datanodeInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|ProbeType
operator|.
name|CHECK_DEAD
condition|)
block|{
while|while
condition|(
operator|(
name|datanodeInfo
operator|=
name|deadNodesProbeQueue
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|probeInProg
operator|.
name|containsKey
argument_list|(
name|datanodeInfo
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The datanode {} is already contained in probe queue, "
operator|+
literal|"skip to add it."
argument_list|,
name|datanodeInfo
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|probeInProg
operator|.
name|put
argument_list|(
name|datanodeInfo
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|datanodeInfo
argument_list|)
expr_stmt|;
name|Probe
name|probe
init|=
operator|new
name|Probe
argument_list|(
name|this
argument_list|,
name|datanodeInfo
argument_list|,
name|ProbeType
operator|.
name|CHECK_DEAD
argument_list|)
decl_stmt|;
name|probeDeadNodesThreadPool
operator|.
name|execute
argument_list|(
name|probe
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|ProbeType
operator|.
name|CHECK_SUSPECT
condition|)
block|{
while|while
condition|(
operator|(
name|datanodeInfo
operator|=
name|suspectNodesProbeQueue
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|probeInProg
operator|.
name|containsKey
argument_list|(
name|datanodeInfo
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|probeInProg
operator|.
name|put
argument_list|(
name|datanodeInfo
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|datanodeInfo
argument_list|)
expr_stmt|;
name|Probe
name|probe
init|=
operator|new
name|Probe
argument_list|(
name|this
argument_list|,
name|datanodeInfo
argument_list|,
name|ProbeType
operator|.
name|CHECK_SUSPECT
argument_list|)
decl_stmt|;
name|probeSuspectNodesThreadPool
operator|.
name|execute
argument_list|(
name|probe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Request the data node through rpc, and determine the data node status based    * on the returned result.    */
DECL|class|Probe
class|class
name|Probe
implements|implements
name|Runnable
block|{
DECL|field|deadNodeDetector
specifier|private
name|DeadNodeDetector
name|deadNodeDetector
decl_stmt|;
DECL|field|datanodeInfo
specifier|private
name|DatanodeInfo
name|datanodeInfo
decl_stmt|;
DECL|field|type
specifier|private
name|ProbeType
name|type
decl_stmt|;
DECL|method|Probe (DeadNodeDetector deadNodeDetector, DatanodeInfo datanodeInfo, ProbeType type)
name|Probe
parameter_list|(
name|DeadNodeDetector
name|deadNodeDetector
parameter_list|,
name|DatanodeInfo
name|datanodeInfo
parameter_list|,
name|ProbeType
name|type
parameter_list|)
block|{
name|this
operator|.
name|deadNodeDetector
operator|=
name|deadNodeDetector
expr_stmt|;
name|this
operator|.
name|datanodeInfo
operator|=
name|datanodeInfo
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getDatanodeInfo ()
specifier|public
name|DatanodeInfo
name|getDatanodeInfo
parameter_list|()
block|{
return|return
name|datanodeInfo
return|;
block|}
DECL|method|getType ()
specifier|public
name|ProbeType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Check node: {}, type: {}."
argument_list|,
name|datanodeInfo
argument_list|,
name|type
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|ClientDatanodeProtocol
name|proxy
init|=
name|DFSUtilClient
operator|.
name|createClientDatanodeProtocolProxy
argument_list|(
name|datanodeInfo
argument_list|,
name|deadNodeDetector
operator|.
name|conf
argument_list|,
name|socketTimeout
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|DatanodeLocalInfo
argument_list|>
name|future
init|=
name|rpcThreadPool
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DatanodeLocalInfo
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|proxy
operator|.
name|getDatanodeInfo
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|(
name|probeConnectionTimeoutMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Probe failed, datanode: {}, type: {}."
argument_list|,
name|datanodeInfo
argument_list|,
name|type
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|deadNodeDetector
operator|.
name|probeCallBack
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
finally|finally
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|deadNodeDetector
operator|.
name|probeCallBack
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Probe failed, datanode: {}, type: {}."
argument_list|,
name|datanodeInfo
argument_list|,
name|type
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|deadNodeDetector
operator|.
name|probeCallBack
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Handle data node, according to probe result. When ProbeType is CHECK_DEAD,    * remove the datanode from DeadNodeDetector#deadNodes if probe success.    */
DECL|method|probeCallBack (Probe probe, boolean success)
specifier|private
name|void
name|probeCallBack
parameter_list|(
name|Probe
name|probe
parameter_list|,
name|boolean
name|success
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Probe datanode: {} result: {}, type: {}"
argument_list|,
name|probe
operator|.
name|getDatanodeInfo
argument_list|()
argument_list|,
name|success
argument_list|,
name|probe
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|probeInProg
operator|.
name|remove
argument_list|(
name|probe
operator|.
name|getDatanodeInfo
argument_list|()
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
if|if
condition|(
name|probe
operator|.
name|getType
argument_list|()
operator|==
name|ProbeType
operator|.
name|CHECK_DEAD
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Remove the node out from dead node list: {}."
argument_list|,
name|probe
operator|.
name|getDatanodeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|removeDeadNode
argument_list|(
name|probe
operator|.
name|getDatanodeInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|probe
operator|.
name|getType
argument_list|()
operator|==
name|ProbeType
operator|.
name|CHECK_SUSPECT
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Remove the node out from suspect node list: {}."
argument_list|,
name|probe
operator|.
name|getDatanodeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|removeNodeFromDeadNodeDetector
argument_list|(
name|probe
operator|.
name|getDatanodeInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|probe
operator|.
name|getType
argument_list|()
operator|==
name|ProbeType
operator|.
name|CHECK_SUSPECT
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Add the node to dead node list: {}."
argument_list|,
name|probe
operator|.
name|getDatanodeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|addToDead
argument_list|(
name|probe
operator|.
name|getDatanodeInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Check dead node periodically.    */
DECL|method|checkDeadNodes ()
specifier|private
name|void
name|checkDeadNodes
parameter_list|()
block|{
name|long
name|ts
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|ts
operator|-
name|lastDetectDeadTS
operator|>
name|deadNodeDetectInterval
condition|)
block|{
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
name|datanodeInfos
init|=
name|clearAndGetDetectedDeadNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|datanodeInfo
range|:
name|datanodeInfos
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Add dead node to check: {}."
argument_list|,
name|datanodeInfo
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|deadNodesProbeQueue
operator|.
name|offer
argument_list|(
name|datanodeInfo
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skip to add dead node {} to check "
operator|+
literal|"since the probe queue is full."
argument_list|,
name|datanodeInfo
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|lastDetectDeadTS
operator|=
name|ts
expr_stmt|;
block|}
name|state
operator|=
name|State
operator|.
name|IDLE
expr_stmt|;
block|}
DECL|method|idle ()
specifier|private
name|void
name|idle
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|IDLE_SLEEP_MS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{      }
name|state
operator|=
name|State
operator|.
name|CHECK_DEAD
expr_stmt|;
block|}
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
block|{
name|state
operator|=
name|State
operator|.
name|CHECK_DEAD
expr_stmt|;
block|}
DECL|method|addToDead (DatanodeInfo datanodeInfo)
specifier|private
name|void
name|addToDead
parameter_list|(
name|DatanodeInfo
name|datanodeInfo
parameter_list|)
block|{
name|deadNodes
operator|.
name|put
argument_list|(
name|datanodeInfo
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|datanodeInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|isDeadNode (DatanodeInfo datanodeInfo)
specifier|public
name|boolean
name|isDeadNode
parameter_list|(
name|DatanodeInfo
name|datanodeInfo
parameter_list|)
block|{
return|return
name|deadNodes
operator|.
name|containsKey
argument_list|(
name|datanodeInfo
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
return|;
block|}
DECL|method|removeFromDead (DatanodeInfo datanodeInfo)
specifier|private
name|void
name|removeFromDead
parameter_list|(
name|DatanodeInfo
name|datanodeInfo
parameter_list|)
block|{
name|deadNodes
operator|.
name|remove
argument_list|(
name|datanodeInfo
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getDeadNodesProbeQueue ()
specifier|public
name|Queue
argument_list|<
name|DatanodeInfo
argument_list|>
name|getDeadNodesProbeQueue
parameter_list|()
block|{
return|return
name|deadNodesProbeQueue
return|;
block|}
DECL|method|getSuspectNodesProbeQueue ()
specifier|public
name|Queue
argument_list|<
name|DatanodeInfo
argument_list|>
name|getSuspectNodesProbeQueue
parameter_list|()
block|{
return|return
name|suspectNodesProbeQueue
return|;
block|}
comment|/**    * Add datanode to suspectNodes and suspectAndDeadNodes.    */
DECL|method|addNodeToDetect (DFSInputStream dfsInputStream, DatanodeInfo datanodeInfo)
specifier|public
specifier|synchronized
name|void
name|addNodeToDetect
parameter_list|(
name|DFSInputStream
name|dfsInputStream
parameter_list|,
name|DatanodeInfo
name|datanodeInfo
parameter_list|)
block|{
name|HashSet
argument_list|<
name|DatanodeInfo
argument_list|>
name|datanodeInfos
init|=
name|suspectAndDeadNodes
operator|.
name|get
argument_list|(
name|dfsInputStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|datanodeInfos
operator|==
literal|null
condition|)
block|{
name|datanodeInfos
operator|=
operator|new
name|HashSet
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|()
expr_stmt|;
name|datanodeInfos
operator|.
name|add
argument_list|(
name|datanodeInfo
argument_list|)
expr_stmt|;
name|suspectAndDeadNodes
operator|.
name|putIfAbsent
argument_list|(
name|dfsInputStream
argument_list|,
name|datanodeInfos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|datanodeInfos
operator|.
name|add
argument_list|(
name|datanodeInfo
argument_list|)
expr_stmt|;
block|}
name|addSuspectNodeToDetect
argument_list|(
name|datanodeInfo
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add datanode to suspectNodes.    */
DECL|method|addSuspectNodeToDetect (DatanodeInfo datanodeInfo)
specifier|private
name|boolean
name|addSuspectNodeToDetect
parameter_list|(
name|DatanodeInfo
name|datanodeInfo
parameter_list|)
block|{
return|return
name|suspectNodesProbeQueue
operator|.
name|offer
argument_list|(
name|datanodeInfo
argument_list|)
return|;
block|}
comment|/**      * Remove dead node which is not used by any DFSInputStream from deadNodes.      * @return new dead node shared by all DFSInputStreams.      */
DECL|method|clearAndGetDetectedDeadNodes ()
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
name|clearAndGetDetectedDeadNodes
parameter_list|()
block|{
comment|// remove the dead nodes who doesn't have any inputstream first
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
name|newDeadNodes
init|=
operator|new
name|HashSet
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HashSet
argument_list|<
name|DatanodeInfo
argument_list|>
name|datanodeInfos
range|:
name|suspectAndDeadNodes
operator|.
name|values
argument_list|()
control|)
block|{
name|newDeadNodes
operator|.
name|addAll
argument_list|(
name|datanodeInfos
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DatanodeInfo
name|datanodeInfo
range|:
name|deadNodes
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|newDeadNodes
operator|.
name|contains
argument_list|(
name|datanodeInfo
argument_list|)
condition|)
block|{
name|deadNodes
operator|.
name|remove
argument_list|(
name|datanodeInfo
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|deadNodes
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Remove suspect and dead node from suspectAndDeadNodes#dfsInputStream and    *  local deadNodes.    */
DECL|method|removeNodeFromDeadNodeDetector ( DFSInputStream dfsInputStream, DatanodeInfo datanodeInfo)
specifier|public
specifier|synchronized
name|void
name|removeNodeFromDeadNodeDetector
parameter_list|(
name|DFSInputStream
name|dfsInputStream
parameter_list|,
name|DatanodeInfo
name|datanodeInfo
parameter_list|)
block|{
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
name|datanodeInfos
init|=
name|suspectAndDeadNodes
operator|.
name|get
argument_list|(
name|dfsInputStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|datanodeInfos
operator|!=
literal|null
condition|)
block|{
name|datanodeInfos
operator|.
name|remove
argument_list|(
name|datanodeInfo
argument_list|)
expr_stmt|;
name|dfsInputStream
operator|.
name|removeFromLocalDeadNodes
argument_list|(
name|datanodeInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|datanodeInfos
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|suspectAndDeadNodes
operator|.
name|remove
argument_list|(
name|dfsInputStream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Remove suspect and dead node from suspectAndDeadNodes#dfsInputStream and    *  local deadNodes.    */
DECL|method|removeNodeFromDeadNodeDetector ( DatanodeInfo datanodeInfo)
specifier|private
specifier|synchronized
name|void
name|removeNodeFromDeadNodeDetector
parameter_list|(
name|DatanodeInfo
name|datanodeInfo
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|DFSInputStream
argument_list|,
name|HashSet
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
name|entry
range|:
name|suspectAndDeadNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
name|datanodeInfos
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|datanodeInfos
operator|.
name|remove
argument_list|(
name|datanodeInfo
argument_list|)
condition|)
block|{
name|DFSInputStream
name|dfsInputStream
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|dfsInputStream
operator|.
name|removeFromLocalDeadNodes
argument_list|(
name|datanodeInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|datanodeInfos
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|suspectAndDeadNodes
operator|.
name|remove
argument_list|(
name|dfsInputStream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Remove suspect and dead node from suspectAndDeadNodes#dfsInputStream and    * deadNodes.    */
DECL|method|removeDeadNode (DatanodeInfo datanodeInfo)
specifier|private
name|void
name|removeDeadNode
parameter_list|(
name|DatanodeInfo
name|datanodeInfo
parameter_list|)
block|{
name|removeNodeFromDeadNodeDetector
argument_list|(
name|datanodeInfo
argument_list|)
expr_stmt|;
name|removeFromDead
argument_list|(
name|datanodeInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|probeSleep (long time)
specifier|private
specifier|static
name|void
name|probeSleep
parameter_list|(
name|long
name|time
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Schedule probe data node.    */
DECL|class|ProbeScheduler
specifier|static
class|class
name|ProbeScheduler
implements|implements
name|Runnable
block|{
DECL|field|deadNodeDetector
specifier|private
name|DeadNodeDetector
name|deadNodeDetector
decl_stmt|;
DECL|field|type
specifier|private
name|ProbeType
name|type
decl_stmt|;
DECL|method|ProbeScheduler (DeadNodeDetector deadNodeDetector, ProbeType type)
name|ProbeScheduler
parameter_list|(
name|DeadNodeDetector
name|deadNodeDetector
parameter_list|,
name|ProbeType
name|type
parameter_list|)
block|{
name|this
operator|.
name|deadNodeDetector
operator|=
name|deadNodeDetector
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|deadNodeDetector
operator|.
name|scheduleProbe
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|ProbeType
operator|.
name|CHECK_SUSPECT
condition|)
block|{
name|probeSleep
argument_list|(
name|deadNodeDetector
operator|.
name|suspectNodeDetectInterval
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|probeSleep
argument_list|(
name|deadNodeDetector
operator|.
name|deadNodeDetectInterval
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

