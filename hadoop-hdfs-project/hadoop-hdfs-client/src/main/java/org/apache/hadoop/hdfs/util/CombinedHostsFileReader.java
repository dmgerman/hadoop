begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeAdminProperties
import|;
end_import

begin_comment
comment|/**  * Reader support for JSON based datanode configuration, an alternative  * to the exclude/include files configuration.  * The JSON file format is the array of elements where each element  * in the array describes the properties of a datanode. The properties of  * a datanode is defined in {@link DatanodeAdminProperties}. For example,  *  * {"hostName": "host1"}  * {"hostName": "host2", "port": 50, "upgradeDomain": "ud0"}  * {"hostName": "host3", "port": 0, "adminState": "DECOMMISSIONED"}  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|CombinedHostsFileReader
specifier|public
specifier|final
class|class
name|CombinedHostsFileReader
block|{
DECL|method|CombinedHostsFileReader ()
specifier|private
name|CombinedHostsFileReader
parameter_list|()
block|{   }
comment|/**    * Deserialize a set of DatanodeAdminProperties from a json file.    * @param hostsFile the input json file to read from.    * @return the set of DatanodeAdminProperties    * @throws IOException    */
specifier|public
specifier|static
name|Set
argument_list|<
name|DatanodeAdminProperties
argument_list|>
DECL|method|readFile (final String hostsFile)
name|readFile
parameter_list|(
specifier|final
name|String
name|hostsFile
parameter_list|)
throws|throws
name|IOException
block|{
name|HashSet
argument_list|<
name|DatanodeAdminProperties
argument_list|>
name|allDNs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
try|try
init|(
name|Reader
name|input
init|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|hostsFile
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
init|)
block|{
name|Iterator
argument_list|<
name|DatanodeAdminProperties
argument_list|>
name|iterator
init|=
name|mapper
operator|.
name|readValues
argument_list|(
operator|new
name|JsonFactory
argument_list|()
operator|.
name|createJsonParser
argument_list|(
name|input
argument_list|)
argument_list|,
name|DatanodeAdminProperties
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DatanodeAdminProperties
name|properties
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|allDNs
operator|.
name|add
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allDNs
return|;
block|}
block|}
end_class

end_unit

