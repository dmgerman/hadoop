begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonMappingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeAdminProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Reader support for JSON-based datanode configuration, an alternative format  * to the exclude/include files configuration.  * The JSON file format defines the array of elements where each element  * in the array describes the properties of a datanode. The properties of  * a datanode is defined by {@link DatanodeAdminProperties}. For example,  *  * [  *   {"hostName": "host1"},  *   {"hostName": "host2", "port": 50, "upgradeDomain": "ud0"},  *   {"hostName": "host3", "port": 0, "adminState": "DECOMMISSIONED"}  * ]  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|CombinedHostsFileReader
specifier|public
specifier|final
class|class
name|CombinedHostsFileReader
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CombinedHostsFileReader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|CombinedHostsFileReader ()
specifier|private
name|CombinedHostsFileReader
parameter_list|()
block|{   }
DECL|field|REFER_TO_DOC_MSG
specifier|private
specifier|static
specifier|final
name|String
name|REFER_TO_DOC_MSG
init|=
literal|" For the correct JSON"
operator|+
literal|" format please refer to the documentation (https://hadoop.apache"
operator|+
literal|".org/docs/current/hadoop-project-dist/hadoop-hdfs/HdfsDataNodeAd"
operator|+
literal|"minGuide.html#JSON-based_configuration)"
decl_stmt|;
comment|/**    * Deserialize a set of DatanodeAdminProperties from a json file.    * @param hostsFilePath the input json file to read from    * @return the set of DatanodeAdminProperties    * @throws IOException    */
specifier|public
specifier|static
name|DatanodeAdminProperties
index|[]
DECL|method|readFile (final String hostsFilePath)
name|readFile
parameter_list|(
specifier|final
name|String
name|hostsFilePath
parameter_list|)
throws|throws
name|IOException
block|{
name|DatanodeAdminProperties
index|[]
name|allDNs
init|=
operator|new
name|DatanodeAdminProperties
index|[
literal|0
index|]
decl_stmt|;
name|ObjectMapper
name|objectMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|File
name|hostFile
init|=
operator|new
name|File
argument_list|(
name|hostsFilePath
argument_list|)
decl_stmt|;
name|boolean
name|tryOldFormat
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|hostFile
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
init|(
name|Reader
name|input
init|=
operator|new
name|InputStreamReader
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|hostFile
operator|.
name|toPath
argument_list|()
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
init|)
block|{
name|allDNs
operator|=
name|objectMapper
operator|.
name|readValue
argument_list|(
name|input
argument_list|,
name|DatanodeAdminProperties
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JsonMappingException
name|jme
parameter_list|)
block|{
comment|// The old format doesn't have json top-level token to enclose
comment|// the array.
comment|// For backward compatibility, try parsing the old format.
name|tryOldFormat
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|hostsFilePath
operator|+
literal|" is empty."
operator|+
name|REFER_TO_DOC_MSG
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tryOldFormat
condition|)
block|{
name|ObjectReader
name|objectReader
init|=
name|objectMapper
operator|.
name|readerFor
argument_list|(
name|DatanodeAdminProperties
operator|.
name|class
argument_list|)
decl_stmt|;
name|JsonFactory
name|jsonFactory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeAdminProperties
argument_list|>
name|all
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|Reader
name|input
init|=
operator|new
name|InputStreamReader
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|hostsFilePath
argument_list|)
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
init|)
block|{
name|Iterator
argument_list|<
name|DatanodeAdminProperties
argument_list|>
name|iterator
init|=
name|objectReader
operator|.
name|readValues
argument_list|(
name|jsonFactory
operator|.
name|createParser
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DatanodeAdminProperties
name|properties
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|all
operator|.
name|add
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
name|hostsFilePath
operator|+
literal|" has legacy JSON format."
operator|+
name|REFER_TO_DOC_MSG
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|hostsFilePath
operator|+
literal|" has invalid JSON format."
operator|+
name|REFER_TO_DOC_MSG
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|allDNs
operator|=
name|all
operator|.
name|toArray
argument_list|(
operator|new
name|DatanodeAdminProperties
index|[
name|all
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|allDNs
return|;
block|}
block|}
end_class

end_unit

