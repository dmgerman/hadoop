begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_comment
comment|/**  * AddBlockFlag provides hints for new block allocation and placement.  * Users can use this flag to control<em>per DFSOutputStream</em>  * {@see ClientProtocol#addBlock()} behavior.  */
end_comment

begin_enum
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|enum|AddBlockFlag
specifier|public
enum|enum
name|AddBlockFlag
block|{
comment|/**    * Advise that a block replica NOT be written to the local DataNode where    * 'local' means the same host as the client is being run on.    *    * @see CreateFlag#NO_LOCAL_WRITE    */
DECL|enumConstant|NO_LOCAL_WRITE
name|NO_LOCAL_WRITE
argument_list|(
operator|(
name|short
operator|)
literal|0x01
argument_list|)
block|,
comment|/**    * Advise that the first block replica NOT take into account DataNode    * locality. The first block replica should be placed randomly within the    * cluster. Subsequent block replicas should follow DataNode locality rules.    *    * @see CreateFlag#IGNORE_CLIENT_LOCALITY    */
DECL|enumConstant|IGNORE_CLIENT_LOCALITY
name|IGNORE_CLIENT_LOCALITY
argument_list|(
operator|(
name|short
operator|)
literal|0x02
argument_list|)
block|;
DECL|field|mode
specifier|private
specifier|final
name|short
name|mode
decl_stmt|;
DECL|method|AddBlockFlag (short mode)
name|AddBlockFlag
parameter_list|(
name|short
name|mode
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
DECL|method|valueOf (short mode)
specifier|public
specifier|static
name|AddBlockFlag
name|valueOf
parameter_list|(
name|short
name|mode
parameter_list|)
block|{
for|for
control|(
name|AddBlockFlag
name|flag
range|:
name|AddBlockFlag
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|flag
operator|.
name|getMode
argument_list|()
operator|==
name|mode
condition|)
block|{
return|return
name|flag
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getMode ()
specifier|public
name|short
name|getMode
parameter_list|()
block|{
return|return
name|mode
return|;
block|}
block|}
end_enum

end_unit

