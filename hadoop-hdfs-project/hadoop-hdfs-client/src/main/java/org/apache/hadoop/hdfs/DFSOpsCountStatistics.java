begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageStatistics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/**  * This storage statistics tracks how many times each DFS operation was issued.  *  * For each tracked DFS operation, there is a respective entry in the enum  * {@link OpType}. To use, increment the value the {@link DistributedFileSystem}  * and {@link org.apache.hadoop.hdfs.web.WebHdfsFileSystem}.  *  * This class is thread safe, and is generally shared by multiple threads.  */
end_comment

begin_class
DECL|class|DFSOpsCountStatistics
specifier|public
class|class
name|DFSOpsCountStatistics
extends|extends
name|StorageStatistics
block|{
comment|/** This is for counting file system operations. */
DECL|enum|OpType
specifier|public
enum|enum
name|OpType
block|{
DECL|enumConstant|ALLOW_SNAPSHOT
name|ALLOW_SNAPSHOT
argument_list|(
literal|"allowSnapshot"
argument_list|)
block|,
DECL|enumConstant|APPEND
name|APPEND
argument_list|(
literal|"append"
argument_list|)
block|,
DECL|enumConstant|CONCAT
name|CONCAT
argument_list|(
literal|"concat"
argument_list|)
block|,
DECL|enumConstant|COPY_FROM_LOCAL_FILE
name|COPY_FROM_LOCAL_FILE
argument_list|(
literal|"copyFromLocalFile"
argument_list|)
block|,
DECL|enumConstant|CREATE
name|CREATE
argument_list|(
literal|"create"
argument_list|)
block|,
DECL|enumConstant|CREATE_NON_RECURSIVE
name|CREATE_NON_RECURSIVE
argument_list|(
literal|"createNonRecursive"
argument_list|)
block|,
DECL|enumConstant|CREATE_SNAPSHOT
name|CREATE_SNAPSHOT
argument_list|(
literal|"createSnapshot"
argument_list|)
block|,
DECL|enumConstant|CREATE_SYM_LINK
name|CREATE_SYM_LINK
argument_list|(
literal|"createSymlink"
argument_list|)
block|,
DECL|enumConstant|DELETE
name|DELETE
argument_list|(
literal|"delete"
argument_list|)
block|,
DECL|enumConstant|DELETE_SNAPSHOT
name|DELETE_SNAPSHOT
argument_list|(
literal|"deleteSnapshot"
argument_list|)
block|,
DECL|enumConstant|DISALLOW_SNAPSHOT
name|DISALLOW_SNAPSHOT
argument_list|(
literal|"disallowSnapshot"
argument_list|)
block|,
DECL|enumConstant|EXISTS
name|EXISTS
argument_list|(
literal|"exists"
argument_list|)
block|,
DECL|enumConstant|GET_BYTES_WITH_FUTURE_GS
name|GET_BYTES_WITH_FUTURE_GS
argument_list|(
literal|"getBytesWithFutureGenerationStamps"
argument_list|)
block|,
DECL|enumConstant|GET_CONTENT_SUMMARY
name|GET_CONTENT_SUMMARY
argument_list|(
literal|"getContentSummary"
argument_list|)
block|,
DECL|enumConstant|GET_FILE_BLOCK_LOCATIONS
name|GET_FILE_BLOCK_LOCATIONS
argument_list|(
literal|"getFileBlockLocations"
argument_list|)
block|,
DECL|enumConstant|GET_FILE_CHECKSUM
name|GET_FILE_CHECKSUM
argument_list|(
literal|"getFileChecksum"
argument_list|)
block|,
DECL|enumConstant|GET_FILE_LINK_STATUS
name|GET_FILE_LINK_STATUS
argument_list|(
literal|"getFileLinkStatus"
argument_list|)
block|,
DECL|enumConstant|GET_FILE_STATUS
name|GET_FILE_STATUS
argument_list|(
literal|"getFileStatus"
argument_list|)
block|,
DECL|enumConstant|GET_LINK_TARGET
name|GET_LINK_TARGET
argument_list|(
literal|"getLinkTarget"
argument_list|)
block|,
DECL|enumConstant|GET_QUOTA_USAGE
name|GET_QUOTA_USAGE
argument_list|(
literal|"getQuotaUsage"
argument_list|)
block|,
DECL|enumConstant|GET_STATUS
name|GET_STATUS
argument_list|(
literal|"getStatus"
argument_list|)
block|,
DECL|enumConstant|GET_STORAGE_POLICIES
name|GET_STORAGE_POLICIES
argument_list|(
literal|"getStoragePolicies"
argument_list|)
block|,
DECL|enumConstant|GET_STORAGE_POLICY
name|GET_STORAGE_POLICY
argument_list|(
literal|"getStoragePolicy"
argument_list|)
block|,
DECL|enumConstant|GET_XATTR
name|GET_XATTR
argument_list|(
literal|"getXAttr"
argument_list|)
block|,
DECL|enumConstant|LIST_LOCATED_STATUS
name|LIST_LOCATED_STATUS
argument_list|(
literal|"listLocatedStatus"
argument_list|)
block|,
DECL|enumConstant|LIST_STATUS
name|LIST_STATUS
argument_list|(
literal|"listStatus"
argument_list|)
block|,
DECL|enumConstant|MKDIRS
name|MKDIRS
argument_list|(
literal|"mkdirs"
argument_list|)
block|,
DECL|enumConstant|MODIFY_ACL_ENTRIES
name|MODIFY_ACL_ENTRIES
argument_list|(
literal|"modifyAclEntries"
argument_list|)
block|,
DECL|enumConstant|OPEN
name|OPEN
argument_list|(
literal|"open"
argument_list|)
block|,
DECL|enumConstant|PRIMITIVE_CREATE
name|PRIMITIVE_CREATE
argument_list|(
literal|"primitiveCreate"
argument_list|)
block|,
DECL|enumConstant|PRIMITIVE_MKDIR
name|PRIMITIVE_MKDIR
argument_list|(
literal|"primitiveMkdir"
argument_list|)
block|,
DECL|enumConstant|REMOVE_ACL
name|REMOVE_ACL
argument_list|(
literal|"removeAcl"
argument_list|)
block|,
DECL|enumConstant|REMOVE_ACL_ENTRIES
name|REMOVE_ACL_ENTRIES
argument_list|(
literal|"removeAclEntries"
argument_list|)
block|,
DECL|enumConstant|REMOVE_DEFAULT_ACL
name|REMOVE_DEFAULT_ACL
argument_list|(
literal|"removeDefaultAcl"
argument_list|)
block|,
DECL|enumConstant|REMOVE_XATTR
name|REMOVE_XATTR
argument_list|(
literal|"removeXAttr"
argument_list|)
block|,
DECL|enumConstant|RENAME
name|RENAME
argument_list|(
literal|"rename"
argument_list|)
block|,
DECL|enumConstant|RENAME_SNAPSHOT
name|RENAME_SNAPSHOT
argument_list|(
literal|"renameSnapshot"
argument_list|)
block|,
DECL|enumConstant|RESOLVE_LINK
name|RESOLVE_LINK
argument_list|(
literal|"resolveLink"
argument_list|)
block|,
DECL|enumConstant|SET_ACL
name|SET_ACL
argument_list|(
literal|"setAcl"
argument_list|)
block|,
DECL|enumConstant|SET_OWNER
name|SET_OWNER
argument_list|(
literal|"setOwner"
argument_list|)
block|,
DECL|enumConstant|SET_PERMISSION
name|SET_PERMISSION
argument_list|(
literal|"setPermission"
argument_list|)
block|,
DECL|enumConstant|SET_REPLICATION
name|SET_REPLICATION
argument_list|(
literal|"setReplication"
argument_list|)
block|,
DECL|enumConstant|SET_STORAGE_POLICY
name|SET_STORAGE_POLICY
argument_list|(
literal|"setStoragePolicy"
argument_list|)
block|,
DECL|enumConstant|SET_TIMES
name|SET_TIMES
argument_list|(
literal|"setTimes"
argument_list|)
block|,
DECL|enumConstant|SET_XATTR
name|SET_XATTR
argument_list|(
literal|"setXAttr"
argument_list|)
block|,
DECL|enumConstant|TRUNCATE
name|TRUNCATE
argument_list|(
literal|"truncate"
argument_list|)
block|,
DECL|enumConstant|UNSET_STORAGE_POLICY
name|UNSET_STORAGE_POLICY
argument_list|(
literal|"unsetStoragePolicy"
argument_list|)
block|;
DECL|field|symbol
specifier|private
specifier|final
name|String
name|symbol
decl_stmt|;
DECL|method|OpType (String symbol)
name|OpType
parameter_list|(
name|String
name|symbol
parameter_list|)
block|{
name|this
operator|.
name|symbol
operator|=
name|symbol
expr_stmt|;
block|}
DECL|method|getSymbol ()
specifier|public
name|String
name|getSymbol
parameter_list|()
block|{
return|return
name|symbol
return|;
block|}
DECL|method|fromSymbol (String symbol)
specifier|public
specifier|static
name|OpType
name|fromSymbol
parameter_list|(
name|String
name|symbol
parameter_list|)
block|{
if|if
condition|(
name|symbol
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|OpType
name|opType
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|opType
operator|.
name|getSymbol
argument_list|()
operator|.
name|equals
argument_list|(
name|symbol
argument_list|)
condition|)
block|{
return|return
name|opType
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"DFSOpsCountStatistics"
decl_stmt|;
DECL|field|opsCount
specifier|private
specifier|final
name|Map
argument_list|<
name|OpType
argument_list|,
name|AtomicLong
argument_list|>
name|opsCount
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|OpType
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|DFSOpsCountStatistics ()
specifier|public
name|DFSOpsCountStatistics
parameter_list|()
block|{
name|super
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
for|for
control|(
name|OpType
name|opType
range|:
name|OpType
operator|.
name|values
argument_list|()
control|)
block|{
name|opsCount
operator|.
name|put
argument_list|(
name|opType
argument_list|,
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|incrementOpCounter (OpType op)
specifier|public
name|void
name|incrementOpCounter
parameter_list|(
name|OpType
name|op
parameter_list|)
block|{
name|opsCount
operator|.
name|get
argument_list|(
name|op
argument_list|)
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|class|LongIterator
specifier|private
class|class
name|LongIterator
implements|implements
name|Iterator
argument_list|<
name|LongStatistic
argument_list|>
block|{
DECL|field|iterator
specifier|private
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|OpType
argument_list|,
name|AtomicLong
argument_list|>
argument_list|>
name|iterator
init|=
name|opsCount
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|LongStatistic
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
specifier|final
name|Entry
argument_list|<
name|OpType
argument_list|,
name|AtomicLong
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
operator|new
name|LongStatistic
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSymbol
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLongStatistics ()
specifier|public
name|Iterator
argument_list|<
name|LongStatistic
argument_list|>
name|getLongStatistics
parameter_list|()
block|{
return|return
operator|new
name|LongIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLong (String key)
specifier|public
name|Long
name|getLong
parameter_list|(
name|String
name|key
parameter_list|)
block|{
specifier|final
name|OpType
name|type
init|=
name|OpType
operator|.
name|fromSymbol
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|type
operator|==
literal|null
condition|?
literal|null
else|:
name|opsCount
operator|.
name|get
argument_list|(
name|type
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isTracked (String key)
specifier|public
name|boolean
name|isTracked
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|OpType
operator|.
name|fromSymbol
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

