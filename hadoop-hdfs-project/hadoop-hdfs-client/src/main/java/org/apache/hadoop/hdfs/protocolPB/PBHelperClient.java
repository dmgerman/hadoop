begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Shorts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CipherOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CipherSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|AddBlockFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CacheFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileEncryptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsServerDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|QuotaUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|inotify
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|inotify
operator|.
name|EventBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|inotify
operator|.
name|EventBatchList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CorruptFileBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|AdminStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeLocalInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|EncryptionZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FsPermissionExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|RollingUpgradeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsLocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RollingUpgradeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RollingUpgradeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffReportEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshottableDirectoryStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|AclProtos
operator|.
name|AclEntryProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|AclProtos
operator|.
name|AclEntryProto
operator|.
name|AclEntryScopeProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|AclProtos
operator|.
name|AclEntryProto
operator|.
name|AclEntryTypeProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|AclProtos
operator|.
name|AclEntryProto
operator|.
name|FsActionProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|AclProtos
operator|.
name|AclStatusProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|AclProtos
operator|.
name|GetAclStatusResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|AddBlockFlagProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|CacheDirectiveEntryProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|CacheDirectiveInfoExpirationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|CacheDirectiveInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|CacheDirectiveStatsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|CacheFlagProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|CachePoolEntryProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|CachePoolInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|CachePoolStatsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|CreateFlagProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|DatanodeReportTypeProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|DatanodeStorageReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|GetEditsFromTxidResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|GetFsStatsResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|RollingUpgradeActionProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|RollingUpgradeInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|SafeModeActionProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|ShortCircuitShmIdProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|ShortCircuitShmSlotProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|EncryptionZonesProtos
operator|.
name|EncryptionZoneProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlockStoragePolicyProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|ContentSummaryProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|CorruptFileBlocksProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|CryptoProtocolVersionProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|DataEncryptionKeyProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|DatanodeIDProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|DatanodeInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|DatanodeInfoProto
operator|.
name|AdminState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|DatanodeInfosProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|DatanodeLocalInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|DatanodeStorageProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|DatanodeStorageProto
operator|.
name|StorageState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|DirectoryListingProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|ExtendedBlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|ErasureCodingPolicyProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|FsPermissionProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|FsServerDefaultsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|HdfsFileStatusProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|HdfsFileStatusProto
operator|.
name|FileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|LocatedBlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|LocatedBlockProto
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|LocatedBlocksProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|QuotaUsageProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|RollingUpgradeStatusProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|SnapshotDiffReportEntryProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|SnapshotDiffReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|SnapshottableDirectoryListingProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|SnapshottableDirectoryStatusProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|StorageReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|StorageTypeProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|StorageTypesProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|InotifyProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|XAttrProtos
operator|.
name|GetXAttrsResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|XAttrProtos
operator|.
name|ListXAttrsResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|XAttrProtos
operator|.
name|XAttrProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|XAttrProtos
operator|.
name|XAttrProto
operator|.
name|XAttrNamespaceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|XAttrProtos
operator|.
name|XAttrSetFlagProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|DataEncryptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
operator|.
name|ShortCircuitShm
operator|.
name|ShmId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
operator|.
name|ShortCircuitShm
operator|.
name|SlotId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|EnumSetWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|proto
operator|.
name|SecurityProtos
operator|.
name|TokenProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LimitInputStream
import|;
end_import

begin_comment
comment|/**  * Utilities for converting protobuf classes to and from hdfs-client side  * implementation classes and other helper utilities to help in dealing with  * protobuf.  *  * Note that when converting from an internal type to protobuf type, the  * converter never return null for protobuf type. The check for internal type  * being null must be done before calling the convert() method.  */
end_comment

begin_class
DECL|class|PBHelperClient
specifier|public
class|class
name|PBHelperClient
block|{
DECL|field|XATTR_NAMESPACE_VALUES
specifier|private
specifier|static
specifier|final
name|XAttr
operator|.
name|NameSpace
index|[]
name|XATTR_NAMESPACE_VALUES
init|=
name|XAttr
operator|.
name|NameSpace
operator|.
name|values
argument_list|()
decl_stmt|;
DECL|field|ACL_ENTRY_TYPE_VALUES
specifier|private
specifier|static
specifier|final
name|AclEntryType
index|[]
name|ACL_ENTRY_TYPE_VALUES
init|=
name|AclEntryType
operator|.
name|values
argument_list|()
decl_stmt|;
DECL|field|ACL_ENTRY_SCOPE_VALUES
specifier|private
specifier|static
specifier|final
name|AclEntryScope
index|[]
name|ACL_ENTRY_SCOPE_VALUES
init|=
name|AclEntryScope
operator|.
name|values
argument_list|()
decl_stmt|;
DECL|field|FSACTION_VALUES
specifier|private
specifier|static
specifier|final
name|FsAction
index|[]
name|FSACTION_VALUES
init|=
name|FsAction
operator|.
name|values
argument_list|()
decl_stmt|;
DECL|method|PBHelperClient ()
specifier|private
name|PBHelperClient
parameter_list|()
block|{
comment|/** Hidden constructor */
block|}
DECL|method|getByteString (byte[] bytes)
specifier|public
specifier|static
name|ByteString
name|getByteString
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
comment|// return singleton to reduce object allocation
return|return
operator|(
name|bytes
operator|.
name|length
operator|==
literal|0
operator|)
condition|?
name|ByteString
operator|.
name|EMPTY
else|:
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|bytes
argument_list|)
return|;
block|}
DECL|method|convert (ShortCircuitShmIdProto shmId)
specifier|public
specifier|static
name|ShmId
name|convert
parameter_list|(
name|ShortCircuitShmIdProto
name|shmId
parameter_list|)
block|{
return|return
operator|new
name|ShmId
argument_list|(
name|shmId
operator|.
name|getHi
argument_list|()
argument_list|,
name|shmId
operator|.
name|getLo
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (HdfsProtos.ChecksumTypeProto type)
specifier|public
specifier|static
name|DataChecksum
operator|.
name|Type
name|convert
parameter_list|(
name|HdfsProtos
operator|.
name|ChecksumTypeProto
name|type
parameter_list|)
block|{
return|return
name|DataChecksum
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|type
operator|.
name|getNumber
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (DataChecksum.Type type)
specifier|public
specifier|static
name|HdfsProtos
operator|.
name|ChecksumTypeProto
name|convert
parameter_list|(
name|DataChecksum
operator|.
name|Type
name|type
parameter_list|)
block|{
return|return
name|HdfsProtos
operator|.
name|ChecksumTypeProto
operator|.
name|valueOf
argument_list|(
name|type
operator|.
name|id
argument_list|)
return|;
block|}
DECL|method|convert (final ExtendedBlock b)
specifier|public
specifier|static
name|ExtendedBlockProto
name|convert
parameter_list|(
specifier|final
name|ExtendedBlock
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|ExtendedBlockProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPoolId
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
operator|.
name|setBlockId
argument_list|(
name|b
operator|.
name|getBlockId
argument_list|()
argument_list|)
operator|.
name|setNumBytes
argument_list|(
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
operator|.
name|setGenerationStamp
argument_list|(
name|b
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (Token<?> tok)
specifier|public
specifier|static
name|TokenProto
name|convert
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|tok
parameter_list|)
block|{
return|return
name|TokenProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setIdentifier
argument_list|(
name|getByteString
argument_list|(
name|tok
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setPassword
argument_list|(
name|getByteString
argument_list|(
name|tok
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setKind
argument_list|(
name|tok
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setService
argument_list|(
name|tok
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (ShmId shmId)
specifier|public
specifier|static
name|ShortCircuitShmIdProto
name|convert
parameter_list|(
name|ShmId
name|shmId
parameter_list|)
block|{
return|return
name|ShortCircuitShmIdProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setHi
argument_list|(
name|shmId
operator|.
name|getHi
argument_list|()
argument_list|)
operator|.
name|setLo
argument_list|(
name|shmId
operator|.
name|getLo
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (SlotId slotId)
specifier|public
specifier|static
name|ShortCircuitShmSlotProto
name|convert
parameter_list|(
name|SlotId
name|slotId
parameter_list|)
block|{
return|return
name|ShortCircuitShmSlotProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setShmId
argument_list|(
name|convert
argument_list|(
name|slotId
operator|.
name|getShmId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setSlotIdx
argument_list|(
name|slotId
operator|.
name|getSlotIdx
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (DatanodeID dn)
specifier|public
specifier|static
name|DatanodeIDProto
name|convert
parameter_list|(
name|DatanodeID
name|dn
parameter_list|)
block|{
comment|// For wire compatibility with older versions we transmit the StorageID
comment|// which is the same as the DatanodeUuid. Since StorageID is a required
comment|// field we pass the empty string if the DatanodeUuid is not yet known.
return|return
name|DatanodeIDProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setIpAddr
argument_list|(
name|dn
operator|.
name|getIpAddr
argument_list|()
argument_list|)
operator|.
name|setHostName
argument_list|(
name|dn
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|setXferPort
argument_list|(
name|dn
operator|.
name|getXferPort
argument_list|()
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
operator|!=
literal|null
condition|?
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
else|:
literal|""
argument_list|)
operator|.
name|setInfoPort
argument_list|(
name|dn
operator|.
name|getInfoPort
argument_list|()
argument_list|)
operator|.
name|setInfoSecurePort
argument_list|(
name|dn
operator|.
name|getInfoSecurePort
argument_list|()
argument_list|)
operator|.
name|setIpcPort
argument_list|(
name|dn
operator|.
name|getIpcPort
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert ( final DatanodeInfo.AdminStates inAs)
specifier|public
specifier|static
name|DatanodeInfoProto
operator|.
name|AdminState
name|convert
parameter_list|(
specifier|final
name|DatanodeInfo
operator|.
name|AdminStates
name|inAs
parameter_list|)
block|{
switch|switch
condition|(
name|inAs
condition|)
block|{
case|case
name|NORMAL
case|:
return|return
name|DatanodeInfoProto
operator|.
name|AdminState
operator|.
name|NORMAL
return|;
case|case
name|DECOMMISSION_INPROGRESS
case|:
return|return
name|DatanodeInfoProto
operator|.
name|AdminState
operator|.
name|DECOMMISSION_INPROGRESS
return|;
case|case
name|DECOMMISSIONED
case|:
return|return
name|DatanodeInfoProto
operator|.
name|AdminState
operator|.
name|DECOMMISSIONED
return|;
default|default:
return|return
name|DatanodeInfoProto
operator|.
name|AdminState
operator|.
name|NORMAL
return|;
block|}
block|}
DECL|method|convert (DatanodeInfo info)
specifier|public
specifier|static
name|DatanodeInfoProto
name|convert
parameter_list|(
name|DatanodeInfo
name|info
parameter_list|)
block|{
name|DatanodeInfoProto
operator|.
name|Builder
name|builder
init|=
name|DatanodeInfoProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getNetworkLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setLocation
argument_list|(
name|info
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getUpgradeDomain
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setUpgradeDomain
argument_list|(
name|info
operator|.
name|getUpgradeDomain
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setId
argument_list|(
name|convert
argument_list|(
operator|(
name|DatanodeID
operator|)
name|info
argument_list|)
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|info
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|.
name|setDfsUsed
argument_list|(
name|info
operator|.
name|getDfsUsed
argument_list|()
argument_list|)
operator|.
name|setRemaining
argument_list|(
name|info
operator|.
name|getRemaining
argument_list|()
argument_list|)
operator|.
name|setBlockPoolUsed
argument_list|(
name|info
operator|.
name|getBlockPoolUsed
argument_list|()
argument_list|)
operator|.
name|setCacheCapacity
argument_list|(
name|info
operator|.
name|getCacheCapacity
argument_list|()
argument_list|)
operator|.
name|setCacheUsed
argument_list|(
name|info
operator|.
name|getCacheUsed
argument_list|()
argument_list|)
operator|.
name|setLastUpdate
argument_list|(
name|info
operator|.
name|getLastUpdate
argument_list|()
argument_list|)
operator|.
name|setLastUpdateMonotonic
argument_list|(
name|info
operator|.
name|getLastUpdateMonotonic
argument_list|()
argument_list|)
operator|.
name|setXceiverCount
argument_list|(
name|info
operator|.
name|getXceiverCount
argument_list|()
argument_list|)
operator|.
name|setAdminState
argument_list|(
name|convert
argument_list|(
name|info
operator|.
name|getAdminState
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert ( DatanodeInfo[] dnInfos)
specifier|public
specifier|static
name|List
argument_list|<
name|?
extends|extends
name|HdfsProtos
operator|.
name|DatanodeInfoProto
argument_list|>
name|convert
parameter_list|(
name|DatanodeInfo
index|[]
name|dnInfos
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|dnInfos
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Copy from {@code dnInfos} to a target of list of same size starting at    * {@code startIdx}.    */
DECL|method|convert ( DatanodeInfo[] dnInfos, int startIdx)
specifier|public
specifier|static
name|List
argument_list|<
name|?
extends|extends
name|HdfsProtos
operator|.
name|DatanodeInfoProto
argument_list|>
name|convert
parameter_list|(
name|DatanodeInfo
index|[]
name|dnInfos
parameter_list|,
name|int
name|startIdx
parameter_list|)
block|{
if|if
condition|(
name|dnInfos
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ArrayList
argument_list|<
name|HdfsProtos
operator|.
name|DatanodeInfoProto
argument_list|>
name|protos
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|dnInfos
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startIdx
init|;
name|i
operator|<
name|dnInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|protos
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|dnInfos
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|protos
return|;
block|}
DECL|method|convert (boolean[] targetPinnings, int idx)
specifier|public
specifier|static
name|List
argument_list|<
name|Boolean
argument_list|>
name|convert
parameter_list|(
name|boolean
index|[]
name|targetPinnings
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|List
argument_list|<
name|Boolean
argument_list|>
name|pinnings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetPinnings
operator|==
literal|null
condition|)
block|{
name|pinnings
operator|.
name|add
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
init|;
name|idx
operator|<
name|targetPinnings
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|pinnings
operator|.
name|add
argument_list|(
name|targetPinnings
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pinnings
return|;
block|}
DECL|method|convert (ExtendedBlockProto eb)
specifier|public
specifier|static
name|ExtendedBlock
name|convert
parameter_list|(
name|ExtendedBlockProto
name|eb
parameter_list|)
block|{
if|if
condition|(
name|eb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|ExtendedBlock
argument_list|(
name|eb
operator|.
name|getPoolId
argument_list|()
argument_list|,
name|eb
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|eb
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|eb
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (DatanodeLocalInfoProto proto)
specifier|public
specifier|static
name|DatanodeLocalInfo
name|convert
parameter_list|(
name|DatanodeLocalInfoProto
name|proto
parameter_list|)
block|{
return|return
operator|new
name|DatanodeLocalInfo
argument_list|(
name|proto
operator|.
name|getSoftwareVersion
argument_list|()
argument_list|,
name|proto
operator|.
name|getConfigVersion
argument_list|()
argument_list|,
name|proto
operator|.
name|getUptime
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convertDatanodeInfo (DatanodeInfo di)
specifier|static
specifier|public
name|DatanodeInfoProto
name|convertDatanodeInfo
parameter_list|(
name|DatanodeInfo
name|di
parameter_list|)
block|{
if|if
condition|(
name|di
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|convert
argument_list|(
name|di
argument_list|)
return|;
block|}
DECL|method|convertStorageType (StorageType type)
specifier|public
specifier|static
name|StorageTypeProto
name|convertStorageType
parameter_list|(
name|StorageType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DISK
case|:
return|return
name|StorageTypeProto
operator|.
name|DISK
return|;
case|case
name|SSD
case|:
return|return
name|StorageTypeProto
operator|.
name|SSD
return|;
case|case
name|ARCHIVE
case|:
return|return
name|StorageTypeProto
operator|.
name|ARCHIVE
return|;
case|case
name|RAM_DISK
case|:
return|return
name|StorageTypeProto
operator|.
name|RAM_DISK
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"BUG: StorageType not found, type="
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
DECL|method|convertStorageType (StorageTypeProto type)
specifier|public
specifier|static
name|StorageType
name|convertStorageType
parameter_list|(
name|StorageTypeProto
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DISK
case|:
return|return
name|StorageType
operator|.
name|DISK
return|;
case|case
name|SSD
case|:
return|return
name|StorageType
operator|.
name|SSD
return|;
case|case
name|ARCHIVE
case|:
return|return
name|StorageType
operator|.
name|ARCHIVE
return|;
case|case
name|RAM_DISK
case|:
return|return
name|StorageType
operator|.
name|RAM_DISK
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"BUG: StorageTypeProto not found, type="
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
DECL|method|convertStorageTypes ( StorageType[] types)
specifier|public
specifier|static
name|List
argument_list|<
name|StorageTypeProto
argument_list|>
name|convertStorageTypes
parameter_list|(
name|StorageType
index|[]
name|types
parameter_list|)
block|{
return|return
name|convertStorageTypes
argument_list|(
name|types
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|convertStorageTypes ( StorageType[] types, int startIdx)
specifier|public
specifier|static
name|List
argument_list|<
name|StorageTypeProto
argument_list|>
name|convertStorageTypes
parameter_list|(
name|StorageType
index|[]
name|types
parameter_list|,
name|int
name|startIdx
parameter_list|)
block|{
if|if
condition|(
name|types
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|List
argument_list|<
name|StorageTypeProto
argument_list|>
name|protos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|types
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startIdx
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|protos
operator|.
name|add
argument_list|(
name|convertStorageType
argument_list|(
name|types
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|protos
return|;
block|}
DECL|method|vintPrefixed (final InputStream input)
specifier|public
specifier|static
name|InputStream
name|vintPrefixed
parameter_list|(
specifier|final
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|firstByte
init|=
name|input
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstByte
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Unexpected EOF while trying to read response from server"
argument_list|)
throw|;
block|}
name|int
name|size
init|=
name|CodedInputStream
operator|.
name|readRawVarint32
argument_list|(
name|firstByte
argument_list|,
name|input
argument_list|)
decl_stmt|;
assert|assert
name|size
operator|>=
literal|0
assert|;
return|return
operator|new
name|LimitInputStream
argument_list|(
name|input
argument_list|,
name|size
argument_list|)
return|;
block|}
DECL|method|convert (HdfsProtos.CipherOptionProto proto)
specifier|public
specifier|static
name|CipherOption
name|convert
parameter_list|(
name|HdfsProtos
operator|.
name|CipherOptionProto
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|!=
literal|null
condition|)
block|{
name|CipherSuite
name|suite
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|getSuite
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|suite
operator|=
name|convert
argument_list|(
name|proto
operator|.
name|getSuite
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|inKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|getInKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|inKey
operator|=
name|proto
operator|.
name|getInKey
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|inIv
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|getInIv
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|inIv
operator|=
name|proto
operator|.
name|getInIv
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|outKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|getOutKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|outKey
operator|=
name|proto
operator|.
name|getOutKey
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|outIv
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|getOutIv
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|outIv
operator|=
name|proto
operator|.
name|getOutIv
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|CipherOption
argument_list|(
name|suite
argument_list|,
name|inKey
argument_list|,
name|inIv
argument_list|,
name|outKey
argument_list|,
name|outIv
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|convert (HdfsProtos.CipherSuiteProto proto)
specifier|public
specifier|static
name|CipherSuite
name|convert
parameter_list|(
name|HdfsProtos
operator|.
name|CipherSuiteProto
name|proto
parameter_list|)
block|{
switch|switch
condition|(
name|proto
condition|)
block|{
case|case
name|AES_CTR_NOPADDING
case|:
return|return
name|CipherSuite
operator|.
name|AES_CTR_NOPADDING
return|;
default|default:
comment|// Set to UNKNOWN and stash the unknown enum value
name|CipherSuite
name|suite
init|=
name|CipherSuite
operator|.
name|UNKNOWN
decl_stmt|;
name|suite
operator|.
name|setUnknownValue
argument_list|(
name|proto
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
block|}
DECL|method|convert (CipherOption option)
specifier|public
specifier|static
name|HdfsProtos
operator|.
name|CipherOptionProto
name|convert
parameter_list|(
name|CipherOption
name|option
parameter_list|)
block|{
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|HdfsProtos
operator|.
name|CipherOptionProto
operator|.
name|Builder
name|builder
init|=
name|HdfsProtos
operator|.
name|CipherOptionProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|option
operator|.
name|getCipherSuite
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setSuite
argument_list|(
name|convert
argument_list|(
name|option
operator|.
name|getCipherSuite
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|.
name|getInKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setInKey
argument_list|(
name|getByteString
argument_list|(
name|option
operator|.
name|getInKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|.
name|getInIv
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setInIv
argument_list|(
name|getByteString
argument_list|(
name|option
operator|.
name|getInIv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|.
name|getOutKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setOutKey
argument_list|(
name|getByteString
argument_list|(
name|option
operator|.
name|getOutKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|.
name|getOutIv
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setOutIv
argument_list|(
name|getByteString
argument_list|(
name|option
operator|.
name|getOutIv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|convert (CipherSuite suite)
specifier|public
specifier|static
name|HdfsProtos
operator|.
name|CipherSuiteProto
name|convert
parameter_list|(
name|CipherSuite
name|suite
parameter_list|)
block|{
switch|switch
condition|(
name|suite
condition|)
block|{
case|case
name|UNKNOWN
case|:
return|return
name|HdfsProtos
operator|.
name|CipherSuiteProto
operator|.
name|UNKNOWN
return|;
case|case
name|AES_CTR_NOPADDING
case|:
return|return
name|HdfsProtos
operator|.
name|CipherSuiteProto
operator|.
name|AES_CTR_NOPADDING
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
DECL|method|convertCipherOptions ( List<CipherOption> options)
specifier|public
specifier|static
name|List
argument_list|<
name|HdfsProtos
operator|.
name|CipherOptionProto
argument_list|>
name|convertCipherOptions
parameter_list|(
name|List
argument_list|<
name|CipherOption
argument_list|>
name|options
parameter_list|)
block|{
if|if
condition|(
name|options
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|HdfsProtos
operator|.
name|CipherOptionProto
argument_list|>
name|protos
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|options
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CipherOption
name|option
range|:
name|options
control|)
block|{
name|protos
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|option
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|protos
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|convertCipherOptionProtos ( List<HdfsProtos.CipherOptionProto> protos)
specifier|public
specifier|static
name|List
argument_list|<
name|CipherOption
argument_list|>
name|convertCipherOptionProtos
parameter_list|(
name|List
argument_list|<
name|HdfsProtos
operator|.
name|CipherOptionProto
argument_list|>
name|protos
parameter_list|)
block|{
if|if
condition|(
name|protos
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|CipherOption
argument_list|>
name|options
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|protos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HdfsProtos
operator|.
name|CipherOptionProto
name|proto
range|:
name|protos
control|)
block|{
name|options
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|proto
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|options
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|convertLocatedBlockProto (LocatedBlockProto proto)
specifier|public
specifier|static
name|LocatedBlock
name|convertLocatedBlockProto
parameter_list|(
name|LocatedBlockProto
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|DatanodeInfoProto
argument_list|>
name|locs
init|=
name|proto
operator|.
name|getLocsList
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|targets
init|=
operator|new
name|DatanodeInfo
index|[
name|locs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|targets
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|locs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|StorageType
index|[]
name|storageTypes
init|=
name|convertStorageTypes
argument_list|(
name|proto
operator|.
name|getStorageTypesList
argument_list|()
argument_list|,
name|locs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|storageIDsCount
init|=
name|proto
operator|.
name|getStorageIDsCount
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|storageIDs
decl_stmt|;
if|if
condition|(
name|storageIDsCount
operator|==
literal|0
condition|)
block|{
name|storageIDs
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|storageIDsCount
operator|==
name|locs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|storageIDs
operator|=
name|proto
operator|.
name|getStorageIDsList
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|storageIDsCount
index|]
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|indices
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasBlockIndices
argument_list|()
condition|)
block|{
name|indices
operator|=
name|proto
operator|.
name|getBlockIndices
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
comment|// Set values from the isCached list, re-using references from loc
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|cachedLocs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|locs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|isCachedList
init|=
name|proto
operator|.
name|getIsCachedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|isCachedList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isCachedList
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|cachedLocs
operator|.
name|add
argument_list|(
name|targets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|LocatedBlock
name|lb
decl_stmt|;
if|if
condition|(
name|indices
operator|==
literal|null
condition|)
block|{
name|lb
operator|=
operator|new
name|LocatedBlock
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getB
argument_list|()
argument_list|)
argument_list|,
name|targets
argument_list|,
name|storageIDs
argument_list|,
name|storageTypes
argument_list|,
name|proto
operator|.
name|getOffset
argument_list|()
argument_list|,
name|proto
operator|.
name|getCorrupt
argument_list|()
argument_list|,
name|cachedLocs
operator|.
name|toArray
argument_list|(
operator|new
name|DatanodeInfo
index|[
name|cachedLocs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lb
operator|=
operator|new
name|LocatedStripedBlock
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getB
argument_list|()
argument_list|)
argument_list|,
name|targets
argument_list|,
name|storageIDs
argument_list|,
name|storageTypes
argument_list|,
name|indices
argument_list|,
name|proto
operator|.
name|getOffset
argument_list|()
argument_list|,
name|proto
operator|.
name|getCorrupt
argument_list|()
argument_list|,
name|cachedLocs
operator|.
name|toArray
argument_list|(
operator|new
name|DatanodeInfo
index|[
name|cachedLocs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TokenProto
argument_list|>
name|tokenProtos
init|=
name|proto
operator|.
name|getBlockTokensList
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
index|[]
name|blockTokens
init|=
name|convertTokens
argument_list|(
name|tokenProtos
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LocatedStripedBlock
operator|)
name|lb
operator|)
operator|.
name|setBlockTokens
argument_list|(
name|blockTokens
argument_list|)
expr_stmt|;
block|}
name|lb
operator|.
name|setBlockToken
argument_list|(
name|convert
argument_list|(
name|proto
operator|.
name|getBlockToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|lb
return|;
block|}
DECL|method|convertTokens ( List<TokenProto> tokenProtos)
specifier|static
specifier|public
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
index|[]
name|convertTokens
parameter_list|(
name|List
argument_list|<
name|TokenProto
argument_list|>
name|tokenProtos
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
index|[]
name|blockTokens
init|=
operator|new
name|Token
index|[
name|tokenProtos
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockTokens
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|blockTokens
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|tokenProtos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|blockTokens
return|;
block|}
DECL|method|convert (DatanodeInfoProto di)
specifier|static
specifier|public
name|DatanodeInfo
name|convert
parameter_list|(
name|DatanodeInfoProto
name|di
parameter_list|)
block|{
if|if
condition|(
name|di
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|DatanodeInfo
argument_list|(
name|convert
argument_list|(
name|di
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|di
operator|.
name|hasLocation
argument_list|()
condition|?
name|di
operator|.
name|getLocation
argument_list|()
else|:
literal|null
argument_list|,
name|di
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|di
operator|.
name|getDfsUsed
argument_list|()
argument_list|,
name|di
operator|.
name|getRemaining
argument_list|()
argument_list|,
name|di
operator|.
name|getBlockPoolUsed
argument_list|()
argument_list|,
name|di
operator|.
name|getCacheCapacity
argument_list|()
argument_list|,
name|di
operator|.
name|getCacheUsed
argument_list|()
argument_list|,
name|di
operator|.
name|getLastUpdate
argument_list|()
argument_list|,
name|di
operator|.
name|getLastUpdateMonotonic
argument_list|()
argument_list|,
name|di
operator|.
name|getXceiverCount
argument_list|()
argument_list|,
name|convert
argument_list|(
name|di
operator|.
name|getAdminState
argument_list|()
argument_list|)
argument_list|,
name|di
operator|.
name|hasUpgradeDomain
argument_list|()
condition|?
name|di
operator|.
name|getUpgradeDomain
argument_list|()
else|:
literal|null
argument_list|)
return|;
block|}
DECL|method|convertStorageTypes ( List<StorageTypeProto> storageTypesList, int expectedSize)
specifier|public
specifier|static
name|StorageType
index|[]
name|convertStorageTypes
parameter_list|(
name|List
argument_list|<
name|StorageTypeProto
argument_list|>
name|storageTypesList
parameter_list|,
name|int
name|expectedSize
parameter_list|)
block|{
specifier|final
name|StorageType
index|[]
name|storageTypes
init|=
operator|new
name|StorageType
index|[
name|expectedSize
index|]
decl_stmt|;
if|if
condition|(
name|storageTypesList
operator|.
name|size
argument_list|()
operator|!=
name|expectedSize
condition|)
block|{
comment|// missing storage types
name|Preconditions
operator|.
name|checkState
argument_list|(
name|storageTypesList
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|storageTypes
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|storageTypes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|storageTypes
index|[
name|i
index|]
operator|=
name|convertStorageType
argument_list|(
name|storageTypesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|storageTypes
return|;
block|}
DECL|method|convert ( TokenProto blockToken)
specifier|public
specifier|static
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|convert
parameter_list|(
name|TokenProto
name|blockToken
parameter_list|)
block|{
return|return
operator|new
name|Token
argument_list|<>
argument_list|(
name|blockToken
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|blockToken
operator|.
name|getPassword
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|blockToken
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|blockToken
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|// DatanodeId
DECL|method|convert (DatanodeIDProto dn)
specifier|public
specifier|static
name|DatanodeID
name|convert
parameter_list|(
name|DatanodeIDProto
name|dn
parameter_list|)
block|{
return|return
operator|new
name|DatanodeID
argument_list|(
name|dn
operator|.
name|getIpAddr
argument_list|()
argument_list|,
name|dn
operator|.
name|getHostName
argument_list|()
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|dn
operator|.
name|getXferPort
argument_list|()
argument_list|,
name|dn
operator|.
name|getInfoPort
argument_list|()
argument_list|,
name|dn
operator|.
name|hasInfoSecurePort
argument_list|()
condition|?
name|dn
operator|.
name|getInfoSecurePort
argument_list|()
else|:
literal|0
argument_list|,
name|dn
operator|.
name|getIpcPort
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (AdminState adminState)
specifier|public
specifier|static
name|AdminStates
name|convert
parameter_list|(
name|AdminState
name|adminState
parameter_list|)
block|{
switch|switch
condition|(
name|adminState
condition|)
block|{
case|case
name|DECOMMISSION_INPROGRESS
case|:
return|return
name|AdminStates
operator|.
name|DECOMMISSION_INPROGRESS
return|;
case|case
name|DECOMMISSIONED
case|:
return|return
name|AdminStates
operator|.
name|DECOMMISSIONED
return|;
case|case
name|NORMAL
case|:
default|default:
return|return
name|AdminStates
operator|.
name|NORMAL
return|;
block|}
block|}
comment|// LocatedBlocks
DECL|method|convert (LocatedBlocksProto lb)
specifier|public
specifier|static
name|LocatedBlocks
name|convert
parameter_list|(
name|LocatedBlocksProto
name|lb
parameter_list|)
block|{
return|return
operator|new
name|LocatedBlocks
argument_list|(
name|lb
operator|.
name|getFileLength
argument_list|()
argument_list|,
name|lb
operator|.
name|getUnderConstruction
argument_list|()
argument_list|,
name|convertLocatedBlocks
argument_list|(
name|lb
operator|.
name|getBlocksList
argument_list|()
argument_list|)
argument_list|,
name|lb
operator|.
name|hasLastBlock
argument_list|()
condition|?
name|convertLocatedBlockProto
argument_list|(
name|lb
operator|.
name|getLastBlock
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
name|lb
operator|.
name|getIsLastBlockComplete
argument_list|()
argument_list|,
name|lb
operator|.
name|hasFileEncryptionInfo
argument_list|()
condition|?
name|convert
argument_list|(
name|lb
operator|.
name|getFileEncryptionInfo
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
name|lb
operator|.
name|hasEcPolicy
argument_list|()
condition|?
name|convertErasureCodingPolicy
argument_list|(
name|lb
operator|.
name|getEcPolicy
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
return|;
block|}
DECL|method|convertStoragePolicies ( List<BlockStoragePolicyProto> policyProtos)
specifier|public
specifier|static
name|BlockStoragePolicy
index|[]
name|convertStoragePolicies
parameter_list|(
name|List
argument_list|<
name|BlockStoragePolicyProto
argument_list|>
name|policyProtos
parameter_list|)
block|{
if|if
condition|(
name|policyProtos
operator|==
literal|null
operator|||
name|policyProtos
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|BlockStoragePolicy
index|[
literal|0
index|]
return|;
block|}
name|BlockStoragePolicy
index|[]
name|policies
init|=
operator|new
name|BlockStoragePolicy
index|[
name|policyProtos
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockStoragePolicyProto
name|proto
range|:
name|policyProtos
control|)
block|{
name|policies
index|[
name|i
operator|++
index|]
operator|=
name|convert
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
return|return
name|policies
return|;
block|}
DECL|method|convert (GetEditsFromTxidResponseProto resp)
specifier|public
specifier|static
name|EventBatchList
name|convert
parameter_list|(
name|GetEditsFromTxidResponseProto
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|InotifyProtos
operator|.
name|EventsListProto
name|list
init|=
name|resp
operator|.
name|getEventsList
argument_list|()
decl_stmt|;
specifier|final
name|long
name|firstTxid
init|=
name|list
operator|.
name|getFirstTxid
argument_list|()
decl_stmt|;
specifier|final
name|long
name|lastTxid
init|=
name|list
operator|.
name|getLastTxid
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|EventBatch
argument_list|>
name|batches
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|getEventsList
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't handle old inotify server response."
argument_list|)
throw|;
block|}
for|for
control|(
name|InotifyProtos
operator|.
name|EventBatchProto
name|bp
range|:
name|list
operator|.
name|getBatchList
argument_list|()
control|)
block|{
name|long
name|txid
init|=
name|bp
operator|.
name|getTxid
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|txid
operator|!=
operator|-
literal|1
operator|)
operator|&&
operator|(
operator|(
name|txid
operator|<
name|firstTxid
operator|)
operator|||
operator|(
name|txid
operator|>
name|lastTxid
operator|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error converting TxidResponseProto: got a "
operator|+
literal|"transaction id "
operator|+
name|txid
operator|+
literal|" that was outside the range of ["
operator|+
name|firstTxid
operator|+
literal|", "
operator|+
name|lastTxid
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Event
argument_list|>
name|events
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|InotifyProtos
operator|.
name|EventProto
name|p
range|:
name|bp
operator|.
name|getEventsList
argument_list|()
control|)
block|{
switch|switch
condition|(
name|p
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|EVENT_CLOSE
case|:
name|InotifyProtos
operator|.
name|CloseEventProto
name|close
init|=
name|InotifyProtos
operator|.
name|CloseEventProto
operator|.
name|parseFrom
argument_list|(
name|p
operator|.
name|getContents
argument_list|()
argument_list|)
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
operator|new
name|Event
operator|.
name|CloseEvent
argument_list|(
name|close
operator|.
name|getPath
argument_list|()
argument_list|,
name|close
operator|.
name|getFileSize
argument_list|()
argument_list|,
name|close
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|EVENT_CREATE
case|:
name|InotifyProtos
operator|.
name|CreateEventProto
name|create
init|=
name|InotifyProtos
operator|.
name|CreateEventProto
operator|.
name|parseFrom
argument_list|(
name|p
operator|.
name|getContents
argument_list|()
argument_list|)
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
operator|new
name|Event
operator|.
name|CreateEvent
operator|.
name|Builder
argument_list|()
operator|.
name|iNodeType
argument_list|(
name|createTypeConvert
argument_list|(
name|create
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|path
argument_list|(
name|create
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|ctime
argument_list|(
name|create
operator|.
name|getCtime
argument_list|()
argument_list|)
operator|.
name|ownerName
argument_list|(
name|create
operator|.
name|getOwnerName
argument_list|()
argument_list|)
operator|.
name|groupName
argument_list|(
name|create
operator|.
name|getGroupName
argument_list|()
argument_list|)
operator|.
name|perms
argument_list|(
name|convert
argument_list|(
name|create
operator|.
name|getPerms
argument_list|()
argument_list|)
argument_list|)
operator|.
name|replication
argument_list|(
name|create
operator|.
name|getReplication
argument_list|()
argument_list|)
operator|.
name|symlinkTarget
argument_list|(
name|create
operator|.
name|getSymlinkTarget
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|create
operator|.
name|getSymlinkTarget
argument_list|()
argument_list|)
operator|.
name|defaultBlockSize
argument_list|(
name|create
operator|.
name|getDefaultBlockSize
argument_list|()
argument_list|)
operator|.
name|overwrite
argument_list|(
name|create
operator|.
name|getOverwrite
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EVENT_METADATA
case|:
name|InotifyProtos
operator|.
name|MetadataUpdateEventProto
name|meta
init|=
name|InotifyProtos
operator|.
name|MetadataUpdateEventProto
operator|.
name|parseFrom
argument_list|(
name|p
operator|.
name|getContents
argument_list|()
argument_list|)
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
operator|new
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|Builder
argument_list|()
operator|.
name|path
argument_list|(
name|meta
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|metadataType
argument_list|(
name|metadataUpdateTypeConvert
argument_list|(
name|meta
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|mtime
argument_list|(
name|meta
operator|.
name|getMtime
argument_list|()
argument_list|)
operator|.
name|atime
argument_list|(
name|meta
operator|.
name|getAtime
argument_list|()
argument_list|)
operator|.
name|replication
argument_list|(
name|meta
operator|.
name|getReplication
argument_list|()
argument_list|)
operator|.
name|ownerName
argument_list|(
name|meta
operator|.
name|getOwnerName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|meta
operator|.
name|getOwnerName
argument_list|()
argument_list|)
operator|.
name|groupName
argument_list|(
name|meta
operator|.
name|getGroupName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|meta
operator|.
name|getGroupName
argument_list|()
argument_list|)
operator|.
name|perms
argument_list|(
name|meta
operator|.
name|hasPerms
argument_list|()
condition|?
name|convert
argument_list|(
name|meta
operator|.
name|getPerms
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
operator|.
name|acls
argument_list|(
name|meta
operator|.
name|getAclsList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|convertAclEntry
argument_list|(
name|meta
operator|.
name|getAclsList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|xAttrs
argument_list|(
name|meta
operator|.
name|getXAttrsList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|convertXAttrs
argument_list|(
name|meta
operator|.
name|getXAttrsList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|xAttrsRemoved
argument_list|(
name|meta
operator|.
name|getXAttrsRemoved
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EVENT_RENAME
case|:
name|InotifyProtos
operator|.
name|RenameEventProto
name|rename
init|=
name|InotifyProtos
operator|.
name|RenameEventProto
operator|.
name|parseFrom
argument_list|(
name|p
operator|.
name|getContents
argument_list|()
argument_list|)
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
operator|new
name|Event
operator|.
name|RenameEvent
operator|.
name|Builder
argument_list|()
operator|.
name|srcPath
argument_list|(
name|rename
operator|.
name|getSrcPath
argument_list|()
argument_list|)
operator|.
name|dstPath
argument_list|(
name|rename
operator|.
name|getDestPath
argument_list|()
argument_list|)
operator|.
name|timestamp
argument_list|(
name|rename
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EVENT_APPEND
case|:
name|InotifyProtos
operator|.
name|AppendEventProto
name|append
init|=
name|InotifyProtos
operator|.
name|AppendEventProto
operator|.
name|parseFrom
argument_list|(
name|p
operator|.
name|getContents
argument_list|()
argument_list|)
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
operator|new
name|Event
operator|.
name|AppendEvent
operator|.
name|Builder
argument_list|()
operator|.
name|path
argument_list|(
name|append
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|newBlock
argument_list|(
name|append
operator|.
name|hasNewBlock
argument_list|()
operator|&&
name|append
operator|.
name|getNewBlock
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EVENT_UNLINK
case|:
name|InotifyProtos
operator|.
name|UnlinkEventProto
name|unlink
init|=
name|InotifyProtos
operator|.
name|UnlinkEventProto
operator|.
name|parseFrom
argument_list|(
name|p
operator|.
name|getContents
argument_list|()
argument_list|)
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
operator|new
name|Event
operator|.
name|UnlinkEvent
operator|.
name|Builder
argument_list|()
operator|.
name|path
argument_list|(
name|unlink
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|timestamp
argument_list|(
name|unlink
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EVENT_TRUNCATE
case|:
name|InotifyProtos
operator|.
name|TruncateEventProto
name|truncate
init|=
name|InotifyProtos
operator|.
name|TruncateEventProto
operator|.
name|parseFrom
argument_list|(
name|p
operator|.
name|getContents
argument_list|()
argument_list|)
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
operator|new
name|Event
operator|.
name|TruncateEvent
argument_list|(
name|truncate
operator|.
name|getPath
argument_list|()
argument_list|,
name|truncate
operator|.
name|getFileSize
argument_list|()
argument_list|,
name|truncate
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected inotify event type: "
operator|+
name|p
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|batches
operator|.
name|add
argument_list|(
operator|new
name|EventBatch
argument_list|(
name|txid
argument_list|,
name|events
operator|.
name|toArray
argument_list|(
operator|new
name|Event
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|EventBatchList
argument_list|(
name|batches
argument_list|,
name|resp
operator|.
name|getEventsList
argument_list|()
operator|.
name|getFirstTxid
argument_list|()
argument_list|,
name|resp
operator|.
name|getEventsList
argument_list|()
operator|.
name|getLastTxid
argument_list|()
argument_list|,
name|resp
operator|.
name|getEventsList
argument_list|()
operator|.
name|getSyncTxid
argument_list|()
argument_list|)
return|;
block|}
comment|// Located Block Arrays and Lists
DECL|method|convertLocatedBlocks (LocatedBlock[] lb)
specifier|public
specifier|static
name|LocatedBlockProto
index|[]
name|convertLocatedBlocks
parameter_list|(
name|LocatedBlock
index|[]
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|convertLocatedBlocks2
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|lb
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|LocatedBlockProto
index|[
name|lb
operator|.
name|length
index|]
argument_list|)
return|;
block|}
DECL|method|convertLocatedBlocks (LocatedBlockProto[] lb)
specifier|public
specifier|static
name|LocatedBlock
index|[]
name|convertLocatedBlocks
parameter_list|(
name|LocatedBlockProto
index|[]
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|convertLocatedBlocks
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|lb
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|LocatedBlock
index|[
name|lb
operator|.
name|length
index|]
argument_list|)
return|;
block|}
DECL|method|convertLocatedBlocks ( List<LocatedBlockProto> lb)
specifier|public
specifier|static
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|convertLocatedBlocks
parameter_list|(
name|List
argument_list|<
name|LocatedBlockProto
argument_list|>
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|lb
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlockProto
name|aLb
range|:
name|lb
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|convertLocatedBlockProto
argument_list|(
name|aLb
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|convertLocatedBlocks2 ( List<LocatedBlock> lb)
specifier|public
specifier|static
name|List
argument_list|<
name|LocatedBlockProto
argument_list|>
name|convertLocatedBlocks2
parameter_list|(
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|lb
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocatedBlockProto
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|aLb
range|:
name|lb
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|convertLocatedBlock
argument_list|(
name|aLb
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|convertLocatedBlock (LocatedBlock b)
specifier|public
specifier|static
name|LocatedBlockProto
name|convertLocatedBlock
parameter_list|(
name|LocatedBlock
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Builder
name|builder
init|=
name|LocatedBlockProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|locs
init|=
name|b
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|cachedLocs
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|b
operator|.
name|getCachedLocations
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DatanodeInfo
name|loc
init|=
name|locs
index|[
name|i
index|]
decl_stmt|;
name|builder
operator|.
name|addLocs
argument_list|(
name|i
argument_list|,
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|loc
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|locIsCached
init|=
name|cachedLocs
operator|.
name|contains
argument_list|(
name|loc
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addIsCached
argument_list|(
name|locIsCached
argument_list|)
expr_stmt|;
if|if
condition|(
name|locIsCached
condition|)
block|{
name|cachedLocs
operator|.
name|remove
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|cachedLocs
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|,
literal|"Found additional cached replica locations that are not in the set of"
operator|+
literal|" storage-backed locations!"
argument_list|)
expr_stmt|;
name|StorageType
index|[]
name|storageTypes
init|=
name|b
operator|.
name|getStorageTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|storageTypes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StorageType
name|storageType
range|:
name|storageTypes
control|)
block|{
name|builder
operator|.
name|addStorageTypes
argument_list|(
name|convertStorageType
argument_list|(
name|storageType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
index|[]
name|storageIDs
init|=
name|b
operator|.
name|getStorageIDs
argument_list|()
decl_stmt|;
if|if
condition|(
name|storageIDs
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAllStorageIDs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|storageIDs
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|instanceof
name|LocatedStripedBlock
condition|)
block|{
name|LocatedStripedBlock
name|sb
init|=
operator|(
name|LocatedStripedBlock
operator|)
name|b
decl_stmt|;
name|byte
index|[]
name|indices
init|=
name|sb
operator|.
name|getBlockIndices
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setBlockIndices
argument_list|(
name|PBHelperClient
operator|.
name|getByteString
argument_list|(
name|indices
argument_list|)
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
index|[]
name|blockTokens
init|=
name|sb
operator|.
name|getBlockTokens
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addAllBlockTokens
argument_list|(
name|convert
argument_list|(
name|blockTokens
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|setB
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|b
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setBlockToken
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|b
operator|.
name|getBlockToken
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCorrupt
argument_list|(
name|b
operator|.
name|isCorrupt
argument_list|()
argument_list|)
operator|.
name|setOffset
argument_list|(
name|b
operator|.
name|getStartOffset
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert ( Token<BlockTokenIdentifier>[] blockTokens)
specifier|public
specifier|static
name|List
argument_list|<
name|TokenProto
argument_list|>
name|convert
parameter_list|(
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
index|[]
name|blockTokens
parameter_list|)
block|{
name|List
argument_list|<
name|TokenProto
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|blockTokens
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|bt
range|:
name|blockTokens
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|bt
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
DECL|method|convert (BlockStoragePolicyProto proto)
specifier|public
specifier|static
name|BlockStoragePolicy
name|convert
parameter_list|(
name|BlockStoragePolicyProto
name|proto
parameter_list|)
block|{
name|List
argument_list|<
name|StorageTypeProto
argument_list|>
name|cList
init|=
name|proto
operator|.
name|getCreationPolicy
argument_list|()
operator|.
name|getStorageTypesList
argument_list|()
decl_stmt|;
name|StorageType
index|[]
name|creationTypes
init|=
name|convertStorageTypes
argument_list|(
name|cList
argument_list|,
name|cList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StorageTypeProto
argument_list|>
name|cfList
init|=
name|proto
operator|.
name|hasCreationFallbackPolicy
argument_list|()
condition|?
name|proto
operator|.
name|getCreationFallbackPolicy
argument_list|()
operator|.
name|getStorageTypesList
argument_list|()
else|:
literal|null
decl_stmt|;
name|StorageType
index|[]
name|creationFallbackTypes
init|=
name|cfList
operator|==
literal|null
condition|?
name|StorageType
operator|.
name|EMPTY_ARRAY
else|:
name|convertStorageTypes
argument_list|(
name|cfList
argument_list|,
name|cfList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StorageTypeProto
argument_list|>
name|rfList
init|=
name|proto
operator|.
name|hasReplicationFallbackPolicy
argument_list|()
condition|?
name|proto
operator|.
name|getReplicationFallbackPolicy
argument_list|()
operator|.
name|getStorageTypesList
argument_list|()
else|:
literal|null
decl_stmt|;
name|StorageType
index|[]
name|replicationFallbackTypes
init|=
name|rfList
operator|==
literal|null
condition|?
name|StorageType
operator|.
name|EMPTY_ARRAY
else|:
name|convertStorageTypes
argument_list|(
name|rfList
argument_list|,
name|rfList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|BlockStoragePolicy
argument_list|(
operator|(
name|byte
operator|)
name|proto
operator|.
name|getPolicyId
argument_list|()
argument_list|,
name|proto
operator|.
name|getName
argument_list|()
argument_list|,
name|creationTypes
argument_list|,
name|creationFallbackTypes
argument_list|,
name|replicationFallbackTypes
argument_list|)
return|;
block|}
DECL|method|convert (FsAction v)
specifier|public
specifier|static
name|FsActionProto
name|convert
parameter_list|(
name|FsAction
name|v
parameter_list|)
block|{
return|return
name|FsActionProto
operator|.
name|valueOf
argument_list|(
name|v
operator|!=
literal|null
condition|?
name|v
operator|.
name|ordinal
argument_list|()
else|:
literal|0
argument_list|)
return|;
block|}
DECL|method|convertXAttrProto (XAttr a)
specifier|public
specifier|static
name|XAttrProto
name|convertXAttrProto
parameter_list|(
name|XAttr
name|a
parameter_list|)
block|{
name|XAttrProto
operator|.
name|Builder
name|builder
init|=
name|XAttrProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNamespace
argument_list|(
name|convert
argument_list|(
name|a
operator|.
name|getNameSpace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setName
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setValue
argument_list|(
name|getByteString
argument_list|(
name|a
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (ListXAttrsResponseProto a)
specifier|public
specifier|static
name|List
argument_list|<
name|XAttr
argument_list|>
name|convert
parameter_list|(
name|ListXAttrsResponseProto
name|a
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|XAttrProto
argument_list|>
name|xAttrs
init|=
name|a
operator|.
name|getXAttrsList
argument_list|()
decl_stmt|;
return|return
name|convertXAttrs
argument_list|(
name|xAttrs
argument_list|)
return|;
block|}
DECL|method|convert (GetXAttrsResponseProto a)
specifier|public
specifier|static
name|List
argument_list|<
name|XAttr
argument_list|>
name|convert
parameter_list|(
name|GetXAttrsResponseProto
name|a
parameter_list|)
block|{
name|List
argument_list|<
name|XAttrProto
argument_list|>
name|xAttrs
init|=
name|a
operator|.
name|getXAttrsList
argument_list|()
decl_stmt|;
return|return
name|convertXAttrs
argument_list|(
name|xAttrs
argument_list|)
return|;
block|}
DECL|method|convertXAttrs (List<XAttrProto> xAttrSpec)
specifier|public
specifier|static
name|List
argument_list|<
name|XAttr
argument_list|>
name|convertXAttrs
parameter_list|(
name|List
argument_list|<
name|XAttrProto
argument_list|>
name|xAttrSpec
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|xAttrSpec
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XAttrProto
name|a
range|:
name|xAttrSpec
control|)
block|{
name|XAttr
operator|.
name|Builder
name|builder
init|=
operator|new
name|XAttr
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNameSpace
argument_list|(
name|convert
argument_list|(
name|a
operator|.
name|getNamespace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|hasName
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setName
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|.
name|hasValue
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setValue
argument_list|(
name|a
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|xAttrs
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|xAttrs
return|;
block|}
DECL|method|convert (XAttr.NameSpace v)
specifier|static
name|XAttrNamespaceProto
name|convert
parameter_list|(
name|XAttr
operator|.
name|NameSpace
name|v
parameter_list|)
block|{
return|return
name|XAttrNamespaceProto
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|ordinal
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (XAttrNamespaceProto v)
specifier|static
name|XAttr
operator|.
name|NameSpace
name|convert
parameter_list|(
name|XAttrNamespaceProto
name|v
parameter_list|)
block|{
return|return
name|castEnum
argument_list|(
name|v
argument_list|,
name|XATTR_NAMESPACE_VALUES
argument_list|)
return|;
block|}
DECL|method|castEnum (T from, U[] to)
specifier|static
parameter_list|<
name|T
extends|extends
name|Enum
argument_list|<
name|T
argument_list|>
parameter_list|,
name|U
extends|extends
name|Enum
argument_list|<
name|U
argument_list|>
parameter_list|>
name|U
name|castEnum
parameter_list|(
name|T
name|from
parameter_list|,
name|U
index|[]
name|to
parameter_list|)
block|{
return|return
name|to
index|[
name|from
operator|.
name|ordinal
argument_list|()
index|]
return|;
block|}
DECL|method|metadataUpdateTypeConvert ( Event.MetadataUpdateEvent.MetadataType type)
specifier|static
name|InotifyProtos
operator|.
name|MetadataUpdateType
name|metadataUpdateTypeConvert
parameter_list|(
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|TIMES
case|:
return|return
name|InotifyProtos
operator|.
name|MetadataUpdateType
operator|.
name|META_TYPE_TIMES
return|;
case|case
name|REPLICATION
case|:
return|return
name|InotifyProtos
operator|.
name|MetadataUpdateType
operator|.
name|META_TYPE_REPLICATION
return|;
case|case
name|OWNER
case|:
return|return
name|InotifyProtos
operator|.
name|MetadataUpdateType
operator|.
name|META_TYPE_OWNER
return|;
case|case
name|PERMS
case|:
return|return
name|InotifyProtos
operator|.
name|MetadataUpdateType
operator|.
name|META_TYPE_PERMS
return|;
case|case
name|ACLS
case|:
return|return
name|InotifyProtos
operator|.
name|MetadataUpdateType
operator|.
name|META_TYPE_ACLS
return|;
case|case
name|XATTRS
case|:
return|return
name|InotifyProtos
operator|.
name|MetadataUpdateType
operator|.
name|META_TYPE_XATTRS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
DECL|method|metadataUpdateTypeConvert ( InotifyProtos.MetadataUpdateType type)
specifier|private
specifier|static
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
name|metadataUpdateTypeConvert
parameter_list|(
name|InotifyProtos
operator|.
name|MetadataUpdateType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|META_TYPE_TIMES
case|:
return|return
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|TIMES
return|;
case|case
name|META_TYPE_REPLICATION
case|:
return|return
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|REPLICATION
return|;
case|case
name|META_TYPE_OWNER
case|:
return|return
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|OWNER
return|;
case|case
name|META_TYPE_PERMS
case|:
return|return
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|PERMS
return|;
case|case
name|META_TYPE_ACLS
case|:
return|return
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|ACLS
return|;
case|case
name|META_TYPE_XATTRS
case|:
return|return
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|XATTRS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
DECL|method|createTypeConvert (Event.CreateEvent.INodeType type)
specifier|static
name|InotifyProtos
operator|.
name|INodeType
name|createTypeConvert
parameter_list|(
name|Event
operator|.
name|CreateEvent
operator|.
name|INodeType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DIRECTORY
case|:
return|return
name|InotifyProtos
operator|.
name|INodeType
operator|.
name|I_TYPE_DIRECTORY
return|;
case|case
name|FILE
case|:
return|return
name|InotifyProtos
operator|.
name|INodeType
operator|.
name|I_TYPE_FILE
return|;
case|case
name|SYMLINK
case|:
return|return
name|InotifyProtos
operator|.
name|INodeType
operator|.
name|I_TYPE_SYMLINK
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
DECL|method|convertLocatedBlock ( List<LocatedBlockProto> lb)
specifier|public
specifier|static
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|convertLocatedBlock
parameter_list|(
name|List
argument_list|<
name|LocatedBlockProto
argument_list|>
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|lb
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlockProto
name|aLb
range|:
name|lb
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|convertLocatedBlockProto
argument_list|(
name|aLb
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|convertAclEntry (List<AclEntryProto> aclSpec)
specifier|public
specifier|static
name|List
argument_list|<
name|AclEntry
argument_list|>
name|convertAclEntry
parameter_list|(
name|List
argument_list|<
name|AclEntryProto
argument_list|>
name|aclSpec
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
name|r
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|aclSpec
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AclEntryProto
name|e
range|:
name|aclSpec
control|)
block|{
name|AclEntry
operator|.
name|Builder
name|builder
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setType
argument_list|(
name|convert
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setScope
argument_list|(
name|convert
argument_list|(
name|e
operator|.
name|getScope
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setPermission
argument_list|(
name|convert
argument_list|(
name|e
operator|.
name|getPermissions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasName
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setName
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
DECL|method|convert (AclEntryScope v)
specifier|static
name|AclEntryScopeProto
name|convert
parameter_list|(
name|AclEntryScope
name|v
parameter_list|)
block|{
return|return
name|AclEntryScopeProto
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|ordinal
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (AclEntryScopeProto v)
specifier|private
specifier|static
name|AclEntryScope
name|convert
parameter_list|(
name|AclEntryScopeProto
name|v
parameter_list|)
block|{
return|return
name|castEnum
argument_list|(
name|v
argument_list|,
name|ACL_ENTRY_SCOPE_VALUES
argument_list|)
return|;
block|}
DECL|method|convert (AclEntryType e)
specifier|static
name|AclEntryTypeProto
name|convert
parameter_list|(
name|AclEntryType
name|e
parameter_list|)
block|{
return|return
name|AclEntryTypeProto
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|ordinal
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (AclEntryTypeProto v)
specifier|private
specifier|static
name|AclEntryType
name|convert
parameter_list|(
name|AclEntryTypeProto
name|v
parameter_list|)
block|{
return|return
name|castEnum
argument_list|(
name|v
argument_list|,
name|ACL_ENTRY_TYPE_VALUES
argument_list|)
return|;
block|}
DECL|method|convert (FsActionProto v)
specifier|public
specifier|static
name|FsAction
name|convert
parameter_list|(
name|FsActionProto
name|v
parameter_list|)
block|{
return|return
name|castEnum
argument_list|(
name|v
argument_list|,
name|FSACTION_VALUES
argument_list|)
return|;
block|}
DECL|method|convert (FsPermissionProto p)
specifier|public
specifier|static
name|FsPermission
name|convert
parameter_list|(
name|FsPermissionProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|FsPermissionExtension
argument_list|(
operator|(
name|short
operator|)
name|p
operator|.
name|getPerm
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createTypeConvert ( InotifyProtos.INodeType type)
specifier|private
specifier|static
name|Event
operator|.
name|CreateEvent
operator|.
name|INodeType
name|createTypeConvert
parameter_list|(
name|InotifyProtos
operator|.
name|INodeType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|I_TYPE_DIRECTORY
case|:
return|return
name|Event
operator|.
name|CreateEvent
operator|.
name|INodeType
operator|.
name|DIRECTORY
return|;
case|case
name|I_TYPE_FILE
case|:
return|return
name|Event
operator|.
name|CreateEvent
operator|.
name|INodeType
operator|.
name|FILE
return|;
case|case
name|I_TYPE_SYMLINK
case|:
return|return
name|Event
operator|.
name|CreateEvent
operator|.
name|INodeType
operator|.
name|SYMLINK
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
DECL|method|convert ( FileEncryptionInfo info)
specifier|public
specifier|static
name|HdfsProtos
operator|.
name|FileEncryptionInfoProto
name|convert
parameter_list|(
name|FileEncryptionInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|HdfsProtos
operator|.
name|FileEncryptionInfoProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSuite
argument_list|(
name|convert
argument_list|(
name|info
operator|.
name|getCipherSuite
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCryptoProtocolVersion
argument_list|(
name|convert
argument_list|(
name|info
operator|.
name|getCryptoProtocolVersion
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setKey
argument_list|(
name|getByteString
argument_list|(
name|info
operator|.
name|getEncryptedDataEncryptionKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setIv
argument_list|(
name|getByteString
argument_list|(
name|info
operator|.
name|getIV
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setEzKeyVersionName
argument_list|(
name|info
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|info
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (CryptoProtocolVersion version)
specifier|public
specifier|static
name|CryptoProtocolVersionProto
name|convert
parameter_list|(
name|CryptoProtocolVersion
name|version
parameter_list|)
block|{
switch|switch
condition|(
name|version
condition|)
block|{
case|case
name|UNKNOWN
case|:
return|return
name|CryptoProtocolVersionProto
operator|.
name|UNKNOWN_PROTOCOL_VERSION
return|;
case|case
name|ENCRYPTION_ZONES
case|:
return|return
name|CryptoProtocolVersionProto
operator|.
name|ENCRYPTION_ZONES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
DECL|method|convert ( HdfsProtos.FileEncryptionInfoProto proto)
specifier|public
specifier|static
name|FileEncryptionInfo
name|convert
parameter_list|(
name|HdfsProtos
operator|.
name|FileEncryptionInfoProto
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|CipherSuite
name|suite
init|=
name|convert
argument_list|(
name|proto
operator|.
name|getSuite
argument_list|()
argument_list|)
decl_stmt|;
name|CryptoProtocolVersion
name|version
init|=
name|convert
argument_list|(
name|proto
operator|.
name|getCryptoProtocolVersion
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|proto
operator|.
name|getKey
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|iv
init|=
name|proto
operator|.
name|getIv
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|ezKeyVersionName
init|=
name|proto
operator|.
name|getEzKeyVersionName
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|proto
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
return|return
operator|new
name|FileEncryptionInfo
argument_list|(
name|suite
argument_list|,
name|version
argument_list|,
name|key
argument_list|,
name|iv
argument_list|,
name|keyName
argument_list|,
name|ezKeyVersionName
argument_list|)
return|;
block|}
DECL|method|convert (CryptoProtocolVersionProto proto)
specifier|public
specifier|static
name|CryptoProtocolVersion
name|convert
parameter_list|(
name|CryptoProtocolVersionProto
name|proto
parameter_list|)
block|{
switch|switch
condition|(
name|proto
condition|)
block|{
case|case
name|ENCRYPTION_ZONES
case|:
return|return
name|CryptoProtocolVersion
operator|.
name|ENCRYPTION_ZONES
return|;
default|default:
comment|// Set to UNKNOWN and stash the unknown enum value
name|CryptoProtocolVersion
name|version
init|=
name|CryptoProtocolVersion
operator|.
name|UNKNOWN
decl_stmt|;
name|version
operator|.
name|setUnknownValue
argument_list|(
name|proto
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|version
return|;
block|}
block|}
DECL|method|convertXAttrProto ( List<XAttr> xAttrSpec)
specifier|public
specifier|static
name|List
argument_list|<
name|XAttrProto
argument_list|>
name|convertXAttrProto
parameter_list|(
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrSpec
parameter_list|)
block|{
if|if
condition|(
name|xAttrSpec
operator|==
literal|null
condition|)
block|{
return|return
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|ArrayList
argument_list|<
name|XAttrProto
argument_list|>
name|xAttrs
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|xAttrSpec
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XAttr
name|a
range|:
name|xAttrSpec
control|)
block|{
name|XAttrProto
operator|.
name|Builder
name|builder
init|=
name|XAttrProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNamespace
argument_list|(
name|convert
argument_list|(
name|a
operator|.
name|getNameSpace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setName
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setValue
argument_list|(
name|getByteString
argument_list|(
name|a
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|xAttrs
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|xAttrs
return|;
block|}
comment|/**    * The flag field in PB is a bitmask whose values are the same a the    * emum values of XAttrSetFlag    */
DECL|method|convert (EnumSet<XAttrSetFlag> flag)
specifier|public
specifier|static
name|int
name|convert
parameter_list|(
name|EnumSet
argument_list|<
name|XAttrSetFlag
argument_list|>
name|flag
parameter_list|)
block|{
name|int
name|value
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|flag
operator|.
name|contains
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
condition|)
block|{
name|value
operator||=
name|XAttrSetFlagProto
operator|.
name|XATTR_CREATE
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|flag
operator|.
name|contains
argument_list|(
name|XAttrSetFlag
operator|.
name|REPLACE
argument_list|)
condition|)
block|{
name|value
operator||=
name|XAttrSetFlagProto
operator|.
name|XATTR_REPLACE
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
DECL|method|convert (EncryptionZoneProto proto)
specifier|public
specifier|static
name|EncryptionZone
name|convert
parameter_list|(
name|EncryptionZoneProto
name|proto
parameter_list|)
block|{
return|return
operator|new
name|EncryptionZone
argument_list|(
name|proto
operator|.
name|getId
argument_list|()
argument_list|,
name|proto
operator|.
name|getPath
argument_list|()
argument_list|,
name|convert
argument_list|(
name|proto
operator|.
name|getSuite
argument_list|()
argument_list|)
argument_list|,
name|convert
argument_list|(
name|proto
operator|.
name|getCryptoProtocolVersion
argument_list|()
argument_list|)
argument_list|,
name|proto
operator|.
name|getKeyName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (GetAclStatusResponseProto e)
specifier|public
specifier|static
name|AclStatus
name|convert
parameter_list|(
name|GetAclStatusResponseProto
name|e
parameter_list|)
block|{
name|AclStatusProto
name|r
init|=
name|e
operator|.
name|getResult
argument_list|()
decl_stmt|;
name|AclStatus
operator|.
name|Builder
name|builder
init|=
operator|new
name|AclStatus
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|owner
argument_list|(
name|r
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|.
name|group
argument_list|(
name|r
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|stickyBit
argument_list|(
name|r
operator|.
name|getSticky
argument_list|()
argument_list|)
operator|.
name|addEntries
argument_list|(
name|convertAclEntry
argument_list|(
name|r
operator|.
name|getEntriesList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|hasPermission
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setPermission
argument_list|(
name|convert
argument_list|(
name|r
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertAclEntryProto ( List<AclEntry> aclSpec)
specifier|public
specifier|static
name|List
argument_list|<
name|AclEntryProto
argument_list|>
name|convertAclEntryProto
parameter_list|(
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|AclEntryProto
argument_list|>
name|r
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|aclSpec
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AclEntry
name|e
range|:
name|aclSpec
control|)
block|{
name|AclEntryProto
operator|.
name|Builder
name|builder
init|=
name|AclEntryProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setType
argument_list|(
name|convert
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setScope
argument_list|(
name|convert
argument_list|(
name|e
operator|.
name|getScope
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setPermissions
argument_list|(
name|convert
argument_list|(
name|e
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setName
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
DECL|method|convert (CachePoolEntryProto proto)
specifier|public
specifier|static
name|CachePoolEntry
name|convert
parameter_list|(
name|CachePoolEntryProto
name|proto
parameter_list|)
block|{
name|CachePoolInfo
name|info
init|=
name|convert
argument_list|(
name|proto
operator|.
name|getInfo
argument_list|()
argument_list|)
decl_stmt|;
name|CachePoolStats
name|stats
init|=
name|convert
argument_list|(
name|proto
operator|.
name|getStats
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|CachePoolEntry
argument_list|(
name|info
argument_list|,
name|stats
argument_list|)
return|;
block|}
DECL|method|convert (CachePoolInfoProto proto)
specifier|public
specifier|static
name|CachePoolInfo
name|convert
parameter_list|(
name|CachePoolInfoProto
name|proto
parameter_list|)
block|{
comment|// Pool name is a required field, the rest are optional
name|String
name|poolName
init|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|proto
operator|.
name|getPoolName
argument_list|()
argument_list|)
decl_stmt|;
name|CachePoolInfo
name|info
init|=
operator|new
name|CachePoolInfo
argument_list|(
name|poolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasOwnerName
argument_list|()
condition|)
block|{
name|info
operator|.
name|setOwnerName
argument_list|(
name|proto
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasGroupName
argument_list|()
condition|)
block|{
name|info
operator|.
name|setGroupName
argument_list|(
name|proto
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMode
argument_list|()
condition|)
block|{
name|info
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
name|proto
operator|.
name|getMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasLimit
argument_list|()
condition|)
block|{
name|info
operator|.
name|setLimit
argument_list|(
name|proto
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMaxRelativeExpiry
argument_list|()
condition|)
block|{
name|info
operator|.
name|setMaxRelativeExpiryMs
argument_list|(
name|proto
operator|.
name|getMaxRelativeExpiry
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
DECL|method|convert (CachePoolStatsProto proto)
specifier|public
specifier|static
name|CachePoolStats
name|convert
parameter_list|(
name|CachePoolStatsProto
name|proto
parameter_list|)
block|{
name|CachePoolStats
operator|.
name|Builder
name|builder
init|=
operator|new
name|CachePoolStats
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setBytesNeeded
argument_list|(
name|proto
operator|.
name|getBytesNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setBytesCached
argument_list|(
name|proto
operator|.
name|getBytesCached
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setBytesOverlimit
argument_list|(
name|proto
operator|.
name|getBytesOverlimit
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setFilesNeeded
argument_list|(
name|proto
operator|.
name|getFilesNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setFilesCached
argument_list|(
name|proto
operator|.
name|getFilesCached
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (CachePoolInfo info)
specifier|public
specifier|static
name|CachePoolInfoProto
name|convert
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
block|{
name|CachePoolInfoProto
operator|.
name|Builder
name|builder
init|=
name|CachePoolInfoProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setPoolName
argument_list|(
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getOwnerName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setOwnerName
argument_list|(
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getGroupName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setGroupName
argument_list|(
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getMode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setMode
argument_list|(
name|info
operator|.
name|getMode
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setLimit
argument_list|(
name|info
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getMaxRelativeExpiryMs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setMaxRelativeExpiry
argument_list|(
name|info
operator|.
name|getMaxRelativeExpiryMs
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (CacheDirectiveInfo info)
specifier|public
specifier|static
name|CacheDirectiveInfoProto
name|convert
parameter_list|(
name|CacheDirectiveInfo
name|info
parameter_list|)
block|{
name|CacheDirectiveInfoProto
operator|.
name|Builder
name|builder
init|=
name|CacheDirectiveInfoProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setId
argument_list|(
name|info
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPath
argument_list|(
name|info
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getReplication
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setReplication
argument_list|(
name|info
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getPool
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPool
argument_list|(
name|info
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getExpiration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setExpiration
argument_list|(
name|convert
argument_list|(
name|info
operator|.
name|getExpiration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert ( CacheDirectiveInfo.Expiration expiration)
specifier|public
specifier|static
name|CacheDirectiveInfoExpirationProto
name|convert
parameter_list|(
name|CacheDirectiveInfo
operator|.
name|Expiration
name|expiration
parameter_list|)
block|{
return|return
name|CacheDirectiveInfoExpirationProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setIsRelative
argument_list|(
name|expiration
operator|.
name|isRelative
argument_list|()
argument_list|)
operator|.
name|setMillis
argument_list|(
name|expiration
operator|.
name|getMillis
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (CacheDirectiveEntryProto proto)
specifier|public
specifier|static
name|CacheDirectiveEntry
name|convert
parameter_list|(
name|CacheDirectiveEntryProto
name|proto
parameter_list|)
block|{
name|CacheDirectiveInfo
name|info
init|=
name|convert
argument_list|(
name|proto
operator|.
name|getInfo
argument_list|()
argument_list|)
decl_stmt|;
name|CacheDirectiveStats
name|stats
init|=
name|convert
argument_list|(
name|proto
operator|.
name|getStats
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|CacheDirectiveEntry
argument_list|(
name|info
argument_list|,
name|stats
argument_list|)
return|;
block|}
DECL|method|convert (CacheDirectiveStatsProto proto)
specifier|public
specifier|static
name|CacheDirectiveStats
name|convert
parameter_list|(
name|CacheDirectiveStatsProto
name|proto
parameter_list|)
block|{
name|CacheDirectiveStats
operator|.
name|Builder
name|builder
init|=
operator|new
name|CacheDirectiveStats
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setBytesNeeded
argument_list|(
name|proto
operator|.
name|getBytesNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setBytesCached
argument_list|(
name|proto
operator|.
name|getBytesCached
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setFilesNeeded
argument_list|(
name|proto
operator|.
name|getFilesNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setFilesCached
argument_list|(
name|proto
operator|.
name|getFilesCached
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setHasExpired
argument_list|(
name|proto
operator|.
name|getHasExpired
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (CacheDirectiveInfoProto proto)
specifier|public
specifier|static
name|CacheDirectiveInfo
name|convert
parameter_list|(
name|CacheDirectiveInfoProto
name|proto
parameter_list|)
block|{
name|CacheDirectiveInfo
operator|.
name|Builder
name|builder
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasId
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setId
argument_list|(
name|proto
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasPath
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|proto
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasReplication
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setReplication
argument_list|(
name|Shorts
operator|.
name|checkedCast
argument_list|(
name|proto
operator|.
name|getReplication
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasPool
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setPool
argument_list|(
name|proto
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasExpiration
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setExpiration
argument_list|(
name|convert
argument_list|(
name|proto
operator|.
name|getExpiration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert ( CacheDirectiveInfoExpirationProto proto)
specifier|public
specifier|static
name|CacheDirectiveInfo
operator|.
name|Expiration
name|convert
parameter_list|(
name|CacheDirectiveInfoExpirationProto
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|.
name|getIsRelative
argument_list|()
condition|)
block|{
return|return
name|CacheDirectiveInfo
operator|.
name|Expiration
operator|.
name|newRelative
argument_list|(
name|proto
operator|.
name|getMillis
argument_list|()
argument_list|)
return|;
block|}
return|return
name|CacheDirectiveInfo
operator|.
name|Expiration
operator|.
name|newAbsolute
argument_list|(
name|proto
operator|.
name|getMillis
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convertCacheFlags (EnumSet<CacheFlag> flags)
specifier|public
specifier|static
name|int
name|convertCacheFlags
parameter_list|(
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|flags
parameter_list|)
block|{
name|int
name|value
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|flags
operator|.
name|contains
argument_list|(
name|CacheFlag
operator|.
name|FORCE
argument_list|)
condition|)
block|{
name|value
operator||=
name|CacheFlagProto
operator|.
name|FORCE
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
DECL|method|convert ( SnapshotDiffReportProto reportProto)
specifier|public
specifier|static
name|SnapshotDiffReport
name|convert
parameter_list|(
name|SnapshotDiffReportProto
name|reportProto
parameter_list|)
block|{
if|if
condition|(
name|reportProto
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|snapshotDir
init|=
name|reportProto
operator|.
name|getSnapshotRoot
argument_list|()
decl_stmt|;
name|String
name|fromSnapshot
init|=
name|reportProto
operator|.
name|getFromSnapshot
argument_list|()
decl_stmt|;
name|String
name|toSnapshot
init|=
name|reportProto
operator|.
name|getToSnapshot
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SnapshotDiffReportEntryProto
argument_list|>
name|list
init|=
name|reportProto
operator|.
name|getDiffReportEntriesList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SnapshotDiffReportEntryProto
name|entryProto
range|:
name|list
control|)
block|{
name|DiffReportEntry
name|entry
init|=
name|convert
argument_list|(
name|entryProto
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SnapshotDiffReport
argument_list|(
name|snapshotDir
argument_list|,
name|fromSnapshot
argument_list|,
name|toSnapshot
argument_list|,
name|entries
argument_list|)
return|;
block|}
DECL|method|convert (SnapshotDiffReportEntryProto entry)
specifier|public
specifier|static
name|DiffReportEntry
name|convert
parameter_list|(
name|SnapshotDiffReportEntryProto
name|entry
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DiffType
name|type
init|=
name|DiffType
operator|.
name|getTypeFromLabel
argument_list|(
name|entry
operator|.
name|getModificationLabel
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|type
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|DiffReportEntry
argument_list|(
name|type
argument_list|,
name|entry
operator|.
name|getFullpath
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|entry
operator|.
name|hasTargetPath
argument_list|()
condition|?
name|entry
operator|.
name|getTargetPath
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|)
return|;
block|}
DECL|method|convert ( SnapshottableDirectoryListingProto sdlp)
specifier|public
specifier|static
name|SnapshottableDirectoryStatus
index|[]
name|convert
parameter_list|(
name|SnapshottableDirectoryListingProto
name|sdlp
parameter_list|)
block|{
if|if
condition|(
name|sdlp
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|SnapshottableDirectoryStatusProto
argument_list|>
name|list
init|=
name|sdlp
operator|.
name|getSnapshottableDirListingList
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|SnapshottableDirectoryStatus
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
name|SnapshottableDirectoryStatus
index|[]
name|result
init|=
operator|new
name|SnapshottableDirectoryStatus
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
DECL|method|convert ( SnapshottableDirectoryStatusProto sdirStatusProto)
specifier|public
specifier|static
name|SnapshottableDirectoryStatus
name|convert
parameter_list|(
name|SnapshottableDirectoryStatusProto
name|sdirStatusProto
parameter_list|)
block|{
if|if
condition|(
name|sdirStatusProto
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|HdfsFileStatusProto
name|status
init|=
name|sdirStatusProto
operator|.
name|getDirStatus
argument_list|()
decl_stmt|;
return|return
operator|new
name|SnapshottableDirectoryStatus
argument_list|(
name|status
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|status
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|convert
argument_list|(
name|status
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|,
name|status
operator|.
name|getOwner
argument_list|()
argument_list|,
name|status
operator|.
name|getGroup
argument_list|()
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|status
operator|.
name|getFileId
argument_list|()
argument_list|,
name|status
operator|.
name|getChildrenNum
argument_list|()
argument_list|,
name|sdirStatusProto
operator|.
name|getSnapshotNumber
argument_list|()
argument_list|,
name|sdirStatusProto
operator|.
name|getSnapshotQuota
argument_list|()
argument_list|,
name|sdirStatusProto
operator|.
name|getParentFullpath
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
comment|// DataEncryptionKey
DECL|method|convert (DataEncryptionKeyProto bet)
specifier|public
specifier|static
name|DataEncryptionKey
name|convert
parameter_list|(
name|DataEncryptionKeyProto
name|bet
parameter_list|)
block|{
name|String
name|encryptionAlgorithm
init|=
name|bet
operator|.
name|getEncryptionAlgorithm
argument_list|()
decl_stmt|;
return|return
operator|new
name|DataEncryptionKey
argument_list|(
name|bet
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|bet
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|bet
operator|.
name|getNonce
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|bet
operator|.
name|getEncryptionKey
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|bet
operator|.
name|getExpiryDate
argument_list|()
argument_list|,
name|encryptionAlgorithm
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|encryptionAlgorithm
argument_list|)
return|;
block|}
DECL|method|convertDelegationToken ( TokenProto blockToken)
specifier|public
specifier|static
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|convertDelegationToken
parameter_list|(
name|TokenProto
name|blockToken
parameter_list|)
block|{
return|return
operator|new
name|Token
argument_list|<>
argument_list|(
name|blockToken
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|blockToken
operator|.
name|getPassword
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|blockToken
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|blockToken
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|// Arrays of DatanodeId
DECL|method|convert (DatanodeID[] did)
specifier|public
specifier|static
name|DatanodeIDProto
index|[]
name|convert
parameter_list|(
name|DatanodeID
index|[]
name|did
parameter_list|)
block|{
if|if
condition|(
name|did
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|did
operator|.
name|length
decl_stmt|;
name|DatanodeIDProto
index|[]
name|result
init|=
operator|new
name|DatanodeIDProto
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|did
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|convert (FsPermission p)
specifier|public
specifier|static
name|FsPermissionProto
name|convert
parameter_list|(
name|FsPermission
name|p
parameter_list|)
block|{
return|return
name|FsPermissionProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPerm
argument_list|(
name|p
operator|.
name|toExtendedShort
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (HdfsFileStatusProto fs)
specifier|public
specifier|static
name|HdfsFileStatus
name|convert
parameter_list|(
name|HdfsFileStatusProto
name|fs
parameter_list|)
block|{
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|HdfsLocatedFileStatus
argument_list|(
name|fs
operator|.
name|getLength
argument_list|()
argument_list|,
name|fs
operator|.
name|getFileType
argument_list|()
operator|.
name|equals
argument_list|(
name|FileType
operator|.
name|IS_DIR
argument_list|)
argument_list|,
name|fs
operator|.
name|getBlockReplication
argument_list|()
argument_list|,
name|fs
operator|.
name|getBlocksize
argument_list|()
argument_list|,
name|fs
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|fs
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|convert
argument_list|(
name|fs
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|,
name|fs
operator|.
name|getOwner
argument_list|()
argument_list|,
name|fs
operator|.
name|getGroup
argument_list|()
argument_list|,
name|fs
operator|.
name|getFileType
argument_list|()
operator|.
name|equals
argument_list|(
name|FileType
operator|.
name|IS_SYMLINK
argument_list|)
condition|?
name|fs
operator|.
name|getSymlink
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|,
name|fs
operator|.
name|getPath
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|fs
operator|.
name|hasFileId
argument_list|()
condition|?
name|fs
operator|.
name|getFileId
argument_list|()
else|:
name|HdfsConstants
operator|.
name|GRANDFATHER_INODE_ID
argument_list|,
name|fs
operator|.
name|hasLocations
argument_list|()
condition|?
name|convert
argument_list|(
name|fs
operator|.
name|getLocations
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
name|fs
operator|.
name|hasChildrenNum
argument_list|()
condition|?
name|fs
operator|.
name|getChildrenNum
argument_list|()
else|:
operator|-
literal|1
argument_list|,
name|fs
operator|.
name|hasFileEncryptionInfo
argument_list|()
condition|?
name|convert
argument_list|(
name|fs
operator|.
name|getFileEncryptionInfo
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
name|fs
operator|.
name|hasStoragePolicy
argument_list|()
condition|?
operator|(
name|byte
operator|)
name|fs
operator|.
name|getStoragePolicy
argument_list|()
else|:
name|HdfsConstants
operator|.
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
argument_list|,
name|fs
operator|.
name|hasEcPolicy
argument_list|()
condition|?
name|convertErasureCodingPolicy
argument_list|(
name|fs
operator|.
name|getEcPolicy
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
return|;
block|}
DECL|method|convert (CorruptFileBlocksProto c)
specifier|public
specifier|static
name|CorruptFileBlocks
name|convert
parameter_list|(
name|CorruptFileBlocksProto
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|String
argument_list|>
name|fileList
init|=
name|c
operator|.
name|getFilesList
argument_list|()
decl_stmt|;
return|return
operator|new
name|CorruptFileBlocks
argument_list|(
name|fileList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|fileList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|c
operator|.
name|getCookie
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (ContentSummaryProto cs)
specifier|public
specifier|static
name|ContentSummary
name|convert
parameter_list|(
name|ContentSummaryProto
name|cs
parameter_list|)
block|{
if|if
condition|(
name|cs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ContentSummary
operator|.
name|Builder
name|builder
init|=
operator|new
name|ContentSummary
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|length
argument_list|(
name|cs
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|fileCount
argument_list|(
name|cs
operator|.
name|getFileCount
argument_list|()
argument_list|)
operator|.
name|directoryCount
argument_list|(
name|cs
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
operator|.
name|quota
argument_list|(
name|cs
operator|.
name|getQuota
argument_list|()
argument_list|)
operator|.
name|spaceConsumed
argument_list|(
name|cs
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|cs
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cs
operator|.
name|hasTypeQuotaInfos
argument_list|()
condition|)
block|{
name|addStorageTypes
argument_list|(
name|cs
operator|.
name|getTypeQuotaInfos
argument_list|()
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (QuotaUsageProto qu)
specifier|public
specifier|static
name|QuotaUsage
name|convert
parameter_list|(
name|QuotaUsageProto
name|qu
parameter_list|)
block|{
if|if
condition|(
name|qu
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|QuotaUsage
operator|.
name|Builder
name|builder
init|=
operator|new
name|QuotaUsage
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|fileAndDirectoryCount
argument_list|(
name|qu
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
operator|.
name|quota
argument_list|(
name|qu
operator|.
name|getQuota
argument_list|()
argument_list|)
operator|.
name|spaceConsumed
argument_list|(
name|qu
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|qu
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|qu
operator|.
name|hasTypeQuotaInfos
argument_list|()
condition|)
block|{
name|addStorageTypes
argument_list|(
name|qu
operator|.
name|getTypeQuotaInfos
argument_list|()
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (QuotaUsage qu)
specifier|public
specifier|static
name|QuotaUsageProto
name|convert
parameter_list|(
name|QuotaUsage
name|qu
parameter_list|)
block|{
if|if
condition|(
name|qu
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|QuotaUsageProto
operator|.
name|Builder
name|builder
init|=
name|QuotaUsageProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setFileAndDirectoryCount
argument_list|(
name|qu
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
operator|.
name|setQuota
argument_list|(
name|qu
operator|.
name|getQuota
argument_list|()
argument_list|)
operator|.
name|setSpaceConsumed
argument_list|(
name|qu
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
operator|.
name|setSpaceQuota
argument_list|(
name|qu
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|qu
operator|.
name|isTypeQuotaSet
argument_list|()
operator|||
name|qu
operator|.
name|isTypeConsumedAvailable
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setTypeQuotaInfos
argument_list|(
name|getBuilder
argument_list|(
name|qu
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (RollingUpgradeAction a)
specifier|public
specifier|static
name|RollingUpgradeActionProto
name|convert
parameter_list|(
name|RollingUpgradeAction
name|a
parameter_list|)
block|{
switch|switch
condition|(
name|a
condition|)
block|{
case|case
name|QUERY
case|:
return|return
name|RollingUpgradeActionProto
operator|.
name|QUERY
return|;
case|case
name|PREPARE
case|:
return|return
name|RollingUpgradeActionProto
operator|.
name|START
return|;
case|case
name|FINALIZE
case|:
return|return
name|RollingUpgradeActionProto
operator|.
name|FINALIZE
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected value: "
operator|+
name|a
argument_list|)
throw|;
block|}
block|}
DECL|method|convert (RollingUpgradeInfoProto proto)
specifier|public
specifier|static
name|RollingUpgradeInfo
name|convert
parameter_list|(
name|RollingUpgradeInfoProto
name|proto
parameter_list|)
block|{
name|RollingUpgradeStatusProto
name|status
init|=
name|proto
operator|.
name|getStatus
argument_list|()
decl_stmt|;
return|return
operator|new
name|RollingUpgradeInfo
argument_list|(
name|status
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|proto
operator|.
name|getCreatedRollbackImages
argument_list|()
argument_list|,
name|proto
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|proto
operator|.
name|getFinalizeTime
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convertDatanodeStorageReports ( List<DatanodeStorageReportProto> protos)
specifier|public
specifier|static
name|DatanodeStorageReport
index|[]
name|convertDatanodeStorageReports
parameter_list|(
name|List
argument_list|<
name|DatanodeStorageReportProto
argument_list|>
name|protos
parameter_list|)
block|{
specifier|final
name|DatanodeStorageReport
index|[]
name|reports
init|=
operator|new
name|DatanodeStorageReport
index|[
name|protos
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reports
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|reports
index|[
name|i
index|]
operator|=
name|convertDatanodeStorageReport
argument_list|(
name|protos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|reports
return|;
block|}
DECL|method|convertDatanodeStorageReport ( DatanodeStorageReportProto proto)
specifier|public
specifier|static
name|DatanodeStorageReport
name|convertDatanodeStorageReport
parameter_list|(
name|DatanodeStorageReportProto
name|proto
parameter_list|)
block|{
return|return
operator|new
name|DatanodeStorageReport
argument_list|(
name|convert
argument_list|(
name|proto
operator|.
name|getDatanodeInfo
argument_list|()
argument_list|)
argument_list|,
name|convertStorageReports
argument_list|(
name|proto
operator|.
name|getStorageReportsList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convertStorageReports ( List<StorageReportProto> list)
specifier|public
specifier|static
name|StorageReport
index|[]
name|convertStorageReports
parameter_list|(
name|List
argument_list|<
name|StorageReportProto
argument_list|>
name|list
parameter_list|)
block|{
specifier|final
name|StorageReport
index|[]
name|report
init|=
operator|new
name|StorageReport
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|report
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|report
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|report
return|;
block|}
DECL|method|convert (StorageReportProto p)
specifier|public
specifier|static
name|StorageReport
name|convert
parameter_list|(
name|StorageReportProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|StorageReport
argument_list|(
name|p
operator|.
name|hasStorage
argument_list|()
condition|?
name|convert
argument_list|(
name|p
operator|.
name|getStorage
argument_list|()
argument_list|)
else|:
operator|new
name|DatanodeStorage
argument_list|(
name|p
operator|.
name|getStorageUuid
argument_list|()
argument_list|)
argument_list|,
name|p
operator|.
name|getFailed
argument_list|()
argument_list|,
name|p
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|p
operator|.
name|getDfsUsed
argument_list|()
argument_list|,
name|p
operator|.
name|getRemaining
argument_list|()
argument_list|,
name|p
operator|.
name|getBlockPoolUsed
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (DatanodeStorageProto s)
specifier|public
specifier|static
name|DatanodeStorage
name|convert
parameter_list|(
name|DatanodeStorageProto
name|s
parameter_list|)
block|{
return|return
operator|new
name|DatanodeStorage
argument_list|(
name|s
operator|.
name|getStorageUuid
argument_list|()
argument_list|,
name|convertState
argument_list|(
name|s
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|,
name|convertStorageType
argument_list|(
name|s
operator|.
name|getStorageType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convertState (StorageState state)
specifier|private
specifier|static
name|State
name|convertState
parameter_list|(
name|StorageState
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|READ_ONLY_SHARED
case|:
return|return
name|State
operator|.
name|READ_ONLY_SHARED
return|;
case|case
name|NORMAL
case|:
default|default:
return|return
name|State
operator|.
name|NORMAL
return|;
block|}
block|}
DECL|method|convert (SafeModeAction a)
specifier|public
specifier|static
name|SafeModeActionProto
name|convert
parameter_list|(
name|SafeModeAction
name|a
parameter_list|)
block|{
switch|switch
condition|(
name|a
condition|)
block|{
case|case
name|SAFEMODE_LEAVE
case|:
return|return
name|SafeModeActionProto
operator|.
name|SAFEMODE_LEAVE
return|;
case|case
name|SAFEMODE_ENTER
case|:
return|return
name|SafeModeActionProto
operator|.
name|SAFEMODE_ENTER
return|;
case|case
name|SAFEMODE_GET
case|:
return|return
name|SafeModeActionProto
operator|.
name|SAFEMODE_GET
return|;
case|case
name|SAFEMODE_FORCE_EXIT
case|:
return|return
name|SafeModeActionProto
operator|.
name|SAFEMODE_FORCE_EXIT
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected SafeModeAction :"
operator|+
name|a
argument_list|)
throw|;
block|}
block|}
DECL|method|convert (List<DatanodeInfoProto> list)
specifier|public
specifier|static
name|DatanodeInfo
index|[]
name|convert
parameter_list|(
name|List
argument_list|<
name|DatanodeInfoProto
argument_list|>
name|list
parameter_list|)
block|{
name|DatanodeInfo
index|[]
name|info
init|=
operator|new
name|DatanodeInfo
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|info
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|info
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
DECL|method|convert (GetFsStatsResponseProto res)
specifier|public
specifier|static
name|long
index|[]
name|convert
parameter_list|(
name|GetFsStatsResponseProto
name|res
parameter_list|)
block|{
name|long
index|[]
name|result
init|=
operator|new
name|long
index|[
name|ClientProtocol
operator|.
name|STATS_ARRAY_LENGTH
index|]
decl_stmt|;
name|result
index|[
name|ClientProtocol
operator|.
name|GET_STATS_CAPACITY_IDX
index|]
operator|=
name|res
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
name|result
index|[
name|ClientProtocol
operator|.
name|GET_STATS_USED_IDX
index|]
operator|=
name|res
operator|.
name|getUsed
argument_list|()
expr_stmt|;
name|result
index|[
name|ClientProtocol
operator|.
name|GET_STATS_REMAINING_IDX
index|]
operator|=
name|res
operator|.
name|getRemaining
argument_list|()
expr_stmt|;
name|result
index|[
name|ClientProtocol
operator|.
name|GET_STATS_UNDER_REPLICATED_IDX
index|]
operator|=
name|res
operator|.
name|getUnderReplicated
argument_list|()
expr_stmt|;
name|result
index|[
name|ClientProtocol
operator|.
name|GET_STATS_CORRUPT_BLOCKS_IDX
index|]
operator|=
name|res
operator|.
name|getCorruptBlocks
argument_list|()
expr_stmt|;
name|result
index|[
name|ClientProtocol
operator|.
name|GET_STATS_MISSING_BLOCKS_IDX
index|]
operator|=
name|res
operator|.
name|getMissingBlocks
argument_list|()
expr_stmt|;
name|result
index|[
name|ClientProtocol
operator|.
name|GET_STATS_MISSING_REPL_ONE_BLOCKS_IDX
index|]
operator|=
name|res
operator|.
name|getMissingReplOneBlocks
argument_list|()
expr_stmt|;
name|result
index|[
name|ClientProtocol
operator|.
name|GET_STATS_BYTES_IN_FUTURE_BLOCKS_IDX
index|]
operator|=
name|res
operator|.
name|hasBlocksInFuture
argument_list|()
condition|?
name|res
operator|.
name|getBlocksInFuture
argument_list|()
else|:
literal|0
expr_stmt|;
name|result
index|[
name|ClientProtocol
operator|.
name|GET_STATS_PENDING_DELETION_BLOCKS_IDX
index|]
operator|=
name|res
operator|.
name|getPendingDeletionBlocks
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|convert (DatanodeReportType t)
specifier|public
specifier|static
name|DatanodeReportTypeProto
name|convert
parameter_list|(
name|DatanodeReportType
name|t
parameter_list|)
block|{
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|ALL
case|:
return|return
name|DatanodeReportTypeProto
operator|.
name|ALL
return|;
case|case
name|LIVE
case|:
return|return
name|DatanodeReportTypeProto
operator|.
name|LIVE
return|;
case|case
name|DEAD
case|:
return|return
name|DatanodeReportTypeProto
operator|.
name|DEAD
return|;
case|case
name|DECOMMISSIONING
case|:
return|return
name|DatanodeReportTypeProto
operator|.
name|DECOMMISSIONING
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected data type report:"
operator|+
name|t
argument_list|)
throw|;
block|}
block|}
DECL|method|convert (DirectoryListingProto dl)
specifier|public
specifier|static
name|DirectoryListing
name|convert
parameter_list|(
name|DirectoryListingProto
name|dl
parameter_list|)
block|{
if|if
condition|(
name|dl
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|HdfsFileStatusProto
argument_list|>
name|partList
init|=
name|dl
operator|.
name|getPartialListingList
argument_list|()
decl_stmt|;
return|return
operator|new
name|DirectoryListing
argument_list|(
name|partList
operator|.
name|isEmpty
argument_list|()
condition|?
operator|new
name|HdfsLocatedFileStatus
index|[
literal|0
index|]
else|:
name|convert
argument_list|(
name|partList
operator|.
name|toArray
argument_list|(
operator|new
name|HdfsFileStatusProto
index|[
name|partList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|,
name|dl
operator|.
name|getRemainingEntries
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (HdfsFileStatusProto[] fs)
specifier|public
specifier|static
name|HdfsFileStatus
index|[]
name|convert
parameter_list|(
name|HdfsFileStatusProto
index|[]
name|fs
parameter_list|)
block|{
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|fs
operator|.
name|length
decl_stmt|;
name|HdfsFileStatus
index|[]
name|result
init|=
operator|new
name|HdfsFileStatus
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|fs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// The creatFlag field in PB is a bitmask whose values are the same a the
comment|// emum values of CreateFlag
DECL|method|convertCreateFlag (EnumSetWritable<CreateFlag> flag)
specifier|public
specifier|static
name|int
name|convertCreateFlag
parameter_list|(
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|)
block|{
name|int
name|value
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|flag
operator|.
name|contains
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|)
condition|)
block|{
name|value
operator||=
name|CreateFlagProto
operator|.
name|APPEND
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|flag
operator|.
name|contains
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
condition|)
block|{
name|value
operator||=
name|CreateFlagProto
operator|.
name|CREATE
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|flag
operator|.
name|contains
argument_list|(
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
condition|)
block|{
name|value
operator||=
name|CreateFlagProto
operator|.
name|OVERWRITE
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|flag
operator|.
name|contains
argument_list|(
name|CreateFlag
operator|.
name|LAZY_PERSIST
argument_list|)
condition|)
block|{
name|value
operator||=
name|CreateFlagProto
operator|.
name|LAZY_PERSIST
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|flag
operator|.
name|contains
argument_list|(
name|CreateFlag
operator|.
name|NEW_BLOCK
argument_list|)
condition|)
block|{
name|value
operator||=
name|CreateFlagProto
operator|.
name|NEW_BLOCK
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
DECL|method|convert (FsServerDefaultsProto fs)
specifier|public
specifier|static
name|FsServerDefaults
name|convert
parameter_list|(
name|FsServerDefaultsProto
name|fs
parameter_list|)
block|{
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|FsServerDefaults
argument_list|(
name|fs
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|fs
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|,
name|fs
operator|.
name|getWritePacketSize
argument_list|()
argument_list|,
operator|(
name|short
operator|)
name|fs
operator|.
name|getReplication
argument_list|()
argument_list|,
name|fs
operator|.
name|getFileBufferSize
argument_list|()
argument_list|,
name|fs
operator|.
name|getEncryptDataTransfer
argument_list|()
argument_list|,
name|fs
operator|.
name|getTrashInterval
argument_list|()
argument_list|,
name|convert
argument_list|(
name|fs
operator|.
name|getChecksumType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convert ( CryptoProtocolVersion[] versions)
specifier|public
specifier|static
name|List
argument_list|<
name|CryptoProtocolVersionProto
argument_list|>
name|convert
parameter_list|(
name|CryptoProtocolVersion
index|[]
name|versions
parameter_list|)
block|{
name|List
argument_list|<
name|CryptoProtocolVersionProto
argument_list|>
name|protos
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|versions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|CryptoProtocolVersion
name|v
range|:
name|versions
control|)
block|{
name|protos
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|protos
return|;
block|}
DECL|method|convert (StorageType[][] types)
specifier|static
name|List
argument_list|<
name|StorageTypesProto
argument_list|>
name|convert
parameter_list|(
name|StorageType
index|[]
index|[]
name|types
parameter_list|)
block|{
name|List
argument_list|<
name|StorageTypesProto
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StorageType
index|[]
name|ts
range|:
name|types
control|)
block|{
name|StorageTypesProto
operator|.
name|Builder
name|builder
init|=
name|StorageTypesProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addAllStorageTypes
argument_list|(
name|convertStorageTypes
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
DECL|method|convert (BlockStoragePolicy policy)
specifier|public
specifier|static
name|BlockStoragePolicyProto
name|convert
parameter_list|(
name|BlockStoragePolicy
name|policy
parameter_list|)
block|{
name|BlockStoragePolicyProto
operator|.
name|Builder
name|builder
init|=
name|BlockStoragePolicyProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPolicyId
argument_list|(
name|policy
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|policy
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// creation storage types
name|StorageTypesProto
name|creationProto
init|=
name|convert
argument_list|(
name|policy
operator|.
name|getStorageTypes
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|creationProto
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCreationPolicy
argument_list|(
name|creationProto
argument_list|)
expr_stmt|;
comment|// creation fallback
name|StorageTypesProto
name|creationFallbackProto
init|=
name|convert
argument_list|(
name|policy
operator|.
name|getCreationFallbacks
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|creationFallbackProto
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setCreationFallbackPolicy
argument_list|(
name|creationFallbackProto
argument_list|)
expr_stmt|;
block|}
comment|// replication fallback
name|StorageTypesProto
name|replicationFallbackProto
init|=
name|convert
argument_list|(
name|policy
operator|.
name|getReplicationFallbacks
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicationFallbackProto
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setReplicationFallbackPolicy
argument_list|(
name|replicationFallbackProto
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (StorageType[] types)
specifier|public
specifier|static
name|StorageTypesProto
name|convert
parameter_list|(
name|StorageType
index|[]
name|types
parameter_list|)
block|{
if|if
condition|(
name|types
operator|==
literal|null
operator|||
name|types
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|StorageTypeProto
argument_list|>
name|list
init|=
name|convertStorageTypes
argument_list|(
name|types
argument_list|)
decl_stmt|;
return|return
name|StorageTypesProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllStorageTypes
argument_list|(
name|list
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (DatanodeIDProto[] did)
specifier|public
specifier|static
name|DatanodeID
index|[]
name|convert
parameter_list|(
name|DatanodeIDProto
index|[]
name|did
parameter_list|)
block|{
if|if
condition|(
name|did
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|did
operator|.
name|length
decl_stmt|;
name|DatanodeID
index|[]
name|result
init|=
operator|new
name|DatanodeID
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|did
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// Block
DECL|method|convert (Block b)
specifier|public
specifier|static
name|BlockProto
name|convert
parameter_list|(
name|Block
name|b
parameter_list|)
block|{
return|return
name|BlockProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockId
argument_list|(
name|b
operator|.
name|getBlockId
argument_list|()
argument_list|)
operator|.
name|setGenStamp
argument_list|(
name|b
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
operator|.
name|setNumBytes
argument_list|(
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (BlockProto b)
specifier|public
specifier|static
name|Block
name|convert
parameter_list|(
name|BlockProto
name|b
parameter_list|)
block|{
return|return
operator|new
name|Block
argument_list|(
name|b
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|b
operator|.
name|getGenStamp
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (DatanodeInfoProto di[])
specifier|static
specifier|public
name|DatanodeInfo
index|[]
name|convert
parameter_list|(
name|DatanodeInfoProto
name|di
index|[]
parameter_list|)
block|{
if|if
condition|(
name|di
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|DatanodeInfo
index|[]
name|result
init|=
operator|new
name|DatanodeInfo
index|[
name|di
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|di
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|di
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|convertDatanodeStorageReport ( DatanodeStorageReport report)
specifier|public
specifier|static
name|DatanodeStorageReportProto
name|convertDatanodeStorageReport
parameter_list|(
name|DatanodeStorageReport
name|report
parameter_list|)
block|{
return|return
name|DatanodeStorageReportProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDatanodeInfo
argument_list|(
name|convert
argument_list|(
name|report
operator|.
name|getDatanodeInfo
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addAllStorageReports
argument_list|(
name|convertStorageReports
argument_list|(
name|report
operator|.
name|getStorageReports
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertDatanodeStorageReports ( DatanodeStorageReport[] reports)
specifier|public
specifier|static
name|List
argument_list|<
name|DatanodeStorageReportProto
argument_list|>
name|convertDatanodeStorageReports
parameter_list|(
name|DatanodeStorageReport
index|[]
name|reports
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|DatanodeStorageReportProto
argument_list|>
name|protos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|reports
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeStorageReport
name|report
range|:
name|reports
control|)
block|{
name|protos
operator|.
name|add
argument_list|(
name|convertDatanodeStorageReport
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|protos
return|;
block|}
DECL|method|convertLocatedBlock (LocatedBlockProto[] lb)
specifier|public
specifier|static
name|LocatedBlock
index|[]
name|convertLocatedBlock
parameter_list|(
name|LocatedBlockProto
index|[]
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|convertLocatedBlock
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|lb
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|LocatedBlock
index|[
name|lb
operator|.
name|length
index|]
argument_list|)
return|;
block|}
DECL|method|convert (LocatedBlocks lb)
specifier|public
specifier|static
name|LocatedBlocksProto
name|convert
parameter_list|(
name|LocatedBlocks
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LocatedBlocksProto
operator|.
name|Builder
name|builder
init|=
name|LocatedBlocksProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|lb
operator|.
name|getLastLocatedBlock
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setLastBlock
argument_list|(
name|convertLocatedBlock
argument_list|(
name|lb
operator|.
name|getLastLocatedBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lb
operator|.
name|getFileEncryptionInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setFileEncryptionInfo
argument_list|(
name|convert
argument_list|(
name|lb
operator|.
name|getFileEncryptionInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lb
operator|.
name|getErasureCodingPolicy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setEcPolicy
argument_list|(
name|convertErasureCodingPolicy
argument_list|(
name|lb
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|setFileLength
argument_list|(
name|lb
operator|.
name|getFileLength
argument_list|()
argument_list|)
operator|.
name|setUnderConstruction
argument_list|(
name|lb
operator|.
name|isUnderConstruction
argument_list|()
argument_list|)
operator|.
name|addAllBlocks
argument_list|(
name|convertLocatedBlocks2
argument_list|(
name|lb
operator|.
name|getLocatedBlocks
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setIsLastBlockComplete
argument_list|(
name|lb
operator|.
name|isLastBlockComplete
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (DataEncryptionKey bet)
specifier|public
specifier|static
name|DataEncryptionKeyProto
name|convert
parameter_list|(
name|DataEncryptionKey
name|bet
parameter_list|)
block|{
name|DataEncryptionKeyProto
operator|.
name|Builder
name|b
init|=
name|DataEncryptionKeyProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKeyId
argument_list|(
name|bet
operator|.
name|keyId
argument_list|)
operator|.
name|setBlockPoolId
argument_list|(
name|bet
operator|.
name|blockPoolId
argument_list|)
operator|.
name|setNonce
argument_list|(
name|getByteString
argument_list|(
name|bet
operator|.
name|nonce
argument_list|)
argument_list|)
operator|.
name|setEncryptionKey
argument_list|(
name|getByteString
argument_list|(
name|bet
operator|.
name|encryptionKey
argument_list|)
argument_list|)
operator|.
name|setExpiryDate
argument_list|(
name|bet
operator|.
name|expiryDate
argument_list|)
decl_stmt|;
if|if
condition|(
name|bet
operator|.
name|encryptionAlgorithm
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|setEncryptionAlgorithm
argument_list|(
name|bet
operator|.
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (FsServerDefaults fs)
specifier|public
specifier|static
name|FsServerDefaultsProto
name|convert
parameter_list|(
name|FsServerDefaults
name|fs
parameter_list|)
block|{
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|FsServerDefaultsProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockSize
argument_list|(
name|fs
operator|.
name|getBlockSize
argument_list|()
argument_list|)
operator|.
name|setBytesPerChecksum
argument_list|(
name|fs
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|)
operator|.
name|setWritePacketSize
argument_list|(
name|fs
operator|.
name|getWritePacketSize
argument_list|()
argument_list|)
operator|.
name|setReplication
argument_list|(
name|fs
operator|.
name|getReplication
argument_list|()
argument_list|)
operator|.
name|setFileBufferSize
argument_list|(
name|fs
operator|.
name|getFileBufferSize
argument_list|()
argument_list|)
operator|.
name|setEncryptDataTransfer
argument_list|(
name|fs
operator|.
name|getEncryptDataTransfer
argument_list|()
argument_list|)
operator|.
name|setTrashInterval
argument_list|(
name|fs
operator|.
name|getTrashInterval
argument_list|()
argument_list|)
operator|.
name|setChecksumType
argument_list|(
name|convert
argument_list|(
name|fs
operator|.
name|getChecksumType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertCreateFlag (int flag)
specifier|public
specifier|static
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
name|convertCreateFlag
parameter_list|(
name|int
name|flag
parameter_list|)
block|{
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|result
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|CreateFlag
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|flag
operator|&
name|CreateFlagProto
operator|.
name|APPEND_VALUE
operator|)
operator|==
name|CreateFlagProto
operator|.
name|APPEND_VALUE
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flag
operator|&
name|CreateFlagProto
operator|.
name|CREATE_VALUE
operator|)
operator|==
name|CreateFlagProto
operator|.
name|CREATE_VALUE
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flag
operator|&
name|CreateFlagProto
operator|.
name|OVERWRITE_VALUE
operator|)
operator|==
name|CreateFlagProto
operator|.
name|OVERWRITE_VALUE
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flag
operator|&
name|CreateFlagProto
operator|.
name|LAZY_PERSIST_VALUE
operator|)
operator|==
name|CreateFlagProto
operator|.
name|LAZY_PERSIST_VALUE
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|CreateFlag
operator|.
name|LAZY_PERSIST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flag
operator|&
name|CreateFlagProto
operator|.
name|NEW_BLOCK_VALUE
operator|)
operator|==
name|CreateFlagProto
operator|.
name|NEW_BLOCK_VALUE
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|CreateFlag
operator|.
name|NEW_BLOCK
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|EnumSetWritable
argument_list|<>
argument_list|(
name|result
argument_list|,
name|CreateFlag
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|convertCacheFlags (int flags)
specifier|public
specifier|static
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|convertCacheFlags
parameter_list|(
name|int
name|flags
parameter_list|)
block|{
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|result
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|CacheFlag
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|CacheFlagProto
operator|.
name|FORCE_VALUE
operator|)
operator|==
name|CacheFlagProto
operator|.
name|FORCE_VALUE
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|CacheFlag
operator|.
name|FORCE
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|convert (HdfsFileStatus fs)
specifier|public
specifier|static
name|HdfsFileStatusProto
name|convert
parameter_list|(
name|HdfsFileStatus
name|fs
parameter_list|)
block|{
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|FileType
name|fType
init|=
name|FileType
operator|.
name|IS_FILE
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|fType
operator|=
name|FileType
operator|.
name|IS_DIR
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fs
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
name|fType
operator|=
name|FileType
operator|.
name|IS_SYMLINK
expr_stmt|;
block|}
name|HdfsFileStatusProto
operator|.
name|Builder
name|builder
init|=
name|HdfsFileStatusProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLength
argument_list|(
name|fs
operator|.
name|getLen
argument_list|()
argument_list|)
operator|.
name|setFileType
argument_list|(
name|fType
argument_list|)
operator|.
name|setBlockReplication
argument_list|(
name|fs
operator|.
name|getReplication
argument_list|()
argument_list|)
operator|.
name|setBlocksize
argument_list|(
name|fs
operator|.
name|getBlockSize
argument_list|()
argument_list|)
operator|.
name|setModificationTime
argument_list|(
name|fs
operator|.
name|getModificationTime
argument_list|()
argument_list|)
operator|.
name|setAccessTime
argument_list|(
name|fs
operator|.
name|getAccessTime
argument_list|()
argument_list|)
operator|.
name|setPermission
argument_list|(
name|convert
argument_list|(
name|fs
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setOwner
argument_list|(
name|fs
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|.
name|setGroup
argument_list|(
name|fs
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|setFileId
argument_list|(
name|fs
operator|.
name|getFileId
argument_list|()
argument_list|)
operator|.
name|setChildrenNum
argument_list|(
name|fs
operator|.
name|getChildrenNum
argument_list|()
argument_list|)
operator|.
name|setPath
argument_list|(
name|getByteString
argument_list|(
name|fs
operator|.
name|getLocalNameInBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStoragePolicy
argument_list|(
name|fs
operator|.
name|getStoragePolicy
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setSymlink
argument_list|(
name|getByteString
argument_list|(
name|fs
operator|.
name|getSymlinkInBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fs
operator|.
name|getFileEncryptionInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setFileEncryptionInfo
argument_list|(
name|convert
argument_list|(
name|fs
operator|.
name|getFileEncryptionInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fs
operator|instanceof
name|HdfsLocatedFileStatus
condition|)
block|{
specifier|final
name|HdfsLocatedFileStatus
name|lfs
init|=
operator|(
name|HdfsLocatedFileStatus
operator|)
name|fs
decl_stmt|;
name|LocatedBlocks
name|locations
init|=
name|lfs
operator|.
name|getBlockLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|locations
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setLocations
argument_list|(
name|convert
argument_list|(
name|locations
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setEcPolicy
argument_list|(
name|convertErasureCodingPolicy
argument_list|(
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert ( SnapshottableDirectoryStatus status)
specifier|public
specifier|static
name|SnapshottableDirectoryStatusProto
name|convert
parameter_list|(
name|SnapshottableDirectoryStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|snapshotNumber
init|=
name|status
operator|.
name|getSnapshotNumber
argument_list|()
decl_stmt|;
name|int
name|snapshotQuota
init|=
name|status
operator|.
name|getSnapshotQuota
argument_list|()
decl_stmt|;
name|byte
index|[]
name|parentFullPath
init|=
name|status
operator|.
name|getParentFullPath
argument_list|()
decl_stmt|;
name|ByteString
name|parentFullPathBytes
init|=
name|getByteString
argument_list|(
name|parentFullPath
operator|==
literal|null
condition|?
name|DFSUtilClient
operator|.
name|EMPTY_BYTES
else|:
name|parentFullPath
argument_list|)
decl_stmt|;
name|HdfsFileStatusProto
name|fs
init|=
name|convert
argument_list|(
name|status
operator|.
name|getDirStatus
argument_list|()
argument_list|)
decl_stmt|;
name|SnapshottableDirectoryStatusProto
operator|.
name|Builder
name|builder
init|=
name|SnapshottableDirectoryStatusProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSnapshotNumber
argument_list|(
name|snapshotNumber
argument_list|)
operator|.
name|setSnapshotQuota
argument_list|(
name|snapshotQuota
argument_list|)
operator|.
name|setParentFullpath
argument_list|(
name|parentFullPathBytes
argument_list|)
operator|.
name|setDirStatus
argument_list|(
name|fs
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (HdfsFileStatus[] fs)
specifier|public
specifier|static
name|HdfsFileStatusProto
index|[]
name|convert
parameter_list|(
name|HdfsFileStatus
index|[]
name|fs
parameter_list|)
block|{
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|fs
operator|.
name|length
decl_stmt|;
name|HdfsFileStatusProto
index|[]
name|result
init|=
operator|new
name|HdfsFileStatusProto
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|fs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|convert (DirectoryListing d)
specifier|public
specifier|static
name|DirectoryListingProto
name|convert
parameter_list|(
name|DirectoryListing
name|d
parameter_list|)
block|{
if|if
condition|(
name|d
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|DirectoryListingProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllPartialListing
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|convert
argument_list|(
name|d
operator|.
name|getPartialListing
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setRemainingEntries
argument_list|(
name|d
operator|.
name|getRemainingEntries
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (long[] fsStats)
specifier|public
specifier|static
name|GetFsStatsResponseProto
name|convert
parameter_list|(
name|long
index|[]
name|fsStats
parameter_list|)
block|{
name|GetFsStatsResponseProto
operator|.
name|Builder
name|result
init|=
name|GetFsStatsResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|fsStats
operator|.
name|length
operator|>=
name|ClientProtocol
operator|.
name|GET_STATS_CAPACITY_IDX
operator|+
literal|1
condition|)
name|result
operator|.
name|setCapacity
argument_list|(
name|fsStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_CAPACITY_IDX
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsStats
operator|.
name|length
operator|>=
name|ClientProtocol
operator|.
name|GET_STATS_USED_IDX
operator|+
literal|1
condition|)
name|result
operator|.
name|setUsed
argument_list|(
name|fsStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_USED_IDX
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsStats
operator|.
name|length
operator|>=
name|ClientProtocol
operator|.
name|GET_STATS_REMAINING_IDX
operator|+
literal|1
condition|)
name|result
operator|.
name|setRemaining
argument_list|(
name|fsStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_REMAINING_IDX
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsStats
operator|.
name|length
operator|>=
name|ClientProtocol
operator|.
name|GET_STATS_UNDER_REPLICATED_IDX
operator|+
literal|1
condition|)
name|result
operator|.
name|setUnderReplicated
argument_list|(
name|fsStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_UNDER_REPLICATED_IDX
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsStats
operator|.
name|length
operator|>=
name|ClientProtocol
operator|.
name|GET_STATS_CORRUPT_BLOCKS_IDX
operator|+
literal|1
condition|)
name|result
operator|.
name|setCorruptBlocks
argument_list|(
name|fsStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_CORRUPT_BLOCKS_IDX
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsStats
operator|.
name|length
operator|>=
name|ClientProtocol
operator|.
name|GET_STATS_MISSING_BLOCKS_IDX
operator|+
literal|1
condition|)
name|result
operator|.
name|setMissingBlocks
argument_list|(
name|fsStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_MISSING_BLOCKS_IDX
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsStats
operator|.
name|length
operator|>=
name|ClientProtocol
operator|.
name|GET_STATS_MISSING_REPL_ONE_BLOCKS_IDX
operator|+
literal|1
condition|)
name|result
operator|.
name|setMissingReplOneBlocks
argument_list|(
name|fsStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_MISSING_REPL_ONE_BLOCKS_IDX
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsStats
operator|.
name|length
operator|>=
name|ClientProtocol
operator|.
name|GET_STATS_BYTES_IN_FUTURE_BLOCKS_IDX
operator|+
literal|1
condition|)
block|{
name|result
operator|.
name|setBlocksInFuture
argument_list|(
name|fsStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_BYTES_IN_FUTURE_BLOCKS_IDX
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fsStats
operator|.
name|length
operator|>=
name|ClientProtocol
operator|.
name|GET_STATS_PENDING_DELETION_BLOCKS_IDX
operator|+
literal|1
condition|)
block|{
name|result
operator|.
name|setPendingDeletionBlocks
argument_list|(
name|fsStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_PENDING_DELETION_BLOCKS_IDX
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (DatanodeReportTypeProto t)
specifier|public
specifier|static
name|DatanodeReportType
name|convert
parameter_list|(
name|DatanodeReportTypeProto
name|t
parameter_list|)
block|{
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|ALL
case|:
return|return
name|DatanodeReportType
operator|.
name|ALL
return|;
case|case
name|LIVE
case|:
return|return
name|DatanodeReportType
operator|.
name|LIVE
return|;
case|case
name|DEAD
case|:
return|return
name|DatanodeReportType
operator|.
name|DEAD
return|;
case|case
name|DECOMMISSIONING
case|:
return|return
name|DatanodeReportType
operator|.
name|DECOMMISSIONING
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected data type report:"
operator|+
name|t
argument_list|)
throw|;
block|}
block|}
DECL|method|convert ( SafeModeActionProto a)
specifier|public
specifier|static
name|SafeModeAction
name|convert
parameter_list|(
name|SafeModeActionProto
name|a
parameter_list|)
block|{
switch|switch
condition|(
name|a
condition|)
block|{
case|case
name|SAFEMODE_LEAVE
case|:
return|return
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
return|;
case|case
name|SAFEMODE_ENTER
case|:
return|return
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
return|;
case|case
name|SAFEMODE_GET
case|:
return|return
name|SafeModeAction
operator|.
name|SAFEMODE_GET
return|;
case|case
name|SAFEMODE_FORCE_EXIT
case|:
return|return
name|SafeModeAction
operator|.
name|SAFEMODE_FORCE_EXIT
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected SafeModeAction :"
operator|+
name|a
argument_list|)
throw|;
block|}
block|}
DECL|method|convert (RollingUpgradeActionProto a)
specifier|public
specifier|static
name|RollingUpgradeAction
name|convert
parameter_list|(
name|RollingUpgradeActionProto
name|a
parameter_list|)
block|{
switch|switch
condition|(
name|a
condition|)
block|{
case|case
name|QUERY
case|:
return|return
name|RollingUpgradeAction
operator|.
name|QUERY
return|;
case|case
name|START
case|:
return|return
name|RollingUpgradeAction
operator|.
name|PREPARE
return|;
case|case
name|FINALIZE
case|:
return|return
name|RollingUpgradeAction
operator|.
name|FINALIZE
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected value: "
operator|+
name|a
argument_list|)
throw|;
block|}
block|}
DECL|method|convertRollingUpgradeStatus ( RollingUpgradeStatus status)
specifier|public
specifier|static
name|RollingUpgradeStatusProto
name|convertRollingUpgradeStatus
parameter_list|(
name|RollingUpgradeStatus
name|status
parameter_list|)
block|{
return|return
name|RollingUpgradeStatusProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockPoolId
argument_list|(
name|status
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
operator|.
name|setFinalized
argument_list|(
name|status
operator|.
name|isFinalized
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (RollingUpgradeStatusProto proto)
specifier|public
specifier|static
name|RollingUpgradeStatus
name|convert
parameter_list|(
name|RollingUpgradeStatusProto
name|proto
parameter_list|)
block|{
return|return
operator|new
name|RollingUpgradeStatus
argument_list|(
name|proto
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|proto
operator|.
name|getFinalized
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (RollingUpgradeInfo info)
specifier|public
specifier|static
name|RollingUpgradeInfoProto
name|convert
parameter_list|(
name|RollingUpgradeInfo
name|info
parameter_list|)
block|{
return|return
name|RollingUpgradeInfoProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStatus
argument_list|(
name|convertRollingUpgradeStatus
argument_list|(
name|info
argument_list|)
argument_list|)
operator|.
name|setCreatedRollbackImages
argument_list|(
name|info
operator|.
name|createdRollbackImages
argument_list|()
argument_list|)
operator|.
name|setStartTime
argument_list|(
name|info
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|setFinalizeTime
argument_list|(
name|info
operator|.
name|getFinalizeTime
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (CorruptFileBlocks c)
specifier|public
specifier|static
name|CorruptFileBlocksProto
name|convert
parameter_list|(
name|CorruptFileBlocks
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|CorruptFileBlocksProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllFiles
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|c
operator|.
name|getFiles
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCookie
argument_list|(
name|c
operator|.
name|getCookie
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (ContentSummary cs)
specifier|public
specifier|static
name|ContentSummaryProto
name|convert
parameter_list|(
name|ContentSummary
name|cs
parameter_list|)
block|{
if|if
condition|(
name|cs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ContentSummaryProto
operator|.
name|Builder
name|builder
init|=
name|ContentSummaryProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setLength
argument_list|(
name|cs
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|setFileCount
argument_list|(
name|cs
operator|.
name|getFileCount
argument_list|()
argument_list|)
operator|.
name|setDirectoryCount
argument_list|(
name|cs
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
operator|.
name|setQuota
argument_list|(
name|cs
operator|.
name|getQuota
argument_list|()
argument_list|)
operator|.
name|setSpaceConsumed
argument_list|(
name|cs
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
operator|.
name|setSpaceQuota
argument_list|(
name|cs
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cs
operator|.
name|isTypeQuotaSet
argument_list|()
operator|||
name|cs
operator|.
name|isTypeConsumedAvailable
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setTypeQuotaInfos
argument_list|(
name|getBuilder
argument_list|(
name|cs
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|addStorageTypes ( HdfsProtos.StorageTypeQuotaInfosProto typeQuotaInfos, QuotaUsage.Builder builder)
specifier|private
specifier|static
name|void
name|addStorageTypes
parameter_list|(
name|HdfsProtos
operator|.
name|StorageTypeQuotaInfosProto
name|typeQuotaInfos
parameter_list|,
name|QuotaUsage
operator|.
name|Builder
name|builder
parameter_list|)
block|{
for|for
control|(
name|HdfsProtos
operator|.
name|StorageTypeQuotaInfoProto
name|info
range|:
name|typeQuotaInfos
operator|.
name|getTypeQuotaInfoList
argument_list|()
control|)
block|{
name|StorageType
name|type
init|=
name|convertStorageType
argument_list|(
name|info
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|typeConsumed
argument_list|(
name|type
argument_list|,
name|info
operator|.
name|getConsumed
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|typeQuota
argument_list|(
name|type
argument_list|,
name|info
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getBuilder ( QuotaUsage qu)
specifier|private
specifier|static
name|HdfsProtos
operator|.
name|StorageTypeQuotaInfosProto
operator|.
name|Builder
name|getBuilder
parameter_list|(
name|QuotaUsage
name|qu
parameter_list|)
block|{
name|HdfsProtos
operator|.
name|StorageTypeQuotaInfosProto
operator|.
name|Builder
name|isb
init|=
name|HdfsProtos
operator|.
name|StorageTypeQuotaInfosProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageType
name|t
range|:
name|StorageType
operator|.
name|getTypesSupportingQuota
argument_list|()
control|)
block|{
name|HdfsProtos
operator|.
name|StorageTypeQuotaInfoProto
name|info
init|=
name|HdfsProtos
operator|.
name|StorageTypeQuotaInfoProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|convertStorageType
argument_list|(
name|t
argument_list|)
argument_list|)
operator|.
name|setConsumed
argument_list|(
name|qu
operator|.
name|getTypeConsumed
argument_list|(
name|t
argument_list|)
argument_list|)
operator|.
name|setQuota
argument_list|(
name|qu
operator|.
name|getTypeQuota
argument_list|(
name|t
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|isb
operator|.
name|addTypeQuotaInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|isb
return|;
block|}
DECL|method|convert (DatanodeStorage s)
specifier|public
specifier|static
name|DatanodeStorageProto
name|convert
parameter_list|(
name|DatanodeStorage
name|s
parameter_list|)
block|{
return|return
name|DatanodeStorageProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setState
argument_list|(
name|convertState
argument_list|(
name|s
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStorageType
argument_list|(
name|convertStorageType
argument_list|(
name|s
operator|.
name|getStorageType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStorageUuid
argument_list|(
name|s
operator|.
name|getStorageID
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertState (State state)
specifier|private
specifier|static
name|StorageState
name|convertState
parameter_list|(
name|State
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|READ_ONLY_SHARED
case|:
return|return
name|StorageState
operator|.
name|READ_ONLY_SHARED
return|;
case|case
name|NORMAL
case|:
default|default:
return|return
name|StorageState
operator|.
name|NORMAL
return|;
block|}
block|}
DECL|method|convert (StorageReport r)
specifier|public
specifier|static
name|StorageReportProto
name|convert
parameter_list|(
name|StorageReport
name|r
parameter_list|)
block|{
name|StorageReportProto
operator|.
name|Builder
name|builder
init|=
name|StorageReportProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockPoolUsed
argument_list|(
name|r
operator|.
name|getBlockPoolUsed
argument_list|()
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|r
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|.
name|setDfsUsed
argument_list|(
name|r
operator|.
name|getDfsUsed
argument_list|()
argument_list|)
operator|.
name|setRemaining
argument_list|(
name|r
operator|.
name|getRemaining
argument_list|()
argument_list|)
operator|.
name|setStorageUuid
argument_list|(
name|r
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageID
argument_list|()
argument_list|)
operator|.
name|setStorage
argument_list|(
name|convert
argument_list|(
name|r
operator|.
name|getStorage
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertStorageReports ( StorageReport[] storages)
specifier|public
specifier|static
name|List
argument_list|<
name|StorageReportProto
argument_list|>
name|convertStorageReports
parameter_list|(
name|StorageReport
index|[]
name|storages
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|StorageReportProto
argument_list|>
name|protos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|storages
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|StorageReport
name|storage
range|:
name|storages
control|)
block|{
name|protos
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|storage
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|protos
return|;
block|}
DECL|method|convert ( SnapshottableDirectoryStatus[] status)
specifier|public
specifier|static
name|SnapshottableDirectoryListingProto
name|convert
parameter_list|(
name|SnapshottableDirectoryStatus
index|[]
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|SnapshottableDirectoryStatusProto
index|[]
name|protos
init|=
operator|new
name|SnapshottableDirectoryStatusProto
index|[
name|status
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|protos
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|status
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|SnapshottableDirectoryStatusProto
argument_list|>
name|protoList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|protos
argument_list|)
decl_stmt|;
return|return
name|SnapshottableDirectoryListingProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllSnapshottableDirListing
argument_list|(
name|protoList
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (DiffReportEntry entry)
specifier|public
specifier|static
name|SnapshotDiffReportEntryProto
name|convert
parameter_list|(
name|DiffReportEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ByteString
name|sourcePath
init|=
name|getByteString
argument_list|(
name|entry
operator|.
name|getSourcePath
argument_list|()
operator|==
literal|null
condition|?
name|DFSUtilClient
operator|.
name|EMPTY_BYTES
else|:
name|entry
operator|.
name|getSourcePath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|modification
init|=
name|entry
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
decl_stmt|;
name|SnapshotDiffReportEntryProto
operator|.
name|Builder
name|builder
init|=
name|SnapshotDiffReportEntryProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setFullpath
argument_list|(
name|sourcePath
argument_list|)
operator|.
name|setModificationLabel
argument_list|(
name|modification
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getType
argument_list|()
operator|==
name|DiffType
operator|.
name|RENAME
condition|)
block|{
name|ByteString
name|targetPath
init|=
name|getByteString
argument_list|(
name|entry
operator|.
name|getTargetPath
argument_list|()
operator|==
literal|null
condition|?
name|DFSUtilClient
operator|.
name|EMPTY_BYTES
else|:
name|entry
operator|.
name|getTargetPath
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setTargetPath
argument_list|(
name|targetPath
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (SnapshotDiffReport report)
specifier|public
specifier|static
name|SnapshotDiffReportProto
name|convert
parameter_list|(
name|SnapshotDiffReport
name|report
parameter_list|)
block|{
if|if
condition|(
name|report
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|entries
init|=
name|report
operator|.
name|getDiffList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SnapshotDiffReportEntryProto
argument_list|>
name|entryProtos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DiffReportEntry
name|entry
range|:
name|entries
control|)
block|{
name|SnapshotDiffReportEntryProto
name|entryProto
init|=
name|convert
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryProto
operator|!=
literal|null
condition|)
name|entryProtos
operator|.
name|add
argument_list|(
name|entryProto
argument_list|)
expr_stmt|;
block|}
return|return
name|SnapshotDiffReportProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSnapshotRoot
argument_list|(
name|report
operator|.
name|getSnapshotRoot
argument_list|()
argument_list|)
operator|.
name|setFromSnapshot
argument_list|(
name|report
operator|.
name|getFromSnapshot
argument_list|()
argument_list|)
operator|.
name|setToSnapshot
argument_list|(
name|report
operator|.
name|getLaterSnapshotName
argument_list|()
argument_list|)
operator|.
name|addAllDiffReportEntries
argument_list|(
name|entryProtos
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (CacheDirectiveStats stats)
specifier|public
specifier|static
name|CacheDirectiveStatsProto
name|convert
parameter_list|(
name|CacheDirectiveStats
name|stats
parameter_list|)
block|{
name|CacheDirectiveStatsProto
operator|.
name|Builder
name|builder
init|=
name|CacheDirectiveStatsProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setBytesNeeded
argument_list|(
name|stats
operator|.
name|getBytesNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setBytesCached
argument_list|(
name|stats
operator|.
name|getBytesCached
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setFilesNeeded
argument_list|(
name|stats
operator|.
name|getFilesNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setFilesCached
argument_list|(
name|stats
operator|.
name|getFilesCached
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setHasExpired
argument_list|(
name|stats
operator|.
name|hasExpired
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (CacheDirectiveEntry entry)
specifier|public
specifier|static
name|CacheDirectiveEntryProto
name|convert
parameter_list|(
name|CacheDirectiveEntry
name|entry
parameter_list|)
block|{
name|CacheDirectiveEntryProto
operator|.
name|Builder
name|builder
init|=
name|CacheDirectiveEntryProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setInfo
argument_list|(
name|convert
argument_list|(
name|entry
operator|.
name|getInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStats
argument_list|(
name|convert
argument_list|(
name|entry
operator|.
name|getStats
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertBooleanList ( List<Boolean> targetPinningsList)
specifier|public
specifier|static
name|boolean
index|[]
name|convertBooleanList
parameter_list|(
name|List
argument_list|<
name|Boolean
argument_list|>
name|targetPinningsList
parameter_list|)
block|{
specifier|final
name|boolean
index|[]
name|targetPinnings
init|=
operator|new
name|boolean
index|[
name|targetPinningsList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targetPinningsList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|targetPinnings
index|[
name|i
index|]
operator|=
name|targetPinningsList
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|targetPinnings
return|;
block|}
DECL|method|convert (CachePoolStats stats)
specifier|public
specifier|static
name|CachePoolStatsProto
name|convert
parameter_list|(
name|CachePoolStats
name|stats
parameter_list|)
block|{
name|CachePoolStatsProto
operator|.
name|Builder
name|builder
init|=
name|CachePoolStatsProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setBytesNeeded
argument_list|(
name|stats
operator|.
name|getBytesNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setBytesCached
argument_list|(
name|stats
operator|.
name|getBytesCached
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setBytesOverlimit
argument_list|(
name|stats
operator|.
name|getBytesOverlimit
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setFilesNeeded
argument_list|(
name|stats
operator|.
name|getFilesNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setFilesCached
argument_list|(
name|stats
operator|.
name|getFilesCached
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (CachePoolEntry entry)
specifier|public
specifier|static
name|CachePoolEntryProto
name|convert
parameter_list|(
name|CachePoolEntry
name|entry
parameter_list|)
block|{
name|CachePoolEntryProto
operator|.
name|Builder
name|builder
init|=
name|CachePoolEntryProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setInfo
argument_list|(
name|convert
argument_list|(
name|entry
operator|.
name|getInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStats
argument_list|(
name|convert
argument_list|(
name|entry
operator|.
name|getStats
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (DatanodeLocalInfo info)
specifier|public
specifier|static
name|DatanodeLocalInfoProto
name|convert
parameter_list|(
name|DatanodeLocalInfo
name|info
parameter_list|)
block|{
name|DatanodeLocalInfoProto
operator|.
name|Builder
name|builder
init|=
name|DatanodeLocalInfoProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setSoftwareVersion
argument_list|(
name|info
operator|.
name|getSoftwareVersion
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setConfigVersion
argument_list|(
name|info
operator|.
name|getConfigVersion
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setUptime
argument_list|(
name|info
operator|.
name|getUptime
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (AclStatus e)
specifier|public
specifier|static
name|GetAclStatusResponseProto
name|convert
parameter_list|(
name|AclStatus
name|e
parameter_list|)
block|{
name|AclStatusProto
operator|.
name|Builder
name|builder
init|=
name|AclStatusProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setOwner
argument_list|(
name|e
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|.
name|setGroup
argument_list|(
name|e
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|setSticky
argument_list|(
name|e
operator|.
name|isStickyBit
argument_list|()
argument_list|)
operator|.
name|addAllEntries
argument_list|(
name|convertAclEntryProto
argument_list|(
name|e
operator|.
name|getEntries
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getPermission
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPermission
argument_list|(
name|convert
argument_list|(
name|e
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AclStatusProto
name|r
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|GetAclStatusResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResult
argument_list|(
name|r
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (int flag)
specifier|public
specifier|static
name|EnumSet
argument_list|<
name|XAttrSetFlag
argument_list|>
name|convert
parameter_list|(
name|int
name|flag
parameter_list|)
block|{
name|EnumSet
argument_list|<
name|XAttrSetFlag
argument_list|>
name|result
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|XAttrSetFlag
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|flag
operator|&
name|XAttrSetFlagProto
operator|.
name|XATTR_CREATE_VALUE
operator|)
operator|==
name|XAttrSetFlagProto
operator|.
name|XATTR_CREATE_VALUE
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flag
operator|&
name|XAttrSetFlagProto
operator|.
name|XATTR_REPLACE_VALUE
operator|)
operator|==
name|XAttrSetFlagProto
operator|.
name|XATTR_REPLACE_VALUE
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|XAttrSetFlag
operator|.
name|REPLACE
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|convertXAttr (XAttrProto a)
specifier|public
specifier|static
name|XAttr
name|convertXAttr
parameter_list|(
name|XAttrProto
name|a
parameter_list|)
block|{
name|XAttr
operator|.
name|Builder
name|builder
init|=
operator|new
name|XAttr
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNameSpace
argument_list|(
name|convert
argument_list|(
name|a
operator|.
name|getNamespace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|hasName
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setName
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|.
name|hasValue
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setValue
argument_list|(
name|a
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertXAttrsResponse ( List<XAttr> xAttrs)
specifier|public
specifier|static
name|GetXAttrsResponseProto
name|convertXAttrsResponse
parameter_list|(
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
parameter_list|)
block|{
name|GetXAttrsResponseProto
operator|.
name|Builder
name|builder
init|=
name|GetXAttrsResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|xAttrs
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAllXAttrs
argument_list|(
name|convertXAttrProto
argument_list|(
name|xAttrs
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertListXAttrsResponse ( List<XAttr> names)
specifier|public
specifier|static
name|ListXAttrsResponseProto
name|convertListXAttrsResponse
parameter_list|(
name|List
argument_list|<
name|XAttr
argument_list|>
name|names
parameter_list|)
block|{
name|ListXAttrsResponseProto
operator|.
name|Builder
name|builder
init|=
name|ListXAttrsResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|names
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAllXAttrs
argument_list|(
name|convertXAttrProto
argument_list|(
name|names
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (EncryptionZone zone)
specifier|public
specifier|static
name|EncryptionZoneProto
name|convert
parameter_list|(
name|EncryptionZone
name|zone
parameter_list|)
block|{
return|return
name|EncryptionZoneProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setId
argument_list|(
name|zone
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setPath
argument_list|(
name|zone
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|setSuite
argument_list|(
name|convert
argument_list|(
name|zone
operator|.
name|getSuite
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCryptoProtocolVersion
argument_list|(
name|convert
argument_list|(
name|zone
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|zone
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (ShortCircuitShmSlotProto slotId)
specifier|public
specifier|static
name|SlotId
name|convert
parameter_list|(
name|ShortCircuitShmSlotProto
name|slotId
parameter_list|)
block|{
return|return
operator|new
name|SlotId
argument_list|(
name|convert
argument_list|(
name|slotId
operator|.
name|getShmId
argument_list|()
argument_list|)
argument_list|,
name|slotId
operator|.
name|getSlotIdx
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convertEditsResponse ( EventBatchList el)
specifier|public
specifier|static
name|GetEditsFromTxidResponseProto
name|convertEditsResponse
parameter_list|(
name|EventBatchList
name|el
parameter_list|)
block|{
name|InotifyProtos
operator|.
name|EventsListProto
operator|.
name|Builder
name|builder
init|=
name|InotifyProtos
operator|.
name|EventsListProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|EventBatch
name|b
range|:
name|el
operator|.
name|getBatches
argument_list|()
control|)
block|{
name|List
argument_list|<
name|InotifyProtos
operator|.
name|EventProto
argument_list|>
name|events
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Event
name|e
range|:
name|b
operator|.
name|getEvents
argument_list|()
control|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getEventType
argument_list|()
condition|)
block|{
case|case
name|CLOSE
case|:
name|Event
operator|.
name|CloseEvent
name|ce
init|=
operator|(
name|Event
operator|.
name|CloseEvent
operator|)
name|e
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
name|InotifyProtos
operator|.
name|EventProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|InotifyProtos
operator|.
name|EventType
operator|.
name|EVENT_CLOSE
argument_list|)
operator|.
name|setContents
argument_list|(
name|InotifyProtos
operator|.
name|CloseEventProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPath
argument_list|(
name|ce
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|setFileSize
argument_list|(
name|ce
operator|.
name|getFileSize
argument_list|()
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|ce
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CREATE
case|:
name|Event
operator|.
name|CreateEvent
name|ce2
init|=
operator|(
name|Event
operator|.
name|CreateEvent
operator|)
name|e
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
name|InotifyProtos
operator|.
name|EventProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|InotifyProtos
operator|.
name|EventType
operator|.
name|EVENT_CREATE
argument_list|)
operator|.
name|setContents
argument_list|(
name|InotifyProtos
operator|.
name|CreateEventProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|createTypeConvert
argument_list|(
name|ce2
operator|.
name|getiNodeType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setPath
argument_list|(
name|ce2
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|setCtime
argument_list|(
name|ce2
operator|.
name|getCtime
argument_list|()
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|ce2
operator|.
name|getOwnerName
argument_list|()
argument_list|)
operator|.
name|setGroupName
argument_list|(
name|ce2
operator|.
name|getGroupName
argument_list|()
argument_list|)
operator|.
name|setPerms
argument_list|(
name|convert
argument_list|(
name|ce2
operator|.
name|getPerms
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setReplication
argument_list|(
name|ce2
operator|.
name|getReplication
argument_list|()
argument_list|)
operator|.
name|setSymlinkTarget
argument_list|(
name|ce2
operator|.
name|getSymlinkTarget
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|ce2
operator|.
name|getSymlinkTarget
argument_list|()
argument_list|)
operator|.
name|setDefaultBlockSize
argument_list|(
name|ce2
operator|.
name|getDefaultBlockSize
argument_list|()
argument_list|)
operator|.
name|setOverwrite
argument_list|(
name|ce2
operator|.
name|getOverwrite
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|METADATA
case|:
name|Event
operator|.
name|MetadataUpdateEvent
name|me
init|=
operator|(
name|Event
operator|.
name|MetadataUpdateEvent
operator|)
name|e
decl_stmt|;
name|InotifyProtos
operator|.
name|MetadataUpdateEventProto
operator|.
name|Builder
name|metaB
init|=
name|InotifyProtos
operator|.
name|MetadataUpdateEventProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPath
argument_list|(
name|me
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|metadataUpdateTypeConvert
argument_list|(
name|me
operator|.
name|getMetadataType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMtime
argument_list|(
name|me
operator|.
name|getMtime
argument_list|()
argument_list|)
operator|.
name|setAtime
argument_list|(
name|me
operator|.
name|getAtime
argument_list|()
argument_list|)
operator|.
name|setReplication
argument_list|(
name|me
operator|.
name|getReplication
argument_list|()
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|me
operator|.
name|getOwnerName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|me
operator|.
name|getOwnerName
argument_list|()
argument_list|)
operator|.
name|setGroupName
argument_list|(
name|me
operator|.
name|getGroupName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|me
operator|.
name|getGroupName
argument_list|()
argument_list|)
operator|.
name|addAllAcls
argument_list|(
name|me
operator|.
name|getAcls
argument_list|()
operator|==
literal|null
condition|?
name|Lists
operator|.
expr|<
name|AclEntryProto
operator|>
name|newArrayList
argument_list|()
else|:
name|convertAclEntryProto
argument_list|(
name|me
operator|.
name|getAcls
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addAllXAttrs
argument_list|(
name|me
operator|.
name|getxAttrs
argument_list|()
operator|==
literal|null
condition|?
name|Lists
operator|.
expr|<
name|XAttrProto
operator|>
name|newArrayList
argument_list|()
else|:
name|convertXAttrProto
argument_list|(
name|me
operator|.
name|getxAttrs
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setXAttrsRemoved
argument_list|(
name|me
operator|.
name|isxAttrsRemoved
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|me
operator|.
name|getPerms
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|metaB
operator|.
name|setPerms
argument_list|(
name|convert
argument_list|(
name|me
operator|.
name|getPerms
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|events
operator|.
name|add
argument_list|(
name|InotifyProtos
operator|.
name|EventProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|InotifyProtos
operator|.
name|EventType
operator|.
name|EVENT_METADATA
argument_list|)
operator|.
name|setContents
argument_list|(
name|metaB
operator|.
name|build
argument_list|()
operator|.
name|toByteString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|RENAME
case|:
name|Event
operator|.
name|RenameEvent
name|re
init|=
operator|(
name|Event
operator|.
name|RenameEvent
operator|)
name|e
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
name|InotifyProtos
operator|.
name|EventProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|InotifyProtos
operator|.
name|EventType
operator|.
name|EVENT_RENAME
argument_list|)
operator|.
name|setContents
argument_list|(
name|InotifyProtos
operator|.
name|RenameEventProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSrcPath
argument_list|(
name|re
operator|.
name|getSrcPath
argument_list|()
argument_list|)
operator|.
name|setDestPath
argument_list|(
name|re
operator|.
name|getDstPath
argument_list|()
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|re
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|APPEND
case|:
name|Event
operator|.
name|AppendEvent
name|re2
init|=
operator|(
name|Event
operator|.
name|AppendEvent
operator|)
name|e
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
name|InotifyProtos
operator|.
name|EventProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|InotifyProtos
operator|.
name|EventType
operator|.
name|EVENT_APPEND
argument_list|)
operator|.
name|setContents
argument_list|(
name|InotifyProtos
operator|.
name|AppendEventProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPath
argument_list|(
name|re2
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|setNewBlock
argument_list|(
name|re2
operator|.
name|toNewBlock
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNLINK
case|:
name|Event
operator|.
name|UnlinkEvent
name|ue
init|=
operator|(
name|Event
operator|.
name|UnlinkEvent
operator|)
name|e
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
name|InotifyProtos
operator|.
name|EventProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|InotifyProtos
operator|.
name|EventType
operator|.
name|EVENT_UNLINK
argument_list|)
operator|.
name|setContents
argument_list|(
name|InotifyProtos
operator|.
name|UnlinkEventProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPath
argument_list|(
name|ue
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|ue
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRUNCATE
case|:
name|Event
operator|.
name|TruncateEvent
name|te
init|=
operator|(
name|Event
operator|.
name|TruncateEvent
operator|)
name|e
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
name|InotifyProtos
operator|.
name|EventProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|InotifyProtos
operator|.
name|EventType
operator|.
name|EVENT_TRUNCATE
argument_list|)
operator|.
name|setContents
argument_list|(
name|InotifyProtos
operator|.
name|TruncateEventProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPath
argument_list|(
name|te
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|setFileSize
argument_list|(
name|te
operator|.
name|getFileSize
argument_list|()
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|te
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected inotify event: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
name|builder
operator|.
name|addBatch
argument_list|(
name|InotifyProtos
operator|.
name|EventBatchProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTxid
argument_list|(
name|b
operator|.
name|getTxid
argument_list|()
argument_list|)
operator|.
name|addAllEvents
argument_list|(
name|events
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setFirstTxid
argument_list|(
name|el
operator|.
name|getFirstTxid
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLastTxid
argument_list|(
name|el
operator|.
name|getLastTxid
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSyncTxid
argument_list|(
name|el
operator|.
name|getSyncTxid
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|GetEditsFromTxidResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setEventsList
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertCryptoProtocolVersions ( List<CryptoProtocolVersionProto> protos)
specifier|public
specifier|static
name|CryptoProtocolVersion
index|[]
name|convertCryptoProtocolVersions
parameter_list|(
name|List
argument_list|<
name|CryptoProtocolVersionProto
argument_list|>
name|protos
parameter_list|)
block|{
name|List
argument_list|<
name|CryptoProtocolVersion
argument_list|>
name|versions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|protos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CryptoProtocolVersionProto
name|p
range|:
name|protos
control|)
block|{
name|versions
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|versions
operator|.
name|toArray
argument_list|(
operator|new
name|CryptoProtocolVersion
index|[]
block|{}
argument_list|)
return|;
block|}
DECL|method|convertPerFileEncInfo ( FileEncryptionInfo info)
specifier|public
specifier|static
name|HdfsProtos
operator|.
name|PerFileEncryptionInfoProto
name|convertPerFileEncInfo
parameter_list|(
name|FileEncryptionInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|HdfsProtos
operator|.
name|PerFileEncryptionInfoProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|getByteString
argument_list|(
name|info
operator|.
name|getEncryptedDataEncryptionKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setIv
argument_list|(
name|getByteString
argument_list|(
name|info
operator|.
name|getIV
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setEzKeyVersionName
argument_list|(
name|info
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert ( CipherSuite suite, CryptoProtocolVersion version, String keyName)
specifier|public
specifier|static
name|HdfsProtos
operator|.
name|ZoneEncryptionInfoProto
name|convert
parameter_list|(
name|CipherSuite
name|suite
parameter_list|,
name|CryptoProtocolVersion
name|version
parameter_list|,
name|String
name|keyName
parameter_list|)
block|{
if|if
condition|(
name|suite
operator|==
literal|null
operator|||
name|version
operator|==
literal|null
operator|||
name|keyName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|HdfsProtos
operator|.
name|ZoneEncryptionInfoProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSuite
argument_list|(
name|convert
argument_list|(
name|suite
argument_list|)
argument_list|)
operator|.
name|setCryptoProtocolVersion
argument_list|(
name|convert
argument_list|(
name|version
argument_list|)
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert ( HdfsProtos.PerFileEncryptionInfoProto fileProto, CipherSuite suite, CryptoProtocolVersion version, String keyName)
specifier|public
specifier|static
name|FileEncryptionInfo
name|convert
parameter_list|(
name|HdfsProtos
operator|.
name|PerFileEncryptionInfoProto
name|fileProto
parameter_list|,
name|CipherSuite
name|suite
parameter_list|,
name|CryptoProtocolVersion
name|version
parameter_list|,
name|String
name|keyName
parameter_list|)
block|{
if|if
condition|(
name|fileProto
operator|==
literal|null
operator|||
name|suite
operator|==
literal|null
operator|||
name|version
operator|==
literal|null
operator|||
name|keyName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|key
init|=
name|fileProto
operator|.
name|getKey
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|iv
init|=
name|fileProto
operator|.
name|getIv
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|ezKeyVersionName
init|=
name|fileProto
operator|.
name|getEzKeyVersionName
argument_list|()
decl_stmt|;
return|return
operator|new
name|FileEncryptionInfo
argument_list|(
name|suite
argument_list|,
name|version
argument_list|,
name|key
argument_list|,
name|iv
argument_list|,
name|keyName
argument_list|,
name|ezKeyVersionName
argument_list|)
return|;
block|}
DECL|method|convert (DatanodeInfosProto datanodeInfosProto)
specifier|public
specifier|static
name|DatanodeInfo
index|[]
name|convert
parameter_list|(
name|DatanodeInfosProto
name|datanodeInfosProto
parameter_list|)
block|{
name|List
argument_list|<
name|DatanodeInfoProto
argument_list|>
name|proto
init|=
name|datanodeInfosProto
operator|.
name|getDatanodesList
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|infos
init|=
operator|new
name|DatanodeInfo
index|[
name|proto
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|infos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|infos
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|proto
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|infos
return|;
block|}
DECL|method|convert (DatanodeInfo[][] targets)
specifier|static
name|List
argument_list|<
name|DatanodeInfosProto
argument_list|>
name|convert
parameter_list|(
name|DatanodeInfo
index|[]
index|[]
name|targets
parameter_list|)
block|{
name|DatanodeInfosProto
index|[]
name|ret
init|=
operator|new
name|DatanodeInfosProto
index|[
name|targets
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|DatanodeInfosProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllDatanodes
argument_list|(
name|convert
argument_list|(
name|targets
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|ret
argument_list|)
return|;
block|}
DECL|method|convertECSchema (HdfsProtos.ECSchemaProto schema)
specifier|public
specifier|static
name|ECSchema
name|convertECSchema
parameter_list|(
name|HdfsProtos
operator|.
name|ECSchemaProto
name|schema
parameter_list|)
block|{
name|List
argument_list|<
name|HdfsProtos
operator|.
name|ECSchemaOptionEntryProto
argument_list|>
name|optionsList
init|=
name|schema
operator|.
name|getOptionsList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|optionsList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HdfsProtos
operator|.
name|ECSchemaOptionEntryProto
name|option
range|:
name|optionsList
control|)
block|{
name|options
operator|.
name|put
argument_list|(
name|option
operator|.
name|getKey
argument_list|()
argument_list|,
name|option
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ECSchema
argument_list|(
name|schema
operator|.
name|getCodecName
argument_list|()
argument_list|,
name|schema
operator|.
name|getDataUnits
argument_list|()
argument_list|,
name|schema
operator|.
name|getParityUnits
argument_list|()
argument_list|,
name|options
argument_list|)
return|;
block|}
DECL|method|convertECSchema (ECSchema schema)
specifier|public
specifier|static
name|HdfsProtos
operator|.
name|ECSchemaProto
name|convertECSchema
parameter_list|(
name|ECSchema
name|schema
parameter_list|)
block|{
name|HdfsProtos
operator|.
name|ECSchemaProto
operator|.
name|Builder
name|builder
init|=
name|HdfsProtos
operator|.
name|ECSchemaProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCodecName
argument_list|(
name|schema
operator|.
name|getCodecName
argument_list|()
argument_list|)
operator|.
name|setDataUnits
argument_list|(
name|schema
operator|.
name|getNumDataUnits
argument_list|()
argument_list|)
operator|.
name|setParityUnits
argument_list|(
name|schema
operator|.
name|getNumParityUnits
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entrySet
init|=
name|schema
operator|.
name|getExtraOptions
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entrySet
control|)
block|{
name|builder
operator|.
name|addOptions
argument_list|(
name|HdfsProtos
operator|.
name|ECSchemaOptionEntryProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertErasureCodingPolicy ( ErasureCodingPolicyProto policy)
specifier|public
specifier|static
name|ErasureCodingPolicy
name|convertErasureCodingPolicy
parameter_list|(
name|ErasureCodingPolicyProto
name|policy
parameter_list|)
block|{
return|return
operator|new
name|ErasureCodingPolicy
argument_list|(
name|policy
operator|.
name|getName
argument_list|()
argument_list|,
name|convertECSchema
argument_list|(
name|policy
operator|.
name|getSchema
argument_list|()
argument_list|)
argument_list|,
name|policy
operator|.
name|getCellSize
argument_list|()
argument_list|,
operator|(
name|byte
operator|)
name|policy
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convertErasureCodingPolicy ( ErasureCodingPolicy policy)
specifier|public
specifier|static
name|ErasureCodingPolicyProto
name|convertErasureCodingPolicy
parameter_list|(
name|ErasureCodingPolicy
name|policy
parameter_list|)
block|{
name|ErasureCodingPolicyProto
operator|.
name|Builder
name|builder
init|=
name|ErasureCodingPolicyProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|policy
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setSchema
argument_list|(
name|convertECSchema
argument_list|(
name|policy
operator|.
name|getSchema
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCellSize
argument_list|(
name|policy
operator|.
name|getCellSize
argument_list|()
argument_list|)
operator|.
name|setId
argument_list|(
name|policy
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertToProto ( DatanodeInfo[] datanodeInfos)
specifier|public
specifier|static
name|HdfsProtos
operator|.
name|DatanodeInfosProto
name|convertToProto
parameter_list|(
name|DatanodeInfo
index|[]
name|datanodeInfos
parameter_list|)
block|{
name|HdfsProtos
operator|.
name|DatanodeInfosProto
operator|.
name|Builder
name|builder
init|=
name|HdfsProtos
operator|.
name|DatanodeInfosProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|datanodeInfo
range|:
name|datanodeInfos
control|)
block|{
name|builder
operator|.
name|addDatanodes
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|datanodeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertAddBlockFlags ( List<AddBlockFlagProto> addBlockFlags)
specifier|public
specifier|static
name|EnumSet
argument_list|<
name|AddBlockFlag
argument_list|>
name|convertAddBlockFlags
parameter_list|(
name|List
argument_list|<
name|AddBlockFlagProto
argument_list|>
name|addBlockFlags
parameter_list|)
block|{
name|EnumSet
argument_list|<
name|AddBlockFlag
argument_list|>
name|flags
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|AddBlockFlag
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|AddBlockFlagProto
name|af
range|:
name|addBlockFlags
control|)
block|{
name|AddBlockFlag
name|flag
init|=
name|AddBlockFlag
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
name|af
operator|.
name|getNumber
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|flag
operator|!=
literal|null
condition|)
block|{
name|flags
operator|.
name|add
argument_list|(
name|flag
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|flags
return|;
block|}
DECL|method|convertAddBlockFlags ( EnumSet<AddBlockFlag> flags)
specifier|public
specifier|static
name|List
argument_list|<
name|AddBlockFlagProto
argument_list|>
name|convertAddBlockFlags
parameter_list|(
name|EnumSet
argument_list|<
name|AddBlockFlag
argument_list|>
name|flags
parameter_list|)
block|{
name|List
argument_list|<
name|AddBlockFlagProto
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AddBlockFlag
name|flag
range|:
name|flags
control|)
block|{
name|AddBlockFlagProto
name|abfp
init|=
name|AddBlockFlagProto
operator|.
name|valueOf
argument_list|(
name|flag
operator|.
name|getMode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|abfp
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|abfp
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

