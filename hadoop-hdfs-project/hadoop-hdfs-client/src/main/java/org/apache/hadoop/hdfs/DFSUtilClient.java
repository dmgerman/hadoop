begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_class
DECL|class|DFSUtilClient
specifier|public
class|class
name|DFSUtilClient
block|{
comment|/**    * Converts a byte array to a string using UTF8 encoding.    */
DECL|method|bytes2String (byte[] bytes)
specifier|public
specifier|static
name|String
name|bytes2String
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|bytes2String
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
comment|/** Return used as percentage of capacity */
DECL|method|getPercentUsed (long used, long capacity)
specifier|public
specifier|static
name|float
name|getPercentUsed
parameter_list|(
name|long
name|used
parameter_list|,
name|long
name|capacity
parameter_list|)
block|{
return|return
name|capacity
operator|<=
literal|0
condition|?
literal|100
else|:
operator|(
name|used
operator|*
literal|100.0f
operator|)
operator|/
name|capacity
return|;
block|}
comment|/** Return remaining as percentage of capacity */
DECL|method|getPercentRemaining (long remaining, long capacity)
specifier|public
specifier|static
name|float
name|getPercentRemaining
parameter_list|(
name|long
name|remaining
parameter_list|,
name|long
name|capacity
parameter_list|)
block|{
return|return
name|capacity
operator|<=
literal|0
condition|?
literal|0
else|:
operator|(
name|remaining
operator|*
literal|100.0f
operator|)
operator|/
name|capacity
return|;
block|}
comment|/** Convert percentage to a string. */
DECL|method|percent2String (double percentage)
specifier|public
specifier|static
name|String
name|percent2String
parameter_list|(
name|double
name|percentage
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|format
argument_list|(
literal|"%.2f%%"
argument_list|,
name|percentage
argument_list|)
return|;
block|}
comment|/**    * Decode a specific range of bytes of the given byte array to a string    * using UTF8.    *    * @param bytes The bytes to be decoded into characters    * @param offset The index of the first byte to decode    * @param length The number of bytes to decode    * @return The decoded string    */
DECL|method|bytes2String (byte[] bytes, int offset, int length)
specifier|private
specifier|static
name|String
name|bytes2String
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|"UTF8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
assert|assert
literal|false
operator|:
literal|"UTF8 encoding is not supported "
assert|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

