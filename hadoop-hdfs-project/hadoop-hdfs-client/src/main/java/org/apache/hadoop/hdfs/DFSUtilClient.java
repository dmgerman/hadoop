begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|SignedBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NodeBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_HA_NAMENODES_KEY_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMESERVICES
import|;
end_import

begin_class
DECL|class|DFSUtilClient
specifier|public
class|class
name|DFSUtilClient
block|{
DECL|field|EMPTY_BYTES
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BYTES
init|=
block|{}
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DFSUtilClient
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Converts a string to a byte array using UTF8 encoding.    */
DECL|method|string2Bytes (String str)
specifier|public
specifier|static
name|byte
index|[]
name|string2Bytes
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
comment|/**    * Converts a byte array to a string using UTF8 encoding.    */
DECL|method|bytes2String (byte[] bytes)
specifier|public
specifier|static
name|String
name|bytes2String
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|bytes2String
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
comment|/** Return used as percentage of capacity */
DECL|method|getPercentUsed (long used, long capacity)
specifier|public
specifier|static
name|float
name|getPercentUsed
parameter_list|(
name|long
name|used
parameter_list|,
name|long
name|capacity
parameter_list|)
block|{
return|return
name|capacity
operator|<=
literal|0
condition|?
literal|100
else|:
operator|(
name|used
operator|*
literal|100.0f
operator|)
operator|/
name|capacity
return|;
block|}
comment|/** Return remaining as percentage of capacity */
DECL|method|getPercentRemaining (long remaining, long capacity)
specifier|public
specifier|static
name|float
name|getPercentRemaining
parameter_list|(
name|long
name|remaining
parameter_list|,
name|long
name|capacity
parameter_list|)
block|{
return|return
name|capacity
operator|<=
literal|0
condition|?
literal|0
else|:
operator|(
name|remaining
operator|*
literal|100.0f
operator|)
operator|/
name|capacity
return|;
block|}
comment|/** Convert percentage to a string. */
DECL|method|percent2String (double percentage)
specifier|public
specifier|static
name|String
name|percent2String
parameter_list|(
name|double
name|percentage
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|format
argument_list|(
literal|"%.2f%%"
argument_list|,
name|percentage
argument_list|)
return|;
block|}
comment|/**    * Returns collection of nameservice Ids from the configuration.    * @param conf configuration    * @return collection of nameservice Ids, or null if not specified    */
DECL|method|getNameServiceIds (Configuration conf)
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|getNameServiceIds
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|DFS_NAMESERVICES
argument_list|)
return|;
block|}
comment|/**    * Namenode HighAvailability related configuration.    * Returns collection of namenode Ids from the configuration. One logical id    * for each namenode in the in the HA setup.    *    * @param conf configuration    * @param nsId the nameservice ID to look at, or null for non-federated    * @return collection of namenode Ids    */
DECL|method|getNameNodeIds (Configuration conf, String nsId)
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|getNameNodeIds
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|nsId
parameter_list|)
block|{
name|String
name|key
init|=
name|addSuffix
argument_list|(
name|DFS_HA_NAMENODES_KEY_PREFIX
argument_list|,
name|nsId
argument_list|)
decl_stmt|;
return|return
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/** Add non empty and non null suffix to a key */
DECL|method|addSuffix (String key, String suffix)
specifier|static
name|String
name|addSuffix
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
if|if
condition|(
name|suffix
operator|==
literal|null
operator|||
name|suffix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|key
return|;
block|}
assert|assert
operator|!
name|suffix
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
operator|:
literal|"suffix '"
operator|+
name|suffix
operator|+
literal|"' should not already have '.' prepended."
assert|;
return|return
name|key
operator|+
literal|"."
operator|+
name|suffix
return|;
block|}
comment|/**    * Returns list of InetSocketAddress corresponding to HA NN HTTP addresses from    * the configuration.    *    * @return list of InetSocketAddresses    */
DECL|method|getHaNnWebHdfsAddresses ( Configuration conf, String scheme)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|getHaNnWebHdfsAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|scheme
parameter_list|)
block|{
if|if
condition|(
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
return|return
name|getAddresses
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|WebHdfsConstants
operator|.
name|SWEBHDFS_SCHEME
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
return|return
name|getAddresses
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported scheme: "
operator|+
name|scheme
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a LocatedBlocks to BlockLocations[]    * @param blocks a LocatedBlocks    * @return an array of BlockLocations    */
DECL|method|locatedBlocks2Locations (LocatedBlocks blocks)
specifier|public
specifier|static
name|BlockLocation
index|[]
name|locatedBlocks2Locations
parameter_list|(
name|LocatedBlocks
name|blocks
parameter_list|)
block|{
if|if
condition|(
name|blocks
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|BlockLocation
index|[
literal|0
index|]
return|;
block|}
return|return
name|locatedBlocks2Locations
argument_list|(
name|blocks
operator|.
name|getLocatedBlocks
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert a List<LocatedBlock> to BlockLocation[]    * @param blocks A List<LocatedBlock> to be converted    * @return converted array of BlockLocation    */
DECL|method|locatedBlocks2Locations ( List<LocatedBlock> blocks)
specifier|public
specifier|static
name|BlockLocation
index|[]
name|locatedBlocks2Locations
parameter_list|(
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|blocks
parameter_list|)
block|{
if|if
condition|(
name|blocks
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|BlockLocation
index|[
literal|0
index|]
return|;
block|}
name|int
name|nrBlocks
init|=
name|blocks
operator|.
name|size
argument_list|()
decl_stmt|;
name|BlockLocation
index|[]
name|blkLocations
init|=
operator|new
name|BlockLocation
index|[
name|nrBlocks
index|]
decl_stmt|;
if|if
condition|(
name|nrBlocks
operator|==
literal|0
condition|)
block|{
return|return
name|blkLocations
return|;
block|}
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|blk
range|:
name|blocks
control|)
block|{
assert|assert
name|idx
operator|<
name|nrBlocks
operator|:
literal|"Incorrect index"
assert|;
name|DatanodeInfo
index|[]
name|locations
init|=
name|blk
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[
name|locations
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|xferAddrs
init|=
operator|new
name|String
index|[
name|locations
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|racks
init|=
operator|new
name|String
index|[
name|locations
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|hCnt
init|=
literal|0
init|;
name|hCnt
operator|<
name|locations
operator|.
name|length
condition|;
name|hCnt
operator|++
control|)
block|{
name|hosts
index|[
name|hCnt
index|]
operator|=
name|locations
index|[
name|hCnt
index|]
operator|.
name|getHostName
argument_list|()
expr_stmt|;
name|xferAddrs
index|[
name|hCnt
index|]
operator|=
name|locations
index|[
name|hCnt
index|]
operator|.
name|getXferAddr
argument_list|()
expr_stmt|;
name|NodeBase
name|node
init|=
operator|new
name|NodeBase
argument_list|(
name|xferAddrs
index|[
name|hCnt
index|]
argument_list|,
name|locations
index|[
name|hCnt
index|]
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
decl_stmt|;
name|racks
index|[
name|hCnt
index|]
operator|=
name|node
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|DatanodeInfo
index|[]
name|cachedLocations
init|=
name|blk
operator|.
name|getCachedLocations
argument_list|()
decl_stmt|;
name|String
index|[]
name|cachedHosts
init|=
operator|new
name|String
index|[
name|cachedLocations
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cachedLocations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cachedHosts
index|[
name|i
index|]
operator|=
name|cachedLocations
index|[
name|i
index|]
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
name|blkLocations
index|[
name|idx
index|]
operator|=
operator|new
name|BlockLocation
argument_list|(
name|xferAddrs
argument_list|,
name|hosts
argument_list|,
name|cachedHosts
argument_list|,
name|racks
argument_list|,
name|blk
operator|.
name|getStorageIDs
argument_list|()
argument_list|,
name|blk
operator|.
name|getStorageTypes
argument_list|()
argument_list|,
name|blk
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|blk
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|blk
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
return|return
name|blkLocations
return|;
block|}
comment|/** Compare two byte arrays by lexicographical order. */
DECL|method|compareBytes (byte[] left, byte[] right)
specifier|public
specifier|static
name|int
name|compareBytes
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|byte
index|[]
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
literal|null
condition|)
block|{
name|left
operator|=
name|EMPTY_BYTES
expr_stmt|;
block|}
if|if
condition|(
name|right
operator|==
literal|null
condition|)
block|{
name|right
operator|=
name|EMPTY_BYTES
expr_stmt|;
block|}
return|return
name|SignedBytes
operator|.
name|lexicographicalComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
comment|/**    * Given a list of path components returns a byte array    */
DECL|method|byteArray2bytes (byte[][] pathComponents)
specifier|public
specifier|static
name|byte
index|[]
name|byteArray2bytes
parameter_list|(
name|byte
index|[]
index|[]
name|pathComponents
parameter_list|)
block|{
if|if
condition|(
name|pathComponents
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|EMPTY_BYTES
return|;
block|}
elseif|else
if|if
condition|(
name|pathComponents
operator|.
name|length
operator|==
literal|1
operator|&&
operator|(
name|pathComponents
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|pathComponents
index|[
literal|0
index|]
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
return|return
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|Path
operator|.
name|SEPARATOR_CHAR
block|}
return|;
block|}
name|int
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pathComponents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|length
operator|+=
name|pathComponents
index|[
name|i
index|]
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|pathComponents
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|length
operator|++
expr_stmt|;
comment|// for SEPARATOR
block|}
block|}
name|byte
index|[]
name|path
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pathComponents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|pathComponents
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|path
argument_list|,
name|index
argument_list|,
name|pathComponents
index|[
name|i
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|index
operator|+=
name|pathComponents
index|[
name|i
index|]
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|pathComponents
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|path
index|[
name|index
index|]
operator|=
operator|(
name|byte
operator|)
name|Path
operator|.
name|SEPARATOR_CHAR
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
return|return
name|path
return|;
block|}
comment|/**    * Decode a specific range of bytes of the given byte array to a string    * using UTF8.    *    * @param bytes The bytes to be decoded into characters    * @param offset The index of the first byte to decode    * @param length The number of bytes to decode    * @return The decoded string    */
DECL|method|bytes2String (byte[] bytes, int offset, int length)
specifier|private
specifier|static
name|String
name|bytes2String
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|"UTF8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
assert|assert
literal|false
operator|:
literal|"UTF8 encoding is not supported "
assert|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * @return<code>coll</code> if it is non-null and non-empty. Otherwise,    * returns a list with a single null value.    */
DECL|method|emptyAsSingletonNull (Collection<String> coll)
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|emptyAsSingletonNull
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|coll
parameter_list|)
block|{
if|if
condition|(
name|coll
operator|==
literal|null
operator|||
name|coll
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|coll
return|;
block|}
block|}
comment|/** Concatenate list of suffix strings '.' separated */
DECL|method|concatSuffixes (String... suffixes)
specifier|static
name|String
name|concatSuffixes
parameter_list|(
name|String
modifier|...
name|suffixes
parameter_list|)
block|{
if|if
condition|(
name|suffixes
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|skipNulls
argument_list|()
operator|.
name|join
argument_list|(
name|suffixes
argument_list|)
return|;
block|}
comment|/**    * Returns the configured address for all NameNodes in the cluster.    * @param conf configuration    * @param defaultAddress default address to return in case key is not found.    * @param keys Set of keys to look for in the order of preference    * @return a map(nameserviceId to map(namenodeId to InetSocketAddress))    */
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
DECL|method|getAddresses (Configuration conf, String defaultAddress, String... keys)
name|getAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|defaultAddress
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|nameserviceIds
init|=
name|getNameServiceIds
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|getAddressesForNsIds
argument_list|(
name|conf
argument_list|,
name|nameserviceIds
argument_list|,
name|defaultAddress
argument_list|,
name|keys
argument_list|)
return|;
block|}
comment|/**    * Returns the configured address for all NameNodes in the cluster.    * @param conf configuration    * @param defaultAddress default address to return in case key is not found.    * @param keys Set of keys to look for in the order of preference    *    * @return a map(nameserviceId to map(namenodeId to InetSocketAddress))    */
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
DECL|method|getAddressesForNsIds ( Configuration conf, Collection<String> nsIds, String defaultAddress, String... keys)
name|getAddressesForNsIds
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|nsIds
parameter_list|,
name|String
name|defaultAddress
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
comment|// Look for configurations of the form<key>[.<nameserviceId>][.<namenodeId>]
comment|// across all of the configured nameservices and namenodes.
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|ret
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nsId
range|:
name|emptyAsSingletonNull
argument_list|(
name|nsIds
argument_list|)
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
name|isas
init|=
name|getAddressesForNameserviceId
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|,
name|defaultAddress
argument_list|,
name|keys
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isas
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|nsId
argument_list|,
name|isas
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
DECL|method|getAddressesForNameserviceId ( Configuration conf, String nsId, String defaultValue, String... keys)
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
name|getAddressesForNameserviceId
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|nsId
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|nnIds
init|=
name|getNameNodeIds
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
name|ret
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nnId
range|:
name|emptyAsSingletonNull
argument_list|(
name|nnIds
argument_list|)
control|)
block|{
name|String
name|suffix
init|=
name|concatSuffixes
argument_list|(
name|nsId
argument_list|,
name|nnId
argument_list|)
decl_stmt|;
name|String
name|address
init|=
name|getConfValue
argument_list|(
name|defaultValue
argument_list|,
name|suffix
argument_list|,
name|conf
argument_list|,
name|keys
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
name|InetSocketAddress
name|isa
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|isa
operator|.
name|isUnresolved
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Namenode for {} remains unresolved for ID {}. Check your "
operator|+
literal|"hdfs-site.xml file to ensure namenodes are configured "
operator|+
literal|"properly."
argument_list|,
name|nsId
argument_list|,
name|nnId
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|put
argument_list|(
name|nnId
argument_list|,
name|isa
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Given a list of keys in the order of preference, returns a value    * for the key in the given order from the configuration.    * @param defaultValue default value to return, when key was not found    * @param keySuffix suffix to add to the key, if it is not null    * @param conf Configuration    * @param keys list of keys in the order of preference    * @return value of the key or default if a key was not found in configuration    */
DECL|method|getConfValue (String defaultValue, String keySuffix, Configuration conf, String... keys)
specifier|private
specifier|static
name|String
name|getConfValue
parameter_list|(
name|String
name|defaultValue
parameter_list|,
name|String
name|keySuffix
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
name|String
name|value
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|key
operator|=
name|addSuffix
argument_list|(
name|key
argument_list|,
name|keySuffix
argument_list|)
expr_stmt|;
name|value
operator|=
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
comment|/**    * Whether the pathname is valid.  Currently prohibits relative paths,    * names which contain a ":" or "//", or other non-canonical paths.    */
DECL|method|isValidName (String src)
specifier|public
specifier|static
name|boolean
name|isValidName
parameter_list|(
name|String
name|src
parameter_list|)
block|{
comment|// Path must be absolute.
if|if
condition|(
operator|!
name|src
operator|.
name|startsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Check for ".." "." ":" "/"
name|String
index|[]
name|components
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|src
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|components
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|element
init|=
name|components
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
operator|(
name|element
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
operator|)
operator|||
operator|(
name|element
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ".." is allowed in path starting with /.reserved/.inodes
if|if
condition|(
name|element
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
if|if
condition|(
name|components
operator|.
name|length
operator|>
literal|4
operator|&&
name|components
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|".reserved"
argument_list|)
operator|&&
name|components
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
literal|".inodes"
argument_list|)
condition|)
block|{
continue|continue;
block|}
return|return
literal|false
return|;
block|}
comment|// The string may start or end with a /, but not have
comment|// "//" in the middle.
if|if
condition|(
name|element
operator|.
name|isEmpty
argument_list|()
operator|&&
name|i
operator|!=
name|components
operator|.
name|length
operator|-
literal|1
operator|&&
name|i
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Converts a time duration in milliseconds into DDD:HH:MM:SS format.    */
DECL|method|durationToString (long durationMs)
specifier|public
specifier|static
name|String
name|durationToString
parameter_list|(
name|long
name|durationMs
parameter_list|)
block|{
name|boolean
name|negative
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|durationMs
operator|<
literal|0
condition|)
block|{
name|negative
operator|=
literal|true
expr_stmt|;
name|durationMs
operator|=
operator|-
name|durationMs
expr_stmt|;
block|}
comment|// Chop off the milliseconds
name|long
name|durationSec
init|=
name|durationMs
operator|/
literal|1000
decl_stmt|;
specifier|final
name|int
name|secondsPerMinute
init|=
literal|60
decl_stmt|;
specifier|final
name|int
name|secondsPerHour
init|=
literal|60
operator|*
literal|60
decl_stmt|;
specifier|final
name|int
name|secondsPerDay
init|=
literal|60
operator|*
literal|60
operator|*
literal|24
decl_stmt|;
specifier|final
name|long
name|days
init|=
name|durationSec
operator|/
name|secondsPerDay
decl_stmt|;
name|durationSec
operator|-=
name|days
operator|*
name|secondsPerDay
expr_stmt|;
specifier|final
name|long
name|hours
init|=
name|durationSec
operator|/
name|secondsPerHour
decl_stmt|;
name|durationSec
operator|-=
name|hours
operator|*
name|secondsPerHour
expr_stmt|;
specifier|final
name|long
name|minutes
init|=
name|durationSec
operator|/
name|secondsPerMinute
decl_stmt|;
name|durationSec
operator|-=
name|minutes
operator|*
name|secondsPerMinute
expr_stmt|;
specifier|final
name|long
name|seconds
init|=
name|durationSec
decl_stmt|;
specifier|final
name|long
name|milliseconds
init|=
name|durationMs
operator|%
literal|1000
decl_stmt|;
name|String
name|format
init|=
literal|"%03d:%02d:%02d:%02d.%03d"
decl_stmt|;
if|if
condition|(
name|negative
condition|)
block|{
name|format
operator|=
literal|"-"
operator|+
name|format
expr_stmt|;
block|}
return|return
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|days
argument_list|,
name|hours
argument_list|,
name|minutes
argument_list|,
name|seconds
argument_list|,
name|milliseconds
argument_list|)
return|;
block|}
comment|/**    * Converts a Date into an ISO-8601 formatted datetime string.    */
DECL|method|dateToIso8601String (Date date)
specifier|public
specifier|static
name|String
name|dateToIso8601String
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ssZ"
argument_list|,
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
return|return
name|df
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
DECL|field|localAddrMap
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|localAddrMap
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|isLocalAddress (InetSocketAddress targetAddr)
specifier|public
specifier|static
name|boolean
name|isLocalAddress
parameter_list|(
name|InetSocketAddress
name|targetAddr
parameter_list|)
block|{
name|InetAddress
name|addr
init|=
name|targetAddr
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|Boolean
name|cached
init|=
name|localAddrMap
operator|.
name|get
argument_list|(
name|addr
operator|.
name|getHostAddress
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Address "
operator|+
name|targetAddr
operator|+
operator|(
name|cached
condition|?
literal|" is local"
else|:
literal|" is not local"
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|cached
return|;
block|}
name|boolean
name|local
init|=
name|NetUtils
operator|.
name|isLocalAddress
argument_list|(
name|addr
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Address "
operator|+
name|targetAddr
operator|+
operator|(
name|local
condition|?
literal|" is local"
else|:
literal|" is not local"
operator|)
argument_list|)
expr_stmt|;
block|}
name|localAddrMap
operator|.
name|put
argument_list|(
name|addr
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|local
argument_list|)
expr_stmt|;
return|return
name|local
return|;
block|}
block|}
end_class

end_unit

