begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonPathCapabilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|impl
operator|.
name|PathCapabilitiesSupport
operator|.
name|validatePathCapabilityArgs
import|;
end_import

begin_class
DECL|class|DfsPathCapabilities
specifier|public
specifier|final
class|class
name|DfsPathCapabilities
block|{
DECL|method|DfsPathCapabilities ()
specifier|private
name|DfsPathCapabilities
parameter_list|()
block|{   }
comment|/**    * Common implementation of {@code hasPathCapability} for DFS and webhdfs.    * @param path path to check    * @param capability capability    * @return either a value to return or, if empty, a cue for the FS to    * pass up to its superclass.    */
DECL|method|hasPathCapability (final Path path, final String capability)
specifier|public
specifier|static
name|Optional
argument_list|<
name|Boolean
argument_list|>
name|hasPathCapability
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|String
name|capability
parameter_list|)
block|{
switch|switch
condition|(
name|validatePathCapabilityArgs
argument_list|(
name|path
argument_list|,
name|capability
argument_list|)
condition|)
block|{
case|case
name|CommonPathCapabilities
operator|.
name|FS_ACLS
case|:
case|case
name|CommonPathCapabilities
operator|.
name|FS_APPEND
case|:
case|case
name|CommonPathCapabilities
operator|.
name|FS_CHECKSUMS
case|:
case|case
name|CommonPathCapabilities
operator|.
name|FS_CONCAT
case|:
case|case
name|CommonPathCapabilities
operator|.
name|FS_LIST_CORRUPT_FILE_BLOCKS
case|:
case|case
name|CommonPathCapabilities
operator|.
name|FS_PATHHANDLES
case|:
case|case
name|CommonPathCapabilities
operator|.
name|FS_PERMISSIONS
case|:
case|case
name|CommonPathCapabilities
operator|.
name|FS_SNAPSHOTS
case|:
case|case
name|CommonPathCapabilities
operator|.
name|FS_STORAGEPOLICY
case|:
case|case
name|CommonPathCapabilities
operator|.
name|FS_XATTRS
case|:
return|return
name|Optional
operator|.
name|of
argument_list|(
literal|true
argument_list|)
return|;
case|case
name|CommonPathCapabilities
operator|.
name|FS_SYMLINKS
case|:
return|return
name|Optional
operator|.
name|of
argument_list|(
name|FileSystem
operator|.
name|areSymlinksEnabled
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

