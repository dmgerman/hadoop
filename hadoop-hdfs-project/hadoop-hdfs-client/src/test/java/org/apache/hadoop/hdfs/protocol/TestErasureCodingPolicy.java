begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Test ErasureCodingPolicy.  */
end_comment

begin_class
DECL|class|TestErasureCodingPolicy
specifier|public
class|class
name|TestErasureCodingPolicy
block|{
DECL|field|SCHEMA_1
specifier|private
specifier|static
specifier|final
name|ECSchema
name|SCHEMA_1
init|=
operator|new
name|ECSchema
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|SCHEMA_2
specifier|private
specifier|static
specifier|final
name|ECSchema
name|SCHEMA_2
init|=
operator|new
name|ECSchema
argument_list|(
literal|"two"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testInvalid ()
specifier|public
name|void
name|testInvalid
parameter_list|()
block|{
try|try
block|{
operator|new
name|ErasureCodingPolicy
argument_list|(
literal|null
argument_list|,
name|SCHEMA_1
argument_list|,
literal|123
argument_list|,
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Instantiated invalid ErasureCodingPolicy"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{     }
try|try
block|{
operator|new
name|ErasureCodingPolicy
argument_list|(
literal|"policy"
argument_list|,
literal|null
argument_list|,
literal|123
argument_list|,
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Instantiated invalid ErasureCodingPolicy"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{     }
try|try
block|{
operator|new
name|ErasureCodingPolicy
argument_list|(
literal|"policy"
argument_list|,
name|SCHEMA_1
argument_list|,
operator|-
literal|1
argument_list|,
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Instantiated invalid ErasureCodingPolicy"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"cellSize"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEqualsAndHashCode ()
specifier|public
name|void
name|testEqualsAndHashCode
parameter_list|()
block|{
name|ErasureCodingPolicy
index|[]
name|policies
init|=
operator|new
name|ErasureCodingPolicy
index|[]
block|{
operator|new
name|ErasureCodingPolicy
argument_list|(
literal|"one"
argument_list|,
name|SCHEMA_1
argument_list|,
literal|1024
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
operator|new
name|ErasureCodingPolicy
argument_list|(
literal|"two"
argument_list|,
name|SCHEMA_1
argument_list|,
literal|1024
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
operator|new
name|ErasureCodingPolicy
argument_list|(
literal|"one"
argument_list|,
name|SCHEMA_2
argument_list|,
literal|1024
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
operator|new
name|ErasureCodingPolicy
argument_list|(
literal|"one"
argument_list|,
name|SCHEMA_1
argument_list|,
literal|2048
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
operator|new
name|ErasureCodingPolicy
argument_list|(
literal|"one"
argument_list|,
name|SCHEMA_1
argument_list|,
literal|1024
argument_list|,
operator|(
name|byte
operator|)
literal|3
argument_list|)
block|,     }
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|policies
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ErasureCodingPolicy
name|ei
init|=
name|policies
index|[
name|i
index|]
decl_stmt|;
comment|// Check identity
name|ErasureCodingPolicy
name|temp
init|=
operator|new
name|ErasureCodingPolicy
argument_list|(
name|ei
operator|.
name|getName
argument_list|()
argument_list|,
name|ei
operator|.
name|getSchema
argument_list|()
argument_list|,
name|ei
operator|.
name|getCellSize
argument_list|()
argument_list|,
name|ei
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ei
argument_list|,
name|temp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ei
operator|.
name|hashCode
argument_list|()
argument_list|,
name|temp
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check against other policies
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|policies
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|ErasureCodingPolicy
name|ej
init|=
name|policies
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|j
condition|)
block|{
name|assertEquals
argument_list|(
name|ei
argument_list|,
name|ej
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ei
operator|.
name|hashCode
argument_list|()
argument_list|,
name|ej
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotEquals
argument_list|(
name|ei
argument_list|,
name|ej
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|ei
argument_list|,
name|ej
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

