begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageStatistics
operator|.
name|LongStatistic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSOpsCountStatistics
operator|.
name|OpType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|concurrent
operator|.
name|HadoopExecutors
operator|.
name|newFixedThreadPool
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * This tests basic operations of {@link DFSOpsCountStatistics} class.  */
end_comment

begin_class
DECL|class|TestDFSOpsCountStatistics
specifier|public
class|class
name|TestDFSOpsCountStatistics
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDFSOpsCountStatistics
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NO_SUCH_OP
specifier|private
specifier|static
specifier|final
name|String
name|NO_SUCH_OP
init|=
literal|"no-such-dfs-operation-dude"
decl_stmt|;
DECL|field|statistics
specifier|private
specifier|final
name|DFSOpsCountStatistics
name|statistics
init|=
operator|new
name|DFSOpsCountStatistics
argument_list|()
decl_stmt|;
DECL|field|expectedOpsCountMap
specifier|private
specifier|final
name|Map
argument_list|<
name|OpType
argument_list|,
name|AtomicLong
argument_list|>
name|expectedOpsCountMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
specifier|final
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
specifier|final
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
for|for
control|(
name|OpType
name|opType
range|:
name|OpType
operator|.
name|values
argument_list|()
control|)
block|{
name|expectedOpsCountMap
operator|.
name|put
argument_list|(
name|opType
argument_list|,
operator|new
name|AtomicLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|incrementOpsCountByRandomNumbers
argument_list|()
expr_stmt|;
block|}
comment|/**    * This is to test the the {@link OpType} symbols are unique.    */
annotation|@
name|Test
DECL|method|testOpTypeSymbolsAreUnique ()
specifier|public
name|void
name|testOpTypeSymbolsAreUnique
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|opTypeSymbols
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|OpType
name|opType
range|:
name|OpType
operator|.
name|values
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
name|opTypeSymbols
operator|.
name|contains
argument_list|(
name|opType
operator|.
name|getSymbol
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|opTypeSymbols
operator|.
name|add
argument_list|(
name|opType
operator|.
name|getSymbol
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|OpType
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|,
name|opTypeSymbols
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetLongStatistics ()
specifier|public
name|void
name|testGetLongStatistics
parameter_list|()
block|{
name|short
name|iterations
init|=
literal|0
decl_stmt|;
comment|// number of the iter.hasNext()
specifier|final
name|Iterator
argument_list|<
name|LongStatistic
argument_list|>
name|iter
init|=
name|statistics
operator|.
name|getLongStatistics
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|LongStatistic
name|longStat
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|longStat
argument_list|)
expr_stmt|;
specifier|final
name|OpType
name|opType
init|=
name|OpType
operator|.
name|fromSymbol
argument_list|(
name|longStat
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|opType
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedOpsCountMap
operator|.
name|containsKey
argument_list|(
name|opType
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedOpsCountMap
operator|.
name|get
argument_list|(
name|opType
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|longStat
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|iterations
operator|++
expr_stmt|;
block|}
comment|// check that all the OpType enum entries are iterated via iter
name|assertEquals
argument_list|(
name|OpType
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|,
name|iterations
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetLong ()
specifier|public
name|void
name|testGetLong
parameter_list|()
block|{
name|assertNull
argument_list|(
name|statistics
operator|.
name|getLong
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statistics
operator|.
name|getLong
argument_list|(
name|NO_SUCH_OP
argument_list|)
argument_list|)
expr_stmt|;
name|verifyStatistics
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsTracked ()
specifier|public
name|void
name|testIsTracked
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|statistics
operator|.
name|isTracked
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|statistics
operator|.
name|isTracked
argument_list|(
name|NO_SUCH_OP
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Iterator
argument_list|<
name|LongStatistic
argument_list|>
name|iter
init|=
name|statistics
operator|.
name|getLongStatistics
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|LongStatistic
name|longStatistic
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|statistics
operator|.
name|isTracked
argument_list|(
name|longStatistic
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReset ()
specifier|public
name|void
name|testReset
parameter_list|()
block|{
name|statistics
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|OpType
name|opType
range|:
name|OpType
operator|.
name|values
argument_list|()
control|)
block|{
name|expectedOpsCountMap
operator|.
name|get
argument_list|(
name|opType
argument_list|)
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Iterator
argument_list|<
name|LongStatistic
argument_list|>
name|iter
init|=
name|statistics
operator|.
name|getLongStatistics
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|LongStatistic
name|longStat
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|longStat
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|incrementOpsCountByRandomNumbers
argument_list|()
expr_stmt|;
name|verifyStatistics
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCurrentAccess ()
specifier|public
name|void
name|testCurrentAccess
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|numThreads
init|=
literal|10
decl_stmt|;
specifier|final
name|ExecutorService
name|threadPool
init|=
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|CountDownLatch
name|allReady
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startBlocker
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|allDone
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|childError
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|threadPool
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|allReady
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|startBlocker
operator|.
name|await
argument_list|()
expr_stmt|;
name|incrementOpsCountByRandomNumbers
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Child failed when calling mkdir"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|childError
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|allDone
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|allReady
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// wait until all threads are ready
name|startBlocker
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// all threads start making directories
name|allDone
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// wait until all threads are done
name|assertNull
argument_list|(
literal|"Child failed with exception."
argument_list|,
name|childError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStatistics
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|threadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This is helper method to increment the statistics by random data.    */
DECL|method|incrementOpsCountByRandomNumbers ()
specifier|private
name|void
name|incrementOpsCountByRandomNumbers
parameter_list|()
block|{
for|for
control|(
name|OpType
name|opType
range|:
name|OpType
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|Long
name|randomCount
init|=
name|RandomUtils
operator|.
name|nextLong
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|expectedOpsCountMap
operator|.
name|get
argument_list|(
name|opType
argument_list|)
operator|.
name|addAndGet
argument_list|(
name|randomCount
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomCount
condition|;
name|i
operator|++
control|)
block|{
name|statistics
operator|.
name|incrementOpCounter
argument_list|(
name|opType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * We have the expected ops count in {@link #expectedOpsCountMap}, and this    * method is to verify that its ops count is the same as the one in    * {@link #statistics}.    */
DECL|method|verifyStatistics ()
specifier|private
name|void
name|verifyStatistics
parameter_list|()
block|{
for|for
control|(
name|OpType
name|opType
range|:
name|OpType
operator|.
name|values
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|expectedOpsCountMap
operator|.
name|get
argument_list|(
name|opType
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|statistics
operator|.
name|getLong
argument_list|(
name|opType
operator|.
name|getSymbol
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Not expected count for operation "
operator|+
name|opType
operator|.
name|getSymbol
argument_list|()
argument_list|,
name|expectedOpsCountMap
operator|.
name|get
argument_list|(
name|opType
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|statistics
operator|.
name|getLong
argument_list|(
name|opType
operator|.
name|getSymbol
argument_list|()
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

