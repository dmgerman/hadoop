begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|joining
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Unit test verifying that {@link HdfsFileStatus} is a superset of  * {@link FileStatus}.  */
end_comment

begin_class
DECL|class|TestHdfsFileStatusMethods
specifier|public
class|class
name|TestHdfsFileStatusMethods
block|{
annotation|@
name|Test
DECL|method|testInterfaceSuperset ()
specifier|public
name|void
name|testInterfaceSuperset
parameter_list|()
block|{
name|Set
argument_list|<
name|MethodSignature
argument_list|>
name|fsM
init|=
name|signatures
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|MethodSignature
argument_list|>
name|hfsM
init|=
name|signatures
argument_list|(
name|HdfsFileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|hfsM
operator|.
name|addAll
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
name|HdfsFileStatus
operator|.
name|class
operator|.
name|getInterfaces
argument_list|()
argument_list|)
operator|.
name|flatMap
argument_list|(
name|i
lambda|->
name|Stream
operator|.
name|of
argument_list|(
name|i
operator|.
name|getDeclaredMethods
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|MethodSignature
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// HdfsFileStatus is not a concrete type
name|hfsM
operator|.
name|addAll
argument_list|(
name|signatures
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fsM
operator|.
name|removeAll
argument_list|(
name|hfsM
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that FileStatus is a subset of HdfsFileStatus
name|assertEquals
argument_list|(
name|fsM
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|MethodSignature
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
name|fsM
argument_list|)
expr_stmt|;
block|}
comment|/** Map non-static, declared methods for this class to signatures. */
DECL|method|signatures (Class<?> c)
specifier|private
specifier|static
name|Set
argument_list|<
name|MethodSignature
argument_list|>
name|signatures
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|c
operator|.
name|getDeclaredMethods
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|m
lambda|->
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|MethodSignature
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
return|;
block|}
DECL|class|MethodSignature
specifier|private
specifier|static
class|class
name|MethodSignature
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|rval
specifier|private
specifier|final
name|Type
name|rval
decl_stmt|;
DECL|field|param
specifier|private
specifier|final
name|Type
index|[]
name|param
decl_stmt|;
DECL|method|MethodSignature (Method m)
name|MethodSignature
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
name|name
operator|=
name|m
operator|.
name|getName
argument_list|()
expr_stmt|;
name|rval
operator|=
name|m
operator|.
name|getGenericReturnType
argument_list|()
expr_stmt|;
name|param
operator|=
name|m
operator|.
name|getParameterTypes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * Methods are equal iff they have the same name, return type, and params      * (non-generic).      */
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|MethodSignature
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|MethodSignature
name|s
init|=
operator|(
name|MethodSignature
operator|)
name|o
decl_stmt|;
return|return
name|name
operator|.
name|equals
argument_list|(
name|s
operator|.
name|name
argument_list|)
operator|&&
name|rval
operator|.
name|equals
argument_list|(
name|s
operator|.
name|rval
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|param
argument_list|,
name|s
operator|.
name|param
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|rval
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
name|param
argument_list|)
operator|.
name|map
argument_list|(
name|Type
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

