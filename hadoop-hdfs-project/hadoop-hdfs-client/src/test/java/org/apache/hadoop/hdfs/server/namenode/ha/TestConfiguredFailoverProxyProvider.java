begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|MockDomainNameResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test {@link ConfiguredFailoverProxyProvider}.  * This manages failover logic for a given set of nameservices/namenodes  * (aka proxies).  */
end_comment

begin_class
DECL|class|TestConfiguredFailoverProxyProvider
specifier|public
class|class
name|TestConfiguredFailoverProxyProvider
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|rpcPort
specifier|private
name|int
name|rpcPort
init|=
literal|8020
decl_stmt|;
DECL|field|ns1Uri
specifier|private
name|URI
name|ns1Uri
decl_stmt|;
DECL|field|ns2Uri
specifier|private
name|URI
name|ns2Uri
decl_stmt|;
DECL|field|ns3Uri
specifier|private
name|URI
name|ns3Uri
decl_stmt|;
DECL|field|ns1
specifier|private
name|String
name|ns1
decl_stmt|;
DECL|field|ns1nn1Hostname
specifier|private
name|String
name|ns1nn1Hostname
init|=
literal|"machine1.foo.bar"
decl_stmt|;
DECL|field|ns1nn1
specifier|private
name|InetSocketAddress
name|ns1nn1
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|ns1nn1Hostname
argument_list|,
name|rpcPort
argument_list|)
decl_stmt|;
DECL|field|ns1nn2Hostname
specifier|private
name|String
name|ns1nn2Hostname
init|=
literal|"machine2.foo.bar"
decl_stmt|;
DECL|field|ns1nn2
specifier|private
name|InetSocketAddress
name|ns1nn2
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|ns1nn2Hostname
argument_list|,
name|rpcPort
argument_list|)
decl_stmt|;
DECL|field|ns2
specifier|private
name|String
name|ns2
decl_stmt|;
DECL|field|ns2nn1Hostname
specifier|private
name|String
name|ns2nn1Hostname
init|=
literal|"router1.foo.bar"
decl_stmt|;
DECL|field|ns2nn1
specifier|private
name|InetSocketAddress
name|ns2nn1
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|ns2nn1Hostname
argument_list|,
name|rpcPort
argument_list|)
decl_stmt|;
DECL|field|ns2nn2Hostname
specifier|private
name|String
name|ns2nn2Hostname
init|=
literal|"router2.foo.bar"
decl_stmt|;
DECL|field|ns2nn2
specifier|private
name|InetSocketAddress
name|ns2nn2
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|ns2nn2Hostname
argument_list|,
name|rpcPort
argument_list|)
decl_stmt|;
DECL|field|ns2nn3Hostname
specifier|private
name|String
name|ns2nn3Hostname
init|=
literal|"router3.foo.bar"
decl_stmt|;
DECL|field|ns2nn3
specifier|private
name|InetSocketAddress
name|ns2nn3
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|ns2nn3Hostname
argument_list|,
name|rpcPort
argument_list|)
decl_stmt|;
DECL|field|ns3
specifier|private
name|String
name|ns3
decl_stmt|;
DECL|field|NUM_ITERATIONS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_ITERATIONS
init|=
literal|50
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
specifier|final
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupClass ()
specifier|public
specifier|static
name|void
name|setupClass
parameter_list|()
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|RequestHedgingProxyProvider
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|ns1
operator|=
literal|"mycluster-1-"
operator|+
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
name|ns1Uri
operator|=
operator|new
name|URI
argument_list|(
literal|"hdfs://"
operator|+
name|ns1
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_HA_NAMENODES_KEY_PREFIX
operator|+
literal|"."
operator|+
name|ns1
argument_list|,
literal|"nn1,nn2,nn3"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|"."
operator|+
name|ns1
operator|+
literal|".nn1"
argument_list|,
name|ns1nn1Hostname
operator|+
literal|":"
operator|+
name|rpcPort
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|"."
operator|+
name|ns1
operator|+
literal|".nn2"
argument_list|,
name|ns1nn2Hostname
operator|+
literal|":"
operator|+
name|rpcPort
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|PROXY_PROVIDER_KEY_PREFIX
operator|+
literal|"."
operator|+
name|ns1
argument_list|,
name|ConfiguredFailoverProxyProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|RANDOM_ORDER
operator|+
literal|"."
operator|+
name|ns1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ns2
operator|=
literal|"myroutercluster-2-"
operator|+
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
name|ns2Uri
operator|=
operator|new
name|URI
argument_list|(
literal|"hdfs://"
operator|+
name|ns2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_HA_NAMENODES_KEY_PREFIX
operator|+
literal|"."
operator|+
name|ns2
argument_list|,
literal|"nn1,nn2,nn3"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|"."
operator|+
name|ns2
operator|+
literal|".nn1"
argument_list|,
name|ns2nn1Hostname
operator|+
literal|":"
operator|+
name|rpcPort
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|"."
operator|+
name|ns2
operator|+
literal|".nn2"
argument_list|,
name|ns2nn2Hostname
operator|+
literal|":"
operator|+
name|rpcPort
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|"."
operator|+
name|ns2
operator|+
literal|".nn3"
argument_list|,
name|ns2nn3Hostname
operator|+
literal|":"
operator|+
name|rpcPort
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|PROXY_PROVIDER_KEY_PREFIX
operator|+
literal|"."
operator|+
name|ns2
argument_list|,
name|ConfiguredFailoverProxyProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|RANDOM_ORDER
operator|+
literal|"."
operator|+
name|ns2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ns3
operator|=
literal|"mycluster-3-"
operator|+
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
name|ns3Uri
operator|=
operator|new
name|URI
argument_list|(
literal|"hdfs://"
operator|+
name|ns3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|ns1
argument_list|,
name|ns2
argument_list|,
name|ns3
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"hdfs://"
operator|+
name|ns1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add more DNS related settings to the passed in configuration.    * @param config Configuration file to add settings to.    */
DECL|method|addDNSSettings (Configuration config, boolean hostResolvable, boolean useFQDN)
specifier|private
name|void
name|addDNSSettings
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|boolean
name|hostResolvable
parameter_list|,
name|boolean
name|useFQDN
parameter_list|)
block|{
name|config
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_HA_NAMENODES_KEY_PREFIX
operator|+
literal|"."
operator|+
name|ns3
argument_list|,
literal|"nn"
argument_list|)
expr_stmt|;
name|String
name|domain
init|=
name|hostResolvable
condition|?
name|MockDomainNameResolver
operator|.
name|DOMAIN
else|:
name|MockDomainNameResolver
operator|.
name|UNKNOW_DOMAIN
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|"."
operator|+
name|ns3
operator|+
literal|".nn"
argument_list|,
name|domain
operator|+
literal|":"
operator|+
name|rpcPort
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|PROXY_PROVIDER_KEY_PREFIX
operator|+
literal|"."
operator|+
name|ns3
argument_list|,
name|ConfiguredFailoverProxyProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|RESOLVE_ADDRESS_NEEDED_KEY
operator|+
literal|"."
operator|+
name|ns3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|RESOLVE_SERVICE_KEY
operator|+
literal|"."
operator|+
name|ns3
argument_list|,
name|MockDomainNameResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|RANDOM_ORDER
operator|+
literal|"."
operator|+
name|ns3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|RESOLVE_ADDRESS_TO_FQDN
operator|+
literal|"."
operator|+
name|ns3
argument_list|,
name|useFQDN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests getProxy with random.order configuration set to false.    * This expects the proxy order to be consistent every time a new    * ConfiguredFailoverProxyProvider is created.    */
annotation|@
name|Test
DECL|method|testNonRandomGetProxy ()
specifier|public
name|void
name|testNonRandomGetProxy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|nn1Count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|nn2Count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|InetSocketAddress
argument_list|,
name|ClientProtocol
argument_list|>
name|proxyMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ClientProtocol
name|nn1Mock
init|=
name|mock
argument_list|(
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nn1Mock
operator|.
name|getStats
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|createAnswer
argument_list|(
name|nn1Count
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|proxyMap
operator|.
name|put
argument_list|(
name|ns1nn1
argument_list|,
name|nn1Mock
argument_list|)
expr_stmt|;
specifier|final
name|ClientProtocol
name|nn2Mock
init|=
name|mock
argument_list|(
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nn2Mock
operator|.
name|getStats
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|createAnswer
argument_list|(
name|nn2Count
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|proxyMap
operator|.
name|put
argument_list|(
name|ns1nn2
argument_list|,
name|nn2Mock
argument_list|)
expr_stmt|;
name|ConfiguredFailoverProxyProvider
argument_list|<
name|ClientProtocol
argument_list|>
name|provider1
init|=
operator|new
name|ConfiguredFailoverProxyProvider
argument_list|<>
argument_list|(
name|conf
argument_list|,
name|ns1Uri
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|,
name|createFactory
argument_list|(
name|proxyMap
argument_list|)
argument_list|)
decl_stmt|;
name|ClientProtocol
name|proxy1
init|=
name|provider1
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
decl_stmt|;
name|proxy1
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nn1Count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn2Count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|proxy1
operator|.
name|getStats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nn1Count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn2Count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|nn1Count
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nn2Count
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ITERATIONS
condition|;
name|i
operator|++
control|)
block|{
name|ConfiguredFailoverProxyProvider
argument_list|<
name|ClientProtocol
argument_list|>
name|provider2
init|=
operator|new
name|ConfiguredFailoverProxyProvider
argument_list|<>
argument_list|(
name|conf
argument_list|,
name|ns1Uri
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|,
name|createFactory
argument_list|(
name|proxyMap
argument_list|)
argument_list|)
decl_stmt|;
name|ClientProtocol
name|proxy2
init|=
name|provider2
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
decl_stmt|;
name|proxy2
operator|.
name|getStats
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|NUM_ITERATIONS
argument_list|,
name|nn1Count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn2Count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests getProxy with random.order configuration set to true.    * This expects the proxy order to be random every time a new    * ConfiguredFailoverProxyProvider is created.    */
annotation|@
name|Test
DECL|method|testRandomGetProxy ()
specifier|public
name|void
name|testRandomGetProxy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|nn1Count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|nn2Count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|nn3Count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|InetSocketAddress
argument_list|,
name|ClientProtocol
argument_list|>
name|proxyMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ClientProtocol
name|nn1Mock
init|=
name|mock
argument_list|(
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nn1Mock
operator|.
name|getStats
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|createAnswer
argument_list|(
name|nn1Count
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|proxyMap
operator|.
name|put
argument_list|(
name|ns2nn1
argument_list|,
name|nn1Mock
argument_list|)
expr_stmt|;
specifier|final
name|ClientProtocol
name|nn2Mock
init|=
name|mock
argument_list|(
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nn2Mock
operator|.
name|getStats
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|createAnswer
argument_list|(
name|nn2Count
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|proxyMap
operator|.
name|put
argument_list|(
name|ns2nn2
argument_list|,
name|nn2Mock
argument_list|)
expr_stmt|;
specifier|final
name|ClientProtocol
name|nn3Mock
init|=
name|mock
argument_list|(
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nn3Mock
operator|.
name|getStats
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|createAnswer
argument_list|(
name|nn3Count
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|proxyMap
operator|.
name|put
argument_list|(
name|ns2nn3
argument_list|,
name|nn3Mock
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ITERATIONS
condition|;
name|i
operator|++
control|)
block|{
name|ConfiguredFailoverProxyProvider
argument_list|<
name|ClientProtocol
argument_list|>
name|provider
init|=
operator|new
name|ConfiguredFailoverProxyProvider
argument_list|<>
argument_list|(
name|conf
argument_list|,
name|ns2Uri
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|,
name|createFactory
argument_list|(
name|proxyMap
argument_list|)
argument_list|)
decl_stmt|;
name|ClientProtocol
name|proxy
init|=
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
decl_stmt|;
name|proxy
operator|.
name|getStats
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|nn1Count
operator|.
name|get
argument_list|()
operator|<
name|NUM_ITERATIONS
operator|&&
name|nn1Count
operator|.
name|get
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nn2Count
operator|.
name|get
argument_list|()
operator|<
name|NUM_ITERATIONS
operator|&&
name|nn2Count
operator|.
name|get
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nn3Count
operator|.
name|get
argument_list|()
operator|<
name|NUM_ITERATIONS
operator|&&
name|nn3Count
operator|.
name|get
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_ITERATIONS
argument_list|,
name|nn1Count
operator|.
name|get
argument_list|()
operator|+
name|nn2Count
operator|.
name|get
argument_list|()
operator|+
name|nn3Count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testResolveDomainNameUsingDNS (boolean useFQDN)
specifier|private
name|void
name|testResolveDomainNameUsingDNS
parameter_list|(
name|boolean
name|useFQDN
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|dnsConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|addDNSSettings
argument_list|(
name|dnsConf
argument_list|,
literal|true
argument_list|,
name|useFQDN
argument_list|)
expr_stmt|;
comment|// Mock ClientProtocol
name|Map
argument_list|<
name|InetSocketAddress
argument_list|,
name|ClientProtocol
argument_list|>
name|proxyMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|nn1Count
init|=
name|addClientMock
argument_list|(
name|useFQDN
condition|?
name|MockDomainNameResolver
operator|.
name|FQDN_1
else|:
name|MockDomainNameResolver
operator|.
name|ADDR_1
argument_list|,
name|proxyMap
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|nn2Count
init|=
name|addClientMock
argument_list|(
name|useFQDN
condition|?
name|MockDomainNameResolver
operator|.
name|FQDN_2
else|:
name|MockDomainNameResolver
operator|.
name|ADDR_2
argument_list|,
name|proxyMap
argument_list|)
decl_stmt|;
comment|// Get a client multiple times
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|proxyResults
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ITERATIONS
condition|;
name|i
operator|++
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|ConfiguredFailoverProxyProvider
argument_list|<
name|ClientProtocol
argument_list|>
name|provider
init|=
operator|new
name|ConfiguredFailoverProxyProvider
argument_list|<>
argument_list|(
name|dnsConf
argument_list|,
name|ns3Uri
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|,
name|createFactory
argument_list|(
name|proxyMap
argument_list|)
argument_list|)
decl_stmt|;
name|ClientProtocol
name|proxy
init|=
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
decl_stmt|;
name|String
name|proxyAddress
init|=
name|provider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxyInfo
decl_stmt|;
if|if
condition|(
name|proxyResults
operator|.
name|containsKey
argument_list|(
name|proxyAddress
argument_list|)
condition|)
block|{
name|proxyResults
operator|.
name|get
argument_list|(
name|proxyAddress
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|proxyResults
operator|.
name|put
argument_list|(
name|proxyAddress
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|proxy
operator|.
name|getStats
argument_list|()
expr_stmt|;
block|}
name|String
name|resolvedHost1
init|=
name|useFQDN
condition|?
name|MockDomainNameResolver
operator|.
name|FQDN_1
else|:
literal|"/"
operator|+
name|MockDomainNameResolver
operator|.
name|ADDR_1
decl_stmt|;
name|String
name|resolvedHost2
init|=
name|useFQDN
condition|?
name|MockDomainNameResolver
operator|.
name|FQDN_2
else|:
literal|"/"
operator|+
name|MockDomainNameResolver
operator|.
name|ADDR_2
decl_stmt|;
comment|// Check we got the proper addresses
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|proxyResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"nn1 wasn't returned: "
operator|+
name|proxyResults
argument_list|,
name|proxyResults
operator|.
name|containsKey
argument_list|(
name|resolvedHost1
operator|+
literal|":8020"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"nn2 wasn't returned: "
operator|+
name|proxyResults
argument_list|,
name|proxyResults
operator|.
name|containsKey
argument_list|(
name|resolvedHost2
operator|+
literal|":8020"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the Namenodes were invoked
name|assertEquals
argument_list|(
name|NUM_ITERATIONS
argument_list|,
name|nn1Count
operator|.
name|get
argument_list|()
operator|+
name|nn2Count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"nn1 was selected too much:"
operator|+
name|nn1Count
operator|.
name|get
argument_list|()
argument_list|,
name|nn1Count
operator|.
name|get
argument_list|()
operator|<
name|NUM_ITERATIONS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"nn1 should have been selected: "
operator|+
name|nn1Count
operator|.
name|get
argument_list|()
argument_list|,
name|nn1Count
operator|.
name|get
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"nn2 was selected too much:"
operator|+
name|nn2Count
operator|.
name|get
argument_list|()
argument_list|,
name|nn2Count
operator|.
name|get
argument_list|()
operator|<
name|NUM_ITERATIONS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"nn2 should have been selected: "
operator|+
name|nn2Count
operator|.
name|get
argument_list|()
argument_list|,
name|nn2Count
operator|.
name|get
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolveDomainNameUsingDNS ()
specifier|public
name|void
name|testResolveDomainNameUsingDNS
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test resolving to IP
name|testResolveDomainNameUsingDNS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// test resolving to FQDN
name|testResolveDomainNameUsingDNS
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolveDomainNameUsingDNSUnknownHost ()
specifier|public
name|void
name|testResolveDomainNameUsingDNSUnknownHost
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|dnsConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|addDNSSettings
argument_list|(
name|dnsConf
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|InetSocketAddress
argument_list|,
name|ClientProtocol
argument_list|>
name|proxyMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|)
expr_stmt|;
name|ConfiguredFailoverProxyProvider
argument_list|<
name|ClientProtocol
argument_list|>
name|provider
init|=
operator|new
name|ConfiguredFailoverProxyProvider
argument_list|<>
argument_list|(
name|dnsConf
argument_list|,
name|ns3Uri
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|,
name|createFactory
argument_list|(
name|proxyMap
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"failover proxy cannot be created due to unknownhost"
argument_list|,
name|provider
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a ClientProtocol mock for the proxy.    * @param host host name for the destination.    * @param proxyMap Map containing the client for each target address.    * @return The counter for the number of calls to this target.    * @throws Exception If the client cannot be created.    */
DECL|method|addClientMock ( String host, Map<InetSocketAddress, ClientProtocol> proxyMap)
specifier|private
name|AtomicInteger
name|addClientMock
parameter_list|(
name|String
name|host
parameter_list|,
name|Map
argument_list|<
name|InetSocketAddress
argument_list|,
name|ClientProtocol
argument_list|>
name|proxyMap
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|inetSockerAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|rpcPort
argument_list|)
decl_stmt|;
specifier|final
name|ClientProtocol
name|cpMock
init|=
name|mock
argument_list|(
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cpMock
operator|.
name|getStats
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|createAnswer
argument_list|(
name|counter
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|proxyMap
operator|.
name|put
argument_list|(
name|inetSockerAddr
argument_list|,
name|cpMock
argument_list|)
expr_stmt|;
return|return
name|counter
return|;
block|}
comment|/**    * createAnswer creates an Answer for using with the ClientProtocol mocks.    * @param counter counter to increment    * @param retVal return value from answer    * @return    */
DECL|method|createAnswer (final AtomicInteger counter, final long retVal)
specifier|private
name|Answer
argument_list|<
name|long
index|[]
argument_list|>
name|createAnswer
parameter_list|(
specifier|final
name|AtomicInteger
name|counter
parameter_list|,
specifier|final
name|long
name|retVal
parameter_list|)
block|{
return|return
operator|new
name|Answer
argument_list|<
name|long
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
index|[]
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|long
index|[]
block|{
name|retVal
block|}
return|;
block|}
block|}
return|;
block|}
comment|/**    * createFactory returns a HAProxyFactory for tests.    * This uses a map of name node address to ClientProtocol to route calls to    * different ClientProtocol objects. The tests could create ClientProtocol    * mocks and create name node mappings to use with    * ConfiguredFailoverProxyProvider.    */
DECL|method|createFactory ( final Map<InetSocketAddress, ClientProtocol> proxies)
specifier|private
name|HAProxyFactory
argument_list|<
name|ClientProtocol
argument_list|>
name|createFactory
parameter_list|(
specifier|final
name|Map
argument_list|<
name|InetSocketAddress
argument_list|,
name|ClientProtocol
argument_list|>
name|proxies
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|InetSocketAddress
argument_list|,
name|ClientProtocol
argument_list|>
name|proxyMap
init|=
name|proxies
decl_stmt|;
return|return
operator|new
name|HAProxyFactory
argument_list|<
name|ClientProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClientProtocol
name|createProxy
parameter_list|(
name|Configuration
name|cfg
parameter_list|,
name|InetSocketAddress
name|nnAddr
parameter_list|,
name|Class
argument_list|<
name|ClientProtocol
argument_list|>
name|xface
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|boolean
name|withRetries
parameter_list|,
name|AtomicBoolean
name|fallbackToSimpleAuth
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|proxyMap
operator|.
name|containsKey
argument_list|(
name|nnAddr
argument_list|)
condition|)
block|{
return|return
name|proxyMap
operator|.
name|get
argument_list|(
name|nnAddr
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Name node address not found"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ClientProtocol
name|createProxy
parameter_list|(
name|Configuration
name|cfg
parameter_list|,
name|InetSocketAddress
name|nnAddr
parameter_list|,
name|Class
argument_list|<
name|ClientProtocol
argument_list|>
name|xface
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|boolean
name|withRetries
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|proxyMap
operator|.
name|containsKey
argument_list|(
name|nnAddr
argument_list|)
condition|)
block|{
return|return
name|proxyMap
operator|.
name|get
argument_list|(
name|nnAddr
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Name node address not found"
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

