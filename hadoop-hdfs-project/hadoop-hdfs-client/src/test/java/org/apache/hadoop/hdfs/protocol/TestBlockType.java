begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockType
operator|.
name|CONTIGUOUS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockType
operator|.
name|STRIPED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test the BlockType class.  */
end_comment

begin_class
DECL|class|TestBlockType
specifier|public
class|class
name|TestBlockType
block|{
annotation|@
name|Test
DECL|method|testGetBlockType ()
specifier|public
name|void
name|testGetBlockType
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x0000000000000000L
argument_list|)
argument_list|,
name|CONTIGUOUS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x1000000000000000L
argument_list|)
argument_list|,
name|CONTIGUOUS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x2000000000000000L
argument_list|)
argument_list|,
name|CONTIGUOUS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x4000000000000000L
argument_list|)
argument_list|,
name|CONTIGUOUS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x7000000000000000L
argument_list|)
argument_list|,
name|CONTIGUOUS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x00000000ffffffffL
argument_list|)
argument_list|,
name|CONTIGUOUS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x10000000ffffffffL
argument_list|)
argument_list|,
name|CONTIGUOUS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x20000000ffffffffL
argument_list|)
argument_list|,
name|CONTIGUOUS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x40000000ffffffffL
argument_list|)
argument_list|,
name|CONTIGUOUS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x70000000ffffffffL
argument_list|)
argument_list|,
name|CONTIGUOUS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x70000000ffffffffL
argument_list|)
argument_list|,
name|CONTIGUOUS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x0fffffffffffffffL
argument_list|)
argument_list|,
name|CONTIGUOUS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x1fffffffffffffffL
argument_list|)
argument_list|,
name|CONTIGUOUS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x2fffffffffffffffL
argument_list|)
argument_list|,
name|CONTIGUOUS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x4fffffffffffffffL
argument_list|)
argument_list|,
name|CONTIGUOUS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x7fffffffffffffffL
argument_list|)
argument_list|,
name|CONTIGUOUS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x8000000000000000L
argument_list|)
argument_list|,
name|STRIPED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x9000000000000000L
argument_list|)
argument_list|,
name|STRIPED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0xa000000000000000L
argument_list|)
argument_list|,
name|STRIPED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0xf000000000000000L
argument_list|)
argument_list|,
name|STRIPED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x80000000ffffffffL
argument_list|)
argument_list|,
name|STRIPED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x90000000ffffffffL
argument_list|)
argument_list|,
name|STRIPED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0xa0000000ffffffffL
argument_list|)
argument_list|,
name|STRIPED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0xf0000000ffffffffL
argument_list|)
argument_list|,
name|STRIPED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x8fffffffffffffffL
argument_list|)
argument_list|,
name|STRIPED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0x9fffffffffffffffL
argument_list|)
argument_list|,
name|STRIPED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0xafffffffffffffffL
argument_list|)
argument_list|,
name|STRIPED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockType
operator|.
name|fromBlockId
argument_list|(
literal|0xffffffffffffffffL
argument_list|)
argument_list|,
name|STRIPED
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

