begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|assertExceptionContains
import|;
end_import

begin_comment
comment|/**  * Test load EC policy file.  */
end_comment

begin_class
DECL|class|TestECPolicyLoader
specifier|public
class|class
name|TestECPolicyLoader
block|{
DECL|field|TEST_DIR
specifier|private
specifier|final
specifier|static
name|String
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|POLICY_FILE
specifier|private
specifier|final
specifier|static
name|String
name|POLICY_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test-ecpolicy"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
comment|/**    * Test load EC policy.    */
annotation|@
name|Test
DECL|method|testLoadECPolicy ()
specifier|public
name|void
name|testLoadECPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|POLICY_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<configuration>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<layoutversion>1</layoutversion>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schemas>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema id=\"RSk12m4\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<codec>RS</codec>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<k>12</k>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<m>4</m>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema id=\"RS-legacyk12m4\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<codec>RS-legacy</codec>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<k>12</k>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<m>4</m>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</schemas>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<policies>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema>RSk12m4</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<cellsize>131072</cellsize>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema>RS-legacyk12m4</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<cellsize>262144</cellsize>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</policies>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</configuration>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|ECPolicyLoader
name|ecPolicyLoader
init|=
operator|new
name|ECPolicyLoader
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ErasureCodingPolicy
argument_list|>
name|policies
init|=
name|ecPolicyLoader
operator|.
name|loadPolicy
argument_list|(
name|POLICY_FILE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|policies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ErasureCodingPolicy
name|policy1
init|=
name|policies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ECSchema
name|schema1
init|=
name|policy1
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|131072
argument_list|,
name|policy1
operator|.
name|getCellSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|schema1
operator|.
name|getExtraOptions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|schema1
operator|.
name|getNumDataUnits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|schema1
operator|.
name|getNumParityUnits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RS"
argument_list|,
name|schema1
operator|.
name|getCodecName
argument_list|()
argument_list|)
expr_stmt|;
name|ErasureCodingPolicy
name|policy2
init|=
name|policies
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ECSchema
name|schema2
init|=
name|policy2
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|262144
argument_list|,
name|policy2
operator|.
name|getCellSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|schema2
operator|.
name|getExtraOptions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|schema2
operator|.
name|getNumDataUnits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|schema2
operator|.
name|getNumParityUnits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RS-legacy"
argument_list|,
name|schema2
operator|.
name|getCodecName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test load null EC schema option.    */
annotation|@
name|Test
DECL|method|testNullECSchemaOptionValue ()
specifier|public
name|void
name|testNullECSchemaOptionValue
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|POLICY_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<configuration>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<layoutversion>1</layoutversion>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schemas>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema id=\"RSk12m4\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<codec>RS</codec>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<k>12</k>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<m>4</m>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema id=\"RS-legacyk12m4\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<codec>RS-legacy</codec>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<k>12</k>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<m>4</m>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<option></option>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</schemas>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<policies>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema>RS-legacyk12m4</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<cellsize>1024</cellsize>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema>RSk12m4</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<cellsize>20480</cellsize>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</policies>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</configuration>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|ECPolicyLoader
name|ecPolicyLoader
init|=
operator|new
name|ECPolicyLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|ecPolicyLoader
operator|.
name|loadPolicy
argument_list|(
name|POLICY_FILE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IllegalArgumentException should be thrown for null value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Value of<option> is null"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test load repetitive EC schema.    */
annotation|@
name|Test
DECL|method|testRepeatECSchema ()
specifier|public
name|void
name|testRepeatECSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|POLICY_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<configuration>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<layoutversion>1</layoutversion>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schemas>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema id=\"RSk12m4\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<codec>RS-legacy</codec>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<k>12</k>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<m>4</m>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema id=\"RS-legacyk12m4\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<codec>RS-legacy</codec>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<k>12</k>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<m>4</m>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</schemas>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<policies>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema>RS-legacyk12m4</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<cellsize>1024</cellsize>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema>RSk12m4</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<cellsize>20480</cellsize>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</policies>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</configuration>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|ECPolicyLoader
name|ecPolicyLoader
init|=
operator|new
name|ECPolicyLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|ecPolicyLoader
operator|.
name|loadPolicy
argument_list|(
name|POLICY_FILE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"RuntimeException should be thrown for repetitive elements"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Repetitive schemas in EC policy"
operator|+
literal|" configuration file: RS-legacyk12m4"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test load bad EC policy layoutversion.    */
annotation|@
name|Test
DECL|method|testBadECLayoutVersion ()
specifier|public
name|void
name|testBadECLayoutVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|POLICY_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<configuration>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<layoutversion>3</layoutversion>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schemas>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema id=\"RSk12m4\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<codec>RS</codec>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<k>12</k>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<m>4</m>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema id=\"RS-legacyk12m4\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<codec>RS-legacy</codec>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<k>12</k>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<m>4</m>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</schemas>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<policies>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema>RSk12m4</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<cellsize>1024</cellsize>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</policies>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</configuration>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|ECPolicyLoader
name|ecPolicyLoader
init|=
operator|new
name|ECPolicyLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|ecPolicyLoader
operator|.
name|loadPolicy
argument_list|(
name|POLICY_FILE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"RuntimeException should be thrown for bad layoutversion"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"The parse failed because of "
operator|+
literal|"bad layoutversion value"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test load bad EC policy cellsize.    */
annotation|@
name|Test
DECL|method|testBadECCellsize ()
specifier|public
name|void
name|testBadECCellsize
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|POLICY_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<configuration>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<layoutversion>1</layoutversion>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schemas>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema id=\"RSk12m4\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<codec>RS</codec>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<k>12</k>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<m>4</m>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema id=\"RS-legacyk12m4\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<codec>RS-legacy</codec>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<k>12</k>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<m>4</m>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</schemas>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<policies>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema>RSk12m4</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<cellsize>free</cellsize>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</policies>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</configuration>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|ECPolicyLoader
name|ecPolicyLoader
init|=
operator|new
name|ECPolicyLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|ecPolicyLoader
operator|.
name|loadPolicy
argument_list|(
name|POLICY_FILE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IllegalArgumentException should be thrown for bad policy"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Bad EC policy cellsize value free is found."
operator|+
literal|" It should be an integer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test load bad EC policy.    */
annotation|@
name|Test
DECL|method|testBadECPolicy ()
specifier|public
name|void
name|testBadECPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|POLICY_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<configuration>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<layoutversion>1</layoutversion>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schemas>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema id=\"RSk12m4\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<codec>RS</codec>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<k>12</k>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<m>4</m>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema id=\"RS-legacyk12m4\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<codec>RS-legacy</codec>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<k>12</k>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<m>4</m>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</schemas>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<policies>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schema>RSk12m4</schema>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<cellsize>-1025</cellsize>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</policies>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</configuration>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|ECPolicyLoader
name|ecPolicyLoader
init|=
operator|new
name|ECPolicyLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|ecPolicyLoader
operator|.
name|loadPolicy
argument_list|(
name|POLICY_FILE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"RuntimeException should be thrown for bad policy"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Bad policy is found in EC policy"
operator|+
literal|" configuration file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

