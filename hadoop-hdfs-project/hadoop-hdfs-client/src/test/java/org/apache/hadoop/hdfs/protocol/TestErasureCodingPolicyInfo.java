begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SystemErasureCodingPolicies
operator|.
name|RS_6_3_POLICY_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicyState
operator|.
name|DISABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicyState
operator|.
name|ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicyState
operator|.
name|REMOVED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Test {@link ErasureCodingPolicyInfo}.  */
end_comment

begin_class
DECL|class|TestErasureCodingPolicyInfo
specifier|public
class|class
name|TestErasureCodingPolicyInfo
block|{
annotation|@
name|Test
DECL|method|testPolicyAndStateCantBeNull ()
specifier|public
name|void
name|testPolicyAndStateCantBeNull
parameter_list|()
block|{
try|try
block|{
operator|new
name|ErasureCodingPolicyInfo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Null policy should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
try|try
block|{
operator|new
name|ErasureCodingPolicyInfo
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|getByID
argument_list|(
name|RS_6_3_POLICY_ID
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Null policy state should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|testStates ()
specifier|public
name|void
name|testStates
parameter_list|()
block|{
name|ErasureCodingPolicyInfo
name|info
init|=
operator|new
name|ErasureCodingPolicyInfo
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|getByID
argument_list|(
name|RS_6_3_POLICY_ID
argument_list|)
argument_list|)
decl_stmt|;
name|info
operator|.
name|setState
argument_list|(
name|ENABLED
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|info
operator|.
name|isDisabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|info
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|info
operator|.
name|isRemoved
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setState
argument_list|(
name|REMOVED
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|info
operator|.
name|isDisabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|info
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|info
operator|.
name|isRemoved
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setState
argument_list|(
name|DISABLED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|info
operator|.
name|isDisabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|info
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|info
operator|.
name|isRemoved
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

