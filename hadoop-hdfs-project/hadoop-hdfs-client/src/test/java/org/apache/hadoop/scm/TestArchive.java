begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.scm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Adler32
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import

begin_comment
comment|/**  * Test archive creation and unpacking.  */
end_comment

begin_class
DECL|class|TestArchive
specifier|public
class|class
name|TestArchive
block|{
DECL|field|DIR_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|DIR_COUNT
init|=
literal|10
decl_stmt|;
DECL|field|SUB_DIR_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|SUB_DIR_COUNT
init|=
literal|3
decl_stmt|;
DECL|field|FILE_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|FILE_COUNT
init|=
literal|10
decl_stmt|;
DECL|field|checksumWrite
specifier|private
name|long
name|checksumWrite
init|=
literal|0L
decl_stmt|;
DECL|field|checksumRead
specifier|private
name|long
name|checksumRead
init|=
literal|0L
decl_stmt|;
DECL|field|tmp
specifier|private
name|long
name|tmp
init|=
literal|0L
decl_stmt|;
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|outputFolder
specifier|public
name|TemporaryFolder
name|outputFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
DECL|field|crc
name|Checksum
name|crc
init|=
operator|new
name|Adler32
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|int
name|megaByte
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|DIR_COUNT
condition|;
name|x
operator|++
control|)
block|{
name|File
name|subdir
init|=
name|folder
operator|.
name|newFolder
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"dir%d"
argument_list|,
name|x
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|SUB_DIR_COUNT
condition|;
name|y
operator|++
control|)
block|{
name|File
name|targetDir
init|=
operator|new
name|File
argument_list|(
name|subdir
operator|.
name|getPath
argument_list|()
operator|.
name|concat
argument_list|(
name|File
operator|.
name|separator
argument_list|)
operator|.
name|concat
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"subdir%d%d"
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|targetDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create subdirectory. "
operator|+
name|targetDir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|z
init|=
literal|0
init|;
name|z
operator|<
name|FILE_COUNT
condition|;
name|z
operator|++
control|)
block|{
name|Path
name|temp
init|=
name|Paths
operator|.
name|get
argument_list|(
name|targetDir
operator|.
name|getPath
argument_list|()
operator|.
name|concat
argument_list|(
name|File
operator|.
name|separator
argument_list|)
operator|.
name|concat
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"File%d.txt"
argument_list|,
name|z
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
name|RandomUtils
operator|.
name|nextBytes
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|megaByte
argument_list|)
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|temp
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|crc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|crc
operator|.
name|update
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|crc
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|checksumWrite
operator|+=
name|tmp
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testArchive ()
specifier|public
name|void
name|testArchive
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|archiveFile
init|=
operator|new
name|File
argument_list|(
name|outputFolder
operator|.
name|getRoot
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"test.container.zip"
argument_list|)
decl_stmt|;
name|long
name|zipCheckSum
init|=
name|FileUtil
operator|.
name|zip
argument_list|(
name|folder
operator|.
name|getRoot
argument_list|()
argument_list|,
name|archiveFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|zipCheckSum
operator|>
literal|0
argument_list|)
expr_stmt|;
name|File
name|decomp
init|=
operator|new
name|File
argument_list|(
name|outputFolder
operator|.
name|getRoot
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"decompress"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|decomp
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|decomp
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to create the destination directory. "
operator|+
name|decomp
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
name|FileUtil
operator|.
name|unZip
argument_list|(
name|archiveFile
argument_list|,
name|decomp
argument_list|)
expr_stmt|;
name|String
index|[]
name|patterns
init|=
block|{
literal|"txt"
block|}
decl_stmt|;
name|Iterator
argument_list|<
name|File
argument_list|>
name|iter
init|=
name|FileUtils
operator|.
name|iterateFiles
argument_list|(
name|decomp
argument_list|,
name|patterns
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|byte
index|[]
name|buf
init|=
name|Files
operator|.
name|readAllBytes
argument_list|(
name|iter
operator|.
name|next
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|)
decl_stmt|;
name|crc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|crc
operator|.
name|update
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|crc
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|checksumRead
operator|+=
name|tmp
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DIR_COUNT
operator|*
name|SUB_DIR_COUNT
operator|*
name|FILE_COUNT
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|checksumWrite
argument_list|,
name|checksumRead
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

