begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|RaidNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|RaidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|protocol
operator|.
name|PolicyInfo
operator|.
name|ErasureCodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRaidDfs
specifier|public
class|class
name|TestRaidDfs
block|{
DECL|field|TEST_DIR
specifier|final
specifier|static
name|String
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"target/test-data"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|LOG_DIR
specifier|final
specifier|static
name|String
name|LOG_DIR
init|=
literal|"target/raidlog"
decl_stmt|;
DECL|field|RELOAD_INTERVAL
specifier|final
specifier|static
name|long
name|RELOAD_INTERVAL
init|=
literal|1000
decl_stmt|;
DECL|field|LOG
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.raid.TestRaidDfs"
argument_list|)
decl_stmt|;
DECL|field|NUM_DATANODES
specifier|final
specifier|static
name|int
name|NUM_DATANODES
init|=
literal|3
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|namenode
name|String
name|namenode
init|=
literal|null
decl_stmt|;
DECL|field|hftp
name|String
name|hftp
init|=
literal|null
decl_stmt|;
DECL|field|dfs
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
DECL|field|fileSys
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
DECL|field|jobTrackerName
name|String
name|jobTrackerName
init|=
literal|null
decl_stmt|;
DECL|field|code
name|ErasureCodeType
name|code
decl_stmt|;
DECL|field|stripeLength
name|int
name|stripeLength
decl_stmt|;
DECL|method|mySetup ( String erasureCode, int rsParityLength)
specifier|private
name|void
name|mySetup
parameter_list|(
name|String
name|erasureCode
parameter_list|,
name|int
name|rsParityLength
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// Make sure data directory exists
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.raid.recoverylogdir"
argument_list|,
name|LOG_DIR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|RaidNode
operator|.
name|RS_PARITY_LENGTH_KEY
argument_list|,
name|rsParityLength
argument_list|)
expr_stmt|;
comment|// scan all policies once every 5 second
name|conf
operator|.
name|setLong
argument_list|(
literal|"raid.policy.rescan.interval"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
comment|// make all deletions not go through Trash
name|conf
operator|.
name|set
argument_list|(
literal|"fs.shell.delete.classname"
argument_list|,
literal|"org.apache.hadoop.hdfs.DFSClient"
argument_list|)
expr_stmt|;
comment|// do not use map-reduce cluster for Raiding
name|conf
operator|.
name|set
argument_list|(
literal|"raid.classname"
argument_list|,
literal|"org.apache.hadoop.raid.LocalRaidNode"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"raid.server.address"
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hdfs.raid.stripeLength"
argument_list|,
name|stripeLength
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"xor"
operator|.
name|equals
argument_list|(
name|erasureCode
argument_list|)
condition|?
name|RaidNode
operator|.
name|RAID_LOCATION_KEY
else|:
name|RaidNode
operator|.
name|RAIDRS_LOCATION_KEY
argument_list|,
literal|"/destraid"
argument_list|)
expr_stmt|;
name|dfs
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATANODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|namenode
operator|=
name|fileSys
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|hftp
operator|=
literal|"hftp://localhost.localdomain:"
operator|+
name|dfs
operator|.
name|getNameNodePort
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|namenode
argument_list|)
expr_stmt|;
block|}
DECL|method|myTearDown ()
specifier|private
name|void
name|myTearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getBlockLocations (Path file, long length)
specifier|private
name|LocatedBlocks
name|getBlockLocations
parameter_list|(
name|Path
name|file
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
decl_stmt|;
return|return
name|RaidDFSUtil
operator|.
name|getBlockLocations
argument_list|(
name|dfs
argument_list|,
name|file
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
return|;
block|}
DECL|method|getBlockLocations (Path file)
specifier|private
name|LocatedBlocks
name|getBlockLocations
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|stat
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
return|return
name|getBlockLocations
argument_list|(
name|file
argument_list|,
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getRaidFS ()
specifier|private
name|DistributedRaidFileSystem
name|getRaidFS
parameter_list|()
throws|throws
name|IOException
block|{
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
decl_stmt|;
name|Configuration
name|clientConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|set
argument_list|(
literal|"fs.hdfs.impl"
argument_list|,
literal|"org.apache.hadoop.hdfs.DistributedRaidFileSystem"
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|set
argument_list|(
literal|"fs.raid.underlyingfs.impl"
argument_list|,
literal|"org.apache.hadoop.hdfs.DistributedFileSystem"
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setBoolean
argument_list|(
literal|"fs.hdfs.impl.disable.cache"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|URI
name|dfsUri
init|=
name|dfs
operator|.
name|getUri
argument_list|()
decl_stmt|;
return|return
operator|(
name|DistributedRaidFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|dfsUri
argument_list|,
name|clientConf
argument_list|)
return|;
block|}
DECL|method|waitForFileRaided ( Log logger, FileSystem fileSys, Path file, Path destPath)
specifier|public
specifier|static
name|void
name|waitForFileRaided
parameter_list|(
name|Log
name|logger
parameter_list|,
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|file
parameter_list|,
name|Path
name|destPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|FileStatus
name|parityStat
init|=
literal|null
decl_stmt|;
name|String
name|fileName
init|=
name|file
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// wait till file is raided
while|while
condition|(
name|parityStat
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Waiting for files to be raided."
argument_list|)
expr_stmt|;
try|try
block|{
name|FileStatus
index|[]
name|listPaths
init|=
name|fileSys
operator|.
name|listStatus
argument_list|(
name|destPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|listPaths
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FileStatus
name|f
range|:
name|listPaths
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"File raided so far : "
operator|+
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|found
init|=
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|equals
argument_list|(
name|found
argument_list|)
condition|)
block|{
name|parityStat
operator|=
name|f
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// keep waiting
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|LocatedBlocks
name|locations
init|=
literal|null
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
decl_stmt|;
name|locations
operator|=
name|RaidDFSUtil
operator|.
name|getBlockLocations
argument_list|(
name|dfs
argument_list|,
name|file
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
literal|0
argument_list|,
name|parityStat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|locations
operator|.
name|isUnderConstruction
argument_list|()
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|FileStatus
name|stat
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|.
name|getReplication
argument_list|()
operator|==
literal|1
condition|)
break|break;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|corruptBlockAndValidate (Path srcFile, Path destPath, int[] listBlockNumToCorrupt, long blockSize, int numBlocks)
specifier|private
name|void
name|corruptBlockAndValidate
parameter_list|(
name|Path
name|srcFile
parameter_list|,
name|Path
name|destPath
parameter_list|,
name|int
index|[]
name|listBlockNumToCorrupt
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|int
name|numBlocks
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|repl
init|=
literal|1
decl_stmt|;
name|long
name|crc
init|=
name|createTestFilePartialLastBlock
argument_list|(
name|fileSys
argument_list|,
name|srcFile
argument_list|,
name|repl
argument_list|,
name|numBlocks
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|long
name|length
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|srcFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|RaidNode
operator|.
name|doRaid
argument_list|(
name|conf
argument_list|,
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|srcFile
argument_list|)
argument_list|,
name|destPath
argument_list|,
name|code
argument_list|,
operator|new
name|RaidNode
operator|.
name|Statistics
argument_list|()
argument_list|,
operator|new
name|RaidUtils
operator|.
name|DummyProgressable
argument_list|()
argument_list|,
literal|false
argument_list|,
name|repl
argument_list|,
name|repl
argument_list|,
name|stripeLength
argument_list|)
expr_stmt|;
comment|// Delete first block of file
for|for
control|(
name|int
name|blockNumToCorrupt
range|:
name|listBlockNumToCorrupt
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Corrupt block "
operator|+
name|blockNumToCorrupt
operator|+
literal|" of file "
operator|+
name|srcFile
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|locations
init|=
name|getBlockLocations
argument_list|(
name|srcFile
argument_list|)
decl_stmt|;
name|corruptBlock
argument_list|(
name|dfs
argument_list|,
name|srcFile
argument_list|,
name|locations
operator|.
name|get
argument_list|(
name|blockNumToCorrupt
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|,
name|NUM_DATANODES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Validate
name|DistributedRaidFileSystem
name|raidfs
init|=
name|getRaidFS
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|validateFile
argument_list|(
name|raidfs
argument_list|,
name|srcFile
argument_list|,
name|length
argument_list|,
name|crc
argument_list|)
argument_list|)
expr_stmt|;
name|validateLogFile
argument_list|(
name|getRaidFS
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|LOG_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a file, corrupt several blocks in it and ensure that the file can be    * read through DistributedRaidFileSystem by ReedSolomon coding.    */
annotation|@
name|Test
DECL|method|testRaidDfsRs ()
specifier|public
name|void
name|testRaidDfsRs
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testRaidDfs started."
argument_list|)
expr_stmt|;
name|code
operator|=
name|ErasureCodeType
operator|.
name|RS
expr_stmt|;
name|long
name|blockSize
init|=
literal|8192L
decl_stmt|;
name|int
name|numBlocks
init|=
literal|8
decl_stmt|;
name|stripeLength
operator|=
literal|3
expr_stmt|;
name|mySetup
argument_list|(
literal|"rs"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|corrupt
init|=
block|{
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
block|,
block|{
literal|1
block|,
literal|4
block|,
literal|7
block|}
block|,
block|{
literal|3
block|,
literal|6
block|,
literal|7
block|}
block|}
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|corrupt
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/user/dhruba/raidtest/file"
operator|+
name|i
argument_list|)
decl_stmt|;
name|corruptBlockAndValidate
argument_list|(
name|file
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/destraid"
argument_list|)
argument_list|,
name|corrupt
index|[
name|i
index|]
argument_list|,
name|blockSize
argument_list|,
name|numBlocks
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testRaidDfs Exception "
operator|+
name|e
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|myTearDown
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testRaidDfs completed."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test DistributedRaidFileSystem.readFully()    */
annotation|@
name|Test
DECL|method|testReadFully ()
specifier|public
name|void
name|testReadFully
parameter_list|()
throws|throws
name|Exception
block|{
name|code
operator|=
name|ErasureCodeType
operator|.
name|XOR
expr_stmt|;
name|stripeLength
operator|=
literal|3
expr_stmt|;
name|mySetup
argument_list|(
literal|"xor"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/user/raid/raidtest/file1"
argument_list|)
decl_stmt|;
name|long
name|crc
init|=
name|createTestFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|8192L
argument_list|)
decl_stmt|;
name|FileStatus
name|stat
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created "
operator|+
name|file
operator|+
literal|", crc="
operator|+
name|crc
operator|+
literal|", len="
operator|+
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|filebytes
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|stat
operator|.
name|getLen
argument_list|()
index|]
decl_stmt|;
comment|// Test that readFully returns the correct CRC when there are no errors.
name|DistributedRaidFileSystem
name|raidfs
init|=
name|getRaidFS
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|stm
init|=
name|raidfs
operator|.
name|open
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|stm
operator|.
name|readFully
argument_list|(
literal|0
argument_list|,
name|filebytes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|crc
argument_list|,
name|bufferCRC
argument_list|(
name|filebytes
argument_list|)
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Generate parity.
name|RaidNode
operator|.
name|doRaid
argument_list|(
name|conf
argument_list|,
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/destraid"
argument_list|)
argument_list|,
name|code
argument_list|,
operator|new
name|RaidNode
operator|.
name|Statistics
argument_list|()
argument_list|,
operator|new
name|RaidUtils
operator|.
name|DummyProgressable
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|stripeLength
argument_list|)
expr_stmt|;
name|int
index|[]
name|corrupt
init|=
block|{
literal|0
block|,
literal|4
block|,
literal|7
block|}
decl_stmt|;
comment|// first, last and middle block
for|for
control|(
name|int
name|blockIdx
range|:
name|corrupt
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Corrupt block "
operator|+
name|blockIdx
operator|+
literal|" of file "
operator|+
name|file
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|locations
init|=
name|getBlockLocations
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|corruptBlock
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|,
name|locations
operator|.
name|get
argument_list|(
name|blockIdx
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|,
name|NUM_DATANODES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Test that readFully returns the correct CRC when there are errors.
name|stm
operator|=
name|raidfs
operator|.
name|open
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|stm
operator|.
name|readFully
argument_list|(
literal|0
argument_list|,
name|filebytes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|crc
argument_list|,
name|bufferCRC
argument_list|(
name|filebytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|myTearDown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that access time and mtime of a source file do not change after    * raiding.    */
annotation|@
name|Test
DECL|method|testAccessTime ()
specifier|public
name|void
name|testAccessTime
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testAccessTime started."
argument_list|)
expr_stmt|;
name|code
operator|=
name|ErasureCodeType
operator|.
name|XOR
expr_stmt|;
name|long
name|blockSize
init|=
literal|8192L
decl_stmt|;
name|int
name|numBlocks
init|=
literal|8
decl_stmt|;
name|int
name|repl
init|=
literal|1
decl_stmt|;
name|stripeLength
operator|=
literal|3
expr_stmt|;
name|mySetup
argument_list|(
literal|"xor"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/user/dhruba/raidtest/file"
argument_list|)
decl_stmt|;
name|createTestFilePartialLastBlock
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|repl
argument_list|,
name|numBlocks
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|FileStatus
name|stat
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|RaidNode
operator|.
name|doRaid
argument_list|(
name|conf
argument_list|,
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/destraid"
argument_list|)
argument_list|,
name|code
argument_list|,
operator|new
name|RaidNode
operator|.
name|Statistics
argument_list|()
argument_list|,
operator|new
name|RaidUtils
operator|.
name|DummyProgressable
argument_list|()
argument_list|,
literal|false
argument_list|,
name|repl
argument_list|,
name|repl
argument_list|,
name|stripeLength
argument_list|)
expr_stmt|;
name|FileStatus
name|newStat
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|stat
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|newStat
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stat
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|newStat
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|myTearDown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Create a file, corrupt a block in it and ensure that the file can be    * read through DistributedRaidFileSystem by XOR code.    */
annotation|@
name|Test
DECL|method|testRaidDfsXor ()
specifier|public
name|void
name|testRaidDfsXor
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testRaidDfs started."
argument_list|)
expr_stmt|;
name|code
operator|=
name|ErasureCodeType
operator|.
name|XOR
expr_stmt|;
name|long
name|blockSize
init|=
literal|8192L
decl_stmt|;
name|int
name|numBlocks
init|=
literal|8
decl_stmt|;
name|stripeLength
operator|=
literal|3
expr_stmt|;
name|mySetup
argument_list|(
literal|"xor"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|corrupt
init|=
block|{
block|{
literal|0
block|}
block|,
block|{
literal|4
block|}
block|,
block|{
literal|7
block|}
block|}
decl_stmt|;
comment|// first, last and middle block
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|corrupt
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/user/dhruba/raidtest/"
operator|+
name|i
argument_list|)
decl_stmt|;
name|corruptBlockAndValidate
argument_list|(
name|file
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/destraid"
argument_list|)
argument_list|,
name|corrupt
index|[
name|i
index|]
argument_list|,
name|blockSize
argument_list|,
name|numBlocks
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testRaidDfs Exception "
operator|+
name|e
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|myTearDown
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testRaidDfs completed."
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// creates a file and populate it with random data. Returns its crc.
comment|//
DECL|method|createTestFile (FileSystem fileSys, Path name, int repl, int numBlocks, long blocksize)
specifier|public
specifier|static
name|long
name|createTestFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|,
name|int
name|numBlocks
parameter_list|,
name|long
name|blocksize
parameter_list|)
throws|throws
name|IOException
block|{
name|CRC32
name|crc
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|repl
argument_list|,
name|blocksize
argument_list|)
decl_stmt|;
comment|// fill random data into file
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|blocksize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlocks
condition|;
name|i
operator|++
control|)
block|{
name|rand
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|crc
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|crc
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|//
comment|// Creates a file with partially full last block. Populate it with random
comment|// data. Returns its crc.
comment|//
DECL|method|createTestFilePartialLastBlock ( FileSystem fileSys, Path name, int repl, int numBlocks, long blocksize)
specifier|public
specifier|static
name|long
name|createTestFilePartialLastBlock
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|,
name|int
name|numBlocks
parameter_list|,
name|long
name|blocksize
parameter_list|)
throws|throws
name|IOException
block|{
name|CRC32
name|crc
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|repl
argument_list|,
name|blocksize
argument_list|)
decl_stmt|;
comment|// Write whole blocks.
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|blocksize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numBlocks
condition|;
name|i
operator|++
control|)
block|{
name|rand
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|crc
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
comment|// Write partial block.
name|b
operator|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|blocksize
operator|/
literal|2
operator|-
literal|1
index|]
expr_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|crc
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|crc
operator|.
name|getValue
argument_list|()
return|;
block|}
DECL|method|bufferCRC (byte[] buf)
specifier|static
name|long
name|bufferCRC
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
block|{
name|CRC32
name|crc
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|crc
operator|.
name|update
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|crc
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|//
comment|// validates that file matches the crc.
comment|//
DECL|method|validateFile (FileSystem fileSys, Path name, long length, long crc)
specifier|public
specifier|static
name|boolean
name|validateFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|long
name|length
parameter_list|,
name|long
name|crc
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|numRead
init|=
literal|0
decl_stmt|;
name|CRC32
name|newcrc
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|stm
init|=
name|fileSys
operator|.
name|open
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|4192
index|]
decl_stmt|;
name|int
name|num
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|num
operator|>=
literal|0
condition|)
block|{
name|num
operator|=
name|stm
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|num
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|numRead
operator|+=
name|num
expr_stmt|;
name|newcrc
operator|.
name|update
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|numRead
operator|!=
name|length
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of bytes read "
operator|+
name|numRead
operator|+
literal|" does not match file size "
operator|+
name|length
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|" Newcrc "
operator|+
name|newcrc
operator|.
name|getValue
argument_list|()
operator|+
literal|" old crc "
operator|+
name|crc
argument_list|)
expr_stmt|;
if|if
condition|(
name|newcrc
operator|.
name|getValue
argument_list|()
operator|!=
name|crc
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CRC mismatch of file "
operator|+
name|name
operator|+
literal|": "
operator|+
name|newcrc
operator|+
literal|" vs. "
operator|+
name|crc
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|//
comment|// validates the contents of raid recovery log file
comment|//
DECL|method|validateLogFile (FileSystem fileSys, Path logDir)
specifier|public
specifier|static
name|void
name|validateLogFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|logDir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|f
init|=
name|fileSys
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|FSDataInputStream
name|stm
init|=
name|fileSys
operator|.
name|open
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|stm
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Recovery attempt log"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"Source path : /user/dhruba/raidtest/.*"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"Alternate path : .*/destraid"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Stripe lentgh : 3"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"Corrupt offset : \\d*"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"Output from unRaid : "
operator|+
literal|"hdfs://.*/tmp/raid/user/dhruba/raidtest/.*recovered"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Raid HDFS Recovery log verified"
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Delete/Corrupt specified block of file
comment|//
DECL|method|corruptBlock (MiniDFSCluster dfs, Path file, ExtendedBlock blockNum, int numDataNodes, boolean delete)
specifier|public
specifier|static
name|void
name|corruptBlock
parameter_list|(
name|MiniDFSCluster
name|dfs
parameter_list|,
name|Path
name|file
parameter_list|,
name|ExtendedBlock
name|blockNum
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Now deliberately remove/truncate replicas of blocks
name|int
name|numDeleted
init|=
literal|0
decl_stmt|;
name|int
name|numCorrupted
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDataNodes
condition|;
name|i
operator|++
control|)
block|{
name|File
name|block
init|=
name|MiniDFSCluster
operator|.
name|getBlockFile
argument_list|(
name|i
argument_list|,
name|blockNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|block
operator|==
literal|null
operator|||
operator|!
name|block
operator|.
name|exists
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|delete
condition|)
block|{
name|block
operator|.
name|delete
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted block "
operator|+
name|block
argument_list|)
expr_stmt|;
name|numDeleted
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// Corrupt
name|long
name|seekPos
init|=
name|block
operator|.
name|length
argument_list|()
operator|/
literal|2
decl_stmt|;
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|block
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|raf
operator|.
name|seek
argument_list|(
name|seekPos
argument_list|)
expr_stmt|;
name|int
name|data
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|raf
operator|.
name|seek
argument_list|(
name|seekPos
argument_list|)
expr_stmt|;
name|raf
operator|.
name|writeInt
argument_list|(
name|data
operator|+
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Corrupted block "
operator|+
name|block
argument_list|)
expr_stmt|;
name|numCorrupted
operator|++
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Nothing corrupted or deleted"
argument_list|,
operator|(
name|numCorrupted
operator|+
name|numDeleted
operator|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|corruptBlock (Path file, ExtendedBlock blockNum, int numDataNodes, long offset)
specifier|public
specifier|static
name|void
name|corruptBlock
parameter_list|(
name|Path
name|file
parameter_list|,
name|ExtendedBlock
name|blockNum
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|long
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Now deliberately corrupt replicas of the the block.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDataNodes
condition|;
name|i
operator|++
control|)
block|{
name|File
name|block
init|=
name|MiniDFSCluster
operator|.
name|getBlockFile
argument_list|(
name|i
argument_list|,
name|blockNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|block
operator|==
literal|null
operator|||
operator|!
name|block
operator|.
name|exists
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|block
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|raf
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|int
name|data
init|=
name|raf
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|raf
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|raf
operator|.
name|writeInt
argument_list|(
name|data
operator|+
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Corrupted block "
operator|+
name|block
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

