begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|protocol
operator|.
name|PolicyInfo
import|;
end_import

begin_class
DECL|class|TestDirectoryTraversal
specifier|public
class|class
name|TestDirectoryTraversal
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.raid.TestDirectoryTraversal"
argument_list|)
decl_stmt|;
DECL|field|TEST_DIR
specifier|final
specifier|static
name|String
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"target/test-data"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|dfs
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
DECL|field|fs
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
comment|/**    * Test basic enumeration.    */
DECL|method|testEnumeration ()
specifier|public
name|void
name|testEnumeration
parameter_list|()
throws|throws
name|IOException
block|{
name|mySetup
argument_list|()
expr_stmt|;
try|try
block|{
name|Path
name|topDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
operator|+
literal|"/testenumeration"
argument_list|)
decl_stmt|;
name|createTestTree
argument_list|(
name|topDir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Enumerating files"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|startPaths
init|=
operator|new
name|LinkedList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|startPaths
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|topDir
argument_list|)
argument_list|)
expr_stmt|;
name|DirectoryTraversal
name|dt
init|=
operator|new
name|DirectoryTraversal
argument_list|(
name|fs
argument_list|,
name|startPaths
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|selected
init|=
operator|new
name|LinkedList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|FileStatus
name|f
init|=
name|dt
operator|.
name|getNextFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
break|break;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|f
operator|.
name|isDir
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|selected
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|selected
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Enumerating directories"
argument_list|)
expr_stmt|;
name|startPaths
operator|.
name|clear
argument_list|()
expr_stmt|;
name|startPaths
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|topDir
argument_list|)
argument_list|)
expr_stmt|;
name|dt
operator|=
operator|new
name|DirectoryTraversal
argument_list|(
name|fs
argument_list|,
name|startPaths
argument_list|)
expr_stmt|;
name|selected
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|FileStatus
name|dir
init|=
name|dt
operator|.
name|getNextDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
break|break;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|dir
operator|.
name|isDir
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|dir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|selected
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|selected
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|myTearDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testSuspension ()
specifier|public
name|void
name|testSuspension
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testSuspension"
argument_list|)
expr_stmt|;
name|mySetup
argument_list|()
expr_stmt|;
try|try
block|{
name|Path
name|topDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
operator|+
literal|"/testenumeration"
argument_list|)
decl_stmt|;
name|createTestTree
argument_list|(
name|topDir
argument_list|)
expr_stmt|;
name|String
name|top
init|=
name|topDir
operator|.
name|toString
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|startPaths
init|=
operator|new
name|LinkedList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|startPaths
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|top
operator|+
literal|"/a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|startPaths
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|top
operator|+
literal|"/b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DirectoryTraversal
name|dt
init|=
operator|new
name|DirectoryTraversal
argument_list|(
name|fs
argument_list|,
name|startPaths
argument_list|)
decl_stmt|;
name|int
name|limit
init|=
literal|2
decl_stmt|;
name|short
name|targetRepl
init|=
literal|1
decl_stmt|;
name|Path
name|raid
init|=
operator|new
name|Path
argument_list|(
literal|"/raid"
argument_list|)
decl_stmt|;
name|DirectoryTraversal
operator|.
name|FileFilter
name|filter
init|=
operator|new
name|RaidFilter
operator|.
name|TimeBasedFilter
argument_list|(
name|conf
argument_list|,
name|RaidNode
operator|.
name|xorDestinationPath
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|selected
init|=
name|dt
operator|.
name|getFilteredFiles
argument_list|(
name|filter
argument_list|,
name|limit
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|f
range|:
name|selected
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|limit
argument_list|,
name|selected
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|selected
operator|=
name|dt
operator|.
name|getFilteredFiles
argument_list|(
name|filter
argument_list|,
name|limit
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|f
range|:
name|selected
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|limit
argument_list|,
name|selected
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|myTearDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testFileFilter ()
specifier|public
name|void
name|testFileFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|mySetup
argument_list|()
expr_stmt|;
try|try
block|{
name|Path
name|topDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
operator|+
literal|"/testFileFilter"
argument_list|)
decl_stmt|;
name|int
name|targetRepl
init|=
literal|1
decl_stmt|;
name|createTestTree
argument_list|(
name|topDir
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|topDir
operator|.
name|toString
argument_list|()
operator|+
literal|"/a/f1"
argument_list|)
decl_stmt|;
name|FileStatus
name|stat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|PolicyInfo
name|info
init|=
operator|new
name|PolicyInfo
argument_list|(
literal|"testFileFilter"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|info
operator|.
name|setSrcPath
argument_list|(
name|topDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setErasureCode
argument_list|(
literal|"rs"
argument_list|)
expr_stmt|;
name|info
operator|.
name|setDescription
argument_list|(
literal|"test policy"
argument_list|)
expr_stmt|;
name|info
operator|.
name|setProperty
argument_list|(
literal|"targetReplication"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|info
operator|.
name|setProperty
argument_list|(
literal|"metaReplication"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|DirectoryTraversal
operator|.
name|FileFilter
name|timeBasedXORFilter
init|=
operator|new
name|RaidFilter
operator|.
name|TimeBasedFilter
argument_list|(
name|conf
argument_list|,
name|RaidNode
operator|.
name|xorDestinationPath
argument_list|(
name|conf
argument_list|)
argument_list|,
name|targetRepl
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DirectoryTraversal
operator|.
name|FileFilter
name|timeBasedRSFilter
init|=
operator|new
name|RaidFilter
operator|.
name|TimeBasedFilter
argument_list|(
name|conf
argument_list|,
name|RaidNode
operator|.
name|rsDestinationPath
argument_list|(
name|conf
argument_list|)
argument_list|,
name|targetRepl
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DirectoryTraversal
operator|.
name|FileFilter
name|preferenceForRSFilter
init|=
operator|new
name|RaidFilter
operator|.
name|PreferenceFilter
argument_list|(
name|conf
argument_list|,
name|RaidNode
operator|.
name|rsDestinationPath
argument_list|(
name|conf
argument_list|)
argument_list|,
name|RaidNode
operator|.
name|xorDestinationPath
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|timeBasedXORFilter
operator|.
name|check
argument_list|(
name|stat
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|timeBasedRSFilter
operator|.
name|check
argument_list|(
name|stat
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|preferenceForRSFilter
operator|.
name|check
argument_list|(
name|stat
argument_list|)
argument_list|)
expr_stmt|;
name|RaidNode
operator|.
name|doRaid
argument_list|(
name|conf
argument_list|,
name|info
argument_list|,
name|stat
argument_list|,
operator|new
name|RaidNode
operator|.
name|Statistics
argument_list|()
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|timeBasedXORFilter
operator|.
name|check
argument_list|(
name|stat
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|timeBasedRSFilter
operator|.
name|check
argument_list|(
name|stat
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|preferenceForRSFilter
operator|.
name|check
argument_list|(
name|stat
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|myTearDown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Creates a test directory tree.    *            top    *           / | \    *          /  |  f5    *         a   b___    *        / \  |\  \    *       f1 f2 f3f4 c    */
DECL|method|createTestTree (Path topDir)
specifier|private
name|void
name|createTestTree
parameter_list|(
name|Path
name|topDir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|top
init|=
name|topDir
operator|.
name|toString
argument_list|()
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|topDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|topDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|top
operator|+
literal|"/f5"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|top
operator|+
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|createTestFile
argument_list|(
operator|new
name|Path
argument_list|(
name|top
operator|+
literal|"/a/f1"
argument_list|)
argument_list|)
expr_stmt|;
name|createTestFile
argument_list|(
operator|new
name|Path
argument_list|(
name|top
operator|+
literal|"/a/f2"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|top
operator|+
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|top
operator|+
literal|"/b/c"
argument_list|)
argument_list|)
expr_stmt|;
name|createTestFile
argument_list|(
operator|new
name|Path
argument_list|(
name|top
operator|+
literal|"/b/f3"
argument_list|)
argument_list|)
expr_stmt|;
name|createTestFile
argument_list|(
operator|new
name|Path
argument_list|(
name|top
operator|+
literal|"/b/f4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createTestFile (Path file)
specifier|private
name|void
name|createTestFile
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|blockSize
init|=
literal|8192
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|blockSize
index|]
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|,
literal|false
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileStatus
name|stat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|blockSize
argument_list|,
name|stat
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|mySetup ()
specifier|private
name|void
name|mySetup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|dfs
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
DECL|method|myTearDown ()
specifier|private
name|void
name|myTearDown
parameter_list|()
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

