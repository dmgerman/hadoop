begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestHarIndexParser
specifier|public
class|class
name|TestHarIndexParser
block|{
DECL|field|LOG
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHarIndexParser
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|indexFile
name|File
name|indexFile
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TestHarIndexParser.setUp()"
argument_list|)
expr_stmt|;
name|indexFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"harindex"
argument_list|,
literal|".tmp"
argument_list|)
expr_stmt|;
name|indexFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|OutputStreamWriter
name|out
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|indexFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"%2F dir 1282018162460+0+493+hadoop+hadoop 0 0 f1 f2 f3 f4\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"%2Ff1 file part-0 0 1024 1282018141145+1282018140822+420+hadoop+hadoop\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"%2Ff3 file part-0 2048 1024 1282018148590+1282018148255+420+hadoop+hadoop\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"%2Ff2 file part-0 1024 1024 1282018144198+1282018143852+420+hadoop+hadoop\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"%2Ff4 file part-1 0 1024000 1282018162959+1282018162460+420+hadoop+hadoop\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TestHarIndexParser.tearDown()"
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexFile
operator|!=
literal|null
condition|)
name|indexFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHarIndexParser ()
specifier|public
name|void
name|testHarIndexParser
parameter_list|()
throws|throws
name|UnsupportedEncodingException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testHarIndexParser started."
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|indexFile
argument_list|)
decl_stmt|;
name|long
name|size
init|=
name|indexFile
operator|.
name|length
argument_list|()
decl_stmt|;
name|HarIndex
name|parser
init|=
operator|new
name|HarIndex
argument_list|(
name|in
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|HarIndex
operator|.
name|IndexEntry
name|entry
init|=
name|parser
operator|.
name|findEntry
argument_list|(
literal|"part-0"
argument_list|,
literal|2100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/f3"
argument_list|,
name|entry
operator|.
name|fileName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testHarIndexParser finished."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

