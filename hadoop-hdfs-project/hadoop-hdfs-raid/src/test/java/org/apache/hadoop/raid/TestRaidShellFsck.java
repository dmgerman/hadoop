begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http:www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|TestRaidDfs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|RaidDFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|RaidNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|HarIndex
import|;
end_import

begin_class
DECL|class|TestRaidShellFsck
specifier|public
class|class
name|TestRaidShellFsck
block|{
DECL|field|LOG
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.raid.TestRaidShellFsck"
argument_list|)
decl_stmt|;
DECL|field|TEST_DIR
specifier|final
specifier|static
name|String
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"target/test-data"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|CONFIG_FILE
specifier|final
specifier|static
name|String
name|CONFIG_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test-raid.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|RELOAD_INTERVAL
specifier|final
specifier|static
name|long
name|RELOAD_INTERVAL
init|=
literal|1000
decl_stmt|;
DECL|field|NUM_DATANODES
specifier|final
specifier|static
name|int
name|NUM_DATANODES
init|=
literal|4
decl_stmt|;
DECL|field|STRIPE_BLOCKS
specifier|final
specifier|static
name|int
name|STRIPE_BLOCKS
init|=
literal|3
decl_stmt|;
comment|// number of blocks per stripe
DECL|field|FILE_BLOCKS
specifier|final
specifier|static
name|int
name|FILE_BLOCKS
init|=
literal|6
decl_stmt|;
comment|// number of blocks that file consists of
DECL|field|REPL
specifier|final
specifier|static
name|short
name|REPL
init|=
literal|1
decl_stmt|;
comment|// replication factor before raiding
DECL|field|BLOCK_SIZE
specifier|final
specifier|static
name|long
name|BLOCK_SIZE
init|=
literal|8192L
decl_stmt|;
comment|// size of block in byte
DECL|field|DIR_PATH
specifier|final
specifier|static
name|String
name|DIR_PATH
init|=
literal|"/user/pkling/raidtest"
decl_stmt|;
DECL|field|FILE_PATH0
specifier|final
specifier|static
name|Path
name|FILE_PATH0
init|=
operator|new
name|Path
argument_list|(
literal|"/user/pkling/raidtest/raidfsck.test"
argument_list|)
decl_stmt|;
DECL|field|FILE_PATH1
specifier|final
specifier|static
name|Path
name|FILE_PATH1
init|=
operator|new
name|Path
argument_list|(
literal|"/user/pkling/raidtest/raidfsck2.test"
argument_list|)
decl_stmt|;
DECL|field|RAID_PATH
specifier|final
specifier|static
name|Path
name|RAID_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/destraid/user/pkling/raidtest"
argument_list|)
decl_stmt|;
DECL|field|HAR_NAME
specifier|final
specifier|static
name|String
name|HAR_NAME
init|=
literal|"raidtest_raid.har"
decl_stmt|;
DECL|field|RAID_DIR
specifier|final
specifier|static
name|String
name|RAID_DIR
init|=
literal|"/destraid"
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|raidConf
name|Configuration
name|raidConf
init|=
literal|null
decl_stmt|;
DECL|field|clientConf
name|Configuration
name|clientConf
init|=
literal|null
decl_stmt|;
DECL|field|cluster
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|dfs
name|DistributedFileSystem
name|dfs
init|=
literal|null
decl_stmt|;
DECL|field|rnode
name|RaidNode
name|rnode
init|=
literal|null
decl_stmt|;
DECL|field|shell
name|RaidShell
name|shell
init|=
literal|null
decl_stmt|;
DECL|field|args
name|String
index|[]
name|args
init|=
literal|null
decl_stmt|;
comment|/**    * creates a MiniDFS instance with a raided file in it    */
DECL|method|setUp (boolean doHar)
specifier|private
name|void
name|setUp
parameter_list|(
name|boolean
name|doHar
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
specifier|final
name|int
name|timeBeforeHar
decl_stmt|;
if|if
condition|(
name|doHar
condition|)
block|{
name|timeBeforeHar
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|timeBeforeHar
operator|=
operator|-
literal|1
expr_stmt|;
block|}
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// Make sure data directory exists
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"raid.config.file"
argument_list|,
name|CONFIG_FILE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"raid.config.reload"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"raid.config.reload.interval"
argument_list|,
name|RELOAD_INTERVAL
argument_list|)
expr_stmt|;
comment|// scan all policies once every 5 second
name|conf
operator|.
name|setLong
argument_list|(
literal|"raid.policy.rescan.interval"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
comment|// make all deletions not go through Trash
name|conf
operator|.
name|set
argument_list|(
literal|"fs.shell.delete.classname"
argument_list|,
literal|"org.apache.hadoop.hdfs.DFSClient"
argument_list|)
expr_stmt|;
comment|// do not use map-reduce cluster for Raiding
name|conf
operator|.
name|set
argument_list|(
literal|"raid.classname"
argument_list|,
literal|"org.apache.hadoop.raid.LocalRaidNode"
argument_list|)
expr_stmt|;
comment|// use local block fixer
name|conf
operator|.
name|set
argument_list|(
literal|"raid.blockfix.classname"
argument_list|,
literal|"org.apache.hadoop.raid.LocalBlockFixer"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"raid.server.address"
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hdfs.raid.stripeLength"
argument_list|,
name|STRIPE_BLOCKS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hdfs.raid.locations"
argument_list|,
name|RAID_DIR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.corruptfilesreturned.max"
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.permissions"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATANODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|String
name|namenode
init|=
name|dfs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|namenode
argument_list|)
expr_stmt|;
name|FileWriter
name|fileWriter
init|=
operator|new
name|FileWriter
argument_list|(
name|CONFIG_FILE
argument_list|)
decl_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\"?>\n"
argument_list|)
expr_stmt|;
name|String
name|str
init|=
literal|"<configuration> "
operator|+
literal|"<srcPath prefix=\""
operator|+
name|DIR_PATH
operator|+
literal|"\"> "
operator|+
literal|"<policy name = \"RaidTest1\"> "
operator|+
literal|"<erasureCode>xor</erasureCode> "
operator|+
literal|"<destPath> "
operator|+
name|RAID_DIR
operator|+
literal|"</destPath> "
operator|+
literal|"<property> "
operator|+
literal|"<name>targetReplication</name> "
operator|+
literal|"<value>1</value> "
operator|+
literal|"<description>after RAIDing, decrease the replication "
operator|+
literal|"factor of a file to this value.</description> "
operator|+
literal|"</property> "
operator|+
literal|"<property> "
operator|+
literal|"<name>metaReplication</name> "
operator|+
literal|"<value>1</value> "
operator|+
literal|"<description> replication factor of parity file</description> "
operator|+
literal|"</property> "
operator|+
literal|"<property> "
operator|+
literal|"<name>modTimePeriod</name> "
operator|+
literal|"<value>2000</value> "
operator|+
literal|"<description>time (milliseconds) after a file is modified "
operator|+
literal|"to make it a candidate for RAIDing</description> "
operator|+
literal|"</property> "
decl_stmt|;
if|if
condition|(
name|timeBeforeHar
operator|>=
literal|0
condition|)
block|{
name|str
operator|+=
literal|"<property> "
operator|+
literal|"<name>time_before_har</name> "
operator|+
literal|"<value>"
operator|+
name|timeBeforeHar
operator|+
literal|"</value> "
operator|+
literal|"<description> amount of time waited before har'ing parity "
operator|+
literal|"files</description> "
operator|+
literal|"</property> "
expr_stmt|;
block|}
name|str
operator|+=
literal|"</policy>"
operator|+
literal|"</srcPath>"
operator|+
literal|"</configuration>"
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|createTestFile
argument_list|(
name|FILE_PATH0
argument_list|)
expr_stmt|;
name|createTestFile
argument_list|(
name|FILE_PATH1
argument_list|)
expr_stmt|;
name|Path
index|[]
name|filePaths
init|=
block|{
name|FILE_PATH0
block|,
name|FILE_PATH1
block|}
decl_stmt|;
name|raidTestFiles
argument_list|(
name|RAID_PATH
argument_list|,
name|filePaths
argument_list|,
name|doHar
argument_list|)
expr_stmt|;
name|clientConf
operator|=
operator|new
name|Configuration
argument_list|(
name|raidConf
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|set
argument_list|(
literal|"fs.hdfs.impl"
argument_list|,
literal|"org.apache.hadoop.hdfs.DistributedRaidFileSystem"
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|set
argument_list|(
literal|"fs.raid.underlyingfs.impl"
argument_list|,
literal|"org.apache.hadoop.hdfs.DistributedFileSystem"
argument_list|)
expr_stmt|;
comment|// prepare shell and arguments
name|shell
operator|=
operator|new
name|RaidShell
argument_list|(
name|clientConf
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-fsck"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|DIR_PATH
expr_stmt|;
block|}
comment|/**    * Creates test file consisting of random data    */
DECL|method|createTestFile (Path filePath)
specifier|private
name|void
name|createTestFile
parameter_list|(
name|Path
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|dfs
operator|.
name|create
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|REPL
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|BLOCK_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|FILE_BLOCKS
condition|;
name|i
operator|++
control|)
block|{
name|rand
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"test file created"
argument_list|)
expr_stmt|;
block|}
comment|/**    * raids test file    */
DECL|method|raidTestFiles (Path raidPath, Path[] filePaths, boolean doHar)
specifier|private
name|void
name|raidTestFiles
parameter_list|(
name|Path
name|raidPath
parameter_list|,
name|Path
index|[]
name|filePaths
parameter_list|,
name|boolean
name|doHar
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
comment|// create RaidNode
name|raidConf
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|raidConf
operator|.
name|set
argument_list|(
name|RaidNode
operator|.
name|RAID_LOCATION_KEY
argument_list|,
name|RAID_DIR
argument_list|)
expr_stmt|;
name|raidConf
operator|.
name|setInt
argument_list|(
literal|"raid.blockfix.interval"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|raidConf
operator|.
name|setLong
argument_list|(
literal|"har.block.size"
argument_list|,
name|BLOCK_SIZE
operator|*
literal|3
argument_list|)
expr_stmt|;
comment|// the RaidNode does the raiding inline (instead of submitting to MR node)
name|conf
operator|.
name|set
argument_list|(
literal|"raid.classname"
argument_list|,
literal|"org.apache.hadoop.raid.LocalRaidNode"
argument_list|)
expr_stmt|;
name|rnode
operator|=
name|RaidNode
operator|.
name|createRaidNode
argument_list|(
literal|null
argument_list|,
name|raidConf
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|filePath
range|:
name|filePaths
control|)
block|{
name|long
name|waitStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|boolean
name|raided
init|=
literal|false
decl_stmt|;
name|Path
name|parityFilePath
init|=
operator|new
name|Path
argument_list|(
name|RAID_DIR
argument_list|,
name|filePath
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|raided
condition|)
block|{
try|try
block|{
name|FileStatus
index|[]
name|listPaths
init|=
name|dfs
operator|.
name|listStatus
argument_list|(
name|raidPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|listPaths
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|doHar
condition|)
block|{
comment|// case with HAR
for|for
control|(
name|FileStatus
name|f
range|:
name|listPaths
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".har"
argument_list|)
condition|)
block|{
comment|// check if the parity file is in the index
specifier|final
name|Path
name|indexPath
init|=
operator|new
name|Path
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"_index"
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|indexFileStatus
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
specifier|final
name|HarIndex
name|harIndex
init|=
operator|new
name|HarIndex
argument_list|(
name|dfs
operator|.
name|open
argument_list|(
name|indexPath
argument_list|)
argument_list|,
name|indexFileStatus
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|HarIndex
operator|.
name|IndexEntry
name|indexEntry
init|=
name|harIndex
operator|.
name|findEntryByFileName
argument_list|(
name|parityFilePath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexEntry
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"raid file "
operator|+
name|parityFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|" found in Har archive: "
operator|+
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" ts="
operator|+
name|indexEntry
operator|.
name|mtime
argument_list|)
expr_stmt|;
name|raided
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// case without HAR
for|for
control|(
name|FileStatus
name|f
range|:
name|listPaths
control|)
block|{
name|Path
name|found
init|=
operator|new
name|Path
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parityFilePath
operator|.
name|equals
argument_list|(
name|found
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"raid file found: "
operator|+
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|raided
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ignore
parameter_list|)
block|{         }
if|if
condition|(
operator|!
name|raided
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|waitStart
operator|+
literal|40000L
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"parity file not created after 40s"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"parity file not HARed after 40s"
argument_list|)
throw|;
block|}
else|else
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{             }
block|}
block|}
block|}
block|}
name|rnode
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rnode
operator|.
name|join
argument_list|()
expr_stmt|;
name|rnode
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"test file raided"
argument_list|)
expr_stmt|;
block|}
comment|/**    * sleeps for up to 20s until the number of corrupt files     * in the file system is equal to the number specified    */
DECL|method|waitUntilCorruptFileCount (DistributedFileSystem dfs, int corruptFiles)
specifier|private
name|void
name|waitUntilCorruptFileCount
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|,
name|int
name|corruptFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|waitStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|RaidDFSUtil
operator|.
name|getCorruptFiles
argument_list|(
name|dfs
argument_list|)
operator|.
name|length
operator|!=
name|corruptFiles
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{                }
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|waitStart
operator|+
literal|20000L
condition|)
block|{
break|break;
block|}
block|}
name|int
name|corruptFilesFound
init|=
name|RaidDFSUtil
operator|.
name|getCorruptFiles
argument_list|(
name|dfs
argument_list|)
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|corruptFilesFound
operator|!=
name|corruptFiles
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"expected "
operator|+
name|corruptFiles
operator|+
literal|" corrupt files but got "
operator|+
name|corruptFilesFound
argument_list|)
throw|;
block|}
block|}
comment|/**    * removes a specified block from MiniDFS storage and reports it as corrupt    */
DECL|method|removeAndReportBlock (DistributedFileSystem blockDfs, Path filePath, LocatedBlock block)
specifier|private
name|void
name|removeAndReportBlock
parameter_list|(
name|DistributedFileSystem
name|blockDfs
parameter_list|,
name|Path
name|filePath
parameter_list|,
name|LocatedBlock
name|block
parameter_list|)
throws|throws
name|IOException
block|{
name|TestRaidDfs
operator|.
name|corruptBlock
argument_list|(
name|cluster
argument_list|,
name|filePath
argument_list|,
name|block
operator|.
name|getBlock
argument_list|()
argument_list|,
name|NUM_DATANODES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// report deleted block to the name node
name|LocatedBlock
index|[]
name|toReport
init|=
block|{
name|block
block|}
decl_stmt|;
name|blockDfs
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
operator|.
name|reportBadBlocks
argument_list|(
name|toReport
argument_list|)
expr_stmt|;
block|}
comment|/**    * removes a file block in the specified stripe    */
DECL|method|removeFileBlock (Path filePath, int stripe, int blockInStripe)
specifier|private
name|void
name|removeFileBlock
parameter_list|(
name|Path
name|filePath
parameter_list|,
name|int
name|stripe
parameter_list|,
name|int
name|blockInStripe
parameter_list|)
throws|throws
name|IOException
block|{
name|LocatedBlocks
name|fileBlocks
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|FILE_BLOCKS
operator|*
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileBlocks
operator|.
name|locatedBlockCount
argument_list|()
operator|!=
name|FILE_BLOCKS
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"expected "
operator|+
name|FILE_BLOCKS
operator|+
literal|" file blocks but found "
operator|+
name|fileBlocks
operator|.
name|locatedBlockCount
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|blockInStripe
operator|>=
name|STRIPE_BLOCKS
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"blockInStripe is "
operator|+
name|blockInStripe
operator|+
literal|" but must be smaller than "
operator|+
name|STRIPE_BLOCKS
argument_list|)
throw|;
block|}
name|LocatedBlock
name|block
init|=
name|fileBlocks
operator|.
name|get
argument_list|(
name|stripe
operator|*
name|STRIPE_BLOCKS
operator|+
name|blockInStripe
argument_list|)
decl_stmt|;
name|removeAndReportBlock
argument_list|(
name|dfs
argument_list|,
name|filePath
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"removed file "
operator|+
name|filePath
operator|.
name|toString
argument_list|()
operator|+
literal|" block "
operator|+
name|stripe
operator|*
name|STRIPE_BLOCKS
operator|+
literal|" in stripe "
operator|+
name|stripe
argument_list|)
expr_stmt|;
block|}
comment|/**    * removes a parity block in the specified stripe    */
DECL|method|removeParityBlock (Path filePath, int stripe)
specifier|private
name|void
name|removeParityBlock
parameter_list|(
name|Path
name|filePath
parameter_list|,
name|int
name|stripe
parameter_list|)
throws|throws
name|IOException
block|{
comment|// find parity file
name|Path
name|destPath
init|=
operator|new
name|Path
argument_list|(
name|RAID_DIR
argument_list|)
decl_stmt|;
name|RaidNode
operator|.
name|ParityFilePair
name|ppair
init|=
literal|null
decl_stmt|;
name|ppair
operator|=
name|RaidNode
operator|.
name|getParityFile
argument_list|(
name|destPath
argument_list|,
name|filePath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|String
name|parityPathStr
init|=
name|ppair
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"parity path: "
operator|+
name|parityPathStr
argument_list|)
expr_stmt|;
name|FileSystem
name|parityFS
init|=
name|ppair
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|parityFS
operator|instanceof
name|DistributedFileSystem
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"parity file is not on distributed file system"
argument_list|)
throw|;
block|}
name|DistributedFileSystem
name|parityDFS
init|=
operator|(
name|DistributedFileSystem
operator|)
name|parityFS
decl_stmt|;
comment|// now corrupt the block corresponding to the stripe selected
name|FileStatus
name|parityFileStatus
init|=
name|parityDFS
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|parityPathStr
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|parityBlockSize
init|=
name|parityFileStatus
operator|.
name|getBlockSize
argument_list|()
decl_stmt|;
name|long
name|parityFileLength
init|=
name|parityFileStatus
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|long
name|parityFileLengthInBlocks
init|=
operator|(
name|parityFileLength
operator|/
name|parityBlockSize
operator|)
operator|+
operator|(
operator|(
operator|(
name|parityFileLength
operator|%
name|parityBlockSize
operator|)
operator|==
literal|0
operator|)
condition|?
literal|0L
else|:
literal|1L
operator|)
decl_stmt|;
if|if
condition|(
name|parityFileLengthInBlocks
operator|<=
name|stripe
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"selected stripe "
operator|+
name|stripe
operator|+
literal|" but parity file only has "
operator|+
name|parityFileLengthInBlocks
operator|+
literal|" blocks"
argument_list|)
throw|;
block|}
if|if
condition|(
name|parityBlockSize
operator|!=
name|BLOCK_SIZE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"file block size is "
operator|+
name|BLOCK_SIZE
operator|+
literal|" but parity file block size is "
operator|+
name|parityBlockSize
argument_list|)
throw|;
block|}
name|LocatedBlocks
name|parityFileBlocks
init|=
name|parityDFS
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|parityPathStr
argument_list|,
literal|0
argument_list|,
name|parityFileLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|parityFileBlocks
operator|.
name|locatedBlockCount
argument_list|()
operator|!=
name|parityFileLengthInBlocks
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"expected "
operator|+
name|parityFileLengthInBlocks
operator|+
literal|" parity file blocks but got "
operator|+
name|parityFileBlocks
operator|.
name|locatedBlockCount
argument_list|()
operator|+
literal|" blocks"
argument_list|)
throw|;
block|}
name|LocatedBlock
name|parityFileBlock
init|=
name|parityFileBlocks
operator|.
name|get
argument_list|(
name|stripe
argument_list|)
decl_stmt|;
name|removeAndReportBlock
argument_list|(
name|parityDFS
argument_list|,
operator|new
name|Path
argument_list|(
name|parityPathStr
argument_list|)
argument_list|,
name|parityFileBlock
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"removed parity file block/stripe "
operator|+
name|stripe
operator|+
literal|" for "
operator|+
name|filePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * removes a block from the har part file    */
DECL|method|removeHarParityBlock (int block)
specifier|private
name|void
name|removeHarParityBlock
parameter_list|(
name|int
name|block
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|harPath
init|=
operator|new
name|Path
argument_list|(
name|RAID_PATH
argument_list|,
name|HAR_NAME
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|listPaths
init|=
name|dfs
operator|.
name|listStatus
argument_list|(
name|harPath
argument_list|)
decl_stmt|;
name|boolean
name|deleted
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FileStatus
name|f
range|:
name|listPaths
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"part-"
argument_list|)
condition|)
block|{
specifier|final
name|Path
name|partPath
init|=
operator|new
name|Path
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|LocatedBlocks
name|partBlocks
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|partPath
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|f
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|partBlocks
operator|.
name|locatedBlockCount
argument_list|()
operator|<=
name|block
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid har block "
operator|+
name|block
argument_list|)
throw|;
block|}
specifier|final
name|LocatedBlock
name|partBlock
init|=
name|partBlocks
operator|.
name|get
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|removeAndReportBlock
argument_list|(
name|dfs
argument_list|,
name|partPath
argument_list|,
name|partBlock
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"removed block "
operator|+
name|block
operator|+
literal|"/"
operator|+
name|partBlocks
operator|.
name|locatedBlockCount
argument_list|()
operator|+
literal|" of file "
operator|+
name|partPath
operator|.
name|toString
argument_list|()
operator|+
literal|" block size "
operator|+
name|partBlock
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|deleted
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cannot find part file in "
operator|+
name|harPath
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * checks fsck with no missing blocks    */
annotation|@
name|Test
DECL|method|testClean ()
specifier|public
name|void
name|testClean
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testClean"
argument_list|)
expr_stmt|;
name|setUp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"fsck should return 0, but returns "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|result
argument_list|)
argument_list|,
name|result
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * checks fsck with missing block in file block but not in parity block    */
annotation|@
name|Test
DECL|method|testFileBlockMissing ()
specifier|public
name|void
name|testFileBlockMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testFileBlockMissing"
argument_list|)
expr_stmt|;
name|setUp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeFileBlock
argument_list|(
name|FILE_PATH0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"fsck should return 0, but returns "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|result
argument_list|)
argument_list|,
name|result
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * checks fsck with missing block in parity block but not in file block    */
annotation|@
name|Test
DECL|method|testParityBlockMissing ()
specifier|public
name|void
name|testParityBlockMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testParityBlockMissing"
argument_list|)
expr_stmt|;
name|setUp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeParityBlock
argument_list|(
name|FILE_PATH0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"fsck should return 0, but returns "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|result
argument_list|)
argument_list|,
name|result
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * checks fsck with missing block in both file block and parity block    * in different stripes    */
annotation|@
name|Test
DECL|method|testFileBlockAndParityBlockMissingInDifferentStripes ()
specifier|public
name|void
name|testFileBlockAndParityBlockMissingInDifferentStripes
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testFileBlockAndParityBlockMissingInDifferentStripes"
argument_list|)
expr_stmt|;
name|setUp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeFileBlock
argument_list|(
name|FILE_PATH0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|removeParityBlock
argument_list|(
name|FILE_PATH0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"fsck should return 0, but returns "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|result
argument_list|)
argument_list|,
name|result
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * checks fsck with missing block in both file block and parity block    * in same stripe    */
annotation|@
name|Test
DECL|method|testFileBlockAndParityBlockMissingInSameStripe ()
specifier|public
name|void
name|testFileBlockAndParityBlockMissingInSameStripe
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testFileBlockAndParityBlockMissingInSameStripe"
argument_list|)
expr_stmt|;
name|setUp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeParityBlock
argument_list|(
name|FILE_PATH0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|removeFileBlock
argument_list|(
name|FILE_PATH0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"fsck should return 1, but returns "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|result
argument_list|)
argument_list|,
name|result
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * checks fsck with two missing file blocks in same stripe    */
annotation|@
name|Test
DECL|method|test2FileBlocksMissingInSameStripe ()
specifier|public
name|void
name|test2FileBlocksMissingInSameStripe
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"test2FileBlocksMissingInSameStripe"
argument_list|)
expr_stmt|;
name|setUp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeFileBlock
argument_list|(
name|FILE_PATH0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|removeFileBlock
argument_list|(
name|FILE_PATH0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"fsck should return 1, but returns "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|result
argument_list|)
argument_list|,
name|result
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * checks fsck with two missing file blocks in different stripes    */
annotation|@
name|Test
DECL|method|test2FileBlocksMissingInDifferentStripes ()
specifier|public
name|void
name|test2FileBlocksMissingInDifferentStripes
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"test2FileBlocksMissingInDifferentStripes"
argument_list|)
expr_stmt|;
name|setUp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeFileBlock
argument_list|(
name|FILE_PATH0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|removeFileBlock
argument_list|(
name|FILE_PATH0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"fsck should return 0, but returns "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|result
argument_list|)
argument_list|,
name|result
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * checks fsck with file block missing (HAR)    * use 2 files to verify HAR offset logic in RaidShell fsck    * both files have one corrupt block, parity blocks are clean    *    * parity blocks in har (file.stripe):    * +-----+-----+-----+  +-----+    * | 0.0 | 0.1 | 1.0 |  | 1.1 |    * +-----+-----+-----+  +-----+    *  0                    1    *    */
annotation|@
name|Test
DECL|method|testFileBlockMissingHar ()
specifier|public
name|void
name|testFileBlockMissingHar
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testFileBlockMissingHar"
argument_list|)
expr_stmt|;
name|setUp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeFileBlock
argument_list|(
name|FILE_PATH0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|removeFileBlock
argument_list|(
name|FILE_PATH1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"fsck should return 0, but returns "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|result
argument_list|)
argument_list|,
name|result
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * checks fsck with file block missing (HAR)    * use 2 files to verify HAR offset logic in RaidShell fsck    *    * parity blocks in har (file.stripe):    * +-----+-----+-----+  +-----+    * | 0.0 | 0.1 | 1.0 |  | 1.1 |    * +-----+-----+-----+  +-----+    *  0                    1    *    * corrupt file 0, stripe 0 file block 0    * corrupt file 0, stripe 1 file block 0    * corrupt file 1, stripe 0 file block 0    * corrupt file 1, stripe 1 file block 0    * corrupt har block 0    * both files should be corrupt    */
annotation|@
name|Test
DECL|method|testFileBlockAndParityBlockMissingHar1 ()
specifier|public
name|void
name|testFileBlockAndParityBlockMissingHar1
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testFileBlockAndParityBlockMissingHar1"
argument_list|)
expr_stmt|;
name|setUp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeFileBlock
argument_list|(
name|FILE_PATH0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeFileBlock
argument_list|(
name|FILE_PATH0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeFileBlock
argument_list|(
name|FILE_PATH1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeFileBlock
argument_list|(
name|FILE_PATH1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeHarParityBlock
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"fsck should return 2, but returns "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|result
argument_list|)
argument_list|,
name|result
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * checks fsck with file block missing (HAR)    * use 2 files to verify HAR offset logic in RaidShell fsck    *    * parity blocks in har (file.stripe):    * +-----+-----+-----+  +-----+    * | 0.0 | 0.1 | 1.0 |  | 1.1 |    * +-----+-----+-----+  +-----+    *  0                    1    *    * corrupt file 0, stripe 0 file block 0    * corrupt file 0, stripe 1 file block 0    * corrupt file 1, stripe 0 file block 0    * corrupt file 1, stripe 1 file block 0    * corrupt har block 1    * only file 2 should be corrupt    */
annotation|@
name|Test
DECL|method|testFileBlockAndParityBlockMissingHar2 ()
specifier|public
name|void
name|testFileBlockAndParityBlockMissingHar2
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testFileBlockAndParityBlockMissingHar2"
argument_list|)
expr_stmt|;
name|setUp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeFileBlock
argument_list|(
name|FILE_PATH0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeFileBlock
argument_list|(
name|FILE_PATH0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeFileBlock
argument_list|(
name|FILE_PATH1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeFileBlock
argument_list|(
name|FILE_PATH1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeHarParityBlock
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"fsck should return 1, but returns "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|result
argument_list|)
argument_list|,
name|result
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * checks that fsck does not report corrupt file that is not in    * the specified path    */
annotation|@
name|Test
DECL|method|testPathFilter ()
specifier|public
name|void
name|testPathFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testPathFilter"
argument_list|)
expr_stmt|;
name|setUp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeParityBlock
argument_list|(
name|FILE_PATH0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|removeFileBlock
argument_list|(
name|FILE_PATH0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|waitUntilCorruptFileCount
argument_list|(
name|dfs
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|String
index|[]
name|otherArgs
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|otherArgs
index|[
literal|0
index|]
operator|=
literal|"-fsck"
expr_stmt|;
name|otherArgs
index|[
literal|1
index|]
operator|=
literal|"/user/pkling/other"
expr_stmt|;
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|otherArgs
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"fsck should return 0, but returns "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|result
argument_list|)
argument_list|,
name|result
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|rnode
operator|!=
literal|null
condition|)
block|{
name|rnode
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rnode
operator|.
name|join
argument_list|()
expr_stmt|;
name|rnode
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
name|dfs
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test cluster shut down"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

