begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Implements depth-first traversal using a Stack object. The traversal  * can be stopped at any time and the state of traversal is saved.  */
end_comment

begin_class
DECL|class|DirectoryTraversal
specifier|public
class|class
name|DirectoryTraversal
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.raid.DirectoryTraversal"
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|paths
specifier|private
name|List
argument_list|<
name|FileStatus
argument_list|>
name|paths
decl_stmt|;
DECL|field|pathIdx
specifier|private
name|int
name|pathIdx
init|=
literal|0
decl_stmt|;
comment|// Next path to process.
DECL|field|stack
specifier|private
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
init|=
operator|new
name|Stack
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|executor
specifier|private
name|ExecutorService
name|executor
decl_stmt|;
DECL|field|numThreads
specifier|private
name|int
name|numThreads
decl_stmt|;
comment|/**    * A FileFilter object can be used to choose files during directory traversal.    */
DECL|interface|FileFilter
specifier|public
interface|interface
name|FileFilter
block|{
comment|/**      * @return a boolean value indicating if the file passes the filter.      */
DECL|method|check (FileStatus f)
name|boolean
name|check
parameter_list|(
name|FileStatus
name|f
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Represents a directory node in directory traversal.    */
DECL|class|Node
specifier|static
class|class
name|Node
block|{
DECL|field|path
specifier|private
name|FileStatus
name|path
decl_stmt|;
comment|// Path that this node represents.
DECL|field|elements
specifier|private
name|FileStatus
index|[]
name|elements
decl_stmt|;
comment|// Elements in the node.
DECL|field|idx
specifier|private
name|int
name|idx
init|=
literal|0
decl_stmt|;
DECL|method|Node (FileStatus path, FileStatus[] elements)
specifier|public
name|Node
parameter_list|(
name|FileStatus
name|path
parameter_list|,
name|FileStatus
index|[]
name|elements
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|elements
operator|=
name|elements
expr_stmt|;
block|}
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|idx
operator|<
name|elements
operator|.
name|length
return|;
block|}
DECL|method|next ()
specifier|public
name|FileStatus
name|next
parameter_list|()
block|{
return|return
name|elements
index|[
name|idx
operator|++
index|]
return|;
block|}
DECL|method|path ()
specifier|public
name|FileStatus
name|path
parameter_list|()
block|{
return|return
name|this
operator|.
name|path
return|;
block|}
block|}
comment|/**    * Constructor.    * @param fs The filesystem to use.    * @param startPaths A list of paths that need to be traversed    */
DECL|method|DirectoryTraversal (FileSystem fs, List<FileStatus> startPaths)
specifier|public
name|DirectoryTraversal
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|List
argument_list|<
name|FileStatus
argument_list|>
name|startPaths
parameter_list|)
block|{
name|this
argument_list|(
name|fs
argument_list|,
name|startPaths
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|DirectoryTraversal ( FileSystem fs, List<FileStatus> startPaths, int numThreads)
specifier|public
name|DirectoryTraversal
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|List
argument_list|<
name|FileStatus
argument_list|>
name|startPaths
parameter_list|,
name|int
name|numThreads
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|paths
operator|=
name|startPaths
expr_stmt|;
name|pathIdx
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|numThreads
operator|=
name|numThreads
expr_stmt|;
name|executor
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|)
expr_stmt|;
block|}
DECL|method|getFilteredFiles (FileFilter filter, int limit)
specifier|public
name|List
argument_list|<
name|FileStatus
argument_list|>
name|getFilteredFiles
parameter_list|(
name|FileFilter
name|filter
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|List
argument_list|<
name|FileStatus
argument_list|>
name|filtered
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|limit
operator|==
literal|0
condition|)
return|return
name|filtered
return|;
comment|// We need this semaphore to block when the number of running workitems
comment|// is equal to the number of threads. FixedThreadPool limits the number
comment|// of threads, but not the queue size. This way we will limit the memory
comment|// usage.
name|Semaphore
name|slots
init|=
operator|new
name|Semaphore
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|FilterFileWorkItem
name|work
init|=
literal|null
decl_stmt|;
try|try
block|{
name|slots
operator|.
name|acquire
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|filtered
init|)
block|{
if|if
condition|(
name|filtered
operator|.
name|size
argument_list|()
operator|>=
name|limit
condition|)
block|{
name|slots
operator|.
name|release
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|Node
name|next
init|=
name|getNextDirectoryNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|slots
operator|.
name|release
argument_list|()
expr_stmt|;
break|break;
block|}
name|work
operator|=
operator|new
name|FilterFileWorkItem
argument_list|(
name|filter
argument_list|,
name|next
argument_list|,
name|filtered
argument_list|,
name|slots
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|slots
operator|.
name|release
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|slots
operator|.
name|release
argument_list|()
expr_stmt|;
break|break;
block|}
name|executor
operator|.
name|execute
argument_list|(
name|work
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Wait for all submitted items to finish.
name|slots
operator|.
name|acquire
argument_list|(
name|numThreads
argument_list|)
expr_stmt|;
comment|// If this traversal is finished, shutdown the executor.
if|if
condition|(
name|doneTraversal
argument_list|()
condition|)
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{     }
return|return
name|filtered
return|;
block|}
DECL|class|FilterFileWorkItem
class|class
name|FilterFileWorkItem
implements|implements
name|Runnable
block|{
DECL|field|filter
name|FileFilter
name|filter
decl_stmt|;
DECL|field|dir
name|Node
name|dir
decl_stmt|;
DECL|field|filtered
name|List
argument_list|<
name|FileStatus
argument_list|>
name|filtered
decl_stmt|;
DECL|field|slots
name|Semaphore
name|slots
decl_stmt|;
DECL|method|FilterFileWorkItem (FileFilter filter, Node dir, List<FileStatus> filtered, Semaphore slots)
name|FilterFileWorkItem
parameter_list|(
name|FileFilter
name|filter
parameter_list|,
name|Node
name|dir
parameter_list|,
name|List
argument_list|<
name|FileStatus
argument_list|>
name|filtered
parameter_list|,
name|Semaphore
name|slots
parameter_list|)
block|{
name|this
operator|.
name|slots
operator|=
name|slots
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|filtered
operator|=
name|filtered
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initiating file filtering for "
operator|+
name|dir
operator|.
name|path
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|f
range|:
name|dir
operator|.
name|elements
control|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|isFile
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|filter
operator|.
name|check
argument_list|(
name|f
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|filtered
init|)
block|{
name|filtered
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in directory traversal: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|slots
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Return the next file.    * @throws IOException    */
DECL|method|getNextFile ()
specifier|public
name|FileStatus
name|getNextFile
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Check if traversal is done.
while|while
condition|(
operator|!
name|doneTraversal
argument_list|()
condition|)
block|{
comment|// If traversal is not done, check if the stack is not empty.
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If the stack is not empty, look at the top node.
name|Node
name|node
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
comment|// Check if the top node has an element.
if|if
condition|(
name|node
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|element
init|=
name|node
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Is the next element a directory.
if|if
condition|(
operator|!
name|element
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|// It is a file, return it.
return|return
name|element
return|;
block|}
comment|// Next element is a directory, push it on to the stack and
comment|// continue
try|try
block|{
name|pushNewNode
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// Ignore and move to the next element.
block|}
continue|continue;
block|}
else|else
block|{
comment|// Top node has no next element, pop it and continue.
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
continue|continue;
block|}
block|}
comment|// If the stack is empty, do we have more paths?
while|while
condition|(
operator|!
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|FileStatus
name|next
init|=
name|paths
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|pathIdx
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|next
operator|.
name|isDir
argument_list|()
condition|)
block|{
return|return
name|next
return|;
block|}
try|try
block|{
name|pushNewNode
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
continue|continue;
block|}
break|break;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Gets the next directory in the tree. The algorithm returns deeper directories    * first.    * @return A FileStatus representing the directory.    * @throws IOException    */
DECL|method|getNextDirectory ()
specifier|public
name|FileStatus
name|getNextDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|Node
name|dirNode
init|=
name|getNextDirectoryNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|dirNode
operator|!=
literal|null
condition|)
block|{
return|return
name|dirNode
operator|.
name|path
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getNextDirectoryNode ()
specifier|private
name|Node
name|getNextDirectoryNode
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Check if traversal is done.
while|while
condition|(
operator|!
name|doneTraversal
argument_list|()
condition|)
block|{
comment|// If traversal is not done, check if the stack is not empty.
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If the stack is not empty, look at the top node.
name|Node
name|node
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
comment|// Check if the top node has an element.
if|if
condition|(
name|node
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|element
init|=
name|node
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Is the next element a directory.
if|if
condition|(
name|element
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|// Next element is a directory, push it on to the stack and
comment|// continue
try|try
block|{
name|pushNewNode
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// Ignore and move to the next element.
block|}
continue|continue;
block|}
block|}
else|else
block|{
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
return|return
name|node
return|;
block|}
block|}
comment|// If the stack is empty, do we have more paths?
while|while
condition|(
operator|!
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|FileStatus
name|next
init|=
name|paths
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|pathIdx
operator|++
expr_stmt|;
if|if
condition|(
name|next
operator|.
name|isDir
argument_list|()
condition|)
block|{
try|try
block|{
name|pushNewNode
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
continue|continue;
block|}
break|break;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|pushNewNode (FileStatus stat)
specifier|private
name|void
name|pushNewNode
parameter_list|(
name|FileStatus
name|stat
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|stat
operator|.
name|isDir
argument_list|()
condition|)
block|{
return|return;
block|}
name|Path
name|p
init|=
name|stat
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|elements
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|Node
name|newNode
init|=
operator|new
name|Node
argument_list|(
name|stat
argument_list|,
operator|(
name|elements
operator|==
literal|null
condition|?
operator|new
name|FileStatus
index|[
literal|0
index|]
else|:
name|elements
operator|)
argument_list|)
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
block|}
DECL|method|doneTraversal ()
specifier|public
name|boolean
name|doneTraversal
parameter_list|()
block|{
return|return
name|paths
operator|.
name|isEmpty
argument_list|()
operator|&&
name|stack
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

