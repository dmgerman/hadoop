begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|RaidNode
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|protocol
operator|.
name|PolicyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_class
DECL|class|DistRaid
specifier|public
class|class
name|DistRaid
extends|extends
name|Configured
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DistRaid
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NAME
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"distRaid"
decl_stmt|;
DECL|field|JOB_DIR_LABEL
specifier|static
specifier|final
name|String
name|JOB_DIR_LABEL
init|=
name|NAME
operator|+
literal|".job.dir"
decl_stmt|;
DECL|field|OP_LIST_BLOCK_SIZE
specifier|static
specifier|final
name|int
name|OP_LIST_BLOCK_SIZE
init|=
literal|32
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// block size of control file
DECL|field|OP_LIST_REPLICATION
specifier|static
specifier|final
name|short
name|OP_LIST_REPLICATION
init|=
literal|10
decl_stmt|;
comment|// replication factor of control file
DECL|field|OPS_PER_TASK
specifier|public
specifier|static
specifier|final
name|String
name|OPS_PER_TASK
init|=
literal|"raid.distraid.opspertask"
decl_stmt|;
DECL|field|DEFAULT_OPS_PER_TASK
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_OPS_PER_TASK
init|=
literal|100
decl_stmt|;
DECL|field|SYNC_FILE_MAX
specifier|private
specifier|static
specifier|final
name|int
name|SYNC_FILE_MAX
init|=
literal|10
decl_stmt|;
DECL|field|dateForm
specifier|private
specifier|static
specifier|final
name|SimpleDateFormat
name|dateForm
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm"
argument_list|)
decl_stmt|;
DECL|enum|Counter
specifier|static
enum|enum
name|Counter
block|{
DECL|enumConstant|FILES_SUCCEEDED
DECL|enumConstant|FILES_FAILED
DECL|enumConstant|PROCESSED_BLOCKS
DECL|enumConstant|PROCESSED_SIZE
DECL|enumConstant|META_BLOCKS
DECL|enumConstant|META_SIZE
name|FILES_SUCCEEDED
block|,
name|FILES_FAILED
block|,
name|PROCESSED_BLOCKS
block|,
name|PROCESSED_SIZE
block|,
name|META_BLOCKS
block|,
name|META_SIZE
block|}
DECL|method|DistRaid (Configuration conf)
specifier|public
name|DistRaid
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|field|RANDOM
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|method|getRandomId ()
specifier|protected
specifier|static
name|String
name|getRandomId
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
literal|36
argument_list|)
return|;
block|}
comment|/**    *    * helper class which holds the policy and paths    *    */
DECL|class|RaidPolicyPathPair
specifier|public
specifier|static
class|class
name|RaidPolicyPathPair
block|{
DECL|field|policy
specifier|public
name|PolicyInfo
name|policy
decl_stmt|;
DECL|field|srcPaths
specifier|public
name|List
argument_list|<
name|FileStatus
argument_list|>
name|srcPaths
decl_stmt|;
DECL|method|RaidPolicyPathPair (PolicyInfo policy, List<FileStatus> srcPaths)
name|RaidPolicyPathPair
parameter_list|(
name|PolicyInfo
name|policy
parameter_list|,
name|List
argument_list|<
name|FileStatus
argument_list|>
name|srcPaths
parameter_list|)
block|{
name|this
operator|.
name|policy
operator|=
name|policy
expr_stmt|;
name|this
operator|.
name|srcPaths
operator|=
name|srcPaths
expr_stmt|;
block|}
block|}
DECL|field|raidPolicyPathPairList
name|List
argument_list|<
name|RaidPolicyPathPair
argument_list|>
name|raidPolicyPathPairList
init|=
operator|new
name|ArrayList
argument_list|<
name|RaidPolicyPathPair
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|runningJob
specifier|private
name|Job
name|runningJob
decl_stmt|;
DECL|field|lastReport
specifier|private
name|String
name|lastReport
init|=
literal|null
decl_stmt|;
comment|/** Responsible for generating splits of the src file list. */
DECL|class|DistRaidInputFormat
specifier|static
class|class
name|DistRaidInputFormat
extends|extends
name|SequenceFileInputFormat
argument_list|<
name|Text
argument_list|,
name|PolicyInfo
argument_list|>
block|{
comment|/**      * Produce splits such that each is no greater than the quotient of the      * total size and the number of splits requested.      *      * @param job      *          The handle to the Configuration object      * @param numSplits      *          Number of splits requested      */
DECL|method|getSplits (JobContext job)
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// We create only one input file. So just get the first file in the first
comment|// input directory.
name|Path
name|inDir
init|=
name|getInputPaths
argument_list|(
name|job
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|FileSystem
name|fs
init|=
name|inDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|inputFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|inDir
argument_list|)
decl_stmt|;
name|Path
name|inputFile
init|=
name|inputFiles
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|()
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|in
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|conf
argument_list|,
name|Reader
operator|.
name|file
argument_list|(
name|inputFile
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|prev
init|=
literal|0L
decl_stmt|;
specifier|final
name|int
name|opsPerTask
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OPS_PER_TASK
argument_list|,
name|DEFAULT_OPS_PER_TASK
argument_list|)
decl_stmt|;
try|try
block|{
name|Text
name|key
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|PolicyInfo
name|value
init|=
operator|new
name|PolicyInfo
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
comment|// count src
while|while
condition|(
name|in
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|long
name|curr
init|=
name|in
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|long
name|delta
init|=
name|curr
operator|-
name|prev
decl_stmt|;
if|if
condition|(
operator|++
name|count
operator|>
name|opsPerTask
condition|)
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|splits
operator|.
name|add
argument_list|(
operator|new
name|FileSplit
argument_list|(
name|inputFile
argument_list|,
name|prev
argument_list|,
name|delta
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|prev
operator|=
name|curr
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|long
name|remaining
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|inputFile
argument_list|)
operator|.
name|getLen
argument_list|()
operator|-
name|prev
decl_stmt|;
if|if
condition|(
name|remaining
operator|!=
literal|0
condition|)
block|{
name|splits
operator|.
name|add
argument_list|(
operator|new
name|FileSplit
argument_list|(
name|inputFile
argument_list|,
name|prev
argument_list|,
name|remaining
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|splits
return|;
block|}
block|}
comment|/** The mapper for raiding files. */
DECL|class|DistRaidMapper
specifier|static
class|class
name|DistRaidMapper
extends|extends
name|Mapper
argument_list|<
name|Text
argument_list|,
name|PolicyInfo
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|ignoreFailures
specifier|private
name|boolean
name|ignoreFailures
init|=
literal|false
decl_stmt|;
DECL|field|failcount
specifier|private
name|int
name|failcount
init|=
literal|0
decl_stmt|;
DECL|field|succeedcount
specifier|private
name|int
name|succeedcount
init|=
literal|0
decl_stmt|;
DECL|field|st
specifier|private
name|Statistics
name|st
init|=
operator|new
name|Statistics
argument_list|()
decl_stmt|;
DECL|method|getCountString ()
specifier|private
name|String
name|getCountString
parameter_list|()
block|{
return|return
literal|"Succeeded: "
operator|+
name|succeedcount
operator|+
literal|" Failed: "
operator|+
name|failcount
return|;
block|}
comment|/** Run a FileOperation      * @throws IOException      * @throws InterruptedException */
DECL|method|map (Text key, PolicyInfo policy, Context context)
specifier|public
name|void
name|map
parameter_list|(
name|Text
name|key
parameter_list|,
name|PolicyInfo
name|policy
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|Configuration
name|jobConf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Raiding file="
operator|+
name|key
operator|.
name|toString
argument_list|()
operator|+
literal|" policy="
operator|+
name|policy
argument_list|)
expr_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|jobConf
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|st
operator|.
name|clear
argument_list|()
expr_stmt|;
name|RaidNode
operator|.
name|doRaid
argument_list|(
name|jobConf
argument_list|,
name|policy
argument_list|,
name|fs
argument_list|,
name|st
argument_list|,
name|context
argument_list|)
expr_stmt|;
operator|++
name|succeedcount
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|PROCESSED_BLOCKS
argument_list|)
operator|.
name|increment
argument_list|(
name|st
operator|.
name|numProcessedBlocks
argument_list|)
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|PROCESSED_SIZE
argument_list|)
operator|.
name|increment
argument_list|(
name|st
operator|.
name|processedSize
argument_list|)
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|META_BLOCKS
argument_list|)
operator|.
name|increment
argument_list|(
name|st
operator|.
name|numMetaBlocks
argument_list|)
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|META_SIZE
argument_list|)
operator|.
name|increment
argument_list|(
name|st
operator|.
name|metaSize
argument_list|)
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|FILES_SUCCEEDED
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
operator|++
name|failcount
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|FILES_FAILED
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|s
init|=
literal|"FAIL: "
operator|+
name|policy
operator|+
literal|", "
operator|+
name|key
operator|+
literal|" "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|context
operator|.
name|write
argument_list|(
operator|new
name|Text
argument_list|(
name|key
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|context
operator|.
name|setStatus
argument_list|(
name|getCountString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|failcount
operator|==
literal|0
operator|||
name|ignoreFailures
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|getCountString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Set options specified in raid.scheduleroption.    * The string should be formatted as key:value[,key:value]*    */
DECL|method|setSchedulerOption (Configuration conf)
specifier|static
name|void
name|setSchedulerOption
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|schedulerOption
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"raid.scheduleroption"
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulerOption
operator|!=
literal|null
condition|)
block|{
comment|// Parse the scheduler option to get key:value pairs.
name|String
index|[]
name|keyValues
init|=
name|schedulerOption
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|keyValue
range|:
name|keyValues
control|)
block|{
name|String
index|[]
name|fields
init|=
name|keyValue
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|fields
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|fields
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Creates a new Job object.    * @param conf    * @return a Job object    * @throws IOException    */
DECL|method|createJob (Configuration jobConf)
specifier|static
name|Job
name|createJob
parameter_list|(
name|Configuration
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|jobName
init|=
name|NAME
operator|+
literal|" "
operator|+
name|dateForm
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|RaidNode
operator|.
name|now
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|setSchedulerOption
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|jobConf
argument_list|,
name|jobName
argument_list|)
decl_stmt|;
name|job
operator|.
name|setSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|DistRaid
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|DistRaidInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|DistRaidMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
comment|/** Add paths to be raided */
DECL|method|addRaidPaths (PolicyInfo info, List<FileStatus> paths)
specifier|public
name|void
name|addRaidPaths
parameter_list|(
name|PolicyInfo
name|info
parameter_list|,
name|List
argument_list|<
name|FileStatus
argument_list|>
name|paths
parameter_list|)
block|{
name|raidPolicyPathPairList
operator|.
name|add
argument_list|(
operator|new
name|RaidPolicyPathPair
argument_list|(
name|info
argument_list|,
name|paths
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Invokes a map-reduce job do parallel raiding.    *  @return true if the job was started, false otherwise    * @throws InterruptedException    */
DECL|method|startDistRaid ()
specifier|public
name|boolean
name|startDistRaid
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|raidPolicyPathPairList
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
assert|;
name|Job
name|job
init|=
name|createJob
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|createInputFile
argument_list|(
name|job
argument_list|)
expr_stmt|;
try|try
block|{
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|this
operator|.
name|runningJob
operator|=
name|job
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Job Started: "
operator|+
name|runningJob
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/** Checks if the map-reduce job has completed.     *     * @return true if the job completed, false otherwise.     * @throws IOException     */
DECL|method|checkComplete ()
specifier|public
name|boolean
name|checkComplete
parameter_list|()
throws|throws
name|IOException
block|{
name|JobID
name|jobID
init|=
name|runningJob
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking job "
operator|+
name|jobID
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|runningJob
operator|.
name|isComplete
argument_list|()
condition|)
block|{
comment|// delete job directory
name|Configuration
name|jobConf
init|=
name|runningJob
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|jobdir
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|JOB_DIR_LABEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobdir
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Path
name|jobpath
init|=
operator|new
name|Path
argument_list|(
name|jobdir
argument_list|)
decl_stmt|;
name|jobpath
operator|.
name|getFileSystem
argument_list|(
name|jobConf
argument_list|)
operator|.
name|delete
argument_list|(
name|jobpath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|runningJob
operator|.
name|isSuccessful
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Job Complete(Succeeded): "
operator|+
name|jobID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Job Complete(Failed): "
operator|+
name|jobID
argument_list|)
expr_stmt|;
block|}
name|raidPolicyPathPairList
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|String
name|report
init|=
operator|(
literal|" job "
operator|+
name|jobID
operator|+
literal|" map "
operator|+
name|StringUtils
operator|.
name|formatPercent
argument_list|(
name|runningJob
operator|.
name|mapProgress
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|+
literal|" reduce "
operator|+
name|StringUtils
operator|.
name|formatPercent
argument_list|(
name|runningJob
operator|.
name|reduceProgress
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|report
operator|.
name|equals
argument_list|(
name|lastReport
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|lastReport
operator|=
name|report
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|successful ()
specifier|public
name|boolean
name|successful
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|runningJob
operator|.
name|isSuccessful
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * set up input file which has the list of input files.    *    * @return boolean    * @throws IOException    */
DECL|method|createInputFile (Job job)
specifier|private
name|void
name|createInputFile
parameter_list|(
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|jobConf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Path
name|jobDir
init|=
operator|new
name|Path
argument_list|(
name|JOB_DIR_LABEL
operator|+
name|getRandomId
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|jobDir
argument_list|,
literal|"in"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|jobDir
argument_list|,
literal|"out"
argument_list|)
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|Path
name|opList
init|=
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
name|NAME
argument_list|)
decl_stmt|;
name|Configuration
name|tmp
init|=
operator|new
name|Configuration
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
comment|// The control file should have small size blocks. This helps
comment|// in spreading out the load from mappers that will be spawned.
name|tmp
operator|.
name|setInt
argument_list|(
literal|"dfs.blocks.size"
argument_list|,
name|OP_LIST_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|opList
operator|.
name|getFileSystem
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
name|int
name|opCount
init|=
literal|0
decl_stmt|,
name|synCount
init|=
literal|0
decl_stmt|;
name|SequenceFile
operator|.
name|Writer
name|opWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|opWriter
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|jobConf
argument_list|,
name|Writer
operator|.
name|file
argument_list|(
name|opList
argument_list|)
argument_list|,
name|Writer
operator|.
name|keyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
argument_list|,
name|Writer
operator|.
name|valueClass
argument_list|(
name|PolicyInfo
operator|.
name|class
argument_list|)
argument_list|,
name|Writer
operator|.
name|compression
argument_list|(
name|SequenceFile
operator|.
name|CompressionType
operator|.
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RaidPolicyPathPair
name|p
range|:
name|raidPolicyPathPairList
control|)
block|{
comment|// If a large set of files are Raided for the first time, files
comment|// in the same directory that tend to have the same size will end up
comment|// with the same map. This shuffle mixes things up, allowing a better
comment|// mix of files.
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|shuffle
argument_list|(
name|p
operator|.
name|srcPaths
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|st
range|:
name|p
operator|.
name|srcPaths
control|)
block|{
name|opWriter
operator|.
name|append
argument_list|(
operator|new
name|Text
argument_list|(
name|st
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|p
operator|.
name|policy
argument_list|)
expr_stmt|;
name|opCount
operator|++
expr_stmt|;
if|if
condition|(
operator|++
name|synCount
operator|>
name|SYNC_FILE_MAX
condition|)
block|{
name|opWriter
operator|.
name|sync
argument_list|()
expr_stmt|;
name|synCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|opWriter
operator|!=
literal|null
condition|)
block|{
name|opWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// increase replication for control file
name|fs
operator|.
name|setReplication
argument_list|(
name|opList
argument_list|,
name|OP_LIST_REPLICATION
argument_list|)
expr_stmt|;
block|}
name|raidPolicyPathPairList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of files="
operator|+
name|opCount
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

