begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Periodically monitors the status of jobs registered with it.  *  * Jobs that are submitted for the same policy name are kept in the same list,  * and the list itself is kept in a map that has the policy name as the key and  * the list as value.  */
end_comment

begin_class
DECL|class|JobMonitor
class|class
name|JobMonitor
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.raid.JobMonitor"
argument_list|)
decl_stmt|;
DECL|field|running
specifier|volatile
name|boolean
name|running
init|=
literal|true
decl_stmt|;
DECL|field|jobs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DistRaid
argument_list|>
argument_list|>
name|jobs
decl_stmt|;
DECL|field|JOBMONITOR_INTERVAL_KEY
specifier|public
specifier|static
specifier|final
name|String
name|JOBMONITOR_INTERVAL_KEY
init|=
literal|"raid.jobmonitor.interval"
decl_stmt|;
DECL|field|jobMonitorInterval
specifier|private
name|long
name|jobMonitorInterval
decl_stmt|;
DECL|field|jobsMonitored
specifier|private
specifier|volatile
name|long
name|jobsMonitored
init|=
literal|0
decl_stmt|;
DECL|field|jobsSucceeded
specifier|private
specifier|volatile
name|long
name|jobsSucceeded
init|=
literal|0
decl_stmt|;
DECL|method|JobMonitor (Configuration conf)
specifier|public
name|JobMonitor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|jobMonitorInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|JOBMONITOR_INTERVAL_KEY
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|jobs
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DistRaid
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|running
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"JobMonitor thread continuing to run..."
argument_list|)
expr_stmt|;
name|doMonitor
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"JobMonitor encountered exception "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
comment|// All expected exceptions are caught by doMonitor(). It is better
comment|// to exit now, this will prevent RaidNode from submitting more jobs
comment|// since the number of running jobs will never decrease.
return|return;
block|}
block|}
block|}
comment|/**    * Periodically checks status of running map-reduce jobs.    */
DECL|method|doMonitor ()
specifier|public
name|void
name|doMonitor
parameter_list|()
block|{
while|while
condition|(
name|running
condition|)
block|{
name|String
index|[]
name|keys
init|=
literal|null
decl_stmt|;
comment|// Make a copy of the names of the current jobs.
synchronized|synchronized
init|(
name|jobs
init|)
block|{
name|keys
operator|=
name|jobs
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Check all the jobs. We do not want to block access to `jobs`
comment|// because that will prevent new jobs from being added.
comment|// This is safe because JobMonitor.run is the only code that can
comment|// remove a job from `jobs`. Thus all elements in `keys` will have
comment|// valid values.
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DistRaid
argument_list|>
argument_list|>
name|finishedJobs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DistRaid
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
comment|// For each policy being monitored, get the list of jobs running.
name|DistRaid
index|[]
name|jobListCopy
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|jobs
init|)
block|{
name|List
argument_list|<
name|DistRaid
argument_list|>
name|jobList
init|=
name|jobs
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|jobList
init|)
block|{
name|jobListCopy
operator|=
name|jobList
operator|.
name|toArray
argument_list|(
operator|new
name|DistRaid
index|[
name|jobList
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The code that actually contacts the JobTracker is not synchronized,
comment|// it uses copies of the list of jobs.
for|for
control|(
name|DistRaid
name|job
range|:
name|jobListCopy
control|)
block|{
comment|// Check each running job.
try|try
block|{
name|boolean
name|complete
init|=
name|job
operator|.
name|checkComplete
argument_list|()
decl_stmt|;
if|if
condition|(
name|complete
condition|)
block|{
name|addJob
argument_list|(
name|finishedJobs
argument_list|,
name|key
argument_list|,
name|job
argument_list|)
expr_stmt|;
if|if
condition|(
name|job
operator|.
name|successful
argument_list|()
condition|)
block|{
name|jobsSucceeded
operator|++
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// If there was an error, consider the job finished.
name|addJob
argument_list|(
name|finishedJobs
argument_list|,
name|key
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"JobMonitor exception"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|finishedJobs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|finishedJobs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|DistRaid
argument_list|>
name|finishedJobList
init|=
name|finishedJobs
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// Iterate through finished jobs and remove from jobs.
comment|// removeJob takes care of locking.
for|for
control|(
name|DistRaid
name|job
range|:
name|finishedJobList
control|)
block|{
name|removeJob
argument_list|(
name|jobs
argument_list|,
name|key
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|jobMonitorInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{       }
block|}
block|}
DECL|method|runningJobsCount (String key)
specifier|public
name|int
name|runningJobsCount
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|jobs
init|)
block|{
if|if
condition|(
name|jobs
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|DistRaid
argument_list|>
name|jobList
init|=
name|jobs
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|jobList
init|)
block|{
name|count
operator|=
name|jobList
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|count
return|;
block|}
DECL|method|monitorJob (String key, DistRaid job)
specifier|public
name|void
name|monitorJob
parameter_list|(
name|String
name|key
parameter_list|,
name|DistRaid
name|job
parameter_list|)
block|{
name|addJob
argument_list|(
name|jobs
argument_list|,
name|key
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|jobsMonitored
operator|++
expr_stmt|;
block|}
DECL|method|jobsMonitored ()
specifier|public
name|long
name|jobsMonitored
parameter_list|()
block|{
return|return
name|this
operator|.
name|jobsMonitored
return|;
block|}
DECL|method|jobsSucceeded ()
specifier|public
name|long
name|jobsSucceeded
parameter_list|()
block|{
return|return
name|this
operator|.
name|jobsSucceeded
return|;
block|}
comment|// For test code
DECL|method|runningJobsCount ()
name|int
name|runningJobsCount
parameter_list|()
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|jobs
init|)
block|{
for|for
control|(
name|String
name|key
range|:
name|jobs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|total
operator|+=
name|jobs
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|total
return|;
block|}
DECL|method|addJob (Map<String, List<DistRaid>> jobsMap, String jobName, DistRaid job)
specifier|private
specifier|static
name|void
name|addJob
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DistRaid
argument_list|>
argument_list|>
name|jobsMap
parameter_list|,
name|String
name|jobName
parameter_list|,
name|DistRaid
name|job
parameter_list|)
block|{
synchronized|synchronized
init|(
name|jobsMap
init|)
block|{
name|List
argument_list|<
name|DistRaid
argument_list|>
name|list
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|jobsMap
operator|.
name|containsKey
argument_list|(
name|jobName
argument_list|)
condition|)
block|{
name|list
operator|=
name|jobsMap
operator|.
name|get
argument_list|(
name|jobName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|=
operator|new
name|LinkedList
argument_list|<
name|DistRaid
argument_list|>
argument_list|()
expr_stmt|;
name|jobsMap
operator|.
name|put
argument_list|(
name|jobName
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|list
init|)
block|{
name|list
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|removeJob (Map<String, List<DistRaid>> jobsMap, String jobName, DistRaid job)
specifier|private
specifier|static
name|void
name|removeJob
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DistRaid
argument_list|>
argument_list|>
name|jobsMap
parameter_list|,
name|String
name|jobName
parameter_list|,
name|DistRaid
name|job
parameter_list|)
block|{
synchronized|synchronized
init|(
name|jobsMap
init|)
block|{
if|if
condition|(
name|jobsMap
operator|.
name|containsKey
argument_list|(
name|jobName
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|DistRaid
argument_list|>
name|list
init|=
name|jobsMap
operator|.
name|get
argument_list|(
name|jobName
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|list
init|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|DistRaid
argument_list|>
name|it
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistRaid
name|val
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|==
name|job
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|jobsMap
operator|.
name|remove
argument_list|(
name|jobName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

