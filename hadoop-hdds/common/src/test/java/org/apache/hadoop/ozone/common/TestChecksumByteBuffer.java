begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|PureJavaCrc32
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|PureJavaCrc32C
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import

begin_comment
comment|/**  * Test {@link ChecksumByteBuffer} implementations.  */
end_comment

begin_class
DECL|class|TestChecksumByteBuffer
specifier|public
class|class
name|TestChecksumByteBuffer
block|{
annotation|@
name|Test
DECL|method|testPureJavaCrc32ByteBuffer ()
specifier|public
name|void
name|testPureJavaCrc32ByteBuffer
parameter_list|()
block|{
specifier|final
name|Checksum
name|expected
init|=
operator|new
name|PureJavaCrc32
argument_list|()
decl_stmt|;
specifier|final
name|ChecksumByteBuffer
name|testee
init|=
operator|new
name|PureJavaCrc32ByteBuffer
argument_list|()
decl_stmt|;
operator|new
name|VerifyChecksumByteBuffer
argument_list|(
name|expected
argument_list|,
name|testee
argument_list|)
operator|.
name|testCorrectness
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPureJavaCrc32CByteBuffer ()
specifier|public
name|void
name|testPureJavaCrc32CByteBuffer
parameter_list|()
block|{
specifier|final
name|Checksum
name|expected
init|=
operator|new
name|PureJavaCrc32C
argument_list|()
decl_stmt|;
specifier|final
name|ChecksumByteBuffer
name|testee
init|=
operator|new
name|PureJavaCrc32CByteBuffer
argument_list|()
decl_stmt|;
operator|new
name|VerifyChecksumByteBuffer
argument_list|(
name|expected
argument_list|,
name|testee
argument_list|)
operator|.
name|testCorrectness
argument_list|()
expr_stmt|;
block|}
DECL|class|VerifyChecksumByteBuffer
specifier|static
class|class
name|VerifyChecksumByteBuffer
block|{
DECL|field|expected
specifier|private
specifier|final
name|Checksum
name|expected
decl_stmt|;
DECL|field|testee
specifier|private
specifier|final
name|ChecksumByteBuffer
name|testee
decl_stmt|;
DECL|method|VerifyChecksumByteBuffer (Checksum expected, ChecksumByteBuffer testee)
name|VerifyChecksumByteBuffer
parameter_list|(
name|Checksum
name|expected
parameter_list|,
name|ChecksumByteBuffer
name|testee
parameter_list|)
block|{
name|this
operator|.
name|expected
operator|=
name|expected
expr_stmt|;
name|this
operator|.
name|testee
operator|=
name|testee
expr_stmt|;
block|}
DECL|method|testCorrectness ()
name|void
name|testCorrectness
parameter_list|()
block|{
name|checkSame
argument_list|()
expr_stmt|;
name|checkBytes
argument_list|(
literal|"hello world!"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|1
operator|<<
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|random
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|checkBytes
argument_list|(
name|bytes
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkBytes (byte[] bytes)
name|void
name|checkBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|checkBytes
argument_list|(
name|bytes
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|checkBytes (byte[] bytes, int length)
name|void
name|checkBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|expected
operator|.
name|reset
argument_list|()
expr_stmt|;
name|testee
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checkSame
argument_list|()
expr_stmt|;
for|for
control|(
name|byte
name|b
range|:
name|bytes
control|)
block|{
name|expected
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|testee
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|checkSame
argument_list|()
expr_stmt|;
block|}
name|expected
operator|.
name|reset
argument_list|()
expr_stmt|;
name|testee
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|expected
operator|.
name|update
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|testee
operator|.
name|update
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|checkSame
argument_list|()
expr_stmt|;
block|}
name|expected
operator|.
name|reset
argument_list|()
expr_stmt|;
name|testee
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checkSame
argument_list|()
expr_stmt|;
block|}
DECL|method|checkSame ()
specifier|private
name|void
name|checkSame
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getValue
argument_list|()
argument_list|,
name|testee
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

