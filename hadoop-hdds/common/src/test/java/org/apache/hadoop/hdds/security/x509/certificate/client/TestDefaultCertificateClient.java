begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.security.x509.certificate.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|utils
operator|.
name|CertificateCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|exceptions
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|keys
operator|.
name|KeyCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|X509CertificateHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Signature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|SecurityConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|keys
operator|.
name|HDDSKeyGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|KeyStoreTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_METADATA_DIR_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|client
operator|.
name|CertificateClient
operator|.
name|InitResponse
operator|.
name|FAILURE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|utils
operator|.
name|CertificateCodec
operator|.
name|getPEMEncodedString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test class for {@link DefaultCertificateClient}.  */
end_comment

begin_class
DECL|class|TestDefaultCertificateClient
specifier|public
class|class
name|TestDefaultCertificateClient
block|{
DECL|field|certSerialId
specifier|private
name|String
name|certSerialId
decl_stmt|;
DECL|field|x509Certificate
specifier|private
name|X509Certificate
name|x509Certificate
decl_stmt|;
DECL|field|omCertClient
specifier|private
name|OMCertificateClient
name|omCertClient
decl_stmt|;
DECL|field|dnCertClient
specifier|private
name|DNCertificateClient
name|dnCertClient
decl_stmt|;
DECL|field|keyGenerator
specifier|private
name|HDDSKeyGenerator
name|keyGenerator
decl_stmt|;
DECL|field|omMetaDirPath
specifier|private
name|Path
name|omMetaDirPath
decl_stmt|;
DECL|field|dnMetaDirPath
specifier|private
name|Path
name|dnMetaDirPath
decl_stmt|;
DECL|field|omSecurityConfig
specifier|private
name|SecurityConfig
name|omSecurityConfig
decl_stmt|;
DECL|field|dnSecurityConfig
specifier|private
name|SecurityConfig
name|dnSecurityConfig
decl_stmt|;
DECL|field|UTF
specifier|private
specifier|final
specifier|static
name|String
name|UTF
init|=
literal|"UTF-8"
decl_stmt|;
DECL|field|DN_COMPONENT
specifier|private
specifier|final
specifier|static
name|String
name|DN_COMPONENT
init|=
name|DNCertificateClient
operator|.
name|COMPONENT_NAME
decl_stmt|;
DECL|field|OM_COMPONENT
specifier|private
specifier|final
specifier|static
name|String
name|OM_COMPONENT
init|=
name|OMCertificateClient
operator|.
name|COMPONENT_NAME
decl_stmt|;
DECL|field|omKeyCodec
specifier|private
name|KeyCodec
name|omKeyCodec
decl_stmt|;
DECL|field|dnKeyCodec
specifier|private
name|KeyCodec
name|dnKeyCodec
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|config
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setStrings
argument_list|(
name|OZONE_SCM_NAMES
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|String
name|omPath
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dnPath
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|omMetaDirPath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|omPath
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|dnMetaDirPath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|dnPath
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|HDDS_METADATA_DIR_NAME
argument_list|,
name|omMetaDirPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|omSecurityConfig
operator|=
operator|new
name|SecurityConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|HDDS_METADATA_DIR_NAME
argument_list|,
name|dnMetaDirPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dnSecurityConfig
operator|=
operator|new
name|SecurityConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|keyGenerator
operator|=
operator|new
name|HDDSKeyGenerator
argument_list|(
name|omSecurityConfig
argument_list|)
expr_stmt|;
name|omKeyCodec
operator|=
operator|new
name|KeyCodec
argument_list|(
name|omSecurityConfig
argument_list|,
name|OM_COMPONENT
argument_list|)
expr_stmt|;
name|dnKeyCodec
operator|=
operator|new
name|KeyCodec
argument_list|(
name|dnSecurityConfig
argument_list|,
name|DN_COMPONENT
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|omSecurityConfig
operator|.
name|getKeyLocation
argument_list|(
name|OM_COMPONENT
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|dnSecurityConfig
operator|.
name|getKeyLocation
argument_list|(
name|DN_COMPONENT
argument_list|)
argument_list|)
expr_stmt|;
name|x509Certificate
operator|=
name|generateX509Cert
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|certSerialId
operator|=
name|x509Certificate
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|getCertClient
argument_list|()
expr_stmt|;
block|}
DECL|method|getCertClient ()
specifier|private
name|void
name|getCertClient
parameter_list|()
block|{
name|omCertClient
operator|=
operator|new
name|OMCertificateClient
argument_list|(
name|omSecurityConfig
argument_list|,
name|certSerialId
argument_list|)
expr_stmt|;
name|dnCertClient
operator|=
operator|new
name|DNCertificateClient
argument_list|(
name|dnSecurityConfig
argument_list|,
name|certSerialId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|omCertClient
operator|=
literal|null
expr_stmt|;
name|dnCertClient
operator|=
literal|null
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|omMetaDirPath
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|dnMetaDirPath
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests: 1. getPrivateKey 2. getPublicKey 3. storePrivateKey 4.    * storePublicKey    */
annotation|@
name|Test
DECL|method|testKeyOperations ()
specifier|public
name|void
name|testKeyOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanupOldKeyPair
argument_list|()
expr_stmt|;
name|PrivateKey
name|pvtKey
init|=
name|omCertClient
operator|.
name|getPrivateKey
argument_list|()
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|omCertClient
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|pvtKey
argument_list|)
expr_stmt|;
name|KeyPair
name|keyPair
init|=
name|generateKeyPairFiles
argument_list|()
decl_stmt|;
name|pvtKey
operator|=
name|omCertClient
operator|.
name|getPrivateKey
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|pvtKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pvtKey
argument_list|,
name|keyPair
operator|.
name|getPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|publicKey
operator|=
name|dnCertClient
operator|.
name|getPublicKey
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|publicKey
argument_list|,
name|keyPair
operator|.
name|getPublic
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|generateKeyPairFiles ()
specifier|private
name|KeyPair
name|generateKeyPairFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanupOldKeyPair
argument_list|()
expr_stmt|;
name|KeyPair
name|keyPair
init|=
name|keyGenerator
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|omKeyCodec
operator|.
name|writePrivateKey
argument_list|(
name|keyPair
operator|.
name|getPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|omKeyCodec
operator|.
name|writePublicKey
argument_list|(
name|keyPair
operator|.
name|getPublic
argument_list|()
argument_list|)
expr_stmt|;
name|dnKeyCodec
operator|.
name|writePrivateKey
argument_list|(
name|keyPair
operator|.
name|getPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|dnKeyCodec
operator|.
name|writePublicKey
argument_list|(
name|keyPair
operator|.
name|getPublic
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|keyPair
return|;
block|}
DECL|method|cleanupOldKeyPair ()
specifier|private
name|void
name|cleanupOldKeyPair
parameter_list|()
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|omSecurityConfig
operator|.
name|getKeyLocation
argument_list|(
name|OM_COMPONENT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|omSecurityConfig
operator|.
name|getPrivateKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|omSecurityConfig
operator|.
name|getKeyLocation
argument_list|(
name|OM_COMPONENT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|omSecurityConfig
operator|.
name|getPublicKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dnSecurityConfig
operator|.
name|getKeyLocation
argument_list|(
name|DN_COMPONENT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|dnSecurityConfig
operator|.
name|getPrivateKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dnSecurityConfig
operator|.
name|getKeyLocation
argument_list|(
name|DN_COMPONENT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|dnSecurityConfig
operator|.
name|getPublicKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests: 1. storeCertificate 2. getCertificate 3. verifyCertificate    */
annotation|@
name|Test
DECL|method|testCertificateOps ()
specifier|public
name|void
name|testCertificateOps
parameter_list|()
throws|throws
name|Exception
block|{
name|X509Certificate
name|cert
init|=
name|omCertClient
operator|.
name|getCertificate
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|cert
argument_list|)
expr_stmt|;
name|omCertClient
operator|.
name|storeCertificate
argument_list|(
name|getPEMEncodedString
argument_list|(
name|x509Certificate
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cert
operator|=
name|omCertClient
operator|.
name|getCertificate
argument_list|(
name|x509Certificate
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cert
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cert
operator|.
name|getEncoded
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cert
argument_list|,
name|x509Certificate
argument_list|)
expr_stmt|;
comment|// TODO: test verifyCertificate once implemented.
block|}
DECL|method|generateX509Cert (KeyPair keyPair)
specifier|private
name|X509Certificate
name|generateX509Cert
parameter_list|(
name|KeyPair
name|keyPair
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|keyPair
operator|==
literal|null
condition|)
block|{
name|keyPair
operator|=
name|generateKeyPairFiles
argument_list|()
expr_stmt|;
block|}
return|return
name|KeyStoreTestUtil
operator|.
name|generateCertificate
argument_list|(
literal|"CN=Test"
argument_list|,
name|keyPair
argument_list|,
literal|30
argument_list|,
name|omSecurityConfig
operator|.
name|getSignatureAlgo
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testSignDataStream ()
specifier|public
name|void
name|testSignDataStream
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|data
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|100
argument_list|,
name|UTF
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|omSecurityConfig
operator|.
name|getKeyLocation
argument_list|(
name|OM_COMPONENT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|omSecurityConfig
operator|.
name|getPrivateKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|omSecurityConfig
operator|.
name|getKeyLocation
argument_list|(
name|OM_COMPONENT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|omSecurityConfig
operator|.
name|getPublicKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
comment|// Expect error when there is no private key to sign.
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"Error while "
operator|+
literal|"signing the stream"
argument_list|,
parameter_list|()
lambda|->
name|omCertClient
operator|.
name|signDataStream
argument_list|(
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|data
argument_list|,
name|UTF
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|generateKeyPairFiles
argument_list|()
expr_stmt|;
name|byte
index|[]
name|sign
init|=
name|omCertClient
operator|.
name|signDataStream
argument_list|(
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|data
argument_list|,
name|UTF
argument_list|)
argument_list|)
decl_stmt|;
name|validateHash
argument_list|(
name|sign
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validate hash using public key of KeyPair.    */
DECL|method|validateHash (byte[] hash, byte[] data)
specifier|private
name|void
name|validateHash
parameter_list|(
name|byte
index|[]
name|hash
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|Signature
name|rsaSignature
init|=
name|Signature
operator|.
name|getInstance
argument_list|(
name|omSecurityConfig
operator|.
name|getSignatureAlgo
argument_list|()
argument_list|,
name|omSecurityConfig
operator|.
name|getProvider
argument_list|()
argument_list|)
decl_stmt|;
name|rsaSignature
operator|.
name|initVerify
argument_list|(
name|omCertClient
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|rsaSignature
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rsaSignature
operator|.
name|verify
argument_list|(
name|hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests: 1. verifySignature    */
annotation|@
name|Test
DECL|method|verifySignatureStream ()
specifier|public
name|void
name|verifySignatureStream
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|data
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|500
argument_list|,
name|UTF
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sign
init|=
name|omCertClient
operator|.
name|signDataStream
argument_list|(
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|data
argument_list|,
name|UTF
argument_list|)
argument_list|)
decl_stmt|;
comment|// Positive tests.
name|assertTrue
argument_list|(
name|omCertClient
operator|.
name|verifySignature
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
name|sign
argument_list|,
name|x509Certificate
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|omCertClient
operator|.
name|verifySignature
argument_list|(
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|data
argument_list|,
name|UTF
argument_list|)
argument_list|,
name|sign
argument_list|,
name|x509Certificate
argument_list|)
argument_list|)
expr_stmt|;
comment|// Negative tests.
name|assertFalse
argument_list|(
name|omCertClient
operator|.
name|verifySignature
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"abc"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|x509Certificate
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|omCertClient
operator|.
name|verifySignature
argument_list|(
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|data
argument_list|,
name|UTF
argument_list|)
argument_list|,
literal|"abc"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|x509Certificate
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests: 1. verifySignature    */
annotation|@
name|Test
DECL|method|verifySignatureDataArray ()
specifier|public
name|void
name|verifySignatureDataArray
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|data
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|500
argument_list|,
name|UTF
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sign
init|=
name|omCertClient
operator|.
name|signData
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|// Positive tests.
name|assertTrue
argument_list|(
name|omCertClient
operator|.
name|verifySignature
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
name|sign
argument_list|,
name|x509Certificate
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|omCertClient
operator|.
name|verifySignature
argument_list|(
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|data
argument_list|,
name|UTF
argument_list|)
argument_list|,
name|sign
argument_list|,
name|x509Certificate
argument_list|)
argument_list|)
expr_stmt|;
comment|// Negative tests.
name|assertFalse
argument_list|(
name|omCertClient
operator|.
name|verifySignature
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"abc"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|x509Certificate
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|omCertClient
operator|.
name|verifySignature
argument_list|(
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|data
argument_list|,
name|UTF
argument_list|)
argument_list|,
literal|"abc"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|x509Certificate
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryCertificate ()
specifier|public
name|void
name|queryCertificate
parameter_list|()
throws|throws
name|Exception
block|{
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|,
literal|"Operation not supported"
argument_list|,
parameter_list|()
lambda|->
name|omCertClient
operator|.
name|queryCertificate
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCertificateLoadingOnInit ()
specifier|public
name|void
name|testCertificateLoadingOnInit
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyPair
name|keyPair
init|=
name|keyGenerator
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|X509Certificate
name|cert1
init|=
name|generateX509Cert
argument_list|(
name|keyPair
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert2
init|=
name|generateX509Cert
argument_list|(
name|keyPair
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert3
init|=
name|generateX509Cert
argument_list|(
name|keyPair
argument_list|)
decl_stmt|;
name|Path
name|certPath
init|=
name|dnSecurityConfig
operator|.
name|getCertificateLocation
argument_list|(
name|DN_COMPONENT
argument_list|)
decl_stmt|;
name|CertificateCodec
name|codec
init|=
operator|new
name|CertificateCodec
argument_list|(
name|dnSecurityConfig
argument_list|,
name|DN_COMPONENT
argument_list|)
decl_stmt|;
comment|// Certificate not found.
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|CertificateException
operator|.
name|class
argument_list|,
literal|"Error while"
operator|+
literal|" getting certificate"
argument_list|,
parameter_list|()
lambda|->
name|dnCertClient
operator|.
name|getCertificate
argument_list|(
name|cert1
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|CertificateException
operator|.
name|class
argument_list|,
literal|"Error while"
operator|+
literal|" getting certificate"
argument_list|,
parameter_list|()
lambda|->
name|dnCertClient
operator|.
name|getCertificate
argument_list|(
name|cert2
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|CertificateException
operator|.
name|class
argument_list|,
literal|"Error while"
operator|+
literal|" getting certificate"
argument_list|,
parameter_list|()
lambda|->
name|dnCertClient
operator|.
name|getCertificate
argument_list|(
name|cert3
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|codec
operator|.
name|writeCertificate
argument_list|(
name|certPath
argument_list|,
literal|"1.crt"
argument_list|,
name|getPEMEncodedString
argument_list|(
name|cert1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|codec
operator|.
name|writeCertificate
argument_list|(
name|certPath
argument_list|,
literal|"2.crt"
argument_list|,
name|getPEMEncodedString
argument_list|(
name|cert2
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|codec
operator|.
name|writeCertificate
argument_list|(
name|certPath
argument_list|,
literal|"3.crt"
argument_list|,
name|getPEMEncodedString
argument_list|(
name|cert3
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Re instantiate DN client which will load certificates from filesystem.
name|dnCertClient
operator|=
operator|new
name|DNCertificateClient
argument_list|(
name|dnSecurityConfig
argument_list|,
name|certSerialId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dnCertClient
operator|.
name|getCertificate
argument_list|(
name|cert1
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dnCertClient
operator|.
name|getCertificate
argument_list|(
name|cert2
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dnCertClient
operator|.
name|getCertificate
argument_list|(
name|cert3
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStoreCertificate ()
specifier|public
name|void
name|testStoreCertificate
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyPair
name|keyPair
init|=
name|keyGenerator
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|X509Certificate
name|cert1
init|=
name|generateX509Cert
argument_list|(
name|keyPair
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert2
init|=
name|generateX509Cert
argument_list|(
name|keyPair
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert3
init|=
name|generateX509Cert
argument_list|(
name|keyPair
argument_list|)
decl_stmt|;
name|dnCertClient
operator|.
name|storeCertificate
argument_list|(
name|getPEMEncodedString
argument_list|(
name|cert1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dnCertClient
operator|.
name|storeCertificate
argument_list|(
name|getPEMEncodedString
argument_list|(
name|cert2
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dnCertClient
operator|.
name|storeCertificate
argument_list|(
name|getPEMEncodedString
argument_list|(
name|cert3
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dnCertClient
operator|.
name|getCertificate
argument_list|(
name|cert1
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dnCertClient
operator|.
name|getCertificate
argument_list|(
name|cert2
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dnCertClient
operator|.
name|getCertificate
argument_list|(
name|cert3
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitCertAndKeypairValidationFailures ()
specifier|public
name|void
name|testInitCertAndKeypairValidationFailures
parameter_list|()
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|LogCapturer
name|dnClientLog
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|dnCertClient
operator|.
name|getLogger
argument_list|()
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|LogCapturer
name|omClientLog
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|omCertClient
operator|.
name|getLogger
argument_list|()
argument_list|)
decl_stmt|;
name|KeyPair
name|keyPair
init|=
name|keyGenerator
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|KeyPair
name|keyPair2
init|=
name|keyGenerator
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|dnClientLog
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|omClientLog
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// Case 1. Expect failure when keypair validation fails.
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|omSecurityConfig
operator|.
name|getKeyLocation
argument_list|(
name|OM_COMPONENT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|omSecurityConfig
operator|.
name|getPrivateKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|omSecurityConfig
operator|.
name|getKeyLocation
argument_list|(
name|OM_COMPONENT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|omSecurityConfig
operator|.
name|getPublicKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dnSecurityConfig
operator|.
name|getKeyLocation
argument_list|(
name|DN_COMPONENT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|dnSecurityConfig
operator|.
name|getPrivateKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dnSecurityConfig
operator|.
name|getKeyLocation
argument_list|(
name|DN_COMPONENT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|dnSecurityConfig
operator|.
name|getPublicKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|omKeyCodec
operator|.
name|writePrivateKey
argument_list|(
name|keyPair
operator|.
name|getPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|omKeyCodec
operator|.
name|writePublicKey
argument_list|(
name|keyPair2
operator|.
name|getPublic
argument_list|()
argument_list|)
expr_stmt|;
name|dnKeyCodec
operator|.
name|writePrivateKey
argument_list|(
name|keyPair
operator|.
name|getPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|dnKeyCodec
operator|.
name|writePublicKey
argument_list|(
name|keyPair2
operator|.
name|getPublic
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check for DN.
name|assertEquals
argument_list|(
name|dnCertClient
operator|.
name|init
argument_list|()
argument_list|,
name|FAILURE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dnClientLog
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Keypair validation "
operator|+
literal|"failed"
argument_list|)
argument_list|)
expr_stmt|;
name|dnClientLog
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|omClientLog
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// Check for OM.
name|assertEquals
argument_list|(
name|omCertClient
operator|.
name|init
argument_list|()
argument_list|,
name|FAILURE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|omClientLog
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Keypair validation "
operator|+
literal|"failed"
argument_list|)
argument_list|)
expr_stmt|;
name|dnClientLog
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|omClientLog
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// Case 2. Expect failure when certificate is generated from different
comment|// private key and keypair validation fails.
name|getCertClient
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|omSecurityConfig
operator|.
name|getKeyLocation
argument_list|(
name|OM_COMPONENT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|omSecurityConfig
operator|.
name|getCertificateFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dnSecurityConfig
operator|.
name|getKeyLocation
argument_list|(
name|DN_COMPONENT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|dnSecurityConfig
operator|.
name|getCertificateFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|CertificateCodec
name|omCertCodec
init|=
operator|new
name|CertificateCodec
argument_list|(
name|omSecurityConfig
argument_list|,
name|OM_COMPONENT
argument_list|)
decl_stmt|;
name|omCertCodec
operator|.
name|writeCertificate
argument_list|(
operator|new
name|X509CertificateHolder
argument_list|(
name|x509Certificate
operator|.
name|getEncoded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|CertificateCodec
name|dnCertCodec
init|=
operator|new
name|CertificateCodec
argument_list|(
name|dnSecurityConfig
argument_list|,
name|DN_COMPONENT
argument_list|)
decl_stmt|;
name|dnCertCodec
operator|.
name|writeCertificate
argument_list|(
operator|new
name|X509CertificateHolder
argument_list|(
name|x509Certificate
operator|.
name|getEncoded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check for DN.
name|assertEquals
argument_list|(
name|dnCertClient
operator|.
name|init
argument_list|()
argument_list|,
name|FAILURE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dnClientLog
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Keypair validation "
operator|+
literal|"failed"
argument_list|)
argument_list|)
expr_stmt|;
name|dnClientLog
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|omClientLog
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// Check for OM.
name|assertEquals
argument_list|(
name|omCertClient
operator|.
name|init
argument_list|()
argument_list|,
name|FAILURE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|omClientLog
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Keypair validation failed"
argument_list|)
argument_list|)
expr_stmt|;
name|dnClientLog
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|omClientLog
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// Case 3. Expect failure when certificate is generated from different
comment|// private key and certificate validation fails.
comment|// Re write the correct public key.
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|omSecurityConfig
operator|.
name|getKeyLocation
argument_list|(
name|OM_COMPONENT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|omSecurityConfig
operator|.
name|getPublicKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dnSecurityConfig
operator|.
name|getKeyLocation
argument_list|(
name|DN_COMPONENT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|dnSecurityConfig
operator|.
name|getPublicKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|getCertClient
argument_list|()
expr_stmt|;
name|omKeyCodec
operator|.
name|writePublicKey
argument_list|(
name|keyPair
operator|.
name|getPublic
argument_list|()
argument_list|)
expr_stmt|;
name|dnKeyCodec
operator|.
name|writePublicKey
argument_list|(
name|keyPair
operator|.
name|getPublic
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check for DN.
name|assertEquals
argument_list|(
name|dnCertClient
operator|.
name|init
argument_list|()
argument_list|,
name|FAILURE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dnClientLog
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Stored certificate is "
operator|+
literal|"generated with different"
argument_list|)
argument_list|)
expr_stmt|;
name|dnClientLog
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|omClientLog
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|//Check for OM.
name|assertEquals
argument_list|(
name|omCertClient
operator|.
name|init
argument_list|()
argument_list|,
name|FAILURE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|omClientLog
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Stored certificate is "
operator|+
literal|"generated with different"
argument_list|)
argument_list|)
expr_stmt|;
name|dnClientLog
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|omClientLog
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// Case 4. Failure when public key recovery fails.
name|getCertClient
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|omSecurityConfig
operator|.
name|getKeyLocation
argument_list|(
name|OM_COMPONENT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|omSecurityConfig
operator|.
name|getPublicKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dnSecurityConfig
operator|.
name|getKeyLocation
argument_list|(
name|DN_COMPONENT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|dnSecurityConfig
operator|.
name|getPublicKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check for DN.
name|assertEquals
argument_list|(
name|dnCertClient
operator|.
name|init
argument_list|()
argument_list|,
name|FAILURE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dnClientLog
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Can't recover public key"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check for OM.
name|assertEquals
argument_list|(
name|omCertClient
operator|.
name|init
argument_list|()
argument_list|,
name|FAILURE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|omClientLog
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Can't recover public key"
argument_list|)
argument_list|)
expr_stmt|;
name|dnClientLog
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|omClientLog
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

