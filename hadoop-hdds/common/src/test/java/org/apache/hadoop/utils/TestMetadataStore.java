begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|ImmutablePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataKeyFilters
operator|.
name|KeyPrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataKeyFilters
operator|.
name|MetadataKeyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStore
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PlatformAssumptions
operator|.
name|assumeNotWindows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * Test class for ozone metadata store.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestMetadataStore
specifier|public
class|class
name|TestMetadataStore
block|{
DECL|field|MAX_GETRANGE_LENGTH
specifier|private
specifier|final
specifier|static
name|int
name|MAX_GETRANGE_LENGTH
init|=
literal|100
decl_stmt|;
DECL|field|storeImpl
specifier|private
specifier|final
name|String
name|storeImpl
decl_stmt|;
annotation|@
name|Rule
DECL|field|expectedException
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|store
specifier|private
name|MetadataStore
name|store
decl_stmt|;
DECL|field|testDir
specifier|private
name|File
name|testDir
decl_stmt|;
DECL|method|TestMetadataStore (String metadataImpl)
specifier|public
name|TestMetadataStore
parameter_list|(
name|String
name|metadataImpl
parameter_list|)
block|{
name|this
operator|.
name|storeImpl
operator|=
name|metadataImpl
expr_stmt|;
block|}
annotation|@
name|Parameters
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_STORE_IMPL_LEVELDB
block|}
block|,
block|{
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_STORE_IMPL_ROCKSDB
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_STORE_IMPL_ROCKSDB
operator|.
name|equals
argument_list|(
name|storeImpl
argument_list|)
condition|)
block|{
comment|// The initialization of RocksDB fails on Windows
name|assumeNotWindows
argument_list|()
expr_stmt|;
block|}
name|testDir
operator|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-"
operator|+
name|storeImpl
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_STORE_IMPL
argument_list|,
name|storeImpl
argument_list|)
expr_stmt|;
name|store
operator|=
name|MetadataStoreBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setCreateIfMissing
argument_list|(
literal|true
argument_list|)
operator|.
name|setDbFile
argument_list|(
name|testDir
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Add 20 entries.
comment|// {a0 : a-value0} to {a9 : a-value9}
comment|// {b0 : b-value0} to {b9 : b-value9}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|store
operator|.
name|put
argument_list|(
name|getBytes
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"a-value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|put
argument_list|(
name|getBytes
argument_list|(
literal|"b"
operator|+
name|i
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"b-value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIterator ()
specifier|public
name|void
name|testIterator
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_STORE_IMPL
argument_list|,
name|storeImpl
argument_list|)
expr_stmt|;
name|File
name|dbDir
init|=
name|GenericTestUtils
operator|.
name|getRandomizedTestDir
argument_list|()
decl_stmt|;
name|MetadataStore
name|dbStore
init|=
name|MetadataStoreBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setCreateIfMissing
argument_list|(
literal|true
argument_list|)
operator|.
name|setDbFile
argument_list|(
name|dbDir
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|//As database is empty, check whether iterator is working as expected or
comment|// not.
name|MetaStoreIterator
argument_list|<
name|KeyValue
argument_list|>
name|metaStoreIterator
init|=
name|dbStore
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|metaStoreIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|metaStoreIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"testIterator failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Store has no more elements"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|store
operator|.
name|put
argument_list|(
name|getBytes
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"a-value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|metaStoreIterator
operator|=
name|dbStore
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|metaStoreIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|KeyValue
name|val
init|=
name|metaStoreIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
operator|+
name|i
argument_list|,
name|getString
argument_list|(
name|val
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a-value"
operator|+
name|i
argument_list|,
name|getString
argument_list|(
name|val
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
comment|// As we have iterated all the keys in database, hasNext should return
comment|// false and next() should throw NoSuchElement exception.
name|assertFalse
argument_list|(
name|metaStoreIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|metaStoreIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"testIterator failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Store has no more elements"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|dbStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|dbStore
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|dbDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIteratorPrefixSeek ()
specifier|public
name|void
name|testIteratorPrefixSeek
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_STORE_IMPL
argument_list|,
name|storeImpl
argument_list|)
expr_stmt|;
name|File
name|dbDir
init|=
name|GenericTestUtils
operator|.
name|getRandomizedTestDir
argument_list|()
decl_stmt|;
name|MetadataStore
name|dbStore
init|=
name|MetadataStoreBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setCreateIfMissing
argument_list|(
literal|true
argument_list|)
operator|.
name|setDbFile
argument_list|(
name|dbDir
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|dbStore
operator|.
name|put
argument_list|(
name|getBytes
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"a-value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|dbStore
operator|.
name|put
argument_list|(
name|getBytes
argument_list|(
literal|"b"
operator|+
name|i
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"b-value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|dbStore
operator|.
name|put
argument_list|(
name|getBytes
argument_list|(
literal|"c"
operator|+
name|i
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"c-value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|5
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|dbStore
operator|.
name|put
argument_list|(
name|getBytes
argument_list|(
literal|"b"
operator|+
name|i
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"b-value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|5
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|dbStore
operator|.
name|put
argument_list|(
name|getBytes
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"a-value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MetaStoreIterator
argument_list|<
name|KeyValue
argument_list|>
name|metaStoreIterator
init|=
name|dbStore
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|metaStoreIterator
operator|.
name|prefixSeek
argument_list|(
name|getBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|metaStoreIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|KeyValue
name|val
init|=
name|metaStoreIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|getString
argument_list|(
name|val
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"b"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"b-value"
operator|+
name|i
argument_list|,
name|getString
argument_list|(
name|val
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|i
operator|==
literal|10
argument_list|)
expr_stmt|;
name|dbStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|dbStore
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|dbDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMetaStoreConfigDifferentFromType ()
specifier|public
name|void
name|testMetaStoreConfigDifferentFromType
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_STORE_IMPL
argument_list|,
name|storeImpl
argument_list|)
expr_stmt|;
name|String
name|dbType
decl_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|MetadataStoreBuilder
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|LogCapturer
name|logCapturer
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|MetadataStoreBuilder
operator|.
name|LOG
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeImpl
operator|.
name|equals
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_STORE_IMPL_LEVELDB
argument_list|)
condition|)
block|{
name|dbType
operator|=
literal|"RocksDB"
expr_stmt|;
block|}
else|else
block|{
name|dbType
operator|=
literal|"LevelDB"
expr_stmt|;
block|}
name|File
name|dbDir
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-"
operator|+
name|dbType
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"-test"
argument_list|)
decl_stmt|;
name|MetadataStore
name|dbStore
init|=
name|MetadataStoreBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setCreateIfMissing
argument_list|(
literal|true
argument_list|)
operator|.
name|setDbFile
argument_list|(
name|dbDir
argument_list|)
operator|.
name|setDBType
argument_list|(
name|dbType
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Using dbType "
operator|+
name|dbType
operator|+
literal|""
operator|+
literal|" for metastore"
argument_list|)
argument_list|)
expr_stmt|;
name|dbStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|dbStore
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|dbDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testdbTypeNotSet ()
specifier|public
name|void
name|testdbTypeNotSet
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_STORE_IMPL
argument_list|,
name|storeImpl
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|MetadataStoreBuilder
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|LogCapturer
name|logCapturer
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|MetadataStoreBuilder
operator|.
name|LOG
argument_list|)
decl_stmt|;
name|File
name|dbDir
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-"
operator|+
name|storeImpl
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"-test"
argument_list|)
decl_stmt|;
name|MetadataStore
name|dbStore
init|=
name|MetadataStoreBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setCreateIfMissing
argument_list|(
literal|true
argument_list|)
operator|.
name|setDbFile
argument_list|(
name|dbDir
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"dbType is null, using dbType"
operator|+
literal|" "
operator|+
name|storeImpl
argument_list|)
argument_list|)
expr_stmt|;
name|dbStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|dbStore
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|dbDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
name|store
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|testDir
operator|!=
literal|null
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getBytes (String str)
specifier|private
name|byte
index|[]
name|getBytes
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|==
literal|null
condition|?
literal|null
else|:
name|DFSUtilClient
operator|.
name|string2Bytes
argument_list|(
name|str
argument_list|)
return|;
block|}
DECL|method|getString (byte[] bytes)
specifier|private
name|String
name|getString
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|bytes
operator|==
literal|null
condition|?
literal|null
else|:
name|DFSUtilClient
operator|.
name|bytes2String
argument_list|(
name|bytes
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testGetDelete ()
specifier|public
name|void
name|testGetDelete
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|va
init|=
name|store
operator|.
name|get
argument_list|(
name|getBytes
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a-value"
operator|+
name|i
argument_list|,
name|getString
argument_list|(
name|va
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|vb
init|=
name|store
operator|.
name|get
argument_list|(
name|getBytes
argument_list|(
literal|"b"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"b-value"
operator|+
name|i
argument_list|,
name|getString
argument_list|(
name|vb
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|keyToDel
init|=
literal|"del-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|store
operator|.
name|put
argument_list|(
name|getBytes
argument_list|(
name|keyToDel
argument_list|)
argument_list|,
name|getBytes
argument_list|(
name|keyToDel
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|keyToDel
argument_list|,
name|getString
argument_list|(
name|store
operator|.
name|get
argument_list|(
name|getBytes
argument_list|(
name|keyToDel
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|delete
argument_list|(
name|getBytes
argument_list|(
name|keyToDel
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|store
operator|.
name|get
argument_list|(
name|getBytes
argument_list|(
name|keyToDel
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPeekFrom ()
specifier|public
name|void
name|testPeekFrom
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test peek from an element that has prev as well as next
name|testPeek
argument_list|(
literal|"a3"
argument_list|,
literal|"a2"
argument_list|,
literal|"a4"
argument_list|)
expr_stmt|;
comment|// Test peek from an element that only has prev
name|testPeek
argument_list|(
literal|"b9"
argument_list|,
literal|"b8"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Test peek from an element that only has next
name|testPeek
argument_list|(
literal|"a0"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
block|}
DECL|method|getExpectedValue (String key)
specifier|private
name|String
name|getExpectedValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|char
index|[]
name|arr
init|=
name|key
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"-value"
argument_list|)
operator|.
name|append
argument_list|(
name|arr
index|[
name|arr
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|testPeek (String peekKey, String prevKey, String nextKey)
specifier|private
name|void
name|testPeek
parameter_list|(
name|String
name|peekKey
parameter_list|,
name|String
name|prevKey
parameter_list|,
name|String
name|nextKey
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Look for current
name|String
name|k
init|=
literal|null
decl_stmt|;
name|String
name|v
init|=
literal|null
decl_stmt|;
name|ImmutablePair
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|current
init|=
name|store
operator|.
name|peekAround
argument_list|(
literal|0
argument_list|,
name|getBytes
argument_list|(
name|peekKey
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|k
operator|=
name|getString
argument_list|(
name|current
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|=
name|getString
argument_list|(
name|current
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|peekKey
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
name|getExpectedValue
argument_list|(
name|peekKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// Look for prev
name|k
operator|=
literal|null
expr_stmt|;
name|v
operator|=
literal|null
expr_stmt|;
name|ImmutablePair
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|prev
init|=
name|store
operator|.
name|peekAround
argument_list|(
operator|-
literal|1
argument_list|,
name|getBytes
argument_list|(
name|peekKey
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|k
operator|=
name|getString
argument_list|(
name|prev
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|=
name|getString
argument_list|(
name|prev
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|prevKey
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
name|getExpectedValue
argument_list|(
name|prevKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// Look for next
name|k
operator|=
literal|null
expr_stmt|;
name|v
operator|=
literal|null
expr_stmt|;
name|ImmutablePair
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|next
init|=
name|store
operator|.
name|peekAround
argument_list|(
literal|1
argument_list|,
name|getBytes
argument_list|(
name|peekKey
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|k
operator|=
name|getString
argument_list|(
name|next
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|=
name|getString
argument_list|(
name|next
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|nextKey
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
name|getExpectedValue
argument_list|(
name|nextKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIterateKeys ()
specifier|public
name|void
name|testIterateKeys
parameter_list|()
throws|throws
name|IOException
block|{
comment|// iterate keys from b0
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|store
operator|.
name|iterate
argument_list|(
name|getBytes
argument_list|(
literal|"b0"
argument_list|)
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
comment|// b-value{i}
name|String
name|value
init|=
name|getString
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|char
name|num
init|=
name|value
operator|.
name|charAt
argument_list|(
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// each value adds 1
name|int
name|i
init|=
name|Character
operator|.
name|getNumericValue
argument_list|(
name|num
argument_list|)
operator|+
literal|1
decl_stmt|;
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
name|i
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"b-value"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// iterate from a non exist key
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|store
operator|.
name|iterate
argument_list|(
name|getBytes
argument_list|(
literal|"xyz"
argument_list|)
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|result
operator|.
name|add
argument_list|(
name|getString
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// iterate from the beginning
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|store
operator|.
name|iterate
argument_list|(
literal|null
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|result
operator|.
name|add
argument_list|(
name|getString
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetRangeKVs ()
specifier|public
name|void
name|testGetRangeKVs
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
comment|// Set empty startKey will return values from beginning.
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a-value2"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Empty list if startKey doesn't exist.
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
name|getBytes
argument_list|(
literal|"a12"
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Returns max available entries after a valid startKey.
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
name|getBytes
argument_list|(
literal|"b0"
argument_list|)
argument_list|,
name|MAX_GETRANGE_LENGTH
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b0"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b-value0"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
name|getBytes
argument_list|(
literal|"b0"
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Both startKey and count are honored.
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
name|getBytes
argument_list|(
literal|"a9"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a9"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a-value9"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b0"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b-value0"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Filter keys by prefix.
comment|// It should returns all "b*" entries.
name|MetadataKeyFilter
name|filter1
init|=
operator|new
name|KeyPrefixFilter
argument_list|()
operator|.
name|addFilter
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
literal|100
argument_list|,
name|filter1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|entry
lambda|->
operator|new
name|String
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|filter1
operator|.
name|getKeysScannedNum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|filter1
operator|.
name|getKeysHintedNum
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
literal|3
argument_list|,
name|filter1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
name|getBytes
argument_list|(
literal|"b3"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|filter1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b-value3"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Define a customized filter that filters keys by suffix.
comment|// Returns all "*2" entries.
name|MetadataKeyFilter
name|filter2
init|=
parameter_list|(
name|preKey
parameter_list|,
name|currentKey
parameter_list|,
name|nextKey
parameter_list|)
lambda|->
name|getString
argument_list|(
name|currentKey
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"2"
argument_list|)
decl_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
name|MAX_GETRANGE_LENGTH
argument_list|,
name|filter2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a2"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b2"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|,
name|filter2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a2"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Apply multiple filters.
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
name|MAX_GETRANGE_LENGTH
argument_list|,
name|filter1
argument_list|,
name|filter2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b2"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b-value2"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// If filter is null, no effect.
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|,
operator|(
name|MetadataKeyFilter
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a0"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetSequentialRangeKVs ()
specifier|public
name|void
name|testGetSequentialRangeKVs
parameter_list|()
throws|throws
name|IOException
block|{
name|MetadataKeyFilter
name|suffixFilter
init|=
parameter_list|(
name|preKey
parameter_list|,
name|currentKey
parameter_list|,
name|nextKey
parameter_list|)
lambda|->
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|currentKey
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"2"
argument_list|)
decl_stmt|;
comment|// Suppose to return a2 and b2
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|result
init|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
name|MAX_GETRANGE_LENGTH
argument_list|,
name|suffixFilter
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a2"
argument_list|,
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b2"
argument_list|,
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Suppose to return just a2, because when it iterates to a3,
comment|// the filter no long matches and it should stop from there.
name|result
operator|=
name|store
operator|.
name|getSequentialRangeKVs
argument_list|(
literal|null
argument_list|,
name|MAX_GETRANGE_LENGTH
argument_list|,
name|suffixFilter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a2"
argument_list|,
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetRangeLength ()
specifier|public
name|void
name|testGetRangeLength
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Count less than zero is invalid.
name|expectedException
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Invalid count given"
argument_list|)
expr_stmt|;
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidStartKey ()
specifier|public
name|void
name|testInvalidStartKey
parameter_list|()
throws|throws
name|IOException
block|{
comment|// If startKey is invalid, the returned list should be empty.
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|kvs
init|=
name|store
operator|.
name|getRangeKVs
argument_list|(
name|getBytes
argument_list|(
literal|"unknownKey"
argument_list|)
argument_list|,
name|MAX_GETRANGE_LENGTH
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kvs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDestroyDB ()
specifier|public
name|void
name|testDestroyDB
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create a new DB to test db destroy
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_STORE_IMPL
argument_list|,
name|storeImpl
argument_list|)
expr_stmt|;
name|File
name|dbDir
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-"
operator|+
name|storeImpl
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"-toDestroy"
argument_list|)
decl_stmt|;
name|MetadataStore
name|dbStore
init|=
name|MetadataStoreBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setCreateIfMissing
argument_list|(
literal|true
argument_list|)
operator|.
name|setDbFile
argument_list|(
name|dbDir
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|dbStore
operator|.
name|put
argument_list|(
name|getBytes
argument_list|(
literal|"key1"
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|dbStore
operator|.
name|put
argument_list|(
name|getBytes
argument_list|(
literal|"key2"
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dbStore
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbDir
operator|.
name|listFiles
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|dbStore
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|dbDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBatchWrite ()
specifier|public
name|void
name|testBatchWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_STORE_IMPL
argument_list|,
name|storeImpl
argument_list|)
expr_stmt|;
name|File
name|dbDir
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-"
operator|+
name|storeImpl
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"-batchWrite"
argument_list|)
decl_stmt|;
name|MetadataStore
name|dbStore
init|=
name|MetadataStoreBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setCreateIfMissing
argument_list|(
literal|true
argument_list|)
operator|.
name|setDbFile
argument_list|(
name|dbDir
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedResult
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|dbStore
operator|.
name|put
argument_list|(
name|getBytes
argument_list|(
literal|"batch-"
operator|+
name|i
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"batch-value-"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|expectedResult
operator|.
name|add
argument_list|(
literal|"batch-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|BatchOperation
name|batch
init|=
operator|new
name|BatchOperation
argument_list|()
decl_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|getBytes
argument_list|(
literal|"batch-2"
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|getBytes
argument_list|(
literal|"batch-3"
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|getBytes
argument_list|(
literal|"batch-4"
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|put
argument_list|(
name|getBytes
argument_list|(
literal|"batch-new-2"
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"batch-new-value-2"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedResult
operator|.
name|remove
argument_list|(
literal|"batch-2"
argument_list|)
expr_stmt|;
name|expectedResult
operator|.
name|remove
argument_list|(
literal|"batch-3"
argument_list|)
expr_stmt|;
name|expectedResult
operator|.
name|remove
argument_list|(
literal|"batch-4"
argument_list|)
expr_stmt|;
name|expectedResult
operator|.
name|add
argument_list|(
literal|"batch-new-2"
argument_list|)
expr_stmt|;
name|dbStore
operator|.
name|writeBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|expectedResult
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|dbStore
operator|.
name|iterate
argument_list|(
literal|null
argument_list|,
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|it
operator|.
name|next
argument_list|()
operator|.
name|equals
argument_list|(
name|getString
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeyPrefixFilter ()
specifier|public
name|void
name|testKeyPrefixFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
name|RuntimeException
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
operator|new
name|KeyPrefixFilter
argument_list|()
operator|.
name|addFilter
argument_list|(
literal|"b0"
argument_list|,
literal|true
argument_list|)
operator|.
name|addFilter
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"KeyPrefix: b already "
operator|+
literal|"rejected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|KeyPrefixFilter
argument_list|()
operator|.
name|addFilter
argument_list|(
literal|"b0"
argument_list|)
operator|.
name|addFilter
argument_list|(
literal|"b"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"KeyPrefix: b already "
operator|+
literal|"accepted"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|KeyPrefixFilter
argument_list|()
operator|.
name|addFilter
argument_list|(
literal|"b"
argument_list|,
literal|true
argument_list|)
operator|.
name|addFilter
argument_list|(
literal|"b0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"KeyPrefix: b0 already "
operator|+
literal|"rejected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|KeyPrefixFilter
argument_list|()
operator|.
name|addFilter
argument_list|(
literal|"b"
argument_list|)
operator|.
name|addFilter
argument_list|(
literal|"b0"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"KeyPrefix: b0 already "
operator|+
literal|"accepted"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MetadataKeyFilter
name|filter1
init|=
operator|new
name|KeyPrefixFilter
argument_list|(
literal|true
argument_list|)
operator|.
name|addFilter
argument_list|(
literal|"a0"
argument_list|)
operator|.
name|addFilter
argument_list|(
literal|"a1"
argument_list|)
operator|.
name|addFilter
argument_list|(
literal|"b"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
literal|100
argument_list|,
name|filter1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|entry
lambda|->
operator|new
name|String
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"a0"
argument_list|)
argument_list|)
operator|&&
name|result
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|entry
lambda|->
operator|new
name|String
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"a1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filter1
operator|=
operator|new
name|KeyPrefixFilter
argument_list|(
literal|true
argument_list|)
operator|.
name|addFilter
argument_list|(
literal|"b"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
literal|100
argument_list|,
name|filter1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|filter1
operator|=
operator|new
name|KeyPrefixFilter
argument_list|()
operator|.
name|addFilter
argument_list|(
literal|"b"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
literal|100
argument_list|,
name|filter1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|entry
lambda|->
operator|new
name|String
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

