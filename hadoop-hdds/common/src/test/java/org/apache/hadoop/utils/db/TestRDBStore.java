begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.utils.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|ColumnFamilyOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|DBOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|RocksDB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|StatsLevel
import|;
end_import

begin_comment
comment|/**  * RDBStore Tests.  */
end_comment

begin_class
DECL|class|TestRDBStore
specifier|public
class|class
name|TestRDBStore
block|{
DECL|field|families
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|families
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|RocksDB
operator|.
name|DEFAULT_COLUMN_FAMILY
argument_list|)
argument_list|,
literal|"First"
argument_list|,
literal|"Second"
argument_list|,
literal|"Third"
argument_list|,
literal|"Fourth"
argument_list|,
literal|"Fifth"
argument_list|,
literal|"Sixth"
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|rdbStore
specifier|private
name|RDBStore
name|rdbStore
init|=
literal|null
decl_stmt|;
DECL|field|options
specifier|private
name|DBOptions
name|options
init|=
literal|null
decl_stmt|;
DECL|field|configSet
specifier|private
name|Set
argument_list|<
name|TableConfig
argument_list|>
name|configSet
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|options
operator|=
operator|new
name|DBOptions
argument_list|()
expr_stmt|;
name|options
operator|.
name|setCreateIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|options
operator|.
name|setCreateMissingColumnFamilies
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Statistics
name|statistics
init|=
operator|new
name|Statistics
argument_list|()
decl_stmt|;
name|statistics
operator|.
name|setStatsLevel
argument_list|(
name|StatsLevel
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|options
operator|=
name|options
operator|.
name|setStatistics
argument_list|(
name|statistics
argument_list|)
expr_stmt|;
name|configSet
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|families
control|)
block|{
name|TableConfig
name|newConfig
init|=
operator|new
name|TableConfig
argument_list|(
name|name
argument_list|,
operator|new
name|ColumnFamilyOptions
argument_list|()
argument_list|)
decl_stmt|;
name|configSet
operator|.
name|add
argument_list|(
name|newConfig
argument_list|)
expr_stmt|;
block|}
name|rdbStore
operator|=
operator|new
name|RDBStore
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|,
name|options
argument_list|,
name|configSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|rdbStore
operator|!=
literal|null
condition|)
block|{
name|rdbStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|compactDB ()
specifier|public
name|void
name|compactDB
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|RDBStore
name|newStore
init|=
operator|new
name|RDBStore
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|,
name|options
argument_list|,
name|configSet
argument_list|)
init|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"DB Store cannot be null"
argument_list|,
name|newStore
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|firstTable
init|=
name|newStore
operator|.
name|getTable
argument_list|(
name|families
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
init|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Table cannot be null"
argument_list|,
name|firstTable
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|100
condition|;
name|x
operator|++
control|)
block|{
name|byte
index|[]
name|key
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|firstTable
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// This test does not assert anything if there is any error this test
comment|// will throw and fail.
name|newStore
operator|.
name|compactDB
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
name|RDBStore
name|newStore
init|=
operator|new
name|RDBStore
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|,
name|options
argument_list|,
name|configSet
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"DBStore cannot be null"
argument_list|,
name|newStore
argument_list|)
expr_stmt|;
comment|// This test does not assert anything if there is any error this test
comment|// will throw and fail.
name|newStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|moveKey ()
specifier|public
name|void
name|moveKey
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|key
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|firstTable
init|=
name|rdbStore
operator|.
name|getTable
argument_list|(
name|families
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
init|)
block|{
name|firstTable
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|secondTable
init|=
name|rdbStore
operator|.
name|getTable
argument_list|(
name|families
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
init|)
block|{
name|rdbStore
operator|.
name|move
argument_list|(
name|key
argument_list|,
name|firstTable
argument_list|,
name|secondTable
argument_list|)
expr_stmt|;
name|byte
index|[]
name|newvalue
init|=
name|secondTable
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// Make sure we have value in the second table
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|newvalue
argument_list|)
expr_stmt|;
comment|//and it is same as what we wrote to the FirstTable
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value
argument_list|,
name|newvalue
argument_list|)
expr_stmt|;
block|}
comment|// After move this key must not exist in the first table.
name|Assert
operator|.
name|assertNull
argument_list|(
name|firstTable
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|moveWithValue ()
specifier|public
name|void
name|moveWithValue
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|key
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|nextValue
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|firstTable
init|=
name|rdbStore
operator|.
name|getTable
argument_list|(
name|families
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
init|)
block|{
name|firstTable
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|secondTable
init|=
name|rdbStore
operator|.
name|getTable
argument_list|(
name|families
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
init|)
block|{
name|rdbStore
operator|.
name|move
argument_list|(
name|key
argument_list|,
name|nextValue
argument_list|,
name|firstTable
argument_list|,
name|secondTable
argument_list|)
expr_stmt|;
name|byte
index|[]
name|newvalue
init|=
name|secondTable
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// Make sure we have value in the second table
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|newvalue
argument_list|)
expr_stmt|;
comment|//and it is not same as what we wrote to the FirstTable, and equals
comment|// the new value.
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|nextValue
argument_list|,
name|nextValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|getEstimatedKeyCount ()
specifier|public
name|void
name|getEstimatedKeyCount
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|RDBStore
name|newStore
init|=
operator|new
name|RDBStore
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|,
name|options
argument_list|,
name|configSet
argument_list|)
init|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"DB Store cannot be null"
argument_list|,
name|newStore
argument_list|)
expr_stmt|;
comment|// Write 100 keys to the first table.
try|try
init|(
name|Table
name|firstTable
init|=
name|newStore
operator|.
name|getTable
argument_list|(
name|families
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
init|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Table cannot be null"
argument_list|,
name|firstTable
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|100
condition|;
name|x
operator|++
control|)
block|{
name|byte
index|[]
name|key
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|firstTable
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Write 100 keys to the secondTable table.
try|try
init|(
name|Table
name|secondTable
init|=
name|newStore
operator|.
name|getTable
argument_list|(
name|families
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
init|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Table cannot be null"
argument_list|,
name|secondTable
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|100
condition|;
name|x
operator|++
control|)
block|{
name|byte
index|[]
name|key
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|secondTable
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Let us make sure that our estimate is not off by 10%
name|Assert
operator|.
name|assertTrue
argument_list|(
name|newStore
operator|.
name|getEstimatedKeyCount
argument_list|()
operator|>
literal|180
operator|||
name|newStore
operator|.
name|getEstimatedKeyCount
argument_list|()
operator|<
literal|220
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|getStatMBeanName ()
specifier|public
name|void
name|getStatMBeanName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Table
name|firstTable
init|=
name|rdbStore
operator|.
name|getTable
argument_list|(
name|families
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
literal|100
condition|;
name|y
operator|++
control|)
block|{
name|byte
index|[]
name|key
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|firstTable
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|MBeanServer
name|platformMBeanServer
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|Object
name|keysWritten
init|=
name|platformMBeanServer
operator|.
name|getAttribute
argument_list|(
name|rdbStore
operator|.
name|getStatMBeanName
argument_list|()
argument_list|,
literal|"NUMBER_KEYS_WRITTEN"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|keysWritten
operator|)
operator|>=
literal|99L
argument_list|)
expr_stmt|;
name|Object
name|dbWriteAverage
init|=
name|platformMBeanServer
operator|.
name|getAttribute
argument_list|(
name|rdbStore
operator|.
name|getStatMBeanName
argument_list|()
argument_list|,
literal|"DB_WRITE_AVERAGE"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|double
operator|)
name|dbWriteAverage
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getTable ()
specifier|public
name|void
name|getTable
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|tableName
range|:
name|families
control|)
block|{
try|try
init|(
name|Table
name|table
init|=
name|rdbStore
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tableName
operator|+
literal|"is null"
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
block|}
name|thrown
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|rdbStore
operator|.
name|getTable
argument_list|(
literal|"ATableWithNoName"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listTables ()
specifier|public
name|void
name|listTables
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Table
argument_list|>
name|tableList
init|=
name|rdbStore
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Table list cannot be null"
argument_list|,
name|tableList
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|hashTable
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Table
name|t
range|:
name|tableList
control|)
block|{
name|hashTable
operator|.
name|put
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|int
name|count
init|=
name|families
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Assert that we have all the tables in the list and no more.
for|for
control|(
name|String
name|name
range|:
name|families
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hashTable
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|--
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

