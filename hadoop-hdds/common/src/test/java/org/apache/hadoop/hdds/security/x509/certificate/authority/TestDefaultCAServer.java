begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.security.x509.certificate.authority
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|authority
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|exception
operator|.
name|SCMSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|SecurityConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificates
operator|.
name|utils
operator|.
name|CertificateSignRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|keys
operator|.
name|HDDSKeyGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|X509CertificateHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|pkcs
operator|.
name|PKCS10CertificationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchProviderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests the Default CA Server.  */
end_comment

begin_class
DECL|class|TestDefaultCAServer
specifier|public
class|class
name|TestDefaultCAServer
block|{
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|temporaryFolder
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
DECL|field|caStore
specifier|private
name|MockCAStore
name|caStore
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|OZONE_METADATA_DIRS
argument_list|,
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|caStore
operator|=
operator|new
name|MockCAStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInit ()
specifier|public
name|void
name|testInit
parameter_list|()
throws|throws
name|SCMSecurityException
throws|,
name|CertificateException
throws|,
name|IOException
block|{
name|SecurityConfig
name|securityConfig
init|=
operator|new
name|SecurityConfig
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CertificateServer
name|testCA
init|=
operator|new
name|DefaultCAServer
argument_list|(
literal|"testCA"
argument_list|,
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|,
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|,
name|caStore
argument_list|)
decl_stmt|;
name|testCA
operator|.
name|init
argument_list|(
name|securityConfig
argument_list|,
name|CertificateServer
operator|.
name|CAType
operator|.
name|SELF_SIGNED_CA
argument_list|)
expr_stmt|;
name|X509CertificateHolder
name|first
init|=
name|testCA
operator|.
name|getCACertificate
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|first
argument_list|)
expr_stmt|;
comment|//Init is idempotent.
name|testCA
operator|.
name|init
argument_list|(
name|securityConfig
argument_list|,
name|CertificateServer
operator|.
name|CAType
operator|.
name|SELF_SIGNED_CA
argument_list|)
expr_stmt|;
name|X509CertificateHolder
name|second
init|=
name|testCA
operator|.
name|getCACertificate
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
expr_stmt|;
comment|// we only support Self Signed CA for now.
try|try
block|{
name|testCA
operator|.
name|init
argument_list|(
name|securityConfig
argument_list|,
name|CertificateServer
operator|.
name|CAType
operator|.
name|INTERMEDIARY_CA
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"code should not reach here, exception should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// This is a run time exception, hence it is not caught by the junit
comment|// expected Exception.
name|assertTrue
argument_list|(
name|e
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Not implemented"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMissingCertificate ()
specifier|public
name|void
name|testMissingCertificate
parameter_list|()
block|{
name|SecurityConfig
name|securityConfig
init|=
operator|new
name|SecurityConfig
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CertificateServer
name|testCA
init|=
operator|new
name|DefaultCAServer
argument_list|(
literal|"testCA"
argument_list|,
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|,
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|,
name|caStore
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|SecurityConfig
argument_list|>
name|caInitializer
init|=
operator|(
operator|(
name|DefaultCAServer
operator|)
name|testCA
operator|)
operator|.
name|processVerificationStatus
argument_list|(
name|DefaultCAServer
operator|.
name|VerificationStatus
operator|.
name|MISSING_CERTIFICATE
argument_list|)
decl_stmt|;
try|try
block|{
name|caInitializer
operator|.
name|accept
argument_list|(
name|securityConfig
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"code should not reach here, exception should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// This also is a runtime exception. Hence not caught by junit expected
comment|// exception.
name|assertTrue
argument_list|(
name|e
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Missing Root Certs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMissingKey ()
specifier|public
name|void
name|testMissingKey
parameter_list|()
block|{
name|SecurityConfig
name|securityConfig
init|=
operator|new
name|SecurityConfig
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CertificateServer
name|testCA
init|=
operator|new
name|DefaultCAServer
argument_list|(
literal|"testCA"
argument_list|,
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|,
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|,
name|caStore
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|SecurityConfig
argument_list|>
name|caInitializer
init|=
operator|(
operator|(
name|DefaultCAServer
operator|)
name|testCA
operator|)
operator|.
name|processVerificationStatus
argument_list|(
name|DefaultCAServer
operator|.
name|VerificationStatus
operator|.
name|MISSING_KEYS
argument_list|)
decl_stmt|;
try|try
block|{
name|caInitializer
operator|.
name|accept
argument_list|(
name|securityConfig
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"code should not reach here, exception should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// This also is a runtime exception. Hence not caught by junit expected
comment|// exception.
name|assertTrue
argument_list|(
name|e
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Missing Keys"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The most important test of this test suite. This tests that we are able    * to create a Test CA, creates it own self-Signed CA and then issue a    * certificate based on a CSR.    * @throws SCMSecurityException - on ERROR.    * @throws ExecutionException - on ERROR.    * @throws InterruptedException - on ERROR.    * @throws NoSuchProviderException - on ERROR.    * @throws NoSuchAlgorithmException - on ERROR.    */
annotation|@
name|Test
DECL|method|testRequestCertificate ()
specifier|public
name|void
name|testRequestCertificate
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|NoSuchProviderException
throws|,
name|NoSuchAlgorithmException
block|{
name|KeyPair
name|keyPair
init|=
operator|new
name|HDDSKeyGenerator
argument_list|(
name|conf
argument_list|)
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|PKCS10CertificationRequest
name|csr
init|=
operator|new
name|CertificateSignRequest
operator|.
name|Builder
argument_list|()
operator|.
name|addDnsName
argument_list|(
literal|"hadoop.apache.org"
argument_list|)
operator|.
name|addIpAddress
argument_list|(
literal|"8.8.8.8"
argument_list|)
operator|.
name|setCA
argument_list|(
literal|false
argument_list|)
operator|.
name|setClusterID
argument_list|(
literal|"ClusterID"
argument_list|)
operator|.
name|setScmID
argument_list|(
literal|"SCMID"
argument_list|)
operator|.
name|setSubject
argument_list|(
literal|"Ozone Cluster"
argument_list|)
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
operator|.
name|setKey
argument_list|(
name|keyPair
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Let us convert this to a string to mimic the common use case.
name|String
name|csrString
init|=
name|CertificateSignRequest
operator|.
name|getEncodedString
argument_list|(
name|csr
argument_list|)
decl_stmt|;
name|CertificateServer
name|testCA
init|=
operator|new
name|DefaultCAServer
argument_list|(
literal|"testCA"
argument_list|,
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|,
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|,
name|caStore
argument_list|)
decl_stmt|;
name|testCA
operator|.
name|init
argument_list|(
operator|new
name|SecurityConfig
argument_list|(
name|conf
argument_list|)
argument_list|,
name|CertificateServer
operator|.
name|CAType
operator|.
name|SELF_SIGNED_CA
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|X509CertificateHolder
argument_list|>
name|holder
init|=
name|testCA
operator|.
name|requestCertificate
argument_list|(
name|csrString
argument_list|,
name|CertificateApprover
operator|.
name|ApprovalType
operator|.
name|TESTING_AUTOMATIC
argument_list|)
decl_stmt|;
comment|// Right now our calls are synchronous. Eventually this will have to wait.
name|assertTrue
argument_list|(
name|holder
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|holder
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

