begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.utils.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|ColumnFamilyOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|DBOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|RocksDB
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|DBConfigFromFile
operator|.
name|getOptionsFileNameFromDB
import|;
end_import

begin_comment
comment|/**  * DBConf tests.  */
end_comment

begin_class
DECL|class|TestDBConfigFromFile
specifier|public
class|class
name|TestDBConfigFromFile
block|{
DECL|field|DB_FILE
specifier|private
specifier|final
specifier|static
name|String
name|DB_FILE
init|=
literal|"test.db"
decl_stmt|;
DECL|field|INI_FILE
specifier|private
specifier|final
specifier|static
name|String
name|INI_FILE
init|=
name|getOptionsFileNameFromDB
argument_list|(
name|DB_FILE
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|DBConfigFromFile
operator|.
name|CONFIG_DIR
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ClassLoader
name|classLoader
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|File
name|testData
init|=
operator|new
name|File
argument_list|(
name|classLoader
operator|.
name|getResource
argument_list|(
name|INI_FILE
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|dest
init|=
name|Paths
operator|.
name|get
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|DBConfigFromFile
operator|.
name|CONFIG_DIR
argument_list|)
argument_list|,
name|INI_FILE
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|testData
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|Test
DECL|method|readFromFile ()
specifier|public
name|void
name|readFromFile
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|families
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|RocksDB
operator|.
name|DEFAULT_COLUMN_FAMILY
argument_list|)
argument_list|,
literal|"First"
argument_list|,
literal|"Second"
argument_list|,
literal|"Third"
argument_list|,
literal|"Fourth"
argument_list|,
literal|"Fifth"
argument_list|,
literal|"Sixth"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ColumnFamilyDescriptor
argument_list|>
name|columnFamilyDescriptors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|family
range|:
name|families
control|)
block|{
name|columnFamilyDescriptors
operator|.
name|add
argument_list|(
operator|new
name|ColumnFamilyDescriptor
argument_list|(
name|family
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
operator|new
name|ColumnFamilyOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DBOptions
name|options
init|=
name|DBConfigFromFile
operator|.
name|readFromFile
argument_list|(
name|DB_FILE
argument_list|,
name|columnFamilyDescriptors
argument_list|)
decl_stmt|;
comment|// Some Random Values Defined in the test.db.ini, we verify that we are
comment|// able to get values that are defined in the test.db.ini.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|551615L
argument_list|,
name|options
operator|.
name|maxManifestFileSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1000L
argument_list|,
name|options
operator|.
name|keepLogFileNum
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1048576
argument_list|,
name|options
operator|.
name|writableFileMaxBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readFromFileInvalidConfig ()
specifier|public
name|void
name|readFromFileInvalidConfig
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|families
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|RocksDB
operator|.
name|DEFAULT_COLUMN_FAMILY
argument_list|)
argument_list|,
literal|"First"
argument_list|,
literal|"Second"
argument_list|,
literal|"Third"
argument_list|,
literal|"Fourth"
argument_list|,
literal|"Fifth"
argument_list|,
literal|"Sixth"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ColumnFamilyDescriptor
argument_list|>
name|columnFamilyDescriptors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|family
range|:
name|families
control|)
block|{
name|columnFamilyDescriptors
operator|.
name|add
argument_list|(
operator|new
name|ColumnFamilyDescriptor
argument_list|(
name|family
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
operator|new
name|ColumnFamilyOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DBOptions
name|options
init|=
name|DBConfigFromFile
operator|.
name|readFromFile
argument_list|(
literal|"badfile.db.ini"
argument_list|,
name|columnFamilyDescriptors
argument_list|)
decl_stmt|;
comment|// This has to return a Null, since we have config defined for badfile.db
name|Assert
operator|.
name|assertNull
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

