begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
operator|.
name|DEFAULT_NODEGROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
operator|.
name|DEFAULT_RACK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/** Test the node schema loader. */
end_comment

begin_class
DECL|class|TestNodeSchemaManager
specifier|public
class|class
name|TestNodeSchemaManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestNodeSchemaManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|classLoader
specifier|private
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
DECL|field|manager
specifier|private
name|NodeSchemaManager
name|manager
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|method|TestNodeSchemaManager ()
specifier|public
name|TestNodeSchemaManager
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|String
name|filePath
init|=
name|classLoader
operator|.
name|getResource
argument_list|(
literal|"./networkTopologyTestFiles/good.xml"
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_NETWORK_TOPOLOGY_SCHEMA_FILE
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|manager
operator|=
name|NodeSchemaManager
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|manager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|30000
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testFailure1 ()
specifier|public
name|void
name|testFailure1
parameter_list|()
block|{
name|manager
operator|.
name|getCost
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testFailure2 ()
specifier|public
name|void
name|testFailure2
parameter_list|()
block|{
name|manager
operator|.
name|getCost
argument_list|(
name|manager
operator|.
name|getMaxLevel
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPass ()
specifier|public
name|void
name|testPass
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|manager
operator|.
name|getMaxLevel
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|manager
operator|.
name|getMaxLevel
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|manager
operator|.
name|getCost
argument_list|(
name|i
argument_list|)
operator|==
literal|1
operator|||
name|manager
operator|.
name|getCost
argument_list|(
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInitFailure ()
specifier|public
name|void
name|testInitFailure
parameter_list|()
block|{
name|String
name|filePath
init|=
name|classLoader
operator|.
name|getResource
argument_list|(
literal|"./networkTopologyTestFiles/good.xml"
argument_list|)
operator|.
name|getPath
argument_list|()
operator|+
literal|".backup"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_NETWORK_TOPOLOGY_SCHEMA_FILE
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
try|try
block|{
name|manager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Failed to load schema file:"
operator|+
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testComplete ()
specifier|public
name|void
name|testComplete
parameter_list|()
block|{
comment|// successful complete action
name|String
name|path
init|=
literal|"/node1"
decl_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_RACK
operator|+
name|DEFAULT_NODEGROUP
operator|+
name|path
argument_list|,
name|manager
operator|.
name|complete
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/rack"
operator|+
name|DEFAULT_NODEGROUP
operator|+
name|path
argument_list|,
name|manager
operator|.
name|complete
argument_list|(
literal|"/rack"
operator|+
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_RACK
operator|+
literal|"/nodegroup"
operator|+
name|path
argument_list|,
name|manager
operator|.
name|complete
argument_list|(
literal|"/nodegroup"
operator|+
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|// failed complete action
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|manager
operator|.
name|complete
argument_list|(
literal|"/dc"
operator|+
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

