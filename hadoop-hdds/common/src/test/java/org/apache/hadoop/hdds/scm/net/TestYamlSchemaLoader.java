begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/** Test the node schema loader. */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestYamlSchemaLoader
specifier|public
class|class
name|TestYamlSchemaLoader
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestYamlSchemaLoader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|classLoader
specifier|private
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
DECL|method|TestYamlSchemaLoader (String schemaFile, String errMsg)
specifier|public
name|TestYamlSchemaLoader
parameter_list|(
name|String
name|schemaFile
parameter_list|,
name|String
name|errMsg
parameter_list|)
block|{
try|try
block|{
name|String
name|filePath
init|=
name|classLoader
operator|.
name|getResource
argument_list|(
literal|"./networkTopologyTestFiles/"
operator|+
name|schemaFile
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|NodeSchemaLoader
operator|.
name|getInstance
argument_list|()
operator|.
name|loadSchemaFromYaml
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expect exceptions"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|errMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|30000
argument_list|)
decl_stmt|;
annotation|@
name|Parameters
DECL|method|getSchemaFiles ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|getSchemaFiles
parameter_list|()
block|{
name|Object
index|[]
index|[]
name|schemaFiles
init|=
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"multiple-root.yaml"
block|,
literal|"Multiple root"
block|}
block|,
block|{
literal|"middle-leaf.yaml"
block|,
literal|"Leaf node in the middle"
block|}
block|,     }
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|schemaFiles
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testGood ()
specifier|public
name|void
name|testGood
parameter_list|()
block|{
try|try
block|{
name|String
name|filePath
init|=
name|classLoader
operator|.
name|getResource
argument_list|(
literal|"./networkTopologyTestFiles/good.yaml"
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|NodeSchemaLoader
operator|.
name|getInstance
argument_list|()
operator|.
name|loadSchemaFromYaml
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"should succeed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNotExist ()
specifier|public
name|void
name|testNotExist
parameter_list|()
block|{
name|String
name|filePath
init|=
name|classLoader
operator|.
name|getResource
argument_list|(
literal|"./networkTopologyTestFiles/good.xml"
argument_list|)
operator|.
name|getPath
argument_list|()
operator|+
literal|".backup"
decl_stmt|;
try|try
block|{
name|NodeSchemaLoader
operator|.
name|getInstance
argument_list|()
operator|.
name|loadSchemaFromXml
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"file "
operator|+
name|filePath
operator|+
literal|" is not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

