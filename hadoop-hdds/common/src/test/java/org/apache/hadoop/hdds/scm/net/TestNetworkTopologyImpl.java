begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
operator|.
name|ROOT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
operator|.
name|PATH_SEPARATOR_STR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
operator|.
name|ROOT_SCHEMA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
operator|.
name|REGION_SCHEMA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
operator|.
name|DATACENTER_SCHEMA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
operator|.
name|RACK_SCHEMA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
operator|.
name|NODEGROUP_SCHEMA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
operator|.
name|LEAF_SCHEMA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_comment
comment|/** Test the network topology functions. */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestNetworkTopologyImpl
specifier|public
class|class
name|TestNetworkTopologyImpl
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestNetworkTopologyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
name|NetworkTopology
name|cluster
decl_stmt|;
DECL|field|dataNodes
specifier|private
name|Node
index|[]
name|dataNodes
decl_stmt|;
DECL|field|random
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|method|TestNetworkTopologyImpl (NodeSchema[] schemas, Node[] nodeArray)
specifier|public
name|TestNetworkTopologyImpl
parameter_list|(
name|NodeSchema
index|[]
name|schemas
parameter_list|,
name|Node
index|[]
name|nodeArray
parameter_list|)
block|{
name|NodeSchemaManager
operator|.
name|getInstance
argument_list|()
operator|.
name|init
argument_list|(
name|schemas
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|NetworkTopologyImpl
argument_list|(
name|NodeSchemaManager
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|dataNodes
operator|=
name|nodeArray
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cluster
operator|.
name|add
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|3000000
argument_list|)
decl_stmt|;
annotation|@
name|Parameters
DECL|method|setupDatanodes ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|setupDatanodes
parameter_list|()
block|{
name|Object
index|[]
index|[]
name|topologies
init|=
operator|new
name|Object
index|[]
index|[]
block|{
block|{
operator|new
name|NodeSchema
index|[]
block|{
name|ROOT_SCHEMA
block|,
name|LEAF_SCHEMA
block|}
block|,
operator|new
name|Node
index|[]
block|{
name|createDatanode
argument_list|(
literal|"1.1.1.1"
argument_list|,
literal|"/"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"2.2.2.2"
argument_list|,
literal|"/"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"3.3.3.3"
argument_list|,
literal|"/"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"4.4.4.4"
argument_list|,
literal|"/"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"5.5.5.5"
argument_list|,
literal|"/"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"6.6.6.6"
argument_list|,
literal|"/"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"7.7.7.7"
argument_list|,
literal|"/"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"8.8.8.8"
argument_list|,
literal|"/"
argument_list|)
block|,             }
block|}
block|,
block|{
operator|new
name|NodeSchema
index|[]
block|{
name|ROOT_SCHEMA
block|,
name|RACK_SCHEMA
block|,
name|LEAF_SCHEMA
block|}
block|,
operator|new
name|Node
index|[]
block|{
name|createDatanode
argument_list|(
literal|"1.1.1.1"
argument_list|,
literal|"/r1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"2.2.2.2"
argument_list|,
literal|"/r1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"3.3.3.3"
argument_list|,
literal|"/r2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"4.4.4.4"
argument_list|,
literal|"/r2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"5.5.5.5"
argument_list|,
literal|"/r2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"6.6.6.6"
argument_list|,
literal|"/r3"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"7.7.7.7"
argument_list|,
literal|"/r3"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"8.8.8.8"
argument_list|,
literal|"/r3"
argument_list|)
block|,             }
block|}
block|,
block|{
operator|new
name|NodeSchema
index|[]
block|{
name|ROOT_SCHEMA
block|,
name|DATACENTER_SCHEMA
block|,
name|RACK_SCHEMA
block|,
name|LEAF_SCHEMA
block|}
block|,
operator|new
name|Node
index|[]
block|{
name|createDatanode
argument_list|(
literal|"1.1.1.1"
argument_list|,
literal|"/d1/r1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"2.2.2.2"
argument_list|,
literal|"/d1/r1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"3.3.3.3"
argument_list|,
literal|"/d1/r2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"4.4.4.4"
argument_list|,
literal|"/d1/r2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"5.5.5.5"
argument_list|,
literal|"/d1/r2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"6.6.6.6"
argument_list|,
literal|"/d2/r3"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"7.7.7.7"
argument_list|,
literal|"/d2/r3"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"8.8.8.8"
argument_list|,
literal|"/d2/r3"
argument_list|)
block|,             }
block|}
block|,
block|{
operator|new
name|NodeSchema
index|[]
block|{
name|ROOT_SCHEMA
block|,
name|DATACENTER_SCHEMA
block|,
name|RACK_SCHEMA
block|,
name|NODEGROUP_SCHEMA
block|,
name|LEAF_SCHEMA
block|}
block|,
operator|new
name|Node
index|[]
block|{
name|createDatanode
argument_list|(
literal|"1.1.1.1"
argument_list|,
literal|"/d1/r1/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"2.2.2.2"
argument_list|,
literal|"/d1/r1/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"3.3.3.3"
argument_list|,
literal|"/d1/r2/ng2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"4.4.4.4"
argument_list|,
literal|"/d1/r2/ng2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"5.5.5.5"
argument_list|,
literal|"/d1/r2/ng3"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"6.6.6.6"
argument_list|,
literal|"/d2/r3/ng3"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"7.7.7.7"
argument_list|,
literal|"/d2/r3/ng3"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"8.8.8.8"
argument_list|,
literal|"/d2/r3/ng3"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"9.9.9.9"
argument_list|,
literal|"/d3/r1/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"10.10.10.10"
argument_list|,
literal|"/d3/r1/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"11.11.11.11"
argument_list|,
literal|"/d3/r1/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"12.12.12.12"
argument_list|,
literal|"/d3/r2/ng2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"13.13.13.13"
argument_list|,
literal|"/d3/r2/ng2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"14.14.14.14"
argument_list|,
literal|"/d4/r1/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"15.15.15.15"
argument_list|,
literal|"/d4/r1/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"16.16.16.16"
argument_list|,
literal|"/d4/r1/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"17.17.17.17"
argument_list|,
literal|"/d4/r1/ng2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"18.18.18.18"
argument_list|,
literal|"/d4/r1/ng2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"19.19.19.19"
argument_list|,
literal|"/d4/r1/ng3"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"20.20.20.20"
argument_list|,
literal|"/d4/r1/ng3"
argument_list|)
block|,             }
block|}
block|,
block|{
operator|new
name|NodeSchema
index|[]
block|{
name|ROOT_SCHEMA
block|,
name|REGION_SCHEMA
block|,
name|DATACENTER_SCHEMA
block|,
name|RACK_SCHEMA
block|,
name|NODEGROUP_SCHEMA
block|,
name|LEAF_SCHEMA
block|}
block|,
operator|new
name|Node
index|[]
block|{
name|createDatanode
argument_list|(
literal|"1.1.1.1"
argument_list|,
literal|"/d1/rg1/r1/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"2.2.2.2"
argument_list|,
literal|"/d1/rg1/r1/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"3.3.3.3"
argument_list|,
literal|"/d1/rg1/r1/ng2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"4.4.4.4"
argument_list|,
literal|"/d1/rg1/r1/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"5.5.5.5"
argument_list|,
literal|"/d1/rg1/r1/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"6.6.6.6"
argument_list|,
literal|"/d1/rg1/r1/ng2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"7.7.7.7"
argument_list|,
literal|"/d1/rg1/r1/ng2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"8.8.8.8"
argument_list|,
literal|"/d1/rg1/r1/ng2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"9.9.9.9"
argument_list|,
literal|"/d1/rg1/r1/ng2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"10.10.10.10"
argument_list|,
literal|"/d1/rg1/r1/ng2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"11.11.11.11"
argument_list|,
literal|"/d1/rg1/r2/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"12.12.12.12"
argument_list|,
literal|"/d1/rg1/r2/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"13.13.13.13"
argument_list|,
literal|"/d1/rg1/r2/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"14.14.14.14"
argument_list|,
literal|"/d1/rg1/r2/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"15.15.15.15"
argument_list|,
literal|"/d1/rg1/r2/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"16.16.16.16"
argument_list|,
literal|"/d1/rg1/r2/ng2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"17.17.17.17"
argument_list|,
literal|"/d1/rg1/r2/ng2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"18.18.18.18"
argument_list|,
literal|"/d1/rg1/r2/ng2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"19.19.19.19"
argument_list|,
literal|"/d1/rg1/r2/ng2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"20.20.20.20"
argument_list|,
literal|"/d1/rg1/r2/ng2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"21.21.21.21"
argument_list|,
literal|"/d2/rg1/r2/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"22.22.22.22"
argument_list|,
literal|"/d2/rg1/r2/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"23.23.23.23"
argument_list|,
literal|"/d2/rg2/r2/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"24.24.24.24"
argument_list|,
literal|"/d2/rg2/r2/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"25.25.25.25"
argument_list|,
literal|"/d2/rg2/r2/ng1"
argument_list|)
block|,             }
block|}
block|}
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|topologies
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testContains ()
specifier|public
name|void
name|testContains
parameter_list|()
block|{
name|Node
name|nodeNotInMap
init|=
name|createDatanode
argument_list|(
literal|"8.8.8.8"
argument_list|,
literal|"/d2/r4"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|cluster
operator|.
name|contains
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|cluster
operator|.
name|contains
argument_list|(
name|nodeNotInMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumOfChildren ()
specifier|public
name|void
name|testNumOfChildren
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|,
name|cluster
operator|.
name|getNumOfLeafNode
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cluster
operator|.
name|getNumOfLeafNode
argument_list|(
literal|"/switch1/node1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetNode ()
specifier|public
name|void
name|testGetNode
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getNode
argument_list|(
literal|""
argument_list|)
argument_list|,
name|cluster
operator|.
name|getNode
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getNode
argument_list|(
literal|""
argument_list|)
argument_list|,
name|cluster
operator|.
name|getNode
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cluster
operator|.
name|getNode
argument_list|(
literal|"/switch1/node1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cluster
operator|.
name|getNode
argument_list|(
literal|"/switch1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateInvalidTopology ()
specifier|public
name|void
name|testCreateInvalidTopology
parameter_list|()
block|{
name|List
argument_list|<
name|NodeSchema
argument_list|>
name|schemas
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeSchema
argument_list|>
argument_list|()
decl_stmt|;
name|schemas
operator|.
name|add
argument_list|(
name|ROOT_SCHEMA
argument_list|)
expr_stmt|;
name|schemas
operator|.
name|add
argument_list|(
name|RACK_SCHEMA
argument_list|)
expr_stmt|;
name|schemas
operator|.
name|add
argument_list|(
name|LEAF_SCHEMA
argument_list|)
expr_stmt|;
name|NodeSchemaManager
operator|.
name|getInstance
argument_list|()
operator|.
name|init
argument_list|(
name|schemas
operator|.
name|toArray
argument_list|(
operator|new
name|NodeSchema
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NetworkTopology
name|newCluster
init|=
operator|new
name|NetworkTopologyImpl
argument_list|(
name|NodeSchemaManager
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|Node
index|[]
name|invalidDataNodes
init|=
operator|new
name|Node
index|[]
block|{
name|createDatanode
argument_list|(
literal|"1.1.1.1"
argument_list|,
literal|"/r1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"2.2.2.2"
argument_list|,
literal|"/r2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"3.3.3.3"
argument_list|,
literal|"/d1/r2"
argument_list|)
block|}
decl_stmt|;
name|newCluster
operator|.
name|add
argument_list|(
name|invalidDataNodes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|newCluster
operator|.
name|add
argument_list|(
name|invalidDataNodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
try|try
block|{
name|newCluster
operator|.
name|add
argument_list|(
name|invalidDataNodes
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected InvalidTopologyException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NetworkTopology
operator|.
name|InvalidTopologyException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Failed to add"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Its path depth is not "
operator|+
name|newCluster
operator|.
name|getMaxLevel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInitWithConfigFile ()
specifier|public
name|void
name|testInitWithConfigFile
parameter_list|()
block|{
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|filePath
init|=
name|classLoader
operator|.
name|getResource
argument_list|(
literal|"./networkTopologyTestFiles/good.xml"
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_NETWORK_TOPOLOGY_SCHEMA_FILE
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|NetworkTopology
name|newCluster
init|=
operator|new
name|NetworkTopologyImpl
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"network topology max level = "
operator|+
name|newCluster
operator|.
name|getMaxLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"should succeed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAncestor ()
specifier|public
name|void
name|testAncestor
parameter_list|()
block|{
name|assumeTrue
argument_list|(
name|cluster
operator|.
name|getMaxLevel
argument_list|()
operator|>
literal|2
argument_list|)
expr_stmt|;
name|int
name|maxLevel
init|=
name|cluster
operator|.
name|getMaxLevel
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|dataNodes
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|maxLevel
operator|>
literal|1
condition|)
block|{
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isSameAncestor
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|dataNodes
index|[
literal|1
index|]
argument_list|,
name|maxLevel
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|maxLevel
operator|--
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|dataNodes
index|[
literal|1
index|]
argument_list|,
name|dataNodes
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
literal|null
argument_list|,
name|dataNodes
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|dataNodes
index|[
literal|1
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameAncestor
argument_list|(
name|dataNodes
index|[
literal|1
index|]
argument_list|,
name|dataNodes
index|[
literal|2
index|]
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameAncestor
argument_list|(
name|dataNodes
index|[
literal|1
index|]
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameAncestor
argument_list|(
literal|null
argument_list|,
name|dataNodes
index|[
literal|2
index|]
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameAncestor
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|maxLevel
operator|=
name|cluster
operator|.
name|getMaxLevel
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isSameAncestor
argument_list|(
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|cluster
operator|.
name|getNumOfLeafNode
argument_list|(
literal|null
argument_list|)
argument_list|)
index|]
argument_list|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|cluster
operator|.
name|getNumOfLeafNode
argument_list|(
literal|null
argument_list|)
argument_list|)
index|]
argument_list|,
name|maxLevel
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddRemove ()
specifier|public
name|void
name|testAddRemove
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cluster
operator|.
name|remove
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|cluster
operator|.
name|contains
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// no leaf nodes
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cluster
operator|.
name|getNumOfLeafNode
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// no inner nodes
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cluster
operator|.
name|getNumOfNodes
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cluster
operator|.
name|add
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Inner nodes are created automatically
name|assertTrue
argument_list|(
name|cluster
operator|.
name|getNumOfNodes
argument_list|(
literal|2
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|add
argument_list|(
name|cluster
operator|.
name|chooseRandom
argument_list|(
literal|null
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Inner node can not be added manually"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Not allowed to add an inner node"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|cluster
operator|.
name|remove
argument_list|(
name|cluster
operator|.
name|chooseRandom
argument_list|(
literal|null
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Inner node can not be removed manually"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Not allowed to remove an inner node"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetNodesWithLevel ()
specifier|public
name|void
name|testGetNodesWithLevel
parameter_list|()
block|{
name|int
name|maxLevel
init|=
name|cluster
operator|.
name|getMaxLevel
argument_list|()
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getNumOfNodes
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"level 0 is not supported"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid level"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getNumOfNodes
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"level 0 is not supported"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid level"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getNumOfNodes
argument_list|(
name|maxLevel
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"level out of scope"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid level"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getNumOfNodes
argument_list|(
name|maxLevel
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"level out of scope"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid level"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// root node
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getNumOfNodes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getNumOfNodes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// leaf nodes
name|assertEquals
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|,
name|cluster
operator|.
name|getNumOfNodes
argument_list|(
name|maxLevel
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|,
name|cluster
operator|.
name|getNumOfNodes
argument_list|(
name|maxLevel
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChooseRandomSimple ()
specifier|public
name|void
name|testChooseRandomSimple
parameter_list|()
block|{
name|String
name|path
init|=
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
operator|.
name|getNetworkFullPath
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|cluster
operator|.
name|chooseRandom
argument_list|(
name|path
argument_list|)
operator|.
name|getNetworkFullPath
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|lastIndexOf
argument_list|(
name|PATH_SEPARATOR_STR
argument_list|)
argument_list|)
expr_stmt|;
comment|// test chooseRandom(String scope)
while|while
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|ROOT
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|cluster
operator|.
name|chooseRandom
argument_list|(
name|path
argument_list|)
operator|.
name|getNetworkLocation
argument_list|()
operator|.
name|startsWith
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|node
init|=
name|cluster
operator|.
name|chooseRandom
argument_list|(
literal|"~"
operator|+
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|node
operator|.
name|getNetworkLocation
argument_list|()
operator|.
name|startsWith
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|lastIndexOf
argument_list|(
name|PATH_SEPARATOR_STR
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|cluster
operator|.
name|chooseRandom
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cluster
operator|.
name|chooseRandom
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cluster
operator|.
name|chooseRandom
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cluster
operator|.
name|chooseRandom
argument_list|(
literal|"~"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cluster
operator|.
name|chooseRandom
argument_list|(
literal|"~/"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test chooseRandom(String scope, String excludedScope)
name|path
operator|=
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
operator|.
name|getNetworkFullPath
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|cluster
operator|.
name|chooseRandom
argument_list|(
name|path
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cluster
operator|.
name|chooseRandom
argument_list|(
literal|null
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cluster
operator|.
name|chooseRandom
argument_list|(
literal|""
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|// test chooseRandom(String scope, Collection<Node> excludedNodes)
name|assertNull
argument_list|(
name|cluster
operator|.
name|chooseRandom
argument_list|(
literal|""
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dataNodes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cluster
operator|.
name|chooseRandom
argument_list|(
literal|"/"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dataNodes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cluster
operator|.
name|chooseRandom
argument_list|(
literal|"~"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dataNodes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cluster
operator|.
name|chooseRandom
argument_list|(
literal|"~/"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dataNodes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cluster
operator|.
name|chooseRandom
argument_list|(
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dataNodes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Following test checks that chooseRandom works for an excluded scope.    */
annotation|@
name|Test
DECL|method|testChooseRandomExcludedScope ()
specifier|public
name|void
name|testChooseRandomExcludedScope
parameter_list|()
block|{
name|int
index|[]
name|excludedNodeIndexs
init|=
block|{
literal|0
block|,
name|dataNodes
operator|.
name|length
operator|-
literal|1
block|,
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
block|,
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
block|}
decl_stmt|;
name|String
name|scope
decl_stmt|;
name|Map
argument_list|<
name|Node
argument_list|,
name|Integer
argument_list|>
name|frequency
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|excludedNodeIndexs
control|)
block|{
name|String
name|path
init|=
name|dataNodes
index|[
name|i
index|]
operator|.
name|getNetworkFullPath
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|ROOT
argument_list|)
condition|)
block|{
name|scope
operator|=
literal|"~"
operator|+
name|path
expr_stmt|;
name|frequency
operator|=
name|pickNodesAtRandom
argument_list|(
literal|100
argument_list|,
name|scope
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|key
range|:
name|dataNodes
control|)
block|{
if|if
condition|(
name|key
operator|.
name|getNetworkFullPath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|frequency
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|lastIndexOf
argument_list|(
name|PATH_SEPARATOR_STR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// null excludedScope, every node should be chosen
name|frequency
operator|=
name|pickNodes
argument_list|(
literal|100
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|key
range|:
name|dataNodes
control|)
block|{
name|assertTrue
argument_list|(
name|frequency
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// "" excludedScope,  no node will ever be chosen
name|frequency
operator|=
name|pickNodes
argument_list|(
literal|100
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|key
range|:
name|dataNodes
control|)
block|{
name|assertTrue
argument_list|(
name|frequency
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// "~" scope, no node will ever be chosen
name|scope
operator|=
literal|"~"
expr_stmt|;
name|frequency
operator|=
name|pickNodesAtRandom
argument_list|(
literal|100
argument_list|,
name|scope
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|key
range|:
name|dataNodes
control|)
block|{
name|assertTrue
argument_list|(
name|frequency
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// out network topology excluded scope, every node should be chosen
name|scope
operator|=
literal|"/city1"
expr_stmt|;
name|frequency
operator|=
name|pickNodes
argument_list|(
name|cluster
operator|.
name|getNumOfLeafNode
argument_list|(
literal|null
argument_list|)
argument_list|,
name|scope
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|key
range|:
name|dataNodes
control|)
block|{
name|assertTrue
argument_list|(
name|frequency
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Following test checks that chooseRandom works for an excluded nodes.    */
annotation|@
name|Test
DECL|method|testChooseRandomExcludedNode ()
specifier|public
name|void
name|testChooseRandomExcludedNode
parameter_list|()
block|{
name|Node
index|[]
index|[]
name|excludedNodeLists
init|=
block|{
block|{}
block|,
block|{
name|dataNodes
index|[
literal|0
index|]
block|}
block|,
block|{
name|dataNodes
index|[
name|dataNodes
operator|.
name|length
operator|-
literal|1
index|]
block|}
block|,
block|{
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|}
block|,
block|{
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|}
block|,
block|{
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,         }
block|}
decl_stmt|;
name|int
name|leafNum
init|=
name|cluster
operator|.
name|getNumOfLeafNode
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Node
argument_list|,
name|Integer
argument_list|>
name|frequency
decl_stmt|;
for|for
control|(
name|Node
index|[]
name|list
range|:
name|excludedNodeLists
control|)
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|excludedList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|int
name|ancestorGen
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ancestorGen
operator|<
name|cluster
operator|.
name|getMaxLevel
argument_list|()
condition|)
block|{
name|frequency
operator|=
name|pickNodesAtRandom
argument_list|(
name|leafNum
argument_list|,
literal|null
argument_list|,
name|excludedList
argument_list|,
name|ancestorGen
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Node
argument_list|>
name|ancestorList
init|=
name|NetUtils
operator|.
name|getAncestorList
argument_list|(
name|cluster
argument_list|,
name|excludedList
argument_list|,
name|ancestorGen
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|key
range|:
name|dataNodes
control|)
block|{
if|if
condition|(
name|excludedList
operator|.
name|contains
argument_list|(
name|key
argument_list|)
operator|||
operator|(
name|ancestorList
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|ancestorList
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
operator|(
name|InnerNode
operator|)
name|a
argument_list|)
operator|.
name|filter
argument_list|(
name|a
lambda|->
name|a
operator|.
name|isAncestor
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|assertTrue
argument_list|(
name|frequency
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|0
argument_list|)
block|;           }
block|}
name|ancestorGen
operator|++
expr_stmt|;
block|}
block|}
comment|// all nodes excluded, no node will be picked
name|List
argument_list|<
name|Node
argument_list|>
name|excludedList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|dataNodes
argument_list|)
decl_stmt|;
name|int
name|ancestorGen
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ancestorGen
operator|<
name|cluster
operator|.
name|getMaxLevel
argument_list|()
condition|)
block|{
name|frequency
operator|=
name|pickNodesAtRandom
argument_list|(
name|leafNum
argument_list|,
literal|null
argument_list|,
name|excludedList
argument_list|,
name|ancestorGen
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|key
range|:
name|dataNodes
control|)
block|{
name|assertTrue
argument_list|(
name|frequency
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|ancestorGen
operator|++
expr_stmt|;
block|}
comment|// out scope excluded nodes, each node will be picked
name|excludedList
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createDatanode
argument_list|(
literal|"1.1.1.1."
argument_list|,
literal|"/city1/rack1"
argument_list|)
argument_list|)
expr_stmt|;
name|ancestorGen
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|ancestorGen
operator|<
name|cluster
operator|.
name|getMaxLevel
argument_list|()
condition|)
block|{
name|frequency
operator|=
name|pickNodes
argument_list|(
name|leafNum
argument_list|,
literal|null
argument_list|,
name|excludedList
argument_list|,
literal|null
argument_list|,
name|ancestorGen
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|key
range|:
name|dataNodes
control|)
block|{
name|assertTrue
argument_list|(
name|frequency
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
name|ancestorGen
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * Following test checks that chooseRandom works for excluded nodes and scope.    */
annotation|@
name|Test
DECL|method|testChooseRandomExcludedNodeAndScope ()
specifier|public
name|void
name|testChooseRandomExcludedNodeAndScope
parameter_list|()
block|{
name|int
index|[]
name|excludedNodeIndexs
init|=
block|{
literal|0
block|,
name|dataNodes
operator|.
name|length
operator|-
literal|1
block|,
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
block|,
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
block|}
decl_stmt|;
name|Node
index|[]
index|[]
name|excludedNodeLists
init|=
block|{
block|{}
block|,
block|{
name|dataNodes
index|[
literal|0
index|]
block|}
block|,
block|{
name|dataNodes
index|[
name|dataNodes
operator|.
name|length
operator|-
literal|1
index|]
block|}
block|,
block|{
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|}
block|,
block|{
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|}
block|,
block|{
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,         }
block|}
decl_stmt|;
name|int
name|leafNum
init|=
name|cluster
operator|.
name|getNumOfLeafNode
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Node
argument_list|,
name|Integer
argument_list|>
name|frequency
decl_stmt|;
name|String
name|scope
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|excludedNodeIndexs
control|)
block|{
name|String
name|path
init|=
name|dataNodes
index|[
name|i
index|]
operator|.
name|getNetworkFullPath
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|ROOT
argument_list|)
condition|)
block|{
name|scope
operator|=
literal|"~"
operator|+
name|path
expr_stmt|;
name|int
name|ancestorGen
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ancestorGen
operator|<
name|cluster
operator|.
name|getMaxLevel
argument_list|()
condition|)
block|{
for|for
control|(
name|Node
index|[]
name|list
range|:
name|excludedNodeLists
control|)
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|excludedList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|frequency
operator|=
name|pickNodesAtRandom
argument_list|(
name|leafNum
argument_list|,
name|scope
argument_list|,
name|excludedList
argument_list|,
name|ancestorGen
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Node
argument_list|>
name|ancestorList
init|=
name|NetUtils
operator|.
name|getAncestorList
argument_list|(
name|cluster
argument_list|,
name|excludedList
argument_list|,
name|ancestorGen
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|key
range|:
name|dataNodes
control|)
block|{
if|if
condition|(
name|excludedList
operator|.
name|contains
argument_list|(
name|key
argument_list|)
operator|||
name|key
operator|.
name|getNetworkFullPath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|path
argument_list|)
operator|||
operator|(
name|ancestorList
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|ancestorList
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
operator|(
name|InnerNode
operator|)
name|a
argument_list|)
operator|.
name|filter
argument_list|(
name|a
lambda|->
name|a
operator|.
name|isAncestor
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|assertTrue
argument_list|(
name|frequency
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|0
argument_list|)
block|;               }
block|}
block|}
name|ancestorGen
operator|++
expr_stmt|;
block|}
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|lastIndexOf
argument_list|(
name|PATH_SEPARATOR_STR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// all nodes excluded, no node will be picked
name|List
argument_list|<
name|Node
argument_list|>
name|excludedList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|dataNodes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|excludedNodeIndexs
control|)
block|{
name|String
name|path
init|=
name|dataNodes
index|[
name|i
index|]
operator|.
name|getNetworkFullPath
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|ROOT
argument_list|)
condition|)
block|{
name|scope
operator|=
literal|"~"
operator|+
name|path
expr_stmt|;
name|int
name|ancestorGen
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ancestorGen
operator|<
name|cluster
operator|.
name|getMaxLevel
argument_list|()
condition|)
block|{
name|frequency
operator|=
name|pickNodesAtRandom
argument_list|(
name|leafNum
argument_list|,
name|scope
argument_list|,
name|excludedList
argument_list|,
name|ancestorGen
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|key
range|:
name|dataNodes
control|)
block|{
name|assertTrue
argument_list|(
name|frequency
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|ancestorGen
operator|++
expr_stmt|;
block|}
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|lastIndexOf
argument_list|(
name|PATH_SEPARATOR_STR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// no node excluded and no excluded scope, each node will be picked
name|int
name|ancestorGen
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ancestorGen
operator|<
name|cluster
operator|.
name|getMaxLevel
argument_list|()
condition|)
block|{
name|frequency
operator|=
name|pickNodes
argument_list|(
name|leafNum
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|ancestorGen
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|key
range|:
name|dataNodes
control|)
block|{
name|assertTrue
argument_list|(
name|frequency
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
name|ancestorGen
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * Following test checks that chooseRandom works for excluded nodes, scope    * and ancestor generation.    */
annotation|@
name|Test
DECL|method|testChooseRandomWithAffinityNode ()
specifier|public
name|void
name|testChooseRandomWithAffinityNode
parameter_list|()
block|{
name|int
index|[]
name|excludedNodeIndexs
init|=
block|{
literal|0
block|,
name|dataNodes
operator|.
name|length
operator|-
literal|1
block|,
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
block|,
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
block|}
decl_stmt|;
name|Node
index|[]
index|[]
name|excludedNodeLists
init|=
block|{
block|{}
block|,
block|{
name|dataNodes
index|[
literal|0
index|]
block|}
block|,
block|{
name|dataNodes
index|[
name|dataNodes
operator|.
name|length
operator|-
literal|1
index|]
block|}
block|,
block|{
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|}
block|,
block|{
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|}
block|,
block|{
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,         }
block|}
decl_stmt|;
name|int
index|[]
name|affinityNodeIndexs
init|=
block|{
literal|0
block|,
name|dataNodes
operator|.
name|length
operator|-
literal|1
block|,
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
block|,
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
block|}
decl_stmt|;
name|int
name|leafNum
init|=
name|cluster
operator|.
name|getNumOfLeafNode
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Node
argument_list|,
name|Integer
argument_list|>
name|frequency
decl_stmt|;
name|String
name|scope
decl_stmt|;
for|for
control|(
name|int
name|k
range|:
name|affinityNodeIndexs
control|)
block|{
for|for
control|(
name|int
name|i
range|:
name|excludedNodeIndexs
control|)
block|{
name|String
name|path
init|=
name|dataNodes
index|[
name|i
index|]
operator|.
name|getNetworkFullPath
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|ROOT
argument_list|)
condition|)
block|{
name|int
name|ancestorGen
init|=
name|cluster
operator|.
name|getMaxLevel
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|ancestorGen
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Node
index|[]
name|list
range|:
name|excludedNodeLists
control|)
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|excludedList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|frequency
operator|=
name|pickNodes
argument_list|(
name|leafNum
argument_list|,
name|path
argument_list|,
name|excludedList
argument_list|,
name|dataNodes
index|[
name|k
index|]
argument_list|,
name|ancestorGen
argument_list|)
expr_stmt|;
name|Node
name|affinityAncestor
init|=
name|dataNodes
index|[
name|k
index|]
operator|.
name|getAncestor
argument_list|(
name|ancestorGen
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|key
range|:
name|dataNodes
control|)
block|{
if|if
condition|(
name|affinityAncestor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|frequency
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|>
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|affinityAncestor
operator|.
name|isAncestor
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|affinityAncestor
operator|.
name|isAncestor
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|excludedList
operator|!=
literal|null
operator|&&
name|excludedList
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|key
operator|.
name|getNetworkFullPath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|path
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Node is not picked when sequentially going "
operator|+
literal|"through ancestor node's leaf nodes. node:"
operator|+
name|key
operator|.
name|getNetworkFullPath
argument_list|()
operator|+
literal|", ancestor node:"
operator|+
name|affinityAncestor
operator|.
name|getNetworkFullPath
argument_list|()
operator|+
literal|", excludedScope: "
operator|+
name|path
operator|+
literal|", "
operator|+
literal|"excludedList:"
operator|+
operator|(
name|excludedList
operator|==
literal|null
condition|?
literal|""
else|:
name|excludedList
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|ancestorGen
operator|--
expr_stmt|;
block|}
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|lastIndexOf
argument_list|(
name|PATH_SEPARATOR_STR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// all nodes excluded, no node will be picked
name|List
argument_list|<
name|Node
argument_list|>
name|excludedList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|dataNodes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
range|:
name|affinityNodeIndexs
control|)
block|{
for|for
control|(
name|int
name|i
range|:
name|excludedNodeIndexs
control|)
block|{
name|String
name|path
init|=
name|dataNodes
index|[
name|i
index|]
operator|.
name|getNetworkFullPath
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|ROOT
argument_list|)
condition|)
block|{
name|scope
operator|=
literal|"~"
operator|+
name|path
expr_stmt|;
name|int
name|ancestorGen
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ancestorGen
operator|<
name|cluster
operator|.
name|getMaxLevel
argument_list|()
condition|)
block|{
name|frequency
operator|=
name|pickNodesAtRandom
argument_list|(
name|leafNum
argument_list|,
name|scope
argument_list|,
name|excludedList
argument_list|,
name|dataNodes
index|[
name|k
index|]
argument_list|,
name|ancestorGen
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|key
range|:
name|dataNodes
control|)
block|{
name|assertTrue
argument_list|(
name|frequency
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|ancestorGen
operator|++
expr_stmt|;
block|}
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|lastIndexOf
argument_list|(
name|PATH_SEPARATOR_STR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// no node excluded and no excluded scope, each node will be picked
name|int
name|ancestorGen
init|=
name|cluster
operator|.
name|getMaxLevel
argument_list|()
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|k
range|:
name|affinityNodeIndexs
control|)
block|{
while|while
condition|(
name|ancestorGen
operator|>
literal|0
condition|)
block|{
name|frequency
operator|=
name|pickNodes
argument_list|(
name|leafNum
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dataNodes
index|[
name|k
index|]
argument_list|,
name|ancestorGen
argument_list|)
expr_stmt|;
name|Node
name|affinityAncestor
init|=
name|dataNodes
index|[
name|k
index|]
operator|.
name|getAncestor
argument_list|(
name|ancestorGen
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|key
range|:
name|dataNodes
control|)
block|{
if|if
condition|(
name|frequency
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|affinityAncestor
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|affinityAncestor
operator|.
name|isAncestor
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ancestorGen
operator|--
expr_stmt|;
block|}
block|}
comment|// check invalid ancestor generation
try|try
block|{
name|cluster
operator|.
name|chooseRandom
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|cluster
operator|.
name|getMaxLevel
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ancestor generation exceeds max level, should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"ancestorGen "
operator|+
name|cluster
operator|.
name|getMaxLevel
argument_list|()
operator|+
literal|" exceeds this network topology acceptable level"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCost ()
specifier|public
name|void
name|testCost
parameter_list|()
block|{
comment|// network topology with default cost
name|List
argument_list|<
name|NodeSchema
argument_list|>
name|schemas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|schemas
operator|.
name|add
argument_list|(
name|ROOT_SCHEMA
argument_list|)
expr_stmt|;
name|schemas
operator|.
name|add
argument_list|(
name|RACK_SCHEMA
argument_list|)
expr_stmt|;
name|schemas
operator|.
name|add
argument_list|(
name|NODEGROUP_SCHEMA
argument_list|)
expr_stmt|;
name|schemas
operator|.
name|add
argument_list|(
name|LEAF_SCHEMA
argument_list|)
expr_stmt|;
name|NodeSchemaManager
name|manager
init|=
name|NodeSchemaManager
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|manager
operator|.
name|init
argument_list|(
name|schemas
operator|.
name|toArray
argument_list|(
operator|new
name|NodeSchema
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NetworkTopology
name|newCluster
init|=
operator|new
name|NetworkTopologyImpl
argument_list|(
name|manager
argument_list|)
decl_stmt|;
name|Node
index|[]
name|nodeList
init|=
operator|new
name|Node
index|[]
block|{
name|createDatanode
argument_list|(
literal|"1.1.1.1"
argument_list|,
literal|"/r1/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"2.2.2.2"
argument_list|,
literal|"/r1/ng1"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"3.3.3.3"
argument_list|,
literal|"/r1/ng2"
argument_list|)
block|,
name|createDatanode
argument_list|(
literal|"4.4.4.4"
argument_list|,
literal|"/r2/ng1"
argument_list|)
block|,     }
decl_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|nodeList
control|)
block|{
name|newCluster
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|Node
name|outScopeNode1
init|=
name|createDatanode
argument_list|(
literal|"5.5.5.5"
argument_list|,
literal|"/r2/ng2"
argument_list|)
decl_stmt|;
name|Node
name|outScopeNode2
init|=
name|createDatanode
argument_list|(
literal|"6.6.6.6"
argument_list|,
literal|"/r2/ng2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
name|nodeList
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
literal|null
argument_list|,
name|nodeList
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
name|outScopeNode1
argument_list|,
name|nodeList
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
name|nodeList
index|[
literal|0
index|]
argument_list|,
name|outScopeNode1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
name|outScopeNode1
argument_list|,
name|outScopeNode2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
name|nodeList
index|[
literal|0
index|]
argument_list|,
name|nodeList
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
name|nodeList
index|[
literal|0
index|]
argument_list|,
name|nodeList
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
name|nodeList
index|[
literal|0
index|]
argument_list|,
name|nodeList
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
name|nodeList
index|[
literal|0
index|]
argument_list|,
name|nodeList
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// network topology with customized cost
name|schemas
operator|.
name|clear
argument_list|()
expr_stmt|;
name|schemas
operator|.
name|add
argument_list|(
operator|new
name|NodeSchema
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|NodeSchema
operator|.
name|LayerType
operator|.
name|ROOT
argument_list|)
operator|.
name|setCost
argument_list|(
literal|5
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|schemas
operator|.
name|add
argument_list|(
operator|new
name|NodeSchema
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|NodeSchema
operator|.
name|LayerType
operator|.
name|INNER_NODE
argument_list|)
operator|.
name|setCost
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|schemas
operator|.
name|add
argument_list|(
operator|new
name|NodeSchema
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|NodeSchema
operator|.
name|LayerType
operator|.
name|INNER_NODE
argument_list|)
operator|.
name|setCost
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|schemas
operator|.
name|add
argument_list|(
operator|new
name|NodeSchema
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|NodeSchema
operator|.
name|LayerType
operator|.
name|LEAF_NODE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|=
name|NodeSchemaManager
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|manager
operator|.
name|init
argument_list|(
name|schemas
operator|.
name|toArray
argument_list|(
operator|new
name|NodeSchema
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newCluster
operator|=
operator|new
name|NetworkTopologyImpl
argument_list|(
name|manager
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|nodeList
control|)
block|{
name|newCluster
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
name|nodeList
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
literal|null
argument_list|,
name|nodeList
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
name|outScopeNode1
argument_list|,
name|nodeList
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
name|nodeList
index|[
literal|0
index|]
argument_list|,
name|outScopeNode1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
name|outScopeNode1
argument_list|,
name|outScopeNode2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
name|nodeList
index|[
literal|0
index|]
argument_list|,
name|nodeList
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
name|nodeList
index|[
literal|0
index|]
argument_list|,
name|nodeList
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
name|nodeList
index|[
literal|0
index|]
argument_list|,
name|nodeList
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|newCluster
operator|.
name|getDistanceCost
argument_list|(
name|nodeList
index|[
literal|0
index|]
argument_list|,
name|nodeList
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSortByDistanceCost ()
specifier|public
name|void
name|testSortByDistanceCost
parameter_list|()
block|{
name|Node
index|[]
index|[]
name|nodes
init|=
block|{
block|{}
block|,
block|{
name|dataNodes
index|[
literal|0
index|]
block|}
block|,
block|{
name|dataNodes
index|[
name|dataNodes
operator|.
name|length
operator|-
literal|1
index|]
block|}
block|,
block|{
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|}
block|,
block|{
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|}
block|,
block|{
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,         }
block|,
block|{
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,         }
block|,
block|{
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,         }
block|}
decl_stmt|;
name|Node
index|[]
name|readers
init|=
block|{
literal|null
block|,
name|dataNodes
index|[
literal|0
index|]
block|,
name|dataNodes
index|[
name|dataNodes
operator|.
name|length
operator|-
literal|1
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|,
name|dataNodes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dataNodes
operator|.
name|length
argument_list|)
index|]
block|}
decl_stmt|;
for|for
control|(
name|Node
name|reader
range|:
name|readers
control|)
block|{
for|for
control|(
name|Node
index|[]
name|nodeList
range|:
name|nodes
control|)
block|{
name|int
name|length
init|=
name|nodeList
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|Node
argument_list|>
name|ret
init|=
name|cluster
operator|.
name|sortByDistanceCost
argument_list|(
name|reader
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|nodeList
argument_list|)
argument_list|,
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ret
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|<
name|ret
operator|.
name|size
argument_list|()
condition|)
block|{
name|int
name|cost1
init|=
name|cluster
operator|.
name|getDistanceCost
argument_list|(
name|reader
argument_list|,
name|ret
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|cost2
init|=
name|cluster
operator|.
name|getDistanceCost
argument_list|(
name|reader
argument_list|,
name|ret
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"reader:"
operator|+
operator|(
name|reader
operator|!=
literal|null
condition|?
name|reader
operator|.
name|getNetworkFullPath
argument_list|()
else|:
literal|"null"
operator|)
operator|+
literal|",node1:"
operator|+
name|ret
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getNetworkFullPath
argument_list|()
operator|+
literal|",node2:"
operator|+
name|ret
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|getNetworkFullPath
argument_list|()
operator|+
literal|",cost1:"
operator|+
name|cost1
operator|+
literal|",cost2:"
operator|+
name|cost2
argument_list|,
name|cost1
operator|==
name|Integer
operator|.
name|MAX_VALUE
operator|||
name|cost1
operator|<=
name|cost2
argument_list|)
expr_stmt|;
block|}
block|}
name|length
operator|--
expr_stmt|;
block|}
block|}
block|}
comment|// sort all nodes
name|List
argument_list|<
name|Node
argument_list|>
name|nodeList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|dataNodes
operator|.
name|clone
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|reader
range|:
name|readers
control|)
block|{
name|int
name|length
init|=
name|nodeList
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|length
operator|>=
literal|0
condition|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|Node
argument_list|>
name|sortedNodeList
init|=
name|cluster
operator|.
name|sortByDistanceCost
argument_list|(
name|reader
argument_list|,
name|nodeList
argument_list|,
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortedNodeList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|<
name|sortedNodeList
operator|.
name|size
argument_list|()
condition|)
block|{
name|int
name|cost1
init|=
name|cluster
operator|.
name|getDistanceCost
argument_list|(
name|reader
argument_list|,
name|sortedNodeList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|cost2
init|=
name|cluster
operator|.
name|getDistanceCost
argument_list|(
name|reader
argument_list|,
name|sortedNodeList
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// node can be removed when called in testConcurrentAccess
name|assertTrue
argument_list|(
literal|"reader:"
operator|+
operator|(
name|reader
operator|!=
literal|null
condition|?
name|reader
operator|.
name|getNetworkFullPath
argument_list|()
else|:
literal|"null"
operator|)
operator|+
literal|",node1:"
operator|+
name|sortedNodeList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getNetworkFullPath
argument_list|()
operator|+
literal|",node2:"
operator|+
name|sortedNodeList
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|getNetworkFullPath
argument_list|()
operator|+
literal|",cost1:"
operator|+
name|cost1
operator|+
literal|",cost2:"
operator|+
name|cost2
argument_list|,
name|cost1
operator|==
name|Integer
operator|.
name|MAX_VALUE
operator|||
name|cost1
operator|<=
name|cost2
argument_list|)
expr_stmt|;
block|}
block|}
name|length
operator|--
expr_stmt|;
block|}
block|}
block|}
DECL|method|createDatanode (String name, String path)
specifier|private
specifier|static
name|Node
name|createDatanode
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
operator|new
name|NodeImpl
argument_list|(
name|name
argument_list|,
name|path
argument_list|,
name|NetConstants
operator|.
name|NODE_COST_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * This picks a large number of nodes at random in order to ensure coverage.    *    * @param numNodes the number of nodes    * @param excludedScope the excluded scope    * @param excludedNodes the excluded node list    * @param ancestorGen the chosen node cannot share the same ancestor at    *                    this generation with excludedNodes    * @return the frequency that nodes were chosen    */
DECL|method|pickNodesAtRandom (int numNodes, String excludedScope, Collection<Node> excludedNodes, int ancestorGen)
specifier|private
name|Map
argument_list|<
name|Node
argument_list|,
name|Integer
argument_list|>
name|pickNodesAtRandom
parameter_list|(
name|int
name|numNodes
parameter_list|,
name|String
name|excludedScope
parameter_list|,
name|Collection
argument_list|<
name|Node
argument_list|>
name|excludedNodes
parameter_list|,
name|int
name|ancestorGen
parameter_list|)
block|{
name|Map
argument_list|<
name|Node
argument_list|,
name|Integer
argument_list|>
name|frequency
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|dnd
range|:
name|dataNodes
control|)
block|{
name|frequency
operator|.
name|put
argument_list|(
name|dnd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numNodes
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|node
init|=
name|cluster
operator|.
name|chooseRandom
argument_list|(
name|excludedScope
argument_list|,
name|excludedNodes
argument_list|,
name|ancestorGen
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|frequency
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|frequency
operator|.
name|get
argument_list|(
name|node
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Result:"
operator|+
name|frequency
argument_list|)
expr_stmt|;
return|return
name|frequency
return|;
block|}
comment|/**    * This picks a large number of nodes at random in order to ensure coverage.    *    * @param numNodes the number of nodes    * @param excludedScope the excluded scope    * @param excludedNodes the excluded node list    * @param affinityNode the chosen node should share the same ancestor at    *                     generation "ancestorGen" with this node    * @param ancestorGen  the chosen node cannot share the same ancestor at    *                     this generation with excludedNodes    * @return the frequency that nodes were chosen    */
DECL|method|pickNodesAtRandom (int numNodes, String excludedScope, Collection<Node> excludedNodes, Node affinityNode, int ancestorGen)
specifier|private
name|Map
argument_list|<
name|Node
argument_list|,
name|Integer
argument_list|>
name|pickNodesAtRandom
parameter_list|(
name|int
name|numNodes
parameter_list|,
name|String
name|excludedScope
parameter_list|,
name|Collection
argument_list|<
name|Node
argument_list|>
name|excludedNodes
parameter_list|,
name|Node
name|affinityNode
parameter_list|,
name|int
name|ancestorGen
parameter_list|)
block|{
name|Map
argument_list|<
name|Node
argument_list|,
name|Integer
argument_list|>
name|frequency
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|dnd
range|:
name|dataNodes
control|)
block|{
name|frequency
operator|.
name|put
argument_list|(
name|dnd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numNodes
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|node
init|=
name|cluster
operator|.
name|chooseRandom
argument_list|(
literal|""
argument_list|,
name|excludedScope
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
name|excludedNodes
argument_list|,
name|affinityNode
argument_list|,
name|ancestorGen
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|frequency
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|frequency
operator|.
name|get
argument_list|(
name|node
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Result:"
operator|+
name|frequency
argument_list|)
expr_stmt|;
return|return
name|frequency
return|;
block|}
comment|/**    * This picks a large amount of nodes sequentially.    *    * @param numNodes the number of nodes    * @param excludedScope the excluded scope, should not start with "~"    * @param excludedNodes the excluded node list    * @param affinityNode the chosen node should share the same ancestor at    *                     generation "ancestorGen" with this node    * @param ancestorGen  the chosen node cannot share the same ancestor at    *                     this generation with excludedNodes    * @return the frequency that nodes were chosen    */
DECL|method|pickNodes (int numNodes, String excludedScope, Collection<Node> excludedNodes, Node affinityNode, int ancestorGen)
specifier|private
name|Map
argument_list|<
name|Node
argument_list|,
name|Integer
argument_list|>
name|pickNodes
parameter_list|(
name|int
name|numNodes
parameter_list|,
name|String
name|excludedScope
parameter_list|,
name|Collection
argument_list|<
name|Node
argument_list|>
name|excludedNodes
parameter_list|,
name|Node
name|affinityNode
parameter_list|,
name|int
name|ancestorGen
parameter_list|)
block|{
name|Map
argument_list|<
name|Node
argument_list|,
name|Integer
argument_list|>
name|frequency
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|dnd
range|:
name|dataNodes
control|)
block|{
name|frequency
operator|.
name|put
argument_list|(
name|dnd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|excludedNodes
operator|=
name|excludedNodes
operator|==
literal|null
condition|?
literal|null
else|:
name|excludedNodes
operator|.
name|stream
argument_list|()
operator|.
name|distinct
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numNodes
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|node
init|=
name|cluster
operator|.
name|getNode
argument_list|(
name|j
argument_list|,
literal|null
argument_list|,
name|excludedScope
argument_list|,
name|excludedNodes
argument_list|,
name|affinityNode
argument_list|,
name|ancestorGen
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|frequency
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|frequency
operator|.
name|get
argument_list|(
name|node
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Result:"
operator|+
name|frequency
argument_list|)
expr_stmt|;
return|return
name|frequency
return|;
block|}
block|}
end_class

end_unit

