begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.utils.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_comment
comment|/**  * Tests RDBStore creation.  */
end_comment

begin_class
DECL|class|TestDBStoreBuilder
specifier|public
class|class
name|TestDBStoreBuilder
block|{
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|DBConfigFromFile
operator|.
name|CONFIG_DIR
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|builderWithoutAnyParams ()
specifier|public
name|void
name|builderWithoutAnyParams
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|DBStoreBuilder
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|builderWithOneParamV1 ()
specifier|public
name|void
name|builderWithOneParamV1
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|DBStoreBuilder
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setName
argument_list|(
literal|"Test.db"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|builderWithOneParamV2 ()
specifier|public
name|void
name|builderWithOneParamV2
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|File
name|newFolder
init|=
name|folder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newFolder
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|newFolder
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|thrown
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|DBStoreBuilder
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setPath
argument_list|(
name|newFolder
operator|.
name|toPath
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|builderWithOpenClose ()
specifier|public
name|void
name|builderWithOpenClose
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|File
name|newFolder
init|=
name|folder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newFolder
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|newFolder
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DBStore
name|dbStore
init|=
name|DBStoreBuilder
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setName
argument_list|(
literal|"Test.db"
argument_list|)
operator|.
name|setPath
argument_list|(
name|newFolder
operator|.
name|toPath
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Nothing to do just open and Close.
name|dbStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|builderWithDoubleTableName ()
specifier|public
name|void
name|builderWithDoubleTableName
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|File
name|newFolder
init|=
name|folder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newFolder
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|newFolder
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|thrown
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|DBStoreBuilder
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setName
argument_list|(
literal|"Test.db"
argument_list|)
operator|.
name|setPath
argument_list|(
name|newFolder
operator|.
name|toPath
argument_list|()
argument_list|)
operator|.
name|addTable
argument_list|(
literal|"FIRST"
argument_list|)
operator|.
name|addTable
argument_list|(
literal|"FIRST"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Nothing to do , This will throw so we do not have to close.
block|}
annotation|@
name|Test
DECL|method|builderWithDataWrites ()
specifier|public
name|void
name|builderWithDataWrites
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|File
name|newFolder
init|=
name|folder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newFolder
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|newFolder
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|DBStore
name|dbStore
init|=
name|DBStoreBuilder
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setName
argument_list|(
literal|"Test.db"
argument_list|)
operator|.
name|setPath
argument_list|(
name|newFolder
operator|.
name|toPath
argument_list|()
argument_list|)
operator|.
name|addTable
argument_list|(
literal|"First"
argument_list|)
operator|.
name|addTable
argument_list|(
literal|"Second"
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
try|try
init|(
name|Table
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|firstTable
init|=
name|dbStore
operator|.
name|getTable
argument_list|(
literal|"First"
argument_list|)
init|)
block|{
name|byte
index|[]
name|key
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|9
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|9
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|firstTable
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|byte
index|[]
name|temp
init|=
name|firstTable
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value
argument_list|,
name|temp
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|secondTable
init|=
name|dbStore
operator|.
name|getTable
argument_list|(
literal|"Second"
argument_list|)
init|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|secondTable
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|builderWithDiskProfileWrites ()
specifier|public
name|void
name|builderWithDiskProfileWrites
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|File
name|newFolder
init|=
name|folder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newFolder
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|newFolder
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|DBStore
name|dbStore
init|=
name|DBStoreBuilder
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setName
argument_list|(
literal|"Test.db"
argument_list|)
operator|.
name|setPath
argument_list|(
name|newFolder
operator|.
name|toPath
argument_list|()
argument_list|)
operator|.
name|addTable
argument_list|(
literal|"First"
argument_list|)
operator|.
name|addTable
argument_list|(
literal|"Second"
argument_list|)
operator|.
name|setProfile
argument_list|(
name|DBProfile
operator|.
name|DISK
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
try|try
init|(
name|Table
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|firstTable
init|=
name|dbStore
operator|.
name|getTable
argument_list|(
literal|"First"
argument_list|)
init|)
block|{
name|byte
index|[]
name|key
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|9
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|9
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|firstTable
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|byte
index|[]
name|temp
init|=
name|firstTable
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|value
argument_list|,
name|temp
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|secondTable
init|=
name|dbStore
operator|.
name|getTable
argument_list|(
literal|"Second"
argument_list|)
init|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|secondTable
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

