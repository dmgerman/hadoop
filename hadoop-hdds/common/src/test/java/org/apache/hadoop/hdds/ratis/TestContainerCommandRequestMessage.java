begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.ratis
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|ratis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|BlockData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|PutBlockRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|PutSmallFileRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|ChecksumData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|OzoneChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_comment
comment|/** Testing {@link ContainerCommandRequestMessage}. */
end_comment

begin_class
DECL|class|TestContainerCommandRequestMessage
specifier|public
class|class
name|TestContainerCommandRequestMessage
block|{
DECL|field|RANDOM
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|method|newData (int length, Random random)
specifier|static
name|ByteString
name|newData
parameter_list|(
name|int
name|length
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
specifier|final
name|ByteString
operator|.
name|Output
name|out
init|=
name|ByteString
operator|.
name|newOutput
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|out
operator|.
name|toByteString
argument_list|()
return|;
block|}
DECL|method|checksum (ByteString data)
specifier|static
name|ChecksumData
name|checksum
parameter_list|(
name|ByteString
name|data
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|Checksum
argument_list|()
operator|.
name|computeChecksum
argument_list|(
name|data
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OzoneChecksumException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|newPutSmallFile ( BlockID blockID, ByteString data)
specifier|static
name|ContainerCommandRequestProto
name|newPutSmallFile
parameter_list|(
name|BlockID
name|blockID
parameter_list|,
name|ByteString
name|data
parameter_list|)
block|{
specifier|final
name|BlockData
operator|.
name|Builder
name|blockData
init|=
name|BlockData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|blockID
operator|.
name|getDatanodeBlockIDProtobuf
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|PutBlockRequestProto
operator|.
name|Builder
name|putBlockRequest
init|=
name|PutBlockRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockData
argument_list|(
name|blockData
argument_list|)
decl_stmt|;
specifier|final
name|KeyValue
name|keyValue
init|=
name|KeyValue
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"OverWriteRequested"
argument_list|)
operator|.
name|setValue
argument_list|(
literal|"true"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ChunkInfo
name|chunk
init|=
name|ChunkInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setChunkName
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
operator|+
literal|"_chunk"
argument_list|)
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
operator|.
name|setLen
argument_list|(
name|data
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|addMetadata
argument_list|(
name|keyValue
argument_list|)
operator|.
name|setChecksumData
argument_list|(
name|checksum
argument_list|(
name|data
argument_list|)
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|PutSmallFileRequestProto
name|putSmallFileRequest
init|=
name|PutSmallFileRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setChunkInfo
argument_list|(
name|chunk
argument_list|)
operator|.
name|setBlock
argument_list|(
name|putBlockRequest
argument_list|)
operator|.
name|setData
argument_list|(
name|data
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|PutSmallFile
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setPutSmallFile
argument_list|(
name|putSmallFileRequest
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|newWriteChunk ( BlockID blockID, ByteString data)
specifier|static
name|ContainerCommandRequestProto
name|newWriteChunk
parameter_list|(
name|BlockID
name|blockID
parameter_list|,
name|ByteString
name|data
parameter_list|)
block|{
specifier|final
name|ChunkInfo
name|chunk
init|=
name|ChunkInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setChunkName
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
operator|+
literal|"_chunk_"
operator|+
literal|1
argument_list|)
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
operator|.
name|setLen
argument_list|(
name|data
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|setChecksumData
argument_list|(
name|checksum
argument_list|(
name|data
argument_list|)
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|WriteChunkRequestProto
operator|.
name|Builder
name|writeChunkRequest
init|=
name|WriteChunkRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|blockID
operator|.
name|getDatanodeBlockIDProtobuf
argument_list|()
argument_list|)
operator|.
name|setChunkData
argument_list|(
name|chunk
argument_list|)
operator|.
name|setData
argument_list|(
name|data
argument_list|)
decl_stmt|;
return|return
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|WriteChunk
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setWriteChunk
argument_list|(
name|writeChunkRequest
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testPutSmallFile ()
specifier|public
name|void
name|testPutSmallFile
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|TestContainerCommandRequestMessage
operator|::
name|newPutSmallFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteChunk ()
specifier|public
name|void
name|testWriteChunk
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|TestContainerCommandRequestMessage
operator|::
name|newWriteChunk
argument_list|)
expr_stmt|;
block|}
DECL|method|runTest ( BiFunction<BlockID, ByteString, ContainerCommandRequestProto> method)
specifier|static
name|void
name|runTest
parameter_list|(
name|BiFunction
argument_list|<
name|BlockID
argument_list|,
name|ByteString
argument_list|,
name|ContainerCommandRequestProto
argument_list|>
name|method
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|runTest
argument_list|(
name|i
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|1
operator|<<
literal|10
condition|;
control|)
block|{
name|runTest
argument_list|(
name|i
operator|+
literal|1
operator|+
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|i
operator|<<=
literal|1
expr_stmt|;
name|runTest
argument_list|(
name|i
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runTest (int length, BiFunction<BlockID, ByteString, ContainerCommandRequestProto> method)
specifier|static
name|void
name|runTest
parameter_list|(
name|int
name|length
parameter_list|,
name|BiFunction
argument_list|<
name|BlockID
argument_list|,
name|ByteString
argument_list|,
name|ContainerCommandRequestProto
argument_list|>
name|method
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"length="
operator|+
name|length
argument_list|)
expr_stmt|;
specifier|final
name|BlockID
name|blockID
init|=
operator|new
name|BlockID
argument_list|(
name|RANDOM
operator|.
name|nextLong
argument_list|()
argument_list|,
name|RANDOM
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ByteString
name|data
init|=
name|newData
argument_list|(
name|length
argument_list|,
name|RANDOM
argument_list|)
decl_stmt|;
specifier|final
name|ContainerCommandRequestProto
name|original
init|=
name|method
operator|.
name|apply
argument_list|(
name|blockID
argument_list|,
name|data
argument_list|)
decl_stmt|;
specifier|final
name|ContainerCommandRequestMessage
name|message
init|=
name|ContainerCommandRequestMessage
operator|.
name|toMessage
argument_list|(
name|original
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|ContainerCommandRequestProto
name|computed
init|=
name|ContainerCommandRequestMessage
operator|.
name|toProto
argument_list|(
name|message
operator|.
name|getContent
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|original
argument_list|,
name|computed
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

