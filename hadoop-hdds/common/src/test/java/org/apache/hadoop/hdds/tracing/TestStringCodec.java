begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.tracing
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|tracing
package|;
end_package

begin_import
import|import
name|io
operator|.
name|jaegertracing
operator|.
name|internal
operator|.
name|JaegerSpanContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|jaegertracing
operator|.
name|internal
operator|.
name|exceptions
operator|.
name|EmptyTracerStateStringException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|jaegertracing
operator|.
name|internal
operator|.
name|exceptions
operator|.
name|MalformedTracerStateStringException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestStringCodec
class|class
name|TestStringCodec
block|{
annotation|@
name|Test
DECL|method|testExtract ()
name|void
name|testExtract
parameter_list|()
throws|throws
name|Exception
block|{
name|StringCodec
name|codec
init|=
operator|new
name|StringCodec
argument_list|()
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|EmptyTracerStateStringException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|codec
operator|.
name|extract
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"123"
argument_list|)
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|MalformedTracerStateStringException
operator|.
name|class
argument_list|,
literal|"String does not match tracer state format"
argument_list|,
parameter_list|()
lambda|->
name|codec
operator|.
name|extract
argument_list|(
name|sb
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":456:789"
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|MalformedTracerStateStringException
operator|.
name|class
argument_list|,
literal|"String does not match tracer state format"
argument_list|,
parameter_list|()
lambda|->
name|codec
operator|.
name|extract
argument_list|(
name|sb
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":66"
argument_list|)
expr_stmt|;
name|JaegerSpanContext
name|context
init|=
name|codec
operator|.
name|extract
argument_list|(
name|sb
argument_list|)
decl_stmt|;
name|String
name|expectedContextString
init|=
operator|new
name|String
argument_list|(
literal|"123:456:789:66"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|getTraceId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|expectedContextString
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

