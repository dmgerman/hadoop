begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Test class for OzoneConfiguration.  */
end_comment

begin_class
DECL|class|TestOzoneConfiguration
specifier|public
class|class
name|TestOzoneConfiguration
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Rule
DECL|field|tempConfigs
specifier|public
name|TemporaryFolder
name|tempConfigs
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
block|}
DECL|method|startConfig (BufferedWriter out)
specifier|private
name|void
name|startConfig
parameter_list|(
name|BufferedWriter
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\"?>\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"<configuration>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|endConfig (BufferedWriter out)
specifier|private
name|void
name|endConfig
parameter_list|(
name|BufferedWriter
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"</configuration>\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAllPropertiesByTags ()
specifier|public
name|void
name|testGetAllPropertiesByTags
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|coreDefault
init|=
name|tempConfigs
operator|.
name|newFile
argument_list|(
literal|"core-default-test.xml"
argument_list|)
decl_stmt|;
name|File
name|coreSite
init|=
name|tempConfigs
operator|.
name|newFile
argument_list|(
literal|"core-site-test.xml"
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedWriter
name|out
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|coreDefault
argument_list|)
argument_list|)
init|)
block|{
name|startConfig
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
name|out
argument_list|,
literal|"hadoop.tags.system"
argument_list|,
literal|"YARN,HDFS,NAMENODE"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
name|out
argument_list|,
literal|"hadoop.tags.custom"
argument_list|,
literal|"MYCUSTOMTAG"
argument_list|)
expr_stmt|;
name|appendPropertyByTag
argument_list|(
name|out
argument_list|,
literal|"dfs.cblock.trace.io"
argument_list|,
literal|"false"
argument_list|,
literal|"YARN"
argument_list|)
expr_stmt|;
name|appendPropertyByTag
argument_list|(
name|out
argument_list|,
literal|"dfs.replication"
argument_list|,
literal|"1"
argument_list|,
literal|"HDFS"
argument_list|)
expr_stmt|;
name|appendPropertyByTag
argument_list|(
name|out
argument_list|,
literal|"dfs.namenode.logging.level"
argument_list|,
literal|"INFO"
argument_list|,
literal|"NAMENODE"
argument_list|)
expr_stmt|;
name|appendPropertyByTag
argument_list|(
name|out
argument_list|,
literal|"dfs.random.key"
argument_list|,
literal|"XYZ"
argument_list|,
literal|"MYCUSTOMTAG"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|coreDefault
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conf
operator|.
name|getAllPropertiesByTag
argument_list|(
literal|"MYCUSTOMTAG"
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"dfs.random.key"
argument_list|)
argument_list|,
literal|"XYZ"
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|BufferedWriter
name|out
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|coreSite
argument_list|)
argument_list|)
init|)
block|{
name|startConfig
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
name|out
argument_list|,
literal|"dfs.random.key"
argument_list|,
literal|"ABC"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
name|out
argument_list|,
literal|"dfs.replication"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
name|out
argument_list|,
literal|"dfs.cblock.trace.io"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|coreSite
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
block|}
comment|// Test if values are getting overridden even without tags being present
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|conf
operator|.
name|getAllPropertiesByTag
argument_list|(
literal|"HDFS"
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"dfs.replication"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ABC"
argument_list|,
name|conf
operator|.
name|getAllPropertiesByTag
argument_list|(
literal|"MYCUSTOMTAG"
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"dfs.random.key"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|conf
operator|.
name|getAllPropertiesByTag
argument_list|(
literal|"YARN"
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"dfs.cblock.trace.io"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getConfigurationObject ()
specifier|public
name|void
name|getConfigurationObject
parameter_list|()
block|{
name|OzoneConfiguration
name|ozoneConfig
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|ozoneConfig
operator|.
name|set
argument_list|(
literal|"ozone.scm.client.address"
argument_list|,
literal|"address"
argument_list|)
expr_stmt|;
name|ozoneConfig
operator|.
name|set
argument_list|(
literal|"ozone.scm.client.bind.host"
argument_list|,
literal|"host"
argument_list|)
expr_stmt|;
name|ozoneConfig
operator|.
name|setBoolean
argument_list|(
literal|"ozone.scm.client.enabled"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ozoneConfig
operator|.
name|setInt
argument_list|(
literal|"ozone.scm.client.port"
argument_list|,
literal|5555
argument_list|)
expr_stmt|;
name|ozoneConfig
operator|.
name|setTimeDuration
argument_list|(
literal|"ozone.scm.client.wait"
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|SimpleConfiguration
name|configuration
init|=
name|ozoneConfig
operator|.
name|getObject
argument_list|(
name|SimpleConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"host"
argument_list|,
name|configuration
operator|.
name|getBindHost
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"address"
argument_list|,
name|configuration
operator|.
name|getClientAddress
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|configuration
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5555
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|600
argument_list|,
name|configuration
operator|.
name|getWaitTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getConfigurationObjectWithDefault ()
specifier|public
name|void
name|getConfigurationObjectWithDefault
parameter_list|()
block|{
name|OzoneConfiguration
name|ozoneConfiguration
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|SimpleConfiguration
name|configuration
init|=
name|ozoneConfiguration
operator|.
name|getObject
argument_list|(
name|SimpleConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|configuration
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9878
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|appendProperty (BufferedWriter out, String name, String val)
specifier|private
name|void
name|appendProperty
parameter_list|(
name|BufferedWriter
name|out
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|appendProperty
argument_list|(
name|out
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|appendProperty (BufferedWriter out, String name, String val, boolean isFinal)
specifier|private
name|void
name|appendProperty
parameter_list|(
name|BufferedWriter
name|out
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|isFinal
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<property>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"<name>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"</name>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"<value>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"</value>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFinal
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<final>true</final>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
literal|"</property>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|appendPropertyByTag (BufferedWriter out, String name, String val, String tags)
specifier|private
name|void
name|appendPropertyByTag
parameter_list|(
name|BufferedWriter
name|out
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|String
name|tags
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|appendPropertyByTag
argument_list|(
name|out
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|,
name|tags
argument_list|)
expr_stmt|;
block|}
DECL|method|appendPropertyByTag (BufferedWriter out, String name, String val, boolean isFinal, String tag)
specifier|private
name|void
name|appendPropertyByTag
parameter_list|(
name|BufferedWriter
name|out
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|isFinal
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<property>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"<name>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"</name>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"<value>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"</value>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFinal
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<final>true</final>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
literal|"<tag>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"</tag>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"</property>\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

