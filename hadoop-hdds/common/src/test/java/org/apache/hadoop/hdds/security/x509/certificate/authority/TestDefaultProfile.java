begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.security.x509.certificate.authority
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|authority
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|exception
operator|.
name|SCMSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|SecurityConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|authority
operator|.
name|PKIProfiles
operator|.
name|DefaultProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificates
operator|.
name|utils
operator|.
name|CertificateSignRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|keys
operator|.
name|HDDSKeyGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|pkcs
operator|.
name|PKCSObjectIdentifiers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x500
operator|.
name|X500Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x500
operator|.
name|X500NameBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x500
operator|.
name|style
operator|.
name|BCStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|ExtendedKeyUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|Extension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|Extensions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|ExtensionsGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|GeneralName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|GeneralNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|KeyPurposeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|ContentSigner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|OperatorCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|jcajce
operator|.
name|JcaContentSignerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|pkcs
operator|.
name|PKCS10CertificationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|pkcs
operator|.
name|PKCS10CertificationRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|pkcs
operator|.
name|PKCSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|pkcs
operator|.
name|jcajce
operator|.
name|JcaPKCS10CertificationRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchProviderException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests for the default PKI Profile.  */
end_comment

begin_class
DECL|class|TestDefaultProfile
specifier|public
class|class
name|TestDefaultProfile
block|{
annotation|@
name|Rule
DECL|field|temporaryFolder
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
DECL|field|configuration
specifier|private
name|OzoneConfiguration
name|configuration
decl_stmt|;
DECL|field|securityConfig
specifier|private
name|SecurityConfig
name|securityConfig
decl_stmt|;
DECL|field|defaultProfile
specifier|private
name|DefaultProfile
name|defaultProfile
decl_stmt|;
DECL|field|testApprover
specifier|private
name|MockApprover
name|testApprover
decl_stmt|;
DECL|field|keyPair
specifier|private
name|KeyPair
name|keyPair
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|configuration
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|OZONE_METADATA_DIRS
argument_list|,
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|securityConfig
operator|=
operator|new
name|SecurityConfig
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|defaultProfile
operator|=
operator|new
name|DefaultProfile
argument_list|()
expr_stmt|;
name|testApprover
operator|=
operator|new
name|MockApprover
argument_list|(
name|defaultProfile
argument_list|,
name|securityConfig
argument_list|)
expr_stmt|;
name|keyPair
operator|=
operator|new
name|HDDSKeyGenerator
argument_list|(
name|securityConfig
argument_list|)
operator|.
name|generateKey
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests the General Names that we support. The default profile supports only    * two names right now.    */
annotation|@
name|Test
DECL|method|testisSupportedGeneralName ()
specifier|public
name|void
name|testisSupportedGeneralName
parameter_list|()
block|{
comment|// Positive tests
name|assertTrue
argument_list|(
name|defaultProfile
operator|.
name|isSupportedGeneralName
argument_list|(
name|GeneralName
operator|.
name|iPAddress
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|defaultProfile
operator|.
name|isSupportedGeneralName
argument_list|(
name|GeneralName
operator|.
name|dNSName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Negative Tests
name|assertFalse
argument_list|(
name|defaultProfile
operator|.
name|isSupportedGeneralName
argument_list|(
name|GeneralName
operator|.
name|directoryName
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|defaultProfile
operator|.
name|isSupportedGeneralName
argument_list|(
name|GeneralName
operator|.
name|rfc822Name
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|defaultProfile
operator|.
name|isSupportedGeneralName
argument_list|(
name|GeneralName
operator|.
name|otherName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test valid keys are validated correctly.    *    * @throws SCMSecurityException      - on Error.    * @throws PKCSException             - on Error.    * @throws OperatorCreationException - on Error.    */
annotation|@
name|Test
DECL|method|testVerifyCertificate ()
specifier|public
name|void
name|testVerifyCertificate
parameter_list|()
throws|throws
name|SCMSecurityException
throws|,
name|PKCSException
throws|,
name|OperatorCreationException
block|{
name|PKCS10CertificationRequest
name|csr
init|=
operator|new
name|CertificateSignRequest
operator|.
name|Builder
argument_list|()
operator|.
name|addDnsName
argument_list|(
literal|"hadoop.apache.org"
argument_list|)
operator|.
name|addIpAddress
argument_list|(
literal|"8.8.8.8"
argument_list|)
operator|.
name|setCA
argument_list|(
literal|false
argument_list|)
operator|.
name|setClusterID
argument_list|(
literal|"ClusterID"
argument_list|)
operator|.
name|setScmID
argument_list|(
literal|"SCMID"
argument_list|)
operator|.
name|setSubject
argument_list|(
literal|"Ozone Cluster"
argument_list|)
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
operator|.
name|setKey
argument_list|(
name|keyPair
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|testApprover
operator|.
name|verifyPkcs10Request
argument_list|(
name|csr
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test invalid keys fail in the validation.    *    * @throws SCMSecurityException      - on Error.    * @throws PKCSException             - on Error.    * @throws OperatorCreationException - on Error.    * @throws NoSuchProviderException   - on Error.    * @throws NoSuchAlgorithmException  - on Error.    */
annotation|@
name|Test
DECL|method|testVerifyCertificateInvalidKeys ()
specifier|public
name|void
name|testVerifyCertificateInvalidKeys
parameter_list|()
throws|throws
name|SCMSecurityException
throws|,
name|PKCSException
throws|,
name|OperatorCreationException
throws|,
name|NoSuchProviderException
throws|,
name|NoSuchAlgorithmException
block|{
name|KeyPair
name|newKeyPair
init|=
operator|new
name|HDDSKeyGenerator
argument_list|(
name|securityConfig
argument_list|)
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|KeyPair
name|wrongKey
init|=
operator|new
name|KeyPair
argument_list|(
name|keyPair
operator|.
name|getPublic
argument_list|()
argument_list|,
name|newKeyPair
operator|.
name|getPrivate
argument_list|()
argument_list|)
decl_stmt|;
name|PKCS10CertificationRequest
name|csr
init|=
operator|new
name|CertificateSignRequest
operator|.
name|Builder
argument_list|()
operator|.
name|addDnsName
argument_list|(
literal|"hadoop.apache.org"
argument_list|)
operator|.
name|addIpAddress
argument_list|(
literal|"8.8.8.8"
argument_list|)
operator|.
name|setCA
argument_list|(
literal|false
argument_list|)
operator|.
name|setClusterID
argument_list|(
literal|"ClusterID"
argument_list|)
operator|.
name|setScmID
argument_list|(
literal|"SCMID"
argument_list|)
operator|.
name|setSubject
argument_list|(
literal|"Ozone Cluster"
argument_list|)
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
operator|.
name|setKey
argument_list|(
name|wrongKey
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Signature verification should fail here, since the public/private key
comment|// does not match.
name|assertFalse
argument_list|(
name|testApprover
operator|.
name|verifyPkcs10Request
argument_list|(
name|csr
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that normal valid extensions work with the default profile.    *    * @throws SCMSecurityException      - on Error.    * @throws PKCSException             - on Error.    * @throws OperatorCreationException - on Error.    */
annotation|@
name|Test
DECL|method|testExtensions ()
specifier|public
name|void
name|testExtensions
parameter_list|()
throws|throws
name|SCMSecurityException
block|{
name|PKCS10CertificationRequest
name|csr
init|=
operator|new
name|CertificateSignRequest
operator|.
name|Builder
argument_list|()
operator|.
name|addDnsName
argument_list|(
literal|"hadoop.apache.org"
argument_list|)
operator|.
name|addIpAddress
argument_list|(
literal|"192.10.234.6"
argument_list|)
operator|.
name|setCA
argument_list|(
literal|false
argument_list|)
operator|.
name|setClusterID
argument_list|(
literal|"ClusterID"
argument_list|)
operator|.
name|setScmID
argument_list|(
literal|"SCMID"
argument_list|)
operator|.
name|setSubject
argument_list|(
literal|"Ozone Cluster"
argument_list|)
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
operator|.
name|setKey
argument_list|(
name|keyPair
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|testApprover
operator|.
name|verfiyExtensions
argument_list|(
name|csr
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that  invalid extensions cause a failure in validation. We will fail    * if CA extension is enabled.    *    * @throws SCMSecurityException - on Error.    */
annotation|@
name|Test
DECL|method|testInvalidExtensionsWithCA ()
specifier|public
name|void
name|testInvalidExtensionsWithCA
parameter_list|()
throws|throws
name|SCMSecurityException
block|{
name|PKCS10CertificationRequest
name|csr
init|=
operator|new
name|CertificateSignRequest
operator|.
name|Builder
argument_list|()
operator|.
name|addDnsName
argument_list|(
literal|"hadoop.apache.org"
argument_list|)
operator|.
name|addIpAddress
argument_list|(
literal|"192.10.234.6"
argument_list|)
operator|.
name|setCA
argument_list|(
literal|true
argument_list|)
operator|.
name|setClusterID
argument_list|(
literal|"ClusterID"
argument_list|)
operator|.
name|setScmID
argument_list|(
literal|"SCMID"
argument_list|)
operator|.
name|setSubject
argument_list|(
literal|"Ozone Cluster"
argument_list|)
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
operator|.
name|setKey
argument_list|(
name|keyPair
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|testApprover
operator|.
name|verfiyExtensions
argument_list|(
name|csr
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that  invalid extensions cause a failure in validation. We will fail    * if rfc222 type names are added, we also add the extension as both    * critical and non-critical fashion to verify that the we catch both cases.    *    * @throws SCMSecurityException - on Error.    */
annotation|@
name|Test
DECL|method|testInvalidExtensionsWithEmail ()
specifier|public
name|void
name|testInvalidExtensionsWithEmail
parameter_list|()
throws|throws
name|IOException
throws|,
name|OperatorCreationException
block|{
name|Extensions
name|emailExtension
init|=
name|getSANExtension
argument_list|(
name|GeneralName
operator|.
name|rfc822Name
argument_list|,
literal|"bilbo@apache.org"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|PKCS10CertificationRequest
name|csr
init|=
name|getInvalidCSR
argument_list|(
name|keyPair
argument_list|,
name|emailExtension
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|testApprover
operator|.
name|verfiyExtensions
argument_list|(
name|csr
argument_list|)
argument_list|)
expr_stmt|;
name|emailExtension
operator|=
name|getSANExtension
argument_list|(
name|GeneralName
operator|.
name|rfc822Name
argument_list|,
literal|"bilbo"
operator|+
literal|"@apache.org"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|csr
operator|=
name|getInvalidCSR
argument_list|(
name|keyPair
argument_list|,
name|emailExtension
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testApprover
operator|.
name|verfiyExtensions
argument_list|(
name|csr
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Same test for URI.    * @throws IOException - On Error.    * @throws OperatorCreationException- on Error.    */
annotation|@
name|Test
DECL|method|testInvalidExtensionsWithURI ()
specifier|public
name|void
name|testInvalidExtensionsWithURI
parameter_list|()
throws|throws
name|IOException
throws|,
name|OperatorCreationException
block|{
name|Extensions
name|oExtension
init|=
name|getSANExtension
argument_list|(
name|GeneralName
operator|.
name|uniformResourceIdentifier
argument_list|,
literal|"s3g.ozone.org"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|PKCS10CertificationRequest
name|csr
init|=
name|getInvalidCSR
argument_list|(
name|keyPair
argument_list|,
name|oExtension
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|testApprover
operator|.
name|verfiyExtensions
argument_list|(
name|csr
argument_list|)
argument_list|)
expr_stmt|;
name|oExtension
operator|=
name|getSANExtension
argument_list|(
name|GeneralName
operator|.
name|uniformResourceIdentifier
argument_list|,
literal|"s3g.ozone.org"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|csr
operator|=
name|getInvalidCSR
argument_list|(
name|keyPair
argument_list|,
name|oExtension
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testApprover
operator|.
name|verfiyExtensions
argument_list|(
name|csr
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that if DNS is marked critical our PKI profile will reject it.    * @throws IOException - on Error.    * @throws OperatorCreationException - on Error.    */
annotation|@
name|Test
DECL|method|testInvalidExtensionsWithCriticalDNS ()
specifier|public
name|void
name|testInvalidExtensionsWithCriticalDNS
parameter_list|()
throws|throws
name|IOException
throws|,
name|OperatorCreationException
block|{
name|Extensions
name|dnsExtension
init|=
name|getSANExtension
argument_list|(
name|GeneralName
operator|.
name|dNSName
argument_list|,
literal|"ozone.hadoop.org"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PKCS10CertificationRequest
name|csr
init|=
name|getInvalidCSR
argument_list|(
name|keyPair
argument_list|,
name|dnsExtension
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|testApprover
operator|.
name|verfiyExtensions
argument_list|(
name|csr
argument_list|)
argument_list|)
expr_stmt|;
comment|// This tests should pass, hence the assertTrue
name|dnsExtension
operator|=
name|getSANExtension
argument_list|(
name|GeneralName
operator|.
name|dNSName
argument_list|,
literal|"ozone.hadoop.org"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|csr
operator|=
name|getInvalidCSR
argument_list|(
name|keyPair
argument_list|,
name|dnsExtension
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testApprover
operator|.
name|verfiyExtensions
argument_list|(
name|csr
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that valid Extended Key usage works as expected.    * @throws IOException - on Error.    * @throws OperatorCreationException - on Error.    */
annotation|@
name|Test
DECL|method|testValidExtendedKeyUsage ()
specifier|public
name|void
name|testValidExtendedKeyUsage
parameter_list|()
throws|throws
name|IOException
throws|,
name|OperatorCreationException
block|{
name|Extensions
name|extendedExtension
init|=
name|getKeyUsageExtension
argument_list|(
name|KeyPurposeId
operator|.
name|id_kp_clientAuth
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|PKCS10CertificationRequest
name|csr
init|=
name|getInvalidCSR
argument_list|(
name|keyPair
argument_list|,
name|extendedExtension
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|testApprover
operator|.
name|verfiyExtensions
argument_list|(
name|csr
argument_list|)
argument_list|)
expr_stmt|;
name|extendedExtension
operator|=
name|getKeyUsageExtension
argument_list|(
name|KeyPurposeId
operator|.
name|id_kp_serverAuth
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|csr
operator|=
name|getInvalidCSR
argument_list|(
name|keyPair
argument_list|,
name|extendedExtension
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testApprover
operator|.
name|verfiyExtensions
argument_list|(
name|csr
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that Invalid Extended Key usage works as expected, that is rejected.    * @throws IOException - on Error.    * @throws OperatorCreationException - on Error.    */
annotation|@
name|Test
DECL|method|testInValidExtendedKeyUsage ()
specifier|public
name|void
name|testInValidExtendedKeyUsage
parameter_list|()
throws|throws
name|IOException
throws|,
name|OperatorCreationException
block|{
name|Extensions
name|extendedExtension
init|=
name|getKeyUsageExtension
argument_list|(
name|KeyPurposeId
operator|.
name|id_kp_clientAuth
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PKCS10CertificationRequest
name|csr
init|=
name|getInvalidCSR
argument_list|(
name|keyPair
argument_list|,
name|extendedExtension
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|testApprover
operator|.
name|verfiyExtensions
argument_list|(
name|csr
argument_list|)
argument_list|)
expr_stmt|;
name|extendedExtension
operator|=
name|getKeyUsageExtension
argument_list|(
name|KeyPurposeId
operator|.
name|id_kp_OCSPSigning
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|csr
operator|=
name|getInvalidCSR
argument_list|(
name|keyPair
argument_list|,
name|extendedExtension
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testApprover
operator|.
name|verfiyExtensions
argument_list|(
name|csr
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Generates an CSR with the extension specified.    * This function is used to get an Invalid CSR and test that PKI profile    * rejects these invalid extensions, Hence the function name, by itself it    * is a well formed CSR, but our PKI profile will treat it as invalid CSR.    *    * @param kPair - Key Pair.    * @return CSR  - PKCS10CertificationRequest    * @throws OperatorCreationException - on Error.    */
DECL|method|getInvalidCSR (KeyPair kPair, Extensions extensions)
specifier|private
name|PKCS10CertificationRequest
name|getInvalidCSR
parameter_list|(
name|KeyPair
name|kPair
parameter_list|,
name|Extensions
name|extensions
parameter_list|)
throws|throws
name|OperatorCreationException
block|{
name|X500NameBuilder
name|namebuilder
init|=
operator|new
name|X500NameBuilder
argument_list|(
name|X500Name
operator|.
name|getDefaultStyle
argument_list|()
argument_list|)
decl_stmt|;
name|namebuilder
operator|.
name|addRDN
argument_list|(
name|BCStyle
operator|.
name|CN
argument_list|,
literal|"invalidCert"
argument_list|)
expr_stmt|;
name|PKCS10CertificationRequestBuilder
name|p10Builder
init|=
operator|new
name|JcaPKCS10CertificationRequestBuilder
argument_list|(
name|namebuilder
operator|.
name|build
argument_list|()
argument_list|,
name|keyPair
operator|.
name|getPublic
argument_list|()
argument_list|)
decl_stmt|;
name|p10Builder
operator|.
name|addAttribute
argument_list|(
name|PKCSObjectIdentifiers
operator|.
name|pkcs_9_at_extensionRequest
argument_list|,
name|extensions
argument_list|)
expr_stmt|;
name|JcaContentSignerBuilder
name|csBuilder
init|=
operator|new
name|JcaContentSignerBuilder
argument_list|(
name|this
operator|.
name|securityConfig
operator|.
name|getSignatureAlgo
argument_list|()
argument_list|)
decl_stmt|;
name|ContentSigner
name|signer
init|=
name|csBuilder
operator|.
name|build
argument_list|(
name|keyPair
operator|.
name|getPrivate
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|p10Builder
operator|.
name|build
argument_list|(
name|signer
argument_list|)
return|;
block|}
comment|/**    * Generate an Extension with rfc822Name.    * @param extensionCode - Extension Code.    * @param value  - email to be added to the certificate    * @param critical - boolean value that marks the extension as critical.    * @return - An Extension list with email address.    * @throws IOException    */
DECL|method|getSANExtension (int extensionCode, String value, boolean critical)
specifier|private
name|Extensions
name|getSANExtension
parameter_list|(
name|int
name|extensionCode
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|critical
parameter_list|)
throws|throws
name|IOException
block|{
name|GeneralName
name|extn
init|=
operator|new
name|GeneralName
argument_list|(
name|extensionCode
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|ExtensionsGenerator
name|extensionsGenerator
init|=
operator|new
name|ExtensionsGenerator
argument_list|()
decl_stmt|;
name|extensionsGenerator
operator|.
name|addExtension
argument_list|(
name|Extension
operator|.
name|subjectAlternativeName
argument_list|,
name|critical
argument_list|,
operator|new
name|GeneralNames
argument_list|(
name|extn
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|extensionsGenerator
operator|.
name|generate
argument_list|()
return|;
block|}
comment|/**    * Returns a extension with Extended Key usage.    * @param purposeId - Usage that we want to encode.    * @param critical -  makes the extension critical.    * @return Extensions.    */
DECL|method|getKeyUsageExtension (KeyPurposeId purposeId, boolean critical)
specifier|private
name|Extensions
name|getKeyUsageExtension
parameter_list|(
name|KeyPurposeId
name|purposeId
parameter_list|,
name|boolean
name|critical
parameter_list|)
throws|throws
name|IOException
block|{
name|ExtendedKeyUsage
name|extendedKeyUsage
init|=
operator|new
name|ExtendedKeyUsage
argument_list|(
name|purposeId
argument_list|)
decl_stmt|;
name|ExtensionsGenerator
name|extensionsGenerator
init|=
operator|new
name|ExtensionsGenerator
argument_list|()
decl_stmt|;
name|extensionsGenerator
operator|.
name|addExtension
argument_list|(
name|Extension
operator|.
name|extendedKeyUsage
argument_list|,
name|critical
argument_list|,
name|extendedKeyUsage
argument_list|)
expr_stmt|;
return|return
name|extensionsGenerator
operator|.
name|generate
argument_list|()
return|;
block|}
block|}
end_class

end_unit

