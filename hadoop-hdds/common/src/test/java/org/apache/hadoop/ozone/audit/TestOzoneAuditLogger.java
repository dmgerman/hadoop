begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.audit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test Ozone Audit Logger.  */
end_comment

begin_class
DECL|class|TestOzoneAuditLogger
specifier|public
class|class
name|TestOzoneAuditLogger
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestOzoneAuditLogger
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|AUDIT
specifier|private
specifier|static
name|AuditLogger
name|AUDIT
init|=
operator|new
name|AuditLogger
argument_list|(
name|AuditLoggerType
operator|.
name|OMLOGGER
argument_list|)
decl_stmt|;
DECL|field|auditableObj
specifier|public
name|DummyEntity
name|auditableObj
init|=
operator|new
name|DummyEntity
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"log4j.configurationFile"
argument_list|,
literal|"log4j2.properties"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"audit.log"
argument_list|)
decl_stmt|;
if|if
condition|(
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|" has been deleted as all tests have completed."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"audit.log could not be deleted."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ensures WriteSuccess events are logged @ INFO and above.    */
annotation|@
name|Test
DECL|method|logInfoWriteSuccess ()
specifier|public
name|void
name|logInfoWriteSuccess
parameter_list|()
throws|throws
name|IOException
block|{
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|DummyAction
operator|.
name|CREATE_VOLUME
argument_list|,
name|auditableObj
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"[INFO ] OMAudit - CREATE_VOLUME [ key1=\"value1\" "
operator|+
literal|"key2=\"value2\"] SUCCESS"
decl_stmt|;
name|verifyLog
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to verify default log level is INFO    */
annotation|@
name|Test
DECL|method|verifyDefaultLogLevel ()
specifier|public
name|void
name|verifyDefaultLogLevel
parameter_list|()
throws|throws
name|IOException
block|{
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|DummyAction
operator|.
name|CREATE_VOLUME
argument_list|,
name|auditableObj
operator|.
name|toAuditMap
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"[INFO ] OMAudit - CREATE_VOLUME [ key1=\"value1\" "
operator|+
literal|"key2=\"value2\"] SUCCESS"
decl_stmt|;
name|verifyLog
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to verify WriteFailure events are logged as ERROR.    */
annotation|@
name|Test
DECL|method|logErrorWriteFailure ()
specifier|public
name|void
name|logErrorWriteFailure
parameter_list|()
throws|throws
name|IOException
block|{
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|DummyAction
operator|.
name|CREATE_VOLUME
argument_list|,
name|auditableObj
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"[ERROR] OMAudit - CREATE_VOLUME [ key1=\"value1\" "
operator|+
literal|"key2=\"value2\"] FAILURE"
decl_stmt|;
name|verifyLog
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to verify no READ event is logged.    */
annotation|@
name|Test
DECL|method|notLogReadEvents ()
specifier|public
name|void
name|notLogReadEvents
parameter_list|()
throws|throws
name|IOException
block|{
name|AUDIT
operator|.
name|logReadSuccess
argument_list|(
name|DummyAction
operator|.
name|READ_VOLUME
argument_list|,
name|auditableObj
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
name|AUDIT
operator|.
name|logReadFailure
argument_list|(
name|DummyAction
operator|.
name|READ_VOLUME
argument_list|,
name|auditableObj
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
name|AUDIT
operator|.
name|logReadFailure
argument_list|(
name|DummyAction
operator|.
name|READ_VOLUME
argument_list|,
name|auditableObj
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
name|AUDIT
operator|.
name|logReadFailure
argument_list|(
name|DummyAction
operator|.
name|READ_VOLUME
argument_list|,
name|auditableObj
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|Level
operator|.
name|ERROR
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyLog
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to ensure DEBUG level messages are not logged when INFO is enabled.    */
annotation|@
name|Test
DECL|method|notLogDebugEvents ()
specifier|public
name|void
name|notLogDebugEvents
parameter_list|()
throws|throws
name|IOException
block|{
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|DummyAction
operator|.
name|CREATE_VOLUME
argument_list|,
name|auditableObj
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|AUDIT
operator|.
name|logReadSuccess
argument_list|(
name|DummyAction
operator|.
name|READ_VOLUME
argument_list|,
name|auditableObj
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|verifyLog
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyLog (String expected)
specifier|public
name|void
name|verifyLog
parameter_list|(
name|String
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"audit.log"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|FileUtils
operator|.
name|readLines
argument_list|(
name|file
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
comment|// When no log entry is expected, the log file must be empty
name|assertTrue
argument_list|(
name|lines
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// When log entry is expected, the log file will contain one line and
comment|// that must be equal to the expected string
name|assertTrue
argument_list|(
name|expected
operator|.
name|equalsIgnoreCase
argument_list|(
name|lines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//empty the file
name|lines
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|writeLines
argument_list|(
name|file
argument_list|,
name|lines
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

