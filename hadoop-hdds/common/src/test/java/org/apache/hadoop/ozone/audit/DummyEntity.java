begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.audit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * DummyEntity that implements Auditable for test purpose.  */
end_comment

begin_class
DECL|class|DummyEntity
specifier|public
class|class
name|DummyEntity
implements|implements
name|Auditable
block|{
DECL|field|key1
specifier|private
name|String
name|key1
decl_stmt|;
DECL|field|key2
specifier|private
name|String
name|key2
decl_stmt|;
DECL|method|DummyEntity ()
specifier|public
name|DummyEntity
parameter_list|()
block|{
name|this
operator|.
name|key1
operator|=
literal|"value1"
expr_stmt|;
name|this
operator|.
name|key2
operator|=
literal|"value2"
expr_stmt|;
block|}
DECL|method|getKey1 ()
specifier|public
name|String
name|getKey1
parameter_list|()
block|{
return|return
name|key1
return|;
block|}
DECL|method|setKey1 (String key1)
specifier|public
name|void
name|setKey1
parameter_list|(
name|String
name|key1
parameter_list|)
block|{
name|this
operator|.
name|key1
operator|=
name|key1
expr_stmt|;
block|}
DECL|method|getKey2 ()
specifier|public
name|String
name|getKey2
parameter_list|()
block|{
return|return
name|key2
return|;
block|}
DECL|method|setKey2 (String key2)
specifier|public
name|void
name|setKey2
parameter_list|(
name|String
name|key2
parameter_list|)
block|{
name|this
operator|.
name|key2
operator|=
name|key2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toAuditMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toAuditMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
name|this
operator|.
name|key1
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
name|this
operator|.
name|key2
argument_list|)
expr_stmt|;
return|return
name|auditMap
return|;
block|}
block|}
end_class

end_unit

