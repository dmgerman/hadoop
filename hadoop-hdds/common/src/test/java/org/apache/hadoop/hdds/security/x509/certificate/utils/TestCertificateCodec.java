begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.security.x509.certificate.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|exception
operator|.
name|SCMSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificates
operator|.
name|utils
operator|.
name|SelfSignedCertificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|keys
operator|.
name|HDDSKeyGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|X509CertificateHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchProviderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests the Certificate codecs.  */
end_comment

begin_class
DECL|class|TestCertificateCodec
specifier|public
class|class
name|TestCertificateCodec
block|{
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|temporaryFolder
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|OZONE_METADATA_DIRS
argument_list|,
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test converts a X509Certificate Holder object to a PEM encoded String,    * then creates a new X509Certificate object to verify that we are able to    * serialize and deserialize correctly. we follow up with converting these    * objects to standard JCA x509Certificate objects.    *    * @throws NoSuchProviderException  - on Error.    * @throws NoSuchAlgorithmException - on Error.    * @throws IOException              - on Error.    * @throws SCMSecurityException     - on Error.    * @throws CertificateException     - on Error.    */
annotation|@
name|Test
DECL|method|testGetPEMEncodedString ()
specifier|public
name|void
name|testGetPEMEncodedString
parameter_list|()
throws|throws
name|NoSuchProviderException
throws|,
name|NoSuchAlgorithmException
throws|,
name|IOException
throws|,
name|SCMSecurityException
throws|,
name|CertificateException
block|{
name|HDDSKeyGenerator
name|keyGenerator
init|=
operator|new
name|HDDSKeyGenerator
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|X509CertificateHolder
name|cert
init|=
name|SelfSignedCertificate
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSubject
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|setClusterID
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|setScmID
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|setBeginDate
argument_list|(
name|LocalDate
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|setEndDate
argument_list|(
name|LocalDate
operator|.
name|now
argument_list|()
operator|.
name|plus
argument_list|(
literal|1
argument_list|,
name|ChronoUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
operator|.
name|setConfiguration
argument_list|(
name|keyGenerator
operator|.
name|getSecurityConfig
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|setKey
argument_list|(
name|keyGenerator
operator|.
name|generateKey
argument_list|()
argument_list|)
operator|.
name|makeCA
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|CertificateCodec
name|codec
init|=
operator|new
name|CertificateCodec
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|pemString
init|=
name|codec
operator|.
name|getPEMEncodedString
argument_list|(
name|cert
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pemString
operator|.
name|startsWith
argument_list|(
name|CertificateCodec
operator|.
name|BEGIN_CERT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pemString
operator|.
name|endsWith
argument_list|(
name|CertificateCodec
operator|.
name|END_CERT
operator|+
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Read back the certificate and verify that all the comparisons pass.
name|X509CertificateHolder
name|newCert
init|=
name|codec
operator|.
name|getCertificateHolder
argument_list|(
name|codec
operator|.
name|getX509Certificate
argument_list|(
name|pemString
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|cert
argument_list|,
name|newCert
argument_list|)
expr_stmt|;
comment|// Just make sure we can decode both these classes to Java Std. lIb classes.
name|X509Certificate
name|firstCert
init|=
name|CertificateCodec
operator|.
name|getX509Certificate
argument_list|(
name|cert
argument_list|)
decl_stmt|;
name|X509Certificate
name|secondCert
init|=
name|CertificateCodec
operator|.
name|getX509Certificate
argument_list|(
name|newCert
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|firstCert
argument_list|,
name|secondCert
argument_list|)
expr_stmt|;
block|}
comment|/**    * tests writing and reading certificates in PEM encoded form.    *    * @throws NoSuchProviderException  - on Error.    * @throws NoSuchAlgorithmException - on Error.    * @throws IOException              - on Error.    * @throws SCMSecurityException     - on Error.    * @throws CertificateException     - on Error.    */
annotation|@
name|Test
DECL|method|testwriteCertificate ()
specifier|public
name|void
name|testwriteCertificate
parameter_list|()
throws|throws
name|NoSuchProviderException
throws|,
name|NoSuchAlgorithmException
throws|,
name|IOException
throws|,
name|SCMSecurityException
throws|,
name|CertificateException
block|{
name|HDDSKeyGenerator
name|keyGenerator
init|=
operator|new
name|HDDSKeyGenerator
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|X509CertificateHolder
name|cert
init|=
name|SelfSignedCertificate
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSubject
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|setClusterID
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|setScmID
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|setBeginDate
argument_list|(
name|LocalDate
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|setEndDate
argument_list|(
name|LocalDate
operator|.
name|now
argument_list|()
operator|.
name|plus
argument_list|(
literal|1
argument_list|,
name|ChronoUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
operator|.
name|setConfiguration
argument_list|(
name|keyGenerator
operator|.
name|getSecurityConfig
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|setKey
argument_list|(
name|keyGenerator
operator|.
name|generateKey
argument_list|()
argument_list|)
operator|.
name|makeCA
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|CertificateCodec
name|codec
init|=
operator|new
name|CertificateCodec
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|pemString
init|=
name|codec
operator|.
name|getPEMEncodedString
argument_list|(
name|cert
argument_list|)
decl_stmt|;
name|File
name|basePath
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|basePath
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|basePath
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|codec
operator|.
name|writeCertificate
argument_list|(
name|basePath
operator|.
name|toPath
argument_list|()
argument_list|,
literal|"pemcertificate.crt"
argument_list|,
name|pemString
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|X509CertificateHolder
name|certHolder
init|=
name|codec
operator|.
name|readCertificate
argument_list|(
name|basePath
operator|.
name|toPath
argument_list|()
argument_list|,
literal|"pemcertificate.crt"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|certHolder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cert
operator|.
name|getSerialNumber
argument_list|()
argument_list|,
name|certHolder
operator|.
name|getSerialNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests reading and writing certificates in DER form.    *    * @throws IOException              - on Error.    * @throws SCMSecurityException     - on Error.    * @throws CertificateException     - on Error.    * @throws NoSuchProviderException  - on Error.    * @throws NoSuchAlgorithmException - on Error.    */
annotation|@
name|Test
DECL|method|testwriteCertificateDefault ()
specifier|public
name|void
name|testwriteCertificateDefault
parameter_list|()
throws|throws
name|IOException
throws|,
name|SCMSecurityException
throws|,
name|CertificateException
throws|,
name|NoSuchProviderException
throws|,
name|NoSuchAlgorithmException
block|{
name|HDDSKeyGenerator
name|keyGenerator
init|=
operator|new
name|HDDSKeyGenerator
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|X509CertificateHolder
name|cert
init|=
name|SelfSignedCertificate
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSubject
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|setClusterID
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|setScmID
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|setBeginDate
argument_list|(
name|LocalDate
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|setEndDate
argument_list|(
name|LocalDate
operator|.
name|now
argument_list|()
operator|.
name|plus
argument_list|(
literal|1
argument_list|,
name|ChronoUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
operator|.
name|setConfiguration
argument_list|(
name|keyGenerator
operator|.
name|getSecurityConfig
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|setKey
argument_list|(
name|keyGenerator
operator|.
name|generateKey
argument_list|()
argument_list|)
operator|.
name|makeCA
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|CertificateCodec
name|codec
init|=
operator|new
name|CertificateCodec
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|codec
operator|.
name|writeCertificate
argument_list|(
name|cert
argument_list|)
expr_stmt|;
name|X509CertificateHolder
name|certHolder
init|=
name|codec
operator|.
name|readCertificate
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|certHolder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cert
operator|.
name|getSerialNumber
argument_list|()
argument_list|,
name|certHolder
operator|.
name|getSerialNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests writing to non-default certificate file name.    *    * @throws IOException              - on Error.    * @throws SCMSecurityException     - on Error.    * @throws NoSuchProviderException  - on Error.    * @throws NoSuchAlgorithmException - on Error.    * @throws CertificateException     - on Error.    */
annotation|@
name|Test
DECL|method|writeCertificate2 ()
specifier|public
name|void
name|writeCertificate2
parameter_list|()
throws|throws
name|IOException
throws|,
name|SCMSecurityException
throws|,
name|NoSuchProviderException
throws|,
name|NoSuchAlgorithmException
throws|,
name|CertificateException
block|{
name|HDDSKeyGenerator
name|keyGenerator
init|=
operator|new
name|HDDSKeyGenerator
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|X509CertificateHolder
name|cert
init|=
name|SelfSignedCertificate
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSubject
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|setClusterID
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|setScmID
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|setBeginDate
argument_list|(
name|LocalDate
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|setEndDate
argument_list|(
name|LocalDate
operator|.
name|now
argument_list|()
operator|.
name|plus
argument_list|(
literal|1
argument_list|,
name|ChronoUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
operator|.
name|setConfiguration
argument_list|(
name|keyGenerator
operator|.
name|getSecurityConfig
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|setKey
argument_list|(
name|keyGenerator
operator|.
name|generateKey
argument_list|()
argument_list|)
operator|.
name|makeCA
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|CertificateCodec
name|codec
init|=
operator|new
name|CertificateCodec
argument_list|(
name|keyGenerator
operator|.
name|getSecurityConfig
argument_list|()
argument_list|,
literal|"ca"
argument_list|)
decl_stmt|;
name|codec
operator|.
name|writeCertificate
argument_list|(
name|cert
argument_list|,
literal|"newcert.crt"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Rewrite with force support
name|codec
operator|.
name|writeCertificate
argument_list|(
name|cert
argument_list|,
literal|"newcert.crt"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|X509CertificateHolder
name|x509CertificateHolder
init|=
name|codec
operator|.
name|readCertificate
argument_list|(
name|codec
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|"newcert.crt"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|x509CertificateHolder
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

