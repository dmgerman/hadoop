begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|SetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|statemachine
operator|.
name|InvalidStateTransitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|statemachine
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|TestStateMachine
operator|.
name|STATES
operator|.
name|CLEANUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|TestStateMachine
operator|.
name|STATES
operator|.
name|CLOSED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|TestStateMachine
operator|.
name|STATES
operator|.
name|CREATING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|TestStateMachine
operator|.
name|STATES
operator|.
name|FINAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|TestStateMachine
operator|.
name|STATES
operator|.
name|INIT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|TestStateMachine
operator|.
name|STATES
operator|.
name|OPERATIONAL
import|;
end_import

begin_comment
comment|/**  * This class is to test ozone common state machine.  */
end_comment

begin_class
DECL|class|TestStateMachine
specifier|public
class|class
name|TestStateMachine
block|{
comment|/**    * STATES used by the test state machine.    */
DECL|enum|STATES
DECL|enumConstant|INIT
DECL|enumConstant|CREATING
DECL|enumConstant|OPERATIONAL
DECL|enumConstant|CLOSED
DECL|enumConstant|CLEANUP
DECL|enumConstant|FINAL
specifier|public
enum|enum
name|STATES
block|{
name|INIT
block|,
name|CREATING
block|,
name|OPERATIONAL
block|,
name|CLOSED
block|,
name|CLEANUP
block|,
name|FINAL
block|}
empty_stmt|;
comment|/**    * EVENTS used by the test state machine.    */
DECL|enum|EVENTS
DECL|enumConstant|ALLOCATE
DECL|enumConstant|CREATE
DECL|enumConstant|UPDATE
DECL|enumConstant|CLOSE
DECL|enumConstant|DELETE
DECL|enumConstant|TIMEOUT
specifier|public
enum|enum
name|EVENTS
block|{
name|ALLOCATE
block|,
name|CREATE
block|,
name|UPDATE
block|,
name|CLOSE
block|,
name|DELETE
block|,
name|TIMEOUT
block|}
empty_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testStateMachineStates ()
specifier|public
name|void
name|testStateMachineStates
parameter_list|()
throws|throws
name|InvalidStateTransitionException
block|{
name|Set
argument_list|<
name|STATES
argument_list|>
name|finals
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|finals
operator|.
name|add
argument_list|(
name|FINAL
argument_list|)
expr_stmt|;
name|StateMachine
argument_list|<
name|STATES
argument_list|,
name|EVENTS
argument_list|>
name|stateMachine
init|=
operator|new
name|StateMachine
argument_list|<>
argument_list|(
name|INIT
argument_list|,
name|finals
argument_list|)
decl_stmt|;
name|stateMachine
operator|.
name|addTransition
argument_list|(
name|INIT
argument_list|,
name|CREATING
argument_list|,
name|EVENTS
operator|.
name|ALLOCATE
argument_list|)
expr_stmt|;
name|stateMachine
operator|.
name|addTransition
argument_list|(
name|CREATING
argument_list|,
name|OPERATIONAL
argument_list|,
name|EVENTS
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|stateMachine
operator|.
name|addTransition
argument_list|(
name|OPERATIONAL
argument_list|,
name|OPERATIONAL
argument_list|,
name|EVENTS
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|stateMachine
operator|.
name|addTransition
argument_list|(
name|OPERATIONAL
argument_list|,
name|CLEANUP
argument_list|,
name|EVENTS
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|stateMachine
operator|.
name|addTransition
argument_list|(
name|OPERATIONAL
argument_list|,
name|CLOSED
argument_list|,
name|EVENTS
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
name|stateMachine
operator|.
name|addTransition
argument_list|(
name|CREATING
argument_list|,
name|CLEANUP
argument_list|,
name|EVENTS
operator|.
name|TIMEOUT
argument_list|)
expr_stmt|;
comment|// Initial and Final states
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Initial State"
argument_list|,
name|INIT
argument_list|,
name|stateMachine
operator|.
name|getInitialState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Final States"
argument_list|,
name|SetUtils
operator|.
name|isEqualSet
argument_list|(
name|finals
argument_list|,
name|stateMachine
operator|.
name|getFinalStates
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Valid state transitions
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"STATE should be OPERATIONAL after being created"
argument_list|,
name|OPERATIONAL
argument_list|,
name|stateMachine
operator|.
name|getNextState
argument_list|(
name|CREATING
argument_list|,
name|EVENTS
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"STATE should be OPERATIONAL after being updated"
argument_list|,
name|OPERATIONAL
argument_list|,
name|stateMachine
operator|.
name|getNextState
argument_list|(
name|OPERATIONAL
argument_list|,
name|EVENTS
operator|.
name|UPDATE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"STATE should be CLEANUP after being deleted"
argument_list|,
name|CLEANUP
argument_list|,
name|stateMachine
operator|.
name|getNextState
argument_list|(
name|OPERATIONAL
argument_list|,
name|EVENTS
operator|.
name|DELETE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"STATE should be CLEANUP after being timeout"
argument_list|,
name|CLEANUP
argument_list|,
name|stateMachine
operator|.
name|getNextState
argument_list|(
name|CREATING
argument_list|,
name|EVENTS
operator|.
name|TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"STATE should be CLOSED after being closed"
argument_list|,
name|CLOSED
argument_list|,
name|stateMachine
operator|.
name|getNextState
argument_list|(
name|OPERATIONAL
argument_list|,
name|EVENTS
operator|.
name|CLOSE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Negative cases: invalid transition
name|expectException
argument_list|()
expr_stmt|;
name|stateMachine
operator|.
name|getNextState
argument_list|(
name|OPERATIONAL
argument_list|,
name|EVENTS
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|expectException
argument_list|()
expr_stmt|;
name|stateMachine
operator|.
name|getNextState
argument_list|(
name|CREATING
argument_list|,
name|EVENTS
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
comment|/**    * We expect an InvalidStateTransitionException.    */
DECL|method|expectException ()
specifier|private
name|void
name|expectException
parameter_list|()
block|{
name|exception
operator|.
name|expect
argument_list|(
name|InvalidStateTransitionException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Invalid event"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

