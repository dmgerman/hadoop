begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.hadoop.hdds.security.x509.certificates
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificates
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|SecurityConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|exceptions
operator|.
name|SCMSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|keys
operator|.
name|HDDSKeyGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|keys
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|ASN1Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|Extension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|Extensions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|SubjectPublicKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|ContentVerifierProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|OperatorCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|jcajce
operator|.
name|JcaContentVerifierProviderBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|pkcs
operator|.
name|PKCS10CertificationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|pkcs
operator|.
name|PKCSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchProviderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_DIRS
import|;
end_import

begin_class
DECL|class|TestCertificateSignRequest
specifier|public
class|class
name|TestCertificateSignRequest
block|{
DECL|field|securityConfig
specifier|private
name|SecurityConfig
name|securityConfig
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|temporaryFolder
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|OZONE_METADATA_DIRS
argument_list|,
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|securityConfig
operator|=
operator|new
name|SecurityConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateCSR ()
specifier|public
name|void
name|testGenerateCSR
parameter_list|()
throws|throws
name|NoSuchProviderException
throws|,
name|NoSuchAlgorithmException
throws|,
name|SCMSecurityException
throws|,
name|OperatorCreationException
throws|,
name|PKCSException
block|{
name|String
name|clusterID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|scmID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|subject
init|=
literal|"DN001"
decl_stmt|;
name|HDDSKeyGenerator
name|keyGen
init|=
operator|new
name|HDDSKeyGenerator
argument_list|(
name|securityConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|KeyPair
name|keyPair
init|=
name|keyGen
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|CertificateSignRequest
operator|.
name|Builder
name|builder
init|=
operator|new
name|CertificateSignRequest
operator|.
name|Builder
argument_list|()
operator|.
name|setSubject
argument_list|(
name|subject
argument_list|)
operator|.
name|setScmID
argument_list|(
name|scmID
argument_list|)
operator|.
name|setClusterID
argument_list|(
name|clusterID
argument_list|)
operator|.
name|setKey
argument_list|(
name|keyPair
argument_list|)
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|PKCS10CertificationRequest
name|csr
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Check the Subject Name is in the expected format.
name|String
name|dnName
init|=
name|String
operator|.
name|format
argument_list|(
name|SecurityUtil
operator|.
name|getDistinguishedNameFormat
argument_list|()
argument_list|,
name|subject
argument_list|,
name|scmID
argument_list|,
name|clusterID
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|csr
operator|.
name|getSubject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|dnName
argument_list|)
expr_stmt|;
comment|// Verify the public key info match
name|byte
index|[]
name|encoded
init|=
name|keyPair
operator|.
name|getPublic
argument_list|()
operator|.
name|getEncoded
argument_list|()
decl_stmt|;
name|SubjectPublicKeyInfo
name|subjectPublicKeyInfo
init|=
name|SubjectPublicKeyInfo
operator|.
name|getInstance
argument_list|(
name|ASN1Sequence
operator|.
name|getInstance
argument_list|(
name|encoded
argument_list|)
argument_list|)
decl_stmt|;
name|SubjectPublicKeyInfo
name|csrPublicKeyInfo
init|=
name|csr
operator|.
name|getSubjectPublicKeyInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|csrPublicKeyInfo
argument_list|,
name|subjectPublicKeyInfo
argument_list|)
expr_stmt|;
comment|// Verify CSR with attribute for extensions
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|csr
operator|.
name|getAttributes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Extensions
name|extensions
init|=
name|SecurityUtil
operator|.
name|getPkcs9Extensions
argument_list|(
name|csr
argument_list|)
decl_stmt|;
comment|// Verify basic constraints extension
name|Extension
name|basicExt
init|=
name|extensions
operator|.
name|getExtension
argument_list|(
name|Extension
operator|.
name|basicConstraints
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|basicExt
operator|.
name|isCritical
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify key usage extension
name|Extension
name|keyUsageExt
init|=
name|extensions
operator|.
name|getExtension
argument_list|(
name|Extension
operator|.
name|keyUsage
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|keyUsageExt
operator|.
name|isCritical
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify San extension not set
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|extensions
operator|.
name|getExtension
argument_list|(
name|Extension
operator|.
name|subjectAlternativeName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify signature in CSR
name|ContentVerifierProvider
name|verifierProvider
init|=
operator|new
name|JcaContentVerifierProviderBuilder
argument_list|()
operator|.
name|setProvider
argument_list|(
name|securityConfig
operator|.
name|getProvider
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
name|csr
operator|.
name|getSubjectPublicKeyInfo
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|csr
operator|.
name|isSignatureValid
argument_list|(
name|verifierProvider
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateCSRwithSan ()
specifier|public
name|void
name|testGenerateCSRwithSan
parameter_list|()
throws|throws
name|NoSuchProviderException
throws|,
name|NoSuchAlgorithmException
throws|,
name|SCMSecurityException
throws|,
name|OperatorCreationException
throws|,
name|PKCSException
block|{
name|String
name|clusterID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|scmID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|subject
init|=
literal|"DN001"
decl_stmt|;
name|HDDSKeyGenerator
name|keyGen
init|=
operator|new
name|HDDSKeyGenerator
argument_list|(
name|securityConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|KeyPair
name|keyPair
init|=
name|keyGen
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|CertificateSignRequest
operator|.
name|Builder
name|builder
init|=
operator|new
name|CertificateSignRequest
operator|.
name|Builder
argument_list|()
operator|.
name|setSubject
argument_list|(
name|subject
argument_list|)
operator|.
name|setScmID
argument_list|(
name|scmID
argument_list|)
operator|.
name|setClusterID
argument_list|(
name|clusterID
argument_list|)
operator|.
name|setKey
argument_list|(
name|keyPair
argument_list|)
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Multi-home
name|builder
operator|.
name|addIpAddress
argument_list|(
literal|"192.168.1.1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addIpAddress
argument_list|(
literal|"192.168.2.1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addDnsName
argument_list|(
literal|"dn1.abc.com"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addRfc822Name
argument_list|(
literal|"test@abc.com"
argument_list|)
expr_stmt|;
name|PKCS10CertificationRequest
name|csr
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Check the Subject Name is in the expected format.
name|String
name|dnName
init|=
name|String
operator|.
name|format
argument_list|(
name|SecurityUtil
operator|.
name|getDistinguishedNameFormat
argument_list|()
argument_list|,
name|subject
argument_list|,
name|scmID
argument_list|,
name|clusterID
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|csr
operator|.
name|getSubject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|dnName
argument_list|)
expr_stmt|;
comment|// Verify the public key info match
name|byte
index|[]
name|encoded
init|=
name|keyPair
operator|.
name|getPublic
argument_list|()
operator|.
name|getEncoded
argument_list|()
decl_stmt|;
name|SubjectPublicKeyInfo
name|subjectPublicKeyInfo
init|=
name|SubjectPublicKeyInfo
operator|.
name|getInstance
argument_list|(
name|ASN1Sequence
operator|.
name|getInstance
argument_list|(
name|encoded
argument_list|)
argument_list|)
decl_stmt|;
name|SubjectPublicKeyInfo
name|csrPublicKeyInfo
init|=
name|csr
operator|.
name|getSubjectPublicKeyInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|csrPublicKeyInfo
argument_list|,
name|subjectPublicKeyInfo
argument_list|)
expr_stmt|;
comment|// Verify CSR with attribute for extensions
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|csr
operator|.
name|getAttributes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Extensions
name|extensions
init|=
name|SecurityUtil
operator|.
name|getPkcs9Extensions
argument_list|(
name|csr
argument_list|)
decl_stmt|;
comment|// Verify key usage extension
name|Extension
name|sanExt
init|=
name|extensions
operator|.
name|getExtension
argument_list|(
name|Extension
operator|.
name|keyUsage
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|sanExt
operator|.
name|isCritical
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify signature in CSR
name|ContentVerifierProvider
name|verifierProvider
init|=
operator|new
name|JcaContentVerifierProviderBuilder
argument_list|()
operator|.
name|setProvider
argument_list|(
name|securityConfig
operator|.
name|getProvider
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
name|csr
operator|.
name|getSubjectPublicKeyInfo
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|csr
operator|.
name|isSignatureValid
argument_list|(
name|verifierProvider
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateCSRWithInvalidParams ()
specifier|public
name|void
name|testGenerateCSRWithInvalidParams
parameter_list|()
throws|throws
name|NoSuchProviderException
throws|,
name|NoSuchAlgorithmException
throws|,
name|SCMSecurityException
block|{
name|String
name|clusterID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|scmID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|subject
init|=
literal|"DN001"
decl_stmt|;
name|HDDSKeyGenerator
name|keyGen
init|=
operator|new
name|HDDSKeyGenerator
argument_list|(
name|securityConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|KeyPair
name|keyPair
init|=
name|keyGen
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|CertificateSignRequest
operator|.
name|Builder
name|builder
init|=
operator|new
name|CertificateSignRequest
operator|.
name|Builder
argument_list|()
operator|.
name|setSubject
argument_list|(
name|subject
argument_list|)
operator|.
name|setScmID
argument_list|(
name|scmID
argument_list|)
operator|.
name|setClusterID
argument_list|(
name|clusterID
argument_list|)
operator|.
name|setKey
argument_list|(
name|keyPair
argument_list|)
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|setKey
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Null Key should have failed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|builder
operator|.
name|setKey
argument_list|(
name|keyPair
argument_list|)
expr_stmt|;
block|}
comment|// Now try with blank/null Subject.
try|try
block|{
name|builder
operator|.
name|setSubject
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Null/Blank Subject should have thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|builder
operator|.
name|setSubject
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|builder
operator|.
name|setSubject
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Null/Blank Subject should have thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|builder
operator|.
name|setSubject
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
comment|// Now try with blank/null SCM ID
try|try
block|{
name|builder
operator|.
name|setScmID
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Null/Blank SCM ID should have thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|builder
operator|.
name|setScmID
argument_list|(
name|scmID
argument_list|)
expr_stmt|;
block|}
comment|// Now try with blank/null SCM ID
try|try
block|{
name|builder
operator|.
name|setClusterID
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Null/Blank Cluster ID should have thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|builder
operator|.
name|setClusterID
argument_list|(
name|clusterID
argument_list|)
expr_stmt|;
block|}
comment|// Now try with invalid IP address
try|try
block|{
name|builder
operator|.
name|addIpAddress
argument_list|(
literal|"255.255.255.*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Invalid ip address"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
name|PKCS10CertificationRequest
name|csr
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Check the Subject Name is in the expected format.
name|String
name|dnName
init|=
name|String
operator|.
name|format
argument_list|(
name|SecurityUtil
operator|.
name|getDistinguishedNameFormat
argument_list|()
argument_list|,
name|subject
argument_list|,
name|scmID
argument_list|,
name|clusterID
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|csr
operator|.
name|getSubject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|dnName
argument_list|)
expr_stmt|;
comment|// Verify the public key info match
name|byte
index|[]
name|encoded
init|=
name|keyPair
operator|.
name|getPublic
argument_list|()
operator|.
name|getEncoded
argument_list|()
decl_stmt|;
name|SubjectPublicKeyInfo
name|subjectPublicKeyInfo
init|=
name|SubjectPublicKeyInfo
operator|.
name|getInstance
argument_list|(
name|ASN1Sequence
operator|.
name|getInstance
argument_list|(
name|encoded
argument_list|)
argument_list|)
decl_stmt|;
name|SubjectPublicKeyInfo
name|csrPublicKeyInfo
init|=
name|csr
operator|.
name|getSubjectPublicKeyInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|csrPublicKeyInfo
argument_list|,
name|subjectPublicKeyInfo
argument_list|)
expr_stmt|;
comment|// Verify CSR with attribute for extensions
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|csr
operator|.
name|getAttributes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCsrSerialization ()
specifier|public
name|void
name|testCsrSerialization
parameter_list|()
throws|throws
name|NoSuchProviderException
throws|,
name|NoSuchAlgorithmException
throws|,
name|SCMSecurityException
throws|,
name|IOException
block|{
name|String
name|clusterID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|scmID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|subject
init|=
literal|"DN001"
decl_stmt|;
name|HDDSKeyGenerator
name|keyGen
init|=
operator|new
name|HDDSKeyGenerator
argument_list|(
name|securityConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|KeyPair
name|keyPair
init|=
name|keyGen
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|CertificateSignRequest
operator|.
name|Builder
name|builder
init|=
operator|new
name|CertificateSignRequest
operator|.
name|Builder
argument_list|()
operator|.
name|setSubject
argument_list|(
name|subject
argument_list|)
operator|.
name|setScmID
argument_list|(
name|scmID
argument_list|)
operator|.
name|setClusterID
argument_list|(
name|clusterID
argument_list|)
operator|.
name|setKey
argument_list|(
name|keyPair
argument_list|)
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|PKCS10CertificationRequest
name|csr
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|byte
index|[]
name|csrBytes
init|=
name|csr
operator|.
name|getEncoded
argument_list|()
decl_stmt|;
comment|// Verify de-serialized CSR matches with the original CSR
name|PKCS10CertificationRequest
name|dsCsr
init|=
operator|new
name|PKCS10CertificationRequest
argument_list|(
name|csrBytes
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|csr
argument_list|,
name|dsCsr
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

