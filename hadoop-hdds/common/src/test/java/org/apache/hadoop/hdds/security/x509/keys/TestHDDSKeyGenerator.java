begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.security.x509.keys
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|keys
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_DIRS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchProviderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|PKCS8EncodedKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|SecurityConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test class for HDDS Key Generator.  */
end_comment

begin_class
DECL|class|TestHDDSKeyGenerator
specifier|public
class|class
name|TestHDDSKeyGenerator
block|{
DECL|field|config
specifier|private
name|SecurityConfig
name|config
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_METADATA_DIRS
argument_list|,
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"testpath"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|SecurityConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * In this test we verify that we are able to create a key pair, then get    * bytes of that and use ASN1. parser to parse it back to a private key.    * @throws NoSuchProviderException - On Error, due to missing Java    * dependencies.    * @throws NoSuchAlgorithmException - On Error,  due to missing Java    * dependencies.    */
annotation|@
name|Test
DECL|method|testGenerateKey ()
specifier|public
name|void
name|testGenerateKey
parameter_list|()
throws|throws
name|NoSuchProviderException
throws|,
name|NoSuchAlgorithmException
block|{
name|HDDSKeyGenerator
name|keyGen
init|=
operator|new
name|HDDSKeyGenerator
argument_list|(
name|config
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|KeyPair
name|keyPair
init|=
name|keyGen
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|config
operator|.
name|getKeyAlgo
argument_list|()
argument_list|,
name|keyPair
operator|.
name|getPrivate
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|PKCS8EncodedKeySpec
name|keySpec
init|=
operator|new
name|PKCS8EncodedKeySpec
argument_list|(
name|keyPair
operator|.
name|getPrivate
argument_list|()
operator|.
name|getEncoded
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"PKCS#8"
argument_list|,
name|keySpec
operator|.
name|getFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * In this test we assert that size that we specified is used for Key    * generation.    * @throws NoSuchProviderException - On Error, due to missing Java    * dependencies.    * @throws NoSuchAlgorithmException - On Error,  due to missing Java    * dependencies.    */
annotation|@
name|Test
DECL|method|testGenerateKeyWithSize ()
specifier|public
name|void
name|testGenerateKeyWithSize
parameter_list|()
throws|throws
name|NoSuchProviderException
throws|,
name|NoSuchAlgorithmException
block|{
name|HDDSKeyGenerator
name|keyGen
init|=
operator|new
name|HDDSKeyGenerator
argument_list|(
name|config
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|KeyPair
name|keyPair
init|=
name|keyGen
operator|.
name|generateKey
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|keyPair
operator|.
name|getPublic
argument_list|()
decl_stmt|;
if|if
condition|(
name|publicKey
operator|instanceof
name|RSAPublicKey
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4096
argument_list|,
operator|(
call|(
name|RSAPublicKey
call|)
argument_list|(
name|publicKey
argument_list|)
operator|)
operator|.
name|getModulus
argument_list|()
operator|.
name|bitLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

