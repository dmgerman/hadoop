begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipException
import|;
end_import

begin_comment
comment|/**  * Tests for {@link RetriableTask}.  */
end_comment

begin_class
DECL|class|TestRetriableTask
specifier|public
class|class
name|TestRetriableTask
block|{
annotation|@
name|Test
DECL|method|returnsSuccessfulResult ()
specifier|public
name|void
name|returnsSuccessfulResult
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|result
init|=
literal|"bilbo"
decl_stmt|;
name|RetriableTask
argument_list|<
name|String
argument_list|>
name|task
init|=
operator|new
name|RetriableTask
argument_list|<>
argument_list|(
name|RetryPolicies
operator|.
name|RETRY_FOREVER
argument_list|,
literal|"test"
argument_list|,
parameter_list|()
lambda|->
name|result
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
argument_list|,
name|task
operator|.
name|call
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|returnsSuccessfulResultAfterFailures ()
specifier|public
name|void
name|returnsSuccessfulResultAfterFailures
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|result
init|=
literal|"gandalf"
decl_stmt|;
name|AtomicInteger
name|attempts
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|RetriableTask
argument_list|<
name|String
argument_list|>
name|task
init|=
operator|new
name|RetriableTask
argument_list|<>
argument_list|(
name|RetryPolicies
operator|.
name|RETRY_FOREVER
argument_list|,
literal|"test"
argument_list|,
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|attempts
operator|.
name|incrementAndGet
argument_list|()
operator|<=
literal|2
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"testing"
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
argument_list|,
name|task
operator|.
name|call
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|respectsRetryPolicy ()
specifier|public
name|void
name|respectsRetryPolicy
parameter_list|()
block|{
name|int
name|expectedAttempts
init|=
literal|3
decl_stmt|;
name|AtomicInteger
name|attempts
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|RetryPolicy
name|retryPolicy
init|=
name|RetryPolicies
operator|.
name|retryUpToMaximumCountWithFixedSleep
argument_list|(
name|expectedAttempts
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|RetriableTask
argument_list|<
name|String
argument_list|>
name|task
init|=
operator|new
name|RetriableTask
argument_list|<>
argument_list|(
name|retryPolicy
argument_list|,
literal|"thr"
argument_list|,
parameter_list|()
lambda|->
block|{
name|attempts
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ZipException
argument_list|(
literal|"testing"
argument_list|)
throw|;
block|}
argument_list|)
decl_stmt|;
name|IOException
name|e
init|=
name|assertThrows
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|task
operator|::
name|call
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ZipException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedAttempts
argument_list|,
name|attempts
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

