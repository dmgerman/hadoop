begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.ratis
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|ratis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|PutSmallFileRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftGroupId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * Implementing the {@link Message} interface  * for {@link ContainerCommandRequestProto}.  */
end_comment

begin_class
DECL|class|ContainerCommandRequestMessage
specifier|public
specifier|final
class|class
name|ContainerCommandRequestMessage
implements|implements
name|Message
block|{
DECL|method|toMessage ( ContainerCommandRequestProto request, String traceId)
specifier|public
specifier|static
name|ContainerCommandRequestMessage
name|toMessage
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|,
name|String
name|traceId
parameter_list|)
block|{
specifier|final
name|ContainerCommandRequestProto
operator|.
name|Builder
name|b
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|traceId
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|setTraceID
argument_list|(
name|traceId
argument_list|)
expr_stmt|;
block|}
name|ByteString
name|data
init|=
name|ByteString
operator|.
name|EMPTY
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getCmdType
argument_list|()
operator|==
name|Type
operator|.
name|WriteChunk
condition|)
block|{
specifier|final
name|WriteChunkRequestProto
name|w
init|=
name|request
operator|.
name|getWriteChunk
argument_list|()
decl_stmt|;
name|data
operator|=
name|w
operator|.
name|getData
argument_list|()
expr_stmt|;
name|b
operator|.
name|setWriteChunk
argument_list|(
name|w
operator|.
name|toBuilder
argument_list|()
operator|.
name|clearData
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|getCmdType
argument_list|()
operator|==
name|Type
operator|.
name|PutSmallFile
condition|)
block|{
specifier|final
name|PutSmallFileRequestProto
name|p
init|=
name|request
operator|.
name|getPutSmallFile
argument_list|()
decl_stmt|;
name|data
operator|=
name|p
operator|.
name|getData
argument_list|()
expr_stmt|;
name|b
operator|.
name|setPutSmallFile
argument_list|(
name|p
operator|.
name|toBuilder
argument_list|()
operator|.
name|setData
argument_list|(
name|ByteString
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ContainerCommandRequestMessage
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|,
name|data
argument_list|)
return|;
block|}
DECL|method|toProto ( ByteString bytes, RaftGroupId groupId)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|toProto
parameter_list|(
name|ByteString
name|bytes
parameter_list|,
name|RaftGroupId
name|groupId
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
specifier|final
name|int
name|i
init|=
literal|4
operator|+
name|bytes
operator|.
name|asReadOnlyByteBuffer
argument_list|()
operator|.
name|getInt
argument_list|()
decl_stmt|;
specifier|final
name|ContainerCommandRequestProto
name|header
init|=
name|ContainerCommandRequestProto
operator|.
name|parseFrom
argument_list|(
name|bytes
operator|.
name|substring
argument_list|(
literal|4
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO: setting pipeline id can be avoided if the client is sending it.
comment|//       In such case, just have to validate the pipeline id.
specifier|final
name|ContainerCommandRequestProto
operator|.
name|Builder
name|b
init|=
name|header
operator|.
name|toBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupId
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|setPipelineID
argument_list|(
name|groupId
operator|.
name|getUuid
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ByteString
name|data
init|=
name|bytes
operator|.
name|substring
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|.
name|getCmdType
argument_list|()
operator|==
name|Type
operator|.
name|WriteChunk
condition|)
block|{
name|b
operator|.
name|setWriteChunk
argument_list|(
name|b
operator|.
name|getWriteChunkBuilder
argument_list|()
operator|.
name|setData
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|header
operator|.
name|getCmdType
argument_list|()
operator|==
name|Type
operator|.
name|PutSmallFile
condition|)
block|{
name|b
operator|.
name|setPutSmallFile
argument_list|(
name|b
operator|.
name|getPutSmallFileBuilder
argument_list|()
operator|.
name|setData
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
DECL|field|header
specifier|private
specifier|final
name|ContainerCommandRequestProto
name|header
decl_stmt|;
DECL|field|data
specifier|private
specifier|final
name|ByteString
name|data
decl_stmt|;
DECL|field|contentSupplier
specifier|private
specifier|final
name|Supplier
argument_list|<
name|ByteString
argument_list|>
name|contentSupplier
init|=
name|JavaUtils
operator|.
name|memoize
argument_list|(
name|this
operator|::
name|buildContent
argument_list|)
decl_stmt|;
DECL|method|ContainerCommandRequestMessage ( ContainerCommandRequestProto header, ByteString data)
specifier|private
name|ContainerCommandRequestMessage
parameter_list|(
name|ContainerCommandRequestProto
name|header
parameter_list|,
name|ByteString
name|data
parameter_list|)
block|{
name|this
operator|.
name|header
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|header
argument_list|,
literal|"header == null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|data
argument_list|,
literal|"data == null"
argument_list|)
expr_stmt|;
block|}
DECL|method|buildContent ()
specifier|private
name|ByteString
name|buildContent
parameter_list|()
block|{
specifier|final
name|ByteString
name|headerBytes
init|=
name|header
operator|.
name|toByteString
argument_list|()
decl_stmt|;
return|return
name|RatisHelper
operator|.
name|int2ByteString
argument_list|(
name|headerBytes
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|concat
argument_list|(
name|headerBytes
argument_list|)
operator|.
name|concat
argument_list|(
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getContent ()
specifier|public
name|ByteString
name|getContent
parameter_list|()
block|{
return|return
name|contentSupplier
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|header
operator|+
literal|", data.size="
operator|+
name|data
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

