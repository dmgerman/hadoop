begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.discovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|discovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility to download ozone configuration from SCM.  */
end_comment

begin_class
DECL|class|DiscoveryUtil
specifier|public
specifier|final
class|class
name|DiscoveryUtil
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DiscoveryUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|OZONE_GLOBAL_XML
specifier|public
specifier|static
specifier|final
name|String
name|OZONE_GLOBAL_XML
init|=
literal|"ozone-global.xml"
decl_stmt|;
DECL|method|DiscoveryUtil ()
specifier|private
name|DiscoveryUtil
parameter_list|()
block|{   }
comment|/**    * Download ozone-global.conf from SCM to the local HADOOP_CONF_DIR.    */
DECL|method|loadGlobalConfig (OzoneConfiguration conf)
specifier|public
specifier|static
name|boolean
name|loadGlobalConfig
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
block|{
name|String
name|hadoopConfDir
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"HADOOP_CONF_DIR"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hadoopConfDir
operator|==
literal|null
operator|||
name|hadoopConfDir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"HADOOP_CONF_DIR is not set, can't download ozone-global.xml from "
operator|+
literal|"SCM."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
literal|"ozone.scm.names"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ozone.scm.names is not set. Can't download config from scm."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|60
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|String
name|scmHost
range|:
name|conf
operator|.
name|getStrings
argument_list|(
literal|"ozone.scm.names"
argument_list|)
control|)
block|{
name|String
name|configOrigin
init|=
name|String
operator|.
name|format
argument_list|(
literal|"http://%s:9876/discovery/config"
argument_list|,
name|scmHost
argument_list|)
decl_stmt|;
name|File
name|destinationFile
init|=
operator|new
name|File
argument_list|(
name|hadoopConfDir
argument_list|,
name|OZONE_GLOBAL_XML
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Downloading {} to {}"
argument_list|,
name|configOrigin
argument_list|,
name|destinationFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|URL
name|confUrl
init|=
operator|new
name|URL
argument_list|(
name|configOrigin
argument_list|)
decl_stmt|;
name|ReadableByteChannel
name|rbc
init|=
name|Channels
operator|.
name|newChannel
argument_list|(
name|confUrl
operator|.
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|destinationFile
argument_list|)
decl_stmt|;
name|fos
operator|.
name|getChannel
argument_list|()
operator|.
name|transferFrom
argument_list|(
name|rbc
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't download config from "
operator|+
name|configOrigin
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Configuration download was unsuccessful. Let's wait 5 seconds and"
operator|+
literal|" retry."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Polling the config file upload is interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

