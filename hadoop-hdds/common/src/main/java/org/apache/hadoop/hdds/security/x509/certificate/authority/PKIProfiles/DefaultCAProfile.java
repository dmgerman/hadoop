begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.security.x509.certificate.authority.PKIProfiles
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|authority
operator|.
name|PKIProfiles
package|;
end_package

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|Extension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|TRUE
import|;
end_import

begin_comment
comment|/**  * CA Profile, this is needed when SCM does HA.  * A place holder class indicating what we need to do when we support issuing  * CA certificates to other SCMs in HA mode.  */
end_comment

begin_class
DECL|class|DefaultCAProfile
specifier|public
class|class
name|DefaultCAProfile
extends|extends
name|DefaultProfile
block|{
specifier|static
specifier|final
name|BiFunction
argument_list|<
name|Extension
argument_list|,
name|PKIProfile
argument_list|,
name|Boolean
argument_list|>
DECL|field|VALIDATE_BASIC_CONSTRAINTS
name|VALIDATE_BASIC_CONSTRAINTS
init|=
parameter_list|(
name|e
parameter_list|,
name|b
parameter_list|)
lambda|->
name|TRUE
decl_stmt|;
specifier|static
specifier|final
name|BiFunction
argument_list|<
name|Extension
argument_list|,
name|PKIProfile
argument_list|,
name|Boolean
argument_list|>
DECL|field|VALIDATE_CRL_NUMBER
name|VALIDATE_CRL_NUMBER
init|=
parameter_list|(
name|e
parameter_list|,
name|b
parameter_list|)
lambda|->
name|TRUE
decl_stmt|;
specifier|static
specifier|final
name|BiFunction
argument_list|<
name|Extension
argument_list|,
name|PKIProfile
argument_list|,
name|Boolean
argument_list|>
DECL|field|VALIDATE_REASON_CODE
name|VALIDATE_REASON_CODE
init|=
parameter_list|(
name|e
parameter_list|,
name|b
parameter_list|)
lambda|->
name|TRUE
decl_stmt|;
specifier|static
specifier|final
name|BiFunction
argument_list|<
name|Extension
argument_list|,
name|PKIProfile
argument_list|,
name|Boolean
argument_list|>
DECL|field|VALIDATE_DELTA_CRL_INDICATOR
name|VALIDATE_DELTA_CRL_INDICATOR
init|=
parameter_list|(
name|e
parameter_list|,
name|b
parameter_list|)
lambda|->
name|TRUE
decl_stmt|;
specifier|static
specifier|final
name|BiFunction
argument_list|<
name|Extension
argument_list|,
name|PKIProfile
argument_list|,
name|Boolean
argument_list|>
DECL|field|VALIDATE_NAME_CONSTRAINTS
name|VALIDATE_NAME_CONSTRAINTS
init|=
parameter_list|(
name|e
parameter_list|,
name|b
parameter_list|)
lambda|->
name|TRUE
decl_stmt|;
specifier|static
specifier|final
name|BiFunction
argument_list|<
name|Extension
argument_list|,
name|PKIProfile
argument_list|,
name|Boolean
argument_list|>
DECL|field|VALIDATE_CRL_DISTRIBUTION_POINTS
name|VALIDATE_CRL_DISTRIBUTION_POINTS
init|=
parameter_list|(
name|e
parameter_list|,
name|b
parameter_list|)
lambda|->
name|TRUE
decl_stmt|;
block|}
end_class

end_unit

