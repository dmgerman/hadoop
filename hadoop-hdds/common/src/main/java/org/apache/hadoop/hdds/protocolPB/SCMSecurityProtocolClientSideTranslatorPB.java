begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|DatanodeDetailsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|OzoneManagerDetailsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|SCMSecurityProtocolProtos
operator|.
name|SCMGetDataNodeCertRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|SCMSecurityProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|SCMSecurityProtocolProtos
operator|.
name|SCMGetOMCertRequestProto
import|;
end_import

begin_comment
comment|/**  * This class is the client-side translator that forwards requests for  * {@link SCMSecurityProtocol} to the {@link SCMSecurityProtocolPB} proxy.  */
end_comment

begin_class
DECL|class|SCMSecurityProtocolClientSideTranslatorPB
specifier|public
class|class
name|SCMSecurityProtocolClientSideTranslatorPB
implements|implements
name|SCMSecurityProtocol
implements|,
name|ProtocolTranslator
implements|,
name|Closeable
block|{
comment|/**    * RpcController is not used and hence is set to null.    */
DECL|field|NULL_RPC_CONTROLLER
specifier|private
specifier|static
specifier|final
name|RpcController
name|NULL_RPC_CONTROLLER
init|=
literal|null
decl_stmt|;
DECL|field|rpcProxy
specifier|private
specifier|final
name|SCMSecurityProtocolPB
name|rpcProxy
decl_stmt|;
DECL|method|SCMSecurityProtocolClientSideTranslatorPB ( SCMSecurityProtocolPB rpcProxy)
specifier|public
name|SCMSecurityProtocolClientSideTranslatorPB
parameter_list|(
name|SCMSecurityProtocolPB
name|rpcProxy
parameter_list|)
block|{
name|this
operator|.
name|rpcProxy
operator|=
name|rpcProxy
expr_stmt|;
block|}
comment|/**    * Closes this stream and releases any system resources associated    * with it. If the stream is already closed then invoking this    * method has no effect.    *    *<p> As noted in {@link AutoCloseable#close()}, cases where the    * close may fail require careful attention. It is strongly advised    * to relinquish the underlying resources and to internally    *<em>mark</em> the {@code Closeable} as closed, prior to throwing    * the {@code IOException}.    *    * @throws IOException if an I/O error occurs    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|rpcProxy
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get SCM signed certificate for DataNode.    *    * @param dataNodeDetails - DataNode Details.    * @param certSignReq     - Certificate signing request.    * @return byte[]         - SCM signed certificate.    */
annotation|@
name|Override
DECL|method|getDataNodeCertificate (DatanodeDetailsProto dataNodeDetails, String certSignReq)
specifier|public
name|String
name|getDataNodeCertificate
parameter_list|(
name|DatanodeDetailsProto
name|dataNodeDetails
parameter_list|,
name|String
name|certSignReq
parameter_list|)
throws|throws
name|IOException
block|{
name|SCMGetDataNodeCertRequestProto
operator|.
name|Builder
name|builder
init|=
name|SCMGetDataNodeCertRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCSR
argument_list|(
name|certSignReq
argument_list|)
operator|.
name|setDatanodeDetails
argument_list|(
name|dataNodeDetails
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|rpcProxy
operator|.
name|getDataNodeCertificate
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|getX509Certificate
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get SCM signed certificate for OM.    *    * @param omDetails       - OzoneManager Details.    * @param certSignReq     - Certificate signing request.    * @return byte[]         - SCM signed certificate.    */
annotation|@
name|Override
DECL|method|getOMCertificate (OzoneManagerDetailsProto omDetails, String certSignReq)
specifier|public
name|String
name|getOMCertificate
parameter_list|(
name|OzoneManagerDetailsProto
name|omDetails
parameter_list|,
name|String
name|certSignReq
parameter_list|)
throws|throws
name|IOException
block|{
name|SCMGetOMCertRequestProto
operator|.
name|Builder
name|builder
init|=
name|SCMGetOMCertRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCSR
argument_list|(
name|certSignReq
argument_list|)
operator|.
name|setOmDetails
argument_list|(
name|omDetails
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|rpcProxy
operator|.
name|getOMCertificate
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|getX509Certificate
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return the proxy object underlying this protocol translator.    *    * @return the proxy object underlying this protocol translator.    */
annotation|@
name|Override
DECL|method|getUnderlyingProxyObject ()
specifier|public
name|Object
name|getUnderlyingProxyObject
parameter_list|()
block|{
return|return
name|rpcProxy
return|;
block|}
block|}
end_class

end_unit

