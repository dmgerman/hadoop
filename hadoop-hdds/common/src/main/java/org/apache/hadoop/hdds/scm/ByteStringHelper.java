begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnsafeByteOperations
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * Helper class to perform Unsafe ByteString conversion from byteBuffer or byte  * array depending on the config "ozone.UnsafeByteOperations.enabled".  */
end_comment

begin_class
DECL|class|ByteStringHelper
specifier|public
specifier|final
class|class
name|ByteStringHelper
block|{
DECL|field|INITIALIZED
specifier|private
specifier|static
specifier|final
name|AtomicBoolean
name|INITIALIZED
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|isUnsafeByteOperationsEnabled
specifier|private
specifier|static
specifier|volatile
name|boolean
name|isUnsafeByteOperationsEnabled
decl_stmt|;
comment|/**    * There is no need to instantiate this class.    */
DECL|method|ByteStringHelper ()
specifier|private
name|ByteStringHelper
parameter_list|()
block|{   }
DECL|method|init (boolean isUnsafeByteOperation)
specifier|public
specifier|static
name|void
name|init
parameter_list|(
name|boolean
name|isUnsafeByteOperation
parameter_list|)
block|{
specifier|final
name|boolean
name|set
init|=
name|INITIALIZED
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
condition|)
block|{
name|ByteStringHelper
operator|.
name|isUnsafeByteOperationsEnabled
operator|=
name|isUnsafeByteOperation
expr_stmt|;
block|}
else|else
block|{
comment|// already initialized, check values
name|Preconditions
operator|.
name|checkState
argument_list|(
name|isUnsafeByteOperationsEnabled
operator|==
name|isUnsafeByteOperation
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|copyFrom (ByteBuffer buffer)
specifier|private
specifier|static
name|ByteString
name|copyFrom
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
specifier|final
name|ByteString
name|bytes
init|=
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
comment|// flip the buffer so as to read the data starting from pos 0 again
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
return|return
name|bytes
return|;
block|}
DECL|method|getByteString (ByteBuffer buffer)
specifier|public
specifier|static
name|ByteString
name|getByteString
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
return|return
name|isUnsafeByteOperationsEnabled
condition|?
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|buffer
argument_list|)
else|:
name|copyFrom
argument_list|(
name|buffer
argument_list|)
return|;
block|}
DECL|method|getByteString (byte[] bytes)
specifier|public
specifier|static
name|ByteString
name|getByteString
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|isUnsafeByteOperationsEnabled
condition|?
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|bytes
argument_list|)
else|:
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|bytes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

