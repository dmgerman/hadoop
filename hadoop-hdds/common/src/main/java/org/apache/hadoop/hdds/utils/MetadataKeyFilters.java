begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * An utility class to filter levelDB keys.  */
end_comment

begin_class
DECL|class|MetadataKeyFilters
specifier|public
specifier|final
class|class
name|MetadataKeyFilters
block|{
DECL|field|deletingKeyFilter
specifier|private
specifier|static
name|KeyPrefixFilter
name|deletingKeyFilter
init|=
operator|new
name|MetadataKeyFilters
operator|.
name|KeyPrefixFilter
argument_list|()
operator|.
name|addFilter
argument_list|(
name|OzoneConsts
operator|.
name|DELETING_KEY_PREFIX
argument_list|)
decl_stmt|;
DECL|field|deletedKeyFilter
specifier|private
specifier|static
name|KeyPrefixFilter
name|deletedKeyFilter
init|=
operator|new
name|MetadataKeyFilters
operator|.
name|KeyPrefixFilter
argument_list|()
operator|.
name|addFilter
argument_list|(
name|OzoneConsts
operator|.
name|DELETED_KEY_PREFIX
argument_list|)
decl_stmt|;
DECL|field|normalKeyFilter
specifier|private
specifier|static
name|KeyPrefixFilter
name|normalKeyFilter
init|=
operator|new
name|MetadataKeyFilters
operator|.
name|KeyPrefixFilter
argument_list|()
operator|.
name|addFilter
argument_list|(
name|OzoneConsts
operator|.
name|DELETING_KEY_PREFIX
argument_list|,
literal|true
argument_list|)
operator|.
name|addFilter
argument_list|(
name|OzoneConsts
operator|.
name|DELETED_KEY_PREFIX
argument_list|,
literal|true
argument_list|)
operator|.
name|addFilter
argument_list|(
name|OzoneConsts
operator|.
name|DELETE_TRANSACTION_KEY_PREFIX
argument_list|,
literal|true
argument_list|)
operator|.
name|addFilter
argument_list|(
name|OzoneConsts
operator|.
name|BLOCK_COMMIT_SEQUENCE_ID_PREFIX
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|method|MetadataKeyFilters ()
specifier|private
name|MetadataKeyFilters
parameter_list|()
block|{   }
DECL|method|getDeletingKeyFilter ()
specifier|public
specifier|static
name|KeyPrefixFilter
name|getDeletingKeyFilter
parameter_list|()
block|{
return|return
name|deletingKeyFilter
return|;
block|}
DECL|method|getDeletedKeyFilter ()
specifier|public
specifier|static
name|KeyPrefixFilter
name|getDeletedKeyFilter
parameter_list|()
block|{
return|return
name|deletedKeyFilter
return|;
block|}
DECL|method|getNormalKeyFilter ()
specifier|public
specifier|static
name|KeyPrefixFilter
name|getNormalKeyFilter
parameter_list|()
block|{
return|return
name|normalKeyFilter
return|;
block|}
comment|/**    * Interface for levelDB key filters.    */
DECL|interface|MetadataKeyFilter
specifier|public
interface|interface
name|MetadataKeyFilter
block|{
comment|/**      * Filter levelDB key with a certain condition.      *      * @param preKey     previous key.      * @param currentKey current key.      * @param nextKey    next key.      * @return true if a certain condition satisfied, return false otherwise.      */
DECL|method|filterKey (byte[] preKey, byte[] currentKey, byte[] nextKey)
name|boolean
name|filterKey
parameter_list|(
name|byte
index|[]
name|preKey
parameter_list|,
name|byte
index|[]
name|currentKey
parameter_list|,
name|byte
index|[]
name|nextKey
parameter_list|)
function_decl|;
DECL|method|getKeysScannedNum ()
specifier|default
name|int
name|getKeysScannedNum
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|getKeysHintedNum ()
specifier|default
name|int
name|getKeysHintedNum
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
comment|/**    * Utility class to filter key by a string prefix. This filter    * assumes keys can be parsed to a string.    */
DECL|class|KeyPrefixFilter
specifier|public
specifier|static
class|class
name|KeyPrefixFilter
implements|implements
name|MetadataKeyFilter
block|{
DECL|field|positivePrefixList
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|positivePrefixList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|negativePrefixList
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|negativePrefixList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|atleastOnePositiveMatch
specifier|private
name|boolean
name|atleastOnePositiveMatch
decl_stmt|;
DECL|field|keysScanned
specifier|private
name|int
name|keysScanned
init|=
literal|0
decl_stmt|;
DECL|field|keysHinted
specifier|private
name|int
name|keysHinted
init|=
literal|0
decl_stmt|;
DECL|method|KeyPrefixFilter ()
specifier|public
name|KeyPrefixFilter
parameter_list|()
block|{}
comment|/**      * KeyPrefixFilter constructor. It is made of positive and negative prefix      * list. PositivePrefixList is the list of prefixes which are accepted      * whereas negativePrefixList contains the list of prefixes which are      * rejected.      *      * @param atleastOnePositiveMatch if positive it requires key to be accepted      *                               by atleast one positive filter.      */
DECL|method|KeyPrefixFilter (boolean atleastOnePositiveMatch)
specifier|public
name|KeyPrefixFilter
parameter_list|(
name|boolean
name|atleastOnePositiveMatch
parameter_list|)
block|{
name|this
operator|.
name|atleastOnePositiveMatch
operator|=
name|atleastOnePositiveMatch
expr_stmt|;
block|}
DECL|method|addFilter (String keyPrefix)
specifier|public
name|KeyPrefixFilter
name|addFilter
parameter_list|(
name|String
name|keyPrefix
parameter_list|)
block|{
name|addFilter
argument_list|(
name|keyPrefix
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addFilter (String keyPrefix, boolean negative)
specifier|public
name|KeyPrefixFilter
name|addFilter
parameter_list|(
name|String
name|keyPrefix
parameter_list|,
name|boolean
name|negative
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|keyPrefix
argument_list|)
argument_list|,
literal|"KeyPrefix is null or empty: "
operator|+
name|keyPrefix
argument_list|)
expr_stmt|;
comment|// keyPrefix which needs to be added should not be prefix of any opposing
comment|// filter already present. If keyPrefix is a negative filter it should not
comment|// be a prefix of any positive filter. Nor should any opposing filter be
comment|// a prefix of keyPrefix.
comment|// For example if b0 is accepted b can not be rejected and
comment|// if b is accepted b0 can not be rejected. If these scenarios need to be
comment|// handled we need to add priorities.
if|if
condition|(
name|negative
condition|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|positivePrefixList
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|prefix
lambda|->
name|prefix
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
operator|||
name|keyPrefix
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
argument_list|)
argument_list|,
literal|"KeyPrefix: "
operator|+
name|keyPrefix
operator|+
literal|" already accepted."
argument_list|)
expr_stmt|;
name|this
operator|.
name|negativePrefixList
operator|.
name|add
argument_list|(
name|keyPrefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|negativePrefixList
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|prefix
lambda|->
name|prefix
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
operator|||
name|keyPrefix
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
argument_list|)
argument_list|,
literal|"KeyPrefix: "
operator|+
name|keyPrefix
operator|+
literal|" already rejected."
argument_list|)
expr_stmt|;
name|this
operator|.
name|positivePrefixList
operator|.
name|add
argument_list|(
name|keyPrefix
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|filterKey (byte[] preKey, byte[] currentKey, byte[] nextKey)
specifier|public
name|boolean
name|filterKey
parameter_list|(
name|byte
index|[]
name|preKey
parameter_list|,
name|byte
index|[]
name|currentKey
parameter_list|,
name|byte
index|[]
name|nextKey
parameter_list|)
block|{
name|keysScanned
operator|++
expr_stmt|;
if|if
condition|(
name|currentKey
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|accept
decl_stmt|;
comment|// There are no filters present
if|if
condition|(
name|positivePrefixList
operator|.
name|isEmpty
argument_list|()
operator|&&
name|negativePrefixList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|accept
operator|=
operator|!
name|positivePrefixList
operator|.
name|isEmpty
argument_list|()
operator|&&
name|positivePrefixList
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|prefix
lambda|->
block|{
name|byte
index|[]
name|prefixBytes
init|=
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
return|return
name|prefixMatch
argument_list|(
name|prefixBytes
argument_list|,
name|currentKey
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|accept
condition|)
block|{
name|keysHinted
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|atleastOnePositiveMatch
condition|)
block|{
return|return
literal|false
return|;
block|}
name|accept
operator|=
operator|!
name|negativePrefixList
operator|.
name|isEmpty
argument_list|()
operator|&&
name|negativePrefixList
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|prefix
lambda|->
block|{
name|byte
index|[]
name|prefixBytes
init|=
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
return|return
operator|!
name|prefixMatch
argument_list|(
name|prefixBytes
argument_list|,
name|currentKey
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|accept
condition|)
block|{
name|keysHinted
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getKeysScannedNum ()
specifier|public
name|int
name|getKeysScannedNum
parameter_list|()
block|{
return|return
name|keysScanned
return|;
block|}
annotation|@
name|Override
DECL|method|getKeysHintedNum ()
specifier|public
name|int
name|getKeysHintedNum
parameter_list|()
block|{
return|return
name|keysHinted
return|;
block|}
DECL|method|prefixMatch (byte[] prefix, byte[] key)
specifier|private
specifier|static
name|boolean
name|prefixMatch
parameter_list|(
name|byte
index|[]
name|prefix
parameter_list|,
name|byte
index|[]
name|key
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|length
operator|<
name|prefix
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prefix
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|key
index|[
name|i
index|]
operator|!=
name|prefix
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

