begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.tracing
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|tracing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|grpc
operator|.
name|CallOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|grpc
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|grpc
operator|.
name|ClientCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|grpc
operator|.
name|ClientInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|grpc
operator|.
name|ForwardingClientCall
operator|.
name|SimpleForwardingClientCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|grpc
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|grpc
operator|.
name|Metadata
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|grpc
operator|.
name|MethodDescriptor
import|;
end_import

begin_comment
comment|/**  * Interceptor to add the tracing id to the outgoing call header.  */
end_comment

begin_class
DECL|class|GrpcClientInterceptor
specifier|public
class|class
name|GrpcClientInterceptor
implements|implements
name|ClientInterceptor
block|{
DECL|field|TRACING_HEADER
specifier|public
specifier|static
specifier|final
name|Key
argument_list|<
name|String
argument_list|>
name|TRACING_HEADER
init|=
name|Key
operator|.
name|of
argument_list|(
literal|"Tracing"
argument_list|,
name|Metadata
operator|.
name|ASCII_STRING_MARSHALLER
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|interceptCall ( MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next)
specifier|public
parameter_list|<
name|ReqT
parameter_list|,
name|RespT
parameter_list|>
name|ClientCall
argument_list|<
name|ReqT
argument_list|,
name|RespT
argument_list|>
name|interceptCall
parameter_list|(
name|MethodDescriptor
argument_list|<
name|ReqT
argument_list|,
name|RespT
argument_list|>
name|method
parameter_list|,
name|CallOptions
name|callOptions
parameter_list|,
name|Channel
name|next
parameter_list|)
block|{
return|return
operator|new
name|SimpleForwardingClientCall
argument_list|<
name|ReqT
argument_list|,
name|RespT
argument_list|>
argument_list|(
name|next
operator|.
name|newCall
argument_list|(
name|method
argument_list|,
name|callOptions
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|Listener
argument_list|<
name|RespT
argument_list|>
name|responseListener
parameter_list|,
name|Metadata
name|headers
parameter_list|)
block|{
name|Metadata
name|tracingHeaders
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|tracingHeaders
operator|.
name|put
argument_list|(
name|TRACING_HEADER
argument_list|,
name|TracingUtil
operator|.
name|exportCurrentSpan
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|merge
argument_list|(
name|tracingHeaders
argument_list|)
expr_stmt|;
name|super
operator|.
name|start
argument_list|(
name|responseListener
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

