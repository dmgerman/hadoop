begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChecksumType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|PureJavaCrc32
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|PureJavaCrc32C
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Class to compute and verify checksums for chunks.  *  * This class is not thread safe.  */
end_comment

begin_class
DECL|class|Checksum
specifier|public
class|class
name|Checksum
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Checksum
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|checksumType
specifier|private
specifier|final
name|ChecksumType
name|checksumType
decl_stmt|;
DECL|field|bytesPerChecksum
specifier|private
specifier|final
name|int
name|bytesPerChecksum
decl_stmt|;
DECL|field|crc32Checksum
specifier|private
name|PureJavaCrc32
name|crc32Checksum
decl_stmt|;
DECL|field|crc32cChecksum
specifier|private
name|PureJavaCrc32C
name|crc32cChecksum
decl_stmt|;
DECL|field|sha
specifier|private
name|MessageDigest
name|sha
decl_stmt|;
comment|/**    * Constructs a Checksum object.    * @param type type of Checksum    * @param bytesPerChecksum number of bytes of data per checksum    */
DECL|method|Checksum (ChecksumType type, int bytesPerChecksum)
specifier|public
name|Checksum
parameter_list|(
name|ChecksumType
name|type
parameter_list|,
name|int
name|bytesPerChecksum
parameter_list|)
block|{
name|this
operator|.
name|checksumType
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|bytesPerChecksum
operator|=
name|bytesPerChecksum
expr_stmt|;
block|}
comment|/**    * Constructs a Checksum object with default ChecksumType and default    * BytesPerChecksum.    */
annotation|@
name|VisibleForTesting
DECL|method|Checksum ()
specifier|public
name|Checksum
parameter_list|()
block|{
name|this
operator|.
name|checksumType
operator|=
name|ChecksumType
operator|.
name|valueOf
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_CHECKSUM_TYPE_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|bytesPerChecksum
operator|=
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_BYTES_PER_CHECKSUM_DEFAULT_BYTES
expr_stmt|;
comment|// Default is 1MB
block|}
comment|/**    * Computes checksum for give data.    * @param byteBuffer input data in the form of ByteString.    * @return ChecksumData computed for input data.    */
DECL|method|computeChecksum (ByteBuffer byteBuffer)
specifier|public
name|ChecksumData
name|computeChecksum
parameter_list|(
name|ByteBuffer
name|byteBuffer
parameter_list|)
throws|throws
name|OzoneChecksumException
block|{
return|return
name|computeChecksum
argument_list|(
name|byteBuffer
operator|.
name|array
argument_list|()
argument_list|,
name|byteBuffer
operator|.
name|position
argument_list|()
argument_list|,
name|byteBuffer
operator|.
name|limit
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Computes checksum for give data.    * @param data input data in the form of byte array.    * @return ChecksumData computed for input data.    */
DECL|method|computeChecksum (byte[] data)
specifier|public
name|ChecksumData
name|computeChecksum
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|OzoneChecksumException
block|{
return|return
name|computeChecksum
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Computes checksum for give data.    * @param data input data in the form of byte array.    * @return ChecksumData computed for input data.    */
DECL|method|computeChecksum (byte[] data, int offset, int len)
specifier|public
name|ChecksumData
name|computeChecksum
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|OzoneChecksumException
block|{
name|ChecksumData
name|checksumData
init|=
operator|new
name|ChecksumData
argument_list|(
name|this
operator|.
name|checksumType
argument_list|,
name|this
operator|.
name|bytesPerChecksum
argument_list|)
decl_stmt|;
if|if
condition|(
name|checksumType
operator|==
name|ChecksumType
operator|.
name|NONE
condition|)
block|{
comment|// Since type is set to NONE, we do not need to compute the checksums
return|return
name|checksumData
return|;
block|}
switch|switch
condition|(
name|checksumType
condition|)
block|{
case|case
name|CRC32
case|:
name|crc32Checksum
operator|=
operator|new
name|PureJavaCrc32
argument_list|()
expr_stmt|;
break|break;
case|case
name|CRC32C
case|:
name|crc32cChecksum
operator|=
operator|new
name|PureJavaCrc32C
argument_list|()
expr_stmt|;
break|break;
case|case
name|SHA256
case|:
try|try
block|{
name|sha
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|OzoneConsts
operator|.
name|FILE_HASH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OzoneChecksumException
argument_list|(
name|OzoneConsts
operator|.
name|FILE_HASH
argument_list|,
name|e
argument_list|)
throw|;
block|}
break|break;
case|case
name|MD5
case|:
break|break;
default|default:
throw|throw
operator|new
name|OzoneChecksumException
argument_list|(
name|checksumType
argument_list|)
throw|;
block|}
comment|// Compute number of checksums needs for given data length based on bytes
comment|// per checksum.
name|int
name|dataSize
init|=
name|len
operator|-
name|offset
decl_stmt|;
name|int
name|numChecksums
init|=
operator|(
name|dataSize
operator|+
name|bytesPerChecksum
operator|-
literal|1
operator|)
operator|/
name|bytesPerChecksum
decl_stmt|;
comment|// Checksum is computed for each bytesPerChecksum number of bytes of data
comment|// starting at offset 0. The last checksum might be computed for the
comment|// remaining data with length less than bytesPerChecksum.
name|List
argument_list|<
name|ByteString
argument_list|>
name|checksumList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numChecksums
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|numChecksums
condition|;
name|index
operator|++
control|)
block|{
name|checksumList
operator|.
name|add
argument_list|(
name|computeChecksumAtIndex
argument_list|(
name|data
argument_list|,
name|index
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|checksumData
operator|.
name|setChecksums
argument_list|(
name|checksumList
argument_list|)
expr_stmt|;
return|return
name|checksumData
return|;
block|}
comment|/**    * Computes checksum based on checksumType for a data block at given index    * and a max length of bytesPerChecksum.    * @param data input data    * @param index index to compute the offset from where data must be read    * @param start start pos of the array where the computation has to start    * @length length of array till which checksum needs to be computed    * @return computed checksum ByteString    * @throws OzoneChecksumException thrown when ChecksumType is not recognized    */
DECL|method|computeChecksumAtIndex (byte[] data, int index, int start, int length)
specifier|private
name|ByteString
name|computeChecksumAtIndex
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|OzoneChecksumException
block|{
name|int
name|offset
init|=
name|start
operator|+
name|index
operator|*
name|bytesPerChecksum
decl_stmt|;
name|int
name|dataLength
init|=
name|length
operator|-
name|start
decl_stmt|;
name|int
name|len
init|=
name|bytesPerChecksum
decl_stmt|;
if|if
condition|(
operator|(
name|offset
operator|+
name|len
operator|)
operator|>
name|dataLength
condition|)
block|{
name|len
operator|=
name|dataLength
operator|-
name|offset
expr_stmt|;
block|}
name|byte
index|[]
name|checksumBytes
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|checksumType
condition|)
block|{
case|case
name|CRC32
case|:
name|checksumBytes
operator|=
name|computeCRC32Checksum
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
break|break;
case|case
name|CRC32C
case|:
name|checksumBytes
operator|=
name|computeCRC32CChecksum
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHA256
case|:
name|checksumBytes
operator|=
name|computeSHA256Checksum
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
break|break;
case|case
name|MD5
case|:
name|checksumBytes
operator|=
name|computeMD5Checksum
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|OzoneChecksumException
argument_list|(
name|checksumType
argument_list|)
throw|;
block|}
return|return
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|checksumBytes
argument_list|)
return|;
block|}
comment|/**    * Computes CRC32 checksum.    */
DECL|method|computeCRC32Checksum (byte[] data, int offset, int len)
specifier|private
name|byte
index|[]
name|computeCRC32Checksum
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|crc32Checksum
operator|.
name|reset
argument_list|()
expr_stmt|;
name|crc32Checksum
operator|.
name|update
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|Longs
operator|.
name|toByteArray
argument_list|(
name|crc32Checksum
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Computes CRC32C checksum.    */
DECL|method|computeCRC32CChecksum (byte[] data, int offset, int len)
specifier|private
name|byte
index|[]
name|computeCRC32CChecksum
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|crc32cChecksum
operator|.
name|reset
argument_list|()
expr_stmt|;
name|crc32cChecksum
operator|.
name|update
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|Longs
operator|.
name|toByteArray
argument_list|(
name|crc32cChecksum
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Computes SHA-256 checksum.    */
DECL|method|computeSHA256Checksum (byte[] data, int offset, int len)
specifier|private
name|byte
index|[]
name|computeSHA256Checksum
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|sha
operator|.
name|reset
argument_list|()
expr_stmt|;
name|sha
operator|.
name|update
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|sha
operator|.
name|digest
argument_list|()
return|;
block|}
comment|/**    * Computes MD5 checksum.    */
DECL|method|computeMD5Checksum (byte[] data, int offset, int len)
specifier|private
name|byte
index|[]
name|computeMD5Checksum
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|MD5Hash
name|md5out
init|=
name|MD5Hash
operator|.
name|digest
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
return|return
name|md5out
operator|.
name|getDigest
argument_list|()
return|;
block|}
comment|/**    * Computes the ChecksumData for the input data and verifies that it    * matches with that of the input checksumData, starting from index    * startIndex.    * @param byteString input data    * @param checksumData checksumData to match with    * @param startIndex index of first checksum in checksumData to match with    *                   data's computed checksum.    * @throws OzoneChecksumException is thrown if checksums do not match    */
DECL|method|verifyChecksum (ByteString byteString, ChecksumData checksumData, int startIndex)
specifier|public
specifier|static
name|boolean
name|verifyChecksum
parameter_list|(
name|ByteString
name|byteString
parameter_list|,
name|ChecksumData
name|checksumData
parameter_list|,
name|int
name|startIndex
parameter_list|)
throws|throws
name|OzoneChecksumException
block|{
return|return
name|verifyChecksum
argument_list|(
name|byteString
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|checksumData
argument_list|,
name|startIndex
argument_list|)
return|;
block|}
comment|/**    * Computes the ChecksumData for the input data and verifies that it    * matches with that of the input checksumData.    * @param data input data    * @param checksumData checksumData to match with    * @throws OzoneChecksumException is thrown if checksums do not match    */
DECL|method|verifyChecksum (byte[] data, ChecksumData checksumData)
specifier|public
specifier|static
name|boolean
name|verifyChecksum
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|ChecksumData
name|checksumData
parameter_list|)
throws|throws
name|OzoneChecksumException
block|{
return|return
name|verifyChecksum
argument_list|(
name|data
argument_list|,
name|checksumData
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Computes the ChecksumData for the input data and verifies that it    * matches with that of the input checksumData.    * @param data input data    * @param checksumData checksumData to match with    * @param startIndex index of first checksum in checksumData to match with    *                   data's computed checksum.    * @throws OzoneChecksumException is thrown if checksums do not match    */
DECL|method|verifyChecksum (byte[] data, ChecksumData checksumData, int startIndex)
specifier|public
specifier|static
name|boolean
name|verifyChecksum
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|ChecksumData
name|checksumData
parameter_list|,
name|int
name|startIndex
parameter_list|)
throws|throws
name|OzoneChecksumException
block|{
name|ChecksumType
name|checksumType
init|=
name|checksumData
operator|.
name|getChecksumType
argument_list|()
decl_stmt|;
if|if
condition|(
name|checksumType
operator|==
name|ChecksumType
operator|.
name|NONE
condition|)
block|{
comment|// Checksum is set to NONE. No further verification is required.
return|return
literal|true
return|;
block|}
name|int
name|bytesPerChecksum
init|=
name|checksumData
operator|.
name|getBytesPerChecksum
argument_list|()
decl_stmt|;
name|Checksum
name|checksum
init|=
operator|new
name|Checksum
argument_list|(
name|checksumType
argument_list|,
name|bytesPerChecksum
argument_list|)
decl_stmt|;
name|ChecksumData
name|computedChecksumData
init|=
name|checksum
operator|.
name|computeChecksum
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
name|checksumData
operator|.
name|verifyChecksumDataMatches
argument_list|(
name|computedChecksumData
argument_list|,
name|startIndex
argument_list|)
return|;
block|}
comment|/**    * Returns a ChecksumData with type NONE for testing.    */
annotation|@
name|VisibleForTesting
DECL|method|getNoChecksumDataProto ()
specifier|public
specifier|static
name|ContainerProtos
operator|.
name|ChecksumData
name|getNoChecksumDataProto
parameter_list|()
block|{
return|return
operator|new
name|ChecksumData
argument_list|(
name|ChecksumType
operator|.
name|NONE
argument_list|,
literal|0
argument_list|)
operator|.
name|getProtoBufMessage
argument_list|()
return|;
block|}
block|}
end_class

end_unit

