begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.lease
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_comment
comment|/**  * This class represents the lease created on a resource. Callback can be  * registered on the lease which will be executed in case of timeout.  *  * @param<T> Resource type for which the lease can be associated  */
end_comment

begin_class
DECL|class|Lease
specifier|public
class|class
name|Lease
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**    * The resource for which this lease is created.    */
DECL|field|resource
specifier|private
specifier|final
name|T
name|resource
decl_stmt|;
DECL|field|creationTime
specifier|private
specifier|final
name|long
name|creationTime
decl_stmt|;
comment|/**    * Lease lifetime in milliseconds.    */
DECL|field|leaseTimeout
specifier|private
specifier|volatile
name|long
name|leaseTimeout
decl_stmt|;
DECL|field|expired
specifier|private
name|boolean
name|expired
decl_stmt|;
comment|/**    * Functions to be called in case of timeout.    */
DECL|field|callbacks
specifier|private
name|List
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|callbacks
decl_stmt|;
comment|/**    * Creates a lease on the specified resource with given timeout.    *    * @param resource    *        Resource for which the lease has to be created    * @param timeout    *        Lease lifetime in milliseconds    */
DECL|method|Lease (T resource, long timeout)
specifier|public
name|Lease
parameter_list|(
name|T
name|resource
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
name|this
operator|.
name|leaseTimeout
operator|=
name|timeout
expr_stmt|;
name|this
operator|.
name|callbacks
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|creationTime
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
name|this
operator|.
name|expired
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Returns true if the lease has expired, else false.    *    * @return true if expired, else false    */
DECL|method|hasExpired ()
specifier|public
name|boolean
name|hasExpired
parameter_list|()
block|{
return|return
name|expired
return|;
block|}
comment|/**    * Registers a callback which will be executed in case of timeout. Callbacks    * are executed in a separate Thread.    *    * @param callback    *        The Callable which has to be executed    * @throws LeaseExpiredException    *         If the lease has already timed out    */
DECL|method|registerCallBack (Callable<Void> callback)
specifier|public
name|void
name|registerCallBack
parameter_list|(
name|Callable
argument_list|<
name|Void
argument_list|>
name|callback
parameter_list|)
throws|throws
name|LeaseExpiredException
block|{
if|if
condition|(
name|hasExpired
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|LeaseExpiredException
argument_list|(
literal|"Resource: "
operator|+
name|resource
argument_list|)
throw|;
block|}
name|callbacks
operator|.
name|add
argument_list|(
name|callback
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the time elapsed since the creation of lease.    *    * @return elapsed time in milliseconds    * @throws LeaseExpiredException    *         If the lease has already timed out    */
DECL|method|getElapsedTime ()
specifier|public
name|long
name|getElapsedTime
parameter_list|()
throws|throws
name|LeaseExpiredException
block|{
if|if
condition|(
name|hasExpired
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|LeaseExpiredException
argument_list|(
literal|"Resource: "
operator|+
name|resource
argument_list|)
throw|;
block|}
return|return
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|creationTime
return|;
block|}
comment|/**    * Returns the time available before timeout.    *    * @return remaining time in milliseconds    * @throws LeaseExpiredException    *         If the lease has already timed out    */
DECL|method|getRemainingTime ()
specifier|public
name|long
name|getRemainingTime
parameter_list|()
throws|throws
name|LeaseExpiredException
block|{
if|if
condition|(
name|hasExpired
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|LeaseExpiredException
argument_list|(
literal|"Resource: "
operator|+
name|resource
argument_list|)
throw|;
block|}
return|return
name|leaseTimeout
operator|-
name|getElapsedTime
argument_list|()
return|;
block|}
comment|/**    * Returns total lease lifetime.    *    * @return total lifetime of lease in milliseconds    * @throws LeaseExpiredException    *         If the lease has already timed out    */
DECL|method|getLeaseLifeTime ()
specifier|public
name|long
name|getLeaseLifeTime
parameter_list|()
throws|throws
name|LeaseExpiredException
block|{
if|if
condition|(
name|hasExpired
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|LeaseExpiredException
argument_list|(
literal|"Resource: "
operator|+
name|resource
argument_list|)
throw|;
block|}
return|return
name|leaseTimeout
return|;
block|}
comment|/**    * Renews the lease timeout period.    *    * @param timeout    *        Time to be added to the lease in milliseconds    * @throws LeaseExpiredException    *         If the lease has already timed out    */
DECL|method|renew (long timeout)
specifier|public
name|void
name|renew
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|LeaseExpiredException
block|{
if|if
condition|(
name|hasExpired
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|LeaseExpiredException
argument_list|(
literal|"Resource: "
operator|+
name|resource
argument_list|)
throw|;
block|}
name|leaseTimeout
operator|+=
name|timeout
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|resource
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Lease
condition|)
block|{
return|return
name|resource
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Lease
operator|)
name|obj
operator|)
operator|.
name|resource
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Lease<"
operator|+
name|resource
operator|.
name|toString
argument_list|()
operator|+
literal|">"
return|;
block|}
comment|/**    * Returns the callbacks to be executed for the lease in case of timeout.    *    * @return callbacks to be executed    */
DECL|method|getCallbacks ()
name|List
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|getCallbacks
parameter_list|()
block|{
return|return
name|callbacks
return|;
block|}
comment|/**    * Expires/Invalidates the lease.    */
DECL|method|invalidate ()
name|void
name|invalidate
parameter_list|()
block|{
name|callbacks
operator|=
literal|null
expr_stmt|;
name|expired
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

