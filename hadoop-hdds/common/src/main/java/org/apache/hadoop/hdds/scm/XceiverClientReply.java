begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_comment
comment|/**  * This class represents the Async reply from XceiverClient.  */
end_comment

begin_class
DECL|class|XceiverClientReply
specifier|public
class|class
name|XceiverClientReply
block|{
DECL|field|response
specifier|private
name|CompletableFuture
argument_list|<
name|ContainerCommandResponseProto
argument_list|>
name|response
decl_stmt|;
DECL|field|logIndex
specifier|private
name|Long
name|logIndex
decl_stmt|;
DECL|field|dnId
specifier|private
name|UUID
name|dnId
decl_stmt|;
DECL|method|XceiverClientReply ( CompletableFuture<ContainerCommandResponseProto> response)
specifier|public
name|XceiverClientReply
parameter_list|(
name|CompletableFuture
argument_list|<
name|ContainerCommandResponseProto
argument_list|>
name|response
parameter_list|)
block|{
name|this
argument_list|(
name|response
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|XceiverClientReply ( CompletableFuture<ContainerCommandResponseProto> response, UUID dnId)
specifier|public
name|XceiverClientReply
parameter_list|(
name|CompletableFuture
argument_list|<
name|ContainerCommandResponseProto
argument_list|>
name|response
parameter_list|,
name|UUID
name|dnId
parameter_list|)
block|{
name|this
operator|.
name|logIndex
operator|=
operator|(
name|long
operator|)
literal|0
expr_stmt|;
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|dnId
operator|=
name|dnId
expr_stmt|;
block|}
DECL|method|getResponse ()
specifier|public
name|CompletableFuture
argument_list|<
name|ContainerCommandResponseProto
argument_list|>
name|getResponse
parameter_list|()
block|{
return|return
name|response
return|;
block|}
DECL|method|getLogIndex ()
specifier|public
name|long
name|getLogIndex
parameter_list|()
block|{
return|return
name|logIndex
return|;
block|}
DECL|method|setLogIndex (Long logIndex)
specifier|public
name|void
name|setLogIndex
parameter_list|(
name|Long
name|logIndex
parameter_list|)
block|{
name|this
operator|.
name|logIndex
operator|=
name|logIndex
expr_stmt|;
block|}
DECL|method|getDatanode ()
specifier|public
name|UUID
name|getDatanode
parameter_list|()
block|{
return|return
name|dnId
return|;
block|}
DECL|method|setDatanode (UUID datanodeId)
specifier|public
name|void
name|setDatanode
parameter_list|(
name|UUID
name|datanodeId
parameter_list|)
block|{
name|this
operator|.
name|dnId
operator|=
name|datanodeId
expr_stmt|;
block|}
DECL|method|setResponse ( CompletableFuture<ContainerCommandResponseProto> response)
specifier|public
name|void
name|setResponse
parameter_list|(
name|CompletableFuture
argument_list|<
name|ContainerCommandResponseProto
argument_list|>
name|response
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
block|}
end_class

end_unit

