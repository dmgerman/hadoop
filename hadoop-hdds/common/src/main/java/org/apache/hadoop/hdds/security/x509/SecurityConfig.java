begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.security.x509
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|ssl
operator|.
name|SslProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|provider
operator|.
name|BouncyCastleProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_DEFAULT_KEY_ALGORITHM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_DEFAULT_KEY_LEN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_DEFAULT_SECURITY_PROVIDER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_BLOCK_TOKEN_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_BLOCK_TOKEN_ENABLED_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_GRPC_TLS_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_GRPC_TLS_ENABLED_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_GRPC_TLS_PROVIDER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_GRPC_TLS_PROVIDER_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_GRPC_TLS_TEST_CERT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_GRPC_TLS_TEST_CERT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_GRPC_MUTUAL_TLS_REQUIRED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_GRPC_MUTUAL_TLS_REQUIRED_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_TRUST_STORE_FILE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_TRUST_STORE_FILE_NAME_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_CLIENT_CERTIFICATE_CHAIN_FILE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_CLIENT_CERTIFICATE_CHAIN_FILE_NAME_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_SERVER_CERTIFICATE_CHAIN_FILE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_SERVER_CERTIFICATE_CHAIN_FILE_NAME_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_KEY_ALGORITHM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_KEY_DIR_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_KEY_DIR_NAME_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_KEY_LEN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_METADATA_DIR_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_PRIVATE_KEY_FILE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_PRIVATE_KEY_FILE_NAME_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_PUBLIC_KEY_FILE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_PUBLIC_KEY_FILE_NAME_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_SECURITY_PROVIDER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_X509_DEFAULT_DURATION_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_X509_DEFAULT_DURATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_X509_DIR_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_X509_DIR_NAME_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_X509_FILE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_X509_FILE_NAME_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_X509_MAX_DURATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_X509_MAX_DURATION_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_X509_SIGNATURE_ALGO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_X509_SIGNATURE_ALGO_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|HDDS_DATANODE_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_SECURITY_ENABLED_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_SECURITY_ENABLED_KEY
import|;
end_import

begin_comment
comment|/**  * A class that deals with all Security related configs in HDDS.  *<p>  * This class allows security configs to be read and used consistently across  * all of security related code base.  */
end_comment

begin_class
DECL|class|SecurityConfig
specifier|public
class|class
name|SecurityConfig
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SecurityConfig
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|provider
specifier|private
specifier|static
specifier|volatile
name|Provider
name|provider
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|Configuration
name|configuration
decl_stmt|;
DECL|field|size
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
DECL|field|keyAlgo
specifier|private
specifier|final
name|String
name|keyAlgo
decl_stmt|;
DECL|field|providerString
specifier|private
specifier|final
name|String
name|providerString
decl_stmt|;
DECL|field|metadatDir
specifier|private
specifier|final
name|String
name|metadatDir
decl_stmt|;
DECL|field|keyDir
specifier|private
specifier|final
name|String
name|keyDir
decl_stmt|;
DECL|field|privateKeyFileName
specifier|private
specifier|final
name|String
name|privateKeyFileName
decl_stmt|;
DECL|field|publicKeyFileName
specifier|private
specifier|final
name|String
name|publicKeyFileName
decl_stmt|;
DECL|field|certDuration
specifier|private
specifier|final
name|Duration
name|certDuration
decl_stmt|;
DECL|field|x509SignatureAlgo
specifier|private
specifier|final
name|String
name|x509SignatureAlgo
decl_stmt|;
DECL|field|blockTokenEnabled
specifier|private
specifier|final
name|boolean
name|blockTokenEnabled
decl_stmt|;
DECL|field|certificateDir
specifier|private
specifier|final
name|String
name|certificateDir
decl_stmt|;
DECL|field|certificateFileName
specifier|private
specifier|final
name|String
name|certificateFileName
decl_stmt|;
DECL|field|grpcTlsEnabled
specifier|private
specifier|final
name|boolean
name|grpcTlsEnabled
decl_stmt|;
DECL|field|grpcTlsUseTestCert
specifier|private
name|boolean
name|grpcTlsUseTestCert
decl_stmt|;
DECL|field|trustStoreFileName
specifier|private
name|String
name|trustStoreFileName
decl_stmt|;
DECL|field|serverCertChainFileName
specifier|private
name|String
name|serverCertChainFileName
decl_stmt|;
DECL|field|clientCertChainFileName
specifier|private
name|String
name|clientCertChainFileName
decl_stmt|;
DECL|field|defaultCertDuration
specifier|private
specifier|final
name|Duration
name|defaultCertDuration
decl_stmt|;
DECL|field|isSecurityEnabled
specifier|private
specifier|final
name|boolean
name|isSecurityEnabled
decl_stmt|;
DECL|field|grpcMutualTlsRequired
specifier|private
name|boolean
name|grpcMutualTlsRequired
decl_stmt|;
comment|/**    * Constructs a SecurityConfig.    *    * @param configuration - HDDS Configuration    */
DECL|method|SecurityConfig (Configuration configuration)
specifier|public
name|SecurityConfig
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|configuration
argument_list|,
literal|"Configuration cannot be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|this
operator|.
name|configuration
operator|.
name|getInt
argument_list|(
name|HDDS_KEY_LEN
argument_list|,
name|HDDS_DEFAULT_KEY_LEN
argument_list|)
expr_stmt|;
name|this
operator|.
name|keyAlgo
operator|=
name|this
operator|.
name|configuration
operator|.
name|get
argument_list|(
name|HDDS_KEY_ALGORITHM
argument_list|,
name|HDDS_DEFAULT_KEY_ALGORITHM
argument_list|)
expr_stmt|;
name|this
operator|.
name|providerString
operator|=
name|this
operator|.
name|configuration
operator|.
name|get
argument_list|(
name|HDDS_SECURITY_PROVIDER
argument_list|,
name|HDDS_DEFAULT_SECURITY_PROVIDER
argument_list|)
expr_stmt|;
comment|// Please Note: To make it easy for our customers we will attempt to read
comment|// HDDS metadata dir and if that is not set, we will use Ozone directory.
comment|// TODO: We might want to fix this later.
name|this
operator|.
name|metadatDir
operator|=
name|this
operator|.
name|configuration
operator|.
name|get
argument_list|(
name|HDDS_METADATA_DIR_NAME
argument_list|,
name|configuration
operator|.
name|get
argument_list|(
name|OZONE_METADATA_DIRS
argument_list|,
name|configuration
operator|.
name|get
argument_list|(
name|HDDS_DATANODE_DIR_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|keyDir
operator|=
name|this
operator|.
name|configuration
operator|.
name|get
argument_list|(
name|HDDS_KEY_DIR_NAME
argument_list|,
name|HDDS_KEY_DIR_NAME_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|privateKeyFileName
operator|=
name|this
operator|.
name|configuration
operator|.
name|get
argument_list|(
name|HDDS_PRIVATE_KEY_FILE_NAME
argument_list|,
name|HDDS_PRIVATE_KEY_FILE_NAME_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|publicKeyFileName
operator|=
name|this
operator|.
name|configuration
operator|.
name|get
argument_list|(
name|HDDS_PUBLIC_KEY_FILE_NAME
argument_list|,
name|HDDS_PUBLIC_KEY_FILE_NAME_DEFAULT
argument_list|)
expr_stmt|;
name|String
name|durationString
init|=
name|this
operator|.
name|configuration
operator|.
name|get
argument_list|(
name|HDDS_X509_MAX_DURATION
argument_list|,
name|HDDS_X509_MAX_DURATION_DEFAULT
argument_list|)
decl_stmt|;
name|this
operator|.
name|certDuration
operator|=
name|Duration
operator|.
name|parse
argument_list|(
name|durationString
argument_list|)
expr_stmt|;
name|this
operator|.
name|x509SignatureAlgo
operator|=
name|this
operator|.
name|configuration
operator|.
name|get
argument_list|(
name|HDDS_X509_SIGNATURE_ALGO
argument_list|,
name|HDDS_X509_SIGNATURE_ALGO_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|certificateDir
operator|=
name|this
operator|.
name|configuration
operator|.
name|get
argument_list|(
name|HDDS_X509_DIR_NAME
argument_list|,
name|HDDS_X509_DIR_NAME_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|certificateFileName
operator|=
name|this
operator|.
name|configuration
operator|.
name|get
argument_list|(
name|HDDS_X509_FILE_NAME
argument_list|,
name|HDDS_X509_FILE_NAME_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockTokenEnabled
operator|=
name|this
operator|.
name|configuration
operator|.
name|getBoolean
argument_list|(
name|HDDS_BLOCK_TOKEN_ENABLED
argument_list|,
name|HDDS_BLOCK_TOKEN_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|grpcTlsEnabled
operator|=
name|this
operator|.
name|configuration
operator|.
name|getBoolean
argument_list|(
name|HDDS_GRPC_TLS_ENABLED
argument_list|,
name|HDDS_GRPC_TLS_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|grpcTlsEnabled
condition|)
block|{
name|this
operator|.
name|grpcMutualTlsRequired
operator|=
name|configuration
operator|.
name|getBoolean
argument_list|(
name|HDDS_GRPC_MUTUAL_TLS_REQUIRED
argument_list|,
name|HDDS_GRPC_MUTUAL_TLS_REQUIRED_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|trustStoreFileName
operator|=
name|this
operator|.
name|configuration
operator|.
name|get
argument_list|(
name|HDDS_TRUST_STORE_FILE_NAME
argument_list|,
name|HDDS_TRUST_STORE_FILE_NAME_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|clientCertChainFileName
operator|=
name|this
operator|.
name|configuration
operator|.
name|get
argument_list|(
name|HDDS_CLIENT_CERTIFICATE_CHAIN_FILE_NAME
argument_list|,
name|HDDS_CLIENT_CERTIFICATE_CHAIN_FILE_NAME_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverCertChainFileName
operator|=
name|this
operator|.
name|configuration
operator|.
name|get
argument_list|(
name|HDDS_SERVER_CERTIFICATE_CHAIN_FILE_NAME
argument_list|,
name|HDDS_SERVER_CERTIFICATE_CHAIN_FILE_NAME_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|grpcTlsUseTestCert
operator|=
name|this
operator|.
name|configuration
operator|.
name|getBoolean
argument_list|(
name|HDDS_GRPC_TLS_TEST_CERT
argument_list|,
name|HDDS_GRPC_TLS_TEST_CERT_DEFAULT
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|isSecurityEnabled
operator|=
name|this
operator|.
name|configuration
operator|.
name|getBoolean
argument_list|(
name|OZONE_SECURITY_ENABLED_KEY
argument_list|,
name|OZONE_SECURITY_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
name|String
name|certDurationString
init|=
name|this
operator|.
name|configuration
operator|.
name|get
argument_list|(
name|HDDS_X509_DEFAULT_DURATION
argument_list|,
name|HDDS_X509_DEFAULT_DURATION_DEFAULT
argument_list|)
decl_stmt|;
name|defaultCertDuration
operator|=
name|Duration
operator|.
name|parse
argument_list|(
name|certDurationString
argument_list|)
expr_stmt|;
comment|// First Startup -- if the provider is null, check for the provider.
if|if
condition|(
name|SecurityConfig
operator|.
name|provider
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|SecurityConfig
operator|.
name|class
init|)
block|{
name|provider
operator|=
name|Security
operator|.
name|getProvider
argument_list|(
name|this
operator|.
name|providerString
argument_list|)
expr_stmt|;
if|if
condition|(
name|SecurityConfig
operator|.
name|provider
operator|==
literal|null
condition|)
block|{
comment|// Provider not found, let us try to Dynamically initialize the
comment|// provider.
name|provider
operator|=
name|initSecurityProvider
argument_list|(
name|this
operator|.
name|providerString
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Returns true if security is enabled for OzoneCluster. This is determined    * by value of OZONE_SECURITY_ENABLED_KEY.    *    * @return true if security is enabled for OzoneCluster.    */
DECL|method|isSecurityEnabled ()
specifier|public
name|boolean
name|isSecurityEnabled
parameter_list|()
block|{
return|return
name|isSecurityEnabled
return|;
block|}
comment|/**    * Returns the Default Certificate Duration.    *    * @return Duration for the default certificate issue.    */
DECL|method|getDefaultCertDuration ()
specifier|public
name|Duration
name|getDefaultCertDuration
parameter_list|()
block|{
return|return
name|defaultCertDuration
return|;
block|}
comment|/**    * Returns the Standard Certificate file name.    *    * @return String - Name of the Certificate File.    */
DECL|method|getCertificateFileName ()
specifier|public
name|String
name|getCertificateFileName
parameter_list|()
block|{
return|return
name|certificateFileName
return|;
block|}
comment|/**    * Returns the public key file name, This is used for storing the public keys    * on disk.    *    * @return String, File name used for public keys.    */
DECL|method|getPublicKeyFileName ()
specifier|public
name|String
name|getPublicKeyFileName
parameter_list|()
block|{
return|return
name|publicKeyFileName
return|;
block|}
comment|/**    * Returns the private key file name.This is used for storing the private keys    * on disk.    *    * @return String, File name used for private keys.    */
DECL|method|getPrivateKeyFileName ()
specifier|public
name|String
name|getPrivateKeyFileName
parameter_list|()
block|{
return|return
name|privateKeyFileName
return|;
block|}
comment|/**    * Returns the File path to where keys are stored.    *    * @return path Key location.    */
DECL|method|getKeyLocation ()
specifier|public
name|Path
name|getKeyLocation
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|this
operator|.
name|metadatDir
argument_list|,
literal|"Metadata directory can't be"
operator|+
literal|" null. Please check configs."
argument_list|)
expr_stmt|;
return|return
name|Paths
operator|.
name|get
argument_list|(
name|metadatDir
argument_list|,
name|keyDir
argument_list|)
return|;
block|}
comment|/**    * Returns the File path to where keys are stored with an additional component    * name inserted in between.    *    * @param component - Component Name - String.    * @return Path location.    */
DECL|method|getKeyLocation (String component)
specifier|public
name|Path
name|getKeyLocation
parameter_list|(
name|String
name|component
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|this
operator|.
name|metadatDir
argument_list|,
literal|"Metadata directory can't be"
operator|+
literal|" null. Please check configs."
argument_list|)
expr_stmt|;
return|return
name|Paths
operator|.
name|get
argument_list|(
name|metadatDir
argument_list|,
name|component
argument_list|,
name|keyDir
argument_list|)
return|;
block|}
comment|/**    * Returns the File path to where keys are stored.    *    * @return path Key location.    */
DECL|method|getCertificateLocation ()
specifier|public
name|Path
name|getCertificateLocation
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|this
operator|.
name|metadatDir
argument_list|,
literal|"Metadata directory can't be"
operator|+
literal|" null. Please check configs."
argument_list|)
expr_stmt|;
return|return
name|Paths
operator|.
name|get
argument_list|(
name|metadatDir
argument_list|,
name|certificateDir
argument_list|)
return|;
block|}
comment|/**    * Returns the File path to where keys are stored with an addition component    * name inserted in between.    *    * @param component - Component Name - String.    * @return Path location.    */
DECL|method|getCertificateLocation (String component)
specifier|public
name|Path
name|getCertificateLocation
parameter_list|(
name|String
name|component
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|this
operator|.
name|metadatDir
argument_list|,
literal|"Metadata directory can't be"
operator|+
literal|" null. Please check configs."
argument_list|)
expr_stmt|;
return|return
name|Paths
operator|.
name|get
argument_list|(
name|metadatDir
argument_list|,
name|component
argument_list|,
name|certificateDir
argument_list|)
return|;
block|}
comment|/**    * Gets the Key Size, The default key size is 2048, since the default    * algorithm used is RSA. User can change this by setting the "hdds.key.len"    * in configuration.    *    * @return key size.    */
DECL|method|getSize ()
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/**    * Returns the Provider name. SCM defaults to using Bouncy Castle and will    * return "BC".    *    * @return String Provider name.    */
DECL|method|getProvider ()
specifier|public
name|String
name|getProvider
parameter_list|()
block|{
return|return
name|providerString
return|;
block|}
comment|/**    * Returns the Key generation Algorithm used.  User can change this by setting    * the "hdds.key.algo" in configuration.    *    * @return String Algo.    */
DECL|method|getKeyAlgo ()
specifier|public
name|String
name|getKeyAlgo
parameter_list|()
block|{
return|return
name|keyAlgo
return|;
block|}
comment|/**    * Returns the X.509 Signature Algorithm used. This can be changed by setting    * "hdds.x509.signature.algorithm" to the new name. The default algorithm is    * SHA256withRSA.    *    * @return String    */
DECL|method|getSignatureAlgo ()
specifier|public
name|String
name|getSignatureAlgo
parameter_list|()
block|{
return|return
name|x509SignatureAlgo
return|;
block|}
comment|/**    * Returns the Configuration used for initializing this SecurityConfig.    *    * @return Configuration    */
DECL|method|getConfiguration ()
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
comment|/**    * Returns the maximum length a certificate can be valid in SCM. The default    * value is 5 years. This can be changed by setting "hdds.x509.max.duration"    * in configuration. The formats accepted are based on the ISO-8601 duration    * format PnDTnHnMn.nS    *<p>    * Default value is 5 years and written as P1865D.    *    * @return Duration.    */
DECL|method|getMaxCertificateDuration ()
specifier|public
name|Duration
name|getMaxCertificateDuration
parameter_list|()
block|{
return|return
name|this
operator|.
name|certDuration
return|;
block|}
DECL|method|isBlockTokenEnabled ()
specifier|public
name|boolean
name|isBlockTokenEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
name|blockTokenEnabled
return|;
block|}
comment|/**    * Returns true if TLS is enabled for gRPC services.    * @return true if TLS is enabled for gRPC services.    */
DECL|method|isGrpcTlsEnabled ()
specifier|public
name|boolean
name|isGrpcTlsEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
name|grpcTlsEnabled
return|;
block|}
comment|/**    * Returns true if TLS mutual authentication is enabled for gRPC services.    * @return true if TLS is enabled for gRPC services.    */
DECL|method|isGrpcMutualTlsRequired ()
specifier|public
name|boolean
name|isGrpcMutualTlsRequired
parameter_list|()
block|{
return|return
name|this
operator|.
name|grpcMutualTlsRequired
return|;
block|}
comment|/**    * Returns the TLS-enabled gRPC client private key file(Only needed for mutual    * authentication).    * @return the TLS-enabled gRPC client private key file.    */
DECL|method|getClientPrivateKeyFile ()
specifier|public
name|File
name|getClientPrivateKeyFile
parameter_list|()
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|getKeyLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"client."
operator|+
name|privateKeyFileName
argument_list|)
operator|.
name|toFile
argument_list|()
return|;
block|}
comment|/**    * Returns the TLS-enabled gRPC server private key file.    * @return the TLS-enabled gRPC server private key file.    */
DECL|method|getServerPrivateKeyFile ()
specifier|public
name|File
name|getServerPrivateKeyFile
parameter_list|()
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|getKeyLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"server."
operator|+
name|privateKeyFileName
argument_list|)
operator|.
name|toFile
argument_list|()
return|;
block|}
comment|/**    * Get the trusted CA certificate file. (CA certificate)    * @return the trusted CA certificate.    */
DECL|method|getTrustStoreFile ()
specifier|public
name|File
name|getTrustStoreFile
parameter_list|()
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|getKeyLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|trustStoreFileName
argument_list|)
operator|.
name|toFile
argument_list|()
return|;
block|}
comment|/**    * Get the TLS-enabled gRPC Client certificate chain file (only needed for    * mutual authentication).    * @return the TLS-enabled gRPC Server certificate chain file.    */
DECL|method|getClientCertChainFile ()
specifier|public
name|File
name|getClientCertChainFile
parameter_list|()
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|getKeyLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|clientCertChainFileName
argument_list|)
operator|.
name|toFile
argument_list|()
return|;
block|}
comment|/**    * Get the TLS-enabled gRPC Server certificate chain file.    * @return the TLS-enabled gRPC Server certificate chain file.    */
DECL|method|getServerCertChainFile ()
specifier|public
name|File
name|getServerCertChainFile
parameter_list|()
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|getKeyLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|serverCertChainFileName
argument_list|)
operator|.
name|toFile
argument_list|()
return|;
block|}
comment|/**    * Get the gRPC TLS provider.    * @return the gRPC TLS Provider.    */
DECL|method|getGrpcSslProvider ()
specifier|public
name|SslProvider
name|getGrpcSslProvider
parameter_list|()
block|{
return|return
name|SslProvider
operator|.
name|valueOf
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|HDDS_GRPC_TLS_PROVIDER
argument_list|,
name|HDDS_GRPC_TLS_PROVIDER_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Return true if using test certificates with authority as localhost.    * This should be used only for unit test where certifiates are generated    * by openssl with localhost as DN and should never use for production as it    * will bypass the hostname/ip matching verification.    * @return true if using test certificates.    */
DECL|method|useTestCert ()
specifier|public
name|boolean
name|useTestCert
parameter_list|()
block|{
return|return
name|grpcTlsUseTestCert
return|;
block|}
comment|/**    * Adds a security provider dynamically if it is not loaded already.    *    * @param providerName - name of the provider.    */
DECL|method|initSecurityProvider (String providerName)
specifier|private
name|Provider
name|initSecurityProvider
parameter_list|(
name|String
name|providerName
parameter_list|)
block|{
switch|switch
condition|(
name|providerName
condition|)
block|{
case|case
literal|"BC"
case|:
name|Security
operator|.
name|addProvider
argument_list|(
operator|new
name|BouncyCastleProvider
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Security
operator|.
name|getProvider
argument_list|(
name|providerName
argument_list|)
return|;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Security Provider:{} is unknown"
argument_list|,
name|provider
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Unknown security provider:"
operator|+
name|provider
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

