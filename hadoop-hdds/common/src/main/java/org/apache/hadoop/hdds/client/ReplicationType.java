begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_comment
comment|/**  * The replication type to be used while writing key into ozone.  */
end_comment

begin_enum
DECL|enum|ReplicationType
specifier|public
enum|enum
name|ReplicationType
block|{
DECL|enumConstant|RATIS
name|RATIS
block|,
DECL|enumConstant|STAND_ALONE
name|STAND_ALONE
block|,
DECL|enumConstant|CHAINED
name|CHAINED
block|;
DECL|method|fromProto ( HddsProtos.ReplicationType replicationType)
specifier|public
specifier|static
name|ReplicationType
name|fromProto
parameter_list|(
name|HddsProtos
operator|.
name|ReplicationType
name|replicationType
parameter_list|)
block|{
if|if
condition|(
name|replicationType
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|replicationType
condition|)
block|{
case|case
name|RATIS
case|:
return|return
name|ReplicationType
operator|.
name|RATIS
return|;
case|case
name|STAND_ALONE
case|:
return|return
name|ReplicationType
operator|.
name|STAND_ALONE
return|;
case|case
name|CHAINED
case|:
return|return
name|ReplicationType
operator|.
name|CHAINED
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported ProtoBuf replication type: "
operator|+
name|replicationType
argument_list|)
throw|;
block|}
block|}
block|}
end_enum

end_unit

