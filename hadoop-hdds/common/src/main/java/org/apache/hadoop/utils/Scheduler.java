begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.ââSee the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.ââThe ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.ââYou may obtain a copy of the License at  *  * ââââ http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|function
operator|.
name|CheckedRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * This class encapsulates ScheduledExecutorService.  */
end_comment

begin_class
DECL|class|Scheduler
specifier|public
class|class
name|Scheduler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Scheduler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|scheduler
specifier|private
name|ScheduledExecutorService
name|scheduler
decl_stmt|;
DECL|field|isClosed
specifier|private
specifier|volatile
name|boolean
name|isClosed
decl_stmt|;
DECL|field|threadName
specifier|private
name|String
name|threadName
decl_stmt|;
comment|/**    * Creates a ScheduledExecutorService based on input arguments.    * @param threadName - thread name    * @param isDaemon - if true the threads in the scheduler are started as    *                 daemon    * @param numCoreThreads - number of core threads to maintain in the scheduler    */
DECL|method|Scheduler (String threadName, boolean isDaemon, int numCoreThreads)
specifier|public
name|Scheduler
parameter_list|(
name|String
name|threadName
parameter_list|,
name|boolean
name|isDaemon
parameter_list|,
name|int
name|numCoreThreads
parameter_list|)
block|{
name|scheduler
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
name|numCoreThreads
argument_list|,
name|r
lambda|->
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|t
operator|.
name|setName
argument_list|(
name|threadName
argument_list|)
expr_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
name|isDaemon
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadName
operator|=
name|threadName
expr_stmt|;
name|isClosed
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|schedule (Runnable runnable, long delay, TimeUnit timeUnit)
specifier|public
name|void
name|schedule
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|scheduler
operator|.
name|schedule
argument_list|(
name|runnable
argument_list|,
name|delay
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
DECL|method|schedule (CheckedRunnable runnable, long delay, TimeUnit timeUnit, Logger logger, String errMsg)
specifier|public
name|void
name|schedule
parameter_list|(
name|CheckedRunnable
name|runnable
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|,
name|Logger
name|logger
parameter_list|,
name|String
name|errMsg
parameter_list|)
block|{
name|scheduler
operator|.
name|schedule
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|errMsg
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|delay
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
DECL|method|scheduleWithFixedDelay (Runnable runnable, long initialDelay, long fixedDelay, TimeUnit timeUnit)
specifier|public
name|void
name|scheduleWithFixedDelay
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|long
name|initialDelay
parameter_list|,
name|long
name|fixedDelay
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|scheduler
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|runnable
argument_list|,
name|initialDelay
argument_list|,
name|fixedDelay
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
DECL|method|isClosed ()
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|isClosed
return|;
block|}
comment|/**    * Closes the scheduler for further task submission. Any pending tasks not    * yet executed are also cancelled. For the executing tasks the scheduler    * waits 60 seconds for completion.    */
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
name|isClosed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|scheduler
operator|!=
literal|null
condition|)
block|{
name|scheduler
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
try|try
block|{
name|scheduler
operator|.
name|awaitTermination
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|threadName
operator|+
literal|" interrupted while waiting for task completion {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|scheduler
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

