begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.utils.db.cache
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * CacheResult which is returned as response for Key exist in cache or not.  * @param<CACHEVALUE>  */
end_comment

begin_class
DECL|class|CacheResult
specifier|public
class|class
name|CacheResult
parameter_list|<
name|CACHEVALUE
extends|extends
name|CacheValue
parameter_list|>
block|{
DECL|field|cacheStatus
specifier|private
name|CacheStatus
name|cacheStatus
decl_stmt|;
DECL|field|cachevalue
specifier|private
name|CACHEVALUE
name|cachevalue
decl_stmt|;
DECL|method|CacheResult (CacheStatus cacheStatus, CACHEVALUE cachevalue)
specifier|public
name|CacheResult
parameter_list|(
name|CacheStatus
name|cacheStatus
parameter_list|,
name|CACHEVALUE
name|cachevalue
parameter_list|)
block|{
name|this
operator|.
name|cacheStatus
operator|=
name|cacheStatus
expr_stmt|;
name|this
operator|.
name|cachevalue
operator|=
name|cachevalue
expr_stmt|;
block|}
DECL|method|getCacheStatus ()
specifier|public
name|CacheStatus
name|getCacheStatus
parameter_list|()
block|{
return|return
name|cacheStatus
return|;
block|}
DECL|method|getValue ()
specifier|public
name|CACHEVALUE
name|getValue
parameter_list|()
block|{
return|return
name|cachevalue
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|CacheResult
argument_list|<
name|?
argument_list|>
name|that
init|=
operator|(
name|CacheResult
argument_list|<
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
name|cacheStatus
operator|==
name|that
operator|.
name|cacheStatus
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|cachevalue
argument_list|,
name|that
operator|.
name|cachevalue
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|cacheStatus
argument_list|,
name|cachevalue
argument_list|)
return|;
block|}
comment|/**    * Status which tells whether key exists in cache or not.    */
DECL|enum|CacheStatus
specifier|public
enum|enum
name|CacheStatus
block|{
DECL|enumConstant|EXISTS
name|EXISTS
block|,
comment|// When key exists in cache.
DECL|enumConstant|NOT_EXIST
name|NOT_EXIST
block|,
comment|// We guarantee that it does not exist. This will be returned
comment|// when the key does not exist in cache, when cache clean up policy is
comment|// NEVER.
DECL|enumConstant|MAY_EXIST
name|MAY_EXIST
comment|// This will be returned when the key does not exist in
comment|// cache, when cache clean up policy is MANUAL. So caller need to check
comment|// if it might exist in it's rocksdb table.
block|}
block|}
end_class

end_unit

