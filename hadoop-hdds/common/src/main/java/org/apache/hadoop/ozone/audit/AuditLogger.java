begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.audit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Marker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|spi
operator|.
name|ExtendedLogger
import|;
end_import

begin_comment
comment|/**  * Class to define Audit Logger for Ozone.  */
end_comment

begin_class
DECL|class|AuditLogger
specifier|public
class|class
name|AuditLogger
block|{
DECL|field|logger
specifier|private
name|ExtendedLogger
name|logger
decl_stmt|;
DECL|field|FQCN
specifier|private
specifier|static
specifier|final
name|String
name|FQCN
init|=
name|AuditLogger
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|WRITE_MARKER
specifier|private
specifier|static
specifier|final
name|Marker
name|WRITE_MARKER
init|=
name|AuditMarker
operator|.
name|WRITE
operator|.
name|getMarker
argument_list|()
decl_stmt|;
DECL|field|READ_MARKER
specifier|private
specifier|static
specifier|final
name|Marker
name|READ_MARKER
init|=
name|AuditMarker
operator|.
name|READ
operator|.
name|getMarker
argument_list|()
decl_stmt|;
comment|/**    * Parametrized Constructor to initialize logger.    * @param type Audit Logger Type    */
DECL|method|AuditLogger (AuditLoggerType type)
specifier|public
name|AuditLogger
parameter_list|(
name|AuditLoggerType
name|type
parameter_list|)
block|{
name|initializeLogger
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initializes the logger with specific type.    * @param loggerType specified one of the values from enum AuditLoggerType.    */
DECL|method|initializeLogger (AuditLoggerType loggerType)
specifier|private
name|void
name|initializeLogger
parameter_list|(
name|AuditLoggerType
name|loggerType
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|LogManager
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
operator|.
name|getLogger
argument_list|(
name|loggerType
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getLogger ()
specifier|public
name|ExtendedLogger
name|getLogger
parameter_list|()
block|{
return|return
name|logger
return|;
block|}
DECL|method|logWriteSuccess (AuditMessage msg)
specifier|public
name|void
name|logWriteSuccess
parameter_list|(
name|AuditMessage
name|msg
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|.
name|logIfEnabled
argument_list|(
name|FQCN
argument_list|,
name|Level
operator|.
name|INFO
argument_list|,
name|WRITE_MARKER
argument_list|,
name|msg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|logWriteFailure (AuditMessage msg)
specifier|public
name|void
name|logWriteFailure
parameter_list|(
name|AuditMessage
name|msg
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|.
name|logIfEnabled
argument_list|(
name|FQCN
argument_list|,
name|Level
operator|.
name|ERROR
argument_list|,
name|WRITE_MARKER
argument_list|,
name|msg
argument_list|,
name|msg
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|logReadSuccess (AuditMessage msg)
specifier|public
name|void
name|logReadSuccess
parameter_list|(
name|AuditMessage
name|msg
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|.
name|logIfEnabled
argument_list|(
name|FQCN
argument_list|,
name|Level
operator|.
name|INFO
argument_list|,
name|READ_MARKER
argument_list|,
name|msg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|logReadFailure (AuditMessage msg)
specifier|public
name|void
name|logReadFailure
parameter_list|(
name|AuditMessage
name|msg
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|.
name|logIfEnabled
argument_list|(
name|FQCN
argument_list|,
name|Level
operator|.
name|ERROR
argument_list|,
name|READ_MARKER
argument_list|,
name|msg
argument_list|,
name|msg
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|logWrite (AuditMessage auditMessage)
specifier|public
name|void
name|logWrite
parameter_list|(
name|AuditMessage
name|auditMessage
parameter_list|)
block|{
if|if
condition|(
name|auditMessage
operator|.
name|getThrowable
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|logger
operator|.
name|logIfEnabled
argument_list|(
name|FQCN
argument_list|,
name|Level
operator|.
name|INFO
argument_list|,
name|WRITE_MARKER
argument_list|,
name|auditMessage
argument_list|,
name|auditMessage
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|logger
operator|.
name|logIfEnabled
argument_list|(
name|FQCN
argument_list|,
name|Level
operator|.
name|ERROR
argument_list|,
name|WRITE_MARKER
argument_list|,
name|auditMessage
argument_list|,
name|auditMessage
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

