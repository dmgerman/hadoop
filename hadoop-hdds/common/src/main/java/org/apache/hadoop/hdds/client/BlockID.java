begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * BlockID of Ozone (containerID + localID + blockCommitSequenceId).  */
end_comment

begin_class
DECL|class|BlockID
specifier|public
class|class
name|BlockID
block|{
DECL|field|containerBlockID
specifier|private
name|ContainerBlockID
name|containerBlockID
decl_stmt|;
DECL|field|blockCommitSequenceId
specifier|private
name|long
name|blockCommitSequenceId
decl_stmt|;
DECL|method|BlockID (long containerID, long localID)
specifier|public
name|BlockID
parameter_list|(
name|long
name|containerID
parameter_list|,
name|long
name|localID
parameter_list|)
block|{
name|this
argument_list|(
name|containerID
argument_list|,
name|localID
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|BlockID (long containerID, long localID, long bcsID)
specifier|private
name|BlockID
parameter_list|(
name|long
name|containerID
parameter_list|,
name|long
name|localID
parameter_list|,
name|long
name|bcsID
parameter_list|)
block|{
name|containerBlockID
operator|=
operator|new
name|ContainerBlockID
argument_list|(
name|containerID
argument_list|,
name|localID
argument_list|)
expr_stmt|;
name|blockCommitSequenceId
operator|=
name|bcsID
expr_stmt|;
block|}
DECL|method|BlockID (ContainerBlockID containerBlockID)
specifier|public
name|BlockID
parameter_list|(
name|ContainerBlockID
name|containerBlockID
parameter_list|)
block|{
name|this
argument_list|(
name|containerBlockID
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|BlockID (ContainerBlockID containerBlockID, long bcsId)
specifier|private
name|BlockID
parameter_list|(
name|ContainerBlockID
name|containerBlockID
parameter_list|,
name|long
name|bcsId
parameter_list|)
block|{
name|this
operator|.
name|containerBlockID
operator|=
name|containerBlockID
expr_stmt|;
name|blockCommitSequenceId
operator|=
name|bcsId
expr_stmt|;
block|}
DECL|method|getContainerID ()
specifier|public
name|long
name|getContainerID
parameter_list|()
block|{
return|return
name|containerBlockID
operator|.
name|getContainerID
argument_list|()
return|;
block|}
DECL|method|getLocalID ()
specifier|public
name|long
name|getLocalID
parameter_list|()
block|{
return|return
name|containerBlockID
operator|.
name|getLocalID
argument_list|()
return|;
block|}
DECL|method|getBlockCommitSequenceId ()
specifier|public
name|long
name|getBlockCommitSequenceId
parameter_list|()
block|{
return|return
name|blockCommitSequenceId
return|;
block|}
DECL|method|setBlockCommitSequenceId (long blockCommitSequenceId)
specifier|public
name|void
name|setBlockCommitSequenceId
parameter_list|(
name|long
name|blockCommitSequenceId
parameter_list|)
block|{
name|this
operator|.
name|blockCommitSequenceId
operator|=
name|blockCommitSequenceId
expr_stmt|;
block|}
DECL|method|getContainerBlockID ()
specifier|public
name|ContainerBlockID
name|getContainerBlockID
parameter_list|()
block|{
return|return
name|containerBlockID
return|;
block|}
DECL|method|setContainerBlockID (ContainerBlockID containerBlockID)
specifier|public
name|void
name|setContainerBlockID
parameter_list|(
name|ContainerBlockID
name|containerBlockID
parameter_list|)
block|{
name|this
operator|.
name|containerBlockID
operator|=
name|containerBlockID
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuffer
argument_list|()
operator|.
name|append
argument_list|(
name|getContainerBlockID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" bcId: "
argument_list|)
operator|.
name|append
argument_list|(
name|blockCommitSequenceId
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getDatanodeBlockIDProtobuf ()
specifier|public
name|ContainerProtos
operator|.
name|DatanodeBlockID
name|getDatanodeBlockIDProtobuf
parameter_list|()
block|{
return|return
name|ContainerProtos
operator|.
name|DatanodeBlockID
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerID
argument_list|(
name|containerBlockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|setLocalID
argument_list|(
name|containerBlockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
operator|.
name|setBlockCommitSequenceId
argument_list|(
name|blockCommitSequenceId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getFromProtobuf ( ContainerProtos.DatanodeBlockID blockID)
specifier|public
specifier|static
name|BlockID
name|getFromProtobuf
parameter_list|(
name|ContainerProtos
operator|.
name|DatanodeBlockID
name|blockID
parameter_list|)
block|{
return|return
operator|new
name|BlockID
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
name|blockID
operator|.
name|getBlockCommitSequenceId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getProtobuf ()
specifier|public
name|HddsProtos
operator|.
name|BlockID
name|getProtobuf
parameter_list|()
block|{
return|return
name|HddsProtos
operator|.
name|BlockID
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerBlockID
argument_list|(
name|containerBlockID
operator|.
name|getProtobuf
argument_list|()
argument_list|)
operator|.
name|setBlockCommitSequenceId
argument_list|(
name|blockCommitSequenceId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getFromProtobuf (HddsProtos.BlockID blockID)
specifier|public
specifier|static
name|BlockID
name|getFromProtobuf
parameter_list|(
name|HddsProtos
operator|.
name|BlockID
name|blockID
parameter_list|)
block|{
return|return
operator|new
name|BlockID
argument_list|(
name|ContainerBlockID
operator|.
name|getFromProtobuf
argument_list|(
name|blockID
operator|.
name|getContainerBlockID
argument_list|()
argument_list|)
argument_list|,
name|blockID
operator|.
name|getBlockCommitSequenceId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|BlockID
name|blockID
init|=
operator|(
name|BlockID
operator|)
name|o
decl_stmt|;
return|return
name|containerBlockID
operator|.
name|equals
argument_list|(
name|blockID
operator|.
name|getContainerBlockID
argument_list|()
argument_list|)
operator|&&
name|blockCommitSequenceId
operator|==
name|blockID
operator|.
name|getBlockCommitSequenceId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|containerBlockID
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|containerBlockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
name|blockCommitSequenceId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

