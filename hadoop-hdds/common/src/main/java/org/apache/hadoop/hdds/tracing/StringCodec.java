begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.tracing
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|tracing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|io
operator|.
name|jaegertracing
operator|.
name|internal
operator|.
name|JaegerSpanContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|jaegertracing
operator|.
name|internal
operator|.
name|exceptions
operator|.
name|EmptyTracerStateStringException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|jaegertracing
operator|.
name|internal
operator|.
name|exceptions
operator|.
name|MalformedTracerStateStringException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|jaegertracing
operator|.
name|internal
operator|.
name|exceptions
operator|.
name|TraceIdOutOfBoundException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|jaegertracing
operator|.
name|spi
operator|.
name|Codec
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|propagation
operator|.
name|Format
import|;
end_import

begin_comment
comment|/**  * A jaeger codec to save the current tracing context t a string.  */
end_comment

begin_class
DECL|class|StringCodec
specifier|public
class|class
name|StringCodec
implements|implements
name|Codec
argument_list|<
name|StringBuilder
argument_list|>
block|{
DECL|field|FORMAT
specifier|public
specifier|static
specifier|final
name|StringFormat
name|FORMAT
init|=
operator|new
name|StringFormat
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|extract (StringBuilder s)
specifier|public
name|JaegerSpanContext
name|extract
parameter_list|(
name|StringBuilder
name|s
parameter_list|)
block|{
name|String
name|value
init|=
name|s
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|value
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
throw|throw
operator|new
name|MalformedTracerStateStringException
argument_list|(
name|value
argument_list|)
throw|;
block|}
else|else
block|{
name|String
name|traceId
init|=
name|parts
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|traceId
operator|.
name|length
argument_list|()
operator|<=
literal|32
operator|&&
name|traceId
operator|.
name|length
argument_list|()
operator|>=
literal|1
condition|)
block|{
return|return
operator|new
name|JaegerSpanContext
argument_list|(
name|high
argument_list|(
name|traceId
argument_list|)
argument_list|,
operator|(
operator|new
name|BigInteger
argument_list|(
name|traceId
argument_list|,
literal|16
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
operator|(
operator|new
name|BigInteger
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|,
literal|16
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
operator|(
operator|new
name|BigInteger
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|,
literal|16
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
operator|(
operator|new
name|BigInteger
argument_list|(
name|parts
index|[
literal|3
index|]
argument_list|,
literal|16
argument_list|)
operator|)
operator|.
name|byteValue
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|TraceIdOutOfBoundException
argument_list|(
literal|"Trace id ["
operator|+
name|traceId
operator|+
literal|"] length is not withing 1 and 32"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|EmptyTracerStateStringException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|inject (JaegerSpanContext context, StringBuilder string)
specifier|public
name|void
name|inject
parameter_list|(
name|JaegerSpanContext
name|context
parameter_list|,
name|StringBuilder
name|string
parameter_list|)
block|{
name|int
name|intFlag
init|=
name|context
operator|.
name|getFlags
argument_list|()
operator|&
literal|255
decl_stmt|;
name|string
operator|.
name|append
argument_list|(
name|context
operator|.
name|getTraceId
argument_list|()
operator|+
literal|":"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|context
operator|.
name|getSpanId
argument_list|()
argument_list|)
operator|+
literal|":"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|context
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|+
literal|":"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|intFlag
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|high (String hexString)
specifier|private
specifier|static
name|long
name|high
parameter_list|(
name|String
name|hexString
parameter_list|)
block|{
if|if
condition|(
name|hexString
operator|.
name|length
argument_list|()
operator|>
literal|16
condition|)
block|{
name|int
name|highLength
init|=
name|hexString
operator|.
name|length
argument_list|()
operator|-
literal|16
decl_stmt|;
name|String
name|highString
init|=
name|hexString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|highLength
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|BigInteger
argument_list|(
name|highString
argument_list|,
literal|16
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0L
return|;
block|}
block|}
comment|/**    * The format to save the context as text.    *<p>    * Using the mutable StringBuilder instead of plain String.    */
DECL|class|StringFormat
specifier|public
specifier|static
specifier|final
class|class
name|StringFormat
implements|implements
name|Format
argument_list|<
name|StringBuilder
argument_list|>
block|{   }
block|}
end_class

end_unit

