begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.security.x509.keys
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|keys
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchProviderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|InvalidKeySpecException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|PKCS8EncodedKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|X509EncodedKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|SecurityConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|exceptions
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|ASN1ObjectIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|ASN1Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|ASN1Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|pkcs
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|pkcs
operator|.
name|PKCSObjectIdentifiers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x500
operator|.
name|X500Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|Extensions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|pkcs
operator|.
name|PKCS10CertificationRequest
import|;
end_import

begin_comment
comment|/**  * Utility functions for Security modules for Ozone.  */
end_comment

begin_class
DECL|class|SecurityUtil
specifier|public
specifier|final
class|class
name|SecurityUtil
block|{
comment|// Ozone Certificate distinguished format: (CN=Subject,OU=ScmID,O=ClusterID).
DECL|field|DISTINGUISHED_NAME_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|DISTINGUISHED_NAME_FORMAT
init|=
literal|"CN=%s,OU=%s,O=%s"
decl_stmt|;
DECL|method|SecurityUtil ()
specifier|private
name|SecurityUtil
parameter_list|()
block|{   }
DECL|method|getDistinguishedNameFormat ()
specifier|public
specifier|static
name|String
name|getDistinguishedNameFormat
parameter_list|()
block|{
return|return
name|DISTINGUISHED_NAME_FORMAT
return|;
block|}
DECL|method|getDistinguishedName (String subject, String scmID, String clusterID)
specifier|public
specifier|static
name|X500Name
name|getDistinguishedName
parameter_list|(
name|String
name|subject
parameter_list|,
name|String
name|scmID
parameter_list|,
name|String
name|clusterID
parameter_list|)
block|{
return|return
operator|new
name|X500Name
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|getDistinguishedNameFormat
argument_list|()
argument_list|,
name|subject
argument_list|,
name|scmID
argument_list|,
name|clusterID
argument_list|)
argument_list|)
return|;
block|}
comment|// TODO: move the PKCS10CSRValidator class
DECL|method|getPkcs9Extensions (PKCS10CertificationRequest csr)
specifier|public
specifier|static
name|Extensions
name|getPkcs9Extensions
parameter_list|(
name|PKCS10CertificationRequest
name|csr
parameter_list|)
throws|throws
name|CertificateException
block|{
name|ASN1Set
name|pkcs9ExtReq
init|=
name|getPkcs9ExtRequest
argument_list|(
name|csr
argument_list|)
decl_stmt|;
name|Object
name|extReqElement
init|=
name|pkcs9ExtReq
operator|.
name|getObjects
argument_list|()
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|extReqElement
operator|instanceof
name|Extensions
condition|)
block|{
return|return
operator|(
name|Extensions
operator|)
name|extReqElement
return|;
block|}
else|else
block|{
if|if
condition|(
name|extReqElement
operator|instanceof
name|ASN1Sequence
condition|)
block|{
return|return
name|Extensions
operator|.
name|getInstance
argument_list|(
operator|(
name|ASN1Sequence
operator|)
name|extReqElement
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|CertificateException
argument_list|(
literal|"Unknown element type :"
operator|+
name|extReqElement
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getPkcs9ExtRequest (PKCS10CertificationRequest csr)
specifier|public
specifier|static
name|ASN1Set
name|getPkcs9ExtRequest
parameter_list|(
name|PKCS10CertificationRequest
name|csr
parameter_list|)
throws|throws
name|CertificateException
block|{
for|for
control|(
name|Attribute
name|attr
range|:
name|csr
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|ASN1ObjectIdentifier
name|oid
init|=
name|attr
operator|.
name|getAttrType
argument_list|()
decl_stmt|;
if|if
condition|(
name|oid
operator|.
name|equals
argument_list|(
name|PKCSObjectIdentifiers
operator|.
name|pkcs_9_at_extensionRequest
argument_list|)
condition|)
block|{
return|return
name|attr
operator|.
name|getAttrValues
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|CertificateException
argument_list|(
literal|"No PKCS#9 extension found in CSR"
argument_list|)
throw|;
block|}
comment|/*    * Returns private key created from encoded key.    * @return private key if successful else returns null.    */
DECL|method|getPrivateKey (byte[] encodedKey, SecurityConfig secureConfig)
specifier|public
specifier|static
name|PrivateKey
name|getPrivateKey
parameter_list|(
name|byte
index|[]
name|encodedKey
parameter_list|,
name|SecurityConfig
name|secureConfig
parameter_list|)
block|{
name|PrivateKey
name|pvtKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|encodedKey
operator|==
literal|null
operator|||
name|encodedKey
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|KeyFactory
name|kf
init|=
literal|null
decl_stmt|;
name|kf
operator|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
name|secureConfig
operator|.
name|getKeyAlgo
argument_list|()
argument_list|,
name|secureConfig
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pvtKey
operator|=
name|kf
operator|.
name|generatePrivate
argument_list|(
operator|new
name|PKCS8EncodedKeySpec
argument_list|(
name|encodedKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
decl||
name|InvalidKeySpecException
decl||
name|NoSuchProviderException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|pvtKey
return|;
block|}
comment|/*    * Returns public key created from encoded key.    * @return public key if successful else returns null.    */
DECL|method|getPublicKey (byte[] encodedKey, SecurityConfig secureConfig)
specifier|public
specifier|static
name|PublicKey
name|getPublicKey
parameter_list|(
name|byte
index|[]
name|encodedKey
parameter_list|,
name|SecurityConfig
name|secureConfig
parameter_list|)
block|{
name|PublicKey
name|key
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|encodedKey
operator|==
literal|null
operator|||
name|encodedKey
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|KeyFactory
name|kf
init|=
literal|null
decl_stmt|;
name|kf
operator|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
name|secureConfig
operator|.
name|getKeyAlgo
argument_list|()
argument_list|,
name|secureConfig
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|=
name|kf
operator|.
name|generatePublic
argument_list|(
operator|new
name|X509EncodedKeySpec
argument_list|(
name|encodedKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
decl||
name|InvalidKeySpecException
decl||
name|NoSuchProviderException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|key
return|;
block|}
block|}
end_class

end_unit

