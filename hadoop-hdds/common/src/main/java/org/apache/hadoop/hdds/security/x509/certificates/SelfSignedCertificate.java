begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.security.x509.certificates
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificates
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|SecurityConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|exceptions
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|exceptions
operator|.
name|SCMSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x500
operator|.
name|X500Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|BasicConstraints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|Extension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|SubjectPublicKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|CertIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|X509CertificateHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|X509v3CertificateBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|ContentSigner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|OperatorCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|jcajce
operator|.
name|JcaContentSignerBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_comment
comment|/**  * A Self Signed Certificate with CA basic constraint can be used to boot-strap  * a certificate infra-structure, if no external certificate is provided.  */
end_comment

begin_class
DECL|class|SelfSignedCertificate
specifier|public
specifier|final
class|class
name|SelfSignedCertificate
block|{
DECL|field|NAME_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|NAME_FORMAT
init|=
literal|"CN=%s,OU=%s,O=%s"
decl_stmt|;
DECL|field|subject
specifier|private
name|String
name|subject
decl_stmt|;
DECL|field|clusterID
specifier|private
name|String
name|clusterID
decl_stmt|;
DECL|field|scmID
specifier|private
name|String
name|scmID
decl_stmt|;
DECL|field|beginDate
specifier|private
name|Date
name|beginDate
decl_stmt|;
DECL|field|endDate
specifier|private
name|Date
name|endDate
decl_stmt|;
DECL|field|key
specifier|private
name|KeyPair
name|key
decl_stmt|;
DECL|field|config
specifier|private
name|SecurityConfig
name|config
decl_stmt|;
DECL|field|isCA
specifier|private
name|boolean
name|isCA
decl_stmt|;
comment|/**    * Private Ctor invoked only via Builder Interface.    * @param subject - Subject    * @param scmID - SCM ID    * @param clusterID - Cluster ID    * @param beginDate - NotBefore    * @param endDate - Not After    * @param configuration - SCM Config    * @param keyPair - KeyPair    * @param ca - isCA?    */
DECL|method|SelfSignedCertificate (String subject, String scmID, String clusterID, Date beginDate, Date endDate, SecurityConfig configuration, KeyPair keyPair, boolean ca)
specifier|private
name|SelfSignedCertificate
parameter_list|(
name|String
name|subject
parameter_list|,
name|String
name|scmID
parameter_list|,
name|String
name|clusterID
parameter_list|,
name|Date
name|beginDate
parameter_list|,
name|Date
name|endDate
parameter_list|,
name|SecurityConfig
name|configuration
parameter_list|,
name|KeyPair
name|keyPair
parameter_list|,
name|boolean
name|ca
parameter_list|)
block|{
name|this
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
name|this
operator|.
name|clusterID
operator|=
name|clusterID
expr_stmt|;
name|this
operator|.
name|scmID
operator|=
name|scmID
expr_stmt|;
name|this
operator|.
name|beginDate
operator|=
name|beginDate
expr_stmt|;
name|this
operator|.
name|endDate
operator|=
name|endDate
expr_stmt|;
name|config
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|keyPair
expr_stmt|;
name|this
operator|.
name|isCA
operator|=
name|ca
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNameFormat ()
specifier|public
specifier|static
name|String
name|getNameFormat
parameter_list|()
block|{
return|return
name|NAME_FORMAT
return|;
block|}
DECL|method|newBuilder ()
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
DECL|method|generateCertificate ()
specifier|private
name|X509CertificateHolder
name|generateCertificate
parameter_list|()
throws|throws
name|OperatorCreationException
throws|,
name|CertIOException
block|{
comment|// For the Root Certificate we form the name from Subject, SCM ID and
comment|// Cluster ID.
name|String
name|dnName
init|=
name|String
operator|.
name|format
argument_list|(
name|getNameFormat
argument_list|()
argument_list|,
name|subject
argument_list|,
name|scmID
argument_list|,
name|clusterID
argument_list|)
decl_stmt|;
name|X500Name
name|name
init|=
operator|new
name|X500Name
argument_list|(
name|dnName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|encoded
init|=
name|key
operator|.
name|getPublic
argument_list|()
operator|.
name|getEncoded
argument_list|()
decl_stmt|;
name|SubjectPublicKeyInfo
name|publicKeyInfo
init|=
name|SubjectPublicKeyInfo
operator|.
name|getInstance
argument_list|(
name|encoded
argument_list|)
decl_stmt|;
name|ContentSigner
name|contentSigner
init|=
operator|new
name|JcaContentSignerBuilder
argument_list|(
name|config
operator|.
name|getSignatureAlgo
argument_list|()
argument_list|)
operator|.
name|setProvider
argument_list|(
name|config
operator|.
name|getProvider
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
name|key
operator|.
name|getPrivate
argument_list|()
argument_list|)
decl_stmt|;
comment|// Please note: Since this is a root certificate we use "ONE" as the
comment|// serial number. Also note that skip enforcing locale or UTC. We are
comment|// trying to operate at the Days level, hence Time zone is also skipped for
comment|// now.
name|BigInteger
name|serial
init|=
name|BigInteger
operator|.
name|ONE
decl_stmt|;
if|if
condition|(
operator|!
name|isCA
condition|)
block|{
name|serial
operator|=
operator|new
name|BigInteger
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|X509v3CertificateBuilder
name|builder
init|=
operator|new
name|X509v3CertificateBuilder
argument_list|(
name|name
argument_list|,
name|serial
argument_list|,
name|beginDate
argument_list|,
name|endDate
argument_list|,
name|name
argument_list|,
name|publicKeyInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCA
condition|)
block|{
name|builder
operator|.
name|addExtension
argument_list|(
name|Extension
operator|.
name|basicConstraints
argument_list|,
literal|true
argument_list|,
operator|new
name|BasicConstraints
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|(
name|contentSigner
argument_list|)
return|;
block|}
comment|/**    * Builder class for Root Certificates.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|subject
specifier|private
name|String
name|subject
decl_stmt|;
DECL|field|clusterID
specifier|private
name|String
name|clusterID
decl_stmt|;
DECL|field|scmID
specifier|private
name|String
name|scmID
decl_stmt|;
DECL|field|beginDate
specifier|private
name|Date
name|beginDate
decl_stmt|;
DECL|field|endDate
specifier|private
name|Date
name|endDate
decl_stmt|;
DECL|field|key
specifier|private
name|KeyPair
name|key
decl_stmt|;
DECL|field|config
specifier|private
name|SecurityConfig
name|config
decl_stmt|;
DECL|field|isCA
specifier|private
name|boolean
name|isCA
decl_stmt|;
DECL|method|setConfiguration (Configuration configuration)
specifier|public
name|Builder
name|setConfiguration
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
operator|new
name|SecurityConfig
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setKey (KeyPair keyPair)
specifier|public
name|Builder
name|setKey
parameter_list|(
name|KeyPair
name|keyPair
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|keyPair
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setSubject (String subjectString)
specifier|public
name|Builder
name|setSubject
parameter_list|(
name|String
name|subjectString
parameter_list|)
block|{
name|this
operator|.
name|subject
operator|=
name|subjectString
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setClusterID (String s)
specifier|public
name|Builder
name|setClusterID
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|this
operator|.
name|clusterID
operator|=
name|s
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setScmID (String s)
specifier|public
name|Builder
name|setScmID
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|this
operator|.
name|scmID
operator|=
name|s
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setBeginDate (Date date)
specifier|public
name|Builder
name|setBeginDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|this
operator|.
name|beginDate
operator|=
operator|new
name|Date
argument_list|(
name|date
operator|.
name|toInstant
argument_list|()
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setEndDate (Date date)
specifier|public
name|Builder
name|setEndDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|this
operator|.
name|endDate
operator|=
operator|new
name|Date
argument_list|(
name|date
operator|.
name|toInstant
argument_list|()
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|makeCA ()
specifier|public
name|Builder
name|makeCA
parameter_list|()
block|{
name|isCA
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|X509CertificateHolder
name|build
parameter_list|()
throws|throws
name|SCMSecurityException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|key
argument_list|,
literal|"Key cannot be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|Strings
operator|.
name|isNotBlank
argument_list|(
name|subject
argument_list|)
argument_list|,
literal|"Subject "
operator|+
literal|"cannot be blank"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|Strings
operator|.
name|isNotBlank
argument_list|(
name|clusterID
argument_list|)
argument_list|,
literal|"Cluster ID "
operator|+
literal|"cannot be blank"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|Strings
operator|.
name|isNotBlank
argument_list|(
name|scmID
argument_list|)
argument_list|,
literal|"SCM ID cannot "
operator|+
literal|"be blank"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|beginDate
operator|.
name|before
argument_list|(
name|endDate
argument_list|)
argument_list|,
literal|"Certificate "
operator|+
literal|"begin date should be before end date"
argument_list|)
expr_stmt|;
name|Duration
name|certDuration
init|=
name|Duration
operator|.
name|between
argument_list|(
name|beginDate
operator|.
name|toInstant
argument_list|()
argument_list|,
name|endDate
operator|.
name|toInstant
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|certDuration
operator|.
name|compareTo
argument_list|(
name|config
operator|.
name|getMaxCertificateDuration
argument_list|()
argument_list|)
operator|<
literal|0
argument_list|,
literal|"Certificate life time cannot be greater than max configured value."
argument_list|)
expr_stmt|;
name|SelfSignedCertificate
name|rootCertificate
init|=
operator|new
name|SelfSignedCertificate
argument_list|(
name|this
operator|.
name|subject
argument_list|,
name|this
operator|.
name|scmID
argument_list|,
name|this
operator|.
name|clusterID
argument_list|,
name|this
operator|.
name|beginDate
argument_list|,
name|this
operator|.
name|endDate
argument_list|,
name|this
operator|.
name|config
argument_list|,
name|key
argument_list|,
name|isCA
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|rootCertificate
operator|.
name|generateCertificate
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|OperatorCreationException
decl||
name|CertIOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CertificateException
argument_list|(
literal|"Unable to create root certificate."
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

