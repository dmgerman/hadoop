begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.lock
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool2
operator|.
name|BasePooledObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool2
operator|.
name|PooledObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool2
operator|.
name|impl
operator|.
name|DefaultPooledObject
import|;
end_import

begin_comment
comment|/**  * Pool factory to create {@code ActiveLock} instances.  */
end_comment

begin_class
DECL|class|PooledLockFactory
specifier|public
class|class
name|PooledLockFactory
extends|extends
name|BasePooledObjectFactory
argument_list|<
name|ActiveLock
argument_list|>
block|{
annotation|@
name|Override
DECL|method|create ()
specifier|public
name|ActiveLock
name|create
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ActiveLock
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|wrap (ActiveLock activeLock)
specifier|public
name|PooledObject
argument_list|<
name|ActiveLock
argument_list|>
name|wrap
parameter_list|(
name|ActiveLock
name|activeLock
parameter_list|)
block|{
return|return
operator|new
name|DefaultPooledObject
argument_list|<>
argument_list|(
name|activeLock
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|activateObject (PooledObject<ActiveLock> pooledObject)
specifier|public
name|void
name|activateObject
parameter_list|(
name|PooledObject
argument_list|<
name|ActiveLock
argument_list|>
name|pooledObject
parameter_list|)
block|{
name|pooledObject
operator|.
name|getObject
argument_list|()
operator|.
name|resetCounter
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

