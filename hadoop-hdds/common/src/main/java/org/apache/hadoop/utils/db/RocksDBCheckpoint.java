begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.utils.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Class to hold information and location of a RocksDB Checkpoint.  */
end_comment

begin_class
DECL|class|RocksDBCheckpoint
specifier|public
class|class
name|RocksDBCheckpoint
implements|implements
name|DBCheckpoint
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RocksDBCheckpoint
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|checkpointLocation
specifier|private
name|Path
name|checkpointLocation
decl_stmt|;
DECL|field|checkpointTimestamp
specifier|private
name|long
name|checkpointTimestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
DECL|field|latestSequenceNumber
specifier|private
name|long
name|latestSequenceNumber
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|checkpointCreationTimeTaken
specifier|private
name|long
name|checkpointCreationTimeTaken
init|=
literal|0L
decl_stmt|;
DECL|field|ratisSnapshotIndex
specifier|private
name|long
name|ratisSnapshotIndex
init|=
literal|0L
decl_stmt|;
DECL|method|RocksDBCheckpoint (Path checkpointLocation)
specifier|public
name|RocksDBCheckpoint
parameter_list|(
name|Path
name|checkpointLocation
parameter_list|)
block|{
name|this
operator|.
name|checkpointLocation
operator|=
name|checkpointLocation
expr_stmt|;
block|}
DECL|method|RocksDBCheckpoint (Path checkpointLocation, long snapshotTimestamp, long latestSequenceNumber, long checkpointCreationTimeTaken)
specifier|public
name|RocksDBCheckpoint
parameter_list|(
name|Path
name|checkpointLocation
parameter_list|,
name|long
name|snapshotTimestamp
parameter_list|,
name|long
name|latestSequenceNumber
parameter_list|,
name|long
name|checkpointCreationTimeTaken
parameter_list|)
block|{
name|this
operator|.
name|checkpointLocation
operator|=
name|checkpointLocation
expr_stmt|;
name|this
operator|.
name|checkpointTimestamp
operator|=
name|snapshotTimestamp
expr_stmt|;
name|this
operator|.
name|latestSequenceNumber
operator|=
name|latestSequenceNumber
expr_stmt|;
name|this
operator|.
name|checkpointCreationTimeTaken
operator|=
name|checkpointCreationTimeTaken
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCheckpointLocation ()
specifier|public
name|Path
name|getCheckpointLocation
parameter_list|()
block|{
return|return
name|this
operator|.
name|checkpointLocation
return|;
block|}
annotation|@
name|Override
DECL|method|getCheckpointTimestamp ()
specifier|public
name|long
name|getCheckpointTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|checkpointTimestamp
return|;
block|}
annotation|@
name|Override
DECL|method|getLatestSequenceNumber ()
specifier|public
name|long
name|getLatestSequenceNumber
parameter_list|()
block|{
return|return
name|this
operator|.
name|latestSequenceNumber
return|;
block|}
annotation|@
name|Override
DECL|method|checkpointCreationTimeTaken ()
specifier|public
name|long
name|checkpointCreationTimeTaken
parameter_list|()
block|{
return|return
name|checkpointCreationTimeTaken
return|;
block|}
annotation|@
name|Override
DECL|method|cleanupCheckpoint ()
specifier|public
name|void
name|cleanupCheckpoint
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cleaning up checkpoint at "
operator|+
name|checkpointLocation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|checkpointLocation
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setRatisSnapshotIndex (long omRatisSnapshotIndex)
specifier|public
name|void
name|setRatisSnapshotIndex
parameter_list|(
name|long
name|omRatisSnapshotIndex
parameter_list|)
block|{
name|this
operator|.
name|ratisSnapshotIndex
operator|=
name|omRatisSnapshotIndex
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRatisSnapshotIndex ()
specifier|public
name|long
name|getRatisSnapshotIndex
parameter_list|()
block|{
return|return
name|ratisSnapshotIndex
return|;
block|}
block|}
end_class

end_unit

