begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|ImmutablePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataKeyFilters
operator|.
name|MetadataKeyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DBIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|ReadOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|WriteBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|WriteOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * LevelDB interface.  */
end_comment

begin_class
DECL|class|LevelDBStore
specifier|public
class|class
name|LevelDBStore
implements|implements
name|MetadataStore
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LevelDBStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|db
specifier|private
name|DB
name|db
decl_stmt|;
DECL|field|dbFile
specifier|private
specifier|final
name|File
name|dbFile
decl_stmt|;
DECL|field|dbOptions
specifier|private
specifier|final
name|Options
name|dbOptions
decl_stmt|;
DECL|field|writeOptions
specifier|private
specifier|final
name|WriteOptions
name|writeOptions
decl_stmt|;
DECL|method|LevelDBStore (File dbPath, boolean createIfMissing)
specifier|public
name|LevelDBStore
parameter_list|(
name|File
name|dbPath
parameter_list|,
name|boolean
name|createIfMissing
parameter_list|)
throws|throws
name|IOException
block|{
name|dbOptions
operator|=
operator|new
name|Options
argument_list|()
expr_stmt|;
name|dbOptions
operator|.
name|createIfMissing
argument_list|(
name|createIfMissing
argument_list|)
expr_stmt|;
name|this
operator|.
name|dbFile
operator|=
name|dbPath
expr_stmt|;
name|this
operator|.
name|writeOptions
operator|=
operator|new
name|WriteOptions
argument_list|()
operator|.
name|sync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|openDB
argument_list|(
name|dbPath
argument_list|,
name|dbOptions
argument_list|)
expr_stmt|;
block|}
comment|/**    * Opens a DB file.    *    * @param dbPath          - DB File path    * @throws IOException    */
DECL|method|LevelDBStore (File dbPath, Options options)
specifier|public
name|LevelDBStore
parameter_list|(
name|File
name|dbPath
parameter_list|,
name|Options
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|dbOptions
operator|=
name|options
expr_stmt|;
name|this
operator|.
name|dbFile
operator|=
name|dbPath
expr_stmt|;
name|this
operator|.
name|writeOptions
operator|=
operator|new
name|WriteOptions
argument_list|()
operator|.
name|sync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|openDB
argument_list|(
name|dbPath
argument_list|,
name|dbOptions
argument_list|)
expr_stmt|;
block|}
DECL|method|openDB (File dbPath, Options options)
specifier|private
name|void
name|openDB
parameter_list|(
name|File
name|dbPath
parameter_list|,
name|Options
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|dbPath
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|db
operator|=
name|JniDBFactory
operator|.
name|factory
operator|.
name|open
argument_list|(
name|dbPath
argument_list|,
name|options
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"LevelDB successfully opened"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"[Option] cacheSize = "
operator|+
name|options
operator|.
name|cacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"[Option] createIfMissing = "
operator|+
name|options
operator|.
name|createIfMissing
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"[Option] blockSize = "
operator|+
name|options
operator|.
name|blockSize
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"[Option] compressionType= "
operator|+
name|options
operator|.
name|compressionType
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"[Option] maxOpenFiles= "
operator|+
name|options
operator|.
name|maxOpenFiles
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"[Option] writeBufferSize= "
operator|+
name|options
operator|.
name|writeBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Puts a Key into file.    *    * @param key   - key    * @param value - value    */
annotation|@
name|Override
DECL|method|put (byte[] key, byte[] value)
specifier|public
name|void
name|put
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|db
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|writeOptions
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get Key.    *    * @param key key    * @return value    */
annotation|@
name|Override
DECL|method|get (byte[] key)
specifier|public
name|byte
index|[]
name|get
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|db
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Delete Key.    *    * @param key - Key    */
annotation|@
name|Override
DECL|method|delete (byte[] key)
specifier|public
name|void
name|delete
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
name|db
operator|.
name|delete
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**    * Closes the DB.    *    * @throws IOException    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns true if the DB is empty.    *    * @return boolean    * @throws IOException    */
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|DBIterator
name|iter
init|=
name|db
operator|.
name|iterator
argument_list|()
init|)
block|{
name|iter
operator|.
name|seekToFirst
argument_list|()
expr_stmt|;
name|boolean
name|hasNext
init|=
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
decl_stmt|;
return|return
name|hasNext
return|;
block|}
block|}
comment|/**    * Returns the actual levelDB object.    * @return DB handle.    */
DECL|method|getDB ()
specifier|public
name|DB
name|getDB
parameter_list|()
block|{
return|return
name|db
return|;
block|}
comment|/**    * Returns an iterator on all the key-value pairs in the DB.    * @return an iterator on DB entries.    */
DECL|method|getIterator ()
specifier|public
name|DBIterator
name|getIterator
parameter_list|()
block|{
return|return
name|db
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|IOException
block|{
name|close
argument_list|()
expr_stmt|;
name|JniDBFactory
operator|.
name|factory
operator|.
name|destroy
argument_list|(
name|dbFile
argument_list|,
name|dbOptions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|peekAround (int offset, byte[] from)
specifier|public
name|ImmutablePair
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|peekAround
parameter_list|(
name|int
name|offset
parameter_list|,
name|byte
index|[]
name|from
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalArgumentException
block|{
try|try
init|(
name|DBIterator
name|it
init|=
name|db
operator|.
name|iterator
argument_list|()
init|)
block|{
if|if
condition|(
name|from
operator|==
literal|null
condition|)
block|{
name|it
operator|.
name|seekToFirst
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|it
operator|.
name|seek
argument_list|(
name|from
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|offset
condition|)
block|{
case|case
literal|0
case|:
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|current
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
name|current
operator|.
name|getKey
argument_list|()
argument_list|,
name|current
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
case|case
literal|1
case|:
if|if
condition|(
name|it
operator|.
name|next
argument_list|()
operator|!=
literal|null
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|next
init|=
name|it
operator|.
name|peekNext
argument_list|()
decl_stmt|;
return|return
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
name|next
operator|.
name|getKey
argument_list|()
argument_list|,
name|next
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
break|break;
case|case
operator|-
literal|1
case|:
if|if
condition|(
name|it
operator|.
name|hasPrev
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|prev
init|=
name|it
operator|.
name|peekPrev
argument_list|()
decl_stmt|;
return|return
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
name|prev
operator|.
name|getKey
argument_list|()
argument_list|,
name|prev
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Position can only be -1, 0 "
operator|+
literal|"or 1, but found "
operator|+
name|offset
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|iterate (byte[] from, EntryConsumer consumer)
specifier|public
name|void
name|iterate
parameter_list|(
name|byte
index|[]
name|from
parameter_list|,
name|EntryConsumer
name|consumer
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|DBIterator
name|iter
init|=
name|db
operator|.
name|iterator
argument_list|()
init|)
block|{
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|seek
argument_list|(
name|from
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iter
operator|.
name|seekToFirst
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|current
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|consumer
operator|.
name|consume
argument_list|(
name|current
operator|.
name|getKey
argument_list|()
argument_list|,
name|current
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Compacts the DB by removing deleted keys etc.    * @throws IOException if there is an error.    */
annotation|@
name|Override
DECL|method|compactDB ()
specifier|public
name|void
name|compactDB
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
comment|// From LevelDB docs : begin == null and end == null means the whole DB.
name|db
operator|.
name|compactRange
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeBatch (BatchOperation operation)
specifier|public
name|void
name|writeBatch
parameter_list|(
name|BatchOperation
name|operation
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|BatchOperation
operator|.
name|SingleOperation
argument_list|>
name|operations
init|=
name|operation
operator|.
name|getOperations
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|operations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
init|(
name|WriteBatch
name|writeBatch
init|=
name|db
operator|.
name|createWriteBatch
argument_list|()
init|)
block|{
for|for
control|(
name|BatchOperation
operator|.
name|SingleOperation
name|opt
range|:
name|operations
control|)
block|{
switch|switch
condition|(
name|opt
operator|.
name|getOpt
argument_list|()
condition|)
block|{
case|case
name|DELETE
case|:
name|writeBatch
operator|.
name|delete
argument_list|(
name|opt
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUT
case|:
name|writeBatch
operator|.
name|put
argument_list|(
name|opt
operator|.
name|getKey
argument_list|()
argument_list|,
name|opt
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid operation "
operator|+
name|opt
operator|.
name|getOpt
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|db
operator|.
name|write
argument_list|(
name|writeBatch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getRangeKVs (byte[] startKey, int count, MetadataKeyFilters.MetadataKeyFilter... filters)
specifier|public
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|getRangeKVs
parameter_list|(
name|byte
index|[]
name|startKey
parameter_list|,
name|int
name|count
parameter_list|,
name|MetadataKeyFilters
operator|.
name|MetadataKeyFilter
modifier|...
name|filters
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalArgumentException
block|{
return|return
name|getRangeKVs
argument_list|(
name|startKey
argument_list|,
name|count
argument_list|,
literal|false
argument_list|,
name|filters
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSequentialRangeKVs (byte[] startKey, int count, MetadataKeyFilters.MetadataKeyFilter... filters)
specifier|public
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|getSequentialRangeKVs
parameter_list|(
name|byte
index|[]
name|startKey
parameter_list|,
name|int
name|count
parameter_list|,
name|MetadataKeyFilters
operator|.
name|MetadataKeyFilter
modifier|...
name|filters
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalArgumentException
block|{
return|return
name|getRangeKVs
argument_list|(
name|startKey
argument_list|,
name|count
argument_list|,
literal|true
argument_list|,
name|filters
argument_list|)
return|;
block|}
comment|/**    * Returns a certain range of key value pairs as a list based on a    * startKey or count. Further a {@link MetadataKeyFilter} can be added to    * filter keys if necessary. To prevent race conditions while listing    * entries, this implementation takes a snapshot and lists the entries from    * the snapshot. This may, on the other hand, cause the range result slight    * different with actual data if data is updating concurrently.    *<p>    * If the startKey is specified and found in levelDB, this key and the keys    * after this key will be included in the result. If the startKey is null    * all entries will be included as long as other conditions are satisfied.    * If the given startKey doesn't exist, an empty list will be returned.    *<p>    * The count argument is to limit number of total entries to return,    * the value for count must be an integer greater than 0.    *<p>    * This method allows to specify one or more {@link MetadataKeyFilter}    * to filter keys by certain condition. Once given, only the entries    * whose key passes all the filters will be included in the result.    *    * @param startKey a start key.    * @param count max number of entries to return.    * @param filters customized one or more {@link MetadataKeyFilter}.    * @return a list of entries found in the database or an empty list if the    * startKey is invalid.    * @throws IOException if there are I/O errors.    * @throws IllegalArgumentException if count is less than 0.    */
DECL|method|getRangeKVs (byte[] startKey, int count, boolean sequential, MetadataKeyFilter... filters)
specifier|private
name|List
argument_list|<
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|getRangeKVs
parameter_list|(
name|byte
index|[]
name|startKey
parameter_list|,
name|int
name|count
parameter_list|,
name|boolean
name|sequential
parameter_list|,
name|MetadataKeyFilter
modifier|...
name|filters
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid count given "
operator|+
name|count
operator|+
literal|", count must be greater than 0"
argument_list|)
throw|;
block|}
name|Snapshot
name|snapShot
init|=
literal|null
decl_stmt|;
name|DBIterator
name|dbIter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|snapShot
operator|=
name|db
operator|.
name|getSnapshot
argument_list|()
expr_stmt|;
name|ReadOptions
name|readOptions
init|=
operator|new
name|ReadOptions
argument_list|()
operator|.
name|snapshot
argument_list|(
name|snapShot
argument_list|)
decl_stmt|;
name|dbIter
operator|=
name|db
operator|.
name|iterator
argument_list|(
name|readOptions
argument_list|)
expr_stmt|;
if|if
condition|(
name|startKey
operator|==
literal|null
condition|)
block|{
name|dbIter
operator|.
name|seekToFirst
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|db
operator|.
name|get
argument_list|(
name|startKey
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// Key not found, return empty list
return|return
name|result
return|;
block|}
name|dbIter
operator|.
name|seek
argument_list|(
name|startKey
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|dbIter
operator|.
name|hasNext
argument_list|()
operator|&&
name|result
operator|.
name|size
argument_list|()
operator|<
name|count
condition|)
block|{
name|byte
index|[]
name|preKey
init|=
name|dbIter
operator|.
name|hasPrev
argument_list|()
condition|?
name|dbIter
operator|.
name|peekPrev
argument_list|()
operator|.
name|getKey
argument_list|()
else|:
literal|null
decl_stmt|;
name|byte
index|[]
name|nextKey
init|=
name|dbIter
operator|.
name|hasNext
argument_list|()
condition|?
name|dbIter
operator|.
name|peekNext
argument_list|()
operator|.
name|getKey
argument_list|()
else|:
literal|null
decl_stmt|;
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|current
init|=
name|dbIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|filters
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|Arrays
operator|.
name|asList
argument_list|(
name|filters
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|entry
lambda|->
name|entry
operator|.
name|filterKey
argument_list|(
name|preKey
argument_list|,
name|current
operator|.
name|getKey
argument_list|()
argument_list|,
name|nextKey
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|current
argument_list|)
block|;           }
else|else
block|{
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|sequential
condition|)
block|{
comment|// if the caller asks for a sequential range of results,
comment|// and we met a dis-match, abort iteration from here.
comment|// if result is empty, we continue to look for the first match.
break|break;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|snapShot
operator|!=
literal|null
condition|)
block|{
name|snapShot
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dbIter
operator|!=
literal|null
condition|)
block|{
name|dbIter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|filters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MetadataKeyFilters
operator|.
name|MetadataKeyFilter
name|filter
range|:
name|filters
control|)
block|{
name|int
name|scanned
init|=
name|filter
operator|.
name|getKeysScannedNum
argument_list|()
decl_stmt|;
name|int
name|hinted
init|=
name|filter
operator|.
name|getKeysHintedNum
argument_list|()
decl_stmt|;
if|if
condition|(
name|scanned
operator|>
literal|0
operator|||
name|hinted
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getRangeKVs ({}) numOfKeysScanned={}, numOfKeysHinted={}"
argument_list|,
name|filter
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|filter
operator|.
name|getKeysScannedNum
argument_list|()
argument_list|,
name|filter
operator|.
name|getKeysHintedNum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|timeConsumed
init|=
name|end
operator|-
name|start
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Time consumed for getRangeKVs() is {}ms,"
operator|+
literal|" result length is {}."
argument_list|,
name|timeConsumed
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

