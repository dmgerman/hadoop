begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  * Some portions of this file Copyright (c) 2004-2006 Intel Corportation  * and licensed under the BSD license.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import

begin_comment
comment|/**  * A sub-interface of {@link Checksum}  * with a method to update checksum from a {@link ByteBuffer}.  */
end_comment

begin_interface
DECL|interface|ChecksumByteBuffer
specifier|public
interface|interface
name|ChecksumByteBuffer
extends|extends
name|Checksum
block|{
comment|/**    * Updates the current checksum with the specified bytes in the buffer.    * Upon return, the buffer's position will be equal to its limit.    *    * @param buffer the bytes to update the checksum with    */
DECL|method|update (ByteBuffer buffer)
name|void
name|update
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|update (byte[] b, int off, int len)
specifier|default
name|void
name|update
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|update
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
operator|.
name|asReadOnlyBuffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * An abstract class implementing {@link ChecksumByteBuffer}    * with a 32-bit checksum and a lookup table.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"innerassignment"
argument_list|)
DECL|class|CrcIntTable
specifier|abstract
class|class
name|CrcIntTable
implements|implements
name|ChecksumByteBuffer
block|{
comment|/** Current CRC value with bit-flipped. */
DECL|field|crc
specifier|private
name|int
name|crc
decl_stmt|;
DECL|method|CrcIntTable ()
name|CrcIntTable
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
name|Preconditions
operator|.
name|assertTrue
argument_list|(
name|getTable
argument_list|()
operator|.
name|length
operator|==
literal|8
operator|*
operator|(
literal|1
operator|<<
literal|8
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getTable ()
specifier|abstract
name|int
index|[]
name|getTable
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|getValue ()
specifier|public
specifier|final
name|long
name|getValue
parameter_list|()
block|{
return|return
operator|(
operator|~
name|crc
operator|)
operator|&
literal|0xffffffffL
return|;
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
specifier|final
name|void
name|reset
parameter_list|()
block|{
name|crc
operator|=
literal|0xffffffff
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|update (int b)
specifier|public
specifier|final
name|void
name|update
parameter_list|(
name|int
name|b
parameter_list|)
block|{
name|crc
operator|=
operator|(
name|crc
operator|>>>
literal|8
operator|)
operator|^
name|getTable
argument_list|()
index|[
operator|(
operator|(
operator|(
name|crc
operator|^
name|b
operator|)
operator|<<
literal|24
operator|)
operator|>>>
literal|24
operator|)
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|update (ByteBuffer b)
specifier|public
specifier|final
name|void
name|update
parameter_list|(
name|ByteBuffer
name|b
parameter_list|)
block|{
name|crc
operator|=
name|update
argument_list|(
name|crc
argument_list|,
name|b
argument_list|,
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|update (int crc, ByteBuffer b, int[] table)
specifier|private
specifier|static
name|int
name|update
parameter_list|(
name|int
name|crc
parameter_list|,
name|ByteBuffer
name|b
parameter_list|,
name|int
index|[]
name|table
parameter_list|)
block|{
for|for
control|(
init|;
name|b
operator|.
name|remaining
argument_list|()
operator|>
literal|7
condition|;
control|)
block|{
specifier|final
name|int
name|c0
init|=
operator|(
name|b
operator|.
name|get
argument_list|()
operator|^
name|crc
operator|)
operator|&
literal|0xff
decl_stmt|;
specifier|final
name|int
name|c1
init|=
operator|(
name|b
operator|.
name|get
argument_list|()
operator|^
operator|(
name|crc
operator|>>>=
literal|8
operator|)
operator|)
operator|&
literal|0xff
decl_stmt|;
specifier|final
name|int
name|c2
init|=
operator|(
name|b
operator|.
name|get
argument_list|()
operator|^
operator|(
name|crc
operator|>>>=
literal|8
operator|)
operator|)
operator|&
literal|0xff
decl_stmt|;
specifier|final
name|int
name|c3
init|=
operator|(
name|b
operator|.
name|get
argument_list|()
operator|^
operator|(
name|crc
operator|>>>
literal|8
operator|)
operator|)
operator|&
literal|0xff
decl_stmt|;
name|crc
operator|=
operator|(
name|table
index|[
literal|0x700
operator|+
name|c0
index|]
operator|^
name|table
index|[
literal|0x600
operator|+
name|c1
index|]
operator|)
operator|^
operator|(
name|table
index|[
literal|0x500
operator|+
name|c2
index|]
operator|^
name|table
index|[
literal|0x400
operator|+
name|c3
index|]
operator|)
expr_stmt|;
specifier|final
name|int
name|c4
init|=
name|b
operator|.
name|get
argument_list|()
operator|&
literal|0xff
decl_stmt|;
specifier|final
name|int
name|c5
init|=
name|b
operator|.
name|get
argument_list|()
operator|&
literal|0xff
decl_stmt|;
specifier|final
name|int
name|c6
init|=
name|b
operator|.
name|get
argument_list|()
operator|&
literal|0xff
decl_stmt|;
specifier|final
name|int
name|c7
init|=
name|b
operator|.
name|get
argument_list|()
operator|&
literal|0xff
decl_stmt|;
name|crc
operator|^=
operator|(
name|table
index|[
literal|0x300
operator|+
name|c4
index|]
operator|^
name|table
index|[
literal|0x200
operator|+
name|c5
index|]
operator|)
operator|^
operator|(
name|table
index|[
literal|0x100
operator|+
name|c6
index|]
operator|^
name|table
index|[
name|c7
index|]
operator|)
expr_stmt|;
block|}
comment|// loop unroll - duff's device style
switch|switch
condition|(
name|b
operator|.
name|remaining
argument_list|()
condition|)
block|{
case|case
literal|7
case|:
name|crc
operator|=
operator|(
name|crc
operator|>>>
literal|8
operator|)
operator|^
name|table
index|[
operator|(
operator|(
name|crc
operator|^
name|b
operator|.
name|get
argument_list|()
operator|)
operator|&
literal|0xff
operator|)
index|]
expr_stmt|;
case|case
literal|6
case|:
name|crc
operator|=
operator|(
name|crc
operator|>>>
literal|8
operator|)
operator|^
name|table
index|[
operator|(
operator|(
name|crc
operator|^
name|b
operator|.
name|get
argument_list|()
operator|)
operator|&
literal|0xff
operator|)
index|]
expr_stmt|;
case|case
literal|5
case|:
name|crc
operator|=
operator|(
name|crc
operator|>>>
literal|8
operator|)
operator|^
name|table
index|[
operator|(
operator|(
name|crc
operator|^
name|b
operator|.
name|get
argument_list|()
operator|)
operator|&
literal|0xff
operator|)
index|]
expr_stmt|;
case|case
literal|4
case|:
name|crc
operator|=
operator|(
name|crc
operator|>>>
literal|8
operator|)
operator|^
name|table
index|[
operator|(
operator|(
name|crc
operator|^
name|b
operator|.
name|get
argument_list|()
operator|)
operator|&
literal|0xff
operator|)
index|]
expr_stmt|;
case|case
literal|3
case|:
name|crc
operator|=
operator|(
name|crc
operator|>>>
literal|8
operator|)
operator|^
name|table
index|[
operator|(
operator|(
name|crc
operator|^
name|b
operator|.
name|get
argument_list|()
operator|)
operator|&
literal|0xff
operator|)
index|]
expr_stmt|;
case|case
literal|2
case|:
name|crc
operator|=
operator|(
name|crc
operator|>>>
literal|8
operator|)
operator|^
name|table
index|[
operator|(
operator|(
name|crc
operator|^
name|b
operator|.
name|get
argument_list|()
operator|)
operator|&
literal|0xff
operator|)
index|]
expr_stmt|;
case|case
literal|1
case|:
name|crc
operator|=
operator|(
name|crc
operator|>>>
literal|8
operator|)
operator|^
name|table
index|[
operator|(
operator|(
name|crc
operator|^
name|b
operator|.
name|get
argument_list|()
operator|)
operator|&
literal|0xff
operator|)
index|]
expr_stmt|;
default|default:
comment|// noop
block|}
return|return
name|crc
return|;
block|}
block|}
block|}
end_interface

end_unit

