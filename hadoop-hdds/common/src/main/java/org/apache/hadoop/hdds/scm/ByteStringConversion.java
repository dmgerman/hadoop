begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnsafeByteOperations
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Helper class to create a conversion function from ByteBuffer to ByteString  * based on the property  * {@link OzoneConfigKeys#OZONE_UNSAFEBYTEOPERATIONS_ENABLED} in the  * Ozone configuration.  */
end_comment

begin_class
DECL|class|ByteStringConversion
specifier|public
specifier|final
class|class
name|ByteStringConversion
block|{
DECL|method|ByteStringConversion ()
specifier|private
name|ByteStringConversion
parameter_list|()
block|{}
comment|// no instantiation.
comment|/**    * Creates the conversion function to be used to convert ByteBuffers to    * ByteString instances to be used in protobuf messages.    *    * @param config the Ozone configuration    * @return the conversion function defined by    *          {@link OzoneConfigKeys#OZONE_UNSAFEBYTEOPERATIONS_ENABLED}    * @see<pre>ByteBuffer</pre>    */
DECL|method|createByteBufferConversion ( Configuration config)
specifier|public
specifier|static
name|Function
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteString
argument_list|>
name|createByteBufferConversion
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|boolean
name|unsafeEnabled
init|=
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|getBoolean
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_UNSAFEBYTEOPERATIONS_ENABLED
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_UNSAFEBYTEOPERATIONS_ENABLED_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|unsafeEnabled
condition|)
block|{
return|return
name|buffer
lambda|->
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|buffer
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|buffer
lambda|->
block|{
name|ByteString
name|retval
init|=
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
return|return
name|retval
return|;
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

