begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ProtocolMessageEnum
import|;
end_import

begin_comment
comment|/**  * Metrics to count all the subtypes of a specific message.  */
end_comment

begin_class
DECL|class|ProtocolMessageMetrics
specifier|public
class|class
name|ProtocolMessageMetrics
implements|implements
name|MetricsSource
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|description
specifier|private
name|String
name|description
decl_stmt|;
DECL|field|counters
specifier|private
name|Map
argument_list|<
name|ProtocolMessageEnum
argument_list|,
name|AtomicLong
argument_list|>
name|counters
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|create (String name, String description, ProtocolMessageEnum[] types)
specifier|public
specifier|static
name|ProtocolMessageMetrics
name|create
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|ProtocolMessageEnum
index|[]
name|types
parameter_list|)
block|{
name|ProtocolMessageMetrics
name|protocolMessageMetrics
init|=
operator|new
name|ProtocolMessageMetrics
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|types
argument_list|)
decl_stmt|;
return|return
name|protocolMessageMetrics
return|;
block|}
DECL|method|ProtocolMessageMetrics (String name, String description, ProtocolMessageEnum[] values)
specifier|public
name|ProtocolMessageMetrics
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|ProtocolMessageEnum
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
for|for
control|(
name|ProtocolMessageEnum
name|value
range|:
name|values
control|)
block|{
name|counters
operator|.
name|put
argument_list|(
name|value
argument_list|,
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|increment (ProtocolMessageEnum key)
specifier|public
name|void
name|increment
parameter_list|(
name|ProtocolMessageEnum
name|key
parameter_list|)
block|{
name|counters
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|register ()
specifier|public
name|void
name|register
parameter_list|()
block|{
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
operator|.
name|register
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|unregister ()
specifier|public
name|void
name|unregister
parameter_list|()
block|{
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
operator|.
name|unregisterSource
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMetrics (MetricsCollector collector, boolean all)
specifier|public
name|void
name|getMetrics
parameter_list|(
name|MetricsCollector
name|collector
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|MetricsRecordBuilder
name|builder
init|=
name|collector
operator|.
name|addRecord
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|counters
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
name|builder
operator|.
name|addCounter
argument_list|(
operator|new
name|MetricName
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|,
name|value
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endRecord
argument_list|()
expr_stmt|;
block|}
comment|/**    * Simple metrics info implementation.    */
DECL|class|MetricName
specifier|public
specifier|static
class|class
name|MetricName
implements|implements
name|MetricsInfo
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|description
specifier|private
name|String
name|description
decl_stmt|;
DECL|method|MetricName (String name, String description)
specifier|public
name|MetricName
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|name ()
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|description ()
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
name|description
return|;
block|}
block|}
block|}
end_class

end_unit

