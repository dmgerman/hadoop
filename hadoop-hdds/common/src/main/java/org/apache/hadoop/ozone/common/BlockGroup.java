begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ScmBlockLocationProtocolProtos
operator|.
name|KeyBlocks
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A group of blocks relations relevant, e.g belong to a certain object key.  */
end_comment

begin_class
DECL|class|BlockGroup
specifier|public
specifier|final
class|class
name|BlockGroup
block|{
DECL|field|groupID
specifier|private
name|String
name|groupID
decl_stmt|;
DECL|field|blockIDs
specifier|private
name|List
argument_list|<
name|BlockID
argument_list|>
name|blockIDs
decl_stmt|;
DECL|method|BlockGroup (String groupID, List<BlockID> blockIDs)
specifier|private
name|BlockGroup
parameter_list|(
name|String
name|groupID
parameter_list|,
name|List
argument_list|<
name|BlockID
argument_list|>
name|blockIDs
parameter_list|)
block|{
name|this
operator|.
name|groupID
operator|=
name|groupID
expr_stmt|;
name|this
operator|.
name|blockIDs
operator|=
name|blockIDs
expr_stmt|;
block|}
DECL|method|getBlockIDList ()
specifier|public
name|List
argument_list|<
name|BlockID
argument_list|>
name|getBlockIDList
parameter_list|()
block|{
return|return
name|blockIDs
return|;
block|}
DECL|method|getGroupID ()
specifier|public
name|String
name|getGroupID
parameter_list|()
block|{
return|return
name|groupID
return|;
block|}
DECL|method|getProto ()
specifier|public
name|KeyBlocks
name|getProto
parameter_list|()
block|{
name|KeyBlocks
operator|.
name|Builder
name|kbb
init|=
name|KeyBlocks
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockID
name|block
range|:
name|blockIDs
control|)
block|{
name|kbb
operator|.
name|addBlocks
argument_list|(
name|block
operator|.
name|getProtobuf
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|kbb
operator|.
name|setKey
argument_list|(
name|groupID
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Parses a KeyBlocks proto to a group of blocks.    * @param proto KeyBlocks proto.    * @return a group of blocks.    */
DECL|method|getFromProto (KeyBlocks proto)
specifier|public
specifier|static
name|BlockGroup
name|getFromProto
parameter_list|(
name|KeyBlocks
name|proto
parameter_list|)
block|{
name|List
argument_list|<
name|BlockID
argument_list|>
name|blockIDs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|HddsProtos
operator|.
name|BlockID
name|block
range|:
name|proto
operator|.
name|getBlocksList
argument_list|()
control|)
block|{
name|blockIDs
operator|.
name|add
argument_list|(
operator|new
name|BlockID
argument_list|(
name|block
operator|.
name|getContainerBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|block
operator|.
name|getContainerBlockID
argument_list|()
operator|.
name|getLocalID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|BlockGroup
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|proto
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|addAllBlockIDs
argument_list|(
name|blockIDs
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|newBuilder ()
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**    * BlockGroup instance builder.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|groupID
specifier|private
name|String
name|groupID
decl_stmt|;
DECL|field|blockIDs
specifier|private
name|List
argument_list|<
name|BlockID
argument_list|>
name|blockIDs
decl_stmt|;
DECL|method|setKeyName (String blockGroupID)
specifier|public
name|Builder
name|setKeyName
parameter_list|(
name|String
name|blockGroupID
parameter_list|)
block|{
name|this
operator|.
name|groupID
operator|=
name|blockGroupID
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addAllBlockIDs (List<BlockID> keyBlocks)
specifier|public
name|Builder
name|addAllBlockIDs
parameter_list|(
name|List
argument_list|<
name|BlockID
argument_list|>
name|keyBlocks
parameter_list|)
block|{
name|this
operator|.
name|blockIDs
operator|=
name|keyBlocks
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|BlockGroup
name|build
parameter_list|()
block|{
return|return
operator|new
name|BlockGroup
argument_list|(
name|groupID
argument_list|,
name|blockIDs
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

