begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ThreadUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_comment
comment|/**  * {@code Callable} implementation that retries a delegate task according to  * the specified {@code RetryPolicy}.  Sleeps between retries in the caller  * thread.  *  * @param<V> the result type of method {@code call}  */
end_comment

begin_class
DECL|class|RetriableTask
specifier|public
class|class
name|RetriableTask
parameter_list|<
name|V
parameter_list|>
implements|implements
name|Callable
argument_list|<
name|V
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RetriableTask
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|task
specifier|private
specifier|final
name|Callable
argument_list|<
name|V
argument_list|>
name|task
decl_stmt|;
DECL|field|retryPolicy
specifier|private
specifier|final
name|RetryPolicy
name|retryPolicy
decl_stmt|;
DECL|method|RetriableTask (RetryPolicy retryPolicy, String name, Callable<V> task)
specifier|public
name|RetriableTask
parameter_list|(
name|RetryPolicy
name|retryPolicy
parameter_list|,
name|String
name|name
parameter_list|,
name|Callable
argument_list|<
name|V
argument_list|>
name|task
parameter_list|)
block|{
name|this
operator|.
name|retryPolicy
operator|=
name|retryPolicy
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|V
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|attempts
init|=
literal|0
decl_stmt|;
name|Exception
name|cause
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
return|return
name|task
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|cause
operator|=
name|e
expr_stmt|;
name|RetryPolicy
operator|.
name|RetryAction
name|action
init|=
name|retryPolicy
operator|.
name|shouldRetry
argument_list|(
name|e
argument_list|,
operator|++
name|attempts
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|.
name|action
operator|==
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|RetryDecision
operator|.
name|RETRY
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Execution of task {} failed, will be retried in {} ms"
argument_list|,
name|name
argument_list|,
name|action
operator|.
name|delayMillis
argument_list|)
expr_stmt|;
name|ThreadUtil
operator|.
name|sleepAtLeastIgnoreInterrupts
argument_list|(
name|action
operator|.
name|delayMillis
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Execution of task %s failed permanently after %d attempts"
argument_list|,
name|name
argument_list|,
name|attempts
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|cause
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

