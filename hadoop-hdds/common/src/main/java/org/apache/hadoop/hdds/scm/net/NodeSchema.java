begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_comment
comment|/**  * Network topology schema to housekeeper relevant information.  */
end_comment

begin_class
DECL|class|NodeSchema
specifier|public
specifier|final
class|class
name|NodeSchema
block|{
comment|/**    * Network topology layer type enum definition.    */
DECL|enum|LayerType
specifier|public
enum|enum
name|LayerType
block|{
DECL|enumConstant|ROOT
name|ROOT
argument_list|(
literal|"Root"
argument_list|,
name|NetConstants
operator|.
name|INNER_NODE_COST_DEFAULT
argument_list|)
block|,
DECL|enumConstant|INNER_NODE
name|INNER_NODE
argument_list|(
literal|"InnerNode"
argument_list|,
name|NetConstants
operator|.
name|INNER_NODE_COST_DEFAULT
argument_list|)
block|,
DECL|enumConstant|LEAF_NODE
name|LEAF_NODE
argument_list|(
literal|"Leaf"
argument_list|,
name|NetConstants
operator|.
name|NODE_COST_DEFAULT
argument_list|)
block|;
DECL|field|description
specifier|private
specifier|final
name|String
name|description
decl_stmt|;
comment|// default cost
DECL|field|cost
specifier|private
specifier|final
name|int
name|cost
decl_stmt|;
DECL|method|LayerType (String description, int cost)
name|LayerType
parameter_list|(
name|String
name|description
parameter_list|,
name|int
name|cost
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|this
operator|.
name|cost
operator|=
name|cost
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|description
return|;
block|}
DECL|method|getCost ()
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
name|cost
return|;
block|}
DECL|method|getType (String typeStr)
specifier|public
specifier|static
name|LayerType
name|getType
parameter_list|(
name|String
name|typeStr
parameter_list|)
block|{
for|for
control|(
name|LayerType
name|type
range|:
name|LayerType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|typeStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|type
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
comment|// default cost
DECL|field|cost
specifier|private
specifier|final
name|int
name|cost
decl_stmt|;
comment|// layer Type, mandatory property
DECL|field|type
specifier|private
specifier|final
name|LayerType
name|type
decl_stmt|;
comment|// default name, can be null or ""
DECL|field|defaultName
specifier|private
specifier|final
name|String
name|defaultName
decl_stmt|;
comment|// layer prefix, can be null or ""
DECL|field|prefix
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
comment|/**    * Builder for NodeSchema.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|cost
specifier|private
name|int
name|cost
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|type
specifier|private
name|LayerType
name|type
decl_stmt|;
DECL|field|defaultName
specifier|private
name|String
name|defaultName
decl_stmt|;
DECL|field|prefix
specifier|private
name|String
name|prefix
decl_stmt|;
DECL|method|setCost (int nodeCost)
specifier|public
name|Builder
name|setCost
parameter_list|(
name|int
name|nodeCost
parameter_list|)
block|{
name|this
operator|.
name|cost
operator|=
name|nodeCost
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setPrefix (String nodePrefix)
specifier|public
name|Builder
name|setPrefix
parameter_list|(
name|String
name|nodePrefix
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|nodePrefix
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setType (LayerType nodeType)
specifier|public
name|Builder
name|setType
parameter_list|(
name|LayerType
name|nodeType
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|nodeType
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setDefaultName (String nodeDefaultName)
specifier|public
name|Builder
name|setDefaultName
parameter_list|(
name|String
name|nodeDefaultName
parameter_list|)
block|{
name|this
operator|.
name|defaultName
operator|=
name|nodeDefaultName
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|NodeSchema
name|build
parameter_list|()
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Type is mandatory for a "
operator|+
literal|"network topology node layer definition"
argument_list|)
throw|;
block|}
if|if
condition|(
name|cost
operator|==
operator|-
literal|1
condition|)
block|{
name|cost
operator|=
name|type
operator|.
name|getCost
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|NodeSchema
argument_list|(
name|type
argument_list|,
name|cost
argument_list|,
name|prefix
argument_list|,
name|defaultName
argument_list|)
return|;
block|}
block|}
comment|/**    * Constructor.    * @param type layer type    * @param cost layer's default cost    * @param prefix layer's prefix    * @param defaultName layer's default name is if specified    */
DECL|method|NodeSchema (LayerType type, int cost, String prefix, String defaultName)
specifier|public
name|NodeSchema
parameter_list|(
name|LayerType
name|type
parameter_list|,
name|int
name|cost
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|defaultName
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|cost
operator|=
name|cost
expr_stmt|;
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|this
operator|.
name|defaultName
operator|=
name|defaultName
expr_stmt|;
block|}
DECL|method|matchPrefix (String name)
specifier|public
name|boolean
name|matchPrefix
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
operator|||
name|prefix
operator|==
literal|null
operator|||
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|name
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getType ()
specifier|public
name|LayerType
name|getType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|getPrefix ()
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|this
operator|.
name|prefix
return|;
block|}
DECL|method|getDefaultName ()
specifier|public
name|String
name|getDefaultName
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultName
return|;
block|}
DECL|method|getCost ()
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
name|this
operator|.
name|cost
return|;
block|}
block|}
end_class

end_unit

