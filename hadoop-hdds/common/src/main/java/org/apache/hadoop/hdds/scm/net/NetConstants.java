begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NodeSchema
operator|.
name|LayerType
import|;
end_import

begin_comment
comment|/**  * Class to hold network topology related constants and configurations.  */
end_comment

begin_class
DECL|class|NetConstants
specifier|public
specifier|final
class|class
name|NetConstants
block|{
DECL|method|NetConstants ()
specifier|private
name|NetConstants
parameter_list|()
block|{
comment|// Prevent instantiation
block|}
DECL|field|PATH_SEPARATOR
specifier|public
specifier|final
specifier|static
name|char
name|PATH_SEPARATOR
init|=
literal|'/'
decl_stmt|;
comment|/** Path separator as a string. */
DECL|field|PATH_SEPARATOR_STR
specifier|public
specifier|final
specifier|static
name|String
name|PATH_SEPARATOR_STR
init|=
literal|"/"
decl_stmt|;
DECL|field|SCOPE_REVERSE_STR
specifier|public
specifier|final
specifier|static
name|String
name|SCOPE_REVERSE_STR
init|=
literal|"~"
decl_stmt|;
comment|/** string representation of root. */
DECL|field|ROOT
specifier|public
specifier|final
specifier|static
name|String
name|ROOT
init|=
literal|""
decl_stmt|;
DECL|field|INNER_NODE_COST_DEFAULT
specifier|public
specifier|final
specifier|static
name|int
name|INNER_NODE_COST_DEFAULT
init|=
literal|1
decl_stmt|;
DECL|field|NODE_COST_DEFAULT
specifier|public
specifier|final
specifier|static
name|int
name|NODE_COST_DEFAULT
init|=
literal|0
decl_stmt|;
DECL|field|ANCESTOR_GENERATION_DEFAULT
specifier|public
specifier|final
specifier|static
name|int
name|ANCESTOR_GENERATION_DEFAULT
init|=
literal|0
decl_stmt|;
DECL|field|ROOT_LEVEL
specifier|public
specifier|final
specifier|static
name|int
name|ROOT_LEVEL
init|=
literal|1
decl_stmt|;
DECL|field|NODE_COST_PREFIX
specifier|public
specifier|final
specifier|static
name|String
name|NODE_COST_PREFIX
init|=
literal|"$"
decl_stmt|;
DECL|field|DEFAULT_RACK
specifier|public
specifier|final
specifier|static
name|String
name|DEFAULT_RACK
init|=
literal|"/default-rack"
decl_stmt|;
DECL|field|DEFAULT_NODEGROUP
specifier|public
specifier|final
specifier|static
name|String
name|DEFAULT_NODEGROUP
init|=
literal|"/default-nodegroup"
decl_stmt|;
DECL|field|DEFAULT_DATACENTER
specifier|public
specifier|final
specifier|static
name|String
name|DEFAULT_DATACENTER
init|=
literal|"/default-datacenter"
decl_stmt|;
DECL|field|DEFAULT_REGION
specifier|public
specifier|final
specifier|static
name|String
name|DEFAULT_REGION
init|=
literal|"/default-dataregion"
decl_stmt|;
comment|// Build-in network topology node schema
DECL|field|ROOT_SCHEMA
specifier|public
specifier|static
specifier|final
name|NodeSchema
name|ROOT_SCHEMA
init|=
operator|new
name|NodeSchema
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|LayerType
operator|.
name|ROOT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|REGION_SCHEMA
specifier|public
specifier|static
specifier|final
name|NodeSchema
name|REGION_SCHEMA
init|=
operator|new
name|NodeSchema
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|LayerType
operator|.
name|INNER_NODE
argument_list|)
operator|.
name|setDefaultName
argument_list|(
name|DEFAULT_REGION
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|DATACENTER_SCHEMA
specifier|public
specifier|static
specifier|final
name|NodeSchema
name|DATACENTER_SCHEMA
init|=
operator|new
name|NodeSchema
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|LayerType
operator|.
name|INNER_NODE
argument_list|)
operator|.
name|setDefaultName
argument_list|(
name|DEFAULT_DATACENTER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|RACK_SCHEMA
specifier|public
specifier|static
specifier|final
name|NodeSchema
name|RACK_SCHEMA
init|=
operator|new
name|NodeSchema
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|LayerType
operator|.
name|INNER_NODE
argument_list|)
operator|.
name|setDefaultName
argument_list|(
name|DEFAULT_RACK
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|NODEGROUP_SCHEMA
specifier|public
specifier|static
specifier|final
name|NodeSchema
name|NODEGROUP_SCHEMA
init|=
operator|new
name|NodeSchema
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|LayerType
operator|.
name|INNER_NODE
argument_list|)
operator|.
name|setDefaultName
argument_list|(
name|DEFAULT_NODEGROUP
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|LEAF_SCHEMA
specifier|public
specifier|static
specifier|final
name|NodeSchema
name|LEAF_SCHEMA
init|=
operator|new
name|NodeSchema
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|LayerType
operator|.
name|LEAF_NODE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

