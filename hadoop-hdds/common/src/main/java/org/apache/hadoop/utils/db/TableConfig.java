begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.utils.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|EqualsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|ColumnFamilyOptions
import|;
end_import

begin_comment
comment|/**  * Class that maintains Table Configuration.  */
end_comment

begin_class
DECL|class|TableConfig
specifier|public
class|class
name|TableConfig
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|columnFamilyOptions
specifier|private
specifier|final
name|ColumnFamilyOptions
name|columnFamilyOptions
decl_stmt|;
comment|/**    * Constructs a Table Config.    * @param name - Name of the Table.    * @param columnFamilyOptions - Column Family options.    */
DECL|method|TableConfig (String name, ColumnFamilyOptions columnFamilyOptions)
specifier|public
name|TableConfig
parameter_list|(
name|String
name|name
parameter_list|,
name|ColumnFamilyOptions
name|columnFamilyOptions
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|columnFamilyOptions
operator|=
name|columnFamilyOptions
expr_stmt|;
block|}
comment|/**    * Returns the Name for this Table.    * @return - Name String    */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * Returns a ColumnFamilyDescriptor for this table.    * @return ColumnFamilyDescriptor    */
DECL|method|getDescriptor ()
specifier|public
name|ColumnFamilyDescriptor
name|getDescriptor
parameter_list|()
block|{
return|return
operator|new
name|ColumnFamilyDescriptor
argument_list|(
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|name
argument_list|)
argument_list|,
name|columnFamilyOptions
argument_list|)
return|;
block|}
comment|/**    * Returns Column family options for this Table.    * @return  ColumnFamilyOptions used for the Table.    */
DECL|method|getColumnFamilyOptions ()
specifier|public
name|ColumnFamilyOptions
name|getColumnFamilyOptions
parameter_list|()
block|{
return|return
name|columnFamilyOptions
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TableConfig
name|that
init|=
operator|(
name|TableConfig
operator|)
name|o
decl_stmt|;
return|return
operator|new
name|EqualsBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|getName
argument_list|()
argument_list|,
name|that
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEquals
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|(
literal|17
argument_list|,
literal|37
argument_list|)
operator|.
name|append
argument_list|(
name|getName
argument_list|()
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

