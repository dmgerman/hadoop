begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientReply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|BlockNotCommittedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerNotOpenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|token
operator|.
name|OzoneBlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|token
operator|.
name|OzoneBlockTokenSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|ChecksumData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|CloseContainerRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|DatanodeBlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|GetBlockRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|GetBlockResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|GetSmallFileRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|GetSmallFileResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|BlockData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|PutBlockRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|PutSmallFileRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ReadChunkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ReadContainerRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ReadContainerResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|PutSmallFileResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_comment
comment|/**  * Implementation of all container protocol calls performed by Container  * clients.  */
end_comment

begin_class
DECL|class|ContainerProtocolCalls
specifier|public
specifier|final
class|class
name|ContainerProtocolCalls
block|{
comment|/**    * There is no need to instantiate this class.    */
DECL|method|ContainerProtocolCalls ()
specifier|private
name|ContainerProtocolCalls
parameter_list|()
block|{   }
comment|/**    * Calls the container protocol to get a container block.    *    * @param xceiverClient client to perform call    * @param datanodeBlockID blockID to identify container    * @return container protocol get block response    * @throws IOException if there is an I/O error while performing the call    */
DECL|method|getBlock (XceiverClientSpi xceiverClient, DatanodeBlockID datanodeBlockID)
specifier|public
specifier|static
name|GetBlockResponseProto
name|getBlock
parameter_list|(
name|XceiverClientSpi
name|xceiverClient
parameter_list|,
name|DatanodeBlockID
name|datanodeBlockID
parameter_list|)
throws|throws
name|IOException
block|{
name|GetBlockRequestProto
operator|.
name|Builder
name|readBlockRequest
init|=
name|GetBlockRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|datanodeBlockID
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|xceiverClient
operator|.
name|getPipeline
argument_list|()
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|builder
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|GetBlock
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|datanodeBlockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|id
argument_list|)
operator|.
name|setGetBlock
argument_list|(
name|readBlockRequest
argument_list|)
decl_stmt|;
name|String
name|encodedToken
init|=
name|getEncodedBlockToken
argument_list|(
name|getService
argument_list|(
name|datanodeBlockID
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodedToken
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setEncodedToken
argument_list|(
name|encodedToken
argument_list|)
expr_stmt|;
block|}
name|ContainerCommandRequestProto
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ContainerCommandResponseProto
name|response
init|=
name|xceiverClient
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|,
name|getValidatorList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getGetBlock
argument_list|()
return|;
block|}
comment|/**    * Calls the container protocol to get the length of a committed block.    *    * @param xceiverClient client to perform call    * @param blockID blockId for the Block    * @return container protocol getLastCommittedBlockLength response    * @throws IOException if there is an I/O error while performing the call    */
specifier|public
specifier|static
name|ContainerProtos
operator|.
name|GetCommittedBlockLengthResponseProto
DECL|method|getCommittedBlockLength ( XceiverClientSpi xceiverClient, BlockID blockID)
name|getCommittedBlockLength
parameter_list|(
name|XceiverClientSpi
name|xceiverClient
parameter_list|,
name|BlockID
name|blockID
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerProtos
operator|.
name|GetCommittedBlockLengthRequestProto
operator|.
name|Builder
name|getBlockLengthRequestBuilder
init|=
name|ContainerProtos
operator|.
name|GetCommittedBlockLengthRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|blockID
operator|.
name|getDatanodeBlockIDProtobuf
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|xceiverClient
operator|.
name|getPipeline
argument_list|()
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|builder
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|GetCommittedBlockLength
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|id
argument_list|)
operator|.
name|setGetCommittedBlockLength
argument_list|(
name|getBlockLengthRequestBuilder
argument_list|)
decl_stmt|;
name|String
name|encodedToken
init|=
name|getEncodedBlockToken
argument_list|(
operator|new
name|Text
argument_list|(
name|blockID
operator|.
name|getContainerBlockID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodedToken
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setEncodedToken
argument_list|(
name|encodedToken
argument_list|)
expr_stmt|;
block|}
name|ContainerCommandRequestProto
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ContainerCommandResponseProto
name|response
init|=
name|xceiverClient
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|,
name|getValidatorList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getGetCommittedBlockLength
argument_list|()
return|;
block|}
comment|/**    * Calls the container protocol to put a container block.    *    * @param xceiverClient client to perform call    * @param containerBlockData block data to identify container    * @return putBlockResponse    * @throws IOException if there is an I/O error while performing the call    */
DECL|method|putBlock ( XceiverClientSpi xceiverClient, BlockData containerBlockData)
specifier|public
specifier|static
name|ContainerProtos
operator|.
name|PutBlockResponseProto
name|putBlock
parameter_list|(
name|XceiverClientSpi
name|xceiverClient
parameter_list|,
name|BlockData
name|containerBlockData
parameter_list|)
throws|throws
name|IOException
block|{
name|PutBlockRequestProto
operator|.
name|Builder
name|createBlockRequest
init|=
name|PutBlockRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockData
argument_list|(
name|containerBlockData
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|xceiverClient
operator|.
name|getPipeline
argument_list|()
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|builder
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|PutBlock
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|containerBlockData
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|id
argument_list|)
operator|.
name|setPutBlock
argument_list|(
name|createBlockRequest
argument_list|)
decl_stmt|;
name|String
name|encodedToken
init|=
name|getEncodedBlockToken
argument_list|(
name|getService
argument_list|(
name|containerBlockData
operator|.
name|getBlockID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodedToken
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setEncodedToken
argument_list|(
name|encodedToken
argument_list|)
expr_stmt|;
block|}
name|ContainerCommandRequestProto
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ContainerCommandResponseProto
name|response
init|=
name|xceiverClient
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|,
name|getValidatorList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getPutBlock
argument_list|()
return|;
block|}
comment|/**    * Calls the container protocol to put a container block.    *    * @param xceiverClient client to perform call    * @param containerBlockData block data to identify container    * @return putBlockResponse    * @throws IOException if there is an error while performing the call    * @throws InterruptedException    * @throws ExecutionException    */
DECL|method|putBlockAsync ( XceiverClientSpi xceiverClient, BlockData containerBlockData)
specifier|public
specifier|static
name|XceiverClientReply
name|putBlockAsync
parameter_list|(
name|XceiverClientSpi
name|xceiverClient
parameter_list|,
name|BlockData
name|containerBlockData
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|PutBlockRequestProto
operator|.
name|Builder
name|createBlockRequest
init|=
name|PutBlockRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockData
argument_list|(
name|containerBlockData
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|xceiverClient
operator|.
name|getPipeline
argument_list|()
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|builder
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|PutBlock
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|containerBlockData
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|id
argument_list|)
operator|.
name|setPutBlock
argument_list|(
name|createBlockRequest
argument_list|)
decl_stmt|;
name|String
name|encodedToken
init|=
name|getEncodedBlockToken
argument_list|(
name|getService
argument_list|(
name|containerBlockData
operator|.
name|getBlockID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodedToken
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setEncodedToken
argument_list|(
name|encodedToken
argument_list|)
expr_stmt|;
block|}
name|ContainerCommandRequestProto
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|xceiverClient
operator|.
name|sendCommandAsync
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * Calls the container protocol to read a chunk.    *    * @param xceiverClient client to perform call    * @param chunk information about chunk to read    * @param blockID ID of the block    * @param validators functions to validate the response    * @return container protocol read chunk response    * @throws IOException if there is an I/O error while performing the call    */
DECL|method|readChunk ( XceiverClientSpi xceiverClient, ChunkInfo chunk, BlockID blockID, List<CheckedBiFunction> validators)
specifier|public
specifier|static
name|ContainerProtos
operator|.
name|ReadChunkResponseProto
name|readChunk
parameter_list|(
name|XceiverClientSpi
name|xceiverClient
parameter_list|,
name|ChunkInfo
name|chunk
parameter_list|,
name|BlockID
name|blockID
parameter_list|,
name|List
argument_list|<
name|CheckedBiFunction
argument_list|>
name|validators
parameter_list|)
throws|throws
name|IOException
block|{
name|ReadChunkRequestProto
operator|.
name|Builder
name|readChunkRequest
init|=
name|ReadChunkRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|blockID
operator|.
name|getDatanodeBlockIDProtobuf
argument_list|()
argument_list|)
operator|.
name|setChunkData
argument_list|(
name|chunk
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|xceiverClient
operator|.
name|getPipeline
argument_list|()
operator|.
name|getClosestNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|builder
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|ReadChunk
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|id
argument_list|)
operator|.
name|setReadChunk
argument_list|(
name|readChunkRequest
argument_list|)
decl_stmt|;
name|String
name|encodedToken
init|=
name|getEncodedBlockToken
argument_list|(
operator|new
name|Text
argument_list|(
name|blockID
operator|.
name|getContainerBlockID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodedToken
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setEncodedToken
argument_list|(
name|encodedToken
argument_list|)
expr_stmt|;
block|}
name|ContainerCommandRequestProto
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ContainerCommandResponseProto
name|reply
init|=
name|xceiverClient
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|,
name|validators
argument_list|)
decl_stmt|;
return|return
name|reply
operator|.
name|getReadChunk
argument_list|()
return|;
block|}
comment|/**    * Calls the container protocol to write a chunk.    *    * @param xceiverClient client to perform call    * @param chunk information about chunk to write    * @param blockID ID of the block    * @param data the data of the chunk to write    * @throws IOException if there is an error while performing the call    */
DECL|method|writeChunk (XceiverClientSpi xceiverClient, ChunkInfo chunk, BlockID blockID, ByteString data)
specifier|public
specifier|static
name|void
name|writeChunk
parameter_list|(
name|XceiverClientSpi
name|xceiverClient
parameter_list|,
name|ChunkInfo
name|chunk
parameter_list|,
name|BlockID
name|blockID
parameter_list|,
name|ByteString
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|WriteChunkRequestProto
operator|.
name|Builder
name|writeChunkRequest
init|=
name|WriteChunkRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|blockID
operator|.
name|getDatanodeBlockIDProtobuf
argument_list|()
argument_list|)
operator|.
name|setChunkData
argument_list|(
name|chunk
argument_list|)
operator|.
name|setData
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|xceiverClient
operator|.
name|getPipeline
argument_list|()
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|builder
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|WriteChunk
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|id
argument_list|)
operator|.
name|setWriteChunk
argument_list|(
name|writeChunkRequest
argument_list|)
decl_stmt|;
name|String
name|encodedToken
init|=
name|getEncodedBlockToken
argument_list|(
operator|new
name|Text
argument_list|(
name|blockID
operator|.
name|getContainerBlockID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodedToken
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setEncodedToken
argument_list|(
name|encodedToken
argument_list|)
expr_stmt|;
block|}
name|ContainerCommandRequestProto
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|xceiverClient
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|,
name|getValidatorList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Calls the container protocol to write a chunk.    *    * @param xceiverClient client to perform call    * @param chunk information about chunk to write    * @param blockID ID of the block    * @param data the data of the chunk to write    * @throws IOException if there is an I/O error while performing the call    */
DECL|method|writeChunkAsync ( XceiverClientSpi xceiverClient, ChunkInfo chunk, BlockID blockID, ByteString data)
specifier|public
specifier|static
name|XceiverClientReply
name|writeChunkAsync
parameter_list|(
name|XceiverClientSpi
name|xceiverClient
parameter_list|,
name|ChunkInfo
name|chunk
parameter_list|,
name|BlockID
name|blockID
parameter_list|,
name|ByteString
name|data
parameter_list|)
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|WriteChunkRequestProto
operator|.
name|Builder
name|writeChunkRequest
init|=
name|WriteChunkRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|blockID
operator|.
name|getDatanodeBlockIDProtobuf
argument_list|()
argument_list|)
operator|.
name|setChunkData
argument_list|(
name|chunk
argument_list|)
operator|.
name|setData
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|xceiverClient
operator|.
name|getPipeline
argument_list|()
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|builder
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|WriteChunk
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|id
argument_list|)
operator|.
name|setWriteChunk
argument_list|(
name|writeChunkRequest
argument_list|)
decl_stmt|;
name|String
name|encodedToken
init|=
name|getEncodedBlockToken
argument_list|(
operator|new
name|Text
argument_list|(
name|blockID
operator|.
name|getContainerBlockID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodedToken
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setEncodedToken
argument_list|(
name|encodedToken
argument_list|)
expr_stmt|;
block|}
name|ContainerCommandRequestProto
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|xceiverClient
operator|.
name|sendCommandAsync
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * Allows writing a small file using single RPC. This takes the container    * name, block name and data to write sends all that data to the container    * using a single RPC. This API is designed to be used for files which are    * smaller than 1 MB.    *    * @param client - client that communicates with the container.    * @param blockID - ID of the block    * @param data - Data to be written into the container.    * @return container protocol writeSmallFile response    * @throws IOException    */
DECL|method|writeSmallFile ( XceiverClientSpi client, BlockID blockID, byte[] data)
specifier|public
specifier|static
name|PutSmallFileResponseProto
name|writeSmallFile
parameter_list|(
name|XceiverClientSpi
name|client
parameter_list|,
name|BlockID
name|blockID
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockData
name|containerBlockData
init|=
name|BlockData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|blockID
operator|.
name|getDatanodeBlockIDProtobuf
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PutBlockRequestProto
operator|.
name|Builder
name|createBlockRequest
init|=
name|PutBlockRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockData
argument_list|(
name|containerBlockData
argument_list|)
decl_stmt|;
name|KeyValue
name|keyValue
init|=
name|KeyValue
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"OverWriteRequested"
argument_list|)
operator|.
name|setValue
argument_list|(
literal|"true"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Checksum
name|checksum
init|=
operator|new
name|Checksum
argument_list|()
decl_stmt|;
name|ChecksumData
name|checksumData
init|=
name|checksum
operator|.
name|computeChecksum
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
name|ChunkInfo
name|chunk
init|=
name|ChunkInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setChunkName
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
operator|+
literal|"_chunk"
argument_list|)
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
operator|.
name|setLen
argument_list|(
name|data
operator|.
name|length
argument_list|)
operator|.
name|addMetadata
argument_list|(
name|keyValue
argument_list|)
operator|.
name|setChecksumData
argument_list|(
name|checksumData
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PutSmallFileRequestProto
name|putSmallFileRequest
init|=
name|PutSmallFileRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setChunkInfo
argument_list|(
name|chunk
argument_list|)
operator|.
name|setBlock
argument_list|(
name|createBlockRequest
argument_list|)
operator|.
name|setData
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|data
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|client
operator|.
name|getPipeline
argument_list|()
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|builder
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|PutSmallFile
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|id
argument_list|)
operator|.
name|setPutSmallFile
argument_list|(
name|putSmallFileRequest
argument_list|)
decl_stmt|;
name|String
name|encodedToken
init|=
name|getEncodedBlockToken
argument_list|(
operator|new
name|Text
argument_list|(
name|blockID
operator|.
name|getContainerBlockID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodedToken
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setEncodedToken
argument_list|(
name|encodedToken
argument_list|)
expr_stmt|;
block|}
name|ContainerCommandRequestProto
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ContainerCommandResponseProto
name|response
init|=
name|client
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|,
name|getValidatorList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getPutSmallFile
argument_list|()
return|;
block|}
comment|/**    * createContainer call that creates a container on the datanode.    * @param client  - client    * @param containerID - ID of container    * @param encodedToken - encodedToken if security is enabled    * @throws IOException    */
DECL|method|createContainer (XceiverClientSpi client, long containerID, String encodedToken)
specifier|public
specifier|static
name|void
name|createContainer
parameter_list|(
name|XceiverClientSpi
name|client
parameter_list|,
name|long
name|containerID
parameter_list|,
name|String
name|encodedToken
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerProtos
operator|.
name|CreateContainerRequestProto
operator|.
name|Builder
name|createRequest
init|=
name|ContainerProtos
operator|.
name|CreateContainerRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|createRequest
operator|.
name|setContainerType
argument_list|(
name|ContainerProtos
operator|.
name|ContainerType
operator|.
name|KeyValueContainer
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|client
operator|.
name|getPipeline
argument_list|()
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|encodedToken
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setEncodedToken
argument_list|(
name|encodedToken
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|CreateContainer
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCreateContainer
argument_list|(
name|createRequest
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|client
operator|.
name|sendCommand
argument_list|(
name|request
operator|.
name|build
argument_list|()
argument_list|,
name|getValidatorList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes a container from a pipeline.    *    * @param client    * @param force whether or not to forcibly delete the container.    * @param encodedToken - encodedToken if security is enabled    * @throws IOException    */
DECL|method|deleteContainer (XceiverClientSpi client, long containerID, boolean force, String encodedToken)
specifier|public
specifier|static
name|void
name|deleteContainer
parameter_list|(
name|XceiverClientSpi
name|client
parameter_list|,
name|long
name|containerID
parameter_list|,
name|boolean
name|force
parameter_list|,
name|String
name|encodedToken
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerProtos
operator|.
name|DeleteContainerRequestProto
operator|.
name|Builder
name|deleteRequest
init|=
name|ContainerProtos
operator|.
name|DeleteContainerRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|deleteRequest
operator|.
name|setForceDelete
argument_list|(
name|force
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|client
operator|.
name|getPipeline
argument_list|()
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|DeleteContainer
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDeleteContainer
argument_list|(
name|deleteRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|encodedToken
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setEncodedToken
argument_list|(
name|encodedToken
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|sendCommand
argument_list|(
name|request
operator|.
name|build
argument_list|()
argument_list|,
name|getValidatorList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Close a container.    *    * @param client    * @param containerID    * @param encodedToken - encodedToken if security is enabled    * @throws IOException    */
DECL|method|closeContainer (XceiverClientSpi client, long containerID, String encodedToken)
specifier|public
specifier|static
name|void
name|closeContainer
parameter_list|(
name|XceiverClientSpi
name|client
parameter_list|,
name|long
name|containerID
parameter_list|,
name|String
name|encodedToken
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|id
init|=
name|client
operator|.
name|getPipeline
argument_list|()
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|CloseContainer
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCloseContainer
argument_list|(
name|CloseContainerRequestProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|encodedToken
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setEncodedToken
argument_list|(
name|encodedToken
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|sendCommand
argument_list|(
name|request
operator|.
name|build
argument_list|()
argument_list|,
name|getValidatorList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * readContainer call that gets meta data from an existing container.    *    * @param client       - client    * @param encodedToken - encodedToken if security is enabled    * @throws IOException    */
DECL|method|readContainer ( XceiverClientSpi client, long containerID, String encodedToken)
specifier|public
specifier|static
name|ReadContainerResponseProto
name|readContainer
parameter_list|(
name|XceiverClientSpi
name|client
parameter_list|,
name|long
name|containerID
parameter_list|,
name|String
name|encodedToken
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|id
init|=
name|client
operator|.
name|getPipeline
argument_list|()
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|ReadContainer
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|request
operator|.
name|setReadContainer
argument_list|(
name|ReadContainerRequestProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|encodedToken
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setEncodedToken
argument_list|(
name|encodedToken
argument_list|)
expr_stmt|;
block|}
name|ContainerCommandResponseProto
name|response
init|=
name|client
operator|.
name|sendCommand
argument_list|(
name|request
operator|.
name|build
argument_list|()
argument_list|,
name|getValidatorList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getReadContainer
argument_list|()
return|;
block|}
comment|/**    * Reads the data given the blockID.    *    * @param client    * @param blockID - ID of the block    * @return GetSmallFileResponseProto    * @throws IOException    */
DECL|method|readSmallFile (XceiverClientSpi client, BlockID blockID)
specifier|public
specifier|static
name|GetSmallFileResponseProto
name|readSmallFile
parameter_list|(
name|XceiverClientSpi
name|client
parameter_list|,
name|BlockID
name|blockID
parameter_list|)
throws|throws
name|IOException
block|{
name|GetBlockRequestProto
operator|.
name|Builder
name|getBlock
init|=
name|GetBlockRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|blockID
operator|.
name|getDatanodeBlockIDProtobuf
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerProtos
operator|.
name|GetSmallFileRequestProto
name|getSmallFileRequest
init|=
name|GetSmallFileRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlock
argument_list|(
name|getBlock
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|client
operator|.
name|getPipeline
argument_list|()
operator|.
name|getClosestNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|builder
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|GetSmallFile
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|id
argument_list|)
operator|.
name|setGetSmallFile
argument_list|(
name|getSmallFileRequest
argument_list|)
decl_stmt|;
name|String
name|encodedToken
init|=
name|getEncodedBlockToken
argument_list|(
operator|new
name|Text
argument_list|(
name|blockID
operator|.
name|getContainerBlockID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodedToken
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setEncodedToken
argument_list|(
name|encodedToken
argument_list|)
expr_stmt|;
block|}
name|ContainerCommandRequestProto
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ContainerCommandResponseProto
name|response
init|=
name|client
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|,
name|getValidatorList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getGetSmallFile
argument_list|()
return|;
block|}
comment|/**    * Validates a response from a container protocol call.  Any non-successful    * return code is mapped to a corresponding exception and thrown.    *    * @param response container protocol call response    * @throws StorageContainerException if the container protocol call failed    */
DECL|method|validateContainerResponse ( ContainerCommandResponseProto response )
specifier|public
specifier|static
name|void
name|validateContainerResponse
parameter_list|(
name|ContainerCommandResponseProto
name|response
parameter_list|)
throws|throws
name|StorageContainerException
block|{
if|if
condition|(
name|response
operator|.
name|getResult
argument_list|()
operator|==
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|response
operator|.
name|getResult
argument_list|()
operator|==
name|ContainerProtos
operator|.
name|Result
operator|.
name|BLOCK_NOT_COMMITTED
condition|)
block|{
throw|throw
operator|new
name|BlockNotCommittedException
argument_list|(
name|response
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|response
operator|.
name|getResult
argument_list|()
operator|==
name|ContainerProtos
operator|.
name|Result
operator|.
name|CLOSED_CONTAINER_IO
condition|)
block|{
throw|throw
operator|new
name|ContainerNotOpenException
argument_list|(
name|response
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|StorageContainerException
argument_list|(
name|response
operator|.
name|getMessage
argument_list|()
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Returns a url encoded block token. Service param should match the service    * field of token.    * @param service    *    * */
DECL|method|getEncodedBlockToken (Text service)
specifier|private
specifier|static
name|String
name|getEncodedBlockToken
parameter_list|(
name|Text
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|OzoneBlockTokenIdentifier
argument_list|>
name|token
init|=
name|OzoneBlockTokenSelector
operator|.
name|selectBlockToken
argument_list|(
name|service
argument_list|,
name|ugi
operator|.
name|getTokens
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
return|return
name|token
operator|.
name|encodeToUrlString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getService (DatanodeBlockID blockId)
specifier|private
specifier|static
name|Text
name|getService
parameter_list|(
name|DatanodeBlockID
name|blockId
parameter_list|)
block|{
return|return
operator|new
name|Text
argument_list|(
operator|new
name|StringBuffer
argument_list|()
operator|.
name|append
argument_list|(
literal|"conID: "
argument_list|)
operator|.
name|append
argument_list|(
name|blockId
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" locID: "
argument_list|)
operator|.
name|append
argument_list|(
name|blockId
operator|.
name|getLocalID
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getValidatorList ()
specifier|public
specifier|static
name|List
argument_list|<
name|CheckedBiFunction
argument_list|>
name|getValidatorList
parameter_list|()
block|{
name|List
argument_list|<
name|CheckedBiFunction
argument_list|>
name|validators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CheckedBiFunction
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
argument_list|,
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|,
name|IOException
argument_list|>
name|validator
init|=
parameter_list|(
name|request
parameter_list|,
name|response
parameter_list|)
lambda|->
name|validateContainerResponse
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|validators
operator|.
name|add
argument_list|(
name|validator
argument_list|)
expr_stmt|;
return|return
name|validators
return|;
block|}
block|}
end_class

end_unit

