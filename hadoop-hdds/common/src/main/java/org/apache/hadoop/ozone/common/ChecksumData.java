begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChecksumType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_comment
comment|/**  * Java class that represents Checksum ProtoBuf class. This helper class allows  * us to convert to and from protobuf to normal java.  */
end_comment

begin_class
DECL|class|ChecksumData
specifier|public
class|class
name|ChecksumData
block|{
DECL|field|type
specifier|private
name|ChecksumType
name|type
decl_stmt|;
comment|// Checksum will be computed for every bytesPerChecksum number of bytes and
comment|// stored sequentially in checksumList
DECL|field|bytesPerChecksum
specifier|private
name|int
name|bytesPerChecksum
decl_stmt|;
DECL|field|checksums
specifier|private
name|List
argument_list|<
name|ByteString
argument_list|>
name|checksums
decl_stmt|;
DECL|method|ChecksumData (ChecksumType checksumType, int bytesPerChecksum)
specifier|public
name|ChecksumData
parameter_list|(
name|ChecksumType
name|checksumType
parameter_list|,
name|int
name|bytesPerChecksum
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|checksumType
expr_stmt|;
name|this
operator|.
name|bytesPerChecksum
operator|=
name|bytesPerChecksum
expr_stmt|;
name|this
operator|.
name|checksums
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
comment|/**    * Getter method for checksumType.    */
DECL|method|getChecksumType ()
specifier|public
name|ChecksumType
name|getChecksumType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
comment|/**    * Getter method for bytesPerChecksum.    */
DECL|method|getBytesPerChecksum ()
specifier|public
name|int
name|getBytesPerChecksum
parameter_list|()
block|{
return|return
name|this
operator|.
name|bytesPerChecksum
return|;
block|}
comment|/**    * Getter method for checksums.    */
annotation|@
name|VisibleForTesting
DECL|method|getChecksums ()
specifier|public
name|List
argument_list|<
name|ByteString
argument_list|>
name|getChecksums
parameter_list|()
block|{
return|return
name|this
operator|.
name|checksums
return|;
block|}
comment|/**    * Setter method for checksums.    * @param checksumList list of checksums    */
DECL|method|setChecksums (List<ByteString> checksumList)
specifier|public
name|void
name|setChecksums
parameter_list|(
name|List
argument_list|<
name|ByteString
argument_list|>
name|checksumList
parameter_list|)
block|{
name|this
operator|.
name|checksums
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|checksums
operator|.
name|addAll
argument_list|(
name|checksumList
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct the Checksum ProtoBuf message.    * @return Checksum ProtoBuf message    */
DECL|method|getProtoBufMessage ()
specifier|public
name|ContainerProtos
operator|.
name|ChecksumData
name|getProtoBufMessage
parameter_list|()
block|{
name|ContainerProtos
operator|.
name|ChecksumData
operator|.
name|Builder
name|checksumProtoBuilder
init|=
name|ContainerProtos
operator|.
name|ChecksumData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|this
operator|.
name|type
argument_list|)
operator|.
name|setBytesPerChecksum
argument_list|(
name|this
operator|.
name|bytesPerChecksum
argument_list|)
decl_stmt|;
name|checksumProtoBuilder
operator|.
name|addAllChecksums
argument_list|(
name|checksums
argument_list|)
expr_stmt|;
return|return
name|checksumProtoBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Constructs Checksum class object from the Checksum ProtoBuf message.    * @param checksumDataProto Checksum ProtoBuf message    * @return ChecksumData object representing the proto    */
DECL|method|getFromProtoBuf ( ContainerProtos.ChecksumData checksumDataProto)
specifier|public
specifier|static
name|ChecksumData
name|getFromProtoBuf
parameter_list|(
name|ContainerProtos
operator|.
name|ChecksumData
name|checksumDataProto
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|checksumDataProto
argument_list|)
expr_stmt|;
name|ChecksumData
name|checksumData
init|=
operator|new
name|ChecksumData
argument_list|(
name|checksumDataProto
operator|.
name|getType
argument_list|()
argument_list|,
name|checksumDataProto
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|checksumDataProto
operator|.
name|getChecksumsCount
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|checksumData
operator|.
name|setChecksums
argument_list|(
name|checksumDataProto
operator|.
name|getChecksumsList
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|checksumData
return|;
block|}
comment|/**    * Verify that this ChecksumData matches with the input ChecksumData.    * @param that the ChecksumData to match with    * @return true if checksums match    * @throws OzoneChecksumException    */
DECL|method|verifyChecksumDataMatches (ChecksumData that)
specifier|public
name|boolean
name|verifyChecksumDataMatches
parameter_list|(
name|ChecksumData
name|that
parameter_list|)
throws|throws
name|OzoneChecksumException
block|{
comment|// pre checks
if|if
condition|(
name|this
operator|.
name|checksums
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|OzoneChecksumException
argument_list|(
literal|"Original checksumData has no "
operator|+
literal|"checksums"
argument_list|)
throw|;
block|}
if|if
condition|(
name|that
operator|.
name|checksums
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|OzoneChecksumException
argument_list|(
literal|"Computed checksumData has no "
operator|+
literal|"checksums"
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|checksums
operator|.
name|size
argument_list|()
operator|!=
name|that
operator|.
name|checksums
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OzoneChecksumException
argument_list|(
literal|"Original and Computed checksumData's "
operator|+
literal|"has different number of checksums"
argument_list|)
throw|;
block|}
comment|// Verify that checksum matches at each index
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|this
operator|.
name|checksums
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|matchChecksumAtIndex
argument_list|(
name|this
operator|.
name|checksums
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|that
operator|.
name|checksums
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
block|{
comment|// checksum mismatch. throw exception.
throw|throw
operator|new
name|OzoneChecksumException
argument_list|(
name|index
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|matchChecksumAtIndex ( ByteString expectedChecksumAtIndex, ByteString computedChecksumAtIndex)
specifier|private
specifier|static
name|boolean
name|matchChecksumAtIndex
parameter_list|(
name|ByteString
name|expectedChecksumAtIndex
parameter_list|,
name|ByteString
name|computedChecksumAtIndex
parameter_list|)
block|{
return|return
name|expectedChecksumAtIndex
operator|.
name|equals
argument_list|(
name|computedChecksumAtIndex
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|ChecksumData
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ChecksumData
name|that
init|=
operator|(
name|ChecksumData
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|type
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getChecksumType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|bytesPerChecksum
operator|!=
name|that
operator|.
name|getBytesPerChecksum
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|checksums
operator|.
name|size
argument_list|()
operator|!=
name|that
operator|.
name|checksums
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Match checksum at each index
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|this
operator|.
name|checksums
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|matchChecksumAtIndex
argument_list|(
name|this
operator|.
name|checksums
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|that
operator|.
name|checksums
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|HashCodeBuilder
name|hc
init|=
operator|new
name|HashCodeBuilder
argument_list|()
decl_stmt|;
name|hc
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|hc
operator|.
name|append
argument_list|(
name|bytesPerChecksum
argument_list|)
expr_stmt|;
name|hc
operator|.
name|append
argument_list|(
name|checksums
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|hc
operator|.
name|toHashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

