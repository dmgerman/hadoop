begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.audit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Defines audit message structure.  */
end_comment

begin_class
DECL|class|AuditMessage
specifier|public
class|class
name|AuditMessage
implements|implements
name|Message
block|{
DECL|field|message
specifier|private
name|String
name|message
decl_stmt|;
DECL|method|AuditMessage (String user, String ip, String op, Map<String, String> params, String ret)
specifier|public
name|AuditMessage
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|ip
parameter_list|,
name|String
name|op
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|String
name|ret
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"user=%s ip=%s op=%s %s ret=%s"
argument_list|,
name|user
argument_list|,
name|ip
argument_list|,
name|op
argument_list|,
name|params
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFormattedMessage ()
specifier|public
name|String
name|getFormattedMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
annotation|@
name|Override
DECL|method|getFormat ()
specifier|public
name|String
name|getFormat
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getParameters ()
specifier|public
name|Object
index|[]
name|getParameters
parameter_list|()
block|{
return|return
operator|new
name|Object
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getThrowable ()
specifier|public
name|Throwable
name|getThrowable
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Use when there are custom string to be added to default msg.    * @param customMessage custom string    */
DECL|method|appendMessage (String customMessage)
specifier|private
name|void
name|appendMessage
parameter_list|(
name|String
name|customMessage
parameter_list|)
block|{
name|this
operator|.
name|message
operator|+=
name|customMessage
expr_stmt|;
block|}
block|}
end_class

end_unit

