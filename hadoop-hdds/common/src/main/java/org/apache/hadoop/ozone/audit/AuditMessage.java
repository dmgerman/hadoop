begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.audit
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Defines audit message structure.  */
end_comment

begin_class
DECL|class|AuditMessage
specifier|public
class|class
name|AuditMessage
implements|implements
name|Message
block|{
DECL|field|message
specifier|private
name|String
name|message
decl_stmt|;
DECL|field|throwable
specifier|private
name|Throwable
name|throwable
decl_stmt|;
DECL|field|MSG_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|MSG_PATTERN
init|=
literal|"user=%s | ip=%s | op=%s %s | ret=%s"
decl_stmt|;
DECL|method|AuditMessage ()
specifier|public
name|AuditMessage
parameter_list|()
block|{    }
annotation|@
name|Override
DECL|method|getFormattedMessage ()
specifier|public
name|String
name|getFormattedMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
annotation|@
name|Override
DECL|method|getFormat ()
specifier|public
name|String
name|getFormat
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getParameters ()
specifier|public
name|Object
index|[]
name|getParameters
parameter_list|()
block|{
return|return
operator|new
name|Object
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getThrowable ()
specifier|public
name|Throwable
name|getThrowable
parameter_list|()
block|{
return|return
name|throwable
return|;
block|}
comment|/**    * Use when there are custom string to be added to default msg.    * @param customMessage custom string    */
DECL|method|appendMessage (String customMessage)
specifier|private
name|void
name|appendMessage
parameter_list|(
name|String
name|customMessage
parameter_list|)
block|{
name|this
operator|.
name|message
operator|+=
name|customMessage
expr_stmt|;
block|}
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
DECL|method|setMessage (String message)
specifier|public
name|void
name|setMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
DECL|method|setThrowable (Throwable throwable)
specifier|public
name|void
name|setThrowable
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|this
operator|.
name|throwable
operator|=
name|throwable
expr_stmt|;
block|}
comment|/**    * Builder class for AuditMessage.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|throwable
specifier|private
name|Throwable
name|throwable
decl_stmt|;
DECL|field|user
specifier|private
name|String
name|user
decl_stmt|;
DECL|field|ip
specifier|private
name|String
name|ip
decl_stmt|;
DECL|field|op
specifier|private
name|String
name|op
decl_stmt|;
DECL|field|params
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
decl_stmt|;
DECL|field|ret
specifier|private
name|String
name|ret
decl_stmt|;
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{      }
DECL|method|setUser (String usr)
specifier|public
name|Builder
name|setUser
parameter_list|(
name|String
name|usr
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|usr
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|atIp (String ipAddr)
specifier|public
name|Builder
name|atIp
parameter_list|(
name|String
name|ipAddr
parameter_list|)
block|{
name|this
operator|.
name|ip
operator|=
name|ipAddr
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|forOperation (String operation)
specifier|public
name|Builder
name|forOperation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|operation
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withParams (Map<String, String> args)
specifier|public
name|Builder
name|withParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|this
operator|.
name|params
operator|=
name|args
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withResult (String result)
specifier|public
name|Builder
name|withResult
parameter_list|(
name|String
name|result
parameter_list|)
block|{
name|this
operator|.
name|ret
operator|=
name|result
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withException (Throwable ex)
specifier|public
name|Builder
name|withException
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|this
operator|.
name|throwable
operator|=
name|ex
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|AuditMessage
name|build
parameter_list|()
block|{
name|AuditMessage
name|auditMessage
init|=
operator|new
name|AuditMessage
argument_list|()
decl_stmt|;
name|auditMessage
operator|.
name|message
operator|=
name|String
operator|.
name|format
argument_list|(
name|MSG_PATTERN
argument_list|,
name|this
operator|.
name|user
argument_list|,
name|this
operator|.
name|ip
argument_list|,
name|this
operator|.
name|op
argument_list|,
name|this
operator|.
name|params
argument_list|,
name|this
operator|.
name|ret
argument_list|)
expr_stmt|;
name|auditMessage
operator|.
name|throwable
operator|=
name|this
operator|.
name|throwable
expr_stmt|;
return|return
name|auditMessage
return|;
block|}
block|}
block|}
end_class

end_unit

