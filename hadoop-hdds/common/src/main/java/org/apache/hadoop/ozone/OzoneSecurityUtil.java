begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_SECURITY_ENABLED_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_SECURITY_ENABLED_KEY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|validator
operator|.
name|routines
operator|.
name|InetAddressValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NetworkInterface
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Ozone security Util class.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|OzoneSecurityUtil
specifier|public
specifier|final
class|class
name|OzoneSecurityUtil
block|{
DECL|field|LOG
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneSecurityUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// List of ip's not recommended to be added to CSR.
DECL|field|INVALID_IPS
specifier|private
specifier|final
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|INVALID_IPS
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"0.0.0.0"
argument_list|,
literal|"127.0.0.1"
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|OzoneSecurityUtil ()
specifier|private
name|OzoneSecurityUtil
parameter_list|()
block|{   }
DECL|method|isSecurityEnabled (Configuration conf)
specifier|public
specifier|static
name|boolean
name|isSecurityEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|OZONE_SECURITY_ENABLED_KEY
argument_list|,
name|OZONE_SECURITY_ENABLED_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Returns Keys status.    *    * @return True if the key files exist.    */
DECL|method|checkIfFileExist (Path path, String fileName)
specifier|public
specifier|static
name|boolean
name|checkIfFileExist
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
operator|&&
name|Files
operator|.
name|exists
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|fileName
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Iterates through network interfaces and return all valid ip's not    * listed in CertificateSignRequest#INVALID_IPS.    *    * @return List<InetAddress>    * @throws IOException if no network interface are found or if an error    * occurs.    */
DECL|method|getValidInetsForCurrentHost ()
specifier|public
specifier|static
name|List
argument_list|<
name|InetAddress
argument_list|>
name|getValidInetsForCurrentHost
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|InetAddress
argument_list|>
name|hostIps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|InetAddressValidator
name|ipValidator
init|=
name|InetAddressValidator
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|NetworkInterface
argument_list|>
name|enumNI
init|=
name|NetworkInterface
operator|.
name|getNetworkInterfaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|enumNI
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|enumNI
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|NetworkInterface
name|ifc
init|=
name|enumNI
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|ifc
operator|.
name|isUp
argument_list|()
condition|)
block|{
name|Enumeration
argument_list|<
name|InetAddress
argument_list|>
name|enumAdds
init|=
name|ifc
operator|.
name|getInetAddresses
argument_list|()
decl_stmt|;
while|while
condition|(
name|enumAdds
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|InetAddress
name|addr
init|=
name|enumAdds
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|ipValidator
operator|.
name|isValid
argument_list|(
name|addr
operator|.
name|getHostAddress
argument_list|()
argument_list|)
operator|&&
operator|!
name|INVALID_IPS
operator|.
name|contains
argument_list|(
name|addr
operator|.
name|getHostAddress
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding ip:{},host:{}"
argument_list|,
name|addr
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|addr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|hostIps
operator|.
name|add
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ip:{},host:{} not returned."
argument_list|,
name|addr
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|addr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|hostIps
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to get network interfaces."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

