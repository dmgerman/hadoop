begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
operator|.
name|ROOT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
operator|.
name|PATH_SEPARATOR_STR
import|;
end_import

begin_comment
comment|/**  * A thread safe class that implements interface Node.  */
end_comment

begin_class
DECL|class|NodeImpl
specifier|public
class|class
name|NodeImpl
implements|implements
name|Node
block|{
comment|// host:port#
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|// string representation of this node's location, such as /dc1/rack1
DECL|field|location
specifier|private
specifier|final
name|String
name|location
decl_stmt|;
comment|// location + "/" + name
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
comment|// which level of the tree the node resides, start from 1 for root
DECL|field|level
specifier|private
name|int
name|level
decl_stmt|;
comment|// node's parent
DECL|field|parent
specifier|private
name|InnerNode
name|parent
decl_stmt|;
comment|// the cost to go through this node
DECL|field|cost
specifier|private
specifier|final
name|int
name|cost
decl_stmt|;
comment|/**    * Construct a node from its name and its location.    * @param name this node's name (can be null, must not contain    * {@link NetConstants#PATH_SEPARATOR})    * @param location this node's location    */
DECL|method|NodeImpl (String name, String location, int cost)
specifier|public
name|NodeImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|location
parameter_list|,
name|int
name|cost
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|contains
argument_list|(
name|PATH_SEPARATOR_STR
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Network location name:"
operator|+
name|name
operator|+
literal|" should not contain "
operator|+
name|PATH_SEPARATOR_STR
argument_list|)
throw|;
block|}
name|this
operator|.
name|name
operator|=
operator|(
name|name
operator|==
literal|null
operator|)
condition|?
name|ROOT
else|:
name|name
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|NetUtils
operator|.
name|normalize
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|this
operator|.
name|location
operator|.
name|equals
argument_list|(
name|PATH_SEPARATOR_STR
argument_list|)
condition|?
name|this
operator|.
name|location
operator|+
name|this
operator|.
name|name
else|:
name|this
operator|.
name|location
operator|+
name|PATH_SEPARATOR_STR
operator|+
name|this
operator|.
name|name
expr_stmt|;
name|this
operator|.
name|cost
operator|=
name|cost
expr_stmt|;
block|}
comment|/**    * Construct a node from its name and its location.    *    * @param name     this node's name (can be null, must not contain    *                 {@link NetConstants#PATH_SEPARATOR})    * @param location this node's location    * @param parent   this node's parent node    * @param level    this node's level in the tree    * @param cost     this node's cost if traffic goes through it    */
DECL|method|NodeImpl (String name, String location, InnerNode parent, int level, int cost)
specifier|public
name|NodeImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|location
parameter_list|,
name|InnerNode
name|parent
parameter_list|,
name|int
name|level
parameter_list|,
name|int
name|cost
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|location
argument_list|,
name|cost
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
block|}
comment|/**    * @return this node's name    */
DECL|method|getNetworkName ()
specifier|public
name|String
name|getNetworkName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * @return this node's network location    */
DECL|method|getNetworkLocation ()
specifier|public
name|String
name|getNetworkLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
comment|/**    * @return this node's full path in network topology. It's the concatenation    * of location and name.    */
DECL|method|getNetworkFullPath ()
specifier|public
name|String
name|getNetworkFullPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
comment|/**    * @return this node's parent    */
DECL|method|getParent ()
specifier|public
name|InnerNode
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
comment|/**    * @return this node's ancestor, generation 0 is itself, generation 1 is    * node's parent, and so on.    */
DECL|method|getAncestor (int generation)
specifier|public
name|Node
name|getAncestor
parameter_list|(
name|int
name|generation
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|generation
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Node
name|current
init|=
name|this
decl_stmt|;
while|while
condition|(
name|generation
operator|>
literal|0
operator|&&
name|current
operator|!=
literal|null
condition|)
block|{
name|current
operator|=
name|current
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|generation
operator|--
expr_stmt|;
block|}
return|return
name|current
return|;
block|}
comment|/**    * Set this node's parent.    *    * @param parent the parent    */
DECL|method|setParent (InnerNode parent)
specifier|public
name|void
name|setParent
parameter_list|(
name|InnerNode
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
comment|/**    * @return this node's level in the tree.    * E.g. the root of a tree returns 0 and its children return 1    */
DECL|method|getLevel ()
specifier|public
name|int
name|getLevel
parameter_list|()
block|{
return|return
name|this
operator|.
name|level
return|;
block|}
comment|/**    * Set this node's level in the tree.    *    * @param level the level    */
DECL|method|setLevel (int level)
specifier|public
name|void
name|setLevel
parameter_list|(
name|int
name|level
parameter_list|)
block|{
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
block|}
comment|/**    * @return this node's cost when network traffic go through it.    * E.g. the cost of going cross a switch is 1, and cost of going through a    * datacenter is 5.    * Be default the cost of leaf datanode is 0, all other inner node is 1.    */
DECL|method|getCost ()
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
name|this
operator|.
name|cost
return|;
block|}
comment|/** @return the leaf nodes number under this node. */
DECL|method|getNumOfLeaves ()
specifier|public
name|int
name|getNumOfLeaves
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
comment|/**    * Check if this node is an ancestor of node<i>node</i>. Ancestor includes    * itself and parents case;    * @param node a node    * @return true if this node is an ancestor of<i>node</i>    */
DECL|method|isAncestor (Node node)
specifier|public
name|boolean
name|isAncestor
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
return|return
name|this
operator|.
name|getNetworkFullPath
argument_list|()
operator|.
name|equals
argument_list|(
name|PATH_SEPARATOR_STR
argument_list|)
operator|||
name|node
operator|.
name|getNetworkLocation
argument_list|()
operator|.
name|startsWith
argument_list|(
name|this
operator|.
name|getNetworkFullPath
argument_list|()
argument_list|)
operator|||
name|node
operator|.
name|getNetworkFullPath
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|this
operator|.
name|getNetworkFullPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object to)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|to
parameter_list|)
block|{
if|if
condition|(
name|to
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|==
name|to
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|this
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|to
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**    * @return this node's path as its string representation    */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getNetworkFullPath
argument_list|()
return|;
block|}
block|}
end_class

end_unit

