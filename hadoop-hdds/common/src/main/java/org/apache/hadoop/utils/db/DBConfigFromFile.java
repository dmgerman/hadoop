begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.utils.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|DBOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|Env
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|OptionsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|RocksDBException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A Class that controls the standard config options of RocksDB.  *<p>  * Important : Some of the functions in this file are magic functions designed  * for the use of OZONE developers only. Due to that this information is  * documented in this files only and is *not* intended for end user consumption.  * Please do not use this information to tune your production environments.  * Please remember the SpiderMan principal; with great power comes great  * responsibility.  */
end_comment

begin_class
DECL|class|DBConfigFromFile
specifier|public
specifier|final
class|class
name|DBConfigFromFile
block|{
DECL|field|CONFIG_DIR
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_DIR
init|=
literal|"HADOOP_CONF_DIR"
decl_stmt|;
DECL|method|DBConfigFromFile ()
specifier|private
name|DBConfigFromFile
parameter_list|()
block|{   }
DECL|method|getConfigLocation ()
specifier|public
specifier|static
name|File
name|getConfigLocation
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|System
operator|.
name|getenv
argument_list|(
name|CONFIG_DIR
argument_list|)
decl_stmt|;
comment|// Make testing easy.
comment|// If there is No Env. defined, let us try to read the JVM property
if|if
condition|(
name|StringUtil
operator|.
name|isBlank
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|path
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|CONFIG_DIR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtil
operator|.
name|isBlank
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to find the configuration directory. "
operator|+
literal|"Please make sure that HADOOP_CONF_DIR is setup correctly "
argument_list|)
throw|;
block|}
return|return
operator|new
name|File
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|/**    * This class establishes a magic pattern where we look for DBFile.ini as the    * options for RocksDB.    *    * @param dbFileName - The DBFile Name. For example, OzoneManager.db    * @return Name of the DB File options    */
DECL|method|getOptionsFileNameFromDB (String dbFileName)
specifier|public
specifier|static
name|String
name|getOptionsFileNameFromDB
parameter_list|(
name|String
name|dbFileName
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|dbFileName
argument_list|)
expr_stmt|;
return|return
name|dbFileName
operator|+
literal|".ini"
return|;
block|}
comment|/**    * One of the Magic functions designed for the use of Ozone Developers *ONLY*.    * This function takes the name of DB file and looks up the a .ini file that    * follows the ROCKSDB config format and uses that file for DBOptions and    * Column family Options. The Format for this file is specified by RockDB.    *<p>    * Here is a sample config from RocksDB sample Repo.    *<p>    * https://github.com/facebook/rocksdb/blob/master/examples    * /rocksdb_option_file_example.ini    *<p>    * We look for a specific pattern, say OzoneManager.db will have its configs    * specified in OzoneManager.db.ini. This option is used only by the    * performance testing group to allow tuning of all parameters freely.    *<p>    * For the end users we offer a set of Predefined options that is easy to use    * and the user does not need to become an expert in RockDB config.    *<p>    * This code assumes the .ini file is placed in the same directory as normal    * config files. That is in $HADOOP_DIR/etc/hadoop. For example, if we want to    * control OzoneManager.db configs from a file, we need to create a file    * called OzoneManager.db.ini and place that file in $HADOOP_DIR/etc/hadoop.    *    * @param dbFileName - The DB File Name, for example, OzoneManager.db.    * @param cfDescs - ColumnFamily Handles.    * @return DBOptions, Options to be used for opening/creating the DB.    * @throws IOException    */
DECL|method|readFromFile (String dbFileName, List<ColumnFamilyDescriptor> cfDescs)
specifier|public
specifier|static
name|DBOptions
name|readFromFile
parameter_list|(
name|String
name|dbFileName
parameter_list|,
name|List
argument_list|<
name|ColumnFamilyDescriptor
argument_list|>
name|cfDescs
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|dbFileName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|cfDescs
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|cfDescs
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|//TODO: Add Documentation on how to support RocksDB Mem Env.
name|Env
name|env
init|=
name|Env
operator|.
name|getDefault
argument_list|()
decl_stmt|;
name|DBOptions
name|options
init|=
literal|null
decl_stmt|;
name|Path
name|optionsFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|getConfigLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|getOptionsFileNameFromDB
argument_list|(
name|dbFileName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|optionsFile
operator|.
name|toFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|options
operator|=
operator|new
name|DBOptions
argument_list|()
expr_stmt|;
try|try
block|{
name|OptionsUtil
operator|.
name|loadOptionsFromFile
argument_list|(
name|optionsFile
operator|.
name|toString
argument_list|()
argument_list|,
name|env
argument_list|,
name|options
argument_list|,
name|cfDescs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RocksDBException
name|rdEx
parameter_list|)
block|{
name|RDBTable
operator|.
name|toIOException
argument_list|(
literal|"Unable to find/open Options file."
argument_list|,
name|rdEx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|options
return|;
block|}
block|}
end_class

end_unit

