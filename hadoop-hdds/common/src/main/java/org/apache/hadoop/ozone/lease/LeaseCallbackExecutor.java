begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.lease
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_comment
comment|/**  * This class is responsible for executing the callbacks of a lease in case of  * timeout.  */
end_comment

begin_class
DECL|class|LeaseCallbackExecutor
specifier|public
class|class
name|LeaseCallbackExecutor
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Lease
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|resource
specifier|private
specifier|final
name|T
name|resource
decl_stmt|;
DECL|field|callbacks
specifier|private
specifier|final
name|List
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|callbacks
decl_stmt|;
comment|/**    * Constructs LeaseCallbackExecutor instance with list of callbacks.    *    * @param resource    *        The resource for which the callbacks are executed    * @param callbacks    *        Callbacks to be executed by this executor    */
DECL|method|LeaseCallbackExecutor (T resource, List<Callable<Void>> callbacks)
specifier|public
name|LeaseCallbackExecutor
parameter_list|(
name|T
name|resource
parameter_list|,
name|List
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|callbacks
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
name|this
operator|.
name|callbacks
operator|=
name|callbacks
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing callbacks for lease on {}"
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Callable
argument_list|<
name|Void
argument_list|>
name|callback
range|:
name|callbacks
control|)
block|{
try|try
block|{
name|callback
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while executing callback for lease on {}"
argument_list|,
name|resource
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

