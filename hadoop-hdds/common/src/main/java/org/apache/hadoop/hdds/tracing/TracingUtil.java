begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.tracing
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|tracing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|io
operator|.
name|jaegertracing
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|io
operator|.
name|jaegertracing
operator|.
name|internal
operator|.
name|JaegerTracer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|SpanContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|util
operator|.
name|GlobalTracer
import|;
end_import

begin_comment
comment|/**  * Utility class to collect all the tracing helper methods.  */
end_comment

begin_class
DECL|class|TracingUtil
specifier|public
specifier|final
class|class
name|TracingUtil
block|{
DECL|method|TracingUtil ()
specifier|private
name|TracingUtil
parameter_list|()
block|{   }
comment|/**    * Initialize the tracing with the given service name.    *    * @param serviceName    */
DECL|method|initTracing (String serviceName)
specifier|public
specifier|static
name|void
name|initTracing
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|GlobalTracer
operator|.
name|isRegistered
argument_list|()
condition|)
block|{
name|Configuration
name|config
init|=
name|Configuration
operator|.
name|fromEnv
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|JaegerTracer
name|tracer
init|=
name|config
operator|.
name|getTracerBuilder
argument_list|()
operator|.
name|registerExtractor
argument_list|(
name|StringCodec
operator|.
name|FORMAT
argument_list|,
operator|new
name|StringCodec
argument_list|()
argument_list|)
operator|.
name|registerInjector
argument_list|(
name|StringCodec
operator|.
name|FORMAT
argument_list|,
operator|new
name|StringCodec
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GlobalTracer
operator|.
name|register
argument_list|(
name|tracer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Export the active tracing span as a string.    *    * @return encoded tracing context.    */
DECL|method|exportCurrentSpan ()
specifier|public
specifier|static
name|String
name|exportCurrentSpan
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|GlobalTracer
operator|.
name|get
argument_list|()
operator|.
name|activeSpan
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|GlobalTracer
operator|.
name|get
argument_list|()
operator|.
name|inject
argument_list|(
name|GlobalTracer
operator|.
name|get
argument_list|()
operator|.
name|activeSpan
argument_list|()
operator|.
name|context
argument_list|()
argument_list|,
name|StringCodec
operator|.
name|FORMAT
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Create a new scope and use the imported span as the parent.    *    * @param name          name of the newly created scope    * @param encodedParent Encoded parent span (could be null or empty)    *    * @return OpenTracing scope.    */
DECL|method|importAndCreateScope (String name, String encodedParent)
specifier|public
specifier|static
name|Scope
name|importAndCreateScope
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|encodedParent
parameter_list|)
block|{
name|Tracer
operator|.
name|SpanBuilder
name|spanBuilder
decl_stmt|;
name|Tracer
name|tracer
init|=
name|GlobalTracer
operator|.
name|get
argument_list|()
decl_stmt|;
name|SpanContext
name|parentSpan
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|encodedParent
operator|!=
literal|null
operator|&&
name|encodedParent
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|encodedParent
argument_list|)
expr_stmt|;
name|parentSpan
operator|=
name|tracer
operator|.
name|extract
argument_list|(
name|StringCodec
operator|.
name|FORMAT
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentSpan
operator|==
literal|null
condition|)
block|{
name|spanBuilder
operator|=
name|tracer
operator|.
name|buildSpan
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|spanBuilder
operator|=
name|tracer
operator|.
name|buildSpan
argument_list|(
name|name
argument_list|)
operator|.
name|asChildOf
argument_list|(
name|parentSpan
argument_list|)
expr_stmt|;
block|}
return|return
name|spanBuilder
operator|.
name|startActive
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/**    * Creates a proxy of the implementation and trace all the method calls.    *    * @param delegate the original class instance    * @param interfce the interface which should be implemented by the proxy    * @param<T> the type of the interface    *    * @return A new interface which implements interfce but delegate all the    * calls to the delegate and also enables tracing.    */
DECL|method|createProxy (T delegate, Class<T> interfce)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|createProxy
parameter_list|(
name|T
name|delegate
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|interfce
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
init|=
name|delegate
operator|.
name|getClass
argument_list|()
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|aClass
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|interfce
block|}
operator|,
operator|new
name|TraceAllMethod
argument_list|<
name|T
argument_list|>
argument_list|(
name|delegate
argument_list|,
name|interfce
operator|.
name|getSimpleName
argument_list|()
argument_list|)
block|)
function|;
block|}
end_class

unit|}
end_unit

