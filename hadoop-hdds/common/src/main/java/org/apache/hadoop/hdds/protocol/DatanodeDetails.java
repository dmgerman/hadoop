begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * DatanodeDetails class contains details about DataNode like:  * - UUID of the DataNode.  * - IP and Hostname details.  * - Port details to which the DataNode will be listening.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DatanodeDetails
specifier|public
specifier|final
class|class
name|DatanodeDetails
implements|implements
name|Comparable
argument_list|<
name|DatanodeDetails
argument_list|>
block|{
comment|/**    * DataNode's unique identifier in the cluster.    */
DECL|field|uuid
specifier|private
specifier|final
name|UUID
name|uuid
decl_stmt|;
DECL|field|ipAddress
specifier|private
name|String
name|ipAddress
decl_stmt|;
DECL|field|hostName
specifier|private
name|String
name|hostName
decl_stmt|;
DECL|field|containerPort
specifier|private
name|Integer
name|containerPort
decl_stmt|;
DECL|field|ratisPort
specifier|private
name|Integer
name|ratisPort
decl_stmt|;
DECL|field|ozoneRestPort
specifier|private
name|Integer
name|ozoneRestPort
decl_stmt|;
comment|/**    * Constructs DatanodeDetails instance. DatanodeDetails.Builder is used    * for instantiating DatanodeDetails.    * @param uuid DataNode's UUID    * @param ipAddress IP Address of this DataNode    * @param hostName DataNode's hostname    * @param containerPort Container Port    * @param ratisPort Ratis Port    * @param ozoneRestPort Rest Port    */
DECL|method|DatanodeDetails (String uuid, String ipAddress, String hostName, Integer containerPort, Integer ratisPort, Integer ozoneRestPort)
specifier|private
name|DatanodeDetails
parameter_list|(
name|String
name|uuid
parameter_list|,
name|String
name|ipAddress
parameter_list|,
name|String
name|hostName
parameter_list|,
name|Integer
name|containerPort
parameter_list|,
name|Integer
name|ratisPort
parameter_list|,
name|Integer
name|ozoneRestPort
parameter_list|)
block|{
name|this
operator|.
name|uuid
operator|=
name|UUID
operator|.
name|fromString
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|this
operator|.
name|ipAddress
operator|=
name|ipAddress
expr_stmt|;
name|this
operator|.
name|hostName
operator|=
name|hostName
expr_stmt|;
name|this
operator|.
name|containerPort
operator|=
name|containerPort
expr_stmt|;
name|this
operator|.
name|ratisPort
operator|=
name|ratisPort
expr_stmt|;
name|this
operator|.
name|ozoneRestPort
operator|=
name|ozoneRestPort
expr_stmt|;
block|}
comment|/**    * Returns the DataNode UUID.    *    * @return UUID of DataNode    */
DECL|method|getUuid ()
specifier|public
name|UUID
name|getUuid
parameter_list|()
block|{
return|return
name|uuid
return|;
block|}
comment|/**    * Returns the string representation of DataNode UUID.    *    * @return UUID of DataNode    */
DECL|method|getUuidString ()
specifier|public
name|String
name|getUuidString
parameter_list|()
block|{
return|return
name|uuid
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Sets the IP address of Datanode.    *    * @param ip IP Address    */
DECL|method|setIpAddress (String ip)
specifier|public
name|void
name|setIpAddress
parameter_list|(
name|String
name|ip
parameter_list|)
block|{
name|this
operator|.
name|ipAddress
operator|=
name|ip
expr_stmt|;
block|}
comment|/**    * Returns IP address of DataNode.    *    * @return IP address    */
DECL|method|getIpAddress ()
specifier|public
name|String
name|getIpAddress
parameter_list|()
block|{
return|return
name|ipAddress
return|;
block|}
comment|/**    * Sets the Datanode hostname.    *    * @param host hostname    */
DECL|method|setHostName (String host)
specifier|public
name|void
name|setHostName
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|hostName
operator|=
name|host
expr_stmt|;
block|}
comment|/**    * Returns Hostname of DataNode.    *    * @return Hostname    */
DECL|method|getHostName ()
specifier|public
name|String
name|getHostName
parameter_list|()
block|{
return|return
name|hostName
return|;
block|}
comment|/**    * Sets the Container Port.    * @param port ContainerPort    */
DECL|method|setContainerPort (int port)
specifier|public
name|void
name|setContainerPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|containerPort
operator|=
name|port
expr_stmt|;
block|}
comment|/**    * Returns standalone container Port.    *    * @return Container Port    */
DECL|method|getContainerPort ()
specifier|public
name|int
name|getContainerPort
parameter_list|()
block|{
return|return
name|containerPort
return|;
block|}
comment|/**    * Sets Ratis Port.    * @param port RatisPort    */
DECL|method|setRatisPort (int port)
specifier|public
name|void
name|setRatisPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|ratisPort
operator|=
name|port
expr_stmt|;
block|}
comment|/**    * Returns Ratis Port.    * @return Ratis Port    */
DECL|method|getRatisPort ()
specifier|public
name|int
name|getRatisPort
parameter_list|()
block|{
return|return
name|ratisPort
return|;
block|}
comment|/**    * Sets OzoneRestPort.    * @param port OzoneRestPort    */
DECL|method|setOzoneRestPort (int port)
specifier|public
name|void
name|setOzoneRestPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|ozoneRestPort
operator|=
name|port
expr_stmt|;
block|}
comment|/**    * Returns Ozone Rest Port.    * @return OzoneRestPort    */
DECL|method|getOzoneRestPort ()
specifier|public
name|int
name|getOzoneRestPort
parameter_list|()
block|{
return|return
name|ozoneRestPort
return|;
block|}
comment|/**    * Returns a DatanodeDetails from the protocol buffers.    *    * @param datanodeDetailsProto - protoBuf Message    * @return DatanodeDetails    */
DECL|method|getFromProtoBuf ( HddsProtos.DatanodeDetailsProto datanodeDetailsProto)
specifier|public
specifier|static
name|DatanodeDetails
name|getFromProtoBuf
parameter_list|(
name|HddsProtos
operator|.
name|DatanodeDetailsProto
name|datanodeDetailsProto
parameter_list|)
block|{
name|DatanodeDetails
operator|.
name|Builder
name|builder
init|=
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setUuid
argument_list|(
name|datanodeDetailsProto
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|datanodeDetailsProto
operator|.
name|hasIpAddress
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setIpAddress
argument_list|(
name|datanodeDetailsProto
operator|.
name|getIpAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|datanodeDetailsProto
operator|.
name|hasHostName
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setHostName
argument_list|(
name|datanodeDetailsProto
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|datanodeDetailsProto
operator|.
name|hasContainerPort
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setContainerPort
argument_list|(
name|datanodeDetailsProto
operator|.
name|getContainerPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|datanodeDetailsProto
operator|.
name|hasRatisPort
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setRatisPort
argument_list|(
name|datanodeDetailsProto
operator|.
name|getRatisPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|datanodeDetailsProto
operator|.
name|hasOzoneRestPort
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setOzoneRestPort
argument_list|(
name|datanodeDetailsProto
operator|.
name|getOzoneRestPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a DatanodeDetails protobuf message from a datanode ID.    * @return HddsProtos.DatanodeDetailsProto    */
DECL|method|getProtoBufMessage ()
specifier|public
name|HddsProtos
operator|.
name|DatanodeDetailsProto
name|getProtoBufMessage
parameter_list|()
block|{
name|HddsProtos
operator|.
name|DatanodeDetailsProto
operator|.
name|Builder
name|builder
init|=
name|HddsProtos
operator|.
name|DatanodeDetailsProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUuid
argument_list|(
name|getUuidString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ipAddress
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setIpAddress
argument_list|(
name|ipAddress
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hostName
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setHostName
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containerPort
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setContainerPort
argument_list|(
name|containerPort
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ratisPort
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setRatisPort
argument_list|(
name|ratisPort
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ozoneRestPort
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setOzoneRestPort
argument_list|(
name|ozoneRestPort
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|uuid
operator|.
name|toString
argument_list|()
operator|+
literal|"{"
operator|+
literal|"ip: "
operator|+
name|ipAddress
operator|+
literal|", host: "
operator|+
name|hostName
operator|+
literal|"}"
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (DatanodeDetails that)
specifier|public
name|int
name|compareTo
parameter_list|(
name|DatanodeDetails
name|that
parameter_list|)
block|{
return|return
name|this
operator|.
name|getUuid
argument_list|()
operator|.
name|compareTo
argument_list|(
name|that
operator|.
name|getUuid
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|DatanodeDetails
operator|&&
name|uuid
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|DatanodeDetails
operator|)
name|obj
operator|)
operator|.
name|uuid
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|uuid
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**    * Returns DatanodeDetails.Builder instance.    *    * @return DatanodeDetails.Builder    */
DECL|method|newBuilder ()
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**    * Builder class for building DatanodeDetails.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|ipAddress
specifier|private
name|String
name|ipAddress
decl_stmt|;
DECL|field|hostName
specifier|private
name|String
name|hostName
decl_stmt|;
DECL|field|containerPort
specifier|private
name|Integer
name|containerPort
decl_stmt|;
DECL|field|ratisPort
specifier|private
name|Integer
name|ratisPort
decl_stmt|;
DECL|field|ozoneRestPort
specifier|private
name|Integer
name|ozoneRestPort
decl_stmt|;
comment|/**      * Sets the DatanodeUuid.      *      * @param uuid DatanodeUuid      * @return DatanodeDetails.Builder      */
DECL|method|setUuid (String uuid)
specifier|public
name|Builder
name|setUuid
parameter_list|(
name|String
name|uuid
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|uuid
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the IP address of DataNode.      *      * @param ip address      * @return DatanodeDetails.Builder      */
DECL|method|setIpAddress (String ip)
specifier|public
name|Builder
name|setIpAddress
parameter_list|(
name|String
name|ip
parameter_list|)
block|{
name|this
operator|.
name|ipAddress
operator|=
name|ip
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the hostname of DataNode.      *      * @param host hostname      * @return DatanodeDetails.Builder      */
DECL|method|setHostName (String host)
specifier|public
name|Builder
name|setHostName
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|hostName
operator|=
name|host
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the ContainerPort.      *      * @param port ContainerPort      * @return DatanodeDetails.Builder      */
DECL|method|setContainerPort (Integer port)
specifier|public
name|Builder
name|setContainerPort
parameter_list|(
name|Integer
name|port
parameter_list|)
block|{
name|this
operator|.
name|containerPort
operator|=
name|port
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the RatisPort.      *      * @param port RatisPort      * @return DatanodeDetails.Builder      */
DECL|method|setRatisPort (Integer port)
specifier|public
name|Builder
name|setRatisPort
parameter_list|(
name|Integer
name|port
parameter_list|)
block|{
name|this
operator|.
name|ratisPort
operator|=
name|port
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the OzoneRestPort.      *      * @param port OzoneRestPort      * @return DatanodeDetails.Builder      */
DECL|method|setOzoneRestPort (Integer port)
specifier|public
name|Builder
name|setOzoneRestPort
parameter_list|(
name|Integer
name|port
parameter_list|)
block|{
name|this
operator|.
name|ozoneRestPort
operator|=
name|port
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Builds and returns DatanodeDetails instance.      *      * @return DatanodeDetails      */
DECL|method|build ()
specifier|public
name|DatanodeDetails
name|build
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
operator|new
name|DatanodeDetails
argument_list|(
name|id
argument_list|,
name|ipAddress
argument_list|,
name|hostName
argument_list|,
name|containerPort
argument_list|,
name|ratisPort
argument_list|,
name|ozoneRestPort
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

