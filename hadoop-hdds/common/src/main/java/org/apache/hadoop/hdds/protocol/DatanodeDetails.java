begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * DatanodeDetails class contains details about DataNode like:  * - UUID of the DataNode.  * - IP and Hostname details.  * - Port details to which the DataNode will be listening.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DatanodeDetails
specifier|public
class|class
name|DatanodeDetails
extends|extends
name|NodeImpl
implements|implements
name|Comparable
argument_list|<
name|DatanodeDetails
argument_list|>
block|{
comment|/**    * DataNode's unique identifier in the cluster.    */
DECL|field|uuid
specifier|private
specifier|final
name|UUID
name|uuid
decl_stmt|;
DECL|field|ipAddress
specifier|private
name|String
name|ipAddress
decl_stmt|;
DECL|field|hostName
specifier|private
name|String
name|hostName
decl_stmt|;
DECL|field|ports
specifier|private
name|List
argument_list|<
name|Port
argument_list|>
name|ports
decl_stmt|;
DECL|field|certSerialId
specifier|private
name|String
name|certSerialId
decl_stmt|;
comment|/**    * Constructs DatanodeDetails instance. DatanodeDetails.Builder is used    * for instantiating DatanodeDetails.    * @param uuid DataNode's UUID    * @param ipAddress IP Address of this DataNode    * @param hostName DataNode's hostname    * @param networkLocation DataNode's network location path    * @param ports Ports used by the DataNode    * @param certSerialId serial id from SCM issued certificate.    */
DECL|method|DatanodeDetails (String uuid, String ipAddress, String hostName, String networkLocation, List<Port> ports, String certSerialId)
specifier|private
name|DatanodeDetails
parameter_list|(
name|String
name|uuid
parameter_list|,
name|String
name|ipAddress
parameter_list|,
name|String
name|hostName
parameter_list|,
name|String
name|networkLocation
parameter_list|,
name|List
argument_list|<
name|Port
argument_list|>
name|ports
parameter_list|,
name|String
name|certSerialId
parameter_list|)
block|{
name|super
argument_list|(
name|hostName
argument_list|,
name|networkLocation
argument_list|,
name|NetConstants
operator|.
name|NODE_COST_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|uuid
operator|=
name|UUID
operator|.
name|fromString
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|this
operator|.
name|ipAddress
operator|=
name|ipAddress
expr_stmt|;
name|this
operator|.
name|hostName
operator|=
name|hostName
expr_stmt|;
name|this
operator|.
name|ports
operator|=
name|ports
expr_stmt|;
name|this
operator|.
name|certSerialId
operator|=
name|certSerialId
expr_stmt|;
block|}
DECL|method|DatanodeDetails (DatanodeDetails datanodeDetails)
specifier|protected
name|DatanodeDetails
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|)
block|{
name|super
argument_list|(
name|datanodeDetails
operator|.
name|getHostName
argument_list|()
argument_list|,
name|datanodeDetails
operator|.
name|getNetworkLocation
argument_list|()
argument_list|,
name|datanodeDetails
operator|.
name|getCost
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|uuid
operator|=
name|datanodeDetails
operator|.
name|uuid
expr_stmt|;
name|this
operator|.
name|ipAddress
operator|=
name|datanodeDetails
operator|.
name|ipAddress
expr_stmt|;
name|this
operator|.
name|hostName
operator|=
name|datanodeDetails
operator|.
name|hostName
expr_stmt|;
name|this
operator|.
name|ports
operator|=
name|datanodeDetails
operator|.
name|ports
expr_stmt|;
block|}
comment|/**    * Returns the DataNode UUID.    *    * @return UUID of DataNode    */
DECL|method|getUuid ()
specifier|public
name|UUID
name|getUuid
parameter_list|()
block|{
return|return
name|uuid
return|;
block|}
comment|/**    * Returns the string representation of DataNode UUID.    *    * @return UUID of DataNode    */
DECL|method|getUuidString ()
specifier|public
name|String
name|getUuidString
parameter_list|()
block|{
return|return
name|uuid
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Sets the IP address of Datanode.    *    * @param ip IP Address    */
DECL|method|setIpAddress (String ip)
specifier|public
name|void
name|setIpAddress
parameter_list|(
name|String
name|ip
parameter_list|)
block|{
name|this
operator|.
name|ipAddress
operator|=
name|ip
expr_stmt|;
block|}
comment|/**    * Returns IP address of DataNode.    *    * @return IP address    */
DECL|method|getIpAddress ()
specifier|public
name|String
name|getIpAddress
parameter_list|()
block|{
return|return
name|ipAddress
return|;
block|}
comment|/**    * Sets the Datanode hostname.    *    * @param host hostname    */
DECL|method|setHostName (String host)
specifier|public
name|void
name|setHostName
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|hostName
operator|=
name|host
expr_stmt|;
block|}
comment|/**    * Returns Hostname of DataNode.    *    * @return Hostname    */
DECL|method|getHostName ()
specifier|public
name|String
name|getHostName
parameter_list|()
block|{
return|return
name|hostName
return|;
block|}
comment|/**    * Sets a DataNode Port.    *    * @param port DataNode port    */
DECL|method|setPort (Port port)
specifier|public
name|void
name|setPort
parameter_list|(
name|Port
name|port
parameter_list|)
block|{
comment|// If the port is already in the list remove it first and add the
comment|// new/updated port value.
name|ports
operator|.
name|remove
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|ports
operator|.
name|add
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns all the Ports used by DataNode.    *    * @return DataNode Ports    */
DECL|method|getPorts ()
specifier|public
name|List
argument_list|<
name|Port
argument_list|>
name|getPorts
parameter_list|()
block|{
return|return
name|ports
return|;
block|}
comment|/**    * Given the name returns port number, null if the asked port is not found.    *    * @param name Name of the port    *    * @return Port    */
DECL|method|getPort (Port.Name name)
specifier|public
name|Port
name|getPort
parameter_list|(
name|Port
operator|.
name|Name
name|name
parameter_list|)
block|{
for|for
control|(
name|Port
name|port
range|:
name|ports
control|)
block|{
if|if
condition|(
name|port
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|port
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Returns a DatanodeDetails from the protocol buffers.    *    * @param datanodeDetailsProto - protoBuf Message    * @return DatanodeDetails    */
DECL|method|getFromProtoBuf ( HddsProtos.DatanodeDetailsProto datanodeDetailsProto)
specifier|public
specifier|static
name|DatanodeDetails
name|getFromProtoBuf
parameter_list|(
name|HddsProtos
operator|.
name|DatanodeDetailsProto
name|datanodeDetailsProto
parameter_list|)
block|{
name|DatanodeDetails
operator|.
name|Builder
name|builder
init|=
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setUuid
argument_list|(
name|datanodeDetailsProto
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|datanodeDetailsProto
operator|.
name|hasIpAddress
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setIpAddress
argument_list|(
name|datanodeDetailsProto
operator|.
name|getIpAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|datanodeDetailsProto
operator|.
name|hasHostName
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setHostName
argument_list|(
name|datanodeDetailsProto
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|datanodeDetailsProto
operator|.
name|hasCertSerialId
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setCertSerialId
argument_list|(
name|datanodeDetailsProto
operator|.
name|getCertSerialId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HddsProtos
operator|.
name|Port
name|port
range|:
name|datanodeDetailsProto
operator|.
name|getPortsList
argument_list|()
control|)
block|{
name|builder
operator|.
name|addPort
argument_list|(
name|newPort
argument_list|(
name|Port
operator|.
name|Name
operator|.
name|valueOf
argument_list|(
name|port
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|,
name|port
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a DatanodeDetails protobuf message from a datanode ID.    * @return HddsProtos.DatanodeDetailsProto    */
DECL|method|getProtoBufMessage ()
specifier|public
name|HddsProtos
operator|.
name|DatanodeDetailsProto
name|getProtoBufMessage
parameter_list|()
block|{
name|HddsProtos
operator|.
name|DatanodeDetailsProto
operator|.
name|Builder
name|builder
init|=
name|HddsProtos
operator|.
name|DatanodeDetailsProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUuid
argument_list|(
name|getUuidString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ipAddress
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setIpAddress
argument_list|(
name|ipAddress
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hostName
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setHostName
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|certSerialId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setCertSerialId
argument_list|(
name|certSerialId
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setNetworkLocation
argument_list|(
name|getNetworkLocation
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Port
name|port
range|:
name|ports
control|)
block|{
name|builder
operator|.
name|addPorts
argument_list|(
name|HddsProtos
operator|.
name|Port
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|port
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|port
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|uuid
operator|.
name|toString
argument_list|()
operator|+
literal|"{"
operator|+
literal|"ip: "
operator|+
name|ipAddress
operator|+
literal|", host: "
operator|+
name|hostName
operator|+
literal|", networkLocation: "
operator|+
name|getNetworkLocation
argument_list|()
operator|+
literal|", certSerialId: "
operator|+
name|certSerialId
operator|+
literal|"}"
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (DatanodeDetails that)
specifier|public
name|int
name|compareTo
parameter_list|(
name|DatanodeDetails
name|that
parameter_list|)
block|{
return|return
name|this
operator|.
name|getUuid
argument_list|()
operator|.
name|compareTo
argument_list|(
name|that
operator|.
name|getUuid
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|DatanodeDetails
operator|&&
name|uuid
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|DatanodeDetails
operator|)
name|obj
operator|)
operator|.
name|uuid
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|uuid
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**    * Returns DatanodeDetails.Builder instance.    *    * @return DatanodeDetails.Builder    */
DECL|method|newBuilder ()
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**    * Builder class for building DatanodeDetails.    */
DECL|class|Builder
specifier|public
specifier|static
specifier|final
class|class
name|Builder
block|{
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|ipAddress
specifier|private
name|String
name|ipAddress
decl_stmt|;
DECL|field|hostName
specifier|private
name|String
name|hostName
decl_stmt|;
DECL|field|networkLocation
specifier|private
name|String
name|networkLocation
decl_stmt|;
DECL|field|ports
specifier|private
name|List
argument_list|<
name|Port
argument_list|>
name|ports
decl_stmt|;
DECL|field|certSerialId
specifier|private
name|String
name|certSerialId
decl_stmt|;
comment|/**      * Default private constructor. To create Builder instance use      * DatanodeDetails#newBuilder.      */
DECL|method|Builder ()
specifier|private
name|Builder
parameter_list|()
block|{
name|ports
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sets the DatanodeUuid.      *      * @param uuid DatanodeUuid      * @return DatanodeDetails.Builder      */
DECL|method|setUuid (String uuid)
specifier|public
name|Builder
name|setUuid
parameter_list|(
name|String
name|uuid
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|uuid
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the IP address of DataNode.      *      * @param ip address      * @return DatanodeDetails.Builder      */
DECL|method|setIpAddress (String ip)
specifier|public
name|Builder
name|setIpAddress
parameter_list|(
name|String
name|ip
parameter_list|)
block|{
name|this
operator|.
name|ipAddress
operator|=
name|ip
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the hostname of DataNode.      *      * @param host hostname      * @return DatanodeDetails.Builder      */
DECL|method|setHostName (String host)
specifier|public
name|Builder
name|setHostName
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|hostName
operator|=
name|host
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the network location of DataNode.      *      * @param loc location      * @return DatanodeDetails.Builder      */
DECL|method|setNetworkLocation (String loc)
specifier|public
name|Builder
name|setNetworkLocation
parameter_list|(
name|String
name|loc
parameter_list|)
block|{
name|this
operator|.
name|networkLocation
operator|=
name|loc
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a DataNode Port.      *      * @param port DataNode port      *      * @return DatanodeDetails.Builder      */
DECL|method|addPort (Port port)
specifier|public
name|Builder
name|addPort
parameter_list|(
name|Port
name|port
parameter_list|)
block|{
name|this
operator|.
name|ports
operator|.
name|add
argument_list|(
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds certificate serial id.      *      * @param certId Serial id of SCM issued certificate.      *      * @return DatanodeDetails.Builder      */
DECL|method|setCertSerialId (String certId)
specifier|public
name|Builder
name|setCertSerialId
parameter_list|(
name|String
name|certId
parameter_list|)
block|{
name|this
operator|.
name|certSerialId
operator|=
name|certId
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Builds and returns DatanodeDetails instance.      *      * @return DatanodeDetails      */
DECL|method|build ()
specifier|public
name|DatanodeDetails
name|build
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|networkLocation
operator|==
literal|null
condition|)
block|{
name|networkLocation
operator|=
name|NetConstants
operator|.
name|DEFAULT_RACK
expr_stmt|;
block|}
return|return
operator|new
name|DatanodeDetails
argument_list|(
name|id
argument_list|,
name|ipAddress
argument_list|,
name|hostName
argument_list|,
name|networkLocation
argument_list|,
name|ports
argument_list|,
name|certSerialId
argument_list|)
return|;
block|}
block|}
comment|/**    * Constructs a new Port with name and value.    *    * @param name Name of the port    * @param value Port number    *    * @return {@code Port} instance    */
DECL|method|newPort (Port.Name name, Integer value)
specifier|public
specifier|static
name|Port
name|newPort
parameter_list|(
name|Port
operator|.
name|Name
name|name
parameter_list|,
name|Integer
name|value
parameter_list|)
block|{
return|return
operator|new
name|Port
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**    * Container to hold DataNode Port details.    */
DECL|class|Port
specifier|public
specifier|static
specifier|final
class|class
name|Port
block|{
comment|/**      * Ports that are supported in DataNode.      */
DECL|enum|Name
specifier|public
enum|enum
name|Name
block|{
DECL|enumConstant|STANDALONE
DECL|enumConstant|RATIS
DECL|enumConstant|REST
name|STANDALONE
block|,
name|RATIS
block|,
name|REST
block|}
DECL|field|name
specifier|private
name|Name
name|name
decl_stmt|;
DECL|field|value
specifier|private
name|Integer
name|value
decl_stmt|;
comment|/**      * Private constructor for constructing Port object. Use      * DatanodeDetails#newPort to create a new Port object.      *      * @param name      * @param value      */
DECL|method|Port (Name name, Integer value)
specifier|private
name|Port
parameter_list|(
name|Name
name|name
parameter_list|,
name|Integer
name|value
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Returns the name of the port.      *      * @return Port name      */
DECL|method|getName ()
specifier|public
name|Name
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Returns the port number.      *      * @return Port number      */
DECL|method|getValue ()
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * Ports are considered equal if they have the same name.      *      * @param anObject      *          The object to compare this {@code Port} against      * @return {@code true} if the given object represents a {@code Port}                and has the same name, {@code false} otherwise      */
annotation|@
name|Override
DECL|method|equals (Object anObject)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|anObject
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|anObject
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|anObject
operator|instanceof
name|Port
condition|)
block|{
return|return
name|name
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Port
operator|)
name|anObject
operator|)
operator|.
name|name
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Returns serial id of SCM issued certificate.    *    * @return certificate serial id    */
DECL|method|getCertSerialId ()
specifier|public
name|String
name|getCertSerialId
parameter_list|()
block|{
return|return
name|certSerialId
return|;
block|}
comment|/**    * Set certificate serial id of SCM issued certificate.    *    */
DECL|method|setCertSerialId (String certSerialId)
specifier|public
name|void
name|setCertSerialId
parameter_list|(
name|String
name|certSerialId
parameter_list|)
block|{
name|this
operator|.
name|certSerialId
operator|=
name|certSerialId
expr_stmt|;
block|}
block|}
end_class

end_unit

