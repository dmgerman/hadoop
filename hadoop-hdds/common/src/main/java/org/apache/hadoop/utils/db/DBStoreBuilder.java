begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.utils.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|ColumnFamilyOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|DBOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|RocksDB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_DB_PROFILE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_DEFAULT_DB_PROFILE
import|;
end_import

begin_comment
comment|/**  * DBStore Builder.  */
end_comment

begin_class
DECL|class|DBStoreBuilder
specifier|public
specifier|final
class|class
name|DBStoreBuilder
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DBStoreBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|tables
specifier|private
name|Set
argument_list|<
name|TableConfig
argument_list|>
name|tables
decl_stmt|;
DECL|field|dbProfile
specifier|private
name|DBProfile
name|dbProfile
decl_stmt|;
DECL|field|rocksDBOption
specifier|private
name|DBOptions
name|rocksDBOption
decl_stmt|;
DECL|field|dbname
specifier|private
name|String
name|dbname
decl_stmt|;
DECL|field|dbPath
specifier|private
name|Path
name|dbPath
decl_stmt|;
DECL|field|tableNames
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
decl_stmt|;
DECL|field|configuration
specifier|private
name|Configuration
name|configuration
decl_stmt|;
DECL|field|registry
specifier|private
name|CodecRegistry
name|registry
decl_stmt|;
DECL|field|readOnly
specifier|private
name|boolean
name|readOnly
init|=
literal|false
decl_stmt|;
DECL|method|DBStoreBuilder (Configuration configuration)
specifier|private
name|DBStoreBuilder
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|tables
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|tableNames
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|registry
operator|=
operator|new
name|CodecRegistry
argument_list|()
expr_stmt|;
block|}
DECL|method|newBuilder (Configuration configuration)
specifier|public
specifier|static
name|DBStoreBuilder
name|newBuilder
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
return|return
operator|new
name|DBStoreBuilder
argument_list|(
name|configuration
argument_list|)
return|;
block|}
DECL|method|setProfile (DBProfile profile)
specifier|public
name|DBStoreBuilder
name|setProfile
parameter_list|(
name|DBProfile
name|profile
parameter_list|)
block|{
name|dbProfile
operator|=
name|profile
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|DBStoreBuilder
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|dbname
operator|=
name|name
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addTable (String tableName)
specifier|public
name|DBStoreBuilder
name|addTable
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|tableNames
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addCodec (Class<T> type, Codec<T> codec)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|DBStoreBuilder
name|addCodec
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Codec
argument_list|<
name|T
argument_list|>
name|codec
parameter_list|)
block|{
name|registry
operator|.
name|addCodec
argument_list|(
name|type
argument_list|,
name|codec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addTable (String tableName, ColumnFamilyOptions option)
specifier|public
name|DBStoreBuilder
name|addTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|ColumnFamilyOptions
name|option
parameter_list|)
throws|throws
name|IOException
block|{
name|TableConfig
name|tableConfig
init|=
operator|new
name|TableConfig
argument_list|(
name|tableName
argument_list|,
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tables
operator|.
name|add
argument_list|(
name|tableConfig
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Unable to add the table: "
operator|+
name|tableName
operator|+
literal|".  Please check if this table name is already in use."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"using custom profile for table: {}"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setDBOption (DBOptions option)
specifier|public
name|DBStoreBuilder
name|setDBOption
parameter_list|(
name|DBOptions
name|option
parameter_list|)
block|{
name|rocksDBOption
operator|=
name|option
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setPath (Path path)
specifier|public
name|DBStoreBuilder
name|setPath
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|dbPath
operator|=
name|path
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setReadOnly (boolean rdOnly)
specifier|public
name|DBStoreBuilder
name|setReadOnly
parameter_list|(
name|boolean
name|rdOnly
parameter_list|)
block|{
name|readOnly
operator|=
name|rdOnly
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Builds a DBStore instance and returns that.    *    * @return DBStore    */
DECL|method|build ()
specifier|public
name|DBStore
name|build
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|StringUtil
operator|.
name|isBlank
argument_list|(
name|dbname
argument_list|)
operator|||
operator|(
name|dbPath
operator|==
literal|null
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Required Parameter missing."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Required parameter is missing. Please make sure "
operator|+
literal|"sure Path and DB name is provided."
argument_list|)
throw|;
block|}
name|processDBProfile
argument_list|()
expr_stmt|;
name|processTables
argument_list|()
expr_stmt|;
name|DBOptions
name|options
init|=
name|getDbProfile
argument_list|()
decl_stmt|;
name|File
name|dbFile
init|=
name|getDBFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dbFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The DB destination directory should exist."
argument_list|)
throw|;
block|}
return|return
operator|new
name|RDBStore
argument_list|(
name|dbFile
argument_list|,
name|options
argument_list|,
name|tables
argument_list|,
name|registry
argument_list|,
name|readOnly
argument_list|)
return|;
block|}
comment|/**    * if the DBProfile is not set, we will default to using default from the    * config file.    */
DECL|method|processDBProfile ()
specifier|private
name|void
name|processDBProfile
parameter_list|()
block|{
if|if
condition|(
name|dbProfile
operator|==
literal|null
condition|)
block|{
name|dbProfile
operator|=
name|this
operator|.
name|configuration
operator|.
name|getEnum
argument_list|(
name|HDDS_DB_PROFILE
argument_list|,
name|HDDS_DEFAULT_DB_PROFILE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processTables ()
specifier|private
name|void
name|processTables
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|tableNames
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|tableNames
control|)
block|{
name|addTable
argument_list|(
name|name
argument_list|,
name|dbProfile
operator|.
name|getColumnFamilyOptions
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using default column profile:{} for Table:{}"
argument_list|,
name|dbProfile
operator|.
name|toString
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|addTable
argument_list|(
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|RocksDB
operator|.
name|DEFAULT_COLUMN_FAMILY
argument_list|)
argument_list|,
name|dbProfile
operator|.
name|getColumnFamilyOptions
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using default column profile:{} for Table:{}"
argument_list|,
name|dbProfile
operator|.
name|toString
argument_list|()
argument_list|,
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|RocksDB
operator|.
name|DEFAULT_COLUMN_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getDbProfile ()
specifier|private
name|DBOptions
name|getDbProfile
parameter_list|()
block|{
if|if
condition|(
name|rocksDBOption
operator|!=
literal|null
condition|)
block|{
return|return
name|rocksDBOption
return|;
block|}
name|DBOptions
name|option
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|StringUtil
operator|.
name|isNotBlank
argument_list|(
name|dbname
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|ColumnFamilyDescriptor
argument_list|>
name|columnFamilyDescriptors
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableConfig
name|tc
range|:
name|tables
control|)
block|{
name|columnFamilyDescriptors
operator|.
name|add
argument_list|(
name|tc
operator|.
name|getDescriptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|columnFamilyDescriptors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|option
operator|=
name|DBConfigFromFile
operator|.
name|readFromFile
argument_list|(
name|dbname
argument_list|,
name|columnFamilyDescriptors
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using Configs from {}.ini file"
argument_list|,
name|dbname
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to read ROCKDB config"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|option
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using default options. {}"
argument_list|,
name|dbProfile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|dbProfile
operator|.
name|getDBOptions
argument_list|()
return|;
block|}
return|return
name|option
return|;
block|}
DECL|method|getDBFile ()
specifier|private
name|File
name|getDBFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dbPath
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"DB path is required."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"A Path to for DB file is needed."
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtil
operator|.
name|isBlank
argument_list|(
name|dbname
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"DBName is a required."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"A valid DB name is required."
argument_list|)
throw|;
block|}
return|return
name|Paths
operator|.
name|get
argument_list|(
name|dbPath
operator|.
name|toString
argument_list|()
argument_list|,
name|dbname
argument_list|)
operator|.
name|toFile
argument_list|()
return|;
block|}
block|}
end_class

end_unit

