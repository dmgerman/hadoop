begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.utils.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|RocksIterator
import|;
end_import

begin_comment
comment|/**  * RocksDB store iterator.  */
end_comment

begin_class
DECL|class|RDBStoreIterator
specifier|public
class|class
name|RDBStoreIterator
implements|implements
name|TableIterator
argument_list|<
name|byte
index|[]
argument_list|,
name|ByteArrayKeyValue
argument_list|>
block|{
DECL|field|rocksDBIterator
specifier|private
name|RocksIterator
name|rocksDBIterator
decl_stmt|;
DECL|method|RDBStoreIterator (RocksIterator iterator)
specifier|public
name|RDBStoreIterator
parameter_list|(
name|RocksIterator
name|iterator
parameter_list|)
block|{
name|this
operator|.
name|rocksDBIterator
operator|=
name|iterator
expr_stmt|;
name|rocksDBIterator
operator|.
name|seekToFirst
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|forEachRemaining ( Consumer<? super ByteArrayKeyValue> action)
specifier|public
name|void
name|forEachRemaining
parameter_list|(
name|Consumer
argument_list|<
name|?
super|super
name|ByteArrayKeyValue
argument_list|>
name|action
parameter_list|)
block|{
while|while
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|action
operator|.
name|accept
argument_list|(
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|rocksDBIterator
operator|.
name|isValid
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|ByteArrayKeyValue
name|next
parameter_list|()
block|{
if|if
condition|(
name|rocksDBIterator
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|ByteArrayKeyValue
name|value
init|=
name|ByteArrayKeyValue
operator|.
name|create
argument_list|(
name|rocksDBIterator
operator|.
name|key
argument_list|()
argument_list|,
name|rocksDBIterator
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|rocksDBIterator
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|value
return|;
block|}
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"RocksDB Store has no more elements"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|seekToFirst ()
specifier|public
name|void
name|seekToFirst
parameter_list|()
block|{
name|rocksDBIterator
operator|.
name|seekToFirst
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seekToLast ()
specifier|public
name|void
name|seekToLast
parameter_list|()
block|{
name|rocksDBIterator
operator|.
name|seekToLast
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seek (byte[] key)
specifier|public
name|ByteArrayKeyValue
name|seek
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
name|rocksDBIterator
operator|.
name|seek
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|rocksDBIterator
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
name|ByteArrayKeyValue
operator|.
name|create
argument_list|(
name|rocksDBIterator
operator|.
name|key
argument_list|()
argument_list|,
name|rocksDBIterator
operator|.
name|value
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|key ()
specifier|public
name|byte
index|[]
name|key
parameter_list|()
block|{
if|if
condition|(
name|rocksDBIterator
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
name|rocksDBIterator
operator|.
name|key
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|value ()
specifier|public
name|ByteArrayKeyValue
name|value
parameter_list|()
block|{
if|if
condition|(
name|rocksDBIterator
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
name|ByteArrayKeyValue
operator|.
name|create
argument_list|(
name|rocksDBIterator
operator|.
name|key
argument_list|()
argument_list|,
name|rocksDBIterator
operator|.
name|value
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|rocksDBIterator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

