begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.lock
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool2
operator|.
name|impl
operator|.
name|GenericObjectPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_comment
comment|/**  * Manages the locks on a given resource. A new lock is created for each  * and every unique resource. Uniqueness of resource depends on the  * {@code equals} implementation of it.  */
end_comment

begin_class
DECL|class|LockManager
specifier|public
class|class
name|LockManager
parameter_list|<
name|R
parameter_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LockManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|activeLocks
specifier|private
specifier|final
name|Map
argument_list|<
name|R
argument_list|,
name|ActiveLock
argument_list|>
name|activeLocks
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|lockPool
specifier|private
specifier|final
name|GenericObjectPool
argument_list|<
name|ActiveLock
argument_list|>
name|lockPool
init|=
operator|new
name|GenericObjectPool
argument_list|<>
argument_list|(
operator|new
name|PooledLockFactory
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Creates new LockManager instance with the given Configuration.    *    * @param conf Configuration object    */
DECL|method|LockManager (final Configuration conf)
specifier|public
name|LockManager
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|int
name|maxPoolSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HddsConfigKeys
operator|.
name|HDDS_LOCK_MAX_CONCURRENCY
argument_list|,
name|HddsConfigKeys
operator|.
name|HDDS_LOCK_MAX_CONCURRENCY_DEFAULT
argument_list|)
decl_stmt|;
name|lockPool
operator|.
name|setMaxTotal
argument_list|(
name|maxPoolSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Acquires the lock on given resource.    *    *<p>If the lock is not available then the current thread becomes    * disabled for thread scheduling purposes and lies dormant until the    * lock has been acquired.    *    * @param resource on which the lock has to be acquired    * @deprecated Use {@link LockManager#writeLock} instead    */
DECL|method|lock (final R resource)
specifier|public
name|void
name|lock
parameter_list|(
specifier|final
name|R
name|resource
parameter_list|)
block|{
name|writeLock
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
comment|/**    * Releases the lock on given resource.    *    * @param resource for which the lock has to be released    * @deprecated Use {@link LockManager#writeUnlock} instead    */
DECL|method|unlock (final R resource)
specifier|public
name|void
name|unlock
parameter_list|(
specifier|final
name|R
name|resource
parameter_list|)
block|{
name|writeUnlock
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
comment|/**    * Acquires the read lock on given resource.    *    *<p>Acquires the read lock on resource if the write lock is not held by    * another thread and returns immediately.    *    *<p>If the write lock on resource is held by another thread then    * the current thread becomes disabled for thread scheduling    * purposes and lies dormant until the read lock has been acquired.    *    * @param resource on which the read lock has to be acquired    */
DECL|method|readLock (final R resource)
specifier|public
name|void
name|readLock
parameter_list|(
specifier|final
name|R
name|resource
parameter_list|)
block|{
name|acquire
argument_list|(
name|resource
argument_list|,
name|ActiveLock
operator|::
name|readLock
argument_list|)
expr_stmt|;
block|}
comment|/**    * Releases the read lock on given resource.    *    * @param resource for which the read lock has to be released    * @throws IllegalMonitorStateException if the current thread does not    *                                      hold this lock    */
DECL|method|readUnlock (final R resource)
specifier|public
name|void
name|readUnlock
parameter_list|(
specifier|final
name|R
name|resource
parameter_list|)
throws|throws
name|IllegalMonitorStateException
block|{
name|release
argument_list|(
name|resource
argument_list|,
name|ActiveLock
operator|::
name|readUnlock
argument_list|)
expr_stmt|;
block|}
comment|/**    * Acquires the write lock on given resource.    *    *<p>Acquires the write lock on resource if neither the read nor write lock    * are held by another thread and returns immediately.    *    *<p>If the current thread already holds the write lock then the    * hold count is incremented by one and the method returns    * immediately.    *    *<p>If the lock is held by another thread then the current    * thread becomes disabled for thread scheduling purposes and    * lies dormant until the write lock has been acquired.    *    * @param resource on which the lock has to be acquired    */
DECL|method|writeLock (final R resource)
specifier|public
name|void
name|writeLock
parameter_list|(
specifier|final
name|R
name|resource
parameter_list|)
block|{
name|acquire
argument_list|(
name|resource
argument_list|,
name|ActiveLock
operator|::
name|writeLock
argument_list|)
expr_stmt|;
block|}
comment|/**    * Releases the write lock on given resource.    *    * @param resource for which the lock has to be released    * @throws IllegalMonitorStateException if the current thread does not    *                                      hold this lock    */
DECL|method|writeUnlock (final R resource)
specifier|public
name|void
name|writeUnlock
parameter_list|(
specifier|final
name|R
name|resource
parameter_list|)
throws|throws
name|IllegalMonitorStateException
block|{
name|release
argument_list|(
name|resource
argument_list|,
name|ActiveLock
operator|::
name|writeUnlock
argument_list|)
expr_stmt|;
block|}
comment|/**    * Acquires the lock on given resource using the provided lock function.    *    * @param resource on which the lock has to be acquired    * @param lockFn function to acquire the lock    */
DECL|method|acquire (final R resource, final Consumer<ActiveLock> lockFn)
specifier|private
name|void
name|acquire
parameter_list|(
specifier|final
name|R
name|resource
parameter_list|,
specifier|final
name|Consumer
argument_list|<
name|ActiveLock
argument_list|>
name|lockFn
parameter_list|)
block|{
name|lockFn
operator|.
name|accept
argument_list|(
name|getLockForLocking
argument_list|(
name|resource
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Releases the lock on given resource using the provided release function.    *    * @param resource for which the lock has to be released    * @param releaseFn function to release the lock    */
DECL|method|release (final R resource, final Consumer<ActiveLock> releaseFn)
specifier|private
name|void
name|release
parameter_list|(
specifier|final
name|R
name|resource
parameter_list|,
specifier|final
name|Consumer
argument_list|<
name|ActiveLock
argument_list|>
name|releaseFn
parameter_list|)
block|{
specifier|final
name|ActiveLock
name|lock
init|=
name|getLockForReleasing
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|releaseFn
operator|.
name|accept
argument_list|(
name|lock
argument_list|)
expr_stmt|;
name|decrementActiveLockCount
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns {@link ActiveLock} instance for the given resource,    * on which the lock can be acquired.    *    * @param resource on which the lock has to be acquired    * @return {@link ActiveLock} instance    */
DECL|method|getLockForLocking (final R resource)
specifier|private
name|ActiveLock
name|getLockForLocking
parameter_list|(
specifier|final
name|R
name|resource
parameter_list|)
block|{
comment|/*      * While getting a lock object for locking we should      * atomically increment the active count of the lock.      *      * This is to avoid cases where the selected lock could      * be removed from the activeLocks map and returned to      * the object pool.      */
return|return
name|activeLocks
operator|.
name|compute
argument_list|(
name|resource
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
specifier|final
name|ActiveLock
name|lock
decl_stmt|;
try|try
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|lock
operator|=
name|lockPool
operator|.
name|borrowObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|lock
operator|=
name|v
expr_stmt|;
block|}
name|lock
operator|.
name|incrementActiveCount
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to obtain lock."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
return|return
name|lock
return|;
block|}
argument_list|)
return|;
block|}
comment|/**    * Returns {@link ActiveLock} instance for the given resource,    * for which the lock has to be released.    *    * @param resource for which the lock has to be released    * @return {@link ActiveLock} instance    */
DECL|method|getLockForReleasing (final R resource)
specifier|private
name|ActiveLock
name|getLockForReleasing
parameter_list|(
specifier|final
name|R
name|resource
parameter_list|)
block|{
if|if
condition|(
name|activeLocks
operator|.
name|containsKey
argument_list|(
name|resource
argument_list|)
condition|)
block|{
return|return
name|activeLocks
operator|.
name|get
argument_list|(
name|resource
argument_list|)
return|;
block|}
comment|// Someone is releasing a lock which was never acquired.
name|LOG
operator|.
name|error
argument_list|(
literal|"Trying to release the lock on {}, which was never acquired."
argument_list|,
name|resource
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalMonitorStateException
argument_list|(
literal|"Releasing lock on resource "
operator|+
name|resource
operator|+
literal|" without acquiring lock"
argument_list|)
throw|;
block|}
comment|/**    * Decrements the active lock count and returns the {@link ActiveLock}    * object to pool if the active count is 0.    *    * @param resource resource to which the ActiveLock is associated    */
DECL|method|decrementActiveLockCount (final R resource)
specifier|private
name|void
name|decrementActiveLockCount
parameter_list|(
specifier|final
name|R
name|resource
parameter_list|)
block|{
name|activeLocks
operator|.
name|computeIfPresent
argument_list|(
name|resource
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|v
operator|.
name|decrementActiveCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|v
operator|.
name|getActiveLockCount
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
name|v
return|;
block|}
name|lockPool
operator|.
name|returnObject
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

