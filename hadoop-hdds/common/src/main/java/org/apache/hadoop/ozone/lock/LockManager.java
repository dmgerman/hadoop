begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.lock
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool2
operator|.
name|impl
operator|.
name|GenericObjectPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * Manages the locks on a given resource. A new lock is created for each  * and every unique resource. Uniqueness of resource depends on the  * {@code equals} implementation of it.  */
end_comment

begin_class
DECL|class|LockManager
specifier|public
class|class
name|LockManager
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LockManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|activeLocks
specifier|private
specifier|final
name|Map
argument_list|<
name|T
argument_list|,
name|ActiveLock
argument_list|>
name|activeLocks
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|lockPool
specifier|private
specifier|final
name|GenericObjectPool
argument_list|<
name|ActiveLock
argument_list|>
name|lockPool
init|=
operator|new
name|GenericObjectPool
argument_list|<>
argument_list|(
operator|new
name|PooledLockFactory
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Creates new LockManager instance.    *    * @param conf Configuration object    */
DECL|method|LockManager (Configuration conf)
specifier|public
name|LockManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|maxPoolSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HddsConfigKeys
operator|.
name|HDDS_LOCK_MAX_CONCURRENCY
argument_list|,
name|HddsConfigKeys
operator|.
name|HDDS_LOCK_MAX_CONCURRENCY_DEFAULT
argument_list|)
decl_stmt|;
name|lockPool
operator|.
name|setMaxTotal
argument_list|(
name|maxPoolSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Acquires the lock on given resource.    *    *<p>If the lock is not available then the current thread becomes    * disabled for thread scheduling purposes and lies dormant until the    * lock has been acquired.    */
DECL|method|lock (T resource)
specifier|public
name|void
name|lock
parameter_list|(
name|T
name|resource
parameter_list|)
block|{
name|activeLocks
operator|.
name|compute
argument_list|(
name|resource
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|ActiveLock
name|lock
decl_stmt|;
try|try
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|lock
operator|=
name|lockPool
operator|.
name|borrowObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|lock
operator|=
name|v
expr_stmt|;
block|}
name|lock
operator|.
name|incrementActiveCount
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to obtain lock."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
return|return
name|lock
return|;
block|}
argument_list|)
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Releases the lock on given resource.    */
DECL|method|unlock (T resource)
specifier|public
name|void
name|unlock
parameter_list|(
name|T
name|resource
parameter_list|)
block|{
name|ActiveLock
name|lock
init|=
name|activeLocks
operator|.
name|get
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
comment|// Someone is releasing a lock which was never acquired. Log and return.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Trying to release the lock on {}, which was never acquired."
argument_list|,
name|resource
argument_list|)
expr_stmt|;
return|return;
block|}
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|activeLocks
operator|.
name|computeIfPresent
argument_list|(
name|resource
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|v
operator|.
name|decrementActiveCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|v
operator|.
name|getActiveLockCount
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
name|v
return|;
block|}
name|lockPool
operator|.
name|returnObject
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

