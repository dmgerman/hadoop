begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.security.x509.certificate.authority
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|authority
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|exception
operator|.
name|SCMSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|SecurityConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|authority
operator|.
name|PKIProfiles
operator|.
name|PKIProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificates
operator|.
name|utils
operator|.
name|CertificateSignRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|ASN1Encodable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|ASN1ObjectIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|pkcs
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|pkcs
operator|.
name|PKCSObjectIdentifiers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x500
operator|.
name|RDN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|Extension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|Extensions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|X509CertificateHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|ContentVerifierProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|OperatorCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|jcajce
operator|.
name|JcaContentVerifierProviderBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|pkcs
operator|.
name|PKCS10CertificationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|pkcs
operator|.
name|PKCSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_comment
comment|/**  * A base approver class for certificate approvals.  */
end_comment

begin_class
DECL|class|BaseApprover
specifier|public
specifier|abstract
class|class
name|BaseApprover
implements|implements
name|CertificateApprover
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CertificateApprover
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|profile
specifier|private
specifier|final
name|PKIProfile
name|profile
decl_stmt|;
DECL|field|securityConfig
specifier|private
specifier|final
name|SecurityConfig
name|securityConfig
decl_stmt|;
DECL|method|BaseApprover (PKIProfile pkiProfile, SecurityConfig config)
specifier|public
name|BaseApprover
parameter_list|(
name|PKIProfile
name|pkiProfile
parameter_list|,
name|SecurityConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|profile
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|pkiProfile
argument_list|)
expr_stmt|;
name|this
operator|.
name|securityConfig
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the Security config.    *    * @return SecurityConfig    */
DECL|method|getSecurityConfig ()
specifier|public
name|SecurityConfig
name|getSecurityConfig
parameter_list|()
block|{
return|return
name|securityConfig
return|;
block|}
comment|/**    * Returns the Attribute array that encodes extensions.    *    * @param request - Certificate Request    * @return - An Array of Attributes that encode various extensions requested    * in this certificate.    */
DECL|method|getAttributes (PKCS10CertificationRequest request)
name|Attribute
index|[]
name|getAttributes
parameter_list|(
name|PKCS10CertificationRequest
name|request
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|getAttributes
argument_list|(
name|PKCSObjectIdentifiers
operator|.
name|pkcs_9_at_extensionRequest
argument_list|)
return|;
block|}
comment|/**    * Returns a list of Extensions encoded in a given attribute.    *    * @param attribute - Attribute to decode.    * @return - List of Extensions.    */
DECL|method|getExtensionsList (Attribute attribute)
name|List
argument_list|<
name|Extensions
argument_list|>
name|getExtensionsList
parameter_list|(
name|Attribute
name|attribute
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Extensions
argument_list|>
name|extensionsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ASN1Encodable
name|value
range|:
name|attribute
operator|.
name|getAttributeValues
argument_list|()
control|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|Extensions
name|extensions
init|=
name|Extensions
operator|.
name|getInstance
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|extensionsList
operator|.
name|add
argument_list|(
name|extensions
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|extensionsList
return|;
block|}
comment|/**    * Returns the Extension decoded into a Java Collection.    * @param extensions - A set of Extensions in ASN.1.    * @return List of Decoded Extensions.    */
DECL|method|getIndividualExtension (Extensions extensions)
name|List
argument_list|<
name|Extension
argument_list|>
name|getIndividualExtension
parameter_list|(
name|Extensions
name|extensions
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|extensions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Extension
argument_list|>
name|extenList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ASN1ObjectIdentifier
name|id
range|:
name|extensions
operator|.
name|getExtensionOIDs
argument_list|()
control|)
block|{
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|Extension
name|ext
init|=
name|extensions
operator|.
name|getExtension
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ext
operator|!=
literal|null
condition|)
block|{
name|extenList
operator|.
name|add
argument_list|(
name|ext
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|extenList
return|;
block|}
comment|/**    * This function verifies all extensions in the certificate.    *    * @param request - CSR    * @return - true if the extensions are acceptable by the profile, false    * otherwise.    */
DECL|method|verfiyExtensions (PKCS10CertificationRequest request)
name|boolean
name|verfiyExtensions
parameter_list|(
name|PKCS10CertificationRequest
name|request
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|/*      * Inside a CSR we have      *  1. A list of Attributes      *    2. Inside each attribute a list of extensions.      *      3. We need to walk thru the each extension and verify they      *      are expected and we can put that into a certificate.      */
for|for
control|(
name|Attribute
name|attr
range|:
name|getAttributes
argument_list|(
name|request
argument_list|)
control|)
block|{
for|for
control|(
name|Extensions
name|extensionsList
range|:
name|getExtensionsList
argument_list|(
name|attr
argument_list|)
control|)
block|{
for|for
control|(
name|Extension
name|extension
range|:
name|getIndividualExtension
argument_list|(
name|extensionsList
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|profile
operator|.
name|validateExtension
argument_list|(
name|extension
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to verify extension. {}"
argument_list|,
name|extension
operator|.
name|getExtnId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Verifies the Signature on the CSR is valid.    *    * @param pkcs10Request - PCKS10 Request.    * @return True if it is valid, false otherwise.    * @throws OperatorCreationException - On Error.    * @throws PKCSException             - on Error.    */
DECL|method|verifyPkcs10Request (PKCS10CertificationRequest pkcs10Request)
name|boolean
name|verifyPkcs10Request
parameter_list|(
name|PKCS10CertificationRequest
name|pkcs10Request
parameter_list|)
throws|throws
name|OperatorCreationException
throws|,
name|PKCSException
block|{
name|ContentVerifierProvider
name|verifierProvider
init|=
operator|new
name|JcaContentVerifierProviderBuilder
argument_list|()
operator|.
name|setProvider
argument_list|(
name|this
operator|.
name|securityConfig
operator|.
name|getProvider
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
name|pkcs10Request
operator|.
name|getSubjectPublicKeyInfo
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|pkcs10Request
operator|.
name|isSignatureValid
argument_list|(
name|verifierProvider
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|approve (String csr)
specifier|public
name|CompletableFuture
argument_list|<
name|X509CertificateHolder
argument_list|>
name|approve
parameter_list|(
name|String
name|csr
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|approve
argument_list|(
name|CertificateSignRequest
operator|.
name|getCertificationRequest
argument_list|(
name|csr
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|X509CertificateHolder
argument_list|>
DECL|method|approve (PKCS10CertificationRequest csr)
name|approve
parameter_list|(
name|PKCS10CertificationRequest
name|csr
parameter_list|)
block|{
comment|/**      * The base approver executes the following algorithm to verify that a      * CSR meets the PKI Profile criteria.      *      * 0. For time being (Until we have SCM HA) we will deny all request to      * become an intermediary CA. So we will not need to verify using CA      * profile, right now.      *      * 1. We verify the proof of possession. That is we verify the entity      * that sends us the CSR indeed has the private key for the said public key.      *      * 2. Then we will verify the RDNs meet the format and the Syntax that      * PKI profile dictates.      *      * 3. Then we decode each and every extension and  ask if the PKI profile      * approves of these extension requests.      *      * 4. If all of these pass, We will return a Future which will point to      * the Certificate when finished.      */
name|CompletableFuture
argument_list|<
name|X509CertificateHolder
argument_list|>
name|response
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Step 0: Verify this is not a CA Certificate.
comment|// Will be done by the Ozone PKI profile for time being.
comment|// If there are any basicConstraints, they will flagged as not
comment|// supported for time being.
comment|// Step 1: Let us verify that Certificate is indeed signed by someone
comment|// who has access to the private key.
if|if
condition|(
operator|!
name|verifyPkcs10Request
argument_list|(
name|csr
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to verify the signature in CSR."
argument_list|)
expr_stmt|;
name|response
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|SCMSecurityException
argument_list|(
literal|"Failed to "
operator|+
literal|"verify the CSR."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Step 2: Verify the RDNs are in the correct format.
comment|// TODO: Ozone Profile does not verify RDN now, so this call will pass.
for|for
control|(
name|RDN
name|rdn
range|:
name|csr
operator|.
name|getSubject
argument_list|()
operator|.
name|getRDNs
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|profile
operator|.
name|validateRDN
argument_list|(
name|rdn
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed in verifying RDNs"
argument_list|)
expr_stmt|;
name|response
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|SCMSecurityException
argument_list|(
literal|"Failed to "
operator|+
literal|"verify the RDNs. Please check the subject name."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Step 3: Verify the Extensions.
if|if
condition|(
operator|!
name|verfiyExtensions
argument_list|(
name|csr
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed in verification of extensions."
argument_list|)
expr_stmt|;
name|response
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|SCMSecurityException
argument_list|(
literal|"Failed to "
operator|+
literal|"verify extensions."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OperatorCreationException
decl||
name|PKCSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Approval Failure."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|response
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|SCMSecurityException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

