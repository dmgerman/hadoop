begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.utils.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Wrapper class to hold DB data read from the RocksDB log file.  */
end_comment

begin_class
DECL|class|DBUpdatesWrapper
specifier|public
class|class
name|DBUpdatesWrapper
block|{
DECL|field|dataList
specifier|private
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|dataList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|currentSequenceNumber
specifier|private
name|long
name|currentSequenceNumber
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|addWriteBatch (byte[] data, long sequenceNumber)
specifier|public
name|void
name|addWriteBatch
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|long
name|sequenceNumber
parameter_list|)
block|{
name|dataList
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentSequenceNumber
operator|<
name|sequenceNumber
condition|)
block|{
name|currentSequenceNumber
operator|=
name|sequenceNumber
expr_stmt|;
block|}
block|}
DECL|method|getData ()
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getData
parameter_list|()
block|{
return|return
name|dataList
return|;
block|}
DECL|method|setCurrentSequenceNumber (long sequenceNumber)
specifier|public
name|void
name|setCurrentSequenceNumber
parameter_list|(
name|long
name|sequenceNumber
parameter_list|)
block|{
name|this
operator|.
name|currentSequenceNumber
operator|=
name|sequenceNumber
expr_stmt|;
block|}
DECL|method|getCurrentSequenceNumber ()
specifier|public
name|long
name|getCurrentSequenceNumber
parameter_list|()
block|{
return|return
name|currentSequenceNumber
return|;
block|}
block|}
end_class

end_unit

