begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.security.x509.certificate.authority
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|authority
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|exception
operator|.
name|SCMSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|SecurityConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|authority
operator|.
name|PKIProfiles
operator|.
name|PKIProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|keys
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x500
operator|.
name|X500Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x500
operator|.
name|style
operator|.
name|BCStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|AlgorithmIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|SubjectPublicKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|X509CertificateHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|X509v3CertificateBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|crypto
operator|.
name|params
operator|.
name|AsymmetricKeyParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|crypto
operator|.
name|params
operator|.
name|RSAKeyParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|crypto
operator|.
name|util
operator|.
name|PrivateKeyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|crypto
operator|.
name|util
operator|.
name|PublicKeyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|ContentSigner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|DefaultDigestAlgorithmIdentifierFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|DefaultSignatureAlgorithmIdentifierFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|OperatorCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|bc
operator|.
name|BcRSAContentSignerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|pkcs
operator|.
name|PKCS10CertificationRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_comment
comment|/**  * Default Approver used the by the DefaultCA.  */
end_comment

begin_class
DECL|class|DefaultApprover
specifier|public
class|class
name|DefaultApprover
extends|extends
name|BaseApprover
block|{
comment|/**    * Constructs the Default Approver.    *    * @param pkiProfile - PKI Profile to use.    * @param config - Security Config    */
DECL|method|DefaultApprover (PKIProfile pkiProfile, SecurityConfig config)
specifier|public
name|DefaultApprover
parameter_list|(
name|PKIProfile
name|pkiProfile
parameter_list|,
name|SecurityConfig
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|pkiProfile
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sign function signs a Certificate.    * @param config - Security Config.    * @param caPrivate - CAs private Key.    * @param caCertificate - CA Certificate.    * @param validFrom - Begin Da te    * @param validTill - End Date    * @param certificationRequest - Certification Request.    * @param scmId - SCM id.    * @param clusterId - Cluster id.    * @return Signed Certificate.    * @throws IOException - On Error    * @throws OperatorCreationException - on Error.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ParameterNumber"
argument_list|)
DECL|method|sign ( SecurityConfig config, PrivateKey caPrivate, X509CertificateHolder caCertificate, Date validFrom, Date validTill, PKCS10CertificationRequest certificationRequest, String scmId, String clusterId)
specifier|public
name|X509CertificateHolder
name|sign
parameter_list|(
name|SecurityConfig
name|config
parameter_list|,
name|PrivateKey
name|caPrivate
parameter_list|,
name|X509CertificateHolder
name|caCertificate
parameter_list|,
name|Date
name|validFrom
parameter_list|,
name|Date
name|validTill
parameter_list|,
name|PKCS10CertificationRequest
name|certificationRequest
parameter_list|,
name|String
name|scmId
parameter_list|,
name|String
name|clusterId
parameter_list|)
throws|throws
name|IOException
throws|,
name|OperatorCreationException
block|{
name|AlgorithmIdentifier
name|sigAlgId
init|=
operator|new
name|DefaultSignatureAlgorithmIdentifierFinder
argument_list|()
operator|.
name|find
argument_list|(
name|config
operator|.
name|getSignatureAlgo
argument_list|()
argument_list|)
decl_stmt|;
name|AlgorithmIdentifier
name|digAlgId
init|=
operator|new
name|DefaultDigestAlgorithmIdentifierFinder
argument_list|()
operator|.
name|find
argument_list|(
name|sigAlgId
argument_list|)
decl_stmt|;
name|AsymmetricKeyParameter
name|asymmetricKP
init|=
name|PrivateKeyFactory
operator|.
name|createKey
argument_list|(
name|caPrivate
operator|.
name|getEncoded
argument_list|()
argument_list|)
decl_stmt|;
name|SubjectPublicKeyInfo
name|keyInfo
init|=
name|certificationRequest
operator|.
name|getSubjectPublicKeyInfo
argument_list|()
decl_stmt|;
comment|// Get scmId and cluster Id from subject name.
name|X500Name
name|x500Name
init|=
name|certificationRequest
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|String
name|csrScmId
init|=
name|x500Name
operator|.
name|getRDNs
argument_list|(
name|BCStyle
operator|.
name|OU
argument_list|)
index|[
literal|0
index|]
operator|.
name|getFirst
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toASN1Primitive
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|csrClusterId
init|=
name|x500Name
operator|.
name|getRDNs
argument_list|(
name|BCStyle
operator|.
name|O
argument_list|)
index|[
literal|0
index|]
operator|.
name|getFirst
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toASN1Primitive
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|scmId
operator|.
name|equals
argument_list|(
name|csrScmId
argument_list|)
operator|||
operator|!
name|clusterId
operator|.
name|equals
argument_list|(
name|csrClusterId
argument_list|)
condition|)
block|{
if|if
condition|(
name|csrScmId
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"null"
argument_list|)
operator|&&
name|csrClusterId
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"null"
argument_list|)
condition|)
block|{
comment|// Special case to handle DN certificate generation as DN might not know
comment|// scmId and clusterId before registration. In secure mode registration
comment|// will succeed only after datanode has a valid certificate.
name|String
name|cn
init|=
name|x500Name
operator|.
name|getRDNs
argument_list|(
name|BCStyle
operator|.
name|CN
argument_list|)
index|[
literal|0
index|]
operator|.
name|getFirst
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toASN1Primitive
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|x500Name
operator|=
name|SecurityUtil
operator|.
name|getDistinguishedName
argument_list|(
name|cn
argument_list|,
name|scmId
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Throw exception if scmId and clusterId doesn't match.
throw|throw
operator|new
name|SCMSecurityException
argument_list|(
literal|"ScmId and ClusterId in CSR subject"
operator|+
literal|" are incorrect."
argument_list|)
throw|;
block|}
block|}
name|RSAKeyParameters
name|rsa
init|=
operator|(
name|RSAKeyParameters
operator|)
name|PublicKeyFactory
operator|.
name|createKey
argument_list|(
name|keyInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsa
operator|.
name|getModulus
argument_list|()
operator|.
name|bitLength
argument_list|()
operator|<
name|config
operator|.
name|getSize
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SCMSecurityException
argument_list|(
literal|"Key size is too small in certificate "
operator|+
literal|"signing request"
argument_list|)
throw|;
block|}
name|X509v3CertificateBuilder
name|certificateGenerator
init|=
operator|new
name|X509v3CertificateBuilder
argument_list|(
name|caCertificate
operator|.
name|getSubject
argument_list|()
argument_list|,
comment|// Serial is not sequential but it is monotonically increasing.
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Time
operator|.
name|monotonicNowNanos
argument_list|()
argument_list|)
argument_list|,
name|validFrom
argument_list|,
name|validTill
argument_list|,
name|x500Name
argument_list|,
name|keyInfo
argument_list|)
decl_stmt|;
name|ContentSigner
name|sigGen
init|=
operator|new
name|BcRSAContentSignerBuilder
argument_list|(
name|sigAlgId
argument_list|,
name|digAlgId
argument_list|)
operator|.
name|build
argument_list|(
name|asymmetricKP
argument_list|)
decl_stmt|;
return|return
name|certificateGenerator
operator|.
name|build
argument_list|(
name|sigGen
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|inspectCSR (String csr)
specifier|public
name|CompletableFuture
argument_list|<
name|X509CertificateHolder
argument_list|>
name|inspectCSR
parameter_list|(
name|String
name|csr
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|inspectCSR
argument_list|(
name|csr
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|X509CertificateHolder
argument_list|>
DECL|method|inspectCSR (PKCS10CertificationRequest csr)
name|inspectCSR
parameter_list|(
name|PKCS10CertificationRequest
name|csr
parameter_list|)
block|{
return|return
name|super
operator|.
name|inspectCSR
argument_list|(
name|csr
argument_list|)
return|;
block|}
block|}
end_class

end_unit

