begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.ââSee the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.ââThe ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.ââYou may obtain a copy of the License at  *  * ââââ http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.chillmode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|chillmode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|PipelineReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|PipelineReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|HddsTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|MockNodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|SCMPipelineManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeHeartbeatDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * This class tests HealthyPipelineChillMode rule.  */
end_comment

begin_class
DECL|class|TestHealthyPipelineChillModeRule
specifier|public
class|class
name|TestHealthyPipelineChillModeRule
block|{
annotation|@
name|Test
DECL|method|testHealthyPipelineChillModeRuleWithNoPipelines ()
specifier|public
name|void
name|testHealthyPipelineChillModeRuleWithNoPipelines
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|storageDir
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestHealthyPipelineChillModeRule
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|EventQueue
name|eventQueue
init|=
operator|new
name|EventQueue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerInfo
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|HddsTestUtils
operator|.
name|getContainerInfo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|OzoneConfiguration
name|config
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|MockNodeManager
name|nodeManager
init|=
operator|new
name|MockNodeManager
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|storageDir
argument_list|)
expr_stmt|;
comment|// enable pipeline check
name|config
operator|.
name|setBoolean
argument_list|(
name|HddsConfigKeys
operator|.
name|HDDS_SCM_CHILLMODE_PIPELINE_AVAILABILITY_CHECK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PipelineManager
name|pipelineManager
init|=
operator|new
name|SCMPipelineManager
argument_list|(
name|config
argument_list|,
name|nodeManager
argument_list|,
name|eventQueue
argument_list|)
decl_stmt|;
name|SCMChillModeManager
name|scmChillModeManager
init|=
operator|new
name|SCMChillModeManager
argument_list|(
name|config
argument_list|,
name|containers
argument_list|,
name|pipelineManager
argument_list|,
name|eventQueue
argument_list|)
decl_stmt|;
name|HealthyPipelineChillModeRule
name|healthyPipelineChillModeRule
init|=
name|scmChillModeManager
operator|.
name|getHealthyPipelineChillModeRule
argument_list|()
decl_stmt|;
comment|// This should be immediately satisfied, as no pipelines are there yet.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|healthyPipelineChillModeRule
operator|.
name|validate
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|storageDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHealthyPipelineChillModeRuleWithPipelines ()
specifier|public
name|void
name|testHealthyPipelineChillModeRuleWithPipelines
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|storageDir
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestHealthyPipelineChillModeRule
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|EventQueue
name|eventQueue
init|=
operator|new
name|EventQueue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerInfo
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|HddsTestUtils
operator|.
name|getContainerInfo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|OzoneConfiguration
name|config
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
comment|// In Mock Node Manager, first 8 nodes are healthy, next 2 nodes are
comment|// stale and last one is dead, and this repeats. So for a 12 node, 9
comment|// healthy, 2 stale and one dead.
name|MockNodeManager
name|nodeManager
init|=
operator|new
name|MockNodeManager
argument_list|(
literal|true
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|storageDir
argument_list|)
expr_stmt|;
comment|// enable pipeline check
name|config
operator|.
name|setBoolean
argument_list|(
name|HddsConfigKeys
operator|.
name|HDDS_SCM_CHILLMODE_PIPELINE_AVAILABILITY_CHECK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PipelineManager
name|pipelineManager
init|=
operator|new
name|SCMPipelineManager
argument_list|(
name|config
argument_list|,
name|nodeManager
argument_list|,
name|eventQueue
argument_list|)
decl_stmt|;
comment|// Create 3 pipelines
name|Pipeline
name|pipeline1
init|=
name|pipelineManager
operator|.
name|createPipeline
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline2
init|=
name|pipelineManager
operator|.
name|createPipeline
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline3
init|=
name|pipelineManager
operator|.
name|createPipeline
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
decl_stmt|;
name|SCMChillModeManager
name|scmChillModeManager
init|=
operator|new
name|SCMChillModeManager
argument_list|(
name|config
argument_list|,
name|containers
argument_list|,
name|pipelineManager
argument_list|,
name|eventQueue
argument_list|)
decl_stmt|;
name|HealthyPipelineChillModeRule
name|healthyPipelineChillModeRule
init|=
name|scmChillModeManager
operator|.
name|getHealthyPipelineChillModeRule
argument_list|()
decl_stmt|;
comment|// No datanodes have sent pipelinereport from datanode
name|Assert
operator|.
name|assertFalse
argument_list|(
name|healthyPipelineChillModeRule
operator|.
name|validate
argument_list|()
argument_list|)
expr_stmt|;
comment|// Fire pipeline report from all datanodes in first pipeline, as here we
comment|// have 3 pipelines, 10% is 0.3, when doing ceil it is 1. So, we should
comment|// validate should return true after fire pipeline event
comment|//Here testing with out pipelinereport handler, so not moving created
comment|// pipelines to allocated state, as pipelines changing to healthy is
comment|// handled by pipeline report handler. So, leaving pipeline's in pipeline
comment|// manager in open state for test case simplicity.
name|firePipelineEvent
argument_list|(
name|pipeline1
argument_list|,
name|eventQueue
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|healthyPipelineChillModeRule
operator|.
name|validate
argument_list|()
argument_list|,
literal|1000
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|storageDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHealthyPipelineChillModeRuleWithMixedPipelines ()
specifier|public
name|void
name|testHealthyPipelineChillModeRuleWithMixedPipelines
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|storageDir
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestHealthyPipelineChillModeRule
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|EventQueue
name|eventQueue
init|=
operator|new
name|EventQueue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerInfo
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|HddsTestUtils
operator|.
name|getContainerInfo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|OzoneConfiguration
name|config
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
comment|// In Mock Node Manager, first 8 nodes are healthy, next 2 nodes are
comment|// stale and last one is dead, and this repeats. So for a 12 node, 9
comment|// healthy, 2 stale and one dead.
name|MockNodeManager
name|nodeManager
init|=
operator|new
name|MockNodeManager
argument_list|(
literal|true
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|storageDir
argument_list|)
expr_stmt|;
comment|// enable pipeline check
name|config
operator|.
name|setBoolean
argument_list|(
name|HddsConfigKeys
operator|.
name|HDDS_SCM_CHILLMODE_PIPELINE_AVAILABILITY_CHECK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PipelineManager
name|pipelineManager
init|=
operator|new
name|SCMPipelineManager
argument_list|(
name|config
argument_list|,
name|nodeManager
argument_list|,
name|eventQueue
argument_list|)
decl_stmt|;
comment|// Create 3 pipelines
name|Pipeline
name|pipeline1
init|=
name|pipelineManager
operator|.
name|createPipeline
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline2
init|=
name|pipelineManager
operator|.
name|createPipeline
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline3
init|=
name|pipelineManager
operator|.
name|createPipeline
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
decl_stmt|;
name|SCMChillModeManager
name|scmChillModeManager
init|=
operator|new
name|SCMChillModeManager
argument_list|(
name|config
argument_list|,
name|containers
argument_list|,
name|pipelineManager
argument_list|,
name|eventQueue
argument_list|)
decl_stmt|;
name|HealthyPipelineChillModeRule
name|healthyPipelineChillModeRule
init|=
name|scmChillModeManager
operator|.
name|getHealthyPipelineChillModeRule
argument_list|()
decl_stmt|;
comment|// No datanodes have sent pipelinereport from datanode
name|Assert
operator|.
name|assertFalse
argument_list|(
name|healthyPipelineChillModeRule
operator|.
name|validate
argument_list|()
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|LogCapturer
name|logCapturer
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SCMChillModeManager
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
comment|// fire event with pipeline report with ratis type and factor 1
comment|// pipeline, validate() should return false
name|firePipelineEvent
argument_list|(
name|pipeline1
argument_list|,
name|eventQueue
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"reported count is 0"
argument_list|)
argument_list|,
literal|1000
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|healthyPipelineChillModeRule
operator|.
name|validate
argument_list|()
argument_list|)
expr_stmt|;
name|firePipelineEvent
argument_list|(
name|pipeline2
argument_list|,
name|eventQueue
argument_list|)
expr_stmt|;
name|firePipelineEvent
argument_list|(
name|pipeline3
argument_list|,
name|eventQueue
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|healthyPipelineChillModeRule
operator|.
name|validate
argument_list|()
argument_list|,
literal|1000
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|storageDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|firePipelineEvent (Pipeline pipeline, EventQueue eventQueue)
specifier|private
name|void
name|firePipelineEvent
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|EventQueue
name|eventQueue
parameter_list|)
block|{
name|PipelineReportsProto
operator|.
name|Builder
name|reportBuilder
init|=
name|PipelineReportsProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|reportBuilder
operator|.
name|addPipelineReport
argument_list|(
name|PipelineReport
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPipelineID
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
operator|.
name|getProtobuf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Here no need to fire event from 3 nodes, as already pipeline is in
comment|// open state, but doing it.
name|eventQueue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|PROCESSED_PIPELINE_REPORT
argument_list|,
operator|new
name|SCMDatanodeHeartbeatDispatcher
operator|.
name|PipelineReportFromDatanode
argument_list|(
name|pipeline
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|reportBuilder
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

