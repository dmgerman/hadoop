begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.ââSee the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.ââThe ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.ââYou may obtain a copy of the License at  *  * ââââ http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ScmBlockLocationProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|ProtocolMessageMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|protocol
operator|.
name|ScmBlockLocationProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * Test class for @{@link SCMBlockProtocolServer}.  */
end_comment

begin_class
DECL|class|TestSCMBlockProtocolServer
specifier|public
class|class
name|TestSCMBlockProtocolServer
block|{
DECL|field|config
specifier|private
name|OzoneConfiguration
name|config
decl_stmt|;
DECL|field|server
specifier|private
name|SCMBlockProtocolServer
name|server
decl_stmt|;
DECL|field|scm
specifier|private
name|StorageContainerManager
name|scm
decl_stmt|;
DECL|field|nodeManager
specifier|private
name|NodeManager
name|nodeManager
decl_stmt|;
DECL|field|service
specifier|private
name|ScmBlockLocationProtocolServerSideTranslatorPB
name|service
decl_stmt|;
DECL|field|nodeCount
specifier|private
specifier|final
name|int
name|nodeCount
init|=
literal|10
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|config
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|File
name|dir
init|=
name|GenericTestUtils
operator|.
name|getRandomizedTestDir
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SCMConfigurator
name|configurator
init|=
operator|new
name|SCMConfigurator
argument_list|()
decl_stmt|;
name|scm
operator|=
name|TestUtils
operator|.
name|getScm
argument_list|(
name|config
argument_list|,
name|configurator
argument_list|)
expr_stmt|;
name|scm
operator|.
name|start
argument_list|()
expr_stmt|;
name|scm
operator|.
name|exitSafeMode
argument_list|()
expr_stmt|;
comment|// add nodes to scm node manager
name|nodeManager
operator|=
name|scm
operator|.
name|getScmNodeManager
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeCount
condition|;
name|i
operator|++
control|)
block|{
name|nodeManager
operator|.
name|register
argument_list|(
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|server
operator|=
name|scm
operator|.
name|getBlockProtocolServer
argument_list|()
expr_stmt|;
name|service
operator|=
operator|new
name|ScmBlockLocationProtocolServerSideTranslatorPB
argument_list|(
name|server
argument_list|,
name|Mockito
operator|.
name|mock
argument_list|(
name|ProtocolMessageMetrics
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|scm
operator|!=
literal|null
condition|)
block|{
name|scm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|scm
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSortDatanodes ()
specifier|public
name|void
name|testSortDatanodes
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|nodeManager
operator|.
name|getAllNodes
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|node
lambda|->
name|nodes
operator|.
name|add
argument_list|(
name|node
operator|.
name|getNetworkName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// sort normal datanodes
name|String
name|client
decl_stmt|;
name|client
operator|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodeDetails
init|=
name|server
operator|.
name|sortDatanodes
argument_list|(
name|nodes
argument_list|,
name|client
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"client = "
operator|+
name|client
argument_list|)
expr_stmt|;
name|datanodeDetails
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|node
lambda|->
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|datanodeDetails
operator|.
name|size
argument_list|()
operator|==
name|nodeCount
argument_list|)
expr_stmt|;
comment|// illegal client 1
name|client
operator|+=
literal|"X"
expr_stmt|;
name|datanodeDetails
operator|=
name|server
operator|.
name|sortDatanodes
argument_list|(
name|nodes
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"client = "
operator|+
name|client
argument_list|)
expr_stmt|;
name|datanodeDetails
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|node
lambda|->
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|datanodeDetails
operator|.
name|size
argument_list|()
operator|==
name|nodeCount
argument_list|)
expr_stmt|;
comment|// illegal client 2
name|client
operator|=
literal|"/default-rack"
expr_stmt|;
name|datanodeDetails
operator|=
name|server
operator|.
name|sortDatanodes
argument_list|(
name|nodes
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"client = "
operator|+
name|client
argument_list|)
expr_stmt|;
name|datanodeDetails
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|node
lambda|->
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|datanodeDetails
operator|.
name|size
argument_list|()
operator|==
name|nodeCount
argument_list|)
expr_stmt|;
comment|// unknown node to sort
name|nodes
operator|.
name|add
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ScmBlockLocationProtocolProtos
operator|.
name|SortDatanodesRequestProto
name|request
init|=
name|ScmBlockLocationProtocolProtos
operator|.
name|SortDatanodesRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllNodeNetworkName
argument_list|(
name|nodes
argument_list|)
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ScmBlockLocationProtocolProtos
operator|.
name|SortDatanodesResponseProto
name|resp
init|=
name|service
operator|.
name|sortDatanodes
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resp
operator|.
name|getNodeList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|nodeCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"client = "
operator|+
name|client
argument_list|)
expr_stmt|;
name|resp
operator|.
name|getNodeList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|node
lambda|->
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|node
operator|.
name|getNetworkName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// all unknown nodes
name|nodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|=
name|ScmBlockLocationProtocolProtos
operator|.
name|SortDatanodesRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllNodeNetworkName
argument_list|(
name|nodes
argument_list|)
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|resp
operator|=
name|service
operator|.
name|sortDatanodes
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"client = "
operator|+
name|client
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resp
operator|.
name|getNodeList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|resp
operator|.
name|getNodeList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|node
lambda|->
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|node
operator|.
name|getNetworkName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

