begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|LifeCycleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReplicaProto
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ReplicationManager
operator|.
name|ReplicationManagerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
operator|.
name|ContainerPlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lock
operator|.
name|LockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|CommandForDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
operator|.
name|createDatanodeDetails
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
operator|.
name|getContainer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
operator|.
name|getReplicas
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
operator|.
name|randomDatanodeDetails
import|;
end_import

begin_comment
comment|/**  * Test cases to verify the functionality of ReplicationManager.  */
end_comment

begin_class
DECL|class|TestReplicationManager
specifier|public
class|class
name|TestReplicationManager
block|{
DECL|field|replicationManager
specifier|private
name|ReplicationManager
name|replicationManager
decl_stmt|;
DECL|field|containerStateManager
specifier|private
name|ContainerStateManager
name|containerStateManager
decl_stmt|;
DECL|field|containerPlacementPolicy
specifier|private
name|ContainerPlacementPolicy
name|containerPlacementPolicy
decl_stmt|;
DECL|field|eventQueue
specifier|private
name|EventQueue
name|eventQueue
decl_stmt|;
DECL|field|datanodeCommandHandler
specifier|private
name|DatanodeCommandHandler
name|datanodeCommandHandler
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|ContainerManager
name|containerManager
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ContainerManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|eventQueue
operator|=
operator|new
name|EventQueue
argument_list|()
expr_stmt|;
name|containerStateManager
operator|=
operator|new
name|ContainerStateManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|datanodeCommandHandler
operator|=
operator|new
name|DatanodeCommandHandler
argument_list|()
expr_stmt|;
name|eventQueue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|DATANODE_COMMAND
argument_list|,
name|datanodeCommandHandler
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|containerManager
operator|.
name|getContainerIDs
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
name|containerStateManager
operator|.
name|getAllContainerIDs
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|containerManager
operator|.
name|getContainer
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|ContainerID
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
name|containerStateManager
operator|.
name|getContainer
argument_list|(
operator|(
name|ContainerID
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|containerManager
operator|.
name|getContainerReplicas
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|ContainerID
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
name|containerStateManager
operator|.
name|getContainerReplicas
argument_list|(
operator|(
name|ContainerID
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|containerPlacementPolicy
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ContainerPlacementPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|containerPlacementPolicy
operator|.
name|chooseDatanodes
argument_list|(
name|Mockito
operator|.
name|anyListOf
argument_list|(
name|DatanodeDetails
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|int
name|count
init|=
operator|(
name|int
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
return|return
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|i
lambda|->
name|randomDatanodeDetails
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|replicationManager
operator|=
operator|new
name|ReplicationManager
argument_list|(
operator|new
name|ReplicationManagerConfiguration
argument_list|()
argument_list|,
name|containerManager
argument_list|,
name|containerPlacementPolicy
argument_list|,
name|eventQueue
argument_list|,
operator|new
name|LockManager
argument_list|<>
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|replicationManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
block|}
comment|/**    * Open containers are not handled by ReplicationManager.    * This test-case makes sure that ReplicationManages doesn't take    * any action on OPEN containers.    */
annotation|@
name|Test
DECL|method|testOpenContainer ()
specifier|public
name|void
name|testOpenContainer
parameter_list|()
throws|throws
name|SCMException
throws|,
name|InterruptedException
block|{
specifier|final
name|ContainerInfo
name|container
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|OPEN
argument_list|)
decl_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|replicationManager
operator|.
name|processContainersNow
argument_list|()
expr_stmt|;
comment|// Wait for EventQueue to call the event handler
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|datanodeCommandHandler
operator|.
name|getInvocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * If the container is in CLOSING state we resend close container command    * to all the datanodes.    */
annotation|@
name|Test
DECL|method|testClosingContainer ()
specifier|public
name|void
name|testClosingContainer
parameter_list|()
throws|throws
name|SCMException
throws|,
name|ContainerNotFoundException
throws|,
name|InterruptedException
block|{
specifier|final
name|ContainerInfo
name|container
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|CLOSING
argument_list|)
decl_stmt|;
specifier|final
name|ContainerID
name|id
init|=
name|container
operator|.
name|containerID
argument_list|()
decl_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
comment|// Two replicas in CLOSING state
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|replicas
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|CLOSING
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
comment|// One replica in OPEN state
specifier|final
name|DatanodeDetails
name|datanode
init|=
name|randomDatanodeDetails
argument_list|()
decl_stmt|;
name|replicas
operator|.
name|addAll
argument_list|(
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|OPEN
argument_list|,
name|datanode
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerReplica
name|replica
range|:
name|replicas
control|)
block|{
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replica
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|currentCloseCommandCount
init|=
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|closeContainerCommand
argument_list|)
decl_stmt|;
name|replicationManager
operator|.
name|processContainersNow
argument_list|()
expr_stmt|;
comment|// Wait for EventQueue to call the event handler
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentCloseCommandCount
operator|+
literal|3
argument_list|,
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|closeContainerCommand
argument_list|)
argument_list|)
expr_stmt|;
comment|// Update the OPEN to CLOSING
for|for
control|(
name|ContainerReplica
name|replica
range|:
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|CLOSING
argument_list|,
name|datanode
argument_list|)
control|)
block|{
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replica
argument_list|)
expr_stmt|;
block|}
name|replicationManager
operator|.
name|processContainersNow
argument_list|()
expr_stmt|;
comment|// Wait for EventQueue to call the event handler
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentCloseCommandCount
operator|+
literal|6
argument_list|,
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|closeContainerCommand
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * The container is QUASI_CLOSED but two of the replica is still in    * open state. ReplicationManager should resend close command to those    * datanodes.    */
annotation|@
name|Test
DECL|method|testQuasiClosedContainerWithTwoOpenReplica ()
specifier|public
name|void
name|testQuasiClosedContainerWithTwoOpenReplica
parameter_list|()
throws|throws
name|SCMException
throws|,
name|ContainerNotFoundException
throws|,
name|InterruptedException
block|{
specifier|final
name|ContainerInfo
name|container
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|QUASI_CLOSED
argument_list|)
decl_stmt|;
specifier|final
name|ContainerID
name|id
init|=
name|container
operator|.
name|containerID
argument_list|()
decl_stmt|;
specifier|final
name|UUID
name|originNodeId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaOne
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaTwo
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|OPEN
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|DatanodeDetails
name|datanodeDetails
init|=
name|randomDatanodeDetails
argument_list|()
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaThree
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|OPEN
argument_list|,
literal|1000L
argument_list|,
name|datanodeDetails
operator|.
name|getUuid
argument_list|()
argument_list|,
name|datanodeDetails
argument_list|)
decl_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaOne
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaTwo
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaThree
argument_list|)
expr_stmt|;
specifier|final
name|int
name|currentCloseCommandCount
init|=
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|closeContainerCommand
argument_list|)
decl_stmt|;
comment|// Two of the replicas are in OPEN state
name|replicationManager
operator|.
name|processContainersNow
argument_list|()
expr_stmt|;
comment|// Wait for EventQueue to call the event handler
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentCloseCommandCount
operator|+
literal|2
argument_list|,
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|closeContainerCommand
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|datanodeCommandHandler
operator|.
name|received
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|closeContainerCommand
argument_list|,
name|replicaTwo
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|datanodeCommandHandler
operator|.
name|received
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|closeContainerCommand
argument_list|,
name|replicaThree
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * When the container is in QUASI_CLOSED state and all the replicas are    * also in QUASI_CLOSED state and doesn't have a quorum to force close    * the container, ReplicationManager will not do anything.    */
annotation|@
name|Test
DECL|method|testHealthyQuasiClosedContainer ()
specifier|public
name|void
name|testHealthyQuasiClosedContainer
parameter_list|()
throws|throws
name|SCMException
throws|,
name|ContainerNotFoundException
throws|,
name|InterruptedException
block|{
specifier|final
name|ContainerInfo
name|container
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|QUASI_CLOSED
argument_list|)
decl_stmt|;
specifier|final
name|ContainerID
name|id
init|=
name|container
operator|.
name|containerID
argument_list|()
decl_stmt|;
specifier|final
name|UUID
name|originNodeId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaOne
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaTwo
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaThree
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaOne
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaTwo
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaThree
argument_list|)
expr_stmt|;
comment|// All the QUASI_CLOSED replicas have same originNodeId, so the
comment|// container will not be closed. ReplicationManager should take no action.
name|replicationManager
operator|.
name|processContainersNow
argument_list|()
expr_stmt|;
comment|// Wait for EventQueue to call the event handler
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|datanodeCommandHandler
operator|.
name|getInvocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * When a container is QUASI_CLOSED and we don't have quorum to force close    * the container, the container should have all the replicas in QUASI_CLOSED    * state, else ReplicationManager will take action.    *    * In this test case we make one of the replica unhealthy, replication manager    * will send delete container command to the datanode which has the unhealthy    * replica.    */
annotation|@
name|Test
DECL|method|testQuasiClosedContainerWithUnhealthyReplica ()
specifier|public
name|void
name|testQuasiClosedContainerWithUnhealthyReplica
parameter_list|()
throws|throws
name|SCMException
throws|,
name|ContainerNotFoundException
throws|,
name|InterruptedException
throws|,
name|ContainerReplicaNotFoundException
block|{
specifier|final
name|ContainerInfo
name|container
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|QUASI_CLOSED
argument_list|)
decl_stmt|;
specifier|final
name|ContainerID
name|id
init|=
name|container
operator|.
name|containerID
argument_list|()
decl_stmt|;
specifier|final
name|UUID
name|originNodeId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaOne
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaTwo
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaThree
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaOne
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaTwo
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaThree
argument_list|)
expr_stmt|;
specifier|final
name|int
name|currentDeleteCommandCount
init|=
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|deleteContainerCommand
argument_list|)
decl_stmt|;
specifier|final
name|int
name|currentReplicateCommandCount
init|=
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|replicateContainerCommand
argument_list|)
decl_stmt|;
comment|// All the QUASI_CLOSED replicas have same originNodeId, so the
comment|// container will not be closed. ReplicationManager should take no action.
name|replicationManager
operator|.
name|processContainersNow
argument_list|()
expr_stmt|;
comment|// Wait for EventQueue to call the event handler
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|datanodeCommandHandler
operator|.
name|getInvocation
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make the first replica unhealthy
specifier|final
name|ContainerReplica
name|unhealthyReplica
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|UNHEALTHY
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|replicaOne
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|unhealthyReplica
argument_list|)
expr_stmt|;
name|replicationManager
operator|.
name|processContainersNow
argument_list|()
expr_stmt|;
comment|// Wait for EventQueue to call the event handler
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentDeleteCommandCount
operator|+
literal|1
argument_list|,
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|deleteContainerCommand
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|datanodeCommandHandler
operator|.
name|received
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|deleteContainerCommand
argument_list|,
name|replicaOne
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now we will delete the unhealthy replica from in-memory.
name|containerStateManager
operator|.
name|removeContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaOne
argument_list|)
expr_stmt|;
comment|// The container is under replicated as unhealthy replica is removed
name|replicationManager
operator|.
name|processContainersNow
argument_list|()
expr_stmt|;
comment|// Wait for EventQueue to call the event handler
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
comment|// We should get replicate command
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentReplicateCommandCount
operator|+
literal|1
argument_list|,
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|replicateContainerCommand
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * When a QUASI_CLOSED container is over replicated, ReplicationManager    * deletes the excess replicas.    */
annotation|@
name|Test
DECL|method|testOverReplicatedQuasiClosedContainer ()
specifier|public
name|void
name|testOverReplicatedQuasiClosedContainer
parameter_list|()
throws|throws
name|SCMException
throws|,
name|ContainerNotFoundException
throws|,
name|InterruptedException
block|{
specifier|final
name|ContainerInfo
name|container
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|QUASI_CLOSED
argument_list|)
decl_stmt|;
specifier|final
name|ContainerID
name|id
init|=
name|container
operator|.
name|containerID
argument_list|()
decl_stmt|;
specifier|final
name|UUID
name|originNodeId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaOne
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaTwo
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaThree
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaFour
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaOne
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaTwo
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaThree
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaFour
argument_list|)
expr_stmt|;
specifier|final
name|int
name|currentDeleteCommandCount
init|=
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|deleteContainerCommand
argument_list|)
decl_stmt|;
name|replicationManager
operator|.
name|processContainersNow
argument_list|()
expr_stmt|;
comment|// Wait for EventQueue to call the event handler
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentDeleteCommandCount
operator|+
literal|1
argument_list|,
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|deleteContainerCommand
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * When a QUASI_CLOSED container is over replicated, ReplicationManager    * deletes the excess replicas. While choosing the replica for deletion    * ReplicationManager should prioritize unhealthy replica over QUASI_CLOSED    * replica.    */
annotation|@
name|Test
DECL|method|testOverReplicatedQuasiClosedContainerWithUnhealthyReplica ()
specifier|public
name|void
name|testOverReplicatedQuasiClosedContainerWithUnhealthyReplica
parameter_list|()
throws|throws
name|SCMException
throws|,
name|ContainerNotFoundException
throws|,
name|InterruptedException
block|{
specifier|final
name|ContainerInfo
name|container
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|QUASI_CLOSED
argument_list|)
decl_stmt|;
specifier|final
name|ContainerID
name|id
init|=
name|container
operator|.
name|containerID
argument_list|()
decl_stmt|;
specifier|final
name|UUID
name|originNodeId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaOne
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|UNHEALTHY
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaTwo
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaThree
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaFour
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaOne
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaTwo
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaThree
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaFour
argument_list|)
expr_stmt|;
specifier|final
name|int
name|currentDeleteCommandCount
init|=
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|deleteContainerCommand
argument_list|)
decl_stmt|;
name|replicationManager
operator|.
name|processContainersNow
argument_list|()
expr_stmt|;
comment|// Wait for EventQueue to call the event handler
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentDeleteCommandCount
operator|+
literal|1
argument_list|,
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|deleteContainerCommand
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|datanodeCommandHandler
operator|.
name|received
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|deleteContainerCommand
argument_list|,
name|replicaOne
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * ReplicationManager should replicate an QUASI_CLOSED replica if it is    * under replicated.    */
annotation|@
name|Test
DECL|method|testUnderReplicatedQuasiClosedContainer ()
specifier|public
name|void
name|testUnderReplicatedQuasiClosedContainer
parameter_list|()
throws|throws
name|SCMException
throws|,
name|ContainerNotFoundException
throws|,
name|InterruptedException
block|{
specifier|final
name|ContainerInfo
name|container
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|QUASI_CLOSED
argument_list|)
decl_stmt|;
specifier|final
name|ContainerID
name|id
init|=
name|container
operator|.
name|containerID
argument_list|()
decl_stmt|;
specifier|final
name|UUID
name|originNodeId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaOne
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaTwo
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaOne
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaTwo
argument_list|)
expr_stmt|;
specifier|final
name|int
name|currentReplicateCommandCount
init|=
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|replicateContainerCommand
argument_list|)
decl_stmt|;
name|replicationManager
operator|.
name|processContainersNow
argument_list|()
expr_stmt|;
comment|// Wait for EventQueue to call the event handler
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentReplicateCommandCount
operator|+
literal|1
argument_list|,
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|replicateContainerCommand
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * When a QUASI_CLOSED container is under replicated, ReplicationManager    * should re-replicate it. If there are any unhealthy replica, it has to    * be deleted.    *    * In this test case, the container is QUASI_CLOSED and is under replicated    * and also has an unhealthy replica.    *    * In the first iteration of ReplicationManager, it should re-replicate    * the container so that it has enough replicas.    *    * In the second iteration, ReplicationManager should delete the unhealthy    * replica.    *    * In the third iteration, ReplicationManager will re-replicate as the    * container has again become under replicated after the unhealthy    * replica has been deleted.    *    */
annotation|@
name|Test
DECL|method|testUnderReplicatedQuasiClosedContainerWithUnhealthyReplica ()
specifier|public
name|void
name|testUnderReplicatedQuasiClosedContainerWithUnhealthyReplica
parameter_list|()
throws|throws
name|SCMException
throws|,
name|ContainerNotFoundException
throws|,
name|InterruptedException
throws|,
name|ContainerReplicaNotFoundException
block|{
specifier|final
name|ContainerInfo
name|container
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|QUASI_CLOSED
argument_list|)
decl_stmt|;
specifier|final
name|ContainerID
name|id
init|=
name|container
operator|.
name|containerID
argument_list|()
decl_stmt|;
specifier|final
name|UUID
name|originNodeId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaOne
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerReplica
name|replicaTwo
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|UNHEALTHY
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaOne
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaTwo
argument_list|)
expr_stmt|;
specifier|final
name|int
name|currentReplicateCommandCount
init|=
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|replicateContainerCommand
argument_list|)
decl_stmt|;
specifier|final
name|int
name|currentDeleteCommandCount
init|=
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|deleteContainerCommand
argument_list|)
decl_stmt|;
name|replicationManager
operator|.
name|processContainersNow
argument_list|()
expr_stmt|;
comment|// Wait for EventQueue to call the event handler
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentReplicateCommandCount
operator|+
literal|1
argument_list|,
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|replicateContainerCommand
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|CommandForDatanode
argument_list|>
name|replicateCommand
init|=
name|datanodeCommandHandler
operator|.
name|getReceivedCommands
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|c
lambda|->
name|c
operator|.
name|getCommand
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|replicateContainerCommand
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|replicateCommand
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|DatanodeDetails
name|newNode
init|=
name|createDatanodeDetails
argument_list|(
name|replicateCommand
operator|.
name|get
argument_list|()
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerReplica
name|newReplica
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|1000L
argument_list|,
name|originNodeId
argument_list|,
name|newNode
argument_list|)
decl_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|newReplica
argument_list|)
expr_stmt|;
comment|/*      * We have report the replica to SCM, in the next ReplicationManager      * iteration it should delete the unhealthy replica.      */
name|replicationManager
operator|.
name|processContainersNow
argument_list|()
expr_stmt|;
comment|// Wait for EventQueue to call the event handler
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentDeleteCommandCount
operator|+
literal|1
argument_list|,
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|deleteContainerCommand
argument_list|)
argument_list|)
expr_stmt|;
comment|// ReplicaTwo should be deleted, that is the unhealthy one
name|Assert
operator|.
name|assertTrue
argument_list|(
name|datanodeCommandHandler
operator|.
name|received
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|deleteContainerCommand
argument_list|,
name|replicaTwo
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|removeContainerReplica
argument_list|(
name|id
argument_list|,
name|replicaTwo
argument_list|)
expr_stmt|;
comment|/*      * We have now removed unhealthy replica, next iteration of      * ReplicationManager should re-replicate the container as it      * is under replicated now      */
name|replicationManager
operator|.
name|processContainersNow
argument_list|()
expr_stmt|;
comment|// Wait for EventQueue to call the event handler
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentReplicateCommandCount
operator|+
literal|2
argument_list|,
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|replicateContainerCommand
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * When a container is QUASI_CLOSED and it has>50% of its replica    * in QUASI_CLOSED state with unique origin node id,    * ReplicationManager should force close the replica(s) with    * highest BCSID.    */
annotation|@
name|Test
DECL|method|testQuasiClosedToClosed ()
specifier|public
name|void
name|testQuasiClosedToClosed
parameter_list|()
throws|throws
name|SCMException
throws|,
name|ContainerNotFoundException
throws|,
name|InterruptedException
block|{
specifier|final
name|ContainerInfo
name|container
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|QUASI_CLOSED
argument_list|)
decl_stmt|;
specifier|final
name|ContainerID
name|id
init|=
name|container
operator|.
name|containerID
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|replicas
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerReplica
name|replica
range|:
name|replicas
control|)
block|{
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replica
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|currentCloseCommandCount
init|=
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|closeContainerCommand
argument_list|)
decl_stmt|;
name|replicationManager
operator|.
name|processContainersNow
argument_list|()
expr_stmt|;
comment|// Wait for EventQueue to call the event handler
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
comment|// All the replicas have same BCSID, so all of them will be closed.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentCloseCommandCount
operator|+
literal|3
argument_list|,
name|datanodeCommandHandler
operator|.
name|getInvocationCount
argument_list|(
name|SCMCommandProto
operator|.
name|Type
operator|.
name|closeContainerCommand
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * ReplicationManager should not take any action if the container is    * CLOSED and healthy.    */
annotation|@
name|Test
DECL|method|testHealthyClosedContainer ()
specifier|public
name|void
name|testHealthyClosedContainer
parameter_list|()
throws|throws
name|SCMException
throws|,
name|ContainerNotFoundException
throws|,
name|InterruptedException
block|{
specifier|final
name|ContainerInfo
name|container
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|CLOSED
argument_list|)
decl_stmt|;
specifier|final
name|ContainerID
name|id
init|=
name|container
operator|.
name|containerID
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|replicas
init|=
name|getReplicas
argument_list|(
name|id
argument_list|,
name|State
operator|.
name|CLOSED
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|,
name|randomDatanodeDetails
argument_list|()
argument_list|)
decl_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerReplica
name|replica
range|:
name|replicas
control|)
block|{
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|id
argument_list|,
name|replica
argument_list|)
expr_stmt|;
block|}
name|replicationManager
operator|.
name|processContainersNow
argument_list|()
expr_stmt|;
comment|// Wait for EventQueue to call the event handler
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|datanodeCommandHandler
operator|.
name|getInvocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeneratedConfig ()
specifier|public
name|void
name|testGeneratedConfig
parameter_list|()
block|{
name|OzoneConfiguration
name|ozoneConfiguration
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|ReplicationManagerConfiguration
name|rmc
init|=
name|ozoneConfiguration
operator|.
name|getObject
argument_list|(
name|ReplicationManagerConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//default is not included in ozone-site.xml but generated from annotation
comment|//to the ozone-site-generated.xml which should be loaded by the
comment|// OzoneConfiguration.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|600000
argument_list|,
name|rmc
operator|.
name|getEventTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
name|containerStateManager
operator|.
name|close
argument_list|()
expr_stmt|;
name|replicationManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|class|DatanodeCommandHandler
specifier|private
class|class
name|DatanodeCommandHandler
implements|implements
name|EventHandler
argument_list|<
name|CommandForDatanode
argument_list|>
block|{
DECL|field|invocation
specifier|private
name|AtomicInteger
name|invocation
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|commandInvocation
specifier|private
name|Map
argument_list|<
name|SCMCommandProto
operator|.
name|Type
argument_list|,
name|AtomicInteger
argument_list|>
name|commandInvocation
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|commands
specifier|private
name|List
argument_list|<
name|CommandForDatanode
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|onMessage (final CommandForDatanode command, final EventPublisher publisher)
specifier|public
name|void
name|onMessage
parameter_list|(
specifier|final
name|CommandForDatanode
name|command
parameter_list|,
specifier|final
name|EventPublisher
name|publisher
parameter_list|)
block|{
specifier|final
name|SCMCommandProto
operator|.
name|Type
name|type
init|=
name|command
operator|.
name|getCommand
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
name|commandInvocation
operator|.
name|computeIfAbsent
argument_list|(
name|type
argument_list|,
name|k
lambda|->
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|commandInvocation
operator|.
name|get
argument_list|(
name|type
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|invocation
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|commands
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
DECL|method|getInvocation ()
specifier|private
name|int
name|getInvocation
parameter_list|()
block|{
return|return
name|invocation
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getInvocationCount (SCMCommandProto.Type type)
specifier|private
name|int
name|getInvocationCount
parameter_list|(
name|SCMCommandProto
operator|.
name|Type
name|type
parameter_list|)
block|{
return|return
name|commandInvocation
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|?
name|commandInvocation
operator|.
name|get
argument_list|(
name|type
argument_list|)
operator|.
name|get
argument_list|()
else|:
literal|0
return|;
block|}
DECL|method|getReceivedCommands ()
specifier|private
name|List
argument_list|<
name|CommandForDatanode
argument_list|>
name|getReceivedCommands
parameter_list|()
block|{
return|return
name|commands
return|;
block|}
comment|/**      * Returns true if the command handler has received the given      * command type for the provided datanode.      *      * @param type Command Type      * @param datanode DatanodeDetails      * @return True if command was received, false otherwise      */
DECL|method|received (final SCMCommandProto.Type type, final DatanodeDetails datanode)
specifier|private
name|boolean
name|received
parameter_list|(
specifier|final
name|SCMCommandProto
operator|.
name|Type
name|type
parameter_list|,
specifier|final
name|DatanodeDetails
name|datanode
parameter_list|)
block|{
return|return
name|commands
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|dc
lambda|->
name|dc
operator|.
name|getCommand
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|&&
name|dc
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|datanode
operator|.
name|getUuid
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

