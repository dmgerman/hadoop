begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class is used to test the StorageContainerManagerStarter using a mock  * class to avoid starting any services and hence just test the CLI component.  */
end_comment

begin_class
DECL|class|TestStorageContainerManagerStarter
specifier|public
class|class
name|TestStorageContainerManagerStarter
block|{
DECL|field|outContent
specifier|private
specifier|final
name|ByteArrayOutputStream
name|outContent
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|errContent
specifier|private
specifier|final
name|ByteArrayOutputStream
name|errContent
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|originalOut
specifier|private
specifier|final
name|PrintStream
name|originalOut
init|=
name|System
operator|.
name|out
decl_stmt|;
DECL|field|originalErr
specifier|private
specifier|final
name|PrintStream
name|originalErr
init|=
name|System
operator|.
name|err
decl_stmt|;
DECL|field|mock
specifier|private
name|MockSCMStarter
name|mock
decl_stmt|;
annotation|@
name|Before
DECL|method|setUpStreams ()
specifier|public
name|void
name|setUpStreams
parameter_list|()
block|{
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|outContent
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|errContent
argument_list|)
argument_list|)
expr_stmt|;
name|mock
operator|=
operator|new
name|MockSCMStarter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|restoreStreams ()
specifier|public
name|void
name|restoreStreams
parameter_list|()
block|{
name|System
operator|.
name|setOut
argument_list|(
name|originalOut
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|originalErr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCallsStartWhenServerStarted ()
specifier|public
name|void
name|testCallsStartWhenServerStarted
parameter_list|()
throws|throws
name|Exception
block|{
name|executeCommand
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|mock
operator|.
name|startCalled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionThrownWhenStartFails ()
specifier|public
name|void
name|testExceptionThrownWhenStartFails
parameter_list|()
throws|throws
name|Exception
block|{
name|mock
operator|.
name|throwOnStart
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|executeCommand
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception show have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testStartNotCalledWithInvalidParam ()
specifier|public
name|void
name|testStartNotCalledWithInvalidParam
parameter_list|()
throws|throws
name|Exception
block|{
name|executeCommand
argument_list|(
literal|"--invalid"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mock
operator|.
name|startCalled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPassingInitSwitchCallsInit ()
specifier|public
name|void
name|testPassingInitSwitchCallsInit
parameter_list|()
block|{
name|executeCommand
argument_list|(
literal|"--init"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mock
operator|.
name|initCalled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitSwitchAcceptsClusterIdSSwitch ()
specifier|public
name|void
name|testInitSwitchAcceptsClusterIdSSwitch
parameter_list|()
block|{
name|executeCommand
argument_list|(
literal|"--init"
argument_list|,
literal|"--clusterid=abcdefg"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcdefg"
argument_list|,
name|mock
operator|.
name|clusterId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitSwitchWithInvalidParamDoesNotRun ()
specifier|public
name|void
name|testInitSwitchWithInvalidParamDoesNotRun
parameter_list|()
block|{
name|executeCommand
argument_list|(
literal|"--init"
argument_list|,
literal|"--clusterid=abcdefg"
argument_list|,
literal|"--invalid"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mock
operator|.
name|initCalled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnSuccessfulInitThrowsException ()
specifier|public
name|void
name|testUnSuccessfulInitThrowsException
parameter_list|()
block|{
name|mock
operator|.
name|throwOnInit
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|executeCommand
argument_list|(
literal|"--init"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception show have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGenClusterIdRunsGenerate ()
specifier|public
name|void
name|testGenClusterIdRunsGenerate
parameter_list|()
block|{
name|executeCommand
argument_list|(
literal|"--genclusterid"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mock
operator|.
name|generateCalled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenClusterIdWithInvalidParamDoesNotRun ()
specifier|public
name|void
name|testGenClusterIdWithInvalidParamDoesNotRun
parameter_list|()
block|{
name|executeCommand
argument_list|(
literal|"--genclusterid"
argument_list|,
literal|"--invalid"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mock
operator|.
name|generateCalled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUsagePrintedOnInvalidInput ()
specifier|public
name|void
name|testUsagePrintedOnInvalidInput
parameter_list|()
block|{
name|executeCommand
argument_list|(
literal|"--invalid"
argument_list|)
expr_stmt|;
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Unknown option:.*--invalid.*\nUsage"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|errContent
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|m
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|executeCommand (String... args)
specifier|private
name|void
name|executeCommand
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
operator|new
name|StorageContainerManagerStarter
argument_list|(
name|mock
argument_list|)
operator|.
name|execute
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
DECL|class|MockSCMStarter
specifier|static
class|class
name|MockSCMStarter
implements|implements
name|SCMStarterInterface
block|{
DECL|field|initStatus
specifier|private
name|boolean
name|initStatus
init|=
literal|true
decl_stmt|;
DECL|field|throwOnStart
specifier|private
name|boolean
name|throwOnStart
init|=
literal|false
decl_stmt|;
DECL|field|throwOnInit
specifier|private
name|boolean
name|throwOnInit
init|=
literal|false
decl_stmt|;
DECL|field|startCalled
specifier|private
name|boolean
name|startCalled
init|=
literal|false
decl_stmt|;
DECL|field|initCalled
specifier|private
name|boolean
name|initCalled
init|=
literal|false
decl_stmt|;
DECL|field|generateCalled
specifier|private
name|boolean
name|generateCalled
init|=
literal|false
decl_stmt|;
DECL|field|clusterId
specifier|private
name|String
name|clusterId
init|=
literal|null
decl_stmt|;
DECL|method|start (OzoneConfiguration conf)
specifier|public
name|void
name|start
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|throwOnStart
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Simulated error on start"
argument_list|)
throw|;
block|}
name|startCalled
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|init (OzoneConfiguration conf, String cid)
specifier|public
name|boolean
name|init
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|String
name|cid
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|throwOnInit
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Simulated error on init"
argument_list|)
throw|;
block|}
name|initCalled
operator|=
literal|true
expr_stmt|;
name|clusterId
operator|=
name|cid
expr_stmt|;
return|return
name|initStatus
return|;
block|}
DECL|method|generateClusterId ()
specifier|public
name|String
name|generateClusterId
parameter_list|()
block|{
name|generateCalled
operator|=
literal|true
expr_stmt|;
return|return
literal|"static-cluster-id"
return|;
block|}
block|}
block|}
end_class

end_unit

