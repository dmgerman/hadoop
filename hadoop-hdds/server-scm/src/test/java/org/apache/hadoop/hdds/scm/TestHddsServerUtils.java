begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|ServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_PORT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link HddsServerUtil}  */
end_comment

begin_class
DECL|class|TestHddsServerUtils
specifier|public
class|class
name|TestHddsServerUtils
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHddsServerUtils
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|timeout
specifier|public
name|Timeout
name|timeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300_000
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
comment|/**    * Test getting OZONE_SCM_DATANODE_ADDRESS_KEY with port.    */
annotation|@
name|Test
DECL|method|testGetDatanodeAddressWithPort ()
specifier|public
name|void
name|testGetDatanodeAddressWithPort
parameter_list|()
block|{
specifier|final
name|String
name|scmHost
init|=
literal|"host123:100"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_DATANODE_ADDRESS_KEY
argument_list|,
name|scmHost
argument_list|)
expr_stmt|;
specifier|final
name|InetSocketAddress
name|address
init|=
name|HddsServerUtil
operator|.
name|getScmAddressForDataNodes
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|address
operator|.
name|getHostName
argument_list|()
argument_list|,
name|scmHost
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|scmHost
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test getting OZONE_SCM_DATANODE_ADDRESS_KEY without port.    */
annotation|@
name|Test
DECL|method|testGetDatanodeAddressWithoutPort ()
specifier|public
name|void
name|testGetDatanodeAddressWithoutPort
parameter_list|()
block|{
specifier|final
name|String
name|scmHost
init|=
literal|"host123"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_DATANODE_ADDRESS_KEY
argument_list|,
name|scmHost
argument_list|)
expr_stmt|;
specifier|final
name|InetSocketAddress
name|address
init|=
name|HddsServerUtil
operator|.
name|getScmAddressForDataNodes
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|address
operator|.
name|getHostName
argument_list|()
argument_list|,
name|scmHost
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
name|OZONE_SCM_DATANODE_PORT_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**    * When OZONE_SCM_DATANODE_ADDRESS_KEY is undefined, test fallback to    * OZONE_SCM_CLIENT_ADDRESS_KEY.    */
annotation|@
name|Test
DECL|method|testDatanodeAddressFallbackToClientNoPort ()
specifier|public
name|void
name|testDatanodeAddressFallbackToClientNoPort
parameter_list|()
block|{
specifier|final
name|String
name|scmHost
init|=
literal|"host123"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|,
name|scmHost
argument_list|)
expr_stmt|;
specifier|final
name|InetSocketAddress
name|address
init|=
name|HddsServerUtil
operator|.
name|getScmAddressForDataNodes
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|address
operator|.
name|getHostName
argument_list|()
argument_list|,
name|scmHost
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
name|OZONE_SCM_DATANODE_PORT_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**    * When OZONE_SCM_DATANODE_ADDRESS_KEY is undefined, test fallback to    * OZONE_SCM_CLIENT_ADDRESS_KEY. Port number defined by    * OZONE_SCM_CLIENT_ADDRESS_KEY should be ignored.    */
annotation|@
name|Test
DECL|method|testDatanodeAddressFallbackToClientWithPort ()
specifier|public
name|void
name|testDatanodeAddressFallbackToClientWithPort
parameter_list|()
block|{
specifier|final
name|String
name|scmHost
init|=
literal|"host123:100"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|,
name|scmHost
argument_list|)
expr_stmt|;
specifier|final
name|InetSocketAddress
name|address
init|=
name|HddsServerUtil
operator|.
name|getScmAddressForDataNodes
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|address
operator|.
name|getHostName
argument_list|()
argument_list|,
name|scmHost
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
name|OZONE_SCM_DATANODE_PORT_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**    * When OZONE_SCM_DATANODE_ADDRESS_KEY and OZONE_SCM_CLIENT_ADDRESS_KEY    * are undefined, test fallback to OZONE_SCM_NAMES.    */
annotation|@
name|Test
DECL|method|testDatanodeAddressFallbackToScmNamesNoPort ()
specifier|public
name|void
name|testDatanodeAddressFallbackToScmNamesNoPort
parameter_list|()
block|{
specifier|final
name|String
name|scmHost
init|=
literal|"host123"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_NAMES
argument_list|,
name|scmHost
argument_list|)
expr_stmt|;
specifier|final
name|InetSocketAddress
name|address
init|=
name|HddsServerUtil
operator|.
name|getScmAddressForDataNodes
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|address
operator|.
name|getHostName
argument_list|()
argument_list|,
name|scmHost
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
name|OZONE_SCM_DATANODE_PORT_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**    * When OZONE_SCM_DATANODE_ADDRESS_KEY and OZONE_SCM_CLIENT_ADDRESS_KEY    * are undefined, test fallback to OZONE_SCM_NAMES. Port number    * defined by OZONE_SCM_NAMES should be ignored.    */
annotation|@
name|Test
DECL|method|testDatanodeAddressFallbackToScmNamesWithPort ()
specifier|public
name|void
name|testDatanodeAddressFallbackToScmNamesWithPort
parameter_list|()
block|{
specifier|final
name|String
name|scmHost
init|=
literal|"host123:100"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_NAMES
argument_list|,
name|scmHost
argument_list|)
expr_stmt|;
specifier|final
name|InetSocketAddress
name|address
init|=
name|HddsServerUtil
operator|.
name|getScmAddressForDataNodes
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|address
operator|.
name|getHostName
argument_list|()
argument_list|,
name|scmHost
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
name|OZONE_SCM_DATANODE_PORT_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**    * getScmAddressForDataNodes should fail when OZONE_SCM_NAMES has    * multiple addresses.    */
annotation|@
name|Test
DECL|method|testClientFailsWithMultipleScmNames ()
specifier|public
name|void
name|testClientFailsWithMultipleScmNames
parameter_list|()
block|{
specifier|final
name|String
name|scmHost
init|=
literal|"host123,host456"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_NAMES
argument_list|,
name|scmHost
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|HddsServerUtil
operator|.
name|getScmAddressForDataNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link ServerUtils#getScmDbDir}.    */
annotation|@
name|Test
DECL|method|testGetScmDbDir ()
specifier|public
name|void
name|testGetScmDbDir
parameter_list|()
block|{
specifier|final
name|File
name|testDir
init|=
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|TestHddsServerUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|File
name|dbDir
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"scmDbDir"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|metaDir
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"metaDir"
argument_list|)
decl_stmt|;
comment|// should be ignored.
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DB_DIRS
argument_list|,
name|dbDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|metaDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|dbDir
argument_list|,
name|ServerUtils
operator|.
name|getScmDbDir
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// should have been created.
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|dbDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test {@link ServerUtils#getScmDbDir} with fallback to OZONE_METADATA_DIRS    * when OZONE_SCM_DB_DIRS is undefined.    */
annotation|@
name|Test
DECL|method|testGetScmDbDirWithFallback ()
specifier|public
name|void
name|testGetScmDbDirWithFallback
parameter_list|()
block|{
specifier|final
name|File
name|testDir
init|=
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|TestHddsServerUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|File
name|metaDir
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"metaDir"
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|metaDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|metaDir
argument_list|,
name|ServerUtils
operator|.
name|getScmDbDir
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metaDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// should have been created.
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|metaDir
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNoScmDbDirConfigured ()
specifier|public
name|void
name|testNoScmDbDirConfigured
parameter_list|()
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|ServerUtils
operator|.
name|getScmDbDir
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

