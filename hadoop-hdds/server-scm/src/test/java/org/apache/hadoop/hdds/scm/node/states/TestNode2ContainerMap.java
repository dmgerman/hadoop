begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.node.states
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|states
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * Test classes for Node2ContainerMap.  */
end_comment

begin_class
DECL|class|TestNode2ContainerMap
specifier|public
class|class
name|TestNode2ContainerMap
block|{
DECL|field|DATANODE_COUNT
specifier|private
specifier|final
specifier|static
name|int
name|DATANODE_COUNT
init|=
literal|300
decl_stmt|;
DECL|field|CONTAINER_COUNT
specifier|private
specifier|final
specifier|static
name|int
name|CONTAINER_COUNT
init|=
literal|1000
decl_stmt|;
DECL|field|testData
specifier|private
specifier|final
name|Map
argument_list|<
name|UUID
argument_list|,
name|TreeSet
argument_list|<
name|ContainerID
argument_list|>
argument_list|>
name|testData
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|method|generateData ()
specifier|private
name|void
name|generateData
parameter_list|()
block|{
for|for
control|(
name|int
name|dnIndex
init|=
literal|1
init|;
name|dnIndex
operator|<=
name|DATANODE_COUNT
condition|;
name|dnIndex
operator|++
control|)
block|{
name|TreeSet
argument_list|<
name|ContainerID
argument_list|>
name|currentSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|cnIndex
init|=
literal|1
init|;
name|cnIndex
operator|<=
name|CONTAINER_COUNT
condition|;
name|cnIndex
operator|++
control|)
block|{
name|long
name|currentCnIndex
init|=
call|(
name|long
call|)
argument_list|(
name|dnIndex
operator|*
name|CONTAINER_COUNT
argument_list|)
operator|+
name|cnIndex
decl_stmt|;
name|currentSet
operator|.
name|add
argument_list|(
operator|new
name|ContainerID
argument_list|(
name|currentCnIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|testData
operator|.
name|put
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|,
name|currentSet
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFirstKey ()
specifier|private
name|UUID
name|getFirstKey
parameter_list|()
block|{
return|return
name|testData
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|generateData
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|Test
DECL|method|testIsKnownDatanode ()
specifier|public
name|void
name|testIsKnownDatanode
parameter_list|()
throws|throws
name|SCMException
block|{
name|Node2ContainerMap
name|map
init|=
operator|new
name|Node2ContainerMap
argument_list|()
decl_stmt|;
name|UUID
name|knownNode
init|=
name|getFirstKey
argument_list|()
decl_stmt|;
name|UUID
name|unknownNode
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|containerIDs
init|=
name|testData
operator|.
name|get
argument_list|(
name|knownNode
argument_list|)
decl_stmt|;
name|map
operator|.
name|insertNewDatanode
argument_list|(
name|knownNode
argument_list|,
name|containerIDs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Not able to detect a known node"
argument_list|,
name|map
operator|.
name|isKnownDatanode
argument_list|(
name|knownNode
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Unknown node detected"
argument_list|,
name|map
operator|.
name|isKnownDatanode
argument_list|(
name|unknownNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInsertNewDatanode ()
specifier|public
name|void
name|testInsertNewDatanode
parameter_list|()
throws|throws
name|SCMException
block|{
name|Node2ContainerMap
name|map
init|=
operator|new
name|Node2ContainerMap
argument_list|()
decl_stmt|;
name|UUID
name|knownNode
init|=
name|getFirstKey
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|containerIDs
init|=
name|testData
operator|.
name|get
argument_list|(
name|knownNode
argument_list|)
decl_stmt|;
name|map
operator|.
name|insertNewDatanode
argument_list|(
name|knownNode
argument_list|,
name|containerIDs
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|readSet
init|=
name|map
operator|.
name|getContainers
argument_list|(
name|knownNode
argument_list|)
decl_stmt|;
comment|// Assert that all elements are present in the set that we read back from
comment|// node map.
name|Set
name|newSet
init|=
operator|new
name|TreeSet
argument_list|(
operator|(
name|readSet
operator|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|newSet
operator|.
name|removeAll
argument_list|(
name|containerIDs
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|newSet
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|SCMException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"already exists"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insertNewDatanode
argument_list|(
name|knownNode
argument_list|,
name|containerIDs
argument_list|)
expr_stmt|;
name|map
operator|.
name|removeDatanode
argument_list|(
name|knownNode
argument_list|)
expr_stmt|;
name|map
operator|.
name|insertNewDatanode
argument_list|(
name|knownNode
argument_list|,
name|containerIDs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessReportCheckOneNode ()
specifier|public
name|void
name|testProcessReportCheckOneNode
parameter_list|()
throws|throws
name|SCMException
block|{
name|UUID
name|key
init|=
name|getFirstKey
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|values
init|=
name|testData
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Node2ContainerMap
name|map
init|=
operator|new
name|Node2ContainerMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|insertNewDatanode
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|map
operator|.
name|isKnownDatanode
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|ReportResult
name|result
init|=
name|map
operator|.
name|processReport
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReportResult
operator|.
name|ReportStatus
operator|.
name|ALL_IS_WELL
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateDatanodeMap ()
specifier|public
name|void
name|testUpdateDatanodeMap
parameter_list|()
throws|throws
name|SCMException
block|{
name|UUID
name|datanodeId
init|=
name|getFirstKey
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|values
init|=
name|testData
operator|.
name|get
argument_list|(
name|datanodeId
argument_list|)
decl_stmt|;
name|Node2ContainerMap
name|map
init|=
operator|new
name|Node2ContainerMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|insertNewDatanode
argument_list|(
name|datanodeId
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|map
operator|.
name|isKnownDatanode
argument_list|(
name|datanodeId
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|CONTAINER_COUNT
argument_list|,
name|map
operator|.
name|getContainers
argument_list|(
name|datanodeId
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//remove one container
name|values
operator|.
name|remove
argument_list|(
name|values
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|CONTAINER_COUNT
operator|-
literal|1
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|CONTAINER_COUNT
argument_list|,
name|map
operator|.
name|getContainers
argument_list|(
name|datanodeId
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|setContainersForDatanode
argument_list|(
name|datanodeId
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
name|map
operator|.
name|getContainers
argument_list|(
name|datanodeId
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|values
argument_list|,
name|map
operator|.
name|getContainers
argument_list|(
name|datanodeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessReportInsertAll ()
specifier|public
name|void
name|testProcessReportInsertAll
parameter_list|()
throws|throws
name|SCMException
block|{
name|Node2ContainerMap
name|map
init|=
operator|new
name|Node2ContainerMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|UUID
argument_list|,
name|TreeSet
argument_list|<
name|ContainerID
argument_list|>
argument_list|>
name|keyEntry
range|:
name|testData
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|map
operator|.
name|insertNewDatanode
argument_list|(
name|keyEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|keyEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Assert all Keys are known datanodes.
for|for
control|(
name|UUID
name|key
range|:
name|testData
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|map
operator|.
name|isKnownDatanode
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*   For ProcessReport we have to test the following scenarios.    1. New Datanode - A new datanode appears and we have to add that to the   SCM's Node2Container Map.    2.  New Container - A Datanode exists, but a new container is added to that    DN. We need to detect that and return a list of added containers.    3. Missing Container - A Datanode exists, but one of the expected container    on that datanode is missing. We need to detect that.     4. We get a container report that has both the missing and new containers.     We need to return separate lists for these.    */
comment|/**    * Assert that we are able to detect the addition of a new datanode.    *    * @throws SCMException    */
annotation|@
name|Test
DECL|method|testProcessReportDetectNewDataNode ()
specifier|public
name|void
name|testProcessReportDetectNewDataNode
parameter_list|()
throws|throws
name|SCMException
block|{
name|Node2ContainerMap
name|map
init|=
operator|new
name|Node2ContainerMap
argument_list|()
decl_stmt|;
comment|// If we attempt to process a node that is not present in the map,
comment|// we get a result back that says, NEW_NODE_FOUND.
name|UUID
name|key
init|=
name|getFirstKey
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|ContainerID
argument_list|>
name|values
init|=
name|testData
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|ReportResult
name|result
init|=
name|map
operator|.
name|processReport
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReportResult
operator|.
name|ReportStatus
operator|.
name|NEW_DATANODE_FOUND
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|getNewEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test asserts that processReport is able to detect new containers    * when it is added to a datanode. For that we populate the DN with a list    * of containerIDs and then add few more containers and make sure that we    * are able to detect them.    *    * @throws SCMException    */
annotation|@
name|Test
DECL|method|testProcessReportDetectNewContainers ()
specifier|public
name|void
name|testProcessReportDetectNewContainers
parameter_list|()
throws|throws
name|SCMException
block|{
name|Node2ContainerMap
name|map
init|=
operator|new
name|Node2ContainerMap
argument_list|()
decl_stmt|;
name|UUID
name|key
init|=
name|getFirstKey
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|ContainerID
argument_list|>
name|values
init|=
name|testData
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|map
operator|.
name|insertNewDatanode
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
specifier|final
name|int
name|newCount
init|=
literal|100
decl_stmt|;
name|ContainerID
name|last
init|=
name|values
operator|.
name|last
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|ContainerID
argument_list|>
name|addedContainers
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<=
name|newCount
condition|;
name|x
operator|++
control|)
block|{
name|long
name|cTemp
init|=
name|last
operator|.
name|getId
argument_list|()
operator|+
name|x
decl_stmt|;
name|addedContainers
operator|.
name|add
argument_list|(
operator|new
name|ContainerID
argument_list|(
name|cTemp
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// This set is the super set of existing containers and new containers.
name|TreeSet
argument_list|<
name|ContainerID
argument_list|>
name|newContainersSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|newContainersSet
operator|.
name|addAll
argument_list|(
name|addedContainers
argument_list|)
expr_stmt|;
name|ReportResult
name|result
init|=
name|map
operator|.
name|processReport
argument_list|(
name|key
argument_list|,
name|newContainersSet
argument_list|)
decl_stmt|;
comment|//Assert that expected size of missing container is same as addedContainers
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReportResult
operator|.
name|ReportStatus
operator|.
name|NEW_ENTRIES_FOUND
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|addedContainers
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|getNewEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that the Container IDs are the same as we added new.
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"All objects are not removed."
argument_list|,
name|result
operator|.
name|getNewEntries
argument_list|()
operator|.
name|removeAll
argument_list|(
name|addedContainers
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test asserts that processReport is able to detect missing containers    * if they are misssing from a list.    *    * @throws SCMException    */
annotation|@
name|Test
DECL|method|testProcessReportDetectMissingContainers ()
specifier|public
name|void
name|testProcessReportDetectMissingContainers
parameter_list|()
throws|throws
name|SCMException
block|{
name|Node2ContainerMap
name|map
init|=
operator|new
name|Node2ContainerMap
argument_list|()
decl_stmt|;
name|UUID
name|key
init|=
name|getFirstKey
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|ContainerID
argument_list|>
name|values
init|=
name|testData
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|map
operator|.
name|insertNewDatanode
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
specifier|final
name|int
name|removeCount
init|=
literal|100
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|ContainerID
name|first
init|=
name|values
operator|.
name|first
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|ContainerID
argument_list|>
name|removedContainers
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Pick a random container to remove it is ok to collide no issues.
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|removeCount
condition|;
name|x
operator|++
control|)
block|{
name|int
name|startBase
init|=
operator|(
name|int
operator|)
name|first
operator|.
name|getId
argument_list|()
decl_stmt|;
name|long
name|cTemp
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|removedContainers
operator|.
name|add
argument_list|(
operator|new
name|ContainerID
argument_list|(
name|cTemp
operator|+
name|startBase
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// This set is a new set with some containers removed.
name|TreeSet
argument_list|<
name|ContainerID
argument_list|>
name|newContainersSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|newContainersSet
operator|.
name|removeAll
argument_list|(
name|removedContainers
argument_list|)
expr_stmt|;
name|ReportResult
name|result
init|=
name|map
operator|.
name|processReport
argument_list|(
name|key
argument_list|,
name|newContainersSet
argument_list|)
decl_stmt|;
comment|//Assert that expected size of missing container is same as addedContainers
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReportResult
operator|.
name|ReportStatus
operator|.
name|MISSING_ENTRIES
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|removedContainers
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|getMissingEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that the Container IDs are the same as we added new.
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"All missing containers not found."
argument_list|,
name|result
operator|.
name|getMissingEntries
argument_list|()
operator|.
name|removeAll
argument_list|(
name|removedContainers
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessReportDetectNewAndMissingContainers ()
specifier|public
name|void
name|testProcessReportDetectNewAndMissingContainers
parameter_list|()
throws|throws
name|SCMException
block|{
name|Node2ContainerMap
name|map
init|=
operator|new
name|Node2ContainerMap
argument_list|()
decl_stmt|;
name|UUID
name|key
init|=
name|getFirstKey
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|ContainerID
argument_list|>
name|values
init|=
name|testData
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|map
operator|.
name|insertNewDatanode
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|insertedSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Insert nodes from 1..30
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<=
literal|30
condition|;
name|x
operator|++
control|)
block|{
name|insertedSet
operator|.
name|add
argument_list|(
operator|new
name|ContainerID
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|removeCount
init|=
literal|100
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|ContainerID
name|first
init|=
name|values
operator|.
name|first
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|ContainerID
argument_list|>
name|removedContainers
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Pick a random container to remove it is ok to collide no issues.
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|removeCount
condition|;
name|x
operator|++
control|)
block|{
name|int
name|startBase
init|=
operator|(
name|int
operator|)
name|first
operator|.
name|getId
argument_list|()
decl_stmt|;
name|long
name|cTemp
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|removedContainers
operator|.
name|add
argument_list|(
operator|new
name|ContainerID
argument_list|(
name|cTemp
operator|+
name|startBase
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|newSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|newSet
operator|.
name|addAll
argument_list|(
name|insertedSet
argument_list|)
expr_stmt|;
name|newSet
operator|.
name|removeAll
argument_list|(
name|removedContainers
argument_list|)
expr_stmt|;
name|ReportResult
name|result
init|=
name|map
operator|.
name|processReport
argument_list|(
name|key
argument_list|,
name|newSet
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReportResult
operator|.
name|ReportStatus
operator|.
name|MISSING_AND_NEW_ENTRIES_FOUND
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|removedContainers
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|getMissingEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that the Container IDs are the same as we added new.
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"All missing containers not found."
argument_list|,
name|result
operator|.
name|getMissingEntries
argument_list|()
operator|.
name|removeAll
argument_list|(
name|removedContainers
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|insertedSet
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|getNewEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that the Container IDs are the same as we added new.
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"All inserted containers are not found."
argument_list|,
name|result
operator|.
name|getNewEntries
argument_list|()
operator|.
name|removeAll
argument_list|(
name|insertedSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

