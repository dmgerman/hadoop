begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.placement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|placement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|stat
operator|.
name|descriptive
operator|.
name|DescriptiveStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|MockNodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
operator|.
name|SCMContainerPlacementCapacity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
operator|.
name|SCMContainerPlacementRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|NodeState
operator|.
name|HEALTHY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Asserts that allocation strategy works as expected.  */
end_comment

begin_class
DECL|class|TestContainerPlacement
specifier|public
class|class
name|TestContainerPlacement
block|{
DECL|method|computeStatistics (NodeManager nodeManager)
specifier|private
name|DescriptiveStatistics
name|computeStatistics
parameter_list|(
name|NodeManager
name|nodeManager
parameter_list|)
block|{
name|DescriptiveStatistics
name|descriptiveStatistics
init|=
operator|new
name|DescriptiveStatistics
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeDetails
name|dd
range|:
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|HEALTHY
argument_list|)
control|)
block|{
name|float
name|weightedValue
init|=
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|dd
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
operator|/
operator|(
name|float
operator|)
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|dd
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|descriptiveStatistics
operator|.
name|addValue
argument_list|(
name|weightedValue
argument_list|)
expr_stmt|;
block|}
return|return
name|descriptiveStatistics
return|;
block|}
comment|/**    * This test simulates lots of Cluster I/O and updates the metadata in SCM.    * We simulate adding and removing containers from the cluster. It asserts    * that our placement algorithm has taken the capacity of nodes into    * consideration by asserting that standard deviation of used space on these    * has improved.    */
annotation|@
name|Test
DECL|method|testCapacityPlacementYieldsBetterDataDistribution ()
specifier|public
name|void
name|testCapacityPlacementYieldsBetterDataDistribution
parameter_list|()
throws|throws
name|SCMException
block|{
specifier|final
name|int
name|opsCount
init|=
literal|200
operator|*
literal|1000
decl_stmt|;
specifier|final
name|int
name|nodesRequired
init|=
literal|3
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|// The nature of init code in MockNodeManager yields similar clusters.
name|MockNodeManager
name|nodeManagerCapacity
init|=
operator|new
name|MockNodeManager
argument_list|(
literal|true
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|MockNodeManager
name|nodeManagerRandom
init|=
operator|new
name|MockNodeManager
argument_list|(
literal|true
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|DescriptiveStatistics
name|beforeCapacity
init|=
name|computeStatistics
argument_list|(
name|nodeManagerCapacity
argument_list|)
decl_stmt|;
name|DescriptiveStatistics
name|beforeRandom
init|=
name|computeStatistics
argument_list|(
name|nodeManagerRandom
argument_list|)
decl_stmt|;
comment|//Assert that our initial layout of clusters are similar.
name|assertEquals
argument_list|(
name|beforeCapacity
operator|.
name|getStandardDeviation
argument_list|()
argument_list|,
name|beforeRandom
operator|.
name|getStandardDeviation
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|SCMContainerPlacementCapacity
name|capacityPlacer
init|=
operator|new
name|SCMContainerPlacementCapacity
argument_list|(
name|nodeManagerCapacity
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SCMContainerPlacementRandom
name|randomPlacer
init|=
operator|new
name|SCMContainerPlacementRandom
argument_list|(
name|nodeManagerRandom
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|opsCount
condition|;
name|x
operator|++
control|)
block|{
name|long
name|containerSize
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|*
name|OzoneConsts
operator|.
name|GB
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|nodesCapacity
init|=
name|capacityPlacer
operator|.
name|chooseDatanodes
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
literal|null
argument_list|,
name|nodesRequired
argument_list|,
name|containerSize
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nodesRequired
argument_list|,
name|nodesCapacity
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|nodesRandom
init|=
name|randomPlacer
operator|.
name|chooseDatanodes
argument_list|(
name|nodesCapacity
argument_list|,
literal|null
argument_list|,
name|nodesRequired
argument_list|,
name|containerSize
argument_list|)
decl_stmt|;
comment|// One fifth of all calls are delete
if|if
condition|(
name|x
operator|%
literal|5
operator|==
literal|0
condition|)
block|{
name|deleteContainer
argument_list|(
name|nodeManagerCapacity
argument_list|,
name|nodesCapacity
argument_list|,
name|containerSize
argument_list|)
expr_stmt|;
name|deleteContainer
argument_list|(
name|nodeManagerRandom
argument_list|,
name|nodesRandom
argument_list|,
name|containerSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createContainer
argument_list|(
name|nodeManagerCapacity
argument_list|,
name|nodesCapacity
argument_list|,
name|containerSize
argument_list|)
expr_stmt|;
name|createContainer
argument_list|(
name|nodeManagerRandom
argument_list|,
name|nodesRandom
argument_list|,
name|containerSize
argument_list|)
expr_stmt|;
block|}
block|}
name|DescriptiveStatistics
name|postCapacity
init|=
name|computeStatistics
argument_list|(
name|nodeManagerCapacity
argument_list|)
decl_stmt|;
name|DescriptiveStatistics
name|postRandom
init|=
name|computeStatistics
argument_list|(
name|nodeManagerRandom
argument_list|)
decl_stmt|;
comment|// This is a very bold claim, and needs large number of I/O operations.
comment|// The claim in this assertion is that we improved the data distribution
comment|// of this cluster in relation to the start state of the cluster.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|beforeCapacity
operator|.
name|getStandardDeviation
argument_list|()
operator|>
name|postCapacity
operator|.
name|getStandardDeviation
argument_list|()
argument_list|)
expr_stmt|;
comment|// This asserts that Capacity placement yields a better placement
comment|// algorithm than random placement, since both cluster started at an
comment|// identical state.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|postRandom
operator|.
name|getStandardDeviation
argument_list|()
operator|>
name|postCapacity
operator|.
name|getStandardDeviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteContainer (MockNodeManager nodeManager, List<DatanodeDetails> nodes, long containerSize)
specifier|private
name|void
name|deleteContainer
parameter_list|(
name|MockNodeManager
name|nodeManager
parameter_list|,
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|nodes
parameter_list|,
name|long
name|containerSize
parameter_list|)
block|{
for|for
control|(
name|DatanodeDetails
name|dd
range|:
name|nodes
control|)
block|{
name|nodeManager
operator|.
name|delContainer
argument_list|(
name|dd
argument_list|,
name|containerSize
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createContainer (MockNodeManager nodeManager, List<DatanodeDetails> nodes, long containerSize)
specifier|private
name|void
name|createContainer
parameter_list|(
name|MockNodeManager
name|nodeManager
parameter_list|,
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|nodes
parameter_list|,
name|long
name|containerSize
parameter_list|)
block|{
for|for
control|(
name|DatanodeDetails
name|dd
range|:
name|nodes
control|)
block|{
name|nodeManager
operator|.
name|addContainer
argument_list|(
name|dd
argument_list|,
name|containerSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

