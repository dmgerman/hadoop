begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsIdFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|CommandStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCommandProto
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|command
operator|.
name|CommandStatusReportHandler
operator|.
name|CloseContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|CloseContainerEventHandler
operator|.
name|CloseContainerRetryableReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|CloseContainerWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test class for {@link CloseContainerWatcher}.  * */
end_comment

begin_class
DECL|class|TestCloseContainerWatcher
specifier|public
class|class
name|TestCloseContainerWatcher
implements|implements
name|EventHandler
argument_list|<
name|ContainerID
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCloseContainerWatcher
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|EventWatcher
argument_list|<
name|CloseContainerRetryableReq
argument_list|,
name|CloseContainerStatus
argument_list|>
DECL|field|watcher
name|watcher
decl_stmt|;
DECL|field|leaseManager
specifier|private
specifier|static
name|LeaseManager
argument_list|<
name|Long
argument_list|>
name|leaseManager
decl_stmt|;
DECL|field|containerMapping
specifier|private
specifier|static
name|ContainerMapping
name|containerMapping
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ContainerMapping
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|queue
specifier|private
specifier|static
name|EventQueue
name|queue
decl_stmt|;
annotation|@
name|Rule
DECL|field|timeout
specifier|public
name|Timeout
name|timeout
init|=
operator|new
name|Timeout
argument_list|(
literal|1000
operator|*
literal|15
argument_list|)
decl_stmt|;
annotation|@
name|After
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|leaseManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|queue
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*    * This test will test watcher for Failure status event.    * */
annotation|@
name|Test
DECL|method|testWatcherForFailureStatusEvent ()
specifier|public
name|void
name|testWatcherForFailureStatusEvent
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|setupWatcher
argument_list|(
literal|90000L
argument_list|)
expr_stmt|;
name|long
name|id1
init|=
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
decl_stmt|;
name|long
name|id2
init|=
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
decl_stmt|;
name|queue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|setupMock
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|LogCapturer
name|testLogger
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|LogCapturer
name|watcherLogger
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|CloseContainerWatcher
operator|.
name|LOG
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|CloseContainerWatcher
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|testLogger
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|watcherLogger
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|CommandStatus
name|cmdStatus1
init|=
name|CommandStatus
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdId
argument_list|(
name|id1
argument_list|)
operator|.
name|setStatus
argument_list|(
name|CommandStatus
operator|.
name|Status
operator|.
name|FAILED
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|closeContainerCommand
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CommandStatus
name|cmdStatus2
init|=
name|CommandStatus
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdId
argument_list|(
name|id2
argument_list|)
operator|.
name|setStatus
argument_list|(
name|CommandStatus
operator|.
name|Status
operator|.
name|FAILED
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|closeContainerCommand
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// File events to watcher
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER_RETRYABLE_REQ
argument_list|,
operator|new
name|CloseContainerRetryableReq
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|id1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER_RETRYABLE_REQ
argument_list|,
operator|new
name|CloseContainerRetryableReq
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|id2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER_STATUS
argument_list|,
operator|new
name|CloseContainerStatus
argument_list|(
name|cmdStatus1
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER_STATUS
argument_list|,
operator|new
name|CloseContainerStatus
argument_list|(
name|cmdStatus2
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
operator|*
literal|4L
argument_list|)
expr_stmt|;
comment|// validation
name|assertTrue
argument_list|(
name|watcherLogger
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"CloseContainerCommand for "
operator|+
literal|"containerId: "
operator|+
name|id1
operator|+
literal|" executed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|watcherLogger
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"CloseContainerCommand for "
operator|+
literal|"containerId: "
operator|+
name|id2
operator|+
literal|" executed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testLogger
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Handling closeContainerEvent "
operator|+
literal|"for containerId: id="
operator|+
name|id1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testLogger
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Handling closeContainerEvent "
operator|+
literal|"for containerId: id="
operator|+
name|id2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWatcherForPendingStatusEvent ()
specifier|public
name|void
name|testWatcherForPendingStatusEvent
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|setupWatcher
argument_list|(
literal|90000L
argument_list|)
expr_stmt|;
name|long
name|id1
init|=
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
decl_stmt|;
name|long
name|id2
init|=
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
decl_stmt|;
name|queue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|setupMock
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|LogCapturer
name|testLogger
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|LogCapturer
name|watcherLogger
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|CloseContainerWatcher
operator|.
name|LOG
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|CloseContainerWatcher
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|testLogger
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|watcherLogger
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|CommandStatus
name|cmdStatus1
init|=
name|CommandStatus
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdId
argument_list|(
name|id1
argument_list|)
operator|.
name|setStatus
argument_list|(
name|CommandStatus
operator|.
name|Status
operator|.
name|PENDING
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|closeContainerCommand
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CommandStatus
name|cmdStatus2
init|=
name|CommandStatus
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdId
argument_list|(
name|id2
argument_list|)
operator|.
name|setStatus
argument_list|(
name|CommandStatus
operator|.
name|Status
operator|.
name|PENDING
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|closeContainerCommand
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// File events to watcher
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER_RETRYABLE_REQ
argument_list|,
operator|new
name|CloseContainerRetryableReq
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|id1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER_RETRYABLE_REQ
argument_list|,
operator|new
name|CloseContainerRetryableReq
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|id2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER_STATUS
argument_list|,
operator|new
name|CloseContainerStatus
argument_list|(
name|cmdStatus1
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER_STATUS
argument_list|,
operator|new
name|CloseContainerStatus
argument_list|(
name|cmdStatus2
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
operator|*
literal|2L
argument_list|)
expr_stmt|;
comment|// validation
name|assertFalse
argument_list|(
name|watcherLogger
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"CloseContainerCommand "
operator|+
literal|"for containerId: "
operator|+
name|id1
operator|+
literal|" executed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|watcherLogger
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"CloseContainerCommand "
operator|+
literal|"for containerId: "
operator|+
name|id2
operator|+
literal|" executed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testLogger
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Handling "
operator|+
literal|"closeContainerEvent for containerId: id="
operator|+
name|id1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testLogger
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Handling "
operator|+
literal|"closeContainerEvent for containerId: id="
operator|+
name|id2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWatcherForExecutedStatusEvent ()
specifier|public
name|void
name|testWatcherForExecutedStatusEvent
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|setupWatcher
argument_list|(
literal|90000L
argument_list|)
expr_stmt|;
name|long
name|id1
init|=
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
decl_stmt|;
name|long
name|id2
init|=
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
decl_stmt|;
name|queue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|setupMock
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|LogCapturer
name|testLogger
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|LogCapturer
name|watcherLogger
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|CloseContainerWatcher
operator|.
name|LOG
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|CloseContainerWatcher
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|testLogger
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|watcherLogger
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// When both of the pending event are executed successfully by DataNode
name|CommandStatus
name|cmdStatus1
init|=
name|CommandStatus
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdId
argument_list|(
name|id1
argument_list|)
operator|.
name|setStatus
argument_list|(
name|CommandStatus
operator|.
name|Status
operator|.
name|EXECUTED
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|closeContainerCommand
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CommandStatus
name|cmdStatus2
init|=
name|CommandStatus
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdId
argument_list|(
name|id2
argument_list|)
operator|.
name|setStatus
argument_list|(
name|CommandStatus
operator|.
name|Status
operator|.
name|EXECUTED
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|closeContainerCommand
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// File events to watcher
name|testLogger
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|watcherLogger
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER_RETRYABLE_REQ
argument_list|,
operator|new
name|CloseContainerRetryableReq
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|id1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER_RETRYABLE_REQ
argument_list|,
operator|new
name|CloseContainerRetryableReq
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|id2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER_STATUS
argument_list|,
operator|new
name|CloseContainerStatus
argument_list|(
name|cmdStatus1
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER_STATUS
argument_list|,
operator|new
name|CloseContainerStatus
argument_list|(
name|cmdStatus2
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
operator|*
literal|3L
argument_list|)
expr_stmt|;
comment|// validation
name|assertTrue
argument_list|(
name|watcherLogger
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"CloseContainerCommand "
operator|+
literal|"for containerId: "
operator|+
name|id1
operator|+
literal|" executed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|watcherLogger
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"CloseContainerCommand "
operator|+
literal|"for containerId: "
operator|+
name|id2
operator|+
literal|" executed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testLogger
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Handling "
operator|+
literal|"closeContainerEvent for containerId: id="
operator|+
name|id1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testLogger
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Handling "
operator|+
literal|"closeContainerEvent for containerId: id="
operator|+
name|id2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setupWatcher (long time)
specifier|private
name|void
name|setupWatcher
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|leaseManager
operator|=
operator|new
name|LeaseManager
argument_list|<>
argument_list|(
literal|"TestCloseContainerWatcher#LeaseManager"
argument_list|,
name|time
argument_list|)
expr_stmt|;
name|leaseManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|watcher
operator|=
operator|new
name|CloseContainerWatcher
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER_RETRYABLE_REQ
argument_list|,
name|SCMEvents
operator|.
name|CLOSE_CONTAINER_STATUS
argument_list|,
name|leaseManager
argument_list|,
name|containerMapping
argument_list|)
expr_stmt|;
name|queue
operator|=
operator|new
name|EventQueue
argument_list|()
expr_stmt|;
name|watcher
operator|.
name|start
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
comment|/*    * This test will fire two retryable closeContainer events. Both will timeout.    * First event container will be open at time of handling so it should be    * sent back to appropriate handler. Second event container will be closed,    * so it should not be retried.    * */
annotation|@
name|Test
DECL|method|testWatcherRetryableTimeoutHandling ()
specifier|public
name|void
name|testWatcherRetryableTimeoutHandling
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|long
name|id1
init|=
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
decl_stmt|;
name|long
name|id2
init|=
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
decl_stmt|;
name|setupWatcher
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|setupMock
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|LogCapturer
name|testLogger
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
name|testLogger
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// File events to watcher
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER_RETRYABLE_REQ
argument_list|,
operator|new
name|CloseContainerRetryableReq
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|id1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER_RETRYABLE_REQ
argument_list|,
operator|new
name|CloseContainerRetryableReq
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|id2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000L
operator|+
literal|10
argument_list|)
expr_stmt|;
comment|// validation
name|assertTrue
argument_list|(
name|testLogger
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Handling "
operator|+
literal|"closeContainerEvent for containerId: id="
operator|+
name|id1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testLogger
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Handling "
operator|+
literal|"closeContainerEvent for containerId: id="
operator|+
name|id2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setupMock (long id1, long id2, boolean isOpen)
specifier|private
name|void
name|setupMock
parameter_list|(
name|long
name|id1
parameter_list|,
name|long
name|id2
parameter_list|,
name|boolean
name|isOpen
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerInfo
name|containerInfo
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ContainerInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerInfo
name|containerInfo2
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ContainerInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|containerMapping
operator|.
name|getContainer
argument_list|(
name|id1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|containerMapping
operator|.
name|getContainer
argument_list|(
name|id2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerInfo2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|containerInfo
operator|.
name|isContainerOpen
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|containerInfo2
operator|.
name|isContainerOpen
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|isOpen
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMessage (ContainerID containerID, EventPublisher publisher)
specifier|public
name|void
name|onMessage
parameter_list|(
name|ContainerID
name|containerID
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Handling closeContainerEvent for containerId: {}"
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

