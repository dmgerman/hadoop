begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container.replication
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|LifeCycleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ReplicateContainerCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
operator|.
name|ContainerPlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|replication
operator|.
name|ReplicationManager
operator|.
name|ReplicationRequestToRepeat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|CommandForDatanode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
operator|.
name|TRACK_REPLICATE_COMMAND
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test behaviour of the TestReplication.  */
end_comment

begin_class
DECL|class|TestReplicationManager
specifier|public
class|class
name|TestReplicationManager
block|{
DECL|field|queue
specifier|private
name|EventQueue
name|queue
decl_stmt|;
DECL|field|trackReplicationEvents
specifier|private
name|List
argument_list|<
name|ReplicationRequestToRepeat
argument_list|>
name|trackReplicationEvents
decl_stmt|;
DECL|field|copyEvents
specifier|private
name|List
argument_list|<
name|CommandForDatanode
argument_list|<
name|ReplicateContainerCommandProto
argument_list|>
argument_list|>
name|copyEvents
decl_stmt|;
DECL|field|containerStateManager
specifier|private
name|ContainerStateManager
name|containerStateManager
decl_stmt|;
DECL|field|containerPlacementPolicy
specifier|private
name|ContainerPlacementPolicy
name|containerPlacementPolicy
decl_stmt|;
DECL|field|listOfDatanodeDetails
specifier|private
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|listOfDatanodeDetails
decl_stmt|;
annotation|@
name|Before
DECL|method|initReplicationManager ()
specifier|public
name|void
name|initReplicationManager
parameter_list|()
throws|throws
name|IOException
block|{
name|listOfDatanodeDetails
operator|=
name|TestUtils
operator|.
name|getListOfDatanodeDetails
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|containerPlacementPolicy
operator|=
parameter_list|(
name|excludedNodes
parameter_list|,
name|nodesRequired
parameter_list|,
name|sizeRequired
parameter_list|)
lambda|->
name|listOfDatanodeDetails
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
literal|2
operator|+
name|nodesRequired
argument_list|)
expr_stmt|;
name|containerStateManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ContainerStateManager
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//container with 2 replicas
name|ContainerInfo
name|containerInfo
init|=
operator|new
name|ContainerInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setState
argument_list|(
name|LifeCycleState
operator|.
name|CLOSED
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|containerStateManager
operator|.
name|getContainer
argument_list|(
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
name|queue
operator|=
operator|new
name|EventQueue
argument_list|()
expr_stmt|;
name|trackReplicationEvents
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|queue
operator|.
name|addHandler
argument_list|(
name|TRACK_REPLICATE_COMMAND
argument_list|,
parameter_list|(
name|event
parameter_list|,
name|publisher
parameter_list|)
lambda|->
name|trackReplicationEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|copyEvents
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|queue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|DATANODE_COMMAND
argument_list|,
parameter_list|(
name|event
parameter_list|,
name|publisher
parameter_list|)
lambda|->
name|copyEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEventSending ()
specifier|public
name|void
name|testEventSending
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
comment|//GIVEN
name|LeaseManager
argument_list|<
name|Long
argument_list|>
name|leaseManager
init|=
operator|new
name|LeaseManager
argument_list|<>
argument_list|(
literal|100000L
argument_list|)
decl_stmt|;
try|try
block|{
name|leaseManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ReplicationManager
name|replicationManager
init|=
operator|new
name|ReplicationManager
argument_list|(
name|containerPlacementPolicy
argument_list|,
name|containerStateManager
argument_list|,
name|queue
argument_list|,
name|leaseManager
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|getCurrentReplicas
parameter_list|(
name|ReplicationRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listOfDatanodeDetails
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|replicationManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//WHEN
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|REPLICATE_CONTAINER
argument_list|,
operator|new
name|ReplicationRequest
argument_list|(
literal|1l
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500L
argument_list|)
expr_stmt|;
name|queue
operator|.
name|processAll
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
comment|//THEN
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|trackReplicationEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|copyEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|leaseManager
operator|!=
literal|null
condition|)
block|{
name|leaseManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCommandWatcher ()
specifier|public
name|void
name|testCommandWatcher
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|LeaseManager
argument_list|<
name|Long
argument_list|>
name|leaseManager
init|=
operator|new
name|LeaseManager
argument_list|<>
argument_list|(
literal|1000L
argument_list|)
decl_stmt|;
try|try
block|{
name|leaseManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ReplicationManager
name|replicationManager
init|=
operator|new
name|ReplicationManager
argument_list|(
name|containerPlacementPolicy
argument_list|,
name|containerStateManager
argument_list|,
name|queue
argument_list|,
name|leaseManager
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|getCurrentReplicas
parameter_list|(
name|ReplicationRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listOfDatanodeDetails
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|replicationManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|REPLICATE_CONTAINER
argument_list|,
operator|new
name|ReplicationRequest
argument_list|(
literal|1l
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500L
argument_list|)
expr_stmt|;
name|queue
operator|.
name|processAll
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|trackReplicationEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|copyEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|trackReplicationEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|copyEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCommand
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//event is timed out
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
name|queue
operator|.
name|processAll
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
comment|//original copy command + retry
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|trackReplicationEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|copyEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|leaseManager
operator|!=
literal|null
condition|)
block|{
name|leaseManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|createPipeline (Iterable<DatanodeDetails> ids)
specifier|public
specifier|static
name|Pipeline
name|createPipeline
parameter_list|(
name|Iterable
argument_list|<
name|DatanodeDetails
argument_list|>
name|ids
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|ids
argument_list|,
literal|"ids == null"
argument_list|)
expr_stmt|;
specifier|final
name|Iterator
argument_list|<
name|DatanodeDetails
argument_list|>
name|i
init|=
name|ids
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|i
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeDetails
name|leader
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|pipelineName
init|=
literal|"TEST-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|Pipeline
name|pipeline
init|=
operator|new
name|Pipeline
argument_list|(
name|leader
operator|.
name|getUuidString
argument_list|()
argument_list|,
name|LifeCycleState
operator|.
name|OPEN
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|,
name|pipelineName
argument_list|)
decl_stmt|;
name|pipeline
operator|.
name|addMember
argument_list|(
name|leader
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|pipeline
operator|.
name|addMember
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|pipeline
return|;
block|}
block|}
end_class

end_unit

