begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container.replication
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|LifeCycleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReplicaProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ReplicateContainerCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerReplica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
operator|.
name|ContainerPlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|replication
operator|.
name|ReplicationManager
operator|.
name|ReplicationRequestToRepeat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|CommandForDatanode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
operator|.
name|TRACK_REPLICATE_COMMAND
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test behaviour of the TestReplication.  */
end_comment

begin_class
DECL|class|TestReplicationManager
specifier|public
class|class
name|TestReplicationManager
block|{
DECL|field|queue
specifier|private
name|EventQueue
name|queue
decl_stmt|;
DECL|field|trackReplicationEvents
specifier|private
name|List
argument_list|<
name|ReplicationRequestToRepeat
argument_list|>
name|trackReplicationEvents
decl_stmt|;
DECL|field|copyEvents
specifier|private
name|List
argument_list|<
name|CommandForDatanode
argument_list|<
name|ReplicateContainerCommandProto
argument_list|>
argument_list|>
name|copyEvents
decl_stmt|;
DECL|field|containerManager
specifier|private
name|ContainerManager
name|containerManager
decl_stmt|;
DECL|field|containerPlacementPolicy
specifier|private
name|ContainerPlacementPolicy
name|containerPlacementPolicy
decl_stmt|;
DECL|field|listOfDatanodeDetails
specifier|private
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|listOfDatanodeDetails
decl_stmt|;
DECL|field|listOfContainerReplica
specifier|private
name|List
argument_list|<
name|ContainerReplica
argument_list|>
name|listOfContainerReplica
decl_stmt|;
DECL|field|leaseManager
specifier|private
name|LeaseManager
argument_list|<
name|Long
argument_list|>
name|leaseManager
decl_stmt|;
DECL|field|replicationManager
specifier|private
name|ReplicationManager
name|replicationManager
decl_stmt|;
annotation|@
name|Before
DECL|method|initReplicationManager ()
specifier|public
name|void
name|initReplicationManager
parameter_list|()
throws|throws
name|IOException
block|{
name|listOfDatanodeDetails
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|listOfContainerReplica
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
block|{
name|DatanodeDetails
name|dd
init|=
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
decl_stmt|;
name|listOfDatanodeDetails
operator|.
name|add
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|listOfContainerReplica
operator|.
name|add
argument_list|(
name|ContainerReplica
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerID
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setContainerState
argument_list|(
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|CLOSED
argument_list|)
operator|.
name|setDatanodeDetails
argument_list|(
name|dd
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|containerPlacementPolicy
operator|=
parameter_list|(
name|excludedNodes
parameter_list|,
name|nodesRequired
parameter_list|,
name|sizeRequired
parameter_list|)
lambda|->
name|listOfDatanodeDetails
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
literal|2
operator|+
name|nodesRequired
argument_list|)
expr_stmt|;
name|containerManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ContainerManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|ContainerInfo
name|containerInfo
init|=
operator|new
name|ContainerInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setState
argument_list|(
name|LifeCycleState
operator|.
name|CLOSED
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|containerManager
operator|.
name|getContainer
argument_list|(
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|containerManager
operator|.
name|getContainerReplicas
argument_list|(
operator|new
name|ContainerID
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|listOfContainerReplica
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|listOfContainerReplica
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|containerManager
operator|.
name|getContainerReplicas
argument_list|(
operator|new
name|ContainerID
argument_list|(
literal|3L
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|=
operator|new
name|EventQueue
argument_list|()
expr_stmt|;
name|trackReplicationEvents
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|queue
operator|.
name|addHandler
argument_list|(
name|TRACK_REPLICATE_COMMAND
argument_list|,
parameter_list|(
name|event
parameter_list|,
name|publisher
parameter_list|)
lambda|->
name|trackReplicationEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|copyEvents
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|queue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|DATANODE_COMMAND
argument_list|,
parameter_list|(
name|event
parameter_list|,
name|publisher
parameter_list|)
lambda|->
name|copyEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|leaseManager
operator|=
operator|new
name|LeaseManager
argument_list|<>
argument_list|(
literal|"Test"
argument_list|,
literal|100000L
argument_list|)
expr_stmt|;
name|replicationManager
operator|=
operator|new
name|ReplicationManager
argument_list|(
name|containerPlacementPolicy
argument_list|,
name|containerManager
argument_list|,
name|queue
argument_list|,
name|leaseManager
argument_list|)
expr_stmt|;
block|}
comment|/**    * Container should be replicated but no source replicas.    */
annotation|@
name|Test
argument_list|()
DECL|method|testNoExistingReplicas ()
specifier|public
name|void
name|testNoExistingReplicas
parameter_list|()
throws|throws
name|InterruptedException
block|{
try|try
block|{
name|leaseManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|replicationManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//WHEN
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|REPLICATE_CONTAINER
argument_list|,
operator|new
name|ReplicationRequest
argument_list|(
literal|3L
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500L
argument_list|)
expr_stmt|;
name|queue
operator|.
name|processAll
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
comment|//THEN
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|trackReplicationEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|copyEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|leaseManager
operator|!=
literal|null
condition|)
block|{
name|leaseManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testEventSending ()
specifier|public
name|void
name|testEventSending
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
comment|//GIVEN
try|try
block|{
name|leaseManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|replicationManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//WHEN
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|REPLICATE_CONTAINER
argument_list|,
operator|new
name|ReplicationRequest
argument_list|(
literal|1L
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500L
argument_list|)
expr_stmt|;
name|queue
operator|.
name|processAll
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
comment|//THEN
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|trackReplicationEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|copyEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|leaseManager
operator|!=
literal|null
condition|)
block|{
name|leaseManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCommandWatcher ()
specifier|public
name|void
name|testCommandWatcher
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|LeaseManager
argument_list|<
name|Long
argument_list|>
name|rapidLeaseManager
init|=
operator|new
name|LeaseManager
argument_list|<>
argument_list|(
literal|"Test"
argument_list|,
literal|1000L
argument_list|)
decl_stmt|;
name|replicationManager
operator|=
operator|new
name|ReplicationManager
argument_list|(
name|containerPlacementPolicy
argument_list|,
name|containerManager
argument_list|,
name|queue
argument_list|,
name|rapidLeaseManager
argument_list|)
expr_stmt|;
try|try
block|{
name|rapidLeaseManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|replicationManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|REPLICATE_CONTAINER
argument_list|,
operator|new
name|ReplicationRequest
argument_list|(
literal|1L
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500L
argument_list|)
expr_stmt|;
name|queue
operator|.
name|processAll
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|trackReplicationEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|copyEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|trackReplicationEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|copyEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCommand
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//event is timed out
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
name|queue
operator|.
name|processAll
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
comment|//original copy command + retry
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|trackReplicationEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|copyEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rapidLeaseManager
operator|!=
literal|null
condition|)
block|{
name|rapidLeaseManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|createPipeline (Iterable<DatanodeDetails> ids)
specifier|public
specifier|static
name|Pipeline
name|createPipeline
parameter_list|(
name|Iterable
argument_list|<
name|DatanodeDetails
argument_list|>
name|ids
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|ids
argument_list|,
literal|"ids == null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|ids
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|dns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ids
operator|.
name|forEach
argument_list|(
name|dns
operator|::
name|add
argument_list|)
expr_stmt|;
return|return
name|Pipeline
operator|.
name|newBuilder
argument_list|()
operator|.
name|setState
argument_list|(
name|Pipeline
operator|.
name|PipelineState
operator|.
name|OPEN
argument_list|)
operator|.
name|setId
argument_list|(
name|PipelineID
operator|.
name|randomId
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|)
operator|.
name|setFactor
argument_list|(
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
operator|.
name|setNodes
argument_list|(
name|dns
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

