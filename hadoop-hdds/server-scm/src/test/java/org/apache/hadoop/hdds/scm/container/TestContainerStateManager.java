begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReplicaProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|SCMPipelineManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Testing ContainerStatemanager.  */
end_comment

begin_class
DECL|class|TestContainerStateManager
specifier|public
class|class
name|TestContainerStateManager
block|{
DECL|field|containerStateManager
specifier|private
name|ContainerStateManager
name|containerStateManager
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|containerStateManager
operator|=
operator|new
name|ContainerStateManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkReplicationStateOK ()
specifier|public
name|void
name|checkReplicationStateOK
parameter_list|()
throws|throws
name|IOException
block|{
comment|//GIVEN
name|ContainerInfo
name|c1
init|=
name|allocateContainer
argument_list|()
decl_stmt|;
name|DatanodeDetails
name|d1
init|=
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
decl_stmt|;
name|DatanodeDetails
name|d2
init|=
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
decl_stmt|;
name|DatanodeDetails
name|d3
init|=
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
decl_stmt|;
name|addReplica
argument_list|(
name|c1
argument_list|,
name|d1
argument_list|)
expr_stmt|;
name|addReplica
argument_list|(
name|c1
argument_list|,
name|d2
argument_list|)
expr_stmt|;
name|addReplica
argument_list|(
name|c1
argument_list|,
name|d3
argument_list|)
expr_stmt|;
comment|//WHEN
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|replicas
init|=
name|containerStateManager
operator|.
name|getContainerReplicas
argument_list|(
name|c1
operator|.
name|containerID
argument_list|()
argument_list|)
decl_stmt|;
comment|//THEN
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|replicas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkReplicationStateMissingReplica ()
specifier|public
name|void
name|checkReplicationStateMissingReplica
parameter_list|()
throws|throws
name|IOException
block|{
comment|//GIVEN
name|ContainerInfo
name|c1
init|=
name|allocateContainer
argument_list|()
decl_stmt|;
name|DatanodeDetails
name|d1
init|=
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
decl_stmt|;
name|DatanodeDetails
name|d2
init|=
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
decl_stmt|;
name|addReplica
argument_list|(
name|c1
argument_list|,
name|d1
argument_list|)
expr_stmt|;
name|addReplica
argument_list|(
name|c1
argument_list|,
name|d2
argument_list|)
expr_stmt|;
comment|//WHEN
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|replicas
init|=
name|containerStateManager
operator|.
name|getContainerReplicas
argument_list|(
name|c1
operator|.
name|containerID
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|replicas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|c1
operator|.
name|getReplicationFactor
argument_list|()
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addReplica (ContainerInfo cont, DatanodeDetails node)
specifier|private
name|void
name|addReplica
parameter_list|(
name|ContainerInfo
name|cont
parameter_list|,
name|DatanodeDetails
name|node
parameter_list|)
throws|throws
name|ContainerNotFoundException
block|{
name|ContainerReplica
name|replica
init|=
name|ContainerReplica
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerID
argument_list|(
name|cont
operator|.
name|containerID
argument_list|()
argument_list|)
operator|.
name|setContainerState
argument_list|(
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|CLOSED
argument_list|)
operator|.
name|setDatanodeDetails
argument_list|(
name|node
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|cont
operator|.
name|containerID
argument_list|()
argument_list|,
name|replica
argument_list|)
expr_stmt|;
block|}
DECL|method|allocateContainer ()
specifier|private
name|ContainerInfo
name|allocateContainer
parameter_list|()
throws|throws
name|IOException
block|{
name|PipelineManager
name|pipelineManager
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SCMPipelineManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|Pipeline
operator|.
name|newBuilder
argument_list|()
operator|.
name|setState
argument_list|(
name|Pipeline
operator|.
name|PipelineState
operator|.
name|CLOSED
argument_list|)
operator|.
name|setId
argument_list|(
name|PipelineID
operator|.
name|randomId
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|)
operator|.
name|setFactor
argument_list|(
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
operator|.
name|setNodes
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|pipelineManager
operator|.
name|createPipeline
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
return|return
name|containerStateManager
operator|.
name|allocateContainer
argument_list|(
name|pipelineManager
argument_list|,
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
literal|"root"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

