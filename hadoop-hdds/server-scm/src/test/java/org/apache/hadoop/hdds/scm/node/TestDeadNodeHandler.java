begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.node
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|replication
operator|.
name|ReplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|states
operator|.
name|Node2ContainerMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Test DeadNodeHandler.  */
end_comment

begin_class
DECL|class|TestDeadNodeHandler
specifier|public
class|class
name|TestDeadNodeHandler
block|{
DECL|field|sentEvents
specifier|private
name|List
argument_list|<
name|ReplicationRequest
argument_list|>
name|sentEvents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testOnMessage ()
specifier|public
name|void
name|testOnMessage
parameter_list|()
throws|throws
name|IOException
block|{
comment|//GIVEN
name|DatanodeDetails
name|datanode1
init|=
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
decl_stmt|;
name|DatanodeDetails
name|datanode2
init|=
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
decl_stmt|;
name|Node2ContainerMap
name|node2ContainerMap
init|=
operator|new
name|Node2ContainerMap
argument_list|()
decl_stmt|;
name|ContainerStateManager
name|containerStateManager
init|=
operator|new
name|ContainerStateManager
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|,
name|Mockito
operator|.
name|mock
argument_list|(
name|Mapping
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ContainerInfo
name|container1
init|=
name|TestUtils
operator|.
name|allocateContainer
argument_list|(
name|containerStateManager
argument_list|)
decl_stmt|;
name|ContainerInfo
name|container2
init|=
name|TestUtils
operator|.
name|allocateContainer
argument_list|(
name|containerStateManager
argument_list|)
decl_stmt|;
name|ContainerInfo
name|container3
init|=
name|TestUtils
operator|.
name|allocateContainer
argument_list|(
name|containerStateManager
argument_list|)
decl_stmt|;
name|DeadNodeHandler
name|handler
init|=
operator|new
name|DeadNodeHandler
argument_list|(
name|node2ContainerMap
argument_list|,
name|containerStateManager
argument_list|)
decl_stmt|;
name|registerReplicas
argument_list|(
name|node2ContainerMap
argument_list|,
name|datanode1
argument_list|,
name|container1
argument_list|,
name|container2
argument_list|)
expr_stmt|;
name|registerReplicas
argument_list|(
name|node2ContainerMap
argument_list|,
name|datanode2
argument_list|,
name|container1
argument_list|,
name|container3
argument_list|)
expr_stmt|;
name|registerReplicas
argument_list|(
name|containerStateManager
argument_list|,
name|container1
argument_list|,
name|datanode1
argument_list|,
name|datanode2
argument_list|)
expr_stmt|;
name|registerReplicas
argument_list|(
name|containerStateManager
argument_list|,
name|container2
argument_list|,
name|datanode1
argument_list|)
expr_stmt|;
name|registerReplicas
argument_list|(
name|containerStateManager
argument_list|,
name|container3
argument_list|,
name|datanode2
argument_list|)
expr_stmt|;
name|TestUtils
operator|.
name|closeContainer
argument_list|(
name|containerStateManager
argument_list|,
name|container1
argument_list|)
expr_stmt|;
name|EventPublisher
name|publisher
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|EventPublisher
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//WHEN datanode1 is dead
name|handler
operator|.
name|onMessage
argument_list|(
name|datanode1
argument_list|,
name|publisher
argument_list|)
expr_stmt|;
comment|//THEN
comment|//node2ContainerMap has not been changed
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|node2ContainerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|DatanodeDetails
argument_list|>
name|container1Replicas
init|=
name|containerStateManager
operator|.
name|getContainerStateMap
argument_list|()
operator|.
name|getContainerReplicas
argument_list|(
operator|new
name|ContainerID
argument_list|(
name|container1
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|container1Replicas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|datanode2
argument_list|,
name|container1Replicas
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|DatanodeDetails
argument_list|>
name|container2Replicas
init|=
name|containerStateManager
operator|.
name|getContainerStateMap
argument_list|()
operator|.
name|getContainerReplicas
argument_list|(
operator|new
name|ContainerID
argument_list|(
name|container2
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|container2Replicas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|DatanodeDetails
argument_list|>
name|container3Replicas
init|=
name|containerStateManager
operator|.
name|getContainerStateMap
argument_list|()
operator|.
name|getContainerReplicas
argument_list|(
operator|new
name|ContainerID
argument_list|(
name|container3
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|container3Replicas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|datanode2
argument_list|,
name|container3Replicas
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|ReplicationRequest
argument_list|>
name|replicationRequestParameter
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|ReplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|publisher
argument_list|)
operator|.
name|fireEvent
argument_list|(
name|eq
argument_list|(
name|SCMEvents
operator|.
name|REPLICATE_CONTAINER
argument_list|)
argument_list|,
name|replicationRequestParameter
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container1
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|replicationRequestParameter
operator|.
name|getValue
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|replicationRequestParameter
operator|.
name|getValue
argument_list|()
operator|.
name|getReplicationCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|replicationRequestParameter
operator|.
name|getValue
argument_list|()
operator|.
name|getExpecReplicationCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|registerReplicas (ContainerStateManager containerStateManager, ContainerInfo container, DatanodeDetails... datanodes)
specifier|private
name|void
name|registerReplicas
parameter_list|(
name|ContainerStateManager
name|containerStateManager
parameter_list|,
name|ContainerInfo
name|container
parameter_list|,
name|DatanodeDetails
modifier|...
name|datanodes
parameter_list|)
block|{
name|containerStateManager
operator|.
name|getContainerStateMap
argument_list|()
operator|.
name|addContainerReplica
argument_list|(
operator|new
name|ContainerID
argument_list|(
name|container
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|,
name|datanodes
argument_list|)
expr_stmt|;
block|}
DECL|method|registerReplicas (Node2ContainerMap node2ContainerMap, DatanodeDetails datanode, ContainerInfo... containers)
specifier|private
name|void
name|registerReplicas
parameter_list|(
name|Node2ContainerMap
name|node2ContainerMap
parameter_list|,
name|DatanodeDetails
name|datanode
parameter_list|,
name|ContainerInfo
modifier|...
name|containers
parameter_list|)
throws|throws
name|SCMException
block|{
name|node2ContainerMap
operator|.
name|insertNewDatanode
argument_list|(
name|datanode
operator|.
name|getUuid
argument_list|()
argument_list|,
name|Arrays
operator|.
name|stream
argument_list|(
name|containers
argument_list|)
operator|.
name|map
argument_list|(
name|container
lambda|->
operator|new
name|ContainerID
argument_list|(
name|container
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

