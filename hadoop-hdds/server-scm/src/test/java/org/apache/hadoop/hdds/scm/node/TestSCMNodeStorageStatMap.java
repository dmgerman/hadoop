begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.node
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|NodeReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|StorageReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|StorageLocationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * Test Node Storage Map.  */
end_comment

begin_class
DECL|class|TestSCMNodeStorageStatMap
specifier|public
class|class
name|TestSCMNodeStorageStatMap
block|{
DECL|field|DATANODE_COUNT
specifier|private
specifier|final
specifier|static
name|int
name|DATANODE_COUNT
init|=
literal|100
decl_stmt|;
DECL|field|capacity
specifier|private
specifier|final
name|long
name|capacity
init|=
literal|10L
operator|*
name|OzoneConsts
operator|.
name|GB
decl_stmt|;
DECL|field|used
specifier|private
specifier|final
name|long
name|used
init|=
literal|2L
operator|*
name|OzoneConsts
operator|.
name|GB
decl_stmt|;
DECL|field|remaining
specifier|private
specifier|final
name|long
name|remaining
init|=
name|capacity
operator|-
name|used
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
DECL|field|testData
specifier|private
specifier|final
name|Map
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|StorageLocationReport
argument_list|>
argument_list|>
name|testData
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|method|generateData ()
specifier|private
name|void
name|generateData
parameter_list|()
block|{
for|for
control|(
name|int
name|dnIndex
init|=
literal|1
init|;
name|dnIndex
operator|<=
name|DATANODE_COUNT
condition|;
name|dnIndex
operator|++
control|)
block|{
name|UUID
name|dnId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|StorageLocationReport
argument_list|>
name|reportSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestSCMNodeStorageStatMap
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|dnIndex
argument_list|)
argument_list|)
decl_stmt|;
name|StorageLocationReport
operator|.
name|Builder
name|builder
init|=
name|StorageLocationReport
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
operator|.
name|setId
argument_list|(
name|dnId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setStorageLocation
argument_list|(
name|path
argument_list|)
operator|.
name|setScmUsed
argument_list|(
name|used
argument_list|)
operator|.
name|setRemaining
argument_list|(
name|remaining
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|capacity
argument_list|)
operator|.
name|setFailed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reportSet
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|testData
operator|.
name|put
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|,
name|reportSet
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFirstKey ()
specifier|private
name|UUID
name|getFirstKey
parameter_list|()
block|{
return|return
name|testData
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|generateData
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|Test
DECL|method|testIsKnownDatanode ()
specifier|public
name|void
name|testIsKnownDatanode
parameter_list|()
throws|throws
name|SCMException
block|{
name|SCMNodeStorageStatMap
name|map
init|=
operator|new
name|SCMNodeStorageStatMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|UUID
name|knownNode
init|=
name|getFirstKey
argument_list|()
decl_stmt|;
name|UUID
name|unknownNode
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|StorageLocationReport
argument_list|>
name|report
init|=
name|testData
operator|.
name|get
argument_list|(
name|knownNode
argument_list|)
decl_stmt|;
name|map
operator|.
name|insertNewDatanode
argument_list|(
name|knownNode
argument_list|,
name|report
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Not able to detect a known node"
argument_list|,
name|map
operator|.
name|isKnownDatanode
argument_list|(
name|knownNode
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Unknown node detected"
argument_list|,
name|map
operator|.
name|isKnownDatanode
argument_list|(
name|unknownNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInsertNewDatanode ()
specifier|public
name|void
name|testInsertNewDatanode
parameter_list|()
throws|throws
name|SCMException
block|{
name|SCMNodeStorageStatMap
name|map
init|=
operator|new
name|SCMNodeStorageStatMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|UUID
name|knownNode
init|=
name|getFirstKey
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|StorageLocationReport
argument_list|>
name|report
init|=
name|testData
operator|.
name|get
argument_list|(
name|knownNode
argument_list|)
decl_stmt|;
name|map
operator|.
name|insertNewDatanode
argument_list|(
name|knownNode
argument_list|,
name|report
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|map
operator|.
name|getStorageVolumes
argument_list|(
name|knownNode
argument_list|)
argument_list|,
name|testData
operator|.
name|get
argument_list|(
name|knownNode
argument_list|)
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|SCMException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"already exists"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insertNewDatanode
argument_list|(
name|knownNode
argument_list|,
name|report
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateUnknownDatanode ()
specifier|public
name|void
name|testUpdateUnknownDatanode
parameter_list|()
throws|throws
name|SCMException
block|{
name|SCMNodeStorageStatMap
name|map
init|=
operator|new
name|SCMNodeStorageStatMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|UUID
name|unknownNode
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestSCMNodeStorageStatMap
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-"
operator|+
name|unknownNode
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|StorageLocationReport
argument_list|>
name|reportSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|StorageLocationReport
operator|.
name|Builder
name|builder
init|=
name|StorageLocationReport
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
operator|.
name|setId
argument_list|(
name|unknownNode
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setStorageLocation
argument_list|(
name|path
argument_list|)
operator|.
name|setScmUsed
argument_list|(
name|used
argument_list|)
operator|.
name|setRemaining
argument_list|(
name|remaining
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|capacity
argument_list|)
operator|.
name|setFailed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reportSet
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|SCMException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"No such datanode"
argument_list|)
expr_stmt|;
name|map
operator|.
name|updateDatanodeMap
argument_list|(
name|unknownNode
argument_list|,
name|reportSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessNodeReportCheckOneNode ()
specifier|public
name|void
name|testProcessNodeReportCheckOneNode
parameter_list|()
throws|throws
name|IOException
block|{
name|UUID
name|key
init|=
name|getFirstKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|StorageReportProto
argument_list|>
name|reportList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|StorageLocationReport
argument_list|>
name|reportSet
init|=
name|testData
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|SCMNodeStorageStatMap
name|map
init|=
operator|new
name|SCMNodeStorageStatMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|map
operator|.
name|insertNewDatanode
argument_list|(
name|key
argument_list|,
name|reportSet
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|map
operator|.
name|isKnownDatanode
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|storageId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getRandomizedTempPath
argument_list|()
operator|.
name|concat
argument_list|(
literal|"/"
operator|+
name|storageId
argument_list|)
decl_stmt|;
name|StorageLocationReport
name|report
init|=
name|reportSet
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|long
name|reportCapacity
init|=
name|report
operator|.
name|getCapacity
argument_list|()
decl_stmt|;
name|long
name|reportScmUsed
init|=
name|report
operator|.
name|getScmUsed
argument_list|()
decl_stmt|;
name|long
name|reportRemaining
init|=
name|report
operator|.
name|getRemaining
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|StorageReportProto
argument_list|>
name|reports
init|=
name|TestUtils
operator|.
name|createStorageReport
argument_list|(
name|reportCapacity
argument_list|,
name|reportScmUsed
argument_list|,
name|reportRemaining
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
name|storageId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|StorageReportResult
name|result
init|=
name|map
operator|.
name|processNodeReport
argument_list|(
name|key
argument_list|,
name|TestUtils
operator|.
name|createNodeReport
argument_list|(
name|reports
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|getStatus
argument_list|()
argument_list|,
name|SCMNodeStorageStatMap
operator|.
name|ReportStatus
operator|.
name|ALL_IS_WELL
argument_list|)
expr_stmt|;
name|StorageContainerDatanodeProtocolProtos
operator|.
name|NodeReportProto
operator|.
name|Builder
name|nrb
init|=
name|NodeReportProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|StorageReportProto
name|srb
init|=
name|reportSet
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getProtoBufMessage
argument_list|()
decl_stmt|;
name|reportList
operator|.
name|add
argument_list|(
name|srb
argument_list|)
expr_stmt|;
name|result
operator|=
name|map
operator|.
name|processNodeReport
argument_list|(
name|key
argument_list|,
name|TestUtils
operator|.
name|createNodeReport
argument_list|(
name|reportList
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|getStatus
argument_list|()
argument_list|,
name|SCMNodeStorageStatMap
operator|.
name|ReportStatus
operator|.
name|ALL_IS_WELL
argument_list|)
expr_stmt|;
name|reportList
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createStorageReport
argument_list|(
name|reportCapacity
argument_list|,
name|reportCapacity
argument_list|,
literal|0
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|map
operator|.
name|processNodeReport
argument_list|(
name|key
argument_list|,
name|TestUtils
operator|.
name|createNodeReport
argument_list|(
name|reportList
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|getStatus
argument_list|()
argument_list|,
name|SCMNodeStorageStatMap
operator|.
name|ReportStatus
operator|.
name|STORAGE_OUT_OF_SPACE
argument_list|)
expr_stmt|;
comment|// Mark a disk failed
name|StorageReportProto
name|srb2
init|=
name|StorageReportProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStorageUuid
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setStorageLocation
argument_list|(
name|srb
operator|.
name|getStorageLocation
argument_list|()
argument_list|)
operator|.
name|setScmUsed
argument_list|(
name|reportCapacity
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|reportCapacity
argument_list|)
operator|.
name|setRemaining
argument_list|(
literal|0
argument_list|)
operator|.
name|setFailed
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|reportList
operator|.
name|add
argument_list|(
name|srb2
argument_list|)
expr_stmt|;
name|nrb
operator|.
name|addAllStorageReport
argument_list|(
name|reportList
argument_list|)
expr_stmt|;
name|result
operator|=
name|map
operator|.
name|processNodeReport
argument_list|(
name|key
argument_list|,
name|nrb
operator|.
name|addStorageReport
argument_list|(
name|srb
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|getStatus
argument_list|()
argument_list|,
name|SCMNodeStorageStatMap
operator|.
name|ReportStatus
operator|.
name|FAILED_AND_OUT_OF_SPACE_STORAGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessMultipleNodeReports ()
specifier|public
name|void
name|testProcessMultipleNodeReports
parameter_list|()
throws|throws
name|SCMException
block|{
name|SCMNodeStorageStatMap
name|map
init|=
operator|new
name|SCMNodeStorageStatMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
literal|1
decl_stmt|;
comment|// Insert all testData into the SCMNodeStorageStatMap Map.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|StorageLocationReport
argument_list|>
argument_list|>
name|keyEntry
range|:
name|testData
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|map
operator|.
name|insertNewDatanode
argument_list|(
name|keyEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|keyEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DATANODE_COUNT
operator|*
name|capacity
argument_list|,
name|map
operator|.
name|getTotalCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DATANODE_COUNT
operator|*
name|remaining
argument_list|,
name|map
operator|.
name|getTotalFreeSpace
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DATANODE_COUNT
operator|*
name|used
argument_list|,
name|map
operator|.
name|getTotalSpaceUsed
argument_list|()
argument_list|)
expr_stmt|;
comment|// upadate 1/4th of the datanode to be full
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|StorageLocationReport
argument_list|>
argument_list|>
name|keyEntry
range|:
name|testData
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|StorageLocationReport
argument_list|>
name|reportSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestSCMNodeStorageStatMap
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-"
operator|+
name|keyEntry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|StorageLocationReport
operator|.
name|Builder
name|builder
init|=
name|StorageLocationReport
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
operator|.
name|setId
argument_list|(
name|keyEntry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setStorageLocation
argument_list|(
name|path
argument_list|)
operator|.
name|setScmUsed
argument_list|(
name|capacity
argument_list|)
operator|.
name|setRemaining
argument_list|(
literal|0
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|capacity
argument_list|)
operator|.
name|setFailed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reportSet
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|updateDatanodeMap
argument_list|(
name|keyEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|reportSet
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
if|if
condition|(
name|counter
operator|>
name|DATANODE_COUNT
operator|/
literal|4
condition|)
block|{
break|break;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DATANODE_COUNT
operator|/
literal|4
argument_list|,
name|map
operator|.
name|getDatanodeList
argument_list|(
name|SCMNodeStorageStatMap
operator|.
name|UtilizationThreshold
operator|.
name|CRITICAL
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|getDatanodeList
argument_list|(
name|SCMNodeStorageStatMap
operator|.
name|UtilizationThreshold
operator|.
name|WARN
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.75
operator|*
name|DATANODE_COUNT
argument_list|,
name|map
operator|.
name|getDatanodeList
argument_list|(
name|SCMNodeStorageStatMap
operator|.
name|UtilizationThreshold
operator|.
name|NORMAL
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DATANODE_COUNT
operator|*
name|capacity
argument_list|,
name|map
operator|.
name|getTotalCapacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.75
operator|*
name|DATANODE_COUNT
operator|*
name|remaining
argument_list|,
name|map
operator|.
name|getTotalFreeSpace
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.75
operator|*
name|DATANODE_COUNT
operator|*
name|used
operator|+
operator|(
literal|0.25
operator|*
name|DATANODE_COUNT
operator|*
name|capacity
operator|)
argument_list|,
name|map
operator|.
name|getTotalSpaceUsed
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|counter
operator|=
literal|1
expr_stmt|;
comment|// Remove 1/4 of the DataNodes from the Map
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|StorageLocationReport
argument_list|>
argument_list|>
name|keyEntry
range|:
name|testData
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|map
operator|.
name|removeDatanode
argument_list|(
name|keyEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
if|if
condition|(
name|counter
operator|>
name|DATANODE_COUNT
operator|/
literal|4
condition|)
block|{
break|break;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|getDatanodeList
argument_list|(
name|SCMNodeStorageStatMap
operator|.
name|UtilizationThreshold
operator|.
name|CRITICAL
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|getDatanodeList
argument_list|(
name|SCMNodeStorageStatMap
operator|.
name|UtilizationThreshold
operator|.
name|WARN
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.75
operator|*
name|DATANODE_COUNT
argument_list|,
name|map
operator|.
name|getDatanodeList
argument_list|(
name|SCMNodeStorageStatMap
operator|.
name|UtilizationThreshold
operator|.
name|NORMAL
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.75
operator|*
name|DATANODE_COUNT
operator|*
name|capacity
argument_list|,
name|map
operator|.
name|getTotalCapacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.75
operator|*
name|DATANODE_COUNT
operator|*
name|remaining
argument_list|,
name|map
operator|.
name|getTotalFreeSpace
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.75
operator|*
name|DATANODE_COUNT
operator|*
name|used
argument_list|,
name|map
operator|.
name|getTotalSpaceUsed
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

