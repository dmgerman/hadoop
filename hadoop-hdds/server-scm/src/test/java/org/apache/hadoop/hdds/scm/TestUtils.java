begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|PipelineAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ClosePipelineInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|PipelineActionsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReplicaProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|PipelineReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|PipelineReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeHeartbeatDispatcher
operator|.
name|PipelineActionsFromDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeHeartbeatDispatcher
operator|.
name|PipelineReportFromDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|NodeReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|CommandStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|CommandStatusReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|StorageReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|StorageTypeProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|SCMNodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMStorageConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|StorageContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|RegisteredCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_ENABLED
import|;
end_import

begin_comment
comment|/**  * Stateless helper functions to handler scm/datanode connection.  */
end_comment

begin_class
DECL|class|TestUtils
specifier|public
specifier|final
class|class
name|TestUtils
block|{
DECL|field|random
specifier|private
specifier|static
name|ThreadLocalRandom
name|random
init|=
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
decl_stmt|;
DECL|method|TestUtils ()
specifier|private
name|TestUtils
parameter_list|()
block|{   }
comment|/**    * Creates DatanodeDetails with random UUID.    *    * @return DatanodeDetails    */
DECL|method|randomDatanodeDetails ()
specifier|public
specifier|static
name|DatanodeDetails
name|randomDatanodeDetails
parameter_list|()
block|{
return|return
name|createDatanodeDetails
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates DatanodeDetails using the given UUID.    *    * @param uuid Datanode's UUID    *    * @return DatanodeDetails    */
DECL|method|createDatanodeDetails (UUID uuid)
specifier|private
specifier|static
name|DatanodeDetails
name|createDatanodeDetails
parameter_list|(
name|UUID
name|uuid
parameter_list|)
block|{
name|String
name|ipAddress
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
operator|+
literal|"."
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
operator|+
literal|"."
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
operator|+
literal|"."
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
decl_stmt|;
return|return
name|createDatanodeDetails
argument_list|(
name|uuid
operator|.
name|toString
argument_list|()
argument_list|,
literal|"localhost"
argument_list|,
name|ipAddress
argument_list|)
return|;
block|}
comment|/**    * Generates DatanodeDetails from RegisteredCommand.    *    * @param registeredCommand registration response from SCM    *    * @return DatanodeDetails    */
DECL|method|getDatanodeDetails ( RegisteredCommand registeredCommand)
specifier|public
specifier|static
name|DatanodeDetails
name|getDatanodeDetails
parameter_list|(
name|RegisteredCommand
name|registeredCommand
parameter_list|)
block|{
return|return
name|createDatanodeDetails
argument_list|(
name|registeredCommand
operator|.
name|getDatanodeUUID
argument_list|()
argument_list|,
name|registeredCommand
operator|.
name|getHostName
argument_list|()
argument_list|,
name|registeredCommand
operator|.
name|getIpAddress
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates DatanodeDetails with the given information.    *    * @param uuid      Datanode's UUID    * @param hostname  hostname of Datanode    * @param ipAddress ip address of Datanode    *    * @return DatanodeDetails    */
DECL|method|createDatanodeDetails (String uuid, String hostname, String ipAddress)
specifier|private
specifier|static
name|DatanodeDetails
name|createDatanodeDetails
parameter_list|(
name|String
name|uuid
parameter_list|,
name|String
name|hostname
parameter_list|,
name|String
name|ipAddress
parameter_list|)
block|{
name|DatanodeDetails
operator|.
name|Port
name|containerPort
init|=
name|DatanodeDetails
operator|.
name|newPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|STANDALONE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DatanodeDetails
operator|.
name|Port
name|ratisPort
init|=
name|DatanodeDetails
operator|.
name|newPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|RATIS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DatanodeDetails
operator|.
name|Port
name|restPort
init|=
name|DatanodeDetails
operator|.
name|newPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|REST
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DatanodeDetails
operator|.
name|Builder
name|builder
init|=
name|DatanodeDetails
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setUuid
argument_list|(
name|uuid
argument_list|)
operator|.
name|setHostName
argument_list|(
name|hostname
argument_list|)
operator|.
name|setIpAddress
argument_list|(
name|ipAddress
argument_list|)
operator|.
name|addPort
argument_list|(
name|containerPort
argument_list|)
operator|.
name|addPort
argument_list|(
name|ratisPort
argument_list|)
operator|.
name|addPort
argument_list|(
name|restPort
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Creates a random DatanodeDetails and register it with the given    * NodeManager.    *    * @param nodeManager NodeManager    *    * @return DatanodeDetails    */
DECL|method|createRandomDatanodeAndRegister ( SCMNodeManager nodeManager)
specifier|public
specifier|static
name|DatanodeDetails
name|createRandomDatanodeAndRegister
parameter_list|(
name|SCMNodeManager
name|nodeManager
parameter_list|)
block|{
return|return
name|getDatanodeDetails
argument_list|(
name|nodeManager
operator|.
name|register
argument_list|(
name|randomDatanodeDetails
argument_list|()
argument_list|,
literal|null
argument_list|,
name|getRandomPipelineReports
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get specified number of DatanodeDetails and register them with node    * manager.    *    * @param nodeManager node manager to register the datanode ids.    * @param count       number of DatanodeDetails needed.    *    * @return list of DatanodeDetails    */
DECL|method|getListOfRegisteredDatanodeDetails ( SCMNodeManager nodeManager, int count)
specifier|public
specifier|static
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|getListOfRegisteredDatanodeDetails
parameter_list|(
name|SCMNodeManager
name|nodeManager
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|datanodes
operator|.
name|add
argument_list|(
name|createRandomDatanodeAndRegister
argument_list|(
name|nodeManager
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|datanodes
return|;
block|}
comment|/**    * Generates a random NodeReport.    *    * @return NodeReportProto    */
DECL|method|getRandomNodeReport ()
specifier|public
specifier|static
name|NodeReportProto
name|getRandomNodeReport
parameter_list|()
block|{
return|return
name|getRandomNodeReport
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**    * Generates random NodeReport with the given number of storage report in it.    *    * @param numberOfStorageReport number of storage report this node report    *                              should have    * @return NodeReportProto    */
DECL|method|getRandomNodeReport (int numberOfStorageReport)
specifier|public
specifier|static
name|NodeReportProto
name|getRandomNodeReport
parameter_list|(
name|int
name|numberOfStorageReport
parameter_list|)
block|{
name|UUID
name|nodeId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
return|return
name|getRandomNodeReport
argument_list|(
name|nodeId
argument_list|,
name|File
operator|.
name|separator
operator|+
name|nodeId
argument_list|,
name|numberOfStorageReport
argument_list|)
return|;
block|}
comment|/**    * Generates random NodeReport for the given nodeId with the given    * base path and number of storage report in it.    *    * @param nodeId                datanode id    * @param basePath              base path of storage directory    * @param numberOfStorageReport number of storage report    *    * @return NodeReportProto    */
DECL|method|getRandomNodeReport (UUID nodeId, String basePath, int numberOfStorageReport)
specifier|public
specifier|static
name|NodeReportProto
name|getRandomNodeReport
parameter_list|(
name|UUID
name|nodeId
parameter_list|,
name|String
name|basePath
parameter_list|,
name|int
name|numberOfStorageReport
parameter_list|)
block|{
name|List
argument_list|<
name|StorageReportProto
argument_list|>
name|storageReports
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfStorageReport
condition|;
name|i
operator|++
control|)
block|{
name|storageReports
operator|.
name|add
argument_list|(
name|getRandomStorageReport
argument_list|(
name|nodeId
argument_list|,
name|basePath
operator|+
name|File
operator|.
name|separator
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|createNodeReport
argument_list|(
name|storageReports
argument_list|)
return|;
block|}
comment|/**    * Creates NodeReport with the given storage reports.    *    * @param reports one or more storage report    *    * @return NodeReportProto    */
DECL|method|createNodeReport ( StorageReportProto... reports)
specifier|public
specifier|static
name|NodeReportProto
name|createNodeReport
parameter_list|(
name|StorageReportProto
modifier|...
name|reports
parameter_list|)
block|{
return|return
name|createNodeReport
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|reports
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Creates NodeReport with the given storage reports.    *    * @param reports storage reports to be included in the node report.    *    * @return NodeReportProto    */
DECL|method|createNodeReport ( List<StorageReportProto> reports)
specifier|public
specifier|static
name|NodeReportProto
name|createNodeReport
parameter_list|(
name|List
argument_list|<
name|StorageReportProto
argument_list|>
name|reports
parameter_list|)
block|{
name|NodeReportProto
operator|.
name|Builder
name|nodeReport
init|=
name|NodeReportProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|nodeReport
operator|.
name|addAllStorageReport
argument_list|(
name|reports
argument_list|)
expr_stmt|;
return|return
name|nodeReport
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Generates random storage report.    *    * @param nodeId datanode id for which the storage report belongs to    * @param path   path of the storage    *    * @return StorageReportProto    */
DECL|method|getRandomStorageReport (UUID nodeId, String path)
specifier|public
specifier|static
name|StorageReportProto
name|getRandomStorageReport
parameter_list|(
name|UUID
name|nodeId
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|createStorageReport
argument_list|(
name|nodeId
argument_list|,
name|path
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
literal|500
argument_list|)
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
literal|500
argument_list|)
argument_list|,
name|StorageTypeProto
operator|.
name|DISK
argument_list|)
return|;
block|}
comment|/**    * Creates storage report with the given information.    *    * @param nodeId    datanode id    * @param path      storage dir    * @param capacity  storage size    * @param used      space used    * @param remaining space remaining    * @param type      type of storage    *    * @return StorageReportProto    */
DECL|method|createStorageReport (UUID nodeId, String path, long capacity, long used, long remaining, StorageTypeProto type)
specifier|public
specifier|static
name|StorageReportProto
name|createStorageReport
parameter_list|(
name|UUID
name|nodeId
parameter_list|,
name|String
name|path
parameter_list|,
name|long
name|capacity
parameter_list|,
name|long
name|used
parameter_list|,
name|long
name|remaining
parameter_list|,
name|StorageTypeProto
name|type
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|StorageReportProto
operator|.
name|Builder
name|srb
init|=
name|StorageReportProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|srb
operator|.
name|setStorageUuid
argument_list|(
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setStorageLocation
argument_list|(
name|path
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|capacity
argument_list|)
operator|.
name|setScmUsed
argument_list|(
name|used
argument_list|)
operator|.
name|setRemaining
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
name|StorageTypeProto
name|storageTypeProto
init|=
name|type
operator|==
literal|null
condition|?
name|StorageTypeProto
operator|.
name|DISK
else|:
name|type
decl_stmt|;
name|srb
operator|.
name|setStorageType
argument_list|(
name|storageTypeProto
argument_list|)
expr_stmt|;
return|return
name|srb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Generates random container reports.    *    * @return ContainerReportsProto    */
DECL|method|getRandomContainerReports ()
specifier|public
specifier|static
name|ContainerReportsProto
name|getRandomContainerReports
parameter_list|()
block|{
return|return
name|getRandomContainerReports
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**    * Generates random container report with the given number of containers.    *    * @param numberOfContainers number of containers to be in container report    *    * @return ContainerReportsProto    */
DECL|method|getRandomContainerReports ( int numberOfContainers)
specifier|public
specifier|static
name|ContainerReportsProto
name|getRandomContainerReports
parameter_list|(
name|int
name|numberOfContainers
parameter_list|)
block|{
name|List
argument_list|<
name|ContainerReplicaProto
argument_list|>
name|containerInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfContainers
condition|;
name|i
operator|++
control|)
block|{
name|containerInfos
operator|.
name|add
argument_list|(
name|getRandomContainerInfo
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|getContainerReports
argument_list|(
name|containerInfos
argument_list|)
return|;
block|}
DECL|method|getRandomPipelineReports ()
specifier|public
specifier|static
name|PipelineReportsProto
name|getRandomPipelineReports
parameter_list|()
block|{
return|return
name|PipelineReportsProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getPipelineReportFromDatanode ( DatanodeDetails dn, PipelineID... pipelineIDs)
specifier|public
specifier|static
name|PipelineReportFromDatanode
name|getPipelineReportFromDatanode
parameter_list|(
name|DatanodeDetails
name|dn
parameter_list|,
name|PipelineID
modifier|...
name|pipelineIDs
parameter_list|)
block|{
name|PipelineReportsProto
operator|.
name|Builder
name|reportBuilder
init|=
name|PipelineReportsProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|PipelineID
name|pipelineID
range|:
name|pipelineIDs
control|)
block|{
name|reportBuilder
operator|.
name|addPipelineReport
argument_list|(
name|PipelineReport
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPipelineID
argument_list|(
name|pipelineID
operator|.
name|getProtobuf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PipelineReportFromDatanode
argument_list|(
name|dn
argument_list|,
name|reportBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getPipelineActionFromDatanode ( DatanodeDetails dn, PipelineID... pipelineIDs)
specifier|public
specifier|static
name|PipelineActionsFromDatanode
name|getPipelineActionFromDatanode
parameter_list|(
name|DatanodeDetails
name|dn
parameter_list|,
name|PipelineID
modifier|...
name|pipelineIDs
parameter_list|)
block|{
name|PipelineActionsProto
operator|.
name|Builder
name|actionsProtoBuilder
init|=
name|PipelineActionsProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|PipelineID
name|pipelineID
range|:
name|pipelineIDs
control|)
block|{
name|ClosePipelineInfo
name|closePipelineInfo
init|=
name|ClosePipelineInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPipelineID
argument_list|(
name|pipelineID
operator|.
name|getProtobuf
argument_list|()
argument_list|)
operator|.
name|setReason
argument_list|(
name|ClosePipelineInfo
operator|.
name|Reason
operator|.
name|PIPELINE_FAILED
argument_list|)
operator|.
name|setDetailedReason
argument_list|(
literal|""
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|actionsProtoBuilder
operator|.
name|addPipelineActions
argument_list|(
name|PipelineAction
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClosePipeline
argument_list|(
name|closePipelineInfo
argument_list|)
operator|.
name|setAction
argument_list|(
name|PipelineAction
operator|.
name|Action
operator|.
name|CLOSE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PipelineActionsFromDatanode
argument_list|(
name|dn
argument_list|,
name|actionsProtoBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates container report with the given ContainerInfo(s).    *    * @param containerInfos one or more ContainerInfo    *    * @return ContainerReportsProto    */
DECL|method|getContainerReports ( ContainerReplicaProto... containerInfos)
specifier|public
specifier|static
name|ContainerReportsProto
name|getContainerReports
parameter_list|(
name|ContainerReplicaProto
modifier|...
name|containerInfos
parameter_list|)
block|{
return|return
name|getContainerReports
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|containerInfos
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Creates container report with the given ContainerInfo(s).    *    * @param containerInfos list of ContainerInfo    *    * @return ContainerReportsProto    */
DECL|method|getContainerReports ( List<ContainerReplicaProto> containerInfos)
specifier|public
specifier|static
name|ContainerReportsProto
name|getContainerReports
parameter_list|(
name|List
argument_list|<
name|ContainerReplicaProto
argument_list|>
name|containerInfos
parameter_list|)
block|{
name|ContainerReportsProto
operator|.
name|Builder
name|reportsBuilder
init|=
name|ContainerReportsProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerReplicaProto
name|containerInfo
range|:
name|containerInfos
control|)
block|{
name|reportsBuilder
operator|.
name|addReports
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|reportsBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Generates random ContainerInfo.    *    * @param containerId container id of the ContainerInfo    *    * @return ContainerInfo    */
DECL|method|getRandomContainerInfo ( long containerId)
specifier|public
specifier|static
name|ContainerReplicaProto
name|getRandomContainerInfo
parameter_list|(
name|long
name|containerId
parameter_list|)
block|{
return|return
name|createContainerInfo
argument_list|(
name|containerId
argument_list|,
name|OzoneConsts
operator|.
name|GB
operator|*
literal|5
argument_list|,
name|random
operator|.
name|nextLong
argument_list|(
literal|1000
argument_list|)
argument_list|,
name|OzoneConsts
operator|.
name|GB
operator|*
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
name|random
operator|.
name|nextLong
argument_list|(
literal|1000
argument_list|)
argument_list|,
name|OzoneConsts
operator|.
name|GB
operator|*
name|random
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
argument_list|,
name|random
operator|.
name|nextLong
argument_list|(
literal|1000
argument_list|)
argument_list|,
name|OzoneConsts
operator|.
name|GB
operator|*
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Creates ContainerInfo with the given details.    *    * @param containerId id of the container    * @param size        size of container    * @param keyCount    number of keys    * @param bytesUsed   bytes used by the container    * @param readCount   number of reads    * @param readBytes   bytes read    * @param writeCount  number of writes    * @param writeBytes  bytes written    *    * @return ContainerInfo    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"parameternumber"
argument_list|)
DECL|method|createContainerInfo ( long containerId, long size, long keyCount, long bytesUsed, long readCount, long readBytes, long writeCount, long writeBytes)
specifier|public
specifier|static
name|ContainerReplicaProto
name|createContainerInfo
parameter_list|(
name|long
name|containerId
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|keyCount
parameter_list|,
name|long
name|bytesUsed
parameter_list|,
name|long
name|readCount
parameter_list|,
name|long
name|readBytes
parameter_list|,
name|long
name|writeCount
parameter_list|,
name|long
name|writeBytes
parameter_list|)
block|{
return|return
name|ContainerReplicaProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerID
argument_list|(
name|containerId
argument_list|)
operator|.
name|setState
argument_list|(
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|OPEN
argument_list|)
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
operator|.
name|setKeyCount
argument_list|(
name|keyCount
argument_list|)
operator|.
name|setUsed
argument_list|(
name|bytesUsed
argument_list|)
operator|.
name|setReadCount
argument_list|(
name|readCount
argument_list|)
operator|.
name|setReadBytes
argument_list|(
name|readBytes
argument_list|)
operator|.
name|setWriteCount
argument_list|(
name|writeCount
argument_list|)
operator|.
name|setWriteBytes
argument_list|(
name|writeBytes
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Create Command Status report object.    * @return CommandStatusReportsProto    */
DECL|method|createCommandStatusReport ( List<CommandStatus> reports)
specifier|public
specifier|static
name|CommandStatusReportsProto
name|createCommandStatusReport
parameter_list|(
name|List
argument_list|<
name|CommandStatus
argument_list|>
name|reports
parameter_list|)
block|{
name|CommandStatusReportsProto
operator|.
name|Builder
name|report
init|=
name|CommandStatusReportsProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|report
operator|.
name|addAllCmdStatus
argument_list|(
name|reports
argument_list|)
expr_stmt|;
return|return
name|report
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerInfo
DECL|method|allocateContainer (ContainerManager containerManager)
name|allocateContainer
parameter_list|(
name|ContainerManager
name|containerManager
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|containerManager
operator|.
name|allocateContainer
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
literal|"root"
argument_list|)
return|;
block|}
DECL|method|closeContainer (ContainerManager containerManager, ContainerID id)
specifier|public
specifier|static
name|void
name|closeContainer
parameter_list|(
name|ContainerManager
name|containerManager
parameter_list|,
name|ContainerID
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|containerManager
operator|.
name|updateContainerState
argument_list|(
name|id
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|FINALIZE
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|updateContainerState
argument_list|(
name|id
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Move the container to Quaise close state.    * @param containerManager    * @param id    * @throws IOException    */
DECL|method|quasiCloseContainer (ContainerManager containerManager, ContainerID id)
specifier|public
specifier|static
name|void
name|quasiCloseContainer
parameter_list|(
name|ContainerManager
name|containerManager
parameter_list|,
name|ContainerID
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|containerManager
operator|.
name|updateContainerState
argument_list|(
name|id
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|FINALIZE
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|updateContainerState
argument_list|(
name|id
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|QUASI_CLOSE
argument_list|)
expr_stmt|;
block|}
DECL|method|getScm (OzoneConfiguration conf)
specifier|public
specifier|static
name|StorageContainerManager
name|getScm
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|OZONE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SCMStorageConfig
name|scmStore
init|=
operator|new
name|SCMStorageConfig
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|scmStore
operator|.
name|getState
argument_list|()
operator|!=
name|Storage
operator|.
name|StorageState
operator|.
name|INITIALIZED
condition|)
block|{
name|String
name|clusterId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|scmId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|scmStore
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
name|scmStore
operator|.
name|setScmId
argument_list|(
name|scmId
argument_list|)
expr_stmt|;
comment|// writes the version file properties
name|scmStore
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
return|return
name|StorageContainerManager
operator|.
name|createSCM
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
end_class

end_unit

