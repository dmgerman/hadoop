begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container.placement.algorithms
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|metrics
operator|.
name|SCMNodeMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetworkTopologyImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NodeSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NodeSchemaManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
operator|.
name|LEAF_SCHEMA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
operator|.
name|RACK_SCHEMA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
operator|.
name|ROOT_SCHEMA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test for the scm container rack aware placement.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestSCMContainerPlacementRackAware
specifier|public
class|class
name|TestSCMContainerPlacementRackAware
block|{
DECL|field|cluster
specifier|private
name|NetworkTopology
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|nodeManager
specifier|private
name|NodeManager
name|nodeManager
decl_stmt|;
DECL|field|datanodeCount
specifier|private
name|Integer
name|datanodeCount
decl_stmt|;
DECL|field|datanodes
specifier|private
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// policy with fallback capability
DECL|field|policy
specifier|private
name|SCMContainerPlacementRackAware
name|policy
decl_stmt|;
comment|// policy prohibit fallback
DECL|field|policyNoFallback
specifier|private
name|SCMContainerPlacementRackAware
name|policyNoFallback
decl_stmt|;
comment|// node storage capacity
DECL|field|STORAGE_CAPACITY
specifier|private
specifier|static
specifier|final
name|long
name|STORAGE_CAPACITY
init|=
literal|100L
decl_stmt|;
DECL|field|metrics
specifier|private
name|SCMContainerPlacementMetrics
name|metrics
decl_stmt|;
DECL|field|NODE_PER_RACK
specifier|private
specifier|static
specifier|final
name|int
name|NODE_PER_RACK
init|=
literal|5
decl_stmt|;
DECL|method|TestSCMContainerPlacementRackAware (Integer count)
specifier|public
name|TestSCMContainerPlacementRackAware
parameter_list|(
name|Integer
name|count
parameter_list|)
block|{
name|this
operator|.
name|datanodeCount
operator|=
name|count
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|setupDatanodes ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|setupDatanodes
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|3
block|}
block|,
block|{
literal|4
block|}
block|,
block|{
literal|5
block|}
block|,
block|{
literal|6
block|}
block|,
block|{
literal|7
block|}
block|,
block|{
literal|8
block|}
block|,
block|{
literal|9
block|}
block|,
block|{
literal|10
block|}
block|,
block|{
literal|11
block|}
block|,
block|{
literal|12
block|}
block|,
block|{
literal|13
block|}
block|,
block|{
literal|14
block|}
block|,
block|{
literal|15
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
comment|//initialize network topology instance
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|NodeSchema
index|[]
name|schemas
init|=
operator|new
name|NodeSchema
index|[]
block|{
name|ROOT_SCHEMA
block|,
name|RACK_SCHEMA
block|,
name|LEAF_SCHEMA
block|}
decl_stmt|;
name|NodeSchemaManager
operator|.
name|getInstance
argument_list|()
operator|.
name|init
argument_list|(
name|schemas
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|NetworkTopologyImpl
argument_list|(
name|NodeSchemaManager
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
comment|// build datanodes, and network topology
name|String
name|rack
init|=
literal|"/rack"
decl_stmt|;
name|String
name|hostname
init|=
literal|"node"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|datanodeCount
condition|;
name|i
operator|++
control|)
block|{
comment|// Totally 3 racks, each has 5 datanodes
name|DatanodeDetails
name|node
init|=
name|TestUtils
operator|.
name|createDatanodeDetails
argument_list|(
name|hostname
operator|+
name|i
argument_list|,
name|rack
operator|+
operator|(
name|i
operator|/
name|NODE_PER_RACK
operator|)
argument_list|)
decl_stmt|;
name|datanodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
comment|// create mock node manager
name|nodeManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NodeManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|NodeState
operator|.
name|HEALTHY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|datanodes
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|SCMNodeMetric
argument_list|(
name|STORAGE_CAPACITY
argument_list|,
literal|0L
argument_list|,
literal|100L
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|datanodeCount
operator|>
literal|4
condition|)
block|{
name|when
argument_list|(
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|SCMNodeMetric
argument_list|(
name|STORAGE_CAPACITY
argument_list|,
literal|90L
argument_list|,
literal|10L
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|SCMNodeMetric
argument_list|(
name|STORAGE_CAPACITY
argument_list|,
literal|80L
argument_list|,
literal|20L
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|SCMNodeMetric
argument_list|(
name|STORAGE_CAPACITY
argument_list|,
literal|70L
argument_list|,
literal|30L
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|datanodeCount
operator|>
literal|3
condition|)
block|{
name|when
argument_list|(
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|SCMNodeMetric
argument_list|(
name|STORAGE_CAPACITY
argument_list|,
literal|90L
argument_list|,
literal|10L
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|SCMNodeMetric
argument_list|(
name|STORAGE_CAPACITY
argument_list|,
literal|80L
argument_list|,
literal|20L
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|datanodeCount
operator|>
literal|2
condition|)
block|{
name|when
argument_list|(
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|SCMNodeMetric
argument_list|(
name|STORAGE_CAPACITY
argument_list|,
literal|84L
argument_list|,
literal|16L
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// create placement policy instances
name|metrics
operator|=
name|SCMContainerPlacementMetrics
operator|.
name|create
argument_list|()
expr_stmt|;
name|policy
operator|=
operator|new
name|SCMContainerPlacementRackAware
argument_list|(
name|nodeManager
argument_list|,
name|conf
argument_list|,
name|cluster
argument_list|,
literal|true
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
name|policyNoFallback
operator|=
operator|new
name|SCMContainerPlacementRackAware
argument_list|(
name|nodeManager
argument_list|,
name|conf
argument_list|,
name|cluster
argument_list|,
literal|false
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|chooseNodeWithNoExcludedNodes ()
specifier|public
name|void
name|chooseNodeWithNoExcludedNodes
parameter_list|()
throws|throws
name|SCMException
block|{
comment|// test choose new datanodes for new pipeline cases
comment|// 1 replica
name|int
name|nodeNum
init|=
literal|1
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodeDetails
init|=
name|policy
operator|.
name|chooseDatanodes
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|nodeNum
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodeNum
argument_list|,
name|datanodeDetails
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2 replicas
name|nodeNum
operator|=
literal|2
expr_stmt|;
name|datanodeDetails
operator|=
name|policy
operator|.
name|chooseDatanodes
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|nodeNum
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodeNum
argument_list|,
name|datanodeDetails
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|||
operator|(
name|datanodeCount
operator|%
name|NODE_PER_RACK
operator|==
literal|1
operator|)
argument_list|)
expr_stmt|;
comment|//  3 replicas
name|nodeNum
operator|=
literal|3
expr_stmt|;
name|datanodeDetails
operator|=
name|policy
operator|.
name|chooseDatanodes
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|nodeNum
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodeNum
argument_list|,
name|datanodeDetails
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// requires at least 2 racks for following statement
name|assumeTrue
argument_list|(
name|datanodeCount
operator|>
name|NODE_PER_RACK
operator|&&
name|datanodeCount
operator|%
name|NODE_PER_RACK
operator|>
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//  4 replicas
name|nodeNum
operator|=
literal|4
expr_stmt|;
name|datanodeDetails
operator|=
name|policy
operator|.
name|chooseDatanodes
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|nodeNum
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodeNum
argument_list|,
name|datanodeDetails
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// requires at least 2 racks and enough datanodes for following statement
name|assumeTrue
argument_list|(
name|datanodeCount
operator|>
name|NODE_PER_RACK
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|chooseNodeWithExcludedNodes ()
specifier|public
name|void
name|chooseNodeWithExcludedNodes
parameter_list|()
throws|throws
name|SCMException
block|{
comment|// test choose new datanodes for under replicated pipeline
comment|// 3 replicas, two existing datanodes on same rack
name|assumeTrue
argument_list|(
name|datanodeCount
operator|>
name|NODE_PER_RACK
argument_list|)
expr_stmt|;
name|int
name|nodeNum
init|=
literal|1
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|excludedNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodeDetails
init|=
name|policy
operator|.
name|chooseDatanodes
argument_list|(
name|excludedNodes
argument_list|,
literal|null
argument_list|,
name|nodeNum
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodeNum
argument_list|,
name|datanodeDetails
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|excludedNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|excludedNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3 replicas, one existing datanode
name|nodeNum
operator|=
literal|2
expr_stmt|;
name|excludedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|datanodeDetails
operator|=
name|policy
operator|.
name|chooseDatanodes
argument_list|(
name|excludedNodes
argument_list|,
literal|null
argument_list|,
name|nodeNum
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodeNum
argument_list|,
name|datanodeDetails
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|excludedNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|excludedNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3 replicas, two existing datanodes on different rack
name|nodeNum
operator|=
literal|1
expr_stmt|;
name|excludedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|datanodeDetails
operator|=
name|policy
operator|.
name|chooseDatanodes
argument_list|(
name|excludedNodes
argument_list|,
literal|null
argument_list|,
name|nodeNum
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodeNum
argument_list|,
name|datanodeDetails
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|excludedNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|excludedNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFallback ()
specifier|public
name|void
name|testFallback
parameter_list|()
throws|throws
name|SCMException
block|{
comment|// 5 replicas. there are only 3 racks. policy with fallback should
comment|// allocate the 5th datanode though it will break the rack rule(first
comment|// 2 replicas on same rack, others on different racks).
name|assumeTrue
argument_list|(
name|datanodeCount
operator|>
name|NODE_PER_RACK
operator|*
literal|2
operator|&&
operator|(
name|datanodeCount
operator|%
name|NODE_PER_RACK
operator|>
literal|1
operator|)
argument_list|)
expr_stmt|;
name|int
name|nodeNum
init|=
literal|5
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodeDetails
init|=
name|policy
operator|.
name|chooseDatanodes
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|nodeNum
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodeNum
argument_list|,
name|datanodeDetails
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// get metrics
name|long
name|totalRequest
init|=
name|metrics
operator|.
name|getDatanodeRequestCount
argument_list|()
decl_stmt|;
name|long
name|successCount
init|=
name|metrics
operator|.
name|getDatanodeChooseSuccessCount
argument_list|()
decl_stmt|;
name|long
name|tryCount
init|=
name|metrics
operator|.
name|getDatanodeChooseAttemptCount
argument_list|()
decl_stmt|;
name|long
name|compromiseCount
init|=
name|metrics
operator|.
name|getDatanodeChooseFallbackCount
argument_list|()
decl_stmt|;
comment|// verify metrics
name|Assert
operator|.
name|assertTrue
argument_list|(
name|totalRequest
operator|==
name|nodeNum
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|successCount
operator|==
name|nodeNum
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tryCount
operator|>
name|nodeNum
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|compromiseCount
operator|>=
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoFallback ()
specifier|public
name|void
name|testNoFallback
parameter_list|()
throws|throws
name|SCMException
block|{
name|assumeTrue
argument_list|(
name|datanodeCount
operator|>
operator|(
name|NODE_PER_RACK
operator|*
literal|2
operator|)
operator|&&
operator|(
name|datanodeCount
operator|<=
name|NODE_PER_RACK
operator|*
literal|3
operator|)
argument_list|)
expr_stmt|;
comment|// 5 replicas. there are only 3 racks. policy prohibit fallback should fail.
name|int
name|nodeNum
init|=
literal|5
decl_stmt|;
try|try
block|{
name|policyNoFallback
operator|.
name|chooseDatanodes
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|nodeNum
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Fallback prohibited, this call should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"SCMException"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// get metrics
name|long
name|totalRequest
init|=
name|metrics
operator|.
name|getDatanodeRequestCount
argument_list|()
decl_stmt|;
name|long
name|successCount
init|=
name|metrics
operator|.
name|getDatanodeChooseSuccessCount
argument_list|()
decl_stmt|;
name|long
name|tryCount
init|=
name|metrics
operator|.
name|getDatanodeChooseAttemptCount
argument_list|()
decl_stmt|;
name|long
name|compromiseCount
init|=
name|metrics
operator|.
name|getDatanodeChooseFallbackCount
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|totalRequest
operator|==
name|nodeNum
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|successCount
operator|>=
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tryCount
operator|>=
name|nodeNum
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|compromiseCount
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|chooseNodeWithFavoredNodes ()
specifier|public
name|void
name|chooseNodeWithFavoredNodes
parameter_list|()
throws|throws
name|SCMException
block|{
name|int
name|nodeNum
init|=
literal|1
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|excludedNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|favoredNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// no excludedNodes, only favoredNodes
name|favoredNodes
operator|.
name|add
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodeDetails
init|=
name|policy
operator|.
name|chooseDatanodes
argument_list|(
name|excludedNodes
argument_list|,
name|favoredNodes
argument_list|,
name|nodeNum
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodeNum
argument_list|,
name|datanodeDetails
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNetworkFullPath
argument_list|()
operator|.
name|equals
argument_list|(
name|favoredNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNetworkFullPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// no overlap between excludedNodes and favoredNodes, favoredNodes can been
comment|// chosen.
name|excludedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|favoredNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|favoredNodes
operator|.
name|add
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|datanodeDetails
operator|=
name|policy
operator|.
name|chooseDatanodes
argument_list|(
name|excludedNodes
argument_list|,
name|favoredNodes
argument_list|,
name|nodeNum
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodeNum
argument_list|,
name|datanodeDetails
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNetworkFullPath
argument_list|()
operator|.
name|equals
argument_list|(
name|favoredNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNetworkFullPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// there is overlap between excludedNodes and favoredNodes, favoredNodes
comment|// should not be chosen.
name|excludedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|favoredNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|favoredNodes
operator|.
name|add
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|datanodeDetails
operator|=
name|policy
operator|.
name|chooseDatanodes
argument_list|(
name|excludedNodes
argument_list|,
name|favoredNodes
argument_list|,
name|nodeNum
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodeNum
argument_list|,
name|datanodeDetails
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNetworkFullPath
argument_list|()
operator|.
name|equals
argument_list|(
name|favoredNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNetworkFullPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoInfiniteLoop ()
specifier|public
name|void
name|testNoInfiniteLoop
parameter_list|()
throws|throws
name|SCMException
block|{
name|int
name|nodeNum
init|=
literal|1
decl_stmt|;
try|try
block|{
comment|// request storage space larger than node capability
name|policy
operator|.
name|chooseDatanodes
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|nodeNum
argument_list|,
name|STORAGE_CAPACITY
operator|+
literal|15
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Storage requested exceeds capacity, this call should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"SCMException"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// get metrics
name|long
name|totalRequest
init|=
name|metrics
operator|.
name|getDatanodeRequestCount
argument_list|()
decl_stmt|;
name|long
name|successCount
init|=
name|metrics
operator|.
name|getDatanodeChooseSuccessCount
argument_list|()
decl_stmt|;
name|long
name|tryCount
init|=
name|metrics
operator|.
name|getDatanodeChooseAttemptCount
argument_list|()
decl_stmt|;
name|long
name|compromiseCount
init|=
name|metrics
operator|.
name|getDatanodeChooseFallbackCount
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|totalRequest
operator|==
name|nodeNum
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|successCount
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tryCount
operator|>
name|nodeNum
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|compromiseCount
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatanodeWithDefaultNetworkLocation ()
specifier|public
name|void
name|testDatanodeWithDefaultNetworkLocation
parameter_list|()
throws|throws
name|SCMException
block|{
name|String
name|hostname
init|=
literal|"node"
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|dataList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|NetworkTopology
name|clusterMap
init|=
operator|new
name|NetworkTopologyImpl
argument_list|(
name|NodeSchemaManager
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|15
condition|;
name|i
operator|++
control|)
block|{
comment|// Totally 3 racks, each has 5 datanodes
name|DatanodeDetails
name|node
init|=
name|TestUtils
operator|.
name|createDatanodeDetails
argument_list|(
name|hostname
operator|+
name|i
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dataList
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|clusterMap
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataList
operator|.
name|size
argument_list|()
argument_list|,
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|clusterMap
operator|.
name|toString
argument_list|()
argument_list|,
name|NetConstants
operator|.
name|DEFAULT_RACK
argument_list|)
argument_list|)
expr_stmt|;
comment|// choose nodes to host 3 replica
name|int
name|nodeNum
init|=
literal|3
decl_stmt|;
name|SCMContainerPlacementRackAware
name|newPolicy
init|=
operator|new
name|SCMContainerPlacementRackAware
argument_list|(
name|nodeManager
argument_list|,
name|conf
argument_list|,
name|clusterMap
argument_list|,
literal|true
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodeDetails
init|=
name|newPolicy
operator|.
name|chooseDatanodes
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|nodeNum
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodeNum
argument_list|,
name|datanodeDetails
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

