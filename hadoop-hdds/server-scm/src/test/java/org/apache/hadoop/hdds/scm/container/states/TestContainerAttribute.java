begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container.states
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|states
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test ContainerAttribute management.  */
end_comment

begin_class
DECL|class|TestContainerAttribute
specifier|public
class|class
name|TestContainerAttribute
block|{
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testInsert ()
specifier|public
name|void
name|testInsert
parameter_list|()
throws|throws
name|SCMException
block|{
name|ContainerAttribute
argument_list|<
name|Integer
argument_list|>
name|containerAttribute
init|=
operator|new
name|ContainerAttribute
argument_list|<>
argument_list|()
decl_stmt|;
name|ContainerID
name|id
init|=
operator|new
name|ContainerID
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|containerAttribute
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containerAttribute
operator|.
name|getCollection
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerAttribute
operator|.
name|getCollection
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
comment|// Insert again and verify that it overwrites an existing value.
name|ContainerID
name|newId
init|=
operator|new
name|ContainerID
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|containerAttribute
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
name|newId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containerAttribute
operator|.
name|getCollection
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerAttribute
operator|.
name|getCollection
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
name|newId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHasKey ()
specifier|public
name|void
name|testHasKey
parameter_list|()
throws|throws
name|SCMException
block|{
name|ContainerAttribute
argument_list|<
name|Integer
argument_list|>
name|containerAttribute
init|=
operator|new
name|ContainerAttribute
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<
literal|42
condition|;
name|x
operator|++
control|)
block|{
name|containerAttribute
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
operator|new
name|ContainerID
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerAttribute
operator|.
name|hasKey
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<
literal|42
condition|;
name|x
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerAttribute
operator|.
name|hasContainerID
argument_list|(
literal|1
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|containerAttribute
operator|.
name|hasContainerID
argument_list|(
literal|1
argument_list|,
operator|new
name|ContainerID
argument_list|(
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClearSet ()
specifier|public
name|void
name|testClearSet
parameter_list|()
throws|throws
name|SCMException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keyslist
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Key1"
argument_list|,
literal|"Key2"
argument_list|,
literal|"Key3"
argument_list|)
decl_stmt|;
name|ContainerAttribute
argument_list|<
name|String
argument_list|>
name|containerAttribute
init|=
operator|new
name|ContainerAttribute
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|k
range|:
name|keyslist
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<
literal|101
condition|;
name|x
operator|++
control|)
block|{
name|containerAttribute
operator|.
name|insert
argument_list|(
name|k
argument_list|,
operator|new
name|ContainerID
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|k
range|:
name|keyslist
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|containerAttribute
operator|.
name|getCollection
argument_list|(
name|k
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|containerAttribute
operator|.
name|clearSet
argument_list|(
literal|"Key1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|containerAttribute
operator|.
name|getCollection
argument_list|(
literal|"Key1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemove ()
specifier|public
name|void
name|testRemove
parameter_list|()
throws|throws
name|SCMException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keyslist
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Key1"
argument_list|,
literal|"Key2"
argument_list|,
literal|"Key3"
argument_list|)
decl_stmt|;
name|ContainerAttribute
argument_list|<
name|String
argument_list|>
name|containerAttribute
init|=
operator|new
name|ContainerAttribute
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|k
range|:
name|keyslist
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<
literal|101
condition|;
name|x
operator|++
control|)
block|{
name|containerAttribute
operator|.
name|insert
argument_list|(
name|k
argument_list|,
operator|new
name|ContainerID
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<
literal|101
condition|;
name|x
operator|+=
literal|2
control|)
block|{
name|containerAttribute
operator|.
name|remove
argument_list|(
literal|"Key1"
argument_list|,
operator|new
name|ContainerID
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<
literal|101
condition|;
name|x
operator|+=
literal|2
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|containerAttribute
operator|.
name|hasContainerID
argument_list|(
literal|"Key1"
argument_list|,
operator|new
name|ContainerID
argument_list|(
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|containerAttribute
operator|.
name|getCollection
argument_list|(
literal|"Key2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|containerAttribute
operator|.
name|getCollection
argument_list|(
literal|"Key3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|containerAttribute
operator|.
name|getCollection
argument_list|(
literal|"Key1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|tesUpdate ()
specifier|public
name|void
name|tesUpdate
parameter_list|()
throws|throws
name|SCMException
block|{
name|String
name|key1
init|=
literal|"Key1"
decl_stmt|;
name|String
name|key2
init|=
literal|"Key2"
decl_stmt|;
name|String
name|key3
init|=
literal|"Key3"
decl_stmt|;
name|ContainerAttribute
argument_list|<
name|String
argument_list|>
name|containerAttribute
init|=
operator|new
name|ContainerAttribute
argument_list|<>
argument_list|()
decl_stmt|;
name|ContainerID
name|id
init|=
operator|new
name|ContainerID
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|containerAttribute
operator|.
name|insert
argument_list|(
name|key1
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerAttribute
operator|.
name|hasContainerID
argument_list|(
name|key1
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|containerAttribute
operator|.
name|hasContainerID
argument_list|(
name|key2
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
comment|// This should move the id from key1 bucket to key2 bucket.
name|containerAttribute
operator|.
name|update
argument_list|(
name|key1
argument_list|,
name|key2
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|containerAttribute
operator|.
name|hasContainerID
argument_list|(
name|key1
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerAttribute
operator|.
name|hasContainerID
argument_list|(
name|key2
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
comment|// This should fail since we cannot find this id in the key3 bucket.
name|thrown
operator|.
name|expect
argument_list|(
name|SCMException
operator|.
name|class
argument_list|)
expr_stmt|;
name|containerAttribute
operator|.
name|update
argument_list|(
name|key3
argument_list|,
name|key1
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

