begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|LifeCycleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReplicaProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|states
operator|.
name|NodeNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeHeartbeatDispatcher
operator|.
name|ContainerReportFromDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
operator|.
name|getReplicas
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
operator|.
name|getContainer
import|;
end_import

begin_comment
comment|/**  * Test the behaviour of the ContainerReportHandler.  */
end_comment

begin_class
DECL|class|TestContainerReportHandler
specifier|public
class|class
name|TestContainerReportHandler
block|{
DECL|field|nodeManager
specifier|private
name|NodeManager
name|nodeManager
decl_stmt|;
DECL|field|containerManager
specifier|private
name|ContainerManager
name|containerManager
decl_stmt|;
DECL|field|containerStateManager
specifier|private
name|ContainerStateManager
name|containerStateManager
decl_stmt|;
DECL|field|publisher
specifier|private
name|EventPublisher
name|publisher
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|this
operator|.
name|nodeManager
operator|=
operator|new
name|MockNodeManager
argument_list|(
literal|true
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ContainerManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerStateManager
operator|=
operator|new
name|ContainerStateManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|publisher
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|EventPublisher
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|containerManager
operator|.
name|getContainer
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|ContainerID
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
name|containerStateManager
operator|.
name|getContainer
argument_list|(
operator|(
name|ContainerID
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|containerManager
operator|.
name|getContainerReplicas
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|ContainerID
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
name|containerStateManager
operator|.
name|getContainerReplicas
argument_list|(
operator|(
name|ContainerID
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|containerStateManager
operator|.
name|updateContainerState
argument_list|(
operator|(
name|ContainerID
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|,
operator|(
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|containerManager
argument_list|)
operator|.
name|updateContainerState
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|ContainerID
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
operator|(
name|ContainerID
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|,
operator|(
name|ContainerReplica
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|containerManager
argument_list|)
operator|.
name|updateContainerReplica
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|ContainerID
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|ContainerReplica
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|containerStateManager
operator|.
name|removeContainerReplica
argument_list|(
operator|(
name|ContainerID
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|,
operator|(
name|ContainerReplica
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|containerManager
argument_list|)
operator|.
name|removeContainerReplica
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|ContainerID
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|ContainerReplica
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|containerStateManager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnderReplicatedContainer ()
specifier|public
name|void
name|testUnderReplicatedContainer
parameter_list|()
throws|throws
name|NodeNotFoundException
throws|,
name|ContainerNotFoundException
throws|,
name|SCMException
block|{
specifier|final
name|ContainerReportHandler
name|reportHandler
init|=
operator|new
name|ContainerReportHandler
argument_list|(
name|nodeManager
argument_list|,
name|containerManager
argument_list|)
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|DatanodeDetails
argument_list|>
name|nodeIterator
init|=
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|NodeState
operator|.
name|HEALTHY
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDetails
name|datanodeOne
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDetails
name|datanodeTwo
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDetails
name|datanodeThree
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|ContainerInfo
name|containerOne
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|CLOSED
argument_list|)
decl_stmt|;
specifier|final
name|ContainerInfo
name|containerTwo
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|CLOSED
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|containerIDSet
init|=
name|Stream
operator|.
name|of
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|nodeManager
operator|.
name|setContainers
argument_list|(
name|datanodeOne
argument_list|,
name|containerIDSet
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|setContainers
argument_list|(
name|datanodeTwo
argument_list|,
name|containerIDSet
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|setContainers
argument_list|(
name|datanodeThree
argument_list|,
name|containerIDSet
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|containerOne
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|containerTwo
argument_list|)
expr_stmt|;
name|getReplicas
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|CLOSED
argument_list|,
name|datanodeOne
argument_list|,
name|datanodeTwo
argument_list|,
name|datanodeThree
argument_list|)
operator|.
name|forEach
argument_list|(
name|r
lambda|->
block|{
try|try
block|{
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerNotFoundException
name|ignored
parameter_list|)
block|{            }
block|}
argument_list|)
expr_stmt|;
name|getReplicas
argument_list|(
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|,
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|CLOSED
argument_list|,
name|datanodeOne
argument_list|,
name|datanodeTwo
argument_list|,
name|datanodeThree
argument_list|)
operator|.
name|forEach
argument_list|(
name|r
lambda|->
block|{
try|try
block|{
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerNotFoundException
name|ignored
parameter_list|)
block|{            }
block|}
argument_list|)
expr_stmt|;
comment|// SCM expects both containerOne and containerTwo to be in all the three
comment|// datanodes datanodeOne, datanodeTwo and datanodeThree
comment|// Now datanodeOne is sending container report in which containerOne is
comment|// missing.
comment|// containerOne becomes under replicated.
specifier|final
name|ContainerReportsProto
name|containerReport
init|=
name|getContainerReportsProto
argument_list|(
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|,
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|CLOSED
argument_list|,
name|datanodeOne
operator|.
name|getUuidString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerReportFromDatanode
name|containerReportFromDatanode
init|=
operator|new
name|ContainerReportFromDatanode
argument_list|(
name|datanodeOne
argument_list|,
name|containerReport
argument_list|)
decl_stmt|;
name|reportHandler
operator|.
name|onMessage
argument_list|(
name|containerReportFromDatanode
argument_list|,
name|publisher
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containerManager
operator|.
name|getContainerReplicas
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOverReplicatedContainer ()
specifier|public
name|void
name|testOverReplicatedContainer
parameter_list|()
throws|throws
name|NodeNotFoundException
throws|,
name|SCMException
throws|,
name|ContainerNotFoundException
block|{
specifier|final
name|ContainerReportHandler
name|reportHandler
init|=
operator|new
name|ContainerReportHandler
argument_list|(
name|nodeManager
argument_list|,
name|containerManager
argument_list|)
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|DatanodeDetails
argument_list|>
name|nodeIterator
init|=
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|NodeState
operator|.
name|HEALTHY
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDetails
name|datanodeOne
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDetails
name|datanodeTwo
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDetails
name|datanodeThree
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDetails
name|datanodeFour
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|ContainerInfo
name|containerOne
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|CLOSED
argument_list|)
decl_stmt|;
specifier|final
name|ContainerInfo
name|containerTwo
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|CLOSED
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|containerIDSet
init|=
name|Stream
operator|.
name|of
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|nodeManager
operator|.
name|setContainers
argument_list|(
name|datanodeOne
argument_list|,
name|containerIDSet
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|setContainers
argument_list|(
name|datanodeTwo
argument_list|,
name|containerIDSet
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|setContainers
argument_list|(
name|datanodeThree
argument_list|,
name|containerIDSet
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|containerOne
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|containerTwo
argument_list|)
expr_stmt|;
name|getReplicas
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|CLOSED
argument_list|,
name|datanodeOne
argument_list|,
name|datanodeTwo
argument_list|,
name|datanodeThree
argument_list|)
operator|.
name|forEach
argument_list|(
name|r
lambda|->
block|{
try|try
block|{
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerNotFoundException
name|ignored
parameter_list|)
block|{            }
block|}
argument_list|)
expr_stmt|;
name|getReplicas
argument_list|(
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|,
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|CLOSED
argument_list|,
name|datanodeOne
argument_list|,
name|datanodeTwo
argument_list|,
name|datanodeThree
argument_list|)
operator|.
name|forEach
argument_list|(
name|r
lambda|->
block|{
try|try
block|{
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerNotFoundException
name|ignored
parameter_list|)
block|{            }
block|}
argument_list|)
expr_stmt|;
comment|// SCM expects both containerOne and containerTwo to be in all the three
comment|// datanodes datanodeOne, datanodeTwo and datanodeThree
comment|// Now datanodeFour is sending container report which has containerOne.
comment|// containerOne becomes over replicated.
specifier|final
name|ContainerReportsProto
name|containerReport
init|=
name|getContainerReportsProto
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|CLOSED
argument_list|,
name|datanodeFour
operator|.
name|getUuidString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerReportFromDatanode
name|containerReportFromDatanode
init|=
operator|new
name|ContainerReportFromDatanode
argument_list|(
name|datanodeFour
argument_list|,
name|containerReport
argument_list|)
decl_stmt|;
name|reportHandler
operator|.
name|onMessage
argument_list|(
name|containerReportFromDatanode
argument_list|,
name|publisher
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|containerManager
operator|.
name|getContainerReplicas
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClosingToClosed ()
specifier|public
name|void
name|testClosingToClosed
parameter_list|()
throws|throws
name|NodeNotFoundException
throws|,
name|IOException
block|{
comment|/*      * The container is in CLOSING state and all the replicas are in      * OPEN/CLOSING state.      *      * The datanode reports that one of the replica is now CLOSED.      *      * In this case SCM should mark the container as CLOSED.      */
specifier|final
name|ContainerReportHandler
name|reportHandler
init|=
operator|new
name|ContainerReportHandler
argument_list|(
name|nodeManager
argument_list|,
name|containerManager
argument_list|)
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|DatanodeDetails
argument_list|>
name|nodeIterator
init|=
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|NodeState
operator|.
name|HEALTHY
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDetails
name|datanodeOne
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDetails
name|datanodeTwo
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDetails
name|datanodeThree
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|ContainerInfo
name|containerOne
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|CLOSING
argument_list|)
decl_stmt|;
specifier|final
name|ContainerInfo
name|containerTwo
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|CLOSED
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|containerIDSet
init|=
name|Stream
operator|.
name|of
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|containerOneReplicas
init|=
name|getReplicas
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|CLOSING
argument_list|,
name|datanodeOne
argument_list|)
decl_stmt|;
name|containerOneReplicas
operator|.
name|addAll
argument_list|(
name|getReplicas
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|OPEN
argument_list|,
name|datanodeTwo
argument_list|,
name|datanodeThree
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|containerTwoReplicas
init|=
name|getReplicas
argument_list|(
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|,
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|CLOSED
argument_list|,
name|datanodeOne
argument_list|,
name|datanodeTwo
argument_list|,
name|datanodeThree
argument_list|)
decl_stmt|;
name|nodeManager
operator|.
name|setContainers
argument_list|(
name|datanodeOne
argument_list|,
name|containerIDSet
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|setContainers
argument_list|(
name|datanodeTwo
argument_list|,
name|containerIDSet
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|setContainers
argument_list|(
name|datanodeThree
argument_list|,
name|containerIDSet
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|containerOne
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|containerTwo
argument_list|)
expr_stmt|;
name|containerOneReplicas
operator|.
name|forEach
argument_list|(
name|r
lambda|->
block|{
try|try
block|{
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerNotFoundException
name|ignored
parameter_list|)
block|{        }
block|}
argument_list|)
expr_stmt|;
name|containerTwoReplicas
operator|.
name|forEach
argument_list|(
name|r
lambda|->
block|{
try|try
block|{
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerNotFoundException
name|ignored
parameter_list|)
block|{        }
block|}
argument_list|)
expr_stmt|;
specifier|final
name|ContainerReportsProto
name|containerReport
init|=
name|getContainerReportsProto
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|CLOSED
argument_list|,
name|datanodeOne
operator|.
name|getUuidString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerReportFromDatanode
name|containerReportFromDatanode
init|=
operator|new
name|ContainerReportFromDatanode
argument_list|(
name|datanodeOne
argument_list|,
name|containerReport
argument_list|)
decl_stmt|;
name|reportHandler
operator|.
name|onMessage
argument_list|(
name|containerReportFromDatanode
argument_list|,
name|publisher
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LifeCycleState
operator|.
name|CLOSED
argument_list|,
name|containerOne
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClosingToQuasiClosed ()
specifier|public
name|void
name|testClosingToQuasiClosed
parameter_list|()
throws|throws
name|NodeNotFoundException
throws|,
name|IOException
block|{
comment|/*      * The container is in CLOSING state and all the replicas are in      * OPEN/CLOSING state.      *      * The datanode reports that the replica is now QUASI_CLOSED.      *      * In this case SCM should move the container to QUASI_CLOSED.      */
specifier|final
name|ContainerReportHandler
name|reportHandler
init|=
operator|new
name|ContainerReportHandler
argument_list|(
name|nodeManager
argument_list|,
name|containerManager
argument_list|)
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|DatanodeDetails
argument_list|>
name|nodeIterator
init|=
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|NodeState
operator|.
name|HEALTHY
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDetails
name|datanodeOne
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDetails
name|datanodeTwo
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDetails
name|datanodeThree
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|ContainerInfo
name|containerOne
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|CLOSING
argument_list|)
decl_stmt|;
specifier|final
name|ContainerInfo
name|containerTwo
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|CLOSED
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|containerIDSet
init|=
name|Stream
operator|.
name|of
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|containerOneReplicas
init|=
name|getReplicas
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|CLOSING
argument_list|,
name|datanodeOne
argument_list|,
name|datanodeTwo
argument_list|)
decl_stmt|;
name|containerOneReplicas
operator|.
name|addAll
argument_list|(
name|getReplicas
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|OPEN
argument_list|,
name|datanodeThree
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|containerTwoReplicas
init|=
name|getReplicas
argument_list|(
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|,
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|CLOSED
argument_list|,
name|datanodeOne
argument_list|,
name|datanodeTwo
argument_list|,
name|datanodeThree
argument_list|)
decl_stmt|;
name|nodeManager
operator|.
name|setContainers
argument_list|(
name|datanodeOne
argument_list|,
name|containerIDSet
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|setContainers
argument_list|(
name|datanodeTwo
argument_list|,
name|containerIDSet
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|setContainers
argument_list|(
name|datanodeThree
argument_list|,
name|containerIDSet
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|containerOne
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|containerTwo
argument_list|)
expr_stmt|;
name|containerOneReplicas
operator|.
name|forEach
argument_list|(
name|r
lambda|->
block|{
try|try
block|{
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerNotFoundException
name|ignored
parameter_list|)
block|{        }
block|}
argument_list|)
expr_stmt|;
name|containerTwoReplicas
operator|.
name|forEach
argument_list|(
name|r
lambda|->
block|{
try|try
block|{
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerNotFoundException
name|ignored
parameter_list|)
block|{        }
block|}
argument_list|)
expr_stmt|;
specifier|final
name|ContainerReportsProto
name|containerReport
init|=
name|getContainerReportsProto
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
name|datanodeOne
operator|.
name|getUuidString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerReportFromDatanode
name|containerReportFromDatanode
init|=
operator|new
name|ContainerReportFromDatanode
argument_list|(
name|datanodeOne
argument_list|,
name|containerReport
argument_list|)
decl_stmt|;
name|reportHandler
operator|.
name|onMessage
argument_list|(
name|containerReportFromDatanode
argument_list|,
name|publisher
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LifeCycleState
operator|.
name|QUASI_CLOSED
argument_list|,
name|containerOne
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuasiClosedToClosed ()
specifier|public
name|void
name|testQuasiClosedToClosed
parameter_list|()
throws|throws
name|NodeNotFoundException
throws|,
name|IOException
block|{
comment|/*      * The container is in QUASI_CLOSED state.      *  - One of the replica is in QUASI_CLOSED state      *  - The other two replica are in OPEN/CLOSING state      *      * The datanode reports the second replica is now CLOSED.      *      * In this case SCM should CLOSE the container.      */
specifier|final
name|ContainerReportHandler
name|reportHandler
init|=
operator|new
name|ContainerReportHandler
argument_list|(
name|nodeManager
argument_list|,
name|containerManager
argument_list|)
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|DatanodeDetails
argument_list|>
name|nodeIterator
init|=
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|NodeState
operator|.
name|HEALTHY
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDetails
name|datanodeOne
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDetails
name|datanodeTwo
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDetails
name|datanodeThree
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|ContainerInfo
name|containerOne
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|QUASI_CLOSED
argument_list|)
decl_stmt|;
specifier|final
name|ContainerInfo
name|containerTwo
init|=
name|getContainer
argument_list|(
name|LifeCycleState
operator|.
name|CLOSED
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|containerIDSet
init|=
name|Stream
operator|.
name|of
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|containerOneReplicas
init|=
name|getReplicas
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|QUASI_CLOSED
argument_list|,
literal|10000L
argument_list|,
name|datanodeOne
argument_list|)
decl_stmt|;
name|containerOneReplicas
operator|.
name|addAll
argument_list|(
name|getReplicas
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|CLOSING
argument_list|,
name|datanodeTwo
argument_list|,
name|datanodeThree
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|containerTwoReplicas
init|=
name|getReplicas
argument_list|(
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|,
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|CLOSED
argument_list|,
name|datanodeOne
argument_list|,
name|datanodeTwo
argument_list|,
name|datanodeThree
argument_list|)
decl_stmt|;
name|nodeManager
operator|.
name|setContainers
argument_list|(
name|datanodeOne
argument_list|,
name|containerIDSet
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|setContainers
argument_list|(
name|datanodeTwo
argument_list|,
name|containerIDSet
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|setContainers
argument_list|(
name|datanodeThree
argument_list|,
name|containerIDSet
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|containerOne
argument_list|)
expr_stmt|;
name|containerStateManager
operator|.
name|loadContainer
argument_list|(
name|containerTwo
argument_list|)
expr_stmt|;
name|containerOneReplicas
operator|.
name|forEach
argument_list|(
name|r
lambda|->
block|{
try|try
block|{
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerNotFoundException
name|ignored
parameter_list|)
block|{        }
block|}
argument_list|)
expr_stmt|;
name|containerTwoReplicas
operator|.
name|forEach
argument_list|(
name|r
lambda|->
block|{
try|try
block|{
name|containerStateManager
operator|.
name|updateContainerReplica
argument_list|(
name|containerTwo
operator|.
name|containerID
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerNotFoundException
name|ignored
parameter_list|)
block|{        }
block|}
argument_list|)
expr_stmt|;
specifier|final
name|ContainerReportsProto
name|containerReport
init|=
name|getContainerReportsProto
argument_list|(
name|containerOne
operator|.
name|containerID
argument_list|()
argument_list|,
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|CLOSED
argument_list|,
name|datanodeOne
operator|.
name|getUuidString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerReportFromDatanode
name|containerReportFromDatanode
init|=
operator|new
name|ContainerReportFromDatanode
argument_list|(
name|datanodeOne
argument_list|,
name|containerReport
argument_list|)
decl_stmt|;
name|reportHandler
operator|.
name|onMessage
argument_list|(
name|containerReportFromDatanode
argument_list|,
name|publisher
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LifeCycleState
operator|.
name|CLOSED
argument_list|,
name|containerOne
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getContainerReportsProto ( final ContainerID containerId, final ContainerReplicaProto.State state, final String originNodeId)
specifier|private
specifier|static
name|ContainerReportsProto
name|getContainerReportsProto
parameter_list|(
specifier|final
name|ContainerID
name|containerId
parameter_list|,
specifier|final
name|ContainerReplicaProto
operator|.
name|State
name|state
parameter_list|,
specifier|final
name|String
name|originNodeId
parameter_list|)
block|{
specifier|final
name|ContainerReportsProto
operator|.
name|Builder
name|crBuilder
init|=
name|ContainerReportsProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
specifier|final
name|ContainerReplicaProto
name|replicaProto
init|=
name|ContainerReplicaProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerID
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setState
argument_list|(
name|state
argument_list|)
operator|.
name|setOriginNodeId
argument_list|(
name|originNodeId
argument_list|)
operator|.
name|setFinalhash
argument_list|(
literal|"e16cc9d6024365750ed8dbd194ea46d2"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5368709120L
argument_list|)
operator|.
name|setUsed
argument_list|(
literal|2000000000L
argument_list|)
operator|.
name|setKeyCount
argument_list|(
literal|100000000L
argument_list|)
operator|.
name|setReadCount
argument_list|(
literal|100000000L
argument_list|)
operator|.
name|setWriteCount
argument_list|(
literal|100000000L
argument_list|)
operator|.
name|setReadBytes
argument_list|(
literal|2000000000L
argument_list|)
operator|.
name|setWriteBytes
argument_list|(
literal|2000000000L
argument_list|)
operator|.
name|setBlockCommitSequenceId
argument_list|(
literal|10000L
argument_list|)
operator|.
name|setDeleteTransactionId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|crBuilder
operator|.
name|addReports
argument_list|(
name|replicaProto
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

