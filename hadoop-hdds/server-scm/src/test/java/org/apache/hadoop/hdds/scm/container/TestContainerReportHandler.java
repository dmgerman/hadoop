begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|LifeCycleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerInfo
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|PipelineID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|replication
operator|.
name|ReplicationActivityStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|replication
operator|.
name|ReplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|states
operator|.
name|Node2ContainerMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipelines
operator|.
name|PipelineSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeHeartbeatDispatcher
operator|.
name|ContainerReportFromDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test the behaviour of the ContainerReportHandler.  */
end_comment

begin_class
DECL|class|TestContainerReportHandler
specifier|public
class|class
name|TestContainerReportHandler
implements|implements
name|EventPublisher
block|{
DECL|field|publishedEvents
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|publishedEvents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestContainerReportHandler
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|resetEventCollector ()
specifier|public
name|void
name|resetEventCollector
parameter_list|()
block|{
name|publishedEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|IOException
block|{
comment|//given
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|Node2ContainerMap
name|node2ContainerMap
init|=
operator|new
name|Node2ContainerMap
argument_list|()
decl_stmt|;
name|Mapping
name|mapping
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Mapping
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mapping
operator|.
name|getContainer
argument_list|(
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|(
name|Answer
argument_list|<
name|ContainerInfo
argument_list|>
operator|)
name|invocation
lambda|->
operator|new
name|Builder
argument_list|()
operator|.
name|setReplicationFactor
argument_list|(
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
operator|.
name|setContainerID
argument_list|(
operator|(
name|Long
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerStateManager
name|containerStateManager
init|=
operator|new
name|ContainerStateManager
argument_list|(
name|conf
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mapping
operator|.
name|getStateManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerStateManager
argument_list|)
expr_stmt|;
name|ReplicationActivityStatus
name|replicationActivityStatus
init|=
operator|new
name|ReplicationActivityStatus
argument_list|()
decl_stmt|;
name|ContainerReportHandler
name|reportHandler
init|=
operator|new
name|ContainerReportHandler
argument_list|(
name|mapping
argument_list|,
name|node2ContainerMap
argument_list|,
name|replicationActivityStatus
argument_list|)
decl_stmt|;
name|DatanodeDetails
name|dn1
init|=
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
decl_stmt|;
name|DatanodeDetails
name|dn2
init|=
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
decl_stmt|;
name|DatanodeDetails
name|dn3
init|=
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
decl_stmt|;
name|DatanodeDetails
name|dn4
init|=
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
decl_stmt|;
name|node2ContainerMap
operator|.
name|insertNewDatanode
argument_list|(
name|dn1
operator|.
name|getUuid
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|node2ContainerMap
operator|.
name|insertNewDatanode
argument_list|(
name|dn2
operator|.
name|getUuid
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|node2ContainerMap
operator|.
name|insertNewDatanode
argument_list|(
name|dn3
operator|.
name|getUuid
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|node2ContainerMap
operator|.
name|insertNewDatanode
argument_list|(
name|dn4
operator|.
name|getUuid
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|PipelineSelector
name|pipelineSelector
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PipelineSelector
operator|.
name|class
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline
init|=
operator|new
name|Pipeline
argument_list|(
literal|"leader"
argument_list|,
name|LifeCycleState
operator|.
name|CLOSED
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
name|PipelineID
operator|.
name|randomId
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|pipelineSelector
operator|.
name|getReplicationPipeline
argument_list|(
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|long
name|c1
init|=
name|containerStateManager
operator|.
name|allocateContainer
argument_list|(
name|pipelineSelector
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
literal|"root"
argument_list|)
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|long
name|c2
init|=
name|containerStateManager
operator|.
name|allocateContainer
argument_list|(
name|pipelineSelector
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
literal|"root"
argument_list|)
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
comment|//when
comment|//initial reports before replication is enabled. 2 containers w 3 replicas.
name|reportHandler
operator|.
name|onMessage
argument_list|(
operator|new
name|ContainerReportFromDatanode
argument_list|(
name|dn1
argument_list|,
name|createContainerReport
argument_list|(
operator|new
name|long
index|[]
block|{
name|c1
block|,
name|c2
block|}
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|reportHandler
operator|.
name|onMessage
argument_list|(
operator|new
name|ContainerReportFromDatanode
argument_list|(
name|dn2
argument_list|,
name|createContainerReport
argument_list|(
operator|new
name|long
index|[]
block|{
name|c1
block|,
name|c2
block|}
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|reportHandler
operator|.
name|onMessage
argument_list|(
operator|new
name|ContainerReportFromDatanode
argument_list|(
name|dn3
argument_list|,
name|createContainerReport
argument_list|(
operator|new
name|long
index|[]
block|{
name|c1
block|,
name|c2
block|}
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|reportHandler
operator|.
name|onMessage
argument_list|(
operator|new
name|ContainerReportFromDatanode
argument_list|(
name|dn4
argument_list|,
name|createContainerReport
argument_list|(
operator|new
name|long
index|[]
block|{}
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|publishedEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|replicationActivityStatus
operator|.
name|enableReplication
argument_list|()
expr_stmt|;
comment|//no problem here
name|reportHandler
operator|.
name|onMessage
argument_list|(
operator|new
name|ContainerReportFromDatanode
argument_list|(
name|dn1
argument_list|,
name|createContainerReport
argument_list|(
operator|new
name|long
index|[]
block|{
name|c1
block|,
name|c2
block|}
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|publishedEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//container is missing from d2
name|reportHandler
operator|.
name|onMessage
argument_list|(
operator|new
name|ContainerReportFromDatanode
argument_list|(
name|dn2
argument_list|,
name|createContainerReport
argument_list|(
operator|new
name|long
index|[]
block|{
name|c1
block|}
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|publishedEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ReplicationRequest
name|replicationRequest
init|=
operator|(
name|ReplicationRequest
operator|)
name|publishedEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c2
argument_list|,
name|replicationRequest
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|replicationRequest
operator|.
name|getExpecReplicationCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|replicationRequest
operator|.
name|getReplicationCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//container was replicated to dn4
name|reportHandler
operator|.
name|onMessage
argument_list|(
operator|new
name|ContainerReportFromDatanode
argument_list|(
name|dn4
argument_list|,
name|createContainerReport
argument_list|(
operator|new
name|long
index|[]
block|{
name|c2
block|}
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|//no more event, everything is perfect
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|publishedEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//c2 was found at dn2 (it was missing before, magic)
name|reportHandler
operator|.
name|onMessage
argument_list|(
operator|new
name|ContainerReportFromDatanode
argument_list|(
name|dn2
argument_list|,
name|createContainerReport
argument_list|(
operator|new
name|long
index|[]
block|{
name|c1
block|,
name|c2
block|}
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|//c2 is over replicated (dn1,dn2,dn3,dn4)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|publishedEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|replicationRequest
operator|=
operator|(
name|ReplicationRequest
operator|)
name|publishedEvents
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c2
argument_list|,
name|replicationRequest
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|replicationRequest
operator|.
name|getExpecReplicationCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|replicationRequest
operator|.
name|getReplicationCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createContainerReport (long[] containerIds)
specifier|private
name|ContainerReportsProto
name|createContainerReport
parameter_list|(
name|long
index|[]
name|containerIds
parameter_list|)
block|{
name|ContainerReportsProto
operator|.
name|Builder
name|crBuilder
init|=
name|ContainerReportsProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|containerId
range|:
name|containerIds
control|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerInfo
operator|.
name|Builder
name|ciBuilder
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerInfo
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ciBuilder
operator|.
name|setFinalhash
argument_list|(
literal|"e16cc9d6024365750ed8dbd194ea46d2"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5368709120L
argument_list|)
operator|.
name|setUsed
argument_list|(
literal|2000000000L
argument_list|)
operator|.
name|setKeyCount
argument_list|(
literal|100000000L
argument_list|)
operator|.
name|setReadCount
argument_list|(
literal|100000000L
argument_list|)
operator|.
name|setWriteCount
argument_list|(
literal|100000000L
argument_list|)
operator|.
name|setReadBytes
argument_list|(
literal|2000000000L
argument_list|)
operator|.
name|setWriteBytes
argument_list|(
literal|2000000000L
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|containerId
argument_list|)
operator|.
name|setDeleteTransactionId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|crBuilder
operator|.
name|addReports
argument_list|(
name|ciBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|crBuilder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|fireEvent ( EVENT_TYPE event, PAYLOAD payload)
specifier|public
parameter_list|<
name|PAYLOAD
parameter_list|,
name|EVENT_TYPE
extends|extends
name|Event
argument_list|<
name|PAYLOAD
argument_list|>
parameter_list|>
name|void
name|fireEvent
parameter_list|(
name|EVENT_TYPE
name|event
parameter_list|,
name|PAYLOAD
name|payload
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Event is published: {}"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|publishedEvents
operator|.
name|add
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

