begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.ââSee the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.ââThe ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.ââYou may obtain a copy of the License at  *  * ââââ http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container.replication
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for ReplicationActivityStatus.  */
end_comment

begin_class
DECL|class|TestReplicationActivityStatus
specifier|public
class|class
name|TestReplicationActivityStatus
block|{
DECL|field|eventQueue
specifier|private
specifier|static
name|EventQueue
name|eventQueue
decl_stmt|;
DECL|field|replicationActivityStatus
specifier|private
specifier|static
name|ReplicationActivityStatus
name|replicationActivityStatus
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
block|{
name|eventQueue
operator|=
operator|new
name|EventQueue
argument_list|()
expr_stmt|;
name|replicationActivityStatus
operator|=
operator|new
name|ReplicationActivityStatus
argument_list|()
expr_stmt|;
name|eventQueue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|START_REPLICATION
argument_list|,
name|replicationActivityStatus
operator|.
name|getReplicationStatusListener
argument_list|()
argument_list|)
expr_stmt|;
name|eventQueue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|CHILL_MODE_STATUS
argument_list|,
name|replicationActivityStatus
operator|.
name|getChillModeStatusListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplicationStatusForChillMode ()
specifier|public
name|void
name|testReplicationStatusForChillMode
parameter_list|()
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|assertFalse
argument_list|(
name|replicationActivityStatus
operator|.
name|isReplicationEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// In chill mode replication process should be stopped.
name|eventQueue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CHILL_MODE_STATUS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|replicationActivityStatus
operator|.
name|isReplicationEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Replication should be enabled when chill mode if off.
name|eventQueue
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CHILL_MODE_STATUS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
return|return
name|replicationActivityStatus
operator|.
name|isReplicationEnabled
argument_list|()
return|;
block|}
argument_list|,
literal|10
argument_list|,
literal|1000
operator|*
literal|5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|replicationActivityStatus
operator|.
name|isReplicationEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

