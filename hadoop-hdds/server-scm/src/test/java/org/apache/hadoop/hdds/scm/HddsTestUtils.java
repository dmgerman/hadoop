begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.ââSee the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.ââThe ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.ââYou may obtain a copy of the License at  *  * ââââ http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeProtocolServer
operator|.
name|NodeRegistrationContainerReport
import|;
end_import

begin_comment
comment|/**  * Stateless helper functions for Hdds tests.  */
end_comment

begin_class
DECL|class|HddsTestUtils
specifier|public
specifier|final
class|class
name|HddsTestUtils
block|{
DECL|method|HddsTestUtils ()
specifier|private
name|HddsTestUtils
parameter_list|()
block|{   }
comment|/**    * Create Command Status report object.    *    * @param numOfContainers number of containers to be included in report.    * @return CommandStatusReportsProto    */
specifier|public
specifier|static
name|NodeRegistrationContainerReport
DECL|method|createNodeRegistrationContainerReport (int numOfContainers)
name|createNodeRegistrationContainerReport
parameter_list|(
name|int
name|numOfContainers
parameter_list|)
block|{
return|return
operator|new
name|NodeRegistrationContainerReport
argument_list|(
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
argument_list|,
name|TestUtils
operator|.
name|getRandomContainerReports
argument_list|(
name|numOfContainers
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create NodeRegistrationContainerReport object.    *    * @param dnContainers List of containers to be included in report    * @return NodeRegistrationContainerReport    */
specifier|public
specifier|static
name|NodeRegistrationContainerReport
DECL|method|createNodeRegistrationContainerReport (List<ContainerInfo> dnContainers)
name|createNodeRegistrationContainerReport
parameter_list|(
name|List
argument_list|<
name|ContainerInfo
argument_list|>
name|dnContainers
parameter_list|)
block|{
name|List
argument_list|<
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReplicaProto
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|dnContainers
operator|.
name|forEach
argument_list|(
name|c
lambda|->
block|{
name|containers
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|getRandomContainerInfo
argument_list|(
name|c
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
operator|new
name|NodeRegistrationContainerReport
argument_list|(
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
argument_list|,
name|TestUtils
operator|.
name|getContainerReports
argument_list|(
name|containers
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Creates list of ContainerInfo.    *    * @param numContainers number of ContainerInfo to be included in list.    * @return List<ContainerInfo>    */
DECL|method|getContainerInfo (int numContainers)
specifier|public
specifier|static
name|List
argument_list|<
name|ContainerInfo
argument_list|>
name|getContainerInfo
parameter_list|(
name|int
name|numContainers
parameter_list|)
block|{
name|List
argument_list|<
name|ContainerInfo
argument_list|>
name|containerInfoList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numContainers
condition|;
name|i
operator|++
control|)
block|{
name|ContainerInfo
operator|.
name|Builder
name|builder
init|=
operator|new
name|ContainerInfo
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|containerInfoList
operator|.
name|add
argument_list|(
name|builder
operator|.
name|setContainerID
argument_list|(
name|RandomUtils
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|containerInfoList
return|;
block|}
block|}
end_class

end_unit

