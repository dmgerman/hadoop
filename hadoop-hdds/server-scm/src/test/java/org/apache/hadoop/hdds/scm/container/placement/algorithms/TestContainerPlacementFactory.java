begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container.placement.algorithms
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|metrics
operator|.
name|SCMNodeMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetworkTopologyImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NodeSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NodeSchemaManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
operator|.
name|LEAF_SCHEMA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
operator|.
name|RACK_SCHEMA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
operator|.
name|ROOT_SCHEMA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test for scm container placement factory.  */
end_comment

begin_class
DECL|class|TestContainerPlacementFactory
specifier|public
class|class
name|TestContainerPlacementFactory
block|{
comment|// network topology cluster
DECL|field|cluster
specifier|private
name|NetworkTopology
name|cluster
decl_stmt|;
comment|// datanodes array list
DECL|field|datanodes
specifier|private
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// node storage capacity
DECL|field|storageCapacity
specifier|private
specifier|final
name|long
name|storageCapacity
init|=
literal|100L
decl_stmt|;
comment|// configuration
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|// node manager
DECL|field|nodeManager
specifier|private
name|NodeManager
name|nodeManager
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
comment|//initialize network topology instance
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRackAwarePolicy ()
specifier|public
name|void
name|testRackAwarePolicy
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_PLACEMENT_IMPL_KEY
argument_list|,
name|SCMContainerPlacementRackAware
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|NodeSchema
index|[]
name|schemas
init|=
operator|new
name|NodeSchema
index|[]
block|{
name|ROOT_SCHEMA
block|,
name|RACK_SCHEMA
block|,
name|LEAF_SCHEMA
block|}
decl_stmt|;
name|NodeSchemaManager
operator|.
name|getInstance
argument_list|()
operator|.
name|init
argument_list|(
name|schemas
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|NetworkTopologyImpl
argument_list|(
name|NodeSchemaManager
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
comment|// build datanodes, and network topology
name|String
name|rack
init|=
literal|"/rack"
decl_stmt|;
name|String
name|hostname
init|=
literal|"node"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|15
condition|;
name|i
operator|++
control|)
block|{
comment|// Totally 3 racks, each has 5 datanodes
name|DatanodeDetails
name|node
init|=
name|TestUtils
operator|.
name|createDatanodeDetails
argument_list|(
name|hostname
operator|+
name|i
argument_list|,
name|rack
operator|+
operator|(
name|i
operator|/
literal|5
operator|)
argument_list|)
decl_stmt|;
name|datanodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
comment|// create mock node manager
name|nodeManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NodeManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|NodeState
operator|.
name|HEALTHY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|datanodes
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|SCMNodeMetric
argument_list|(
name|storageCapacity
argument_list|,
literal|0L
argument_list|,
literal|100L
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|SCMNodeMetric
argument_list|(
name|storageCapacity
argument_list|,
literal|90L
argument_list|,
literal|10L
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|SCMNodeMetric
argument_list|(
name|storageCapacity
argument_list|,
literal|80L
argument_list|,
literal|20L
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|SCMNodeMetric
argument_list|(
name|storageCapacity
argument_list|,
literal|70L
argument_list|,
literal|30L
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerPlacementPolicy
name|policy
init|=
name|ContainerPlacementPolicyFactory
operator|.
name|getPolicy
argument_list|(
name|conf
argument_list|,
name|nodeManager
argument_list|,
name|cluster
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|nodeNum
init|=
literal|3
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodeDetails
init|=
name|policy
operator|.
name|chooseDatanodes
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|nodeNum
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodeNum
argument_list|,
name|datanodeDetails
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isSameParent
argument_list|(
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultPolicy ()
specifier|public
name|void
name|testDefaultPolicy
parameter_list|()
throws|throws
name|IOException
block|{
name|ContainerPlacementPolicy
name|policy
init|=
name|ContainerPlacementPolicyFactory
operator|.
name|getPolicy
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|SCMContainerPlacementRandom
operator|.
name|class
argument_list|,
name|policy
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * A dummy container placement implementation for test.    */
DECL|class|DummyImpl
specifier|public
specifier|static
class|class
name|DummyImpl
implements|implements
name|ContainerPlacementPolicy
block|{
annotation|@
name|Override
DECL|method|chooseDatanodes ( List<DatanodeDetails> excludedNodes, List<DatanodeDetails> favoredNodes, int nodesRequired, long sizeRequired)
specifier|public
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|chooseDatanodes
parameter_list|(
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|excludedNodes
parameter_list|,
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|favoredNodes
parameter_list|,
name|int
name|nodesRequired
parameter_list|,
name|long
name|sizeRequired
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SCMException
operator|.
name|class
argument_list|)
DECL|method|testConstuctorNotFound ()
specifier|public
name|void
name|testConstuctorNotFound
parameter_list|()
throws|throws
name|SCMException
block|{
comment|// set a placement class which does't have the right constructor implemented
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_PLACEMENT_IMPL_KEY
argument_list|,
name|DummyImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerPlacementPolicyFactory
operator|.
name|getPolicy
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RuntimeException
operator|.
name|class
argument_list|)
DECL|method|testClassNotImplemented ()
specifier|public
name|void
name|testClassNotImplemented
parameter_list|()
throws|throws
name|SCMException
block|{
comment|// set a placement class not implemented
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_PLACEMENT_IMPL_KEY
argument_list|,
literal|"org.apache.hadoop.hdds.scm.container.placement.algorithm.HelloWorld"
argument_list|)
expr_stmt|;
name|ContainerPlacementPolicyFactory
operator|.
name|getPolicy
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

