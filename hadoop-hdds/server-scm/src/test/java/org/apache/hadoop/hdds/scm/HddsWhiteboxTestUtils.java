begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_comment
comment|/**  * This class includes some functions copied from Mockito's  * Whitebox class for portability reasons.  *  * Whitebox methods are accessed differently in different  * versions of Hadoop. Specifically the availability of the class  * changed from Apache Hadoop 3.1.0 to Hadoop 3.2.0.  *  * Duplicating the test code is ugly but it allows building  * HDDS portably.  */
end_comment

begin_class
DECL|class|HddsWhiteboxTestUtils
specifier|public
specifier|final
class|class
name|HddsWhiteboxTestUtils
block|{
comment|/**    * Private constructor to disallow construction.    */
DECL|method|HddsWhiteboxTestUtils ()
specifier|private
name|HddsWhiteboxTestUtils
parameter_list|()
block|{   }
comment|/**    * Get the field of the target object.    * @param target target object    * @param field field name    * @return the field of the object    */
DECL|method|getInternalState (Object target, String field)
specifier|public
specifier|static
name|Object
name|getInternalState
parameter_list|(
name|Object
name|target
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|target
operator|.
name|getClass
argument_list|()
decl_stmt|;
try|try
block|{
name|Field
name|f
init|=
name|getFieldFromHierarchy
argument_list|(
name|c
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|f
operator|.
name|get
argument_list|(
name|target
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to set internal state on a private field."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Set the field of the target object.    * @param target target object    * @param field field name    * @param value value to set    */
DECL|method|setInternalState ( Object target, String field, Object value)
specifier|public
specifier|static
name|void
name|setInternalState
parameter_list|(
name|Object
name|target
parameter_list|,
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|target
operator|.
name|getClass
argument_list|()
decl_stmt|;
try|try
block|{
name|Field
name|f
init|=
name|getFieldFromHierarchy
argument_list|(
name|c
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|target
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to set internal state on a private field."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getFieldFromHierarchy (Class<?> clazz, String field)
specifier|private
specifier|static
name|Field
name|getFieldFromHierarchy
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|Field
name|f
init|=
name|getField
argument_list|(
name|clazz
argument_list|,
name|field
argument_list|)
decl_stmt|;
while|while
condition|(
name|f
operator|==
literal|null
operator|&&
name|clazz
operator|!=
name|Object
operator|.
name|class
condition|)
block|{
name|clazz
operator|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
name|f
operator|=
name|getField
argument_list|(
name|clazz
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"You want me to set value to this field: '"
operator|+
name|field
operator|+
literal|"' on this class: '"
operator|+
name|clazz
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"' but this field is not declared within hierarchy "
operator|+
literal|"of this class!"
argument_list|)
throw|;
block|}
return|return
name|f
return|;
block|}
DECL|method|getField (Class<?> clazz, String field)
specifier|private
specifier|static
name|Field
name|getField
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|field
parameter_list|)
block|{
try|try
block|{
return|return
name|clazz
operator|.
name|getDeclaredField
argument_list|(
name|field
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

