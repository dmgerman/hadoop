begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.command
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|command
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsIdFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|CommandStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|CommandStatusReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCommandProto
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeHeartbeatDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeHeartbeatDispatcher
operator|.
name|CommandStatusReportFromDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_class
DECL|class|TestCommandStatusReportHandler
specifier|public
class|class
name|TestCommandStatusReportHandler
implements|implements
name|EventPublisher
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCommandStatusReportHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cmdStatusReportHandler
specifier|private
name|CommandStatusReportHandler
name|cmdStatusReportHandler
decl_stmt|;
DECL|field|storagePath
specifier|private
name|String
name|storagePath
init|=
name|GenericTestUtils
operator|.
name|getRandomizedTempPath
argument_list|()
operator|.
name|concat
argument_list|(
literal|"/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
empty_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|cmdStatusReportHandler
operator|=
operator|new
name|CommandStatusReportHandler
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommandStatusReport ()
specifier|public
name|void
name|testCommandStatusReport
parameter_list|()
block|{
name|GenericTestUtils
operator|.
name|LogCapturer
name|logCapturer
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
name|CommandStatusReportFromDatanode
name|report
init|=
name|this
operator|.
name|getStatusReport
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|cmdStatusReportHandler
operator|.
name|onMessage
argument_list|(
name|report
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"DeleteBlockCommandStatus"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"CloseContainerCommandStatus"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"ReplicateCommandStatus"
argument_list|)
argument_list|)
expr_stmt|;
name|report
operator|=
name|this
operator|.
name|getStatusReport
argument_list|(
name|this
operator|.
name|getCommandStatusList
argument_list|()
argument_list|)
expr_stmt|;
name|cmdStatusReportHandler
operator|.
name|onMessage
argument_list|(
name|report
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"firing event of type "
operator|+
literal|"DeleteBlockCommandStatus"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"firing event of type "
operator|+
literal|"CloseContainerCommandStatus"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"firing event of type "
operator|+
literal|"ReplicateCommandStatus"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"type: "
operator|+
literal|"closeContainerCommand"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"type: "
operator|+
literal|"deleteBlocksCommand"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"type: "
operator|+
literal|"replicateContainerCommand"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getStatusReport (List<CommandStatus> reports)
specifier|private
name|CommandStatusReportFromDatanode
name|getStatusReport
parameter_list|(
name|List
argument_list|<
name|CommandStatus
argument_list|>
name|reports
parameter_list|)
block|{
name|CommandStatusReportsProto
name|report
init|=
name|TestUtils
operator|.
name|createCommandStatusReport
argument_list|(
name|reports
argument_list|)
decl_stmt|;
name|DatanodeDetails
name|dn
init|=
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
decl_stmt|;
return|return
operator|new
name|SCMDatanodeHeartbeatDispatcher
operator|.
name|CommandStatusReportFromDatanode
argument_list|(
name|dn
argument_list|,
name|report
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fireEvent (EVENT_TYPE event, PAYLOAD payload)
specifier|public
parameter_list|<
name|PAYLOAD
parameter_list|,
name|EVENT_TYPE
extends|extends
name|Event
argument_list|<
name|PAYLOAD
argument_list|>
parameter_list|>
name|void
name|fireEvent
parameter_list|(
name|EVENT_TYPE
name|event
parameter_list|,
name|PAYLOAD
name|payload
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"firing event of type {}, payload {}"
argument_list|,
name|event
operator|.
name|getName
argument_list|()
argument_list|,
name|payload
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getCommandStatusList ()
specifier|private
name|List
argument_list|<
name|CommandStatus
argument_list|>
name|getCommandStatusList
parameter_list|()
block|{
name|List
argument_list|<
name|CommandStatus
argument_list|>
name|reports
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// Add status message for replication, close container and delete block
comment|// command.
name|CommandStatus
operator|.
name|Builder
name|builder
init|=
name|CommandStatus
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setCmdId
argument_list|(
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
name|CommandStatus
operator|.
name|Status
operator|.
name|EXECUTED
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|deleteBlocksCommand
argument_list|)
expr_stmt|;
name|reports
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCmdId
argument_list|(
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
name|CommandStatus
operator|.
name|Status
operator|.
name|EXECUTED
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|closeContainerCommand
argument_list|)
expr_stmt|;
name|reports
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMsg
argument_list|(
literal|"Not enough space"
argument_list|)
operator|.
name|setCmdId
argument_list|(
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
name|CommandStatus
operator|.
name|Status
operator|.
name|FAILED
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|replicateContainerCommand
argument_list|)
expr_stmt|;
name|reports
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|reports
return|;
block|}
block|}
end_class

end_unit

