begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.node
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|NodeReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|StorageReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|metrics
operator|.
name|SCMNodeMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeHeartbeatDispatcher
operator|.
name|NodeReportFromDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test for the Node Report Handler.  */
end_comment

begin_class
DECL|class|TestNodeReportHandler
specifier|public
class|class
name|TestNodeReportHandler
implements|implements
name|EventPublisher
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestNodeReportHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nodeReportHandler
specifier|private
name|NodeReportHandler
name|nodeReportHandler
decl_stmt|;
DECL|field|nodeManager
specifier|private
name|SCMNodeManager
name|nodeManager
decl_stmt|;
DECL|field|storagePath
specifier|private
name|String
name|storagePath
init|=
name|GenericTestUtils
operator|.
name|getRandomizedTempPath
argument_list|()
operator|.
name|concat
argument_list|(
literal|"/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|resetEventCollector ()
specifier|public
name|void
name|resetEventCollector
parameter_list|()
throws|throws
name|IOException
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|nodeManager
operator|=
operator|new
name|SCMNodeManager
argument_list|(
name|conf
argument_list|,
literal|"cluster1"
argument_list|,
literal|null
argument_list|,
operator|new
name|EventQueue
argument_list|()
argument_list|)
expr_stmt|;
name|nodeReportHandler
operator|=
operator|new
name|NodeReportHandler
argument_list|(
name|nodeManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeReport ()
specifier|public
name|void
name|testNodeReport
parameter_list|()
throws|throws
name|IOException
block|{
name|DatanodeDetails
name|dn
init|=
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
decl_stmt|;
name|StorageReportProto
name|storageOne
init|=
name|TestUtils
operator|.
name|createStorageReport
argument_list|(
name|dn
operator|.
name|getUuid
argument_list|()
argument_list|,
name|storagePath
argument_list|,
literal|100
argument_list|,
literal|10
argument_list|,
literal|90
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SCMNodeMetric
name|nodeMetric
init|=
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|dn
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|nodeMetric
argument_list|)
expr_stmt|;
name|nodeManager
operator|.
name|register
argument_list|(
name|dn
argument_list|,
name|getNodeReport
argument_list|(
name|dn
argument_list|,
name|storageOne
argument_list|)
operator|.
name|getReport
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|nodeMetric
operator|=
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodeMetric
operator|.
name|get
argument_list|()
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodeMetric
operator|.
name|get
argument_list|()
operator|.
name|getRemaining
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|90
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodeMetric
operator|.
name|get
argument_list|()
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
name|StorageReportProto
name|storageTwo
init|=
name|TestUtils
operator|.
name|createStorageReport
argument_list|(
name|dn
operator|.
name|getUuid
argument_list|()
argument_list|,
name|storagePath
argument_list|,
literal|100
argument_list|,
literal|10
argument_list|,
literal|90
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|nodeReportHandler
operator|.
name|onMessage
argument_list|(
name|getNodeReport
argument_list|(
name|dn
argument_list|,
name|storageOne
argument_list|,
name|storageTwo
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|nodeMetric
operator|=
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodeMetric
operator|.
name|get
argument_list|()
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|200
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodeMetric
operator|.
name|get
argument_list|()
operator|.
name|getRemaining
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|180
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodeMetric
operator|.
name|get
argument_list|()
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|20
argument_list|)
expr_stmt|;
block|}
DECL|method|getNodeReport (DatanodeDetails dn, StorageReportProto... reports)
specifier|private
name|NodeReportFromDatanode
name|getNodeReport
parameter_list|(
name|DatanodeDetails
name|dn
parameter_list|,
name|StorageReportProto
modifier|...
name|reports
parameter_list|)
block|{
name|NodeReportProto
name|nodeReportProto
init|=
name|TestUtils
operator|.
name|createNodeReport
argument_list|(
name|reports
argument_list|)
decl_stmt|;
return|return
operator|new
name|NodeReportFromDatanode
argument_list|(
name|dn
argument_list|,
name|nodeReportProto
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fireEvent ( EVENT_TYPE event, PAYLOAD payload)
specifier|public
parameter_list|<
name|PAYLOAD
parameter_list|,
name|EVENT_TYPE
extends|extends
name|Event
argument_list|<
name|PAYLOAD
argument_list|>
parameter_list|>
name|void
name|fireEvent
parameter_list|(
name|EVENT_TYPE
name|event
parameter_list|,
name|PAYLOAD
name|payload
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Event is published: {}"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

