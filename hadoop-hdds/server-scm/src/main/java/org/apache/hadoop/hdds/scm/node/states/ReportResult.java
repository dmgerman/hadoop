begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.node.states
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|states
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * A Container/Pipeline Report gets processed by the  * Node2Container/Node2Pipeline and returns Report Result class.  */
end_comment

begin_class
DECL|class|ReportResult
specifier|public
specifier|final
class|class
name|ReportResult
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|status
specifier|private
name|ReportStatus
name|status
decl_stmt|;
DECL|field|missingEntries
specifier|private
name|Set
argument_list|<
name|T
argument_list|>
name|missingEntries
decl_stmt|;
DECL|field|newEntries
specifier|private
name|Set
argument_list|<
name|T
argument_list|>
name|newEntries
decl_stmt|;
DECL|method|ReportResult (ReportStatus status, Set<T> missingEntries, Set<T> newEntries)
specifier|private
name|ReportResult
parameter_list|(
name|ReportStatus
name|status
parameter_list|,
name|Set
argument_list|<
name|T
argument_list|>
name|missingEntries
parameter_list|,
name|Set
argument_list|<
name|T
argument_list|>
name|newEntries
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|missingEntries
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|newEntries
argument_list|)
expr_stmt|;
name|this
operator|.
name|missingEntries
operator|=
name|missingEntries
expr_stmt|;
name|this
operator|.
name|newEntries
operator|=
name|newEntries
expr_stmt|;
block|}
DECL|method|getStatus ()
specifier|public
name|ReportStatus
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
DECL|method|getMissingEntries ()
specifier|public
name|Set
argument_list|<
name|T
argument_list|>
name|getMissingEntries
parameter_list|()
block|{
return|return
name|missingEntries
return|;
block|}
DECL|method|getNewEntries ()
specifier|public
name|Set
argument_list|<
name|T
argument_list|>
name|getNewEntries
parameter_list|()
block|{
return|return
name|newEntries
return|;
block|}
comment|/**    * Result after processing report for node2Object map.    * @param<T>    */
DECL|class|ReportResultBuilder
specifier|public
specifier|static
class|class
name|ReportResultBuilder
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|status
specifier|private
name|ReportStatus
name|status
decl_stmt|;
DECL|field|missingEntries
specifier|private
name|Set
argument_list|<
name|T
argument_list|>
name|missingEntries
decl_stmt|;
DECL|field|newEntries
specifier|private
name|Set
argument_list|<
name|T
argument_list|>
name|newEntries
decl_stmt|;
DECL|method|setStatus ( ReportStatus newStatus)
specifier|public
name|ReportResultBuilder
argument_list|<
name|T
argument_list|>
name|setStatus
parameter_list|(
name|ReportStatus
name|newStatus
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|newStatus
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setMissingEntries ( Set<T> missingEntriesList)
specifier|public
name|ReportResultBuilder
argument_list|<
name|T
argument_list|>
name|setMissingEntries
parameter_list|(
name|Set
argument_list|<
name|T
argument_list|>
name|missingEntriesList
parameter_list|)
block|{
name|this
operator|.
name|missingEntries
operator|=
name|missingEntriesList
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setNewEntries ( Set<T> newEntriesList)
specifier|public
name|ReportResultBuilder
argument_list|<
name|T
argument_list|>
name|setNewEntries
parameter_list|(
name|Set
argument_list|<
name|T
argument_list|>
name|newEntriesList
parameter_list|)
block|{
name|this
operator|.
name|newEntries
operator|=
name|newEntriesList
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|ReportResult
argument_list|<
name|T
argument_list|>
name|build
parameter_list|()
block|{
name|Set
argument_list|<
name|T
argument_list|>
name|nullSafeMissingEntries
init|=
name|this
operator|.
name|missingEntries
decl_stmt|;
name|Set
argument_list|<
name|T
argument_list|>
name|nullSafeNewEntries
init|=
name|this
operator|.
name|newEntries
decl_stmt|;
if|if
condition|(
name|nullSafeNewEntries
operator|==
literal|null
condition|)
block|{
name|nullSafeNewEntries
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nullSafeMissingEntries
operator|==
literal|null
condition|)
block|{
name|nullSafeMissingEntries
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|ReportResult
argument_list|<
name|T
argument_list|>
argument_list|(
name|status
argument_list|,
name|nullSafeMissingEntries
argument_list|,
name|nullSafeNewEntries
argument_list|)
return|;
block|}
block|}
comment|/**    * Results possible from processing a report.    */
DECL|enum|ReportStatus
specifier|public
enum|enum
name|ReportStatus
block|{
DECL|enumConstant|ALL_IS_WELL
name|ALL_IS_WELL
block|,
DECL|enumConstant|MISSING_ENTRIES
name|MISSING_ENTRIES
block|,
DECL|enumConstant|NEW_ENTRIES_FOUND
name|NEW_ENTRIES_FOUND
block|,
DECL|enumConstant|MISSING_AND_NEW_ENTRIES_FOUND
name|MISSING_AND_NEW_ENTRIES_FOUND
block|,
DECL|enumConstant|NEW_DATANODE_FOUND
name|NEW_DATANODE_FOUND
block|,   }
block|}
end_class

end_unit

