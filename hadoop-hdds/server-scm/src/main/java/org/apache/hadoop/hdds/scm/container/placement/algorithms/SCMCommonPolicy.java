begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container.placement.algorithms
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|metrics
operator|.
name|SCMNodeMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * SCM CommonPolicy implements a set of invariants which are common  * for all container placement policies, acts as the repository of helper  * functions which are common to placement policies.  */
end_comment

begin_class
DECL|class|SCMCommonPolicy
specifier|public
specifier|abstract
class|class
name|SCMCommonPolicy
implements|implements
name|ContainerPlacementPolicy
block|{
annotation|@
name|VisibleForTesting
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SCMCommonPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nodeManager
specifier|private
specifier|final
name|NodeManager
name|nodeManager
decl_stmt|;
DECL|field|rand
specifier|private
specifier|final
name|Random
name|rand
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|/**    * Constructs SCM Common Policy Class.    *    * @param nodeManager NodeManager    * @param conf Configuration class.    */
DECL|method|SCMCommonPolicy (NodeManager nodeManager, Configuration conf)
specifier|public
name|SCMCommonPolicy
parameter_list|(
name|NodeManager
name|nodeManager
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|nodeManager
operator|=
name|nodeManager
expr_stmt|;
name|this
operator|.
name|rand
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * Return node manager.    *    * @return node manager    */
DECL|method|getNodeManager ()
specifier|public
name|NodeManager
name|getNodeManager
parameter_list|()
block|{
return|return
name|nodeManager
return|;
block|}
comment|/**    * Returns the Random Object.    *    * @return rand    */
DECL|method|getRand ()
specifier|public
name|Random
name|getRand
parameter_list|()
block|{
return|return
name|rand
return|;
block|}
comment|/**    * Get Config.    *    * @return Configuration    */
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|/**    * Given the replication factor and size required, return set of datanodes    * that satisfy the nodes and size requirement.    *<p>    * Here are some invariants of container placement.    *<p>    * 1. We place containers only on healthy nodes.    * 2. We place containers on nodes with enough space for that container.    * 3. if a set of containers are requested, we either meet the required    * number of nodes or we fail that request.    *    *    * @param excludedNodes - datanodes with existing replicas    * @param nodesRequired - number of datanodes required.    * @param sizeRequired - size required for the container or block.    * @return list of datanodes chosen.    * @throws SCMException SCM exception.    */
DECL|method|chooseDatanodes ( List<DatanodeDetails> excludedNodes, int nodesRequired, final long sizeRequired)
specifier|public
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|chooseDatanodes
parameter_list|(
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|excludedNodes
parameter_list|,
name|int
name|nodesRequired
parameter_list|,
specifier|final
name|long
name|sizeRequired
parameter_list|)
throws|throws
name|SCMException
block|{
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|healthyNodes
init|=
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|HddsProtos
operator|.
name|NodeState
operator|.
name|HEALTHY
argument_list|)
decl_stmt|;
name|healthyNodes
operator|.
name|removeAll
argument_list|(
name|excludedNodes
argument_list|)
expr_stmt|;
name|String
name|msg
decl_stmt|;
if|if
condition|(
name|healthyNodes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|msg
operator|=
literal|"No healthy node found to allocate container."
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SCMException
argument_list|(
name|msg
argument_list|,
name|SCMException
operator|.
name|ResultCodes
operator|.
name|FAILED_TO_FIND_HEALTHY_NODES
argument_list|)
throw|;
block|}
if|if
condition|(
name|healthyNodes
operator|.
name|size
argument_list|()
operator|<
name|nodesRequired
condition|)
block|{
name|msg
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Not enough healthy nodes to allocate container. %d "
operator|+
literal|" datanodes required. Found %d"
argument_list|,
name|nodesRequired
argument_list|,
name|healthyNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SCMException
argument_list|(
name|msg
argument_list|,
name|SCMException
operator|.
name|ResultCodes
operator|.
name|FAILED_TO_FIND_SUITABLE_NODE
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|healthyList
init|=
name|healthyNodes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|d
lambda|->
name|hasEnoughSpace
argument_list|(
name|d
argument_list|,
name|sizeRequired
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|healthyList
operator|.
name|size
argument_list|()
operator|<
name|nodesRequired
condition|)
block|{
name|msg
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Unable to find enough nodes that meet the space "
operator|+
literal|"requirement of %d bytes in healthy node set."
operator|+
literal|" Nodes required: %d Found: %d"
argument_list|,
name|sizeRequired
argument_list|,
name|nodesRequired
argument_list|,
name|healthyList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SCMException
argument_list|(
name|msg
argument_list|,
name|SCMException
operator|.
name|ResultCodes
operator|.
name|FAILED_TO_FIND_NODES_WITH_SPACE
argument_list|)
throw|;
block|}
return|return
name|healthyList
return|;
block|}
comment|/**    * Returns true if this node has enough space to meet our requirement.    *    * @param datanodeDetails DatanodeDetails    * @return true if we have enough space.    */
DECL|method|hasEnoughSpace (DatanodeDetails datanodeDetails, long sizeRequired)
specifier|private
name|boolean
name|hasEnoughSpace
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|,
name|long
name|sizeRequired
parameter_list|)
block|{
name|SCMNodeMetric
name|nodeMetric
init|=
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|datanodeDetails
argument_list|)
decl_stmt|;
return|return
operator|(
name|nodeMetric
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|nodeMetric
operator|.
name|get
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
name|nodeMetric
operator|.
name|get
argument_list|()
operator|.
name|getRemaining
argument_list|()
operator|.
name|hasResources
argument_list|(
name|sizeRequired
argument_list|)
return|;
block|}
comment|/**    * This function invokes the derived classes chooseNode Function to build a    * list of nodes. Then it verifies that invoked policy was able to return    * expected number of nodes.    *    * @param nodesRequired - Nodes Required    * @param healthyNodes - List of Nodes in the result set.    * @return List of Datanodes that can be used for placement.    * @throws SCMException    */
DECL|method|getResultSet ( int nodesRequired, List<DatanodeDetails> healthyNodes)
specifier|public
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|getResultSet
parameter_list|(
name|int
name|nodesRequired
parameter_list|,
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|healthyNodes
parameter_list|)
throws|throws
name|SCMException
block|{
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|results
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|nodesRequired
condition|;
name|x
operator|++
control|)
block|{
comment|// invoke the choose function defined in the derived classes.
name|DatanodeDetails
name|nodeId
init|=
name|chooseNode
argument_list|(
name|healthyNodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeId
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|<
name|nodesRequired
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to find the required number of healthy nodes that "
operator|+
literal|"meet the criteria. Required nodes: {}, Found nodes: {}"
argument_list|,
name|nodesRequired
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SCMException
argument_list|(
literal|"Unable to find required number of nodes."
argument_list|,
name|SCMException
operator|.
name|ResultCodes
operator|.
name|FAILED_TO_FIND_SUITABLE_NODE
argument_list|)
throw|;
block|}
return|return
name|results
return|;
block|}
comment|/**    * Choose a datanode according to the policy, this function is implemented    * by the actual policy class. For example, PlacementCapacity or    * PlacementRandom.    *    * @param healthyNodes - Set of healthy nodes we can choose from.    * @return DatanodeDetails    */
DECL|method|chooseNode ( List<DatanodeDetails> healthyNodes)
specifier|public
specifier|abstract
name|DatanodeDetails
name|chooseNode
parameter_list|(
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|healthyNodes
parameter_list|)
function_decl|;
block|}
end_class

end_unit

