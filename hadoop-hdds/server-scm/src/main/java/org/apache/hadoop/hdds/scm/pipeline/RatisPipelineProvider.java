begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.pipeline
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|client
operator|.
name|HddsClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
operator|.
name|ContainerPlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
operator|.
name|SCMContainerPlacementRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
operator|.
name|PipelineState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MultipleIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|ratis
operator|.
name|RatisHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|client
operator|.
name|RaftClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|grpc
operator|.
name|GrpcTlsConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftClientReply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftPeer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|rpc
operator|.
name|SupportedRpcType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|TimeDuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|function
operator|.
name|CheckedBiConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ForkJoinPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ForkJoinWorkerThread
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Implements Api for creating ratis pipelines.  */
end_comment

begin_class
DECL|class|RatisPipelineProvider
specifier|public
class|class
name|RatisPipelineProvider
implements|implements
name|PipelineProvider
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RatisPipelineProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nodeManager
specifier|private
specifier|final
name|NodeManager
name|nodeManager
decl_stmt|;
DECL|field|stateManager
specifier|private
specifier|final
name|PipelineStateManager
name|stateManager
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|// Set parallelism at 3, as now in Ratis we create 1 and 3 node pipelines.
DECL|field|parallelismForPool
specifier|private
specifier|final
name|int
name|parallelismForPool
init|=
literal|3
decl_stmt|;
DECL|field|factory
specifier|private
specifier|final
name|ForkJoinPool
operator|.
name|ForkJoinWorkerThreadFactory
name|factory
init|=
operator|(
name|pool
lambda|->
block|{
specifier|final
name|ForkJoinWorkerThread
name|worker
init|=
name|ForkJoinPool
operator|.
name|defaultForkJoinWorkerThreadFactory
operator|.
name|newThread
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|worker
operator|.
name|setName
argument_list|(
literal|"RATISCREATEPIPELINE"
operator|+
name|worker
operator|.
name|getPoolIndex
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|worker
return|;
block|}
operator|)
decl_stmt|;
DECL|field|forkJoinPool
specifier|private
specifier|final
name|ForkJoinPool
name|forkJoinPool
init|=
operator|new
name|ForkJoinPool
argument_list|(
name|parallelismForPool
argument_list|,
name|factory
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|tlsConfig
specifier|private
specifier|final
name|GrpcTlsConfig
name|tlsConfig
decl_stmt|;
DECL|method|RatisPipelineProvider (NodeManager nodeManager, PipelineStateManager stateManager, Configuration conf, GrpcTlsConfig tlsConfig)
name|RatisPipelineProvider
parameter_list|(
name|NodeManager
name|nodeManager
parameter_list|,
name|PipelineStateManager
name|stateManager
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|GrpcTlsConfig
name|tlsConfig
parameter_list|)
block|{
name|this
operator|.
name|nodeManager
operator|=
name|nodeManager
expr_stmt|;
name|this
operator|.
name|stateManager
operator|=
name|stateManager
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|tlsConfig
operator|=
name|tlsConfig
expr_stmt|;
block|}
comment|/**    * Create pluggable container placement policy implementation instance.    *    * @param nodeManager - SCM node manager.    * @param conf - configuration.    * @return SCM container placement policy implementation instance.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// TODO: should we rename ContainerPlacementPolicy to PipelinePlacementPolicy?
DECL|method|createContainerPlacementPolicy ( final NodeManager nodeManager, final Configuration conf)
specifier|private
specifier|static
name|ContainerPlacementPolicy
name|createContainerPlacementPolicy
parameter_list|(
specifier|final
name|NodeManager
name|nodeManager
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ContainerPlacementPolicy
argument_list|>
name|implClass
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|ContainerPlacementPolicy
argument_list|>
operator|)
name|conf
operator|.
name|getClass
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_PLACEMENT_IMPL_KEY
argument_list|,
name|SCMContainerPlacementRandom
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|ContainerPlacementPolicy
argument_list|>
name|ctor
init|=
name|implClass
operator|.
name|getDeclaredConstructor
argument_list|(
name|NodeManager
operator|.
name|class
argument_list|,
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ctor
operator|.
name|newInstance
argument_list|(
name|nodeManager
argument_list|,
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|implClass
operator|.
name|getName
argument_list|()
operator|+
literal|" could not be constructed."
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//      LOG.error("Unhandled exception occurred, Placement policy will not " +
comment|//          "be functional.");
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to load "
operator|+
literal|"ContainerPlacementPolicy"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|create (ReplicationFactor factor)
specifier|public
name|Pipeline
name|create
parameter_list|(
name|ReplicationFactor
name|factor
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get set of datanodes already used for ratis pipeline
name|Set
argument_list|<
name|DatanodeDetails
argument_list|>
name|dnsUsed
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|stateManager
operator|.
name|getPipelines
argument_list|(
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|factor
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getPipelineState
argument_list|()
operator|.
name|equals
argument_list|(
name|PipelineState
operator|.
name|OPEN
argument_list|)
operator|||
name|p
operator|.
name|getPipelineState
argument_list|()
operator|.
name|equals
argument_list|(
name|PipelineState
operator|.
name|DORMANT
argument_list|)
operator|||
name|p
operator|.
name|getPipelineState
argument_list|()
operator|.
name|equals
argument_list|(
name|PipelineState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|p
lambda|->
name|dnsUsed
operator|.
name|addAll
argument_list|(
name|p
operator|.
name|getNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get list of healthy nodes
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|dns
init|=
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|NodeState
operator|.
name|HEALTHY
argument_list|)
operator|.
name|parallelStream
argument_list|()
operator|.
name|filter
argument_list|(
name|dn
lambda|->
operator|!
name|dnsUsed
operator|.
name|contains
argument_list|(
name|dn
argument_list|)
argument_list|)
operator|.
name|limit
argument_list|(
name|factor
operator|.
name|getNumber
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dns
operator|.
name|size
argument_list|()
operator|<
name|factor
operator|.
name|getNumber
argument_list|()
condition|)
block|{
name|String
name|e
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Cannot create pipeline of factor %d using %d nodes."
argument_list|,
name|factor
operator|.
name|getNumber
argument_list|()
argument_list|,
name|dns
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|InsufficientDatanodesException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Pipeline
name|pipeline
init|=
name|Pipeline
operator|.
name|newBuilder
argument_list|()
operator|.
name|setId
argument_list|(
name|PipelineID
operator|.
name|randomId
argument_list|()
argument_list|)
operator|.
name|setState
argument_list|(
name|PipelineState
operator|.
name|OPEN
argument_list|)
operator|.
name|setType
argument_list|(
name|ReplicationType
operator|.
name|RATIS
argument_list|)
operator|.
name|setFactor
argument_list|(
name|factor
argument_list|)
operator|.
name|setNodes
argument_list|(
name|dns
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|initializePipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
return|return
name|pipeline
return|;
block|}
annotation|@
name|Override
DECL|method|create (ReplicationFactor factor, List<DatanodeDetails> nodes)
specifier|public
name|Pipeline
name|create
parameter_list|(
name|ReplicationFactor
name|factor
parameter_list|,
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|nodes
parameter_list|)
block|{
return|return
name|Pipeline
operator|.
name|newBuilder
argument_list|()
operator|.
name|setId
argument_list|(
name|PipelineID
operator|.
name|randomId
argument_list|()
argument_list|)
operator|.
name|setState
argument_list|(
name|PipelineState
operator|.
name|OPEN
argument_list|)
operator|.
name|setType
argument_list|(
name|ReplicationType
operator|.
name|RATIS
argument_list|)
operator|.
name|setFactor
argument_list|(
name|factor
argument_list|)
operator|.
name|setNodes
argument_list|(
name|nodes
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|forkJoinPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
try|try
block|{
name|forkJoinPool
operator|.
name|awaitTermination
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected exception occurred during shutdown of "
operator|+
literal|"RatisPipelineProvider"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initializePipeline (Pipeline pipeline)
specifier|protected
name|void
name|initializePipeline
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RaftGroup
name|group
init|=
name|RatisHelper
operator|.
name|newRaftGroup
argument_list|(
name|pipeline
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating pipeline:{} with {}"
argument_list|,
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
name|callRatisRpc
argument_list|(
name|pipeline
operator|.
name|getNodes
argument_list|()
argument_list|,
parameter_list|(
name|raftClient
parameter_list|,
name|peer
parameter_list|)
lambda|->
block|{
name|RaftClientReply
name|reply
init|=
name|raftClient
operator|.
name|groupAdd
argument_list|(
name|group
argument_list|,
name|peer
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|==
literal|null
operator|||
operator|!
name|reply
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Pipeline initialization failed for pipeline:"
operator|+
name|pipeline
operator|.
name|getId
argument_list|()
operator|+
literal|" node:"
operator|+
name|peer
operator|.
name|getId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|callRatisRpc (List<DatanodeDetails> datanodes, CheckedBiConsumer< RaftClient, RaftPeer, IOException> rpc)
specifier|private
name|void
name|callRatisRpc
parameter_list|(
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodes
parameter_list|,
name|CheckedBiConsumer
argument_list|<
name|RaftClient
argument_list|,
name|RaftPeer
argument_list|,
name|IOException
argument_list|>
name|rpc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|datanodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|String
name|rpcType
init|=
name|conf
operator|.
name|get
argument_list|(
name|ScmConfigKeys
operator|.
name|DFS_CONTAINER_RATIS_RPC_TYPE_KEY
argument_list|,
name|ScmConfigKeys
operator|.
name|DFS_CONTAINER_RATIS_RPC_TYPE_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RetryPolicy
name|retryPolicy
init|=
name|RatisHelper
operator|.
name|createRetryPolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|exceptions
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxOutstandingRequests
init|=
name|HddsClientUtils
operator|.
name|getMaxOutstandingRequests
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|TimeDuration
name|requestTimeout
init|=
name|RatisHelper
operator|.
name|getClientRequestTimeout
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|forkJoinPool
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
name|datanodes
operator|.
name|parallelStream
argument_list|()
operator|.
name|forEach
argument_list|(
name|d
lambda|->
block|{
specifier|final
name|RaftPeer
name|p
init|=
name|RatisHelper
operator|.
name|toRaftPeer
argument_list|(
name|d
argument_list|)
decl_stmt|;
try|try
init|(
name|RaftClient
name|client
init|=
name|RatisHelper
operator|.
name|newRaftClient
argument_list|(
name|SupportedRpcType
operator|.
name|valueOfIgnoreCase
argument_list|(
name|rpcType
argument_list|)
argument_list|,
name|p
argument_list|,
name|retryPolicy
argument_list|,
name|maxOutstandingRequests
argument_list|,
name|tlsConfig
argument_list|,
name|requestTimeout
argument_list|)
init|)
block|{
name|rpc
operator|.
name|accept
argument_list|(
name|client
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Failed invoke Ratis rpc "
operator|+
name|rpc
operator|+
literal|" for "
operator|+
name|d
operator|.
name|getUuid
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
operator|new
name|IOException
argument_list|(
name|errMsg
argument_list|,
name|ioe
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
decl||
name|RejectedExecutionException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" exception occurred during "
operator|+
literal|"createPipeline"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" exception occurred "
operator|+
literal|"during createPipeline"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupt exception occurred during "
operator|+
literal|"createPipeline"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|exceptions
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

