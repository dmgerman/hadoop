begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.ââSee the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.ââThe ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.ââYou may obtain a copy of the License at  *  * ââââ http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.safemode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|safemode
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * StorageContainerManager enters safe mode on startup to allow system to  * reach a stable state before becoming fully functional. SCM will wait  * for certain resources to be reported before coming out of safe mode.  *  * SafeModeExitRule defines format to define new rules which must be satisfied  * to exit Safe mode.  *  * Current SafeMode rules:  * 1. ContainerSafeModeRule:  * On every new datanode registration, it fires  * {@link SCMEvents#NODE_REGISTRATION_CONT_REPORT}.  This rule handles this  * event. This rule process this report, increment the  * containerWithMinReplicas count when this reported replica is in the  * containerMap. Then validates if cutoff threshold for containers is meet.  *  * 2. DatanodeSafeModeRule:  * On every new datanode registration, it fires  * {@link SCMEvents#NODE_REGISTRATION_CONT_REPORT}. This rule handles this  * event. This rule process this report, and check if this is new node, add  * to its reported node list. Then validate it cutoff threshold for minimum  * number of datanode registered is met or not.  *  * 3. HealthyPipelineSafeModeRule:  * Once the pipelineReportHandler processes the  * {@link SCMEvents#PIPELINE_REPORT}, it fires  * {@link SCMEvents#PROCESSED_PIPELINE_REPORT}. This rule handles this  * event. This rule processes this report, and check if pipeline is healthy  * and increments current healthy pipeline count. Then validate it cutoff  * threshold for healthy pipeline is met or not.  *  * 4. OneReplicaPipelineSafeModeRule:  * Once the pipelineReportHandler processes the  * {@link SCMEvents#PIPELINE_REPORT}, it fires  * {@link SCMEvents#PROCESSED_PIPELINE_REPORT}. This rule handles this  * event. This rule processes this report, and add the reported pipeline to  * reported pipeline set. Then validate it cutoff threshold for one replica  * per pipeline is met or not.  *  */
end_comment

begin_class
DECL|class|SCMSafeModeManager
specifier|public
class|class
name|SCMSafeModeManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SCMSafeModeManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|isSafeModeEnabled
specifier|private
specifier|final
name|boolean
name|isSafeModeEnabled
decl_stmt|;
DECL|field|inSafeMode
specifier|private
name|AtomicBoolean
name|inSafeMode
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|exitRules
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SafeModeExitRule
argument_list|>
name|exitRules
init|=
operator|new
name|HashMap
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|config
specifier|private
name|Configuration
name|config
decl_stmt|;
DECL|field|CONT_EXIT_RULE
specifier|private
specifier|static
specifier|final
name|String
name|CONT_EXIT_RULE
init|=
literal|"ContainerSafeModeRule"
decl_stmt|;
DECL|field|DN_EXIT_RULE
specifier|private
specifier|static
specifier|final
name|String
name|DN_EXIT_RULE
init|=
literal|"DataNodeSafeModeRule"
decl_stmt|;
DECL|field|HEALTHY_PIPELINE_EXIT_RULE
specifier|private
specifier|static
specifier|final
name|String
name|HEALTHY_PIPELINE_EXIT_RULE
init|=
literal|"HealthyPipelineSafeModeRule"
decl_stmt|;
DECL|field|ATLEAST_ONE_DATANODE_REPORTED_PIPELINE_EXIT_RULE
specifier|private
specifier|static
specifier|final
name|String
name|ATLEAST_ONE_DATANODE_REPORTED_PIPELINE_EXIT_RULE
init|=
literal|"AtleastOneDatanodeReportedRule"
decl_stmt|;
DECL|field|validatedRules
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|validatedRules
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|eventPublisher
specifier|private
specifier|final
name|EventQueue
name|eventPublisher
decl_stmt|;
DECL|field|pipelineManager
specifier|private
specifier|final
name|PipelineManager
name|pipelineManager
decl_stmt|;
DECL|method|SCMSafeModeManager (Configuration conf, List<ContainerInfo> allContainers, PipelineManager pipelineManager, EventQueue eventQueue)
specifier|public
name|SCMSafeModeManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|ContainerInfo
argument_list|>
name|allContainers
parameter_list|,
name|PipelineManager
name|pipelineManager
parameter_list|,
name|EventQueue
name|eventQueue
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|pipelineManager
operator|=
name|pipelineManager
expr_stmt|;
name|this
operator|.
name|eventPublisher
operator|=
name|eventQueue
expr_stmt|;
name|this
operator|.
name|isSafeModeEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HddsConfigKeys
operator|.
name|HDDS_SCM_SAFEMODE_ENABLED
argument_list|,
name|HddsConfigKeys
operator|.
name|HDDS_SCM_SAFEMODE_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSafeModeEnabled
condition|)
block|{
name|ContainerSafeModeRule
name|containerSafeModeRule
init|=
operator|new
name|ContainerSafeModeRule
argument_list|(
name|CONT_EXIT_RULE
argument_list|,
name|eventQueue
argument_list|,
name|config
argument_list|,
name|allContainers
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|DataNodeSafeModeRule
name|dataNodeSafeModeRule
init|=
operator|new
name|DataNodeSafeModeRule
argument_list|(
name|DN_EXIT_RULE
argument_list|,
name|eventQueue
argument_list|,
name|config
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|exitRules
operator|.
name|put
argument_list|(
name|CONT_EXIT_RULE
argument_list|,
name|containerSafeModeRule
argument_list|)
expr_stmt|;
name|exitRules
operator|.
name|put
argument_list|(
name|DN_EXIT_RULE
argument_list|,
name|dataNodeSafeModeRule
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|HddsConfigKeys
operator|.
name|HDDS_SCM_SAFEMODE_PIPELINE_AVAILABILITY_CHECK
argument_list|,
name|HddsConfigKeys
operator|.
name|HDDS_SCM_SAFEMODE_PIPELINE_AVAILABILITY_CHECK_DEFAULT
argument_list|)
operator|&&
name|pipelineManager
operator|!=
literal|null
condition|)
block|{
name|HealthyPipelineSafeModeRule
name|healthyPipelineSafeModeRule
init|=
operator|new
name|HealthyPipelineSafeModeRule
argument_list|(
name|HEALTHY_PIPELINE_EXIT_RULE
argument_list|,
name|eventQueue
argument_list|,
name|pipelineManager
argument_list|,
name|this
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|OneReplicaPipelineSafeModeRule
name|oneReplicaPipelineSafeModeRule
init|=
operator|new
name|OneReplicaPipelineSafeModeRule
argument_list|(
name|ATLEAST_ONE_DATANODE_REPORTED_PIPELINE_EXIT_RULE
argument_list|,
name|eventQueue
argument_list|,
name|pipelineManager
argument_list|,
name|this
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|exitRules
operator|.
name|put
argument_list|(
name|HEALTHY_PIPELINE_EXIT_RULE
argument_list|,
name|healthyPipelineSafeModeRule
argument_list|)
expr_stmt|;
name|exitRules
operator|.
name|put
argument_list|(
name|ATLEAST_ONE_DATANODE_REPORTED_PIPELINE_EXIT_RULE
argument_list|,
name|oneReplicaPipelineSafeModeRule
argument_list|)
expr_stmt|;
block|}
name|emitSafeModeStatus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|exitSafeMode
argument_list|(
name|eventQueue
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Emit Safe mode status.    */
annotation|@
name|VisibleForTesting
DECL|method|emitSafeModeStatus ()
specifier|public
name|void
name|emitSafeModeStatus
parameter_list|()
block|{
name|eventPublisher
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|SAFE_MODE_STATUS
argument_list|,
operator|new
name|SafeModeStatus
argument_list|(
name|getInSafeMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|validateSafeModeExitRules (String ruleName, EventPublisher eventQueue)
specifier|public
specifier|synchronized
name|void
name|validateSafeModeExitRules
parameter_list|(
name|String
name|ruleName
parameter_list|,
name|EventPublisher
name|eventQueue
parameter_list|)
block|{
if|if
condition|(
name|exitRules
operator|.
name|get
argument_list|(
name|ruleName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|validatedRules
operator|.
name|add
argument_list|(
name|ruleName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This should never happen
name|LOG
operator|.
name|error
argument_list|(
literal|"No Such Exit rule {}"
argument_list|,
name|ruleName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validatedRules
operator|.
name|size
argument_list|()
operator|==
name|exitRules
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// All rules are satisfied, we can exit safe mode.
name|LOG
operator|.
name|info
argument_list|(
literal|"ScmSafeModeManager, all rules are successfully validated"
argument_list|)
expr_stmt|;
name|exitSafeMode
argument_list|(
name|eventQueue
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Exit safe mode. It does following actions:    * 1. Set safe mode status to false.    * 2. Emits START_REPLICATION for ReplicationManager.    * 3. Cleanup resources.    * 4. Emit safe mode status.    * @param eventQueue    */
annotation|@
name|VisibleForTesting
DECL|method|exitSafeMode (EventPublisher eventQueue)
specifier|public
name|void
name|exitSafeMode
parameter_list|(
name|EventPublisher
name|eventQueue
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"SCM exiting safe mode."
argument_list|)
expr_stmt|;
name|setInSafeMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// TODO: Remove handler registration as there is no need to listen to
comment|// register events anymore.
name|emitSafeModeStatus
argument_list|()
expr_stmt|;
comment|// TODO: #CLUTIL if we reenter safe mode the fixed interval pipeline
comment|// creation job needs to stop
name|pipelineManager
operator|.
name|startPipelineCreator
argument_list|()
expr_stmt|;
block|}
DECL|method|getInSafeMode ()
specifier|public
name|boolean
name|getInSafeMode
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSafeModeEnabled
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|inSafeMode
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Set safe mode status.    */
DECL|method|setInSafeMode (boolean inSafeMode)
specifier|public
name|void
name|setInSafeMode
parameter_list|(
name|boolean
name|inSafeMode
parameter_list|)
block|{
name|this
operator|.
name|inSafeMode
operator|.
name|set
argument_list|(
name|inSafeMode
argument_list|)
expr_stmt|;
block|}
DECL|method|getLogger ()
specifier|public
specifier|static
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCurrentContainerThreshold ()
specifier|public
name|double
name|getCurrentContainerThreshold
parameter_list|()
block|{
return|return
operator|(
operator|(
name|ContainerSafeModeRule
operator|)
name|exitRules
operator|.
name|get
argument_list|(
name|CONT_EXIT_RULE
argument_list|)
operator|)
operator|.
name|getCurrentContainerThreshold
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getHealthyPipelineSafeModeRule ()
specifier|public
name|HealthyPipelineSafeModeRule
name|getHealthyPipelineSafeModeRule
parameter_list|()
block|{
return|return
operator|(
name|HealthyPipelineSafeModeRule
operator|)
name|exitRules
operator|.
name|get
argument_list|(
name|HEALTHY_PIPELINE_EXIT_RULE
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getOneReplicaPipelineSafeModeRule ()
specifier|public
name|OneReplicaPipelineSafeModeRule
name|getOneReplicaPipelineSafeModeRule
parameter_list|()
block|{
return|return
operator|(
name|OneReplicaPipelineSafeModeRule
operator|)
name|exitRules
operator|.
name|get
argument_list|(
name|ATLEAST_ONE_DATANODE_REPORTED_PIPELINE_EXIT_RULE
argument_list|)
return|;
block|}
comment|/**    * Class used during SafeMode status event.    */
DECL|class|SafeModeStatus
specifier|public
specifier|static
class|class
name|SafeModeStatus
block|{
DECL|field|safeModeStatus
specifier|private
name|boolean
name|safeModeStatus
decl_stmt|;
DECL|method|SafeModeStatus (boolean safeModeState)
specifier|public
name|SafeModeStatus
parameter_list|(
name|boolean
name|safeModeState
parameter_list|)
block|{
name|this
operator|.
name|safeModeStatus
operator|=
name|safeModeState
expr_stmt|;
block|}
DECL|method|getSafeModeStatus ()
specifier|public
name|boolean
name|getSafeModeStatus
parameter_list|()
block|{
return|return
name|safeModeStatus
return|;
block|}
block|}
block|}
end_class

end_unit

