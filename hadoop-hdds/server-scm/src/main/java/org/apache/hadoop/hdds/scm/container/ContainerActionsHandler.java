begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeHeartbeatDispatcher
operator|.
name|ContainerActionsFromDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Handles container reports from datanode.  */
end_comment

begin_class
DECL|class|ContainerActionsHandler
specifier|public
class|class
name|ContainerActionsHandler
implements|implements
name|EventHandler
argument_list|<
name|ContainerActionsFromDatanode
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerActionsHandler
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|onMessage ( ContainerActionsFromDatanode containerReportFromDatanode, EventPublisher publisher)
specifier|public
name|void
name|onMessage
parameter_list|(
name|ContainerActionsFromDatanode
name|containerReportFromDatanode
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
block|{
name|DatanodeDetails
name|dd
init|=
name|containerReportFromDatanode
operator|.
name|getDatanodeDetails
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerAction
name|action
range|:
name|containerReportFromDatanode
operator|.
name|getReport
argument_list|()
operator|.
name|getContainerActionsList
argument_list|()
control|)
block|{
name|ContainerID
name|containerId
init|=
name|ContainerID
operator|.
name|valueof
argument_list|(
name|action
operator|.
name|getContainerID
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|action
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|CLOSE
case|:
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing container {} in datanode {} because the"
operator|+
literal|" container is {}."
argument_list|,
name|containerId
argument_list|,
name|dd
argument_list|,
name|action
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|publisher
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid action {} with reason {}, from datanode {}. "
argument_list|,
name|action
operator|.
name|getAction
argument_list|()
argument_list|,
name|action
operator|.
name|getReason
argument_list|()
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

