begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressFBWarnings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|LifeCycleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReplicaProto
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
operator|.
name|ContainerPlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lock
operator|.
name|LockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|CloseContainerCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|CommandForDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|DeleteContainerCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|ReplicateContainerCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|SCMCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Replication Manager (RM) is the one which is responsible for making sure  * that the containers are properly replicated. Replication Manager deals only  * with Quasi Closed / Closed container.  */
end_comment

begin_class
DECL|class|ReplicationManager
specifier|public
class|class
name|ReplicationManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplicationManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Reference to the ContainerManager.    */
DECL|field|containerManager
specifier|private
specifier|final
name|ContainerManager
name|containerManager
decl_stmt|;
comment|/**    * PlacementPolicy which is used to identify where a container    * should be replicated.    */
DECL|field|containerPlacement
specifier|private
specifier|final
name|ContainerPlacementPolicy
name|containerPlacement
decl_stmt|;
comment|/**    * EventPublisher to fire Replicate and Delete container events.    */
DECL|field|eventPublisher
specifier|private
specifier|final
name|EventPublisher
name|eventPublisher
decl_stmt|;
comment|/**    * Used for locking a container using its ID while processing it.    */
DECL|field|lockManager
specifier|private
specifier|final
name|LockManager
argument_list|<
name|ContainerID
argument_list|>
name|lockManager
decl_stmt|;
comment|/**    * This is used for tracking container replication commands which are issued    * by ReplicationManager and not yet complete.    */
DECL|field|inflightReplication
specifier|private
specifier|final
name|Map
argument_list|<
name|ContainerID
argument_list|,
name|List
argument_list|<
name|InflightAction
argument_list|>
argument_list|>
name|inflightReplication
decl_stmt|;
comment|/**    * This is used for tracking container deletion commands which are issued    * by ReplicationManager and not yet complete.    */
DECL|field|inflightDeletion
specifier|private
specifier|final
name|Map
argument_list|<
name|ContainerID
argument_list|,
name|List
argument_list|<
name|InflightAction
argument_list|>
argument_list|>
name|inflightDeletion
decl_stmt|;
comment|/**    * ReplicationMonitor thread is the one which wakes up at configured    * interval and processes all the containers.    */
DECL|field|replicationMonitor
specifier|private
specifier|final
name|Thread
name|replicationMonitor
decl_stmt|;
comment|/**    * The frequency in which ReplicationMonitor thread should run.    */
DECL|field|interval
specifier|private
specifier|final
name|long
name|interval
decl_stmt|;
comment|/**    * Timeout for container replication& deletion command issued by    * ReplicationManager.    */
DECL|field|eventTimeout
specifier|private
specifier|final
name|long
name|eventTimeout
decl_stmt|;
comment|/**    * Flag used for checking if the ReplicationMonitor thread is running or    * not.    */
DECL|field|running
specifier|private
specifier|volatile
name|boolean
name|running
decl_stmt|;
comment|/**    * Constructs ReplicationManager instance with the given configuration.    *    * @param conf OzoneConfiguration    * @param containerManager ContainerManager    * @param containerPlacement ContainerPlacementPolicy    * @param eventPublisher EventPublisher    */
DECL|method|ReplicationManager (final Configuration conf, final ContainerManager containerManager, final ContainerPlacementPolicy containerPlacement, final EventPublisher eventPublisher)
specifier|public
name|ReplicationManager
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|ContainerManager
name|containerManager
parameter_list|,
specifier|final
name|ContainerPlacementPolicy
name|containerPlacement
parameter_list|,
specifier|final
name|EventPublisher
name|eventPublisher
parameter_list|)
block|{
name|this
operator|.
name|containerManager
operator|=
name|containerManager
expr_stmt|;
name|this
operator|.
name|containerPlacement
operator|=
name|containerPlacement
expr_stmt|;
name|this
operator|.
name|eventPublisher
operator|=
name|eventPublisher
expr_stmt|;
name|this
operator|.
name|lockManager
operator|=
operator|new
name|LockManager
argument_list|<>
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|inflightReplication
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|inflightDeletion
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|replicationMonitor
operator|=
operator|new
name|Thread
argument_list|(
name|this
operator|::
name|run
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationMonitor
operator|.
name|setName
argument_list|(
literal|"ReplicationMonitor"
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationMonitor
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_REPLICATION_THREAD_INTERVAL
argument_list|,
name|ScmConfigKeys
operator|.
name|HDDS_SCM_REPLICATION_THREAD_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|eventTimeout
operator|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_REPLICATION_EVENT_TIMEOUT
argument_list|,
name|ScmConfigKeys
operator|.
name|HDDS_SCM_REPLICATION_EVENT_TIMEOUT_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|running
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Starts Replication Monitor thread.    */
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
operator|!
name|running
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Replication Monitor Thread."
argument_list|)
expr_stmt|;
name|running
operator|=
literal|true
expr_stmt|;
name|replicationMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Replication Monitor Thread is already running."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns true if the Replication Monitor Thread is running.    *    * @return true if running, false otherwise    */
DECL|method|isRunning ()
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|replicationMonitor
operator|.
name|isAlive
argument_list|()
return|;
block|}
comment|/**    * Process all the containers immediately.    */
annotation|@
name|VisibleForTesting
annotation|@
name|SuppressFBWarnings
argument_list|(
name|value
operator|=
literal|"NN_NAKED_NOTIFY"
argument_list|,
name|justification
operator|=
literal|"Used only for testing"
argument_list|)
DECL|method|processContainersNow ()
specifier|synchronized
name|void
name|processContainersNow
parameter_list|()
block|{
name|notify
argument_list|()
expr_stmt|;
block|}
comment|/**    * Stops Replication Monitor thread.    */
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|running
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping Replication Monitor Thread."
argument_list|)
expr_stmt|;
name|running
operator|=
literal|false
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Replication Monitor Thread is not running."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * ReplicationMonitor thread runnable. This wakes up at configured    * interval and processes all the containers in the system.    */
DECL|method|run ()
specifier|private
specifier|synchronized
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|running
condition|)
block|{
specifier|final
name|long
name|start
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|containerIds
init|=
name|containerManager
operator|.
name|getContainerIDs
argument_list|()
decl_stmt|;
name|containerIds
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|processContainer
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Replication Monitor Thread took {} milliseconds for"
operator|+
literal|" processing {} containers."
argument_list|,
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|start
argument_list|,
name|containerIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|wait
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// When we get runtime exception, we should terminate SCM.
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in Replication Monitor Thread."
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|terminate
argument_list|(
literal|1
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Process the given container.    *    * @param id ContainerID    */
DECL|method|processContainer (ContainerID id)
specifier|private
name|void
name|processContainer
parameter_list|(
name|ContainerID
name|id
parameter_list|)
block|{
name|lockManager
operator|.
name|lock
argument_list|(
name|id
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|ContainerInfo
name|container
init|=
name|containerManager
operator|.
name|getContainer
argument_list|(
name|id
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|replicas
init|=
name|containerManager
operator|.
name|getContainerReplicas
argument_list|(
name|container
operator|.
name|containerID
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|LifeCycleState
name|state
init|=
name|container
operator|.
name|getState
argument_list|()
decl_stmt|;
comment|/*        * We don't take any action if the container is in OPEN state.        */
if|if
condition|(
name|state
operator|==
name|LifeCycleState
operator|.
name|OPEN
condition|)
block|{
return|return;
block|}
comment|/*        * If the container is in CLOSING state, the replicas can either        * be in OPEN or in CLOSING state. In both of this cases        * we have to resend close container command to the datanodes.        */
if|if
condition|(
name|state
operator|==
name|LifeCycleState
operator|.
name|CLOSING
condition|)
block|{
name|replicas
operator|.
name|forEach
argument_list|(
name|replica
lambda|->
name|sendCloseCommand
argument_list|(
name|container
argument_list|,
name|replica
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/*        * If the container is in QUASI_CLOSED state, check and close the        * container if possible.        */
if|if
condition|(
name|state
operator|==
name|LifeCycleState
operator|.
name|QUASI_CLOSED
operator|&&
name|canForceCloseContainer
argument_list|(
name|container
argument_list|,
name|replicas
argument_list|)
condition|)
block|{
name|forceCloseContainer
argument_list|(
name|container
argument_list|,
name|replicas
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/*        * Before processing the container we have to reconcile the        * inflightReplication and inflightDeletion actions.        *        * We remove the entry from inflightReplication and inflightDeletion        * list, if the operation is completed or if it has timed out.        */
name|updateInflightAction
argument_list|(
name|container
argument_list|,
name|inflightReplication
argument_list|,
name|action
lambda|->
name|replicas
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getDatanodeDetails
argument_list|()
operator|.
name|equals
argument_list|(
name|action
operator|.
name|datanode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|updateInflightAction
argument_list|(
name|container
argument_list|,
name|inflightDeletion
argument_list|,
name|action
lambda|->
name|replicas
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getDatanodeDetails
argument_list|()
operator|.
name|equals
argument_list|(
name|action
operator|.
name|datanode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/*        * We don't have to take any action if the container is healthy.        *        * According to ReplicationMonitor container is considered healthy if        * the container is either in QUASI_CLOSED or in CLOSED state and has        * exact number of replicas in the same state.        */
if|if
condition|(
name|isContainerHealthy
argument_list|(
name|container
argument_list|,
name|replicas
argument_list|)
condition|)
block|{
return|return;
block|}
comment|/*        * Check if the container is under replicated and take appropriate        * action.        */
if|if
condition|(
name|isContainerUnderReplicated
argument_list|(
name|container
argument_list|,
name|replicas
argument_list|)
condition|)
block|{
name|handleUnderReplicatedContainer
argument_list|(
name|container
argument_list|,
name|replicas
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/*        * Check if the container is over replicated and take appropriate        * action.        */
if|if
condition|(
name|isContainerOverReplicated
argument_list|(
name|container
argument_list|,
name|replicas
argument_list|)
condition|)
block|{
name|handleOverReplicatedContainer
argument_list|(
name|container
argument_list|,
name|replicas
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/*        * The container is neither under nor over replicated and the container        * is not healthy. This means that the container has unhealthy/corrupted        * replica.        */
name|handleUnstableContainer
argument_list|(
name|container
argument_list|,
name|replicas
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerNotFoundException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing container {}."
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lockManager
operator|.
name|unlock
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Reconciles the InflightActions for a given container.    *    * @param container Container to update    * @param inflightActions inflightReplication (or) inflightDeletion    * @param filter filter to check if the operation is completed    */
DECL|method|updateInflightAction (final ContainerInfo container, final Map<ContainerID, List<InflightAction>> inflightActions, final Predicate<InflightAction> filter)
specifier|private
name|void
name|updateInflightAction
parameter_list|(
specifier|final
name|ContainerInfo
name|container
parameter_list|,
specifier|final
name|Map
argument_list|<
name|ContainerID
argument_list|,
name|List
argument_list|<
name|InflightAction
argument_list|>
argument_list|>
name|inflightActions
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|InflightAction
argument_list|>
name|filter
parameter_list|)
block|{
specifier|final
name|ContainerID
name|id
init|=
name|container
operator|.
name|containerID
argument_list|()
decl_stmt|;
specifier|final
name|long
name|deadline
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|eventTimeout
decl_stmt|;
if|if
condition|(
name|inflightActions
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|InflightAction
argument_list|>
name|actions
init|=
name|inflightActions
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|actions
operator|.
name|removeIf
argument_list|(
name|action
lambda|->
name|action
operator|.
name|time
operator|<
name|deadline
argument_list|)
expr_stmt|;
name|actions
operator|.
name|removeIf
argument_list|(
name|filter
argument_list|)
expr_stmt|;
if|if
condition|(
name|actions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|inflightActions
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns true if the container is healthy according to ReplicationMonitor.    *    * According to ReplicationMonitor container is considered healthy if    * it has exact number of replicas in the same state as the container.    *    * @param container Container to check    * @param replicas Set of ContainerReplicas    * @return true if the container is healthy, false otherwise    */
DECL|method|isContainerHealthy (final ContainerInfo container, final Set<ContainerReplica> replicas)
specifier|private
name|boolean
name|isContainerHealthy
parameter_list|(
specifier|final
name|ContainerInfo
name|container
parameter_list|,
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|replicas
parameter_list|)
block|{
return|return
name|container
operator|.
name|getReplicationFactor
argument_list|()
operator|.
name|getNumber
argument_list|()
operator|==
name|replicas
operator|.
name|size
argument_list|()
operator|&&
name|replicas
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|r
lambda|->
name|compareState
argument_list|(
name|container
operator|.
name|getState
argument_list|()
argument_list|,
name|r
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Checks if the container is under replicated or not.    *    * @param container Container to check    * @param replicas Set of ContainerReplicas    * @return true if the container is under replicated, false otherwise    */
DECL|method|isContainerUnderReplicated (final ContainerInfo container, final Set<ContainerReplica> replicas)
specifier|private
name|boolean
name|isContainerUnderReplicated
parameter_list|(
specifier|final
name|ContainerInfo
name|container
parameter_list|,
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|replicas
parameter_list|)
block|{
return|return
name|container
operator|.
name|getReplicationFactor
argument_list|()
operator|.
name|getNumber
argument_list|()
operator|>
name|getReplicaCount
argument_list|(
name|container
operator|.
name|containerID
argument_list|()
argument_list|,
name|replicas
argument_list|)
return|;
block|}
comment|/**    * Checks if the container is over replicated or not.    *    * @param container Container to check    * @param replicas Set of ContainerReplicas    * @return true if the container if over replicated, false otherwise    */
DECL|method|isContainerOverReplicated (final ContainerInfo container, final Set<ContainerReplica> replicas)
specifier|private
name|boolean
name|isContainerOverReplicated
parameter_list|(
specifier|final
name|ContainerInfo
name|container
parameter_list|,
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|replicas
parameter_list|)
block|{
return|return
name|container
operator|.
name|getReplicationFactor
argument_list|()
operator|.
name|getNumber
argument_list|()
operator|<
name|getReplicaCount
argument_list|(
name|container
operator|.
name|containerID
argument_list|()
argument_list|,
name|replicas
argument_list|)
return|;
block|}
comment|/**    * Returns the replication count of the given container. This also    * considers inflight replication and deletion.    *    * @param id ContainerID    * @param replicas Set of existing replicas    * @return number of estimated replicas for this container    */
DECL|method|getReplicaCount (final ContainerID id, final Set<ContainerReplica> replicas)
specifier|private
name|int
name|getReplicaCount
parameter_list|(
specifier|final
name|ContainerID
name|id
parameter_list|,
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|replicas
parameter_list|)
block|{
return|return
name|replicas
operator|.
name|size
argument_list|()
operator|+
name|inflightReplication
operator|.
name|getOrDefault
argument_list|(
name|id
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|-
name|inflightDeletion
operator|.
name|getOrDefault
argument_list|(
name|id
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Returns true if more than 50% of the container replicas with unique    * originNodeId are in QUASI_CLOSED state.    *    * @param container Container to check    * @param replicas Set of ContainerReplicas    * @return true if we can force close the container, false otherwise    */
DECL|method|canForceCloseContainer (final ContainerInfo container, final Set<ContainerReplica> replicas)
specifier|private
name|boolean
name|canForceCloseContainer
parameter_list|(
specifier|final
name|ContainerInfo
name|container
parameter_list|,
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|replicas
parameter_list|)
block|{
name|Preconditions
operator|.
name|assertTrue
argument_list|(
name|container
operator|.
name|getState
argument_list|()
operator|==
name|LifeCycleState
operator|.
name|QUASI_CLOSED
argument_list|)
expr_stmt|;
specifier|final
name|int
name|replicationFactor
init|=
name|container
operator|.
name|getReplicationFactor
argument_list|()
operator|.
name|getNumber
argument_list|()
decl_stmt|;
specifier|final
name|long
name|uniqueQuasiClosedReplicaCount
init|=
name|replicas
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|QUASI_CLOSED
argument_list|)
operator|.
name|map
argument_list|(
name|ContainerReplica
operator|::
name|getOriginDatanodeId
argument_list|)
operator|.
name|distinct
argument_list|()
operator|.
name|count
argument_list|()
decl_stmt|;
return|return
name|uniqueQuasiClosedReplicaCount
operator|>
operator|(
name|replicationFactor
operator|/
literal|2
operator|)
return|;
block|}
comment|/**    * Force close the container replica(s) with highest sequence Id.    *    *<p>    *   Note: We should force close the container only if>50% (quorum)    *   of replicas with unique originNodeId are in QUASI_CLOSED state.    *</p>    *    * @param container ContainerInfo    * @param replicas Set of ContainerReplicas    */
DECL|method|forceCloseContainer (final ContainerInfo container, final Set<ContainerReplica> replicas)
specifier|private
name|void
name|forceCloseContainer
parameter_list|(
specifier|final
name|ContainerInfo
name|container
parameter_list|,
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|replicas
parameter_list|)
block|{
name|Preconditions
operator|.
name|assertTrue
argument_list|(
name|container
operator|.
name|getState
argument_list|()
operator|==
name|LifeCycleState
operator|.
name|QUASI_CLOSED
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ContainerReplica
argument_list|>
name|quasiClosedReplicas
init|=
name|replicas
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|QUASI_CLOSED
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Long
name|sequenceId
init|=
name|quasiClosedReplicas
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ContainerReplica
operator|::
name|getSequenceId
argument_list|)
operator|.
name|max
argument_list|(
name|Long
operator|::
name|compare
argument_list|)
operator|.
name|orElse
argument_list|(
operator|-
literal|1L
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Force closing container {} with BCSID {},"
operator|+
literal|" which is in QUASI_CLOSED state."
argument_list|,
name|container
operator|.
name|containerID
argument_list|()
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
name|quasiClosedReplicas
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|sequenceId
operator|!=
operator|-
literal|1L
argument_list|)
operator|.
name|filter
argument_list|(
name|replica
lambda|->
name|replica
operator|.
name|getSequenceId
argument_list|()
operator|.
name|equals
argument_list|(
name|sequenceId
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|replica
lambda|->
name|sendCloseCommand
argument_list|(
name|container
argument_list|,
name|replica
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * If the given container is under replicated, identify a new set of    * datanode(s) to replicate the container using ContainerPlacementPolicy    * and send replicate container command to the identified datanode(s).    *    * @param container ContainerInfo    * @param replicas Set of ContainerReplicas    */
DECL|method|handleUnderReplicatedContainer (final ContainerInfo container, final Set<ContainerReplica> replicas)
specifier|private
name|void
name|handleUnderReplicatedContainer
parameter_list|(
specifier|final
name|ContainerInfo
name|container
parameter_list|,
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|replicas
parameter_list|)
block|{
try|try
block|{
specifier|final
name|ContainerID
name|id
init|=
name|container
operator|.
name|containerID
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|deletionInFlight
init|=
name|inflightDeletion
operator|.
name|getOrDefault
argument_list|(
name|id
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|action
lambda|->
name|action
operator|.
name|datanode
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|source
init|=
name|replicas
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|QUASI_CLOSED
operator|||
name|r
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|CLOSED
argument_list|)
operator|.
name|filter
argument_list|(
name|r
lambda|->
operator|!
name|deletionInFlight
operator|.
name|contains
argument_list|(
name|r
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|)
argument_list|)
operator|.
name|sorted
argument_list|(
parameter_list|(
name|r1
parameter_list|,
name|r2
parameter_list|)
lambda|->
name|r2
operator|.
name|getSequenceId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r1
operator|.
name|getSequenceId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|ContainerReplica
operator|::
name|getDatanodeDetails
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|replicationFactor
init|=
name|container
operator|.
name|getReplicationFactor
argument_list|()
operator|.
name|getNumber
argument_list|()
decl_stmt|;
specifier|final
name|int
name|delta
init|=
name|replicationFactor
operator|-
name|getReplicaCount
argument_list|(
name|id
argument_list|,
name|replicas
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|selectedDatanodes
init|=
name|containerPlacement
operator|.
name|chooseDatanodes
argument_list|(
name|source
argument_list|,
name|delta
argument_list|,
name|container
operator|.
name|getUsedBytes
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Container {} is under replicated. Expected replica count"
operator|+
literal|" is {}, but found {}."
argument_list|,
name|id
argument_list|,
name|replicationFactor
argument_list|,
name|replicationFactor
operator|-
name|delta
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeDetails
name|datanode
range|:
name|selectedDatanodes
control|)
block|{
name|sendReplicateCommand
argument_list|(
name|container
argument_list|,
name|datanode
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot replicate container {}, no healthy replica found."
argument_list|,
name|container
operator|.
name|containerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while replicating container {}."
argument_list|,
name|container
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * If the given container is over replicated, identify the datanode(s)    * to delete the container and send delete container command to the    * identified datanode(s).    *    * @param container ContainerInfo    * @param replicas Set of ContainerReplicas    */
DECL|method|handleOverReplicatedContainer (final ContainerInfo container, final Set<ContainerReplica> replicas)
specifier|private
name|void
name|handleOverReplicatedContainer
parameter_list|(
specifier|final
name|ContainerInfo
name|container
parameter_list|,
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|replicas
parameter_list|)
block|{
specifier|final
name|ContainerID
name|id
init|=
name|container
operator|.
name|containerID
argument_list|()
decl_stmt|;
specifier|final
name|int
name|replicationFactor
init|=
name|container
operator|.
name|getReplicationFactor
argument_list|()
operator|.
name|getNumber
argument_list|()
decl_stmt|;
comment|// Dont consider inflight replication while calculating excess here.
specifier|final
name|int
name|excess
init|=
name|replicas
operator|.
name|size
argument_list|()
operator|-
name|replicationFactor
operator|-
name|inflightDeletion
operator|.
name|getOrDefault
argument_list|(
name|id
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|excess
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container {} is over replicated. Expected replica count"
operator|+
literal|" is {}, but found {}."
argument_list|,
name|id
argument_list|,
name|replicationFactor
argument_list|,
name|replicationFactor
operator|+
name|excess
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|UUID
argument_list|,
name|ContainerReplica
argument_list|>
name|uniqueReplicas
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|replicas
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|compareState
argument_list|(
name|container
operator|.
name|getState
argument_list|()
argument_list|,
name|r
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|r
lambda|->
name|uniqueReplicas
operator|.
name|putIfAbsent
argument_list|(
name|r
operator|.
name|getOriginDatanodeId
argument_list|()
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
comment|// Retain one healthy replica per origin node Id.
specifier|final
name|List
argument_list|<
name|ContainerReplica
argument_list|>
name|eligibleReplicas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|replicas
argument_list|)
decl_stmt|;
name|eligibleReplicas
operator|.
name|removeAll
argument_list|(
name|uniqueReplicas
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ContainerReplica
argument_list|>
name|unhealthyReplicas
init|=
name|eligibleReplicas
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
operator|!
name|compareState
argument_list|(
name|container
operator|.
name|getState
argument_list|()
argument_list|,
name|r
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
comment|//Move the unhealthy replicas to the front of eligible replicas to delete
name|eligibleReplicas
operator|.
name|removeAll
argument_list|(
name|unhealthyReplicas
argument_list|)
expr_stmt|;
name|eligibleReplicas
operator|.
name|addAll
argument_list|(
literal|0
argument_list|,
name|unhealthyReplicas
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|excess
condition|;
name|i
operator|++
control|)
block|{
name|sendDeleteCommand
argument_list|(
name|container
argument_list|,
name|eligibleReplicas
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Handles unstable container.    * A container is inconsistent if any of the replica state doesn't    * match the container state. We have to take appropriate action    * based on state of the replica.    *    * @param container ContainerInfo    * @param replicas Set of ContainerReplicas    */
DECL|method|handleUnstableContainer (final ContainerInfo container, final Set<ContainerReplica> replicas)
specifier|private
name|void
name|handleUnstableContainer
parameter_list|(
specifier|final
name|ContainerInfo
name|container
parameter_list|,
specifier|final
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|replicas
parameter_list|)
block|{
comment|// Find unhealthy replicas
name|List
argument_list|<
name|ContainerReplica
argument_list|>
name|unhealthyReplicas
init|=
name|replicas
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
operator|!
name|compareState
argument_list|(
name|container
operator|.
name|getState
argument_list|()
argument_list|,
name|r
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|ContainerReplica
argument_list|>
name|iterator
init|=
name|unhealthyReplicas
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|ContainerReplica
name|replica
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|State
name|state
init|=
name|replica
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|OPEN
operator|||
name|state
operator|==
name|State
operator|.
name|CLOSING
condition|)
block|{
name|sendCloseCommand
argument_list|(
name|container
argument_list|,
name|replica
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|QUASI_CLOSED
condition|)
block|{
comment|// Send force close command if the BCSID matches
if|if
condition|(
name|container
operator|.
name|getSequenceId
argument_list|()
operator|==
name|replica
operator|.
name|getSequenceId
argument_list|()
condition|)
block|{
name|sendCloseCommand
argument_list|(
name|container
argument_list|,
name|replica
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Now we are left with the replicas which are either unhealthy or
comment|// the BCSID doesn't match. These replicas should be deleted.
comment|/*      * If we have unhealthy replicas we go under replicated and then      * replicate the healthy copy.      *      * We also make sure that we delete only one unhealthy replica at a time.      *      * If there are two unhealthy replica:      *  - Delete first unhealthy replica      *  - Re-replicate the healthy copy      *  - Delete second unhealthy replica      *  - Re-replicate the healthy copy      *      * Note: Only one action will be executed in a single ReplicationMonitor      *       iteration. So to complete all the above actions we need four      *       ReplicationMonitor iterations.      */
name|unhealthyReplicas
operator|.
name|stream
argument_list|()
operator|.
name|findFirst
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|replica
lambda|->
name|sendDeleteCommand
argument_list|(
name|container
argument_list|,
name|replica
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sends close container command for the given container to the given    * datanode.    *    * @param container Container to be closed    * @param datanode The datanode on which the container    *                  has to be closed    * @param force Should be set to true if we want to close a    *               QUASI_CLOSED container    */
DECL|method|sendCloseCommand (final ContainerInfo container, final DatanodeDetails datanode, final boolean force)
specifier|private
name|void
name|sendCloseCommand
parameter_list|(
specifier|final
name|ContainerInfo
name|container
parameter_list|,
specifier|final
name|DatanodeDetails
name|datanode
parameter_list|,
specifier|final
name|boolean
name|force
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending close container command for container {}"
operator|+
literal|" to datanode {}."
argument_list|,
name|container
operator|.
name|containerID
argument_list|()
argument_list|,
name|datanode
argument_list|)
expr_stmt|;
name|CloseContainerCommand
name|closeContainerCommand
init|=
operator|new
name|CloseContainerCommand
argument_list|(
name|container
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|container
operator|.
name|getPipelineID
argument_list|()
argument_list|,
name|force
argument_list|)
decl_stmt|;
name|eventPublisher
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|DATANODE_COMMAND
argument_list|,
operator|new
name|CommandForDatanode
argument_list|<>
argument_list|(
name|datanode
operator|.
name|getUuid
argument_list|()
argument_list|,
name|closeContainerCommand
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sends replicate container command for the given container to the given    * datanode.    *    * @param container Container to be replicated    * @param datanode The destination datanode to replicate    * @param sources List of source nodes from where we can replicate    */
DECL|method|sendReplicateCommand (final ContainerInfo container, final DatanodeDetails datanode, final List<DatanodeDetails> sources)
specifier|private
name|void
name|sendReplicateCommand
parameter_list|(
specifier|final
name|ContainerInfo
name|container
parameter_list|,
specifier|final
name|DatanodeDetails
name|datanode
parameter_list|,
specifier|final
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|sources
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending replicate container command for container {}"
operator|+
literal|" to datanode {}"
argument_list|,
name|container
operator|.
name|containerID
argument_list|()
argument_list|,
name|datanode
argument_list|)
expr_stmt|;
specifier|final
name|ContainerID
name|id
init|=
name|container
operator|.
name|containerID
argument_list|()
decl_stmt|;
specifier|final
name|ReplicateContainerCommand
name|replicateCommand
init|=
operator|new
name|ReplicateContainerCommand
argument_list|(
name|id
operator|.
name|getId
argument_list|()
argument_list|,
name|sources
argument_list|)
decl_stmt|;
name|inflightReplication
operator|.
name|computeIfAbsent
argument_list|(
name|id
argument_list|,
name|k
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|sendAndTrackDatanodeCommand
argument_list|(
name|datanode
argument_list|,
name|replicateCommand
argument_list|,
name|action
lambda|->
name|inflightReplication
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|add
argument_list|(
name|action
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sends delete container command for the given container to the given    * datanode.    *    * @param container Container to be deleted    * @param datanode The datanode on which the replica should be deleted    * @param force Should be set to true to delete an OPEN replica    */
DECL|method|sendDeleteCommand (final ContainerInfo container, final DatanodeDetails datanode, final boolean force)
specifier|private
name|void
name|sendDeleteCommand
parameter_list|(
specifier|final
name|ContainerInfo
name|container
parameter_list|,
specifier|final
name|DatanodeDetails
name|datanode
parameter_list|,
specifier|final
name|boolean
name|force
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending delete container command for container {}"
operator|+
literal|" to datanode {}"
argument_list|,
name|container
operator|.
name|containerID
argument_list|()
argument_list|,
name|datanode
argument_list|)
expr_stmt|;
specifier|final
name|ContainerID
name|id
init|=
name|container
operator|.
name|containerID
argument_list|()
decl_stmt|;
specifier|final
name|DeleteContainerCommand
name|deleteCommand
init|=
operator|new
name|DeleteContainerCommand
argument_list|(
name|id
operator|.
name|getId
argument_list|()
argument_list|,
name|force
argument_list|)
decl_stmt|;
name|inflightDeletion
operator|.
name|computeIfAbsent
argument_list|(
name|id
argument_list|,
name|k
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|sendAndTrackDatanodeCommand
argument_list|(
name|datanode
argument_list|,
name|deleteCommand
argument_list|,
name|action
lambda|->
name|inflightDeletion
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|add
argument_list|(
name|action
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates CommandForDatanode with the given SCMCommand and fires    * DATANODE_COMMAND event to event queue.    *    * Tracks the command using the given tracker.    *    * @param datanode Datanode to which the command has to be sent    * @param command SCMCommand to be sent    * @param tracker Tracker which tracks the inflight actions    * @param<T> Type of SCMCommand    */
DECL|method|sendAndTrackDatanodeCommand ( final DatanodeDetails datanode, final SCMCommand<T> command, final Consumer<InflightAction> tracker)
specifier|private
parameter_list|<
name|T
extends|extends
name|GeneratedMessage
parameter_list|>
name|void
name|sendAndTrackDatanodeCommand
parameter_list|(
specifier|final
name|DatanodeDetails
name|datanode
parameter_list|,
specifier|final
name|SCMCommand
argument_list|<
name|T
argument_list|>
name|command
parameter_list|,
specifier|final
name|Consumer
argument_list|<
name|InflightAction
argument_list|>
name|tracker
parameter_list|)
block|{
specifier|final
name|CommandForDatanode
argument_list|<
name|T
argument_list|>
name|datanodeCommand
init|=
operator|new
name|CommandForDatanode
argument_list|<>
argument_list|(
name|datanode
operator|.
name|getUuid
argument_list|()
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|eventPublisher
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|DATANODE_COMMAND
argument_list|,
name|datanodeCommand
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|accept
argument_list|(
operator|new
name|InflightAction
argument_list|(
name|datanode
argument_list|,
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Compares the container state with the replica state.    *    * @param containerState ContainerState    * @param replicaState ReplicaState    * @return true if the state matches, false otherwise    */
DECL|method|compareState (final LifeCycleState containerState, final State replicaState)
specifier|private
specifier|static
name|boolean
name|compareState
parameter_list|(
specifier|final
name|LifeCycleState
name|containerState
parameter_list|,
specifier|final
name|State
name|replicaState
parameter_list|)
block|{
switch|switch
condition|(
name|containerState
condition|)
block|{
case|case
name|OPEN
case|:
return|return
name|replicaState
operator|==
name|State
operator|.
name|OPEN
return|;
case|case
name|CLOSING
case|:
return|return
name|replicaState
operator|==
name|State
operator|.
name|CLOSING
return|;
case|case
name|QUASI_CLOSED
case|:
return|return
name|replicaState
operator|==
name|State
operator|.
name|QUASI_CLOSED
return|;
case|case
name|CLOSED
case|:
return|return
name|replicaState
operator|==
name|State
operator|.
name|CLOSED
return|;
case|case
name|DELETING
case|:
return|return
literal|false
return|;
case|case
name|DELETED
case|:
return|return
literal|false
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Wrapper class to hold the InflightAction with its start time.    */
DECL|class|InflightAction
specifier|private
specifier|static
specifier|final
class|class
name|InflightAction
block|{
DECL|field|datanode
specifier|private
specifier|final
name|DatanodeDetails
name|datanode
decl_stmt|;
DECL|field|time
specifier|private
specifier|final
name|long
name|time
decl_stmt|;
DECL|method|InflightAction (final DatanodeDetails datanode, final long time)
specifier|private
name|InflightAction
parameter_list|(
specifier|final
name|DatanodeDetails
name|datanode
parameter_list|,
specifier|final
name|long
name|time
parameter_list|)
block|{
name|this
operator|.
name|datanode
operator|=
name|datanode
expr_stmt|;
name|this
operator|.
name|time
operator|=
name|time
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

