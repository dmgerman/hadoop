begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.pipelines
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipelines
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|PipelineID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Handles pipeline close event.  */
end_comment

begin_class
DECL|class|PipelineCloseHandler
specifier|public
class|class
name|PipelineCloseHandler
implements|implements
name|EventHandler
argument_list|<
name|PipelineID
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PipelineCloseHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|pipelineSelector
specifier|private
specifier|final
name|PipelineSelector
name|pipelineSelector
decl_stmt|;
DECL|method|PipelineCloseHandler (PipelineSelector pipelineSelector)
specifier|public
name|PipelineCloseHandler
parameter_list|(
name|PipelineSelector
name|pipelineSelector
parameter_list|)
block|{
name|this
operator|.
name|pipelineSelector
operator|=
name|pipelineSelector
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMessage (PipelineID pipelineID, EventPublisher publisher)
specifier|public
name|void
name|onMessage
parameter_list|(
name|PipelineID
name|pipelineID
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
block|{
name|Pipeline
name|pipeline
init|=
name|pipelineSelector
operator|.
name|getPipeline
argument_list|(
name|pipelineID
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|pipeline
operator|!=
literal|null
condition|)
block|{
name|pipelineSelector
operator|.
name|finalizePipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"pipeline:{} not found"
argument_list|,
name|pipelineID
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"failed to close pipeline:{}"
argument_list|,
name|pipelineID
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

