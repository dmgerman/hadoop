begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.ââSee the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.ââThe ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.ââYou may obtain a copy of the License at  *  * ââââ http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ScmOps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeProtocolServer
operator|.
name|NodeRegistrationContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * StorageContainerManager enters chill mode on startup to allow system to  * reach a stable state before becoming fully functional. SCM will wait  * for certain resources to be reported before coming out of chill mode.  *  * ChillModeExitRule defines format to define new rules which must be satisfied  * to exit Chill mode.  * ContainerChillModeRule defines the only exit criteria right now.  * On every new datanode registration event this class adds replicas  * for reported containers and validates if cutoff threshold for  * containers is meet.  */
end_comment

begin_class
DECL|class|SCMChillModeManager
specifier|public
class|class
name|SCMChillModeManager
implements|implements
name|EventHandler
argument_list|<
name|NodeRegistrationContainerReport
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SCMChillModeManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|inChillMode
specifier|private
name|AtomicBoolean
name|inChillMode
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|containerWithMinReplicas
specifier|private
name|AtomicLong
name|containerWithMinReplicas
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|exitRules
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ChillModeExitRule
argument_list|>
name|exitRules
init|=
operator|new
name|HashMap
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|config
specifier|private
name|Configuration
name|config
decl_stmt|;
DECL|field|CONT_EXIT_RULE
specifier|private
specifier|static
specifier|final
name|String
name|CONT_EXIT_RULE
init|=
literal|"ContainerChillModeRule"
decl_stmt|;
DECL|field|DN_EXIT_RULE
specifier|private
specifier|static
specifier|final
name|String
name|DN_EXIT_RULE
init|=
literal|"DataNodeChillModeRule"
decl_stmt|;
DECL|field|eventPublisher
specifier|private
specifier|final
name|EventQueue
name|eventPublisher
decl_stmt|;
DECL|method|SCMChillModeManager (Configuration conf, List<ContainerInfo> allContainers, EventQueue eventQueue)
name|SCMChillModeManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|ContainerInfo
argument_list|>
name|allContainers
parameter_list|,
name|EventQueue
name|eventQueue
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|eventPublisher
operator|=
name|eventQueue
expr_stmt|;
name|exitRules
operator|.
name|put
argument_list|(
name|CONT_EXIT_RULE
argument_list|,
operator|new
name|ContainerChillModeRule
argument_list|(
name|config
argument_list|,
name|allContainers
argument_list|)
argument_list|)
expr_stmt|;
name|exitRules
operator|.
name|put
argument_list|(
name|DN_EXIT_RULE
argument_list|,
operator|new
name|DataNodeChillModeRule
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
name|HddsConfigKeys
operator|.
name|HDDS_SCM_CHILLMODE_ENABLED
argument_list|,
name|HddsConfigKeys
operator|.
name|HDDS_SCM_CHILLMODE_ENABLED_DEFAULT
argument_list|)
condition|)
block|{
name|exitChillMode
argument_list|(
name|eventQueue
argument_list|)
expr_stmt|;
block|}
name|emitChillModeStatus
argument_list|()
expr_stmt|;
block|}
comment|/**    * Emit Chill mode status.    */
annotation|@
name|VisibleForTesting
DECL|method|emitChillModeStatus ()
specifier|public
name|void
name|emitChillModeStatus
parameter_list|()
block|{
name|eventPublisher
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CHILL_MODE_STATUS
argument_list|,
name|inChillMode
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|validateChillModeExitRules (EventPublisher eventQueue)
specifier|private
name|void
name|validateChillModeExitRules
parameter_list|(
name|EventPublisher
name|eventQueue
parameter_list|)
block|{
for|for
control|(
name|ChillModeExitRule
name|exitRule
range|:
name|exitRules
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|exitRule
operator|.
name|validate
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
name|exitChillMode
argument_list|(
name|eventQueue
argument_list|)
expr_stmt|;
block|}
comment|/**    * Exit chill mode. It does following actions:    * 1. Set chill mode status to fale.    * 2. Emits START_REPLICATION for ReplicationManager.    * 3. Cleanup resources.    * 4. Emit chill mode status.    * @param eventQueue    */
annotation|@
name|VisibleForTesting
DECL|method|exitChillMode (EventPublisher eventQueue)
specifier|public
name|void
name|exitChillMode
parameter_list|(
name|EventPublisher
name|eventQueue
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"SCM exiting chill mode."
argument_list|)
expr_stmt|;
name|setInChillMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// TODO: Remove handler registration as there is no need to listen to
comment|// register events anymore.
for|for
control|(
name|ChillModeExitRule
name|e
range|:
name|exitRules
operator|.
name|values
argument_list|()
control|)
block|{
name|e
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
name|emitChillModeStatus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMessage ( NodeRegistrationContainerReport nodeRegistrationContainerReport, EventPublisher publisher)
specifier|public
name|void
name|onMessage
parameter_list|(
name|NodeRegistrationContainerReport
name|nodeRegistrationContainerReport
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
block|{
if|if
condition|(
name|getInChillMode
argument_list|()
condition|)
block|{
name|exitRules
operator|.
name|get
argument_list|(
name|CONT_EXIT_RULE
argument_list|)
operator|.
name|process
argument_list|(
name|nodeRegistrationContainerReport
argument_list|)
expr_stmt|;
name|exitRules
operator|.
name|get
argument_list|(
name|DN_EXIT_RULE
argument_list|)
operator|.
name|process
argument_list|(
name|nodeRegistrationContainerReport
argument_list|)
expr_stmt|;
name|validateChillModeExitRules
argument_list|(
name|publisher
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getInChillMode ()
specifier|public
name|boolean
name|getInChillMode
parameter_list|()
block|{
return|return
name|inChillMode
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Set chill mode status.    */
DECL|method|setInChillMode (boolean inChillMode)
specifier|public
name|void
name|setInChillMode
parameter_list|(
name|boolean
name|inChillMode
parameter_list|)
block|{
name|this
operator|.
name|inChillMode
operator|.
name|set
argument_list|(
name|inChillMode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Interface for defining chill mode exit rules.    *    * @param<T>    */
DECL|interface|ChillModeExitRule
specifier|public
interface|interface
name|ChillModeExitRule
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|validate ()
name|boolean
name|validate
parameter_list|()
function_decl|;
DECL|method|process (T report)
name|void
name|process
parameter_list|(
name|T
name|report
parameter_list|)
function_decl|;
DECL|method|cleanup ()
name|void
name|cleanup
parameter_list|()
function_decl|;
block|}
comment|/**    * Class defining Chill mode exit criteria for Containers.    */
DECL|class|ContainerChillModeRule
specifier|public
class|class
name|ContainerChillModeRule
implements|implements
name|ChillModeExitRule
argument_list|<
name|NodeRegistrationContainerReport
argument_list|>
block|{
comment|// Required cutoff % for containers with at least 1 reported replica.
DECL|field|chillModeCutoff
specifier|private
name|double
name|chillModeCutoff
decl_stmt|;
comment|// Containers read from scm db.
DECL|field|containerMap
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|ContainerInfo
argument_list|>
name|containerMap
decl_stmt|;
DECL|field|maxContainer
specifier|private
name|double
name|maxContainer
decl_stmt|;
DECL|method|ContainerChillModeRule (Configuration conf, List<ContainerInfo> containers)
specifier|public
name|ContainerChillModeRule
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|ContainerInfo
argument_list|>
name|containers
parameter_list|)
block|{
name|chillModeCutoff
operator|=
name|conf
operator|.
name|getDouble
argument_list|(
name|HddsConfigKeys
operator|.
name|HDDS_SCM_CHILLMODE_THRESHOLD_PCT
argument_list|,
name|HddsConfigKeys
operator|.
name|HDDS_SCM_CHILLMODE_THRESHOLD_PCT_DEFAULT
argument_list|)
expr_stmt|;
name|containerMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|containers
operator|!=
literal|null
condition|)
block|{
name|containers
operator|.
name|forEach
argument_list|(
name|c
lambda|->
block|{
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|containerMap
operator|.
name|put
argument_list|(
name|c
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|maxContainer
operator|=
name|containers
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|validate ()
specifier|public
name|boolean
name|validate
parameter_list|()
block|{
if|if
condition|(
name|maxContainer
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|getCurrentContainerThreshold
argument_list|()
operator|>=
name|chillModeCutoff
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCurrentContainerThreshold ()
specifier|public
name|double
name|getCurrentContainerThreshold
parameter_list|()
block|{
if|if
condition|(
name|maxContainer
operator|==
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
operator|(
name|containerWithMinReplicas
operator|.
name|doubleValue
argument_list|()
operator|/
name|maxContainer
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|process (NodeRegistrationContainerReport reportsProto)
specifier|public
name|void
name|process
parameter_list|(
name|NodeRegistrationContainerReport
name|reportsProto
parameter_list|)
block|{
if|if
condition|(
name|maxContainer
operator|==
literal|0
condition|)
block|{
comment|// No container to check.
return|return;
block|}
name|reportsProto
operator|.
name|getReport
argument_list|()
operator|.
name|getReportsList
argument_list|()
operator|.
name|forEach
argument_list|(
name|c
lambda|->
block|{
if|if
condition|(
name|containerMap
operator|.
name|containsKey
argument_list|(
name|c
operator|.
name|getContainerID
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|containerMap
operator|.
name|remove
argument_list|(
name|c
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|containerWithMinReplicas
operator|.
name|getAndAdd
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|inChillMode
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"SCM in chill mode. {} % containers have at least one"
operator|+
literal|" reported replica."
argument_list|,
operator|(
name|containerWithMinReplicas
operator|.
name|get
argument_list|()
operator|/
name|maxContainer
operator|)
operator|*
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|containerMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Class defining Chill mode exit criteria according to number of DataNodes    * registered with SCM.    */
DECL|class|DataNodeChillModeRule
specifier|public
class|class
name|DataNodeChillModeRule
implements|implements
name|ChillModeExitRule
argument_list|<
name|NodeRegistrationContainerReport
argument_list|>
block|{
comment|// Min DataNodes required to exit chill mode.
DECL|field|requiredDns
specifier|private
name|int
name|requiredDns
decl_stmt|;
DECL|field|registeredDns
specifier|private
name|int
name|registeredDns
init|=
literal|0
decl_stmt|;
comment|// Set to track registered DataNodes.
DECL|field|registeredDnSet
specifier|private
name|HashSet
argument_list|<
name|UUID
argument_list|>
name|registeredDnSet
decl_stmt|;
DECL|method|DataNodeChillModeRule (Configuration conf)
specifier|public
name|DataNodeChillModeRule
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|requiredDns
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HddsConfigKeys
operator|.
name|HDDS_SCM_CHILLMODE_MIN_DATANODE
argument_list|,
name|HddsConfigKeys
operator|.
name|HDDS_SCM_CHILLMODE_MIN_DATANODE_DEFAULT
argument_list|)
expr_stmt|;
name|registeredDnSet
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|requiredDns
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate ()
specifier|public
name|boolean
name|validate
parameter_list|()
block|{
return|return
name|registeredDns
operator|>=
name|requiredDns
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRegisteredDataNodes ()
specifier|public
name|double
name|getRegisteredDataNodes
parameter_list|()
block|{
return|return
name|registeredDns
return|;
block|}
annotation|@
name|Override
DECL|method|process (NodeRegistrationContainerReport reportsProto)
specifier|public
name|void
name|process
parameter_list|(
name|NodeRegistrationContainerReport
name|reportsProto
parameter_list|)
block|{
if|if
condition|(
name|requiredDns
operator|==
literal|0
condition|)
block|{
comment|// No dn check required.
return|return;
block|}
if|if
condition|(
name|inChillMode
operator|.
name|get
argument_list|()
condition|)
block|{
name|registeredDnSet
operator|.
name|add
argument_list|(
name|reportsProto
operator|.
name|getDatanodeDetails
argument_list|()
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
name|registeredDns
operator|=
name|registeredDnSet
operator|.
name|size
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SCM in chill mode. {} DataNodes registered, {} required."
argument_list|,
name|registeredDns
argument_list|,
name|requiredDns
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|registeredDnSet
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getLogger ()
specifier|public
specifier|static
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCurrentContainerThreshold ()
specifier|public
name|double
name|getCurrentContainerThreshold
parameter_list|()
block|{
return|return
operator|(
operator|(
name|ContainerChillModeRule
operator|)
name|exitRules
operator|.
name|get
argument_list|(
name|CONT_EXIT_RULE
argument_list|)
operator|)
operator|.
name|getCurrentContainerThreshold
argument_list|()
return|;
block|}
comment|/**    * Operations restricted in SCM chill mode.    */
DECL|class|ChillModeRestrictedOps
specifier|public
specifier|static
class|class
name|ChillModeRestrictedOps
block|{
DECL|field|restrictedOps
specifier|private
specifier|static
name|EnumSet
name|restrictedOps
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|ScmOps
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|restrictedOps
operator|.
name|add
argument_list|(
name|ScmOps
operator|.
name|allocateBlock
argument_list|)
expr_stmt|;
name|restrictedOps
operator|.
name|add
argument_list|(
name|ScmOps
operator|.
name|allocateContainer
argument_list|)
expr_stmt|;
block|}
DECL|method|isRestrictedInChillMode (ScmOps opName)
specifier|public
specifier|static
name|boolean
name|isRestrictedInChillMode
parameter_list|(
name|ScmOps
name|opName
parameter_list|)
block|{
return|return
name|restrictedOps
operator|.
name|contains
argument_list|(
name|opName
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

