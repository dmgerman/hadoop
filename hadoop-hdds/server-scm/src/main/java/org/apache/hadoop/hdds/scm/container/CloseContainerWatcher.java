begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  *<p>http://www.apache.org/licenses/LICENSE-2.0  *<p>  *<p>Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|CommandStatus
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|command
operator|.
name|CommandStatusReportHandler
operator|.
name|CloseContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|CloseContainerEventHandler
operator|.
name|CloseContainerRetryableReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|LeaseNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This watcher will watch for CLOSE_CONTAINER_STATUS events fired from  * CommandStatusReport. If required it will re-trigger CloseContainer command  * for DataNodes to CloseContainerEventHandler.  */
end_comment

begin_class
DECL|class|CloseContainerWatcher
specifier|public
class|class
name|CloseContainerWatcher
extends|extends
name|EventWatcher
argument_list|<
name|CloseContainerRetryableReq
argument_list|,
name|CloseContainerStatus
argument_list|>
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CloseContainerWatcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|containerManager
specifier|private
specifier|final
name|ContainerManager
name|containerManager
decl_stmt|;
DECL|method|CloseContainerWatcher (Event<CloseContainerRetryableReq> startEvent, Event<CloseContainerStatus> completionEvent, LeaseManager<Long> leaseManager, ContainerManager containerManager)
specifier|public
name|CloseContainerWatcher
parameter_list|(
name|Event
argument_list|<
name|CloseContainerRetryableReq
argument_list|>
name|startEvent
parameter_list|,
name|Event
argument_list|<
name|CloseContainerStatus
argument_list|>
name|completionEvent
parameter_list|,
name|LeaseManager
argument_list|<
name|Long
argument_list|>
name|leaseManager
parameter_list|,
name|ContainerManager
name|containerManager
parameter_list|)
block|{
name|super
argument_list|(
name|startEvent
argument_list|,
name|completionEvent
argument_list|,
name|leaseManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerManager
operator|=
name|containerManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onTimeout (EventPublisher publisher, CloseContainerRetryableReq payload)
specifier|protected
name|void
name|onTimeout
parameter_list|(
name|EventPublisher
name|publisher
parameter_list|,
name|CloseContainerRetryableReq
name|payload
parameter_list|)
block|{
comment|// Let CloseContainerEventHandler handle this message.
name|this
operator|.
name|resendEventToHandler
argument_list|(
name|payload
operator|.
name|getId
argument_list|()
argument_list|,
name|publisher
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFinished (EventPublisher publisher, CloseContainerRetryableReq payload)
specifier|protected
name|void
name|onFinished
parameter_list|(
name|EventPublisher
name|publisher
parameter_list|,
name|CloseContainerRetryableReq
name|payload
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"CloseContainerCommand for containerId: {} executed "
argument_list|,
name|payload
operator|.
name|getContainerID
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleCompletion (CloseContainerStatus status, EventPublisher publisher)
specifier|protected
specifier|synchronized
name|void
name|handleCompletion
parameter_list|(
name|CloseContainerStatus
name|status
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
throws|throws
name|LeaseNotFoundException
block|{
comment|// If status is PENDING then return without doing anything.
if|if
condition|(
name|status
operator|.
name|getCmdStatus
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|Status
operator|.
name|PENDING
argument_list|)
condition|)
block|{
return|return;
block|}
name|CloseContainerRetryableReq
name|closeCont
init|=
name|getTrackedEventbyId
argument_list|(
name|status
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|super
operator|.
name|handleCompletion
argument_list|(
name|status
argument_list|,
name|publisher
argument_list|)
expr_stmt|;
comment|// If status is FAILED then send a msg to Handler to resend the command.
if|if
condition|(
name|status
operator|.
name|getCmdStatus
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|Status
operator|.
name|FAILED
argument_list|)
operator|&&
name|closeCont
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|resendEventToHandler
argument_list|(
name|closeCont
operator|.
name|getId
argument_list|()
argument_list|,
name|publisher
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|resendEventToHandler (long containerID, EventPublisher publisher)
specifier|private
name|void
name|resendEventToHandler
parameter_list|(
name|long
name|containerID
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
block|{
try|try
block|{
comment|// Check if container is still open
if|if
condition|(
name|containerManager
operator|.
name|getContainer
argument_list|(
name|containerID
argument_list|)
operator|.
name|isContainerOpen
argument_list|()
condition|)
block|{
name|publisher
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER
argument_list|,
name|ContainerID
operator|.
name|valueof
argument_list|(
name|containerID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error in CloseContainerWatcher while processing event "
operator|+
literal|"for containerId {} ExceptionMsg: "
argument_list|,
name|containerID
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

