begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license  * agreements. See the NOTICE file distributed with this work for additional  * information regarding  * copyright ownership. The ASF licenses this file to you under the Apache  * License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the  * License. You may obtain a  * copy of the License at  *  *<p>http://www.apache.org/licenses/LICENSE-2.0  *  *<p>Unless required by applicable law or agreed to in writing, software  * distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR  * CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing  * permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ScmOps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerLocationProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|HddsServerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerWithPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
operator|.
name|ResultCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|protocol
operator|.
name|StorageContainerLocationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerLocationProtocolProtos
operator|.
name|StorageContainerLocationProtocolService
operator|.
name|newReflectiveBlockingService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HANDLER_COUNT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HANDLER_COUNT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|ServerUtils
operator|.
name|updateRPCListenAddress
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|StorageContainerManager
operator|.
name|startRpcServer
import|;
end_import

begin_comment
comment|/**  * The RPC server that listens to requests from clients.  */
end_comment

begin_class
DECL|class|SCMClientProtocolServer
specifier|public
class|class
name|SCMClientProtocolServer
implements|implements
name|StorageContainerLocationProtocol
implements|,
name|EventHandler
argument_list|<
name|Boolean
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SCMClientProtocolServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|clientRpcServer
specifier|private
specifier|final
name|RPC
operator|.
name|Server
name|clientRpcServer
decl_stmt|;
DECL|field|clientRpcAddress
specifier|private
specifier|final
name|InetSocketAddress
name|clientRpcAddress
decl_stmt|;
DECL|field|scm
specifier|private
specifier|final
name|StorageContainerManager
name|scm
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|chillModePrecheck
specifier|private
name|ChillModePrecheck
name|chillModePrecheck
decl_stmt|;
DECL|method|SCMClientProtocolServer (OzoneConfiguration conf, StorageContainerManager scm)
specifier|public
name|SCMClientProtocolServer
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|StorageContainerManager
name|scm
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|scm
operator|=
name|scm
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|chillModePrecheck
operator|=
operator|new
name|ChillModePrecheck
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|int
name|handlerCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_SCM_HANDLER_COUNT_KEY
argument_list|,
name|OZONE_SCM_HANDLER_COUNT_DEFAULT
argument_list|)
decl_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|StorageContainerLocationProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// SCM Container Service RPC
name|BlockingService
name|storageProtoPbService
init|=
name|newReflectiveBlockingService
argument_list|(
operator|new
name|StorageContainerLocationProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|InetSocketAddress
name|scmAddress
init|=
name|HddsServerUtil
operator|.
name|getScmClientBindAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|clientRpcServer
operator|=
name|startRpcServer
argument_list|(
name|conf
argument_list|,
name|scmAddress
argument_list|,
name|StorageContainerLocationProtocolPB
operator|.
name|class
argument_list|,
name|storageProtoPbService
argument_list|,
name|handlerCount
argument_list|)
expr_stmt|;
name|clientRpcAddress
operator|=
name|updateRPCListenAddress
argument_list|(
name|conf
argument_list|,
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|,
name|scmAddress
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
block|}
DECL|method|getClientRpcServer ()
specifier|public
name|RPC
operator|.
name|Server
name|getClientRpcServer
parameter_list|()
block|{
return|return
name|clientRpcServer
return|;
block|}
DECL|method|getClientRpcAddress ()
specifier|public
name|InetSocketAddress
name|getClientRpcAddress
parameter_list|()
block|{
return|return
name|clientRpcAddress
return|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|StorageContainerManager
operator|.
name|buildRpcServerStartMessage
argument_list|(
literal|"RPC server for Client "
argument_list|,
name|getClientRpcAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getClientRpcServer
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping the RPC server for Client Protocol"
argument_list|)
expr_stmt|;
name|getClientRpcServer
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Client Protocol RPC stop failed."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|scm
operator|.
name|getScmNodeManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|join ()
specifier|public
name|void
name|join
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Join RPC server for Client Protocol"
argument_list|)
expr_stmt|;
name|getClientRpcServer
argument_list|()
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRpcRemoteUsername ()
specifier|public
name|String
name|getRpcRemoteUsername
parameter_list|()
block|{
name|UserGroupInformation
name|user
init|=
name|ProtobufRpcEngine
operator|.
name|Server
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
return|return
name|user
operator|==
literal|null
condition|?
literal|null
else|:
name|user
operator|.
name|getUserName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|allocateContainer (HddsProtos.ReplicationType replicationType, HddsProtos.ReplicationFactor factor, String owner)
specifier|public
name|ContainerWithPipeline
name|allocateContainer
parameter_list|(
name|HddsProtos
operator|.
name|ReplicationType
name|replicationType
parameter_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
name|factor
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
name|ScmUtils
operator|.
name|preCheck
argument_list|(
name|ScmOps
operator|.
name|allocateContainer
argument_list|,
name|chillModePrecheck
argument_list|)
expr_stmt|;
name|String
name|remoteUser
init|=
name|getRpcRemoteUsername
argument_list|()
decl_stmt|;
name|getScm
argument_list|()
operator|.
name|checkAdminAccess
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
return|return
name|scm
operator|.
name|getContainerManager
argument_list|()
operator|.
name|allocateContainer
argument_list|(
name|replicationType
argument_list|,
name|factor
argument_list|,
name|owner
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getContainer (long containerID)
specifier|public
name|ContainerInfo
name|getContainer
parameter_list|(
name|long
name|containerID
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|remoteUser
init|=
name|getRpcRemoteUsername
argument_list|()
decl_stmt|;
name|getScm
argument_list|()
operator|.
name|checkAdminAccess
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
return|return
name|scm
operator|.
name|getContainerManager
argument_list|()
operator|.
name|getContainer
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|containerID
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerWithPipeline (long containerID)
specifier|public
name|ContainerWithPipeline
name|getContainerWithPipeline
parameter_list|(
name|long
name|containerID
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|chillModePrecheck
operator|.
name|isInChillMode
argument_list|()
condition|)
block|{
name|ContainerInfo
name|contInfo
init|=
name|scm
operator|.
name|getContainerManager
argument_list|()
operator|.
name|getContainer
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|containerID
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|contInfo
operator|.
name|isOpen
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|hasRequiredReplicas
argument_list|(
name|contInfo
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SCMException
argument_list|(
literal|"Open container "
operator|+
name|containerID
operator|+
literal|" doesn't"
operator|+
literal|" have enough replicas to service this operation in "
operator|+
literal|"Chill mode."
argument_list|,
name|ResultCodes
operator|.
name|CHILL_MODE_EXCEPTION
argument_list|)
throw|;
block|}
block|}
block|}
name|String
name|remoteUser
init|=
name|getRpcRemoteUsername
argument_list|()
decl_stmt|;
name|getScm
argument_list|()
operator|.
name|checkAdminAccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|scm
operator|.
name|getContainerManager
argument_list|()
operator|.
name|getContainerWithPipeline
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|containerID
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Check if container reported replicas are equal or greater than required    * replication factor.    */
DECL|method|hasRequiredReplicas (ContainerInfo contInfo)
specifier|private
name|boolean
name|hasRequiredReplicas
parameter_list|(
name|ContainerInfo
name|contInfo
parameter_list|)
block|{
try|try
block|{
return|return
name|getScm
argument_list|()
operator|.
name|getContainerManager
argument_list|()
operator|.
name|getContainerReplicas
argument_list|(
name|contInfo
operator|.
name|containerID
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
name|contInfo
operator|.
name|getReplicationFactor
argument_list|()
operator|.
name|getNumber
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ContainerNotFoundException
name|ex
parameter_list|)
block|{
comment|// getContainerReplicas throws exception if no replica's exist for given
comment|// container.
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|listContainer (long startContainerID, int count)
specifier|public
name|List
argument_list|<
name|ContainerInfo
argument_list|>
name|listContainer
parameter_list|(
name|long
name|startContainerID
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|scm
operator|.
name|getContainerManager
argument_list|()
operator|.
name|listContainer
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|startContainerID
argument_list|)
argument_list|,
name|count
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deleteContainer (long containerID)
specifier|public
name|void
name|deleteContainer
parameter_list|(
name|long
name|containerID
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|remoteUser
init|=
name|getRpcRemoteUsername
argument_list|()
decl_stmt|;
name|getScm
argument_list|()
operator|.
name|checkAdminAccess
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
name|scm
operator|.
name|getContainerManager
argument_list|()
operator|.
name|deleteContainer
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|containerID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|queryNode (HddsProtos.NodeState state, HddsProtos.QueryScope queryScope, String poolName)
specifier|public
name|List
argument_list|<
name|HddsProtos
operator|.
name|Node
argument_list|>
name|queryNode
parameter_list|(
name|HddsProtos
operator|.
name|NodeState
name|state
parameter_list|,
name|HddsProtos
operator|.
name|QueryScope
name|queryScope
parameter_list|,
name|String
name|poolName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|queryScope
operator|==
name|HddsProtos
operator|.
name|QueryScope
operator|.
name|POOL
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not Supported yet"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|HddsProtos
operator|.
name|Node
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|queryNode
argument_list|(
name|state
argument_list|)
operator|.
name|forEach
argument_list|(
name|node
lambda|->
name|result
operator|.
name|add
argument_list|(
name|HddsProtos
operator|.
name|Node
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNodeID
argument_list|(
name|node
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
operator|.
name|addNodeStates
argument_list|(
name|state
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|notifyObjectStageChange (StorageContainerLocationProtocolProtos .ObjectStageChangeRequestProto.Type type, long id, StorageContainerLocationProtocolProtos.ObjectStageChangeRequestProto.Op op, StorageContainerLocationProtocolProtos .ObjectStageChangeRequestProto.Stage stage)
specifier|public
name|void
name|notifyObjectStageChange
parameter_list|(
name|StorageContainerLocationProtocolProtos
operator|.
name|ObjectStageChangeRequestProto
operator|.
name|Type
name|type
parameter_list|,
name|long
name|id
parameter_list|,
name|StorageContainerLocationProtocolProtos
operator|.
name|ObjectStageChangeRequestProto
operator|.
name|Op
name|op
parameter_list|,
name|StorageContainerLocationProtocolProtos
operator|.
name|ObjectStageChangeRequestProto
operator|.
name|Stage
name|stage
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Object type {} id {} op {} new stage {}"
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|op
argument_list|,
name|stage
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|StorageContainerLocationProtocolProtos
operator|.
name|ObjectStageChangeRequestProto
operator|.
name|Type
operator|.
name|container
condition|)
block|{
if|if
condition|(
name|op
operator|==
name|StorageContainerLocationProtocolProtos
operator|.
name|ObjectStageChangeRequestProto
operator|.
name|Op
operator|.
name|create
condition|)
block|{
if|if
condition|(
name|stage
operator|==
name|StorageContainerLocationProtocolProtos
operator|.
name|ObjectStageChangeRequestProto
operator|.
name|Stage
operator|.
name|begin
condition|)
block|{
name|scm
operator|.
name|getContainerManager
argument_list|()
operator|.
name|updateContainerState
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|id
argument_list|)
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scm
operator|.
name|getContainerManager
argument_list|()
operator|.
name|updateContainerState
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|id
argument_list|)
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CREATED
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|op
operator|==
name|StorageContainerLocationProtocolProtos
operator|.
name|ObjectStageChangeRequestProto
operator|.
name|Op
operator|.
name|close
condition|)
block|{
if|if
condition|(
name|stage
operator|==
name|StorageContainerLocationProtocolProtos
operator|.
name|ObjectStageChangeRequestProto
operator|.
name|Stage
operator|.
name|begin
condition|)
block|{
name|scm
operator|.
name|getContainerManager
argument_list|()
operator|.
name|updateContainerState
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|id
argument_list|)
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|FINALIZE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scm
operator|.
name|getContainerManager
argument_list|()
operator|.
name|updateContainerState
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|id
argument_list|)
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// else if (type == ObjectStageChangeRequestProto.Type.pipeline) {
comment|// TODO: pipeline state update will be addressed in future patch.
comment|// }
block|}
annotation|@
name|Override
DECL|method|createReplicationPipeline (HddsProtos.ReplicationType type, HddsProtos.ReplicationFactor factor, HddsProtos.NodePool nodePool)
specifier|public
name|Pipeline
name|createReplicationPipeline
parameter_list|(
name|HddsProtos
operator|.
name|ReplicationType
name|type
parameter_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
name|factor
parameter_list|,
name|HddsProtos
operator|.
name|NodePool
name|nodePool
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: will be addressed in future patch.
comment|// This is needed only for debugging purposes to make sure cluster is
comment|// working correctly.
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getScmInfo ()
specifier|public
name|ScmInfo
name|getScmInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|ScmInfo
operator|.
name|Builder
name|builder
init|=
operator|new
name|ScmInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setClusterId
argument_list|(
name|scm
operator|.
name|getScmStorage
argument_list|()
operator|.
name|getClusterID
argument_list|()
argument_list|)
operator|.
name|setScmId
argument_list|(
name|scm
operator|.
name|getScmStorage
argument_list|()
operator|.
name|getScmId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Check if SCM is in chill mode.    *    * @return Returns true if SCM is in chill mode else returns false.    * @throws IOException    */
annotation|@
name|Override
DECL|method|inChillMode ()
specifier|public
name|boolean
name|inChillMode
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|scm
operator|.
name|isInChillMode
argument_list|()
return|;
block|}
comment|/**    * Force SCM out of Chill mode.    *    * @return returns true if operation is successful.    * @throws IOException    */
annotation|@
name|Override
DECL|method|forceExitChillMode ()
specifier|public
name|boolean
name|forceExitChillMode
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|scm
operator|.
name|exitChillMode
argument_list|()
return|;
block|}
comment|/**    * Queries a list of Node that match a set of statuses.    *    *<p>For example, if the nodeStatuses is HEALTHY and RAFT_MEMBER, then    * this call will return all    * healthy nodes which members in Raft pipeline.    *    *<p>Right now we don't support operations, so we assume it is an AND    * operation between the    * operators.    *    * @param state - NodeStates.    * @return List of Datanodes.    */
DECL|method|queryNode (HddsProtos.NodeState state)
specifier|public
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|queryNode
parameter_list|(
name|HddsProtos
operator|.
name|NodeState
name|state
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|state
argument_list|,
literal|"Node Query set cannot be null"
argument_list|)
expr_stmt|;
return|return
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|queryNodeState
argument_list|(
name|state
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getScm ()
specifier|public
name|StorageContainerManager
name|getScm
parameter_list|()
block|{
return|return
name|scm
return|;
block|}
comment|/**    * Set chill mode status based on SCMEvents.CHILL_MODE_STATUS event.    */
annotation|@
name|Override
DECL|method|onMessage (Boolean inChillMode, EventPublisher publisher)
specifier|public
name|void
name|onMessage
parameter_list|(
name|Boolean
name|inChillMode
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
block|{
name|chillModePrecheck
operator|.
name|setInChillMode
argument_list|(
name|inChillMode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set chill mode status based on .    */
DECL|method|getChillModeStatus ()
specifier|public
name|boolean
name|getChillModeStatus
parameter_list|()
block|{
return|return
name|chillModePrecheck
operator|.
name|isInChillMode
argument_list|()
return|;
block|}
comment|/**    * Query the System for Nodes.    *    * @param nodeState - NodeState that we are interested in matching.    * @return Set of Datanodes that match the NodeState.    */
DECL|method|queryNodeState (HddsProtos.NodeState nodeState)
specifier|private
name|Set
argument_list|<
name|DatanodeDetails
argument_list|>
name|queryNodeState
parameter_list|(
name|HddsProtos
operator|.
name|NodeState
name|nodeState
parameter_list|)
block|{
name|Set
argument_list|<
name|DatanodeDetails
argument_list|>
name|returnSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|tmp
init|=
name|scm
operator|.
name|getScmNodeManager
argument_list|()
operator|.
name|getNodes
argument_list|(
name|nodeState
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|tmp
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|tmp
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|returnSet
operator|.
name|addAll
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
return|return
name|returnSet
return|;
block|}
block|}
end_class

end_unit

