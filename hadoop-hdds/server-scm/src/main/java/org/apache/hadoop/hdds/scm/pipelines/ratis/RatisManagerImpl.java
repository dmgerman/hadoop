begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.pipelines.ratis
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipelines
operator|.
name|ratis
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientRatis
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|PipelineID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
operator|.
name|ContainerPlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipelines
operator|.
name|Node2PipelineMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipelines
operator|.
name|PipelineManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipelines
operator|.
name|PipelineSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link PipelineManager}.  *  * TODO : Introduce a state machine.  */
end_comment

begin_class
DECL|class|RatisManagerImpl
specifier|public
class|class
name|RatisManagerImpl
extends|extends
name|PipelineManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RatisManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|nodeManager
specifier|private
specifier|final
name|NodeManager
name|nodeManager
decl_stmt|;
DECL|field|ratisMembers
specifier|private
specifier|final
name|Set
argument_list|<
name|DatanodeDetails
argument_list|>
name|ratisMembers
decl_stmt|;
comment|/**    * Constructs a Ratis Pipeline Manager.    *    * @param nodeManager    */
DECL|method|RatisManagerImpl (NodeManager nodeManager, ContainerPlacementPolicy placementPolicy, long size, Configuration conf, Node2PipelineMap map)
specifier|public
name|RatisManagerImpl
parameter_list|(
name|NodeManager
name|nodeManager
parameter_list|,
name|ContainerPlacementPolicy
name|placementPolicy
parameter_list|,
name|long
name|size
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Node2PipelineMap
name|map
parameter_list|)
block|{
name|super
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|nodeManager
operator|=
name|nodeManager
expr_stmt|;
name|ratisMembers
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Allocates a new ratis Pipeline from the free nodes.    *    * @param factor - One or Three    * @return Pipeline.    */
DECL|method|allocatePipeline (ReplicationFactor factor)
specifier|public
name|Pipeline
name|allocatePipeline
parameter_list|(
name|ReplicationFactor
name|factor
parameter_list|)
block|{
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|newNodesList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodes
init|=
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|NodeState
operator|.
name|HEALTHY
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|getReplicationCount
argument_list|(
name|factor
argument_list|)
decl_stmt|;
comment|//TODO: Add Raft State to the Nodes, so we can query and skip nodes from
comment|// data from datanode instead of maintaining a set.
for|for
control|(
name|DatanodeDetails
name|datanode
range|:
name|datanodes
control|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ratisMembers
operator|.
name|contains
argument_list|(
name|datanode
argument_list|)
condition|)
block|{
name|newNodesList
operator|.
name|add
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
if|if
condition|(
name|newNodesList
operator|.
name|size
argument_list|()
operator|==
name|count
condition|)
block|{
comment|// once a datanode has been added to a pipeline, exclude it from
comment|// further allocations
name|ratisMembers
operator|.
name|addAll
argument_list|(
name|newNodesList
argument_list|)
expr_stmt|;
name|PipelineID
name|pipelineID
init|=
name|PipelineID
operator|.
name|randomId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Allocating a new ratis pipeline of size: {} id: {}"
argument_list|,
name|count
argument_list|,
name|pipelineID
argument_list|)
expr_stmt|;
return|return
name|PipelineSelector
operator|.
name|newPipelineFromNodes
argument_list|(
name|newNodesList
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|factor
argument_list|,
name|pipelineID
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|initializePipeline (Pipeline pipeline)
specifier|public
name|void
name|initializePipeline
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
throws|throws
name|IOException
block|{
comment|//TODO:move the initialization from SCM to client
try|try
init|(
name|XceiverClientRatis
name|client
init|=
name|XceiverClientRatis
operator|.
name|newXceiverClientRatis
argument_list|(
name|pipeline
argument_list|,
name|conf
argument_list|)
init|)
block|{
name|client
operator|.
name|createPipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Close the pipeline.    */
DECL|method|closePipeline (Pipeline pipeline)
specifier|public
name|void
name|closePipeline
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
block|{
name|super
operator|.
name|closePipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeDetails
name|node
range|:
name|pipeline
operator|.
name|getMachines
argument_list|()
control|)
block|{
comment|// A node should always be the in ratis members list.
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|ratisMembers
operator|.
name|remove
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//TODO: should the raft ring also be destroyed as well?
block|}
comment|/**    * list members in the pipeline .    *    * @param pipelineID    * @return the datanode    */
annotation|@
name|Override
DECL|method|getMembers (PipelineID pipelineID)
specifier|public
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|getMembers
parameter_list|(
name|PipelineID
name|pipelineID
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Update the datanode list of the pipeline.    *    * @param pipelineID    * @param newDatanodes    */
annotation|@
name|Override
DECL|method|updatePipeline (PipelineID pipelineID, List<DatanodeDetails> newDatanodes)
specifier|public
name|void
name|updatePipeline
parameter_list|(
name|PipelineID
name|pipelineID
parameter_list|,
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|newDatanodes
parameter_list|)
throws|throws
name|IOException
block|{    }
block|}
end_class

end_unit

