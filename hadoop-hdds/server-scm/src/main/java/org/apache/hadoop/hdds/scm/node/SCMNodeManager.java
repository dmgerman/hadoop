begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.node
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|PipelineReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|states
operator|.
name|NodeAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|states
operator|.
name|NodeNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMStorageConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|metrics
operator|.
name|SCMNodeMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|metrics
operator|.
name|SCMNodeStat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|NodeReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMRegisteredResponseProto
operator|.
name|ErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|StorageReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMVersionRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|CachedDNSToSwitchMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNSToSwitchMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|TableMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|VersionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|CommandForDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|RegisteredCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|SCMCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Maintains information about the Datanodes on SCM side.  *<p>  * Heartbeats under SCM is very simple compared to HDFS heartbeatManager.  *<p>  * The getNode(byState) functions make copy of node maps and then creates a list  * based on that. It should be assumed that these get functions always report  * *stale* information. For example, getting the deadNodeCount followed by  * getNodes(DEAD) could very well produce totally different count. Also  * getNodeCount(HEALTHY) + getNodeCount(DEAD) + getNodeCode(STALE), is not  * guaranteed to add up to the total nodes that we know off. Please treat all  * get functions in this file as a snap-shot of information that is inconsistent  * as soon as you read it.  */
end_comment

begin_class
DECL|class|SCMNodeManager
specifier|public
class|class
name|SCMNodeManager
implements|implements
name|NodeManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SCMNodeManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nodeStateManager
specifier|private
specifier|final
name|NodeStateManager
name|nodeStateManager
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|VersionInfo
name|version
decl_stmt|;
DECL|field|commandQueue
specifier|private
specifier|final
name|CommandQueue
name|commandQueue
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|SCMNodeMetrics
name|metrics
decl_stmt|;
comment|// Node manager MXBean
DECL|field|nmInfoBean
specifier|private
name|ObjectName
name|nmInfoBean
decl_stmt|;
DECL|field|scmStorageConfig
specifier|private
specifier|final
name|SCMStorageConfig
name|scmStorageConfig
decl_stmt|;
DECL|field|clusterMap
specifier|private
specifier|final
name|NetworkTopology
name|clusterMap
decl_stmt|;
DECL|field|dnsToSwitchMapping
specifier|private
specifier|final
name|DNSToSwitchMapping
name|dnsToSwitchMapping
decl_stmt|;
DECL|field|useHostname
specifier|private
specifier|final
name|boolean
name|useHostname
decl_stmt|;
comment|/**    * Constructs SCM machine Manager.    */
DECL|method|SCMNodeManager (OzoneConfiguration conf, SCMStorageConfig scmStorageConfig, EventPublisher eventPublisher, NetworkTopology networkTopology)
specifier|public
name|SCMNodeManager
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|SCMStorageConfig
name|scmStorageConfig
parameter_list|,
name|EventPublisher
name|eventPublisher
parameter_list|,
name|NetworkTopology
name|networkTopology
parameter_list|)
block|{
name|this
operator|.
name|nodeStateManager
operator|=
operator|new
name|NodeStateManager
argument_list|(
name|conf
argument_list|,
name|eventPublisher
argument_list|)
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|VersionInfo
operator|.
name|getLatestVersion
argument_list|()
expr_stmt|;
name|this
operator|.
name|commandQueue
operator|=
operator|new
name|CommandQueue
argument_list|()
expr_stmt|;
name|this
operator|.
name|scmStorageConfig
operator|=
name|scmStorageConfig
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Entering startup safe mode."
argument_list|)
expr_stmt|;
name|registerMXBean
argument_list|()
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|SCMNodeMetrics
operator|.
name|create
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterMap
operator|=
name|networkTopology
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|DNSToSwitchMapping
argument_list|>
name|dnsToSwitchMappingClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|DFSConfigKeys
operator|.
name|NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY
argument_list|,
name|TableMapping
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
decl_stmt|;
name|DNSToSwitchMapping
name|newInstance
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|dnsToSwitchMappingClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|dnsToSwitchMapping
operator|=
operator|(
operator|(
name|newInstance
operator|instanceof
name|CachedDNSToSwitchMapping
operator|)
condition|?
name|newInstance
else|:
operator|new
name|CachedDNSToSwitchMapping
argument_list|(
name|newInstance
argument_list|)
operator|)
expr_stmt|;
name|this
operator|.
name|useHostname
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_USE_DN_HOSTNAME
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_USE_DN_HOSTNAME_DEFAULT
argument_list|)
expr_stmt|;
block|}
DECL|method|registerMXBean ()
specifier|private
name|void
name|registerMXBean
parameter_list|()
block|{
name|this
operator|.
name|nmInfoBean
operator|=
name|MBeans
operator|.
name|register
argument_list|(
literal|"SCMNodeManager"
argument_list|,
literal|"SCMNodeManagerInfo"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterMXBean ()
specifier|private
name|void
name|unregisterMXBean
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|nmInfoBean
operator|!=
literal|null
condition|)
block|{
name|MBeans
operator|.
name|unregister
argument_list|(
name|this
operator|.
name|nmInfoBean
argument_list|)
expr_stmt|;
name|this
operator|.
name|nmInfoBean
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Returns all datanode that are in the given state. This function works by    * taking a snapshot of the current collection and then returning the list    * from that collection. This means that real map might have changed by the    * time we return this list.    *    * @return List of Datanodes that are known to SCM in the requested state.    */
annotation|@
name|Override
DECL|method|getNodes (NodeState nodestate)
specifier|public
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|getNodes
parameter_list|(
name|NodeState
name|nodestate
parameter_list|)
block|{
return|return
name|nodeStateManager
operator|.
name|getNodes
argument_list|(
name|nodestate
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|node
lambda|->
operator|(
name|DatanodeDetails
operator|)
name|node
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns all datanodes that are known to SCM.    *    * @return List of DatanodeDetails    */
annotation|@
name|Override
DECL|method|getAllNodes ()
specifier|public
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|getAllNodes
parameter_list|()
block|{
return|return
name|nodeStateManager
operator|.
name|getAllNodes
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|node
lambda|->
operator|(
name|DatanodeDetails
operator|)
name|node
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns the Number of Datanodes by State they are in.    *    * @return count    */
annotation|@
name|Override
DECL|method|getNodeCount (NodeState nodestate)
specifier|public
name|int
name|getNodeCount
parameter_list|(
name|NodeState
name|nodestate
parameter_list|)
block|{
return|return
name|nodeStateManager
operator|.
name|getNodeCount
argument_list|(
name|nodestate
argument_list|)
return|;
block|}
comment|/**    * Returns the node state of a specific node.    *    * @param datanodeDetails Datanode Details    * @return Healthy/Stale/Dead/Unknown.    */
annotation|@
name|Override
DECL|method|getNodeState (DatanodeDetails datanodeDetails)
specifier|public
name|NodeState
name|getNodeState
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|)
block|{
try|try
block|{
return|return
name|nodeStateManager
operator|.
name|getNodeState
argument_list|(
name|datanodeDetails
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NodeNotFoundException
name|e
parameter_list|)
block|{
comment|// TODO: should we throw NodeNotFoundException?
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Closes this stream and releases any system resources associated with it. If    * the stream is already closed then invoking this method has no effect.    *    * @throws IOException if an I/O error occurs    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|unregisterMXBean
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|unRegister
argument_list|()
expr_stmt|;
block|}
comment|/**    * Gets the version info from SCM.    *    * @param versionRequest - version Request.    * @return - returns SCM version info and other required information needed by    * datanode.    */
annotation|@
name|Override
DECL|method|getVersion (SCMVersionRequestProto versionRequest)
specifier|public
name|VersionResponse
name|getVersion
parameter_list|(
name|SCMVersionRequestProto
name|versionRequest
parameter_list|)
block|{
return|return
name|VersionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVersion
argument_list|(
name|this
operator|.
name|version
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|addValue
argument_list|(
name|OzoneConsts
operator|.
name|SCM_ID
argument_list|,
name|this
operator|.
name|scmStorageConfig
operator|.
name|getScmId
argument_list|()
argument_list|)
operator|.
name|addValue
argument_list|(
name|OzoneConsts
operator|.
name|CLUSTER_ID
argument_list|,
name|this
operator|.
name|scmStorageConfig
operator|.
name|getClusterID
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Register the node if the node finds that it is not registered with any    * SCM.    *    * @param datanodeDetails - Send datanodeDetails with Node info.    *                   This function generates and assigns new datanode ID    *                   for the datanode. This allows SCM to be run independent    *                   of Namenode if required.    * @param nodeReport NodeReport.    *    * @return SCMHeartbeatResponseProto    */
annotation|@
name|Override
DECL|method|register ( DatanodeDetails datanodeDetails, NodeReportProto nodeReport, PipelineReportsProto pipelineReportsProto)
specifier|public
name|RegisteredCommand
name|register
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|,
name|NodeReportProto
name|nodeReport
parameter_list|,
name|PipelineReportsProto
name|pipelineReportsProto
parameter_list|)
block|{
name|InetAddress
name|dnAddress
init|=
name|Server
operator|.
name|getRemoteIp
argument_list|()
decl_stmt|;
if|if
condition|(
name|dnAddress
operator|!=
literal|null
condition|)
block|{
comment|// Mostly called inside an RPC, update ip and peer hostname
name|datanodeDetails
operator|.
name|setHostName
argument_list|(
name|dnAddress
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|datanodeDetails
operator|.
name|setIpAddress
argument_list|(
name|dnAddress
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|String
name|location
decl_stmt|;
if|if
condition|(
name|useHostname
condition|)
block|{
name|datanodeDetails
operator|.
name|setNetworkName
argument_list|(
name|datanodeDetails
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|=
name|nodeResolve
argument_list|(
name|datanodeDetails
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|datanodeDetails
operator|.
name|setNetworkName
argument_list|(
name|datanodeDetails
operator|.
name|getIpAddress
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|=
name|nodeResolve
argument_list|(
name|datanodeDetails
operator|.
name|getIpAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|datanodeDetails
operator|.
name|setNetworkLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|nodeStateManager
operator|.
name|addNode
argument_list|(
name|datanodeDetails
argument_list|)
expr_stmt|;
name|clusterMap
operator|.
name|add
argument_list|(
name|datanodeDetails
argument_list|)
expr_stmt|;
comment|// Updating Node Report, as registration is successful
name|processNodeReport
argument_list|(
name|datanodeDetails
argument_list|,
name|nodeReport
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Registered Data node : {}"
argument_list|,
name|datanodeDetails
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NodeAlreadyExistsException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Datanode is already registered. Datanode: {}"
argument_list|,
name|datanodeDetails
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|RegisteredCommand
operator|.
name|newBuilder
argument_list|()
operator|.
name|setErrorCode
argument_list|(
name|ErrorCode
operator|.
name|success
argument_list|)
operator|.
name|setDatanodeUUID
argument_list|(
name|datanodeDetails
operator|.
name|getUuidString
argument_list|()
argument_list|)
operator|.
name|setClusterID
argument_list|(
name|this
operator|.
name|scmStorageConfig
operator|.
name|getClusterID
argument_list|()
argument_list|)
operator|.
name|setHostname
argument_list|(
name|datanodeDetails
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|setIpAddress
argument_list|(
name|datanodeDetails
operator|.
name|getIpAddress
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Send heartbeat to indicate the datanode is alive and doing well.    *    * @param datanodeDetails - DatanodeDetailsProto.    * @return SCMheartbeat response.    */
annotation|@
name|Override
DECL|method|processHeartbeat (DatanodeDetails datanodeDetails)
specifier|public
name|List
argument_list|<
name|SCMCommand
argument_list|>
name|processHeartbeat
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|datanodeDetails
argument_list|,
literal|"Heartbeat is missing "
operator|+
literal|"DatanodeDetails."
argument_list|)
expr_stmt|;
try|try
block|{
name|nodeStateManager
operator|.
name|updateLastHeartbeatTime
argument_list|(
name|datanodeDetails
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incNumHBProcessed
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NodeNotFoundException
name|e
parameter_list|)
block|{
name|metrics
operator|.
name|incNumHBProcessingFailed
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"SCM trying to process heartbeat from an "
operator|+
literal|"unregistered node {}. Ignoring the heartbeat."
argument_list|,
name|datanodeDetails
argument_list|)
expr_stmt|;
block|}
return|return
name|commandQueue
operator|.
name|getCommand
argument_list|(
name|datanodeDetails
operator|.
name|getUuid
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isNodeRegistered (DatanodeDetails datanodeDetails)
specifier|public
name|Boolean
name|isNodeRegistered
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|)
block|{
try|try
block|{
name|nodeStateManager
operator|.
name|getNode
argument_list|(
name|datanodeDetails
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|NodeNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Process node report.    *    * @param datanodeDetails    * @param nodeReport    */
annotation|@
name|Override
DECL|method|processNodeReport (DatanodeDetails datanodeDetails, NodeReportProto nodeReport)
specifier|public
name|void
name|processNodeReport
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|,
name|NodeReportProto
name|nodeReport
parameter_list|)
block|{
try|try
block|{
name|DatanodeInfo
name|datanodeInfo
init|=
name|nodeStateManager
operator|.
name|getNode
argument_list|(
name|datanodeDetails
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeReport
operator|!=
literal|null
condition|)
block|{
name|datanodeInfo
operator|.
name|updateStorageReports
argument_list|(
name|nodeReport
operator|.
name|getStorageReportList
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incNumNodeReportProcessed
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NodeNotFoundException
name|e
parameter_list|)
block|{
name|metrics
operator|.
name|incNumNodeReportProcessingFailed
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got node report from unregistered datanode {}"
argument_list|,
name|datanodeDetails
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns the aggregated node stats.    * @return the aggregated node stats.    */
annotation|@
name|Override
DECL|method|getStats ()
specifier|public
name|SCMNodeStat
name|getStats
parameter_list|()
block|{
name|long
name|capacity
init|=
literal|0L
decl_stmt|;
name|long
name|used
init|=
literal|0L
decl_stmt|;
name|long
name|remaining
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|SCMNodeStat
name|stat
range|:
name|getNodeStats
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|capacity
operator|+=
name|stat
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|used
operator|+=
name|stat
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|remaining
operator|+=
name|stat
operator|.
name|getRemaining
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|SCMNodeStat
argument_list|(
name|capacity
argument_list|,
name|used
argument_list|,
name|remaining
argument_list|)
return|;
block|}
comment|/**    * Return a map of node stats.    * @return a map of individual node stats (live/stale but not dead).    */
annotation|@
name|Override
DECL|method|getNodeStats ()
specifier|public
name|Map
argument_list|<
name|DatanodeDetails
argument_list|,
name|SCMNodeStat
argument_list|>
name|getNodeStats
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|DatanodeDetails
argument_list|,
name|SCMNodeStat
argument_list|>
name|nodeStats
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|healthyNodes
init|=
name|nodeStateManager
operator|.
name|getNodes
argument_list|(
name|NodeState
operator|.
name|HEALTHY
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|staleNodes
init|=
name|nodeStateManager
operator|.
name|getNodes
argument_list|(
name|NodeState
operator|.
name|STALE
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|datanodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|healthyNodes
argument_list|)
decl_stmt|;
name|datanodes
operator|.
name|addAll
argument_list|(
name|staleNodes
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeInfo
name|dnInfo
range|:
name|datanodes
control|)
block|{
name|SCMNodeStat
name|nodeStat
init|=
name|getNodeStatInternal
argument_list|(
name|dnInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeStat
operator|!=
literal|null
condition|)
block|{
name|nodeStats
operator|.
name|put
argument_list|(
name|dnInfo
argument_list|,
name|nodeStat
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nodeStats
return|;
block|}
comment|/**    * Return the node stat of the specified datanode.    * @param datanodeDetails - datanode ID.    * @return node stat if it is live/stale, null if it is decommissioned or    * doesn't exist.    */
annotation|@
name|Override
DECL|method|getNodeStat (DatanodeDetails datanodeDetails)
specifier|public
name|SCMNodeMetric
name|getNodeStat
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|)
block|{
specifier|final
name|SCMNodeStat
name|nodeStat
init|=
name|getNodeStatInternal
argument_list|(
name|datanodeDetails
argument_list|)
decl_stmt|;
return|return
name|nodeStat
operator|!=
literal|null
condition|?
operator|new
name|SCMNodeMetric
argument_list|(
name|nodeStat
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|getNodeStatInternal (DatanodeDetails datanodeDetails)
specifier|private
name|SCMNodeStat
name|getNodeStatInternal
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|)
block|{
try|try
block|{
name|long
name|capacity
init|=
literal|0L
decl_stmt|;
name|long
name|used
init|=
literal|0L
decl_stmt|;
name|long
name|remaining
init|=
literal|0L
decl_stmt|;
specifier|final
name|DatanodeInfo
name|datanodeInfo
init|=
name|nodeStateManager
operator|.
name|getNode
argument_list|(
name|datanodeDetails
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|StorageReportProto
argument_list|>
name|storageReportProtos
init|=
name|datanodeInfo
operator|.
name|getStorageReports
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageReportProto
name|reportProto
range|:
name|storageReportProtos
control|)
block|{
name|capacity
operator|+=
name|reportProto
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
name|used
operator|+=
name|reportProto
operator|.
name|getScmUsed
argument_list|()
expr_stmt|;
name|remaining
operator|+=
name|reportProto
operator|.
name|getRemaining
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|SCMNodeStat
argument_list|(
name|capacity
argument_list|,
name|used
argument_list|,
name|remaining
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NodeNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot generate NodeStat, datanode {} not found."
argument_list|,
name|datanodeDetails
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNodeCount ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getNodeCount
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|nodeCountMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeState
name|state
range|:
name|NodeState
operator|.
name|values
argument_list|()
control|)
block|{
name|nodeCountMap
operator|.
name|put
argument_list|(
name|state
operator|.
name|toString
argument_list|()
argument_list|,
name|getNodeCount
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeCountMap
return|;
block|}
comment|// We should introduce DISK, SSD, etc., notion in
comment|// SCMNodeStat and try to use it.
annotation|@
name|Override
DECL|method|getNodeInfo ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getNodeInfo
parameter_list|()
block|{
name|long
name|diskCapacity
init|=
literal|0L
decl_stmt|;
name|long
name|diskUsed
init|=
literal|0L
decl_stmt|;
name|long
name|diskRemaning
init|=
literal|0L
decl_stmt|;
name|long
name|ssdCapacity
init|=
literal|0L
decl_stmt|;
name|long
name|ssdUsed
init|=
literal|0L
decl_stmt|;
name|long
name|ssdRemaining
init|=
literal|0L
decl_stmt|;
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|healthyNodes
init|=
name|nodeStateManager
operator|.
name|getNodes
argument_list|(
name|NodeState
operator|.
name|HEALTHY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|staleNodes
init|=
name|nodeStateManager
operator|.
name|getNodes
argument_list|(
name|NodeState
operator|.
name|STALE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|datanodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|healthyNodes
argument_list|)
decl_stmt|;
name|datanodes
operator|.
name|addAll
argument_list|(
name|staleNodes
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeInfo
name|dnInfo
range|:
name|datanodes
control|)
block|{
name|List
argument_list|<
name|StorageReportProto
argument_list|>
name|storageReportProtos
init|=
name|dnInfo
operator|.
name|getStorageReports
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageReportProto
name|reportProto
range|:
name|storageReportProtos
control|)
block|{
if|if
condition|(
name|reportProto
operator|.
name|getStorageType
argument_list|()
operator|==
name|StorageContainerDatanodeProtocolProtos
operator|.
name|StorageTypeProto
operator|.
name|DISK
condition|)
block|{
name|diskCapacity
operator|+=
name|reportProto
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
name|diskRemaning
operator|+=
name|reportProto
operator|.
name|getRemaining
argument_list|()
expr_stmt|;
name|diskUsed
operator|+=
name|reportProto
operator|.
name|getScmUsed
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|reportProto
operator|.
name|getStorageType
argument_list|()
operator|==
name|StorageContainerDatanodeProtocolProtos
operator|.
name|StorageTypeProto
operator|.
name|SSD
condition|)
block|{
name|ssdCapacity
operator|+=
name|reportProto
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
name|ssdRemaining
operator|+=
name|reportProto
operator|.
name|getRemaining
argument_list|()
expr_stmt|;
name|ssdUsed
operator|+=
name|reportProto
operator|.
name|getScmUsed
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|nodeInfo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|nodeInfo
operator|.
name|put
argument_list|(
literal|"DISKCapacity"
argument_list|,
name|diskCapacity
argument_list|)
expr_stmt|;
name|nodeInfo
operator|.
name|put
argument_list|(
literal|"DISKUsed"
argument_list|,
name|diskUsed
argument_list|)
expr_stmt|;
name|nodeInfo
operator|.
name|put
argument_list|(
literal|"DISKRemaining"
argument_list|,
name|diskRemaning
argument_list|)
expr_stmt|;
name|nodeInfo
operator|.
name|put
argument_list|(
literal|"SSDCapacity"
argument_list|,
name|ssdCapacity
argument_list|)
expr_stmt|;
name|nodeInfo
operator|.
name|put
argument_list|(
literal|"SSDUsed"
argument_list|,
name|ssdUsed
argument_list|)
expr_stmt|;
name|nodeInfo
operator|.
name|put
argument_list|(
literal|"SSDRemaining"
argument_list|,
name|ssdRemaining
argument_list|)
expr_stmt|;
return|return
name|nodeInfo
return|;
block|}
comment|/**    * Get set of pipelines a datanode is part of.    * @param datanodeDetails - datanodeID    * @return Set of PipelineID    */
annotation|@
name|Override
DECL|method|getPipelines (DatanodeDetails datanodeDetails)
specifier|public
name|Set
argument_list|<
name|PipelineID
argument_list|>
name|getPipelines
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|)
block|{
return|return
name|nodeStateManager
operator|.
name|getPipelineByDnID
argument_list|(
name|datanodeDetails
operator|.
name|getUuid
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Add pipeline information in the NodeManager.    * @param pipeline - Pipeline to be added    */
annotation|@
name|Override
DECL|method|addPipeline (Pipeline pipeline)
specifier|public
name|void
name|addPipeline
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
block|{
name|nodeStateManager
operator|.
name|addPipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove a pipeline information from the NodeManager.    * @param pipeline - Pipeline to be removed    */
annotation|@
name|Override
DECL|method|removePipeline (Pipeline pipeline)
specifier|public
name|void
name|removePipeline
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
block|{
name|nodeStateManager
operator|.
name|removePipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update set of containers available on a datanode.    * @param datanodeDetails - DatanodeID    * @param containerIds - Set of containerIDs    * @throws NodeNotFoundException - if datanode is not known. For new datanode    *                        use addDatanodeInContainerMap call.    */
annotation|@
name|Override
DECL|method|setContainers (DatanodeDetails datanodeDetails, Set<ContainerID> containerIds)
specifier|public
name|void
name|setContainers
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|,
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|containerIds
parameter_list|)
throws|throws
name|NodeNotFoundException
block|{
name|nodeStateManager
operator|.
name|setContainers
argument_list|(
name|datanodeDetails
operator|.
name|getUuid
argument_list|()
argument_list|,
name|containerIds
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return set of containerIDs available on a datanode.    * @param datanodeDetails - DatanodeID    * @return - set of containerIDs    */
annotation|@
name|Override
DECL|method|getContainers (DatanodeDetails datanodeDetails)
specifier|public
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|getContainers
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|)
throws|throws
name|NodeNotFoundException
block|{
return|return
name|nodeStateManager
operator|.
name|getContainers
argument_list|(
name|datanodeDetails
operator|.
name|getUuid
argument_list|()
argument_list|)
return|;
block|}
comment|// TODO:
comment|// Since datanode commands are added through event queue, onMessage method
comment|// should take care of adding commands to command queue.
comment|// Refactor and remove all the usage of this method and delete this method.
annotation|@
name|Override
DECL|method|addDatanodeCommand (UUID dnId, SCMCommand command)
specifier|public
name|void
name|addDatanodeCommand
parameter_list|(
name|UUID
name|dnId
parameter_list|,
name|SCMCommand
name|command
parameter_list|)
block|{
name|this
operator|.
name|commandQueue
operator|.
name|addCommand
argument_list|(
name|dnId
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method is called by EventQueue whenever someone adds a new    * DATANODE_COMMAND to the Queue.    *    * @param commandForDatanode DatanodeCommand    * @param ignored publisher    */
annotation|@
name|Override
DECL|method|onMessage (CommandForDatanode commandForDatanode, EventPublisher ignored)
specifier|public
name|void
name|onMessage
parameter_list|(
name|CommandForDatanode
name|commandForDatanode
parameter_list|,
name|EventPublisher
name|ignored
parameter_list|)
block|{
name|addDatanodeCommand
argument_list|(
name|commandForDatanode
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
name|commandForDatanode
operator|.
name|getCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCommandQueue (UUID dnID)
specifier|public
name|List
argument_list|<
name|SCMCommand
argument_list|>
name|getCommandQueue
parameter_list|(
name|UUID
name|dnID
parameter_list|)
block|{
return|return
name|commandQueue
operator|.
name|getCommand
argument_list|(
name|dnID
argument_list|)
return|;
block|}
comment|/**    * Given datanode address or host name, returns the DatanodeDetails for the    * node.    *    * @param address node host address    * @return the given datanode, or null if not found    */
annotation|@
name|Override
DECL|method|getNode (String address)
specifier|public
name|DatanodeDetails
name|getNode
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|Node
name|node
init|=
literal|null
decl_stmt|;
name|String
name|location
init|=
name|nodeResolve
argument_list|(
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|node
operator|=
name|clusterMap
operator|.
name|getNode
argument_list|(
name|location
operator|+
name|NetConstants
operator|.
name|PATH_SEPARATOR_STR
operator|+
name|address
argument_list|)
expr_stmt|;
block|}
return|return
name|node
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|DatanodeDetails
operator|)
name|node
return|;
block|}
DECL|method|nodeResolve (String hostname)
specifier|private
name|String
name|nodeResolve
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|hosts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|hosts
operator|.
name|add
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resolvedHosts
init|=
name|dnsToSwitchMapping
operator|.
name|resolve
argument_list|(
name|hosts
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolvedHosts
operator|!=
literal|null
operator|&&
operator|!
name|resolvedHosts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|location
init|=
name|resolvedHosts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resolve datanode {} return location {}"
argument_list|,
name|hostname
argument_list|,
name|location
argument_list|)
expr_stmt|;
return|return
name|location
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Node {} Resolution failed. Please make sure that DNS table "
operator|+
literal|"mapping or configured mapping is functional."
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

