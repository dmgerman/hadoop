begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.pipeline
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * Implements api for running background pipeline creation jobs.  */
end_comment

begin_class
DECL|class|BackgroundPipelineCreator
class|class
name|BackgroundPipelineCreator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BackgroundPipelineCreator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|scheduler
specifier|private
specifier|final
name|Scheduler
name|scheduler
decl_stmt|;
DECL|field|isPipelineCreatorRunning
specifier|private
specifier|final
name|AtomicBoolean
name|isPipelineCreatorRunning
decl_stmt|;
DECL|field|pipelineManager
specifier|private
specifier|final
name|PipelineManager
name|pipelineManager
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|method|BackgroundPipelineCreator (PipelineManager pipelineManager, Scheduler scheduler, Configuration conf)
name|BackgroundPipelineCreator
parameter_list|(
name|PipelineManager
name|pipelineManager
parameter_list|,
name|Scheduler
name|scheduler
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|pipelineManager
operator|=
name|pipelineManager
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|isPipelineCreatorRunning
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldSchedulePipelineCreator ()
specifier|private
name|boolean
name|shouldSchedulePipelineCreator
parameter_list|()
block|{
return|return
name|isPipelineCreatorRunning
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Schedules a fixed interval job to create pipelines.    */
DECL|method|startFixedIntervalPipelineCreator ()
name|void
name|startFixedIntervalPipelineCreator
parameter_list|()
block|{
name|long
name|intervalInMillis
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_PIPELINE_CREATION_INTERVAL
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_PIPELINE_CREATION_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
comment|// TODO: #CLUTIL We can start the job asap
name|scheduler
operator|.
name|scheduleWithFixedDelay
argument_list|(
parameter_list|()
lambda|->
block|{
if|if
condition|(
operator|!
name|shouldSchedulePipelineCreator
argument_list|()
condition|)
block|{
return|return;
block|}
name|createPipelines
argument_list|()
expr_stmt|;
block|}
argument_list|,
literal|0
argument_list|,
name|intervalInMillis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Triggers pipeline creation via background thread.    */
DECL|method|triggerPipelineCreation ()
name|void
name|triggerPipelineCreation
parameter_list|()
block|{
comment|// TODO: #CLUTIL introduce a better mechanism to not have more than one
comment|// job of a particular type running, probably via ratis.
if|if
condition|(
operator|!
name|shouldSchedulePipelineCreator
argument_list|()
condition|)
block|{
return|return;
block|}
name|scheduler
operator|.
name|schedule
argument_list|(
name|this
operator|::
name|createPipelines
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|createPipelines ()
specifier|private
name|void
name|createPipelines
parameter_list|()
block|{
comment|// TODO: #CLUTIL Different replication factor may need to be supported
name|HddsProtos
operator|.
name|ReplicationType
name|type
init|=
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_REPLICATION_TYPE
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_REPLICATION_TYPE_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|HddsProtos
operator|.
name|ReplicationFactor
name|factor
range|:
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|values
argument_list|()
control|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
if|if
condition|(
name|scheduler
operator|.
name|isClosed
argument_list|()
condition|)
block|{
break|break;
block|}
name|pipelineManager
operator|.
name|createPipeline
argument_list|(
name|type
argument_list|,
name|factor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
break|break;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while creating pipelines {}"
argument_list|,
name|t
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|isPipelineCreatorRunning
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

