begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReplicaProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|states
operator|.
name|NodeNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeHeartbeatDispatcher
operator|.
name|IncrementalContainerReportFromDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Handles incremental container reports from datanode.  */
end_comment

begin_class
DECL|class|IncrementalContainerReportHandler
specifier|public
class|class
name|IncrementalContainerReportHandler
extends|extends
name|AbstractContainerReportHandler
implements|implements
name|EventHandler
argument_list|<
name|IncrementalContainerReportFromDatanode
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IncrementalContainerReportHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nodeManager
specifier|private
specifier|final
name|NodeManager
name|nodeManager
decl_stmt|;
DECL|method|IncrementalContainerReportHandler ( final NodeManager nodeManager, final ContainerManager containerManager)
specifier|public
name|IncrementalContainerReportHandler
parameter_list|(
specifier|final
name|NodeManager
name|nodeManager
parameter_list|,
specifier|final
name|ContainerManager
name|containerManager
parameter_list|)
block|{
name|super
argument_list|(
name|containerManager
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeManager
operator|=
name|nodeManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMessage (final IncrementalContainerReportFromDatanode report, final EventPublisher publisher)
specifier|public
name|void
name|onMessage
parameter_list|(
specifier|final
name|IncrementalContainerReportFromDatanode
name|report
parameter_list|,
specifier|final
name|EventPublisher
name|publisher
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing incremental container report from data node {}"
argument_list|,
name|report
operator|.
name|getDatanodeDetails
argument_list|()
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ContainerReplicaProto
name|replicaProto
range|:
name|report
operator|.
name|getReport
argument_list|()
operator|.
name|getReportList
argument_list|()
control|)
block|{
try|try
block|{
specifier|final
name|DatanodeDetails
name|dd
init|=
name|report
operator|.
name|getDatanodeDetails
argument_list|()
decl_stmt|;
specifier|final
name|ContainerID
name|id
init|=
name|ContainerID
operator|.
name|valueof
argument_list|(
name|replicaProto
operator|.
name|getContainerID
argument_list|()
argument_list|)
decl_stmt|;
name|nodeManager
operator|.
name|addContainer
argument_list|(
name|dd
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|processContainerReplica
argument_list|(
name|dd
argument_list|,
name|replicaProto
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerNotFoundException
name|e
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Container {} not found!"
argument_list|,
name|replicaProto
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NodeNotFoundException
name|ex
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Received ICR from unknown datanode {} {}"
argument_list|,
name|report
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while processing ICR for container {}"
argument_list|,
name|replicaProto
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|success
condition|)
block|{
name|getContainerManager
argument_list|()
operator|.
name|notifyContainerReportProcessing
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getContainerManager
argument_list|()
operator|.
name|notifyContainerReportProcessing
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

