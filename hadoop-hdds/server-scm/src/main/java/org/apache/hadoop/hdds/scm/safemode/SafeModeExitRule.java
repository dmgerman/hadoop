begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.safemode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|safemode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|TypedEvent
import|;
end_import

begin_comment
comment|/**  * Abstract class for SafeModeExitRules. When a new rule is added, the new  * rule should extend this abstract class.  *  * Each rule Should do:  * 1. Should add a handler for the event it is looking for during the  * initialization of the rule.  * 2. Add the rule in ScmSafeModeManager to list of the rules.  *  *  * @param<T>  */
end_comment

begin_class
DECL|class|SafeModeExitRule
specifier|public
specifier|abstract
class|class
name|SafeModeExitRule
parameter_list|<
name|T
parameter_list|>
implements|implements
name|EventHandler
argument_list|<
name|T
argument_list|>
block|{
DECL|field|safeModeManager
specifier|private
specifier|final
name|SCMSafeModeManager
name|safeModeManager
decl_stmt|;
DECL|field|ruleName
specifier|private
specifier|final
name|String
name|ruleName
decl_stmt|;
DECL|method|SafeModeExitRule (SCMSafeModeManager safeModeManager, String ruleName, EventQueue eventQueue)
specifier|public
name|SafeModeExitRule
parameter_list|(
name|SCMSafeModeManager
name|safeModeManager
parameter_list|,
name|String
name|ruleName
parameter_list|,
name|EventQueue
name|eventQueue
parameter_list|)
block|{
name|this
operator|.
name|safeModeManager
operator|=
name|safeModeManager
expr_stmt|;
name|this
operator|.
name|ruleName
operator|=
name|ruleName
expr_stmt|;
name|eventQueue
operator|.
name|addHandler
argument_list|(
name|getEventType
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return's the name of this SafeModeExit Rule.    * @return ruleName    */
DECL|method|getRuleName ()
specifier|public
name|String
name|getRuleName
parameter_list|()
block|{
return|return
name|ruleName
return|;
block|}
comment|/**    * Return's the event type this safeMode exit rule handles.    * @return TypedEvent    */
DECL|method|getEventType ()
specifier|protected
specifier|abstract
name|TypedEvent
argument_list|<
name|T
argument_list|>
name|getEventType
parameter_list|()
function_decl|;
comment|/**    * Validate's this rule. If this rule condition is met, returns true, else    * returns false.    * @return boolean    */
DECL|method|validate ()
specifier|protected
specifier|abstract
name|boolean
name|validate
parameter_list|()
function_decl|;
comment|/**    * Actual processing logic for this rule.    * @param report    */
DECL|method|process (T report)
specifier|protected
specifier|abstract
name|void
name|process
parameter_list|(
name|T
name|report
parameter_list|)
function_decl|;
comment|/**    * Cleanup action's need to be done, once this rule is satisfied.    */
DECL|method|cleanup ()
specifier|protected
specifier|abstract
name|void
name|cleanup
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|onMessage (T report, EventPublisher publisher)
specifier|public
specifier|final
name|void
name|onMessage
parameter_list|(
name|T
name|report
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
block|{
comment|// TODO: when we have remove handlers, we can remove getInSafemode check
if|if
condition|(
name|scmInSafeMode
argument_list|()
condition|)
block|{
if|if
condition|(
name|validate
argument_list|()
condition|)
block|{
name|safeModeManager
operator|.
name|validateSafeModeExitRules
argument_list|(
name|ruleName
argument_list|,
name|publisher
argument_list|)
expr_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
return|return;
block|}
name|process
argument_list|(
name|report
argument_list|)
expr_stmt|;
if|if
condition|(
name|validate
argument_list|()
condition|)
block|{
name|safeModeManager
operator|.
name|validateSafeModeExitRules
argument_list|(
name|ruleName
argument_list|,
name|publisher
argument_list|)
expr_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Return true if SCM is in safe mode, else false.    * @return boolean    */
DECL|method|scmInSafeMode ()
specifier|protected
name|boolean
name|scmInSafeMode
parameter_list|()
block|{
return|return
name|safeModeManager
operator|.
name|getInSafeMode
argument_list|()
return|;
block|}
DECL|method|getSafeModeMetrics ()
specifier|protected
name|SafeModeMetrics
name|getSafeModeMetrics
parameter_list|()
block|{
return|return
name|safeModeManager
operator|.
name|getSafeModeMetrics
argument_list|()
return|;
block|}
block|}
end_class

end_unit

