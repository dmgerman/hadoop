begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.node.states
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|states
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
operator|.
name|ResultCodes
operator|.
name|DUPLICATE_DATANODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
operator|.
name|ResultCodes
operator|.
name|NO_SUCH_DATANODE
import|;
end_import

begin_comment
comment|/**  * This data structure maintains the list of containers that is on a datanode.  * This information is built from the DN container reports.  */
end_comment

begin_class
DECL|class|Node2ContainerMap
specifier|public
class|class
name|Node2ContainerMap
block|{
DECL|field|dn2ContainerMap
specifier|private
specifier|final
name|Map
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|ContainerID
argument_list|>
argument_list|>
name|dn2ContainerMap
decl_stmt|;
comment|/**    * Constructs a Node2ContainerMap Object.    */
DECL|method|Node2ContainerMap ()
specifier|public
name|Node2ContainerMap
parameter_list|()
block|{
name|dn2ContainerMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns true if this a datanode that is already tracked by    * Node2ContainerMap.    *    * @param datanodeID - UUID of the Datanode.    * @return True if this is tracked, false if this map does not know about it.    */
DECL|method|isKnownDatanode (UUID datanodeID)
specifier|public
name|boolean
name|isKnownDatanode
parameter_list|(
name|UUID
name|datanodeID
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|datanodeID
argument_list|)
expr_stmt|;
return|return
name|dn2ContainerMap
operator|.
name|containsKey
argument_list|(
name|datanodeID
argument_list|)
return|;
block|}
comment|/**    * Insert a new datanode into Node2Container Map.    *    * @param datanodeID -- Datanode UUID    * @param containerIDs - List of ContainerIDs.    */
DECL|method|insertNewDatanode (UUID datanodeID, Set<ContainerID> containerIDs)
specifier|public
name|void
name|insertNewDatanode
parameter_list|(
name|UUID
name|datanodeID
parameter_list|,
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|containerIDs
parameter_list|)
throws|throws
name|SCMException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containerIDs
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|datanodeID
argument_list|)
expr_stmt|;
if|if
condition|(
name|dn2ContainerMap
operator|.
name|putIfAbsent
argument_list|(
name|datanodeID
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|containerIDs
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SCMException
argument_list|(
literal|"Node already exists in the map"
argument_list|,
name|DUPLICATE_DATANODE
argument_list|)
throw|;
block|}
block|}
comment|/**    * Updates the Container list of an existing DN.    *    * @param datanodeID - UUID of DN.    * @param containers - Set of Containers tht is present on DN.    * @throws SCMException - if we don't know about this datanode, for new DN    *                      use insertNewDatanode.    */
DECL|method|setContainersForDatanode (UUID datanodeID, Set<ContainerID> containers)
specifier|public
name|void
name|setContainersForDatanode
parameter_list|(
name|UUID
name|datanodeID
parameter_list|,
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|containers
parameter_list|)
throws|throws
name|SCMException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|datanodeID
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containers
argument_list|)
expr_stmt|;
if|if
condition|(
name|dn2ContainerMap
operator|.
name|computeIfPresent
argument_list|(
name|datanodeID
argument_list|,
parameter_list|(
lambda|k
argument_list|,
name|v
argument_list|)
operator|->
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|containers
argument_list|)
condition|)
operator|==
literal|null
block|)
block|{
throw|throw
operator|new
name|SCMException
argument_list|(
literal|"No such datanode"
argument_list|,
name|NO_SUCH_DATANODE
argument_list|)
throw|;
block|}
block|}
end_class

begin_comment
comment|/**    * Removes datanode Entry from the map.    * @param datanodeID - Datanode ID.    */
end_comment

begin_function
DECL|method|removeDatanode (UUID datanodeID)
specifier|public
name|void
name|removeDatanode
parameter_list|(
name|UUID
name|datanodeID
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|datanodeID
argument_list|)
expr_stmt|;
name|dn2ContainerMap
operator|.
name|computeIfPresent
argument_list|(
name|datanodeID
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Returns null if there no containers associated with this datanode ID.    *    * @param datanode - UUID    * @return Set of containers or Null.    */
end_comment

begin_function
DECL|method|getContainers (UUID datanode)
specifier|public
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|getContainers
parameter_list|(
name|UUID
name|datanode
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
return|return
name|dn2ContainerMap
operator|.
name|computeIfPresent
argument_list|(
name|datanode
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|processReport (UUID datanodeID, Set<ContainerID> containers)
specifier|public
name|ReportResult
name|processReport
parameter_list|(
name|UUID
name|datanodeID
parameter_list|,
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|containers
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|datanodeID
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containers
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isKnownDatanode
argument_list|(
name|datanodeID
argument_list|)
condition|)
block|{
return|return
name|ReportResult
operator|.
name|ReportResultBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStatus
argument_list|(
name|ReportStatus
operator|.
name|NEW_DATANODE_FOUND
argument_list|)
operator|.
name|setNewContainers
argument_list|(
name|containers
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Conditions like Zero length containers should be handled by removeAll.
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|currentSet
init|=
name|dn2ContainerMap
operator|.
name|get
argument_list|(
name|datanodeID
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|ContainerID
argument_list|>
name|newContainers
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|containers
argument_list|)
decl_stmt|;
name|newContainers
operator|.
name|removeAll
argument_list|(
name|currentSet
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|ContainerID
argument_list|>
name|missingContainers
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|currentSet
argument_list|)
decl_stmt|;
name|missingContainers
operator|.
name|removeAll
argument_list|(
name|containers
argument_list|)
expr_stmt|;
if|if
condition|(
name|newContainers
operator|.
name|isEmpty
argument_list|()
operator|&&
name|missingContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ReportResult
operator|.
name|ReportResultBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStatus
argument_list|(
name|ReportStatus
operator|.
name|ALL_IS_WELL
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
name|newContainers
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|missingContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ReportResult
operator|.
name|ReportResultBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStatus
argument_list|(
name|ReportStatus
operator|.
name|MISSING_CONTAINERS
argument_list|)
operator|.
name|setMissingContainers
argument_list|(
name|missingContainers
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|newContainers
operator|.
name|isEmpty
argument_list|()
operator|&&
name|missingContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ReportResult
operator|.
name|ReportResultBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStatus
argument_list|(
name|ReportStatus
operator|.
name|NEW_CONTAINERS_FOUND
argument_list|)
operator|.
name|setNewContainers
argument_list|(
name|newContainers
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|newContainers
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|missingContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ReportResult
operator|.
name|ReportResultBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStatus
argument_list|(
name|ReportStatus
operator|.
name|MISSING_AND_NEW_CONTAINERS_FOUND
argument_list|)
operator|.
name|setNewContainers
argument_list|(
name|newContainers
argument_list|)
operator|.
name|setMissingContainers
argument_list|(
name|missingContainers
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// default status& Make compiler happy
return|return
name|ReportResult
operator|.
name|ReportResultBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStatus
argument_list|(
name|ReportStatus
operator|.
name|ALL_IS_WELL
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Results possible from processing a container report by    * Node2ContainerMapper.    */
end_comment

begin_enum
DECL|enum|ReportStatus
specifier|public
enum|enum
name|ReportStatus
block|{
DECL|enumConstant|ALL_IS_WELL
name|ALL_IS_WELL
block|,
DECL|enumConstant|MISSING_CONTAINERS
name|MISSING_CONTAINERS
block|,
DECL|enumConstant|NEW_CONTAINERS_FOUND
name|NEW_CONTAINERS_FOUND
block|,
DECL|enumConstant|MISSING_AND_NEW_CONTAINERS_FOUND
name|MISSING_AND_NEW_CONTAINERS_FOUND
block|,
DECL|enumConstant|NEW_DATANODE_FOUND
name|NEW_DATANODE_FOUND
block|}
end_enum

unit|}
end_unit

