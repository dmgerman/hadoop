begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.node.states
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|states
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
operator|.
name|ResultCodes
operator|.
name|NO_SUCH_DATANODE
import|;
end_import

begin_comment
comment|/**  * This data structure maintains the list of containers that is on a datanode.  * This information is built from the DN container reports.  */
end_comment

begin_class
DECL|class|Node2ContainerMap
specifier|public
class|class
name|Node2ContainerMap
extends|extends
name|Node2ObjectsMap
argument_list|<
name|ContainerID
argument_list|>
block|{
comment|/**    * Constructs a Node2ContainerMap Object.    */
DECL|method|Node2ContainerMap ()
specifier|public
name|Node2ContainerMap
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns null if there no containers associated with this datanode ID.    *    * @param datanode - UUID    * @return Set of containers or Null.    */
DECL|method|getContainers (UUID datanode)
specifier|public
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|getContainers
parameter_list|(
name|UUID
name|datanode
parameter_list|)
block|{
return|return
name|getObjects
argument_list|(
name|datanode
argument_list|)
return|;
block|}
comment|/**    * Insert a new datanode into Node2Container Map.    *    * @param datanodeID   -- Datanode UUID    * @param containerIDs - List of ContainerIDs.    */
DECL|method|insertNewDatanode (UUID datanodeID, Set<ContainerID> containerIDs)
specifier|public
name|void
name|insertNewDatanode
parameter_list|(
name|UUID
name|datanodeID
parameter_list|,
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|containerIDs
parameter_list|)
throws|throws
name|SCMException
block|{
name|super
operator|.
name|insertNewDatanode
argument_list|(
name|datanodeID
argument_list|,
name|containerIDs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates the Container list of an existing DN.    *    * @param datanodeID - UUID of DN.    * @param containers - Set of Containers tht is present on DN.    * @throws SCMException - if we don't know about this datanode, for new DN    *                        use addDatanodeInContainerMap.    */
DECL|method|setContainersForDatanode (UUID datanodeID, Set<ContainerID> containers)
specifier|public
name|void
name|setContainersForDatanode
parameter_list|(
name|UUID
name|datanodeID
parameter_list|,
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|containers
parameter_list|)
throws|throws
name|SCMException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|datanodeID
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containers
argument_list|)
expr_stmt|;
if|if
condition|(
name|dn2ObjectMap
operator|.
name|computeIfPresent
argument_list|(
name|datanodeID
argument_list|,
parameter_list|(
lambda|k
argument_list|,
name|v
argument_list|)
operator|->
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|containers
argument_list|)
condition|)
operator|==
literal|null
block|)
block|{
throw|throw
operator|new
name|SCMException
argument_list|(
literal|"No such datanode"
argument_list|,
name|NO_SUCH_DATANODE
argument_list|)
throw|;
block|}
block|}
end_class

begin_function
annotation|@
name|VisibleForTesting
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|dn2ObjectMap
operator|.
name|size
argument_list|()
return|;
block|}
end_function

unit|}
end_unit

