begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.chillmode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|chillmode
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|PipelineReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|PipelineReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeHeartbeatDispatcher
operator|.
name|PipelineReportFromDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * This rule covers whether we have atleast one datanode is reported for each  * pipeline. This rule is for all open containers, we have at least one  * replica available for read when we exit chill mode.  */
end_comment

begin_class
DECL|class|OneReplicaPipelineChillModeRule
specifier|public
class|class
name|OneReplicaPipelineChillModeRule
implements|implements
name|ChillModeExitRule
argument_list|<
name|PipelineReportFromDatanode
argument_list|>
implements|,
name|EventHandler
argument_list|<
name|PipelineReportFromDatanode
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OneReplicaPipelineChillModeRule
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|thresholdCount
specifier|private
name|int
name|thresholdCount
decl_stmt|;
DECL|field|reportedPipelineIDSet
specifier|private
name|Set
argument_list|<
name|PipelineID
argument_list|>
name|reportedPipelineIDSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|pipelineManager
specifier|private
specifier|final
name|PipelineManager
name|pipelineManager
decl_stmt|;
DECL|field|chillModeManager
specifier|private
specifier|final
name|SCMChillModeManager
name|chillModeManager
decl_stmt|;
DECL|method|OneReplicaPipelineChillModeRule (PipelineManager pipelineManager, SCMChillModeManager chillModeManager, Configuration configuration)
specifier|public
name|OneReplicaPipelineChillModeRule
parameter_list|(
name|PipelineManager
name|pipelineManager
parameter_list|,
name|SCMChillModeManager
name|chillModeManager
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|chillModeManager
operator|=
name|chillModeManager
expr_stmt|;
name|this
operator|.
name|pipelineManager
operator|=
name|pipelineManager
expr_stmt|;
name|double
name|percent
init|=
name|configuration
operator|.
name|getDouble
argument_list|(
name|HddsConfigKeys
operator|.
name|HDDS_SCM_CHILLMODE_ONE_NODE_REPORTED_PIPELINE_PCT
argument_list|,
name|HddsConfigKeys
operator|.
name|HDDS_SCM_CHILLMODE_ONE_NODE_REPORTED_PIPELINE_PCT_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|totalPipelineCount
init|=
name|pipelineManager
operator|.
name|getPipelines
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|thresholdCount
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|percent
operator|*
name|totalPipelineCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" Total pipeline count is {}, pipeline's with atleast one "
operator|+
literal|"datanode reported threshold count is {}"
argument_list|,
name|totalPipelineCount
argument_list|,
name|thresholdCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate ()
specifier|public
name|boolean
name|validate
parameter_list|()
block|{
if|if
condition|(
name|reportedPipelineIDSet
operator|.
name|size
argument_list|()
operator|>=
name|thresholdCount
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|process (PipelineReportFromDatanode pipelineReportFromDatanode)
specifier|public
name|void
name|process
parameter_list|(
name|PipelineReportFromDatanode
name|pipelineReportFromDatanode
parameter_list|)
block|{
name|Pipeline
name|pipeline
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pipelineReportFromDatanode
argument_list|)
expr_stmt|;
name|PipelineReportsProto
name|pipelineReport
init|=
name|pipelineReportFromDatanode
operator|.
name|getReport
argument_list|()
decl_stmt|;
for|for
control|(
name|PipelineReport
name|report
range|:
name|pipelineReport
operator|.
name|getPipelineReportList
argument_list|()
control|)
block|{
name|PipelineID
name|pipelineID
init|=
name|PipelineID
operator|.
name|getFromProtobuf
argument_list|(
name|report
operator|.
name|getPipelineID
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|pipeline
operator|=
name|pipelineManager
operator|.
name|getPipeline
argument_list|(
name|pipelineID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PipelineNotFoundException
name|e
parameter_list|)
block|{
continue|continue;
block|}
if|if
condition|(
name|pipeline
operator|.
name|getFactor
argument_list|()
operator|==
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
operator|&&
operator|!
name|reportedPipelineIDSet
operator|.
name|contains
argument_list|(
name|pipelineID
argument_list|)
condition|)
block|{
name|reportedPipelineIDSet
operator|.
name|add
argument_list|(
name|pipelineID
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|reportedPipelineIDSet
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMessage (PipelineReportFromDatanode pipelineReportFromDatanode, EventPublisher publisher)
specifier|public
name|void
name|onMessage
parameter_list|(
name|PipelineReportFromDatanode
name|pipelineReportFromDatanode
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
block|{
if|if
condition|(
name|validate
argument_list|()
condition|)
block|{
name|chillModeManager
operator|.
name|validateChillModeExitRules
argument_list|(
name|publisher
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Process pipeline report from datanode
name|process
argument_list|(
name|pipelineReportFromDatanode
argument_list|)
expr_stmt|;
if|if
condition|(
name|chillModeManager
operator|.
name|getInChillMode
argument_list|()
condition|)
block|{
name|SCMChillModeManager
operator|.
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"SCM in chill mode. Pipelines with atleast one datanode reported "
operator|+
literal|"count is {}, required atleast one datanode reported per "
operator|+
literal|"pipeline count is {}"
argument_list|,
name|reportedPipelineIDSet
operator|.
name|size
argument_list|()
argument_list|,
name|thresholdCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validate
argument_list|()
condition|)
block|{
name|chillModeManager
operator|.
name|validateChillModeExitRules
argument_list|(
name|publisher
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

