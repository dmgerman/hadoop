begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.pipelines
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipelines
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|StorageUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|PipelineID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
operator|.
name|ContainerPlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
operator|.
name|SCMContainerPlacementRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipelines
operator|.
name|ratis
operator|.
name|RatisManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipelines
operator|.
name|standalone
operator|.
name|StandaloneManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|LifeCycleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|Lease
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|LeaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
operator|.
name|ResultCodes
operator|.
name|FAILED_TO_CHANGE_PIPELINE_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|ServerUtils
operator|.
name|getOzoneMetaDirPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|SCM_PIPELINE_DB
import|;
end_import

begin_comment
comment|/**  * Sends the request to the right pipeline manager.  */
end_comment

begin_class
DECL|class|PipelineSelector
specifier|public
class|class
name|PipelineSelector
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PipelineSelector
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|placementPolicy
specifier|private
specifier|final
name|ContainerPlacementPolicy
name|placementPolicy
decl_stmt|;
DECL|field|nodeManager
specifier|private
specifier|final
name|NodeManager
name|nodeManager
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|eventPublisher
specifier|private
specifier|final
name|EventPublisher
name|eventPublisher
decl_stmt|;
DECL|field|ratisManager
specifier|private
specifier|final
name|RatisManagerImpl
name|ratisManager
decl_stmt|;
DECL|field|standaloneManager
specifier|private
specifier|final
name|StandaloneManagerImpl
name|standaloneManager
decl_stmt|;
DECL|field|containerSize
specifier|private
specifier|final
name|long
name|containerSize
decl_stmt|;
DECL|field|pipelineStore
specifier|private
specifier|final
name|MetadataStore
name|pipelineStore
decl_stmt|;
DECL|field|stateManager
specifier|private
specifier|final
name|PipelineStateManager
name|stateManager
decl_stmt|;
DECL|field|node2PipelineMap
specifier|private
specifier|final
name|Node2PipelineMap
name|node2PipelineMap
decl_stmt|;
DECL|field|pipeline2ContainerMap
specifier|private
specifier|final
name|Map
argument_list|<
name|PipelineID
argument_list|,
name|HashSet
argument_list|<
name|ContainerID
argument_list|>
argument_list|>
name|pipeline2ContainerMap
decl_stmt|;
DECL|field|pipelineMap
specifier|private
specifier|final
name|Map
argument_list|<
name|PipelineID
argument_list|,
name|Pipeline
argument_list|>
name|pipelineMap
decl_stmt|;
DECL|field|pipelineLeaseManager
specifier|private
specifier|final
name|LeaseManager
argument_list|<
name|Pipeline
argument_list|>
name|pipelineLeaseManager
decl_stmt|;
comment|/**    * Constructs a pipeline Selector.    *    * @param nodeManager - node manager    * @param conf - Ozone Config    */
DECL|method|PipelineSelector (NodeManager nodeManager, Configuration conf, EventPublisher eventPublisher, int cacheSizeMB)
specifier|public
name|PipelineSelector
parameter_list|(
name|NodeManager
name|nodeManager
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|EventPublisher
name|eventPublisher
parameter_list|,
name|int
name|cacheSizeMB
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|nodeManager
operator|=
name|nodeManager
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|eventPublisher
operator|=
name|eventPublisher
expr_stmt|;
name|this
operator|.
name|placementPolicy
operator|=
name|createContainerPlacementPolicy
argument_list|(
name|nodeManager
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerSize
operator|=
operator|(
name|long
operator|)
name|this
operator|.
name|conf
operator|.
name|getStorageSize
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_SIZE
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_SIZE_DEFAULT
argument_list|,
name|StorageUnit
operator|.
name|BYTES
argument_list|)
expr_stmt|;
name|node2PipelineMap
operator|=
operator|new
name|Node2PipelineMap
argument_list|()
expr_stmt|;
name|pipelineMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|standaloneManager
operator|=
operator|new
name|StandaloneManagerImpl
argument_list|(
name|this
operator|.
name|nodeManager
argument_list|,
name|placementPolicy
argument_list|,
name|containerSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|ratisManager
operator|=
operator|new
name|RatisManagerImpl
argument_list|(
name|this
operator|.
name|nodeManager
argument_list|,
name|placementPolicy
argument_list|,
name|containerSize
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|long
name|pipelineCreationLeaseTimeout
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_PIPELINE_CREATION_LEASE_TIMEOUT
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_PIPELINE_CREATION_LEASE_TIMEOUT_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|pipelineLeaseManager
operator|=
operator|new
name|LeaseManager
argument_list|<>
argument_list|(
literal|"PipelineCreation"
argument_list|,
name|pipelineCreationLeaseTimeout
argument_list|)
expr_stmt|;
name|pipelineLeaseManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|stateManager
operator|=
operator|new
name|PipelineStateManager
argument_list|()
expr_stmt|;
name|pipeline2ContainerMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
comment|// Write the container name to pipeline mapping.
name|File
name|metaDir
init|=
name|getOzoneMetaDirPath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|File
name|containerDBPath
init|=
operator|new
name|File
argument_list|(
name|metaDir
argument_list|,
name|SCM_PIPELINE_DB
argument_list|)
decl_stmt|;
name|pipelineStore
operator|=
name|MetadataStoreBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setDbFile
argument_list|(
name|containerDBPath
argument_list|)
operator|.
name|setCacheSize
argument_list|(
name|cacheSizeMB
operator|*
name|OzoneConsts
operator|.
name|MB
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|reloadExistingPipelines
argument_list|()
expr_stmt|;
block|}
DECL|method|reloadExistingPipelines ()
specifier|private
name|void
name|reloadExistingPipelines
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pipelineStore
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Nothing to do just return
return|return;
block|}
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|range
init|=
name|pipelineStore
operator|.
name|getSequentialRangeKVs
argument_list|(
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Transform the values into the pipelines.
comment|// TODO: filter by pipeline state
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|range
control|)
block|{
name|Pipeline
name|pipeline
init|=
name|Pipeline
operator|.
name|getFromProtoBuf
argument_list|(
name|HddsProtos
operator|.
name|Pipeline
operator|.
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|addExistingPipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getOpenContainerIDsByPipeline (PipelineID pipelineID)
specifier|public
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|getOpenContainerIDsByPipeline
parameter_list|(
name|PipelineID
name|pipelineID
parameter_list|)
block|{
return|return
name|pipeline2ContainerMap
operator|.
name|get
argument_list|(
name|pipelineID
argument_list|)
return|;
block|}
DECL|method|addContainerToPipeline (PipelineID pipelineID, long containerID)
specifier|public
name|void
name|addContainerToPipeline
parameter_list|(
name|PipelineID
name|pipelineID
parameter_list|,
name|long
name|containerID
parameter_list|)
block|{
name|pipeline2ContainerMap
operator|.
name|get
argument_list|(
name|pipelineID
argument_list|)
operator|.
name|add
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|containerID
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|removeContainerFromPipeline (PipelineID pipelineID, long containerID)
specifier|public
name|void
name|removeContainerFromPipeline
parameter_list|(
name|PipelineID
name|pipelineID
parameter_list|,
name|long
name|containerID
parameter_list|)
throws|throws
name|IOException
block|{
name|pipeline2ContainerMap
operator|.
name|get
argument_list|(
name|pipelineID
argument_list|)
operator|.
name|remove
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|containerID
argument_list|)
argument_list|)
expr_stmt|;
name|closePipelineIfNoOpenContainers
argument_list|(
name|pipelineMap
operator|.
name|get
argument_list|(
name|pipelineID
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Translates a list of nodes, ordered such that the first is the leader, into    * a corresponding {@link Pipeline} object.    *    * @param nodes - list of datanodes on which we will allocate the container.    * The first of the list will be the leader node.    * @return pipeline corresponding to nodes    */
DECL|method|newPipelineFromNodes ( List<DatanodeDetails> nodes, ReplicationType replicationType, ReplicationFactor replicationFactor, PipelineID id)
specifier|public
specifier|static
name|Pipeline
name|newPipelineFromNodes
parameter_list|(
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|nodes
parameter_list|,
name|ReplicationType
name|replicationType
parameter_list|,
name|ReplicationFactor
name|replicationFactor
parameter_list|,
name|PipelineID
name|id
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|leaderId
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUuidString
argument_list|()
decl_stmt|;
comment|// A new pipeline always starts in allocated state
name|Pipeline
name|pipeline
init|=
operator|new
name|Pipeline
argument_list|(
name|leaderId
argument_list|,
name|LifeCycleState
operator|.
name|ALLOCATED
argument_list|,
name|replicationType
argument_list|,
name|replicationFactor
argument_list|,
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeDetails
name|node
range|:
name|nodes
control|)
block|{
name|pipeline
operator|.
name|addMember
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|pipeline
return|;
block|}
comment|/**    * Create pluggable container placement policy implementation instance.    *    * @param nodeManager - SCM node manager.    * @param conf - configuration.    * @return SCM container placement policy implementation instance.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createContainerPlacementPolicy ( final NodeManager nodeManager, final Configuration conf)
specifier|private
specifier|static
name|ContainerPlacementPolicy
name|createContainerPlacementPolicy
parameter_list|(
specifier|final
name|NodeManager
name|nodeManager
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ContainerPlacementPolicy
argument_list|>
name|implClass
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|ContainerPlacementPolicy
argument_list|>
operator|)
name|conf
operator|.
name|getClass
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_PLACEMENT_IMPL_KEY
argument_list|,
name|SCMContainerPlacementRandom
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|ContainerPlacementPolicy
argument_list|>
name|ctor
init|=
name|implClass
operator|.
name|getDeclaredConstructor
argument_list|(
name|NodeManager
operator|.
name|class
argument_list|,
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ctor
operator|.
name|newInstance
argument_list|(
name|nodeManager
argument_list|,
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|implClass
operator|.
name|getName
argument_list|()
operator|+
literal|" could not be constructed."
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unhandled exception occurred, Placement policy will not be "
operator|+
literal|"functional."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to load "
operator|+
literal|"ContainerPlacementPolicy"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return the pipeline manager from the replication type.    *    * @param replicationType - Replication Type Enum.    * @return pipeline Manager.    * @throws IllegalArgumentException If an pipeline type gets added    * and this function is not modified we will throw.    */
DECL|method|getPipelineManager (ReplicationType replicationType)
specifier|private
name|PipelineManager
name|getPipelineManager
parameter_list|(
name|ReplicationType
name|replicationType
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
switch|switch
condition|(
name|replicationType
condition|)
block|{
case|case
name|RATIS
case|:
return|return
name|this
operator|.
name|ratisManager
return|;
case|case
name|STAND_ALONE
case|:
return|return
name|this
operator|.
name|standaloneManager
return|;
case|case
name|CHAINED
case|:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not implemented yet"
argument_list|)
throw|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected enum found. Does not"
operator|+
literal|" know how to handle "
operator|+
name|replicationType
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * This function is called by the Container Manager while allocating a new    * container. The client specifies what kind of replication pipeline is needed    * and based on the replication type in the request appropriate Interface is    * invoked.    */
DECL|method|getReplicationPipeline (ReplicationType replicationType, HddsProtos.ReplicationFactor replicationFactor)
specifier|public
name|Pipeline
name|getReplicationPipeline
parameter_list|(
name|ReplicationType
name|replicationType
parameter_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
name|replicationFactor
parameter_list|)
throws|throws
name|IOException
block|{
name|PipelineManager
name|manager
init|=
name|getPipelineManager
argument_list|(
name|replicationType
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|manager
argument_list|,
literal|"Found invalid pipeline manager"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting replication pipeline forReplicationType {} :"
operator|+
literal|" ReplicationFactor {}"
argument_list|,
name|replicationType
operator|.
name|toString
argument_list|()
argument_list|,
name|replicationFactor
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|/**      * In the Ozone world, we have a very simple policy.      *      * 1. Try to create a pipeline if there are enough free nodes.      *      * 2. This allows all nodes to part of a pipeline quickly.      *      * 3. if there are not enough free nodes, return already allocated pipeline      * in a round-robin fashion.      *      * TODO: Might have to come up with a better algorithm than this.      * Create a new placement policy that returns pipelines in round robin      * fashion.      */
name|Pipeline
name|pipeline
init|=
name|manager
operator|.
name|createPipeline
argument_list|(
name|replicationFactor
argument_list|,
name|replicationType
argument_list|)
decl_stmt|;
if|if
condition|(
name|pipeline
operator|==
literal|null
condition|)
block|{
comment|// try to return a pipeline from already allocated pipelines
name|PipelineID
name|pipelineId
init|=
name|manager
operator|.
name|getPipeline
argument_list|(
name|replicationFactor
argument_list|,
name|replicationType
argument_list|)
decl_stmt|;
name|pipeline
operator|=
name|pipelineMap
operator|.
name|get
argument_list|(
name|pipelineId
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|pipeline
operator|.
name|getLifeCycleState
argument_list|()
operator|==
name|LifeCycleState
operator|.
name|OPEN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pipelineStore
operator|.
name|put
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
operator|.
name|getProtobuf
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|pipeline
operator|.
name|getProtobufMessage
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// if a new pipeline is created, initialize its state machine
name|updatePipelineState
argument_list|(
name|pipeline
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CREATE
argument_list|)
expr_stmt|;
comment|//TODO: move the initialization of pipeline to Ozone Client
name|manager
operator|.
name|initializePipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|updatePipelineState
argument_list|(
name|pipeline
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CREATED
argument_list|)
expr_stmt|;
block|}
return|return
name|pipeline
return|;
block|}
comment|/**    * This function to return pipeline for given pipeline id.    */
DECL|method|getPipeline (PipelineID pipelineID)
specifier|public
name|Pipeline
name|getPipeline
parameter_list|(
name|PipelineID
name|pipelineID
parameter_list|)
block|{
return|return
name|pipelineMap
operator|.
name|get
argument_list|(
name|pipelineID
argument_list|)
return|;
block|}
comment|/**    * Finalize a given pipeline.    */
DECL|method|finalizePipeline (Pipeline pipeline)
specifier|public
name|void
name|finalizePipeline
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
throws|throws
name|IOException
block|{
name|PipelineManager
name|manager
init|=
name|getPipelineManager
argument_list|(
name|pipeline
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|manager
argument_list|,
literal|"Found invalid pipeline manager"
argument_list|)
expr_stmt|;
if|if
condition|(
name|pipeline
operator|.
name|getLifeCycleState
argument_list|()
operator|==
name|LifeCycleState
operator|.
name|CLOSING
operator|||
name|pipeline
operator|.
name|getLifeCycleState
argument_list|()
operator|==
name|LifeCycleState
operator|.
name|CLOSED
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"pipeline:{} already in closing state, skipping"
argument_list|,
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// already in closing/closed state
return|return;
block|}
comment|// Remove the pipeline from active allocation
name|manager
operator|.
name|finalizePipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finalizing pipeline. pipelineID: {}"
argument_list|,
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|updatePipelineState
argument_list|(
name|pipeline
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|FINALIZE
argument_list|)
expr_stmt|;
name|closePipelineIfNoOpenContainers
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
block|}
comment|/**    * Close a given pipeline.    */
DECL|method|closePipelineIfNoOpenContainers (Pipeline pipeline)
specifier|public
name|void
name|closePipelineIfNoOpenContainers
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pipeline
operator|.
name|getLifeCycleState
argument_list|()
operator|!=
name|LifeCycleState
operator|.
name|CLOSING
condition|)
block|{
return|return;
block|}
name|HashSet
argument_list|<
name|ContainerID
argument_list|>
name|containerIDS
init|=
name|pipeline2ContainerMap
operator|.
name|get
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerIDS
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|updatePipelineState
argument_list|(
name|pipeline
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing pipeline. pipelineID: {}"
argument_list|,
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Close a given pipeline.    */
DECL|method|closePipeline (Pipeline pipeline)
specifier|private
name|void
name|closePipeline
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
throws|throws
name|IOException
block|{
name|PipelineManager
name|manager
init|=
name|getPipelineManager
argument_list|(
name|pipeline
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|manager
argument_list|,
literal|"Found invalid pipeline manager"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing pipeline. pipelineID: {}"
argument_list|,
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|ContainerID
argument_list|>
name|containers
init|=
name|pipeline2ContainerMap
operator|.
name|get
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|containers
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|manager
operator|.
name|closePipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add to a given pipeline.    */
DECL|method|addOpenPipeline (Pipeline pipeline)
specifier|private
name|void
name|addOpenPipeline
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
block|{
name|PipelineManager
name|manager
init|=
name|getPipelineManager
argument_list|(
name|pipeline
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|manager
argument_list|,
literal|"Found invalid pipeline manager"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding Open pipeline. pipelineID: {}"
argument_list|,
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|addOpenPipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
block|}
DECL|method|closeContainersByPipeline (Pipeline pipeline)
specifier|private
name|void
name|closeContainersByPipeline
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
block|{
name|HashSet
argument_list|<
name|ContainerID
argument_list|>
name|containers
init|=
name|pipeline2ContainerMap
operator|.
name|get
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ContainerID
name|id
range|:
name|containers
control|)
block|{
name|eventPublisher
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPipelineId (UUID dnId)
specifier|public
name|Set
argument_list|<
name|PipelineID
argument_list|>
name|getPipelineId
parameter_list|(
name|UUID
name|dnId
parameter_list|)
block|{
return|return
name|node2PipelineMap
operator|.
name|getPipelines
argument_list|(
name|dnId
argument_list|)
return|;
block|}
DECL|method|addExistingPipeline (Pipeline pipeline)
specifier|private
name|void
name|addExistingPipeline
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
throws|throws
name|IOException
block|{
name|LifeCycleState
name|state
init|=
name|pipeline
operator|.
name|getLifeCycleState
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|ALLOCATED
case|:
comment|// a pipeline in allocated state is only present in SCM and does not exist
comment|// on datanode, on SCM restart, this pipeline can be ignored.
break|break;
case|case
name|CREATING
case|:
case|case
name|OPEN
case|:
case|case
name|CLOSING
case|:
comment|//TODO: process pipeline report and move pipeline to active queue
comment|// when all the nodes have reported.
name|pipelineMap
operator|.
name|put
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|,
name|pipeline
argument_list|)
expr_stmt|;
name|pipeline2ContainerMap
operator|.
name|put
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|node2PipelineMap
operator|.
name|addPipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
break|break;
case|case
name|CLOSED
case|:
comment|// if the pipeline is in closed state, nothing to do.
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid pipeline state:"
operator|+
name|state
argument_list|)
throw|;
block|}
block|}
comment|/**    * Update the Pipeline State to the next state.    *    * @param pipeline - Pipeline    * @param event - LifeCycle Event    * @throws SCMException  on Failure.    */
DECL|method|updatePipelineState (Pipeline pipeline, HddsProtos.LifeCycleEvent event)
specifier|public
name|void
name|updatePipelineState
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
name|event
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
switch|switch
condition|(
name|event
condition|)
block|{
case|case
name|CREATE
case|:
name|pipelineMap
operator|.
name|put
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|,
name|pipeline
argument_list|)
expr_stmt|;
name|pipeline2ContainerMap
operator|.
name|put
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|node2PipelineMap
operator|.
name|addPipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
comment|// Acquire lease on pipeline
name|Lease
argument_list|<
name|Pipeline
argument_list|>
name|pipelineLease
init|=
name|pipelineLeaseManager
operator|.
name|acquire
argument_list|(
name|pipeline
argument_list|)
decl_stmt|;
comment|// Register callback to be executed in case of timeout
name|pipelineLease
operator|.
name|registerCallBack
argument_list|(
parameter_list|()
lambda|->
block|{
name|updatePipelineState
argument_list|(
name|pipeline
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|TIMEOUT
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
break|break;
case|case
name|CREATED
case|:
comment|// Release the lease on pipeline
name|pipelineLeaseManager
operator|.
name|release
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|addOpenPipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
break|break;
case|case
name|FINALIZE
case|:
name|closeContainersByPipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
break|break;
case|case
name|CLOSE
case|:
case|case
name|TIMEOUT
case|:
name|closePipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|pipeline2ContainerMap
operator|.
name|remove
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|node2PipelineMap
operator|.
name|removePipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|pipelineMap
operator|.
name|remove
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|SCMException
argument_list|(
literal|"Unsupported pipeline LifeCycleEvent."
argument_list|,
name|FAILED_TO_CHANGE_PIPELINE_STATE
argument_list|)
throw|;
block|}
name|stateManager
operator|.
name|updatePipelineState
argument_list|(
name|pipeline
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|pipelineStore
operator|.
name|put
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
operator|.
name|getProtobuf
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|pipeline
operator|.
name|getProtobufMessage
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LeaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Lease Exception."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pipelineLeaseManager
operator|!=
literal|null
condition|)
block|{
name|pipelineLeaseManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pipelineStore
operator|!=
literal|null
condition|)
block|{
name|pipelineStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

