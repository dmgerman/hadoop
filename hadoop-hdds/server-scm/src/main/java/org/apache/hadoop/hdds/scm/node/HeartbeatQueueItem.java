begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.node
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|NodeReportProto
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|monotonicNow
import|;
end_import

begin_comment
comment|/**  * This class represents the item in SCM heartbeat queue.  */
end_comment

begin_class
DECL|class|HeartbeatQueueItem
specifier|public
class|class
name|HeartbeatQueueItem
block|{
DECL|field|datanodeDetails
specifier|private
name|DatanodeDetails
name|datanodeDetails
decl_stmt|;
DECL|field|recvTimestamp
specifier|private
name|long
name|recvTimestamp
decl_stmt|;
DECL|field|nodeReport
specifier|private
name|NodeReportProto
name|nodeReport
decl_stmt|;
comment|/**    *    * @param datanodeDetails - datanode ID of the heartbeat.    * @param recvTimestamp - heartbeat receive timestamp.    * @param nodeReport - node report associated with the heartbeat if any.    */
DECL|method|HeartbeatQueueItem (DatanodeDetails datanodeDetails, long recvTimestamp, NodeReportProto nodeReport)
name|HeartbeatQueueItem
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|,
name|long
name|recvTimestamp
parameter_list|,
name|NodeReportProto
name|nodeReport
parameter_list|)
block|{
name|this
operator|.
name|datanodeDetails
operator|=
name|datanodeDetails
expr_stmt|;
name|this
operator|.
name|recvTimestamp
operator|=
name|recvTimestamp
expr_stmt|;
name|this
operator|.
name|nodeReport
operator|=
name|nodeReport
expr_stmt|;
block|}
comment|/**    * @return datanode ID.    */
DECL|method|getDatanodeDetails ()
specifier|public
name|DatanodeDetails
name|getDatanodeDetails
parameter_list|()
block|{
return|return
name|datanodeDetails
return|;
block|}
comment|/**    * @return node report.    */
DECL|method|getNodeReport ()
specifier|public
name|NodeReportProto
name|getNodeReport
parameter_list|()
block|{
return|return
name|nodeReport
return|;
block|}
comment|/**    * @return heartbeat receive timestamp.    */
DECL|method|getRecvTimestamp ()
specifier|public
name|long
name|getRecvTimestamp
parameter_list|()
block|{
return|return
name|recvTimestamp
return|;
block|}
comment|/**    * Builder for HeartbeatQueueItem.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|datanodeDetails
specifier|private
name|DatanodeDetails
name|datanodeDetails
decl_stmt|;
DECL|field|nodeReport
specifier|private
name|NodeReportProto
name|nodeReport
decl_stmt|;
DECL|field|recvTimestamp
specifier|private
name|long
name|recvTimestamp
init|=
name|monotonicNow
argument_list|()
decl_stmt|;
DECL|method|setDatanodeDetails (DatanodeDetails dnDetails)
specifier|public
name|Builder
name|setDatanodeDetails
parameter_list|(
name|DatanodeDetails
name|dnDetails
parameter_list|)
block|{
name|this
operator|.
name|datanodeDetails
operator|=
name|dnDetails
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setNodeReport (NodeReportProto report)
specifier|public
name|Builder
name|setNodeReport
parameter_list|(
name|NodeReportProto
name|report
parameter_list|)
block|{
name|this
operator|.
name|nodeReport
operator|=
name|report
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setRecvTimestamp (long recvTime)
specifier|public
name|Builder
name|setRecvTimestamp
parameter_list|(
name|long
name|recvTime
parameter_list|)
block|{
name|this
operator|.
name|recvTimestamp
operator|=
name|recvTime
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|HeartbeatQueueItem
name|build
parameter_list|()
block|{
return|return
operator|new
name|HeartbeatQueueItem
argument_list|(
name|datanodeDetails
argument_list|,
name|recvTimestamp
argument_list|,
name|nodeReport
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

