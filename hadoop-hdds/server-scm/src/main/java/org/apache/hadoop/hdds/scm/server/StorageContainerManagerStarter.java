begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license  * agreements. See the NOTICE file distributed with this work for additional  * information regarding  * copyright ownership. The ASF licenses this file to you under the Apache  * License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the  * License. You may obtain a  * copy of the License at  *  *<p>http://www.apache.org/licenses/LICENSE-2.0  *  *<p>Unless required by applicable law or agreed to in writing, software  * distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR  * CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing  * permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|cli
operator|.
name|GenericCli
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|cli
operator|.
name|HddsVersionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|discovery
operator|.
name|DiscoveryUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|tracing
operator|.
name|TracingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This class provides a command line interface to start the SCM  * using Picocli.  */
end_comment

begin_class
annotation|@
name|Command
argument_list|(
name|name
operator|=
literal|"ozone scm"
argument_list|,
name|hidden
operator|=
literal|true
argument_list|,
name|description
operator|=
literal|"Start or initialize the scm server."
argument_list|,
name|versionProvider
operator|=
name|HddsVersionProvider
operator|.
name|class
argument_list|,
name|mixinStandardHelpOptions
operator|=
literal|true
argument_list|)
DECL|class|StorageContainerManagerStarter
specifier|public
class|class
name|StorageContainerManagerStarter
extends|extends
name|GenericCli
block|{
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|receiver
specifier|private
name|SCMStarterInterface
name|receiver
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StorageContainerManagerStarter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|TracingUtil
operator|.
name|initTracing
argument_list|(
literal|"StorageContainerManager"
argument_list|)
expr_stmt|;
operator|new
name|StorageContainerManagerStarter
argument_list|(
operator|new
name|StorageContainerManagerStarter
operator|.
name|SCMStarterHelper
argument_list|()
argument_list|)
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|StorageContainerManagerStarter (SCMStarterInterface receiverObj)
specifier|public
name|StorageContainerManagerStarter
parameter_list|(
name|SCMStarterInterface
name|receiverObj
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|receiver
operator|=
name|receiverObj
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|commonInit
argument_list|()
expr_stmt|;
name|startScm
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**    * This function implements a sub-command to generate a new    * cluster ID from the command line.    */
annotation|@
name|CommandLine
operator|.
name|Command
argument_list|(
name|name
operator|=
literal|"--genclusterid"
argument_list|,
name|customSynopsis
operator|=
literal|"ozone scm [global options] --genclusterid [options]"
argument_list|,
name|hidden
operator|=
literal|false
argument_list|,
name|description
operator|=
literal|"Generate a new Cluster ID"
argument_list|,
name|mixinStandardHelpOptions
operator|=
literal|true
argument_list|,
name|versionProvider
operator|=
name|HddsVersionProvider
operator|.
name|class
argument_list|)
DECL|method|generateClusterId ()
specifier|public
name|void
name|generateClusterId
parameter_list|()
block|{
name|commonInit
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Generating new cluster id:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|receiver
operator|.
name|generateClusterId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This function implements a sub-command to allow the SCM to be    * initialized from the command line.    *    * @param clusterId - Cluster ID to use when initializing. If null,    *                  a random ID will be generated and used.    */
annotation|@
name|CommandLine
operator|.
name|Command
argument_list|(
name|name
operator|=
literal|"--init"
argument_list|,
name|customSynopsis
operator|=
literal|"ozone scm [global options] --init [options]"
argument_list|,
name|hidden
operator|=
literal|false
argument_list|,
name|description
operator|=
literal|"Initialize the SCM if not already initialized"
argument_list|,
name|mixinStandardHelpOptions
operator|=
literal|true
argument_list|,
name|versionProvider
operator|=
name|HddsVersionProvider
operator|.
name|class
argument_list|)
DECL|method|initScm (@ommandLine.Optionnames = { R }, description = R, paramLabel = R) String clusterId)
specifier|public
name|void
name|initScm
parameter_list|(
annotation|@
name|CommandLine
operator|.
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"--clusterid"
block|}
argument_list|,
name|description
operator|=
literal|"Optional: The cluster id to use when formatting SCM"
argument_list|,
name|paramLabel
operator|=
literal|"id"
argument_list|)
name|String
name|clusterId
parameter_list|)
throws|throws
name|Exception
block|{
name|commonInit
argument_list|()
expr_stmt|;
name|boolean
name|result
init|=
name|receiver
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|clusterId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"scm init failed"
argument_list|)
throw|;
block|}
block|}
comment|/**    * This function is used by the command line to start the SCM.    */
DECL|method|startScm ()
specifier|private
name|void
name|startScm
parameter_list|()
throws|throws
name|Exception
block|{
name|receiver
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * This function should be called by each command to ensure the configuration    * is set and print the startup banner message.    */
DECL|method|commonInit ()
specifier|private
name|void
name|commonInit
parameter_list|()
block|{
name|conf
operator|=
name|createOzoneConfiguration
argument_list|()
expr_stmt|;
if|if
condition|(
name|DiscoveryUtil
operator|.
name|loadGlobalConfig
argument_list|(
name|conf
argument_list|)
condition|)
block|{
comment|//reload the configuration with the downloaded new configs.
name|conf
operator|=
name|createOzoneConfiguration
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|originalArgs
init|=
name|getCmd
argument_list|()
operator|.
name|getParseResult
argument_list|()
operator|.
name|originalArgs
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|StorageContainerManager
operator|.
name|class
argument_list|,
name|originalArgs
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
comment|/**    * This static class wraps the external dependencies needed for this command    * to execute its tasks. This allows the dependency to be injected for unit    * testing.    */
DECL|class|SCMStarterHelper
specifier|static
class|class
name|SCMStarterHelper
implements|implements
name|SCMStarterInterface
block|{
DECL|method|start (OzoneConfiguration conf)
specifier|public
name|void
name|start
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|StorageContainerManager
name|stm
init|=
name|StorageContainerManager
operator|.
name|createSCM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|stm
operator|.
name|start
argument_list|()
expr_stmt|;
name|stm
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
DECL|method|init (OzoneConfiguration conf, String clusterId)
specifier|public
name|boolean
name|init
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|String
name|clusterId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|StorageContainerManager
operator|.
name|scmInit
argument_list|(
name|conf
argument_list|,
name|clusterId
argument_list|)
return|;
block|}
DECL|method|generateClusterId ()
specifier|public
name|String
name|generateClusterId
parameter_list|()
block|{
return|return
name|StorageInfo
operator|.
name|newClusterID
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

