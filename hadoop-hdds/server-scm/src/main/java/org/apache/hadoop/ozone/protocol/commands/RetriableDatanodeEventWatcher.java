begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.protocol.commands
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|command
operator|.
name|CommandStatusReportHandler
operator|.
name|CommandStatusEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * EventWatcher for start events and completion events with payload of type  * RetriablePayload and RetriableCompletionPayload respectively.  */
end_comment

begin_class
DECL|class|RetriableDatanodeEventWatcher
specifier|public
class|class
name|RetriableDatanodeEventWatcher
parameter_list|<
name|T
extends|extends
name|CommandStatusEvent
parameter_list|>
extends|extends
name|EventWatcher
argument_list|<
name|CommandForDatanode
argument_list|,
name|T
argument_list|>
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RetriableDatanodeEventWatcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|RetriableDatanodeEventWatcher (Event<CommandForDatanode> startEvent, Event<T> completionEvent, LeaseManager<Long> leaseManager)
specifier|public
name|RetriableDatanodeEventWatcher
parameter_list|(
name|Event
argument_list|<
name|CommandForDatanode
argument_list|>
name|startEvent
parameter_list|,
name|Event
argument_list|<
name|T
argument_list|>
name|completionEvent
parameter_list|,
name|LeaseManager
argument_list|<
name|Long
argument_list|>
name|leaseManager
parameter_list|)
block|{
name|super
argument_list|(
name|startEvent
argument_list|,
name|completionEvent
argument_list|,
name|leaseManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onTimeout (EventPublisher publisher, CommandForDatanode payload)
specifier|protected
name|void
name|onTimeout
parameter_list|(
name|EventPublisher
name|publisher
parameter_list|,
name|CommandForDatanode
name|payload
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"RetriableDatanodeCommand type={} with id={} timed out. Retrying."
argument_list|,
name|payload
operator|.
name|getCommand
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|,
name|payload
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//put back to the original queue
name|publisher
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|RETRIABLE_DATANODE_COMMAND
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFinished (EventPublisher publisher, CommandForDatanode payload)
specifier|protected
name|void
name|onFinished
parameter_list|(
name|EventPublisher
name|publisher
parameter_list|,
name|CommandForDatanode
name|payload
parameter_list|)
block|{    }
block|}
end_class

end_unit

