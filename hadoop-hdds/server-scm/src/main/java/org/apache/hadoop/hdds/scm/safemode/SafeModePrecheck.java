begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.ââSee the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.ââThe ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.ââYou may obtain a copy of the License at  *  * ââââ http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.safemode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|safemode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ScmOps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
operator|.
name|ResultCodes
import|;
end_import

begin_comment
comment|/**  * Safe mode pre-check for SCM operations.  * */
end_comment

begin_class
DECL|class|SafeModePrecheck
specifier|public
class|class
name|SafeModePrecheck
implements|implements
name|Precheck
argument_list|<
name|ScmOps
argument_list|>
block|{
DECL|field|inSafeMode
specifier|private
name|AtomicBoolean
name|inSafeMode
decl_stmt|;
DECL|field|PRECHECK_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|PRECHECK_TYPE
init|=
literal|"SafeModePrecheck"
decl_stmt|;
DECL|method|SafeModePrecheck (Configuration conf)
specifier|public
name|SafeModePrecheck
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|safeModeEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HddsConfigKeys
operator|.
name|HDDS_SCM_SAFEMODE_ENABLED
argument_list|,
name|HddsConfigKeys
operator|.
name|HDDS_SCM_SAFEMODE_ENABLED_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|safeModeEnabled
condition|)
block|{
name|inSafeMode
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inSafeMode
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|check (ScmOps op)
specifier|public
name|boolean
name|check
parameter_list|(
name|ScmOps
name|op
parameter_list|)
throws|throws
name|SCMException
block|{
if|if
condition|(
name|inSafeMode
operator|.
name|get
argument_list|()
operator|&&
name|SafeModeRestrictedOps
operator|.
name|isRestrictedInSafeMode
argument_list|(
name|op
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SCMException
argument_list|(
literal|"SafeModePrecheck failed for "
operator|+
name|op
argument_list|,
name|ResultCodes
operator|.
name|SAFE_MODE_EXCEPTION
argument_list|)
throw|;
block|}
return|return
name|inSafeMode
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|type ()
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|PRECHECK_TYPE
return|;
block|}
DECL|method|isInSafeMode ()
specifier|public
name|boolean
name|isInSafeMode
parameter_list|()
block|{
return|return
name|inSafeMode
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|setInSafeMode (boolean inSafeMode)
specifier|public
name|void
name|setInSafeMode
parameter_list|(
name|boolean
name|inSafeMode
parameter_list|)
block|{
name|this
operator|.
name|inSafeMode
operator|.
name|set
argument_list|(
name|inSafeMode
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

