begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.pipelines
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipelines
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|LifeCycleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|PipelineID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Manage Ozone pipelines.  */
end_comment

begin_class
DECL|class|PipelineManager
specifier|public
specifier|abstract
class|class
name|PipelineManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PipelineManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|activePipelines
specifier|private
specifier|final
name|List
argument_list|<
name|PipelineID
argument_list|>
name|activePipelines
decl_stmt|;
DECL|field|pipelineMap
specifier|private
specifier|final
name|Map
argument_list|<
name|PipelineID
argument_list|,
name|Pipeline
argument_list|>
name|pipelineMap
decl_stmt|;
DECL|field|pipelineIndex
specifier|private
specifier|final
name|AtomicInteger
name|pipelineIndex
decl_stmt|;
DECL|field|node2PipelineMap
specifier|private
specifier|final
name|Node2PipelineMap
name|node2PipelineMap
decl_stmt|;
DECL|method|PipelineManager (Node2PipelineMap map)
specifier|public
name|PipelineManager
parameter_list|(
name|Node2PipelineMap
name|map
parameter_list|)
block|{
name|activePipelines
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
name|pipelineIndex
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pipelineMap
operator|=
operator|new
name|WeakHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|node2PipelineMap
operator|=
name|map
expr_stmt|;
block|}
comment|/**    * This function is called by the Container Manager while allocating a new    * container. The client specifies what kind of replication pipeline is    * needed and based on the replication type in the request appropriate    * Interface is invoked.    *    * @param replicationFactor - Replication Factor    * @return a Pipeline.    */
DECL|method|getPipeline ( ReplicationFactor replicationFactor, ReplicationType replicationType)
specifier|public
specifier|synchronized
specifier|final
name|Pipeline
name|getPipeline
parameter_list|(
name|ReplicationFactor
name|replicationFactor
parameter_list|,
name|ReplicationType
name|replicationType
parameter_list|)
block|{
name|Pipeline
name|pipeline
init|=
name|findOpenPipeline
argument_list|(
name|replicationType
argument_list|,
name|replicationFactor
argument_list|)
decl_stmt|;
if|if
condition|(
name|pipeline
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"re-used pipeline:{} for container with "
operator|+
literal|"replicationType:{} replicationFactor:{}"
argument_list|,
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|,
name|replicationType
argument_list|,
name|replicationFactor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pipeline
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Get pipeline call failed. We are not able to find"
operator|+
literal|" operational pipeline."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|pipeline
return|;
block|}
block|}
comment|/**    * This function to get pipeline with given pipeline name.    *    * @param id    * @return a Pipeline.    */
DECL|method|getPipeline (PipelineID id)
specifier|public
specifier|synchronized
specifier|final
name|Pipeline
name|getPipeline
parameter_list|(
name|PipelineID
name|id
parameter_list|)
block|{
name|Pipeline
name|pipeline
init|=
literal|null
decl_stmt|;
comment|// 1. Check if pipeline already exists
if|if
condition|(
name|pipelineMap
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|pipeline
operator|=
name|pipelineMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Returning pipeline for pipelineName:{}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|pipeline
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unable to find pipeline for pipelineName:{}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|pipeline
return|;
block|}
DECL|method|getReplicationCount (ReplicationFactor factor)
specifier|protected
name|int
name|getReplicationCount
parameter_list|(
name|ReplicationFactor
name|factor
parameter_list|)
block|{
switch|switch
condition|(
name|factor
condition|)
block|{
case|case
name|ONE
case|:
return|return
literal|1
return|;
case|case
name|THREE
case|:
return|return
literal|3
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected replication count"
argument_list|)
throw|;
block|}
block|}
DECL|method|allocatePipeline ( ReplicationFactor replicationFactor)
specifier|public
specifier|abstract
name|Pipeline
name|allocatePipeline
parameter_list|(
name|ReplicationFactor
name|replicationFactor
parameter_list|)
function_decl|;
comment|/**    * Initialize the pipeline.    * TODO: move the initialization to Ozone Client later    */
DECL|method|initializePipeline (Pipeline pipeline)
specifier|public
specifier|abstract
name|void
name|initializePipeline
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Find a Pipeline that is operational.    *    * @return - Pipeline or null    */
DECL|method|findOpenPipeline ( ReplicationType type, ReplicationFactor factor)
specifier|private
name|Pipeline
name|findOpenPipeline
parameter_list|(
name|ReplicationType
name|type
parameter_list|,
name|ReplicationFactor
name|factor
parameter_list|)
block|{
name|Pipeline
name|pipeline
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|sentinal
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|activePipelines
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No Operational pipelines found. Returning null."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|int
name|startIndex
init|=
name|getNextIndex
argument_list|()
decl_stmt|;
name|int
name|nextIndex
init|=
name|sentinal
decl_stmt|;
for|for
control|(
init|;
name|startIndex
operator|!=
name|nextIndex
condition|;
name|nextIndex
operator|=
name|getNextIndex
argument_list|()
control|)
block|{
comment|// Just walk the list in a circular way.
name|PipelineID
name|id
init|=
name|activePipelines
operator|.
name|get
argument_list|(
name|nextIndex
operator|!=
name|sentinal
condition|?
name|nextIndex
else|:
name|startIndex
argument_list|)
decl_stmt|;
name|Pipeline
name|temp
init|=
name|pipelineMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// if we find an operational pipeline just return that.
if|if
condition|(
operator|(
name|temp
operator|.
name|getLifeCycleState
argument_list|()
operator|==
name|LifeCycleState
operator|.
name|OPEN
operator|)
operator|&&
operator|(
name|temp
operator|.
name|getFactor
argument_list|()
operator|==
name|factor
operator|)
operator|&&
operator|(
name|temp
operator|.
name|getType
argument_list|()
operator|==
name|type
operator|)
condition|)
block|{
name|pipeline
operator|=
name|temp
expr_stmt|;
break|break;
block|}
block|}
return|return
name|pipeline
return|;
block|}
comment|/**    * gets the next index of the Pipeline to get.    *    * @return index in the link list to get.    */
DECL|method|getNextIndex ()
specifier|private
name|int
name|getNextIndex
parameter_list|()
block|{
return|return
name|pipelineIndex
operator|.
name|incrementAndGet
argument_list|()
operator|%
name|activePipelines
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Creates a pipeline with a specified replication factor and type.    * @param replicationFactor - Replication Factor.    * @param replicationType - Replication Type.    */
DECL|method|createPipeline (ReplicationFactor replicationFactor, ReplicationType replicationType)
specifier|public
name|Pipeline
name|createPipeline
parameter_list|(
name|ReplicationFactor
name|replicationFactor
parameter_list|,
name|ReplicationType
name|replicationType
parameter_list|)
throws|throws
name|IOException
block|{
name|Pipeline
name|pipeline
init|=
name|allocatePipeline
argument_list|(
name|replicationFactor
argument_list|)
decl_stmt|;
if|if
condition|(
name|pipeline
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"created new pipeline:{} for container with "
operator|+
literal|"replicationType:{} replicationFactor:{}"
argument_list|,
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|,
name|replicationType
argument_list|,
name|replicationFactor
argument_list|)
expr_stmt|;
name|activePipelines
operator|.
name|add
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|pipelineMap
operator|.
name|put
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|,
name|pipeline
argument_list|)
expr_stmt|;
name|node2PipelineMap
operator|.
name|addPipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
block|}
return|return
name|pipeline
return|;
block|}
comment|/**    * Remove the pipeline from active allocation.    * @param pipeline pipeline to be finalized    */
DECL|method|finalizePipeline (Pipeline pipeline)
specifier|public
specifier|synchronized
name|void
name|finalizePipeline
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
block|{
name|activePipelines
operator|.
name|remove
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    *    * @param pipeline    */
DECL|method|closePipeline (Pipeline pipeline)
specifier|public
name|void
name|closePipeline
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
block|{
name|pipelineMap
operator|.
name|remove
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|node2PipelineMap
operator|.
name|removePipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
block|}
comment|/**    * list members in the pipeline.    * @return the datanode    */
DECL|method|getMembers (PipelineID pipelineID)
specifier|public
specifier|abstract
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|getMembers
parameter_list|(
name|PipelineID
name|pipelineID
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Update the datanode list of the pipeline.    */
DECL|method|updatePipeline (PipelineID pipelineID, List<DatanodeDetails> newDatanodes)
specifier|public
specifier|abstract
name|void
name|updatePipeline
parameter_list|(
name|PipelineID
name|pipelineID
parameter_list|,
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|newDatanodes
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

