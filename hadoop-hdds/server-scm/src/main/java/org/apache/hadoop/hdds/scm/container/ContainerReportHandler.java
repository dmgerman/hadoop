begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|replication
operator|.
name|ReplicationActivityStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|replication
operator|.
name|ReplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|states
operator|.
name|Node2ContainerMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|states
operator|.
name|ReportResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeHeartbeatDispatcher
operator|.
name|ContainerReportFromDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Handles container reports from datanode.  */
end_comment

begin_class
DECL|class|ContainerReportHandler
specifier|public
class|class
name|ContainerReportHandler
implements|implements
name|EventHandler
argument_list|<
name|ContainerReportFromDatanode
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerReportHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|node2ContainerMap
specifier|private
specifier|final
name|Node2ContainerMap
name|node2ContainerMap
decl_stmt|;
DECL|field|containerMapping
specifier|private
specifier|final
name|Mapping
name|containerMapping
decl_stmt|;
DECL|field|containerStateManager
specifier|private
name|ContainerStateManager
name|containerStateManager
decl_stmt|;
DECL|field|replicationStatus
specifier|private
name|ReplicationActivityStatus
name|replicationStatus
decl_stmt|;
DECL|method|ContainerReportHandler (Mapping containerMapping, Node2ContainerMap node2ContainerMap, ReplicationActivityStatus replicationActivityStatus)
specifier|public
name|ContainerReportHandler
parameter_list|(
name|Mapping
name|containerMapping
parameter_list|,
name|Node2ContainerMap
name|node2ContainerMap
parameter_list|,
name|ReplicationActivityStatus
name|replicationActivityStatus
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containerMapping
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|node2ContainerMap
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|replicationActivityStatus
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerStateManager
operator|=
name|containerMapping
operator|.
name|getStateManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|containerMapping
operator|=
name|containerMapping
expr_stmt|;
name|this
operator|.
name|node2ContainerMap
operator|=
name|node2ContainerMap
expr_stmt|;
name|this
operator|.
name|replicationStatus
operator|=
name|replicationActivityStatus
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMessage (ContainerReportFromDatanode containerReportFromDatanode, EventPublisher publisher)
specifier|public
name|void
name|onMessage
parameter_list|(
name|ContainerReportFromDatanode
name|containerReportFromDatanode
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
block|{
name|DatanodeDetails
name|datanodeOrigin
init|=
name|containerReportFromDatanode
operator|.
name|getDatanodeDetails
argument_list|()
decl_stmt|;
name|ContainerReportsProto
name|containerReport
init|=
name|containerReportFromDatanode
operator|.
name|getReport
argument_list|()
decl_stmt|;
try|try
block|{
comment|//update state in container db and trigger close container events
name|containerMapping
operator|.
name|processContainerReports
argument_list|(
name|datanodeOrigin
argument_list|,
name|containerReport
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|containerIds
init|=
name|containerReport
operator|.
name|getReportsList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerInfo
operator|::
name|getContainerID
argument_list|)
operator|.
name|map
argument_list|(
name|ContainerID
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|ReportResult
name|reportResult
init|=
name|node2ContainerMap
operator|.
name|processReport
argument_list|(
name|datanodeOrigin
operator|.
name|getUuid
argument_list|()
argument_list|,
name|containerIds
argument_list|)
decl_stmt|;
comment|//we have the report, so we can update the states for the next iteration.
name|node2ContainerMap
operator|.
name|setContainersForDatanode
argument_list|(
name|datanodeOrigin
operator|.
name|getUuid
argument_list|()
argument_list|,
name|containerIds
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerID
name|containerID
range|:
name|reportResult
operator|.
name|getMissingContainers
argument_list|()
control|)
block|{
name|containerStateManager
operator|.
name|removeContainerReplica
argument_list|(
name|containerID
argument_list|,
name|datanodeOrigin
argument_list|)
expr_stmt|;
name|checkReplicationState
argument_list|(
name|containerID
argument_list|,
name|publisher
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ContainerID
name|containerID
range|:
name|reportResult
operator|.
name|getNewContainers
argument_list|()
control|)
block|{
name|containerStateManager
operator|.
name|addContainerReplica
argument_list|(
name|containerID
argument_list|,
name|datanodeOrigin
argument_list|)
expr_stmt|;
name|checkReplicationState
argument_list|(
name|containerID
argument_list|,
name|publisher
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//TODO: stop all the replication?
name|LOG
operator|.
name|error
argument_list|(
literal|"Error on processing container report from datanode {}"
argument_list|,
name|datanodeOrigin
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkReplicationState (ContainerID containerID, EventPublisher publisher)
specifier|private
name|void
name|checkReplicationState
parameter_list|(
name|ContainerID
name|containerID
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
throws|throws
name|SCMException
block|{
name|ContainerInfo
name|container
init|=
name|containerStateManager
operator|.
name|getContainer
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
comment|//warning unknown container
name|LOG
operator|.
name|warn
argument_list|(
literal|"Container is missing from containerStateManager. Can't request "
operator|+
literal|"replication. {}"
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|container
operator|.
name|isContainerOpen
argument_list|()
condition|)
block|{
return|return;
block|}
name|ReplicationRequest
name|replicationState
init|=
name|containerStateManager
operator|.
name|checkReplicationState
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicationState
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|replicationStatus
operator|.
name|isReplicationEnabled
argument_list|()
condition|)
block|{
name|publisher
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|REPLICATE_CONTAINER
argument_list|,
name|replicationState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Over/under replicated container but the replication is not "
operator|+
literal|"(yet) enabled: "
operator|+
name|replicationState
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

