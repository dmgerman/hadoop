begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.events
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeHeartbeatDispatcher
operator|.
name|ContainerReportFromDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeHeartbeatDispatcher
operator|.
name|NodeReportFromDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|TypedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|CommandForDatanode
import|;
end_import

begin_comment
comment|/**  * Class that acts as the namespace for all SCM Events.  */
end_comment

begin_class
DECL|class|SCMEvents
specifier|public
specifier|final
class|class
name|SCMEvents
block|{
comment|/**    * NodeReports are  sent out by Datanodes. This report is    * received by SCMDatanodeHeartbeatDispatcher and NodeReport Event is    * generated.    */
DECL|field|NODE_REPORT
specifier|public
specifier|static
specifier|final
name|TypedEvent
argument_list|<
name|NodeReportFromDatanode
argument_list|>
name|NODE_REPORT
init|=
operator|new
name|TypedEvent
argument_list|<>
argument_list|(
name|NodeReportFromDatanode
operator|.
name|class
argument_list|,
literal|"Node_Report"
argument_list|)
decl_stmt|;
comment|/**    * ContainerReports are send out by Datanodes. This report    * is received by SCMDatanodeHeartbeatDispatcher and Container_Report Event    * i generated.    */
DECL|field|CONTAINER_REPORT
specifier|public
specifier|static
specifier|final
name|TypedEvent
argument_list|<
name|ContainerReportFromDatanode
argument_list|>
name|CONTAINER_REPORT
init|=
operator|new
name|TypedEvent
argument_list|<>
argument_list|(
name|ContainerReportFromDatanode
operator|.
name|class
argument_list|,
literal|"Container_Report"
argument_list|)
decl_stmt|;
comment|/**    * When ever a command for the Datanode needs to be issued by any component    * inside SCM, a Datanode_Command event is generated. NodeManager listens    * to these events and dispatches them to Datanode for further processing.    */
DECL|field|DATANODE_COMMAND
specifier|public
specifier|static
specifier|final
name|Event
argument_list|<
name|CommandForDatanode
argument_list|>
name|DATANODE_COMMAND
init|=
operator|new
name|TypedEvent
argument_list|<>
argument_list|(
name|CommandForDatanode
operator|.
name|class
argument_list|,
literal|"Datanode_Command"
argument_list|)
decl_stmt|;
comment|/**    * A Close Container Event can be triggered under many condition.    * Some of them are:    *    1. A Container is full, then we stop writing further information to    *    that container. DN's let SCM know that current state and sends a    *    informational message that allows SCM to close the container.    *    *    2. If a pipeline is open; for example Ratis; if a single node fails,    *    we will proactively close these containers.    *    *  Once a command is dispatched to DN, we will also listen to updates from    *  the datanode which lets us know that this command completed or timed out.    */
DECL|field|CLOSE_CONTAINER
specifier|public
specifier|static
specifier|final
name|TypedEvent
argument_list|<
name|ContainerID
argument_list|>
name|CLOSE_CONTAINER
init|=
operator|new
name|TypedEvent
argument_list|<>
argument_list|(
name|ContainerID
operator|.
name|class
argument_list|,
literal|"Close_Container"
argument_list|)
decl_stmt|;
comment|/**    * This event will be triggered whenever a new datanode is    * registered with SCM.    */
DECL|field|NEW_NODE
specifier|public
specifier|static
specifier|final
name|TypedEvent
argument_list|<
name|DatanodeDetails
argument_list|>
name|NEW_NODE
init|=
operator|new
name|TypedEvent
argument_list|<>
argument_list|(
name|DatanodeDetails
operator|.
name|class
argument_list|,
literal|"New_Node"
argument_list|)
decl_stmt|;
comment|/**    * This event will be triggered whenever a datanode is moved from healthy to    * stale state.    */
DECL|field|STALE_NODE
specifier|public
specifier|static
specifier|final
name|TypedEvent
argument_list|<
name|DatanodeDetails
argument_list|>
name|STALE_NODE
init|=
operator|new
name|TypedEvent
argument_list|<>
argument_list|(
name|DatanodeDetails
operator|.
name|class
argument_list|,
literal|"Stale_Node"
argument_list|)
decl_stmt|;
comment|/**    * This event will be triggered whenever a datanode is moved from stale to    * dead state.    */
DECL|field|DEAD_NODE
specifier|public
specifier|static
specifier|final
name|TypedEvent
argument_list|<
name|DatanodeDetails
argument_list|>
name|DEAD_NODE
init|=
operator|new
name|TypedEvent
argument_list|<>
argument_list|(
name|DatanodeDetails
operator|.
name|class
argument_list|,
literal|"Dead_Node"
argument_list|)
decl_stmt|;
comment|/**    * Private Ctor. Never Constructed.    */
DECL|method|SCMEvents ()
specifier|private
name|SCMEvents
parameter_list|()
block|{   }
block|}
end_class

end_unit

