begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.node.states
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|states
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * This data structure maintains the list of pipelines which the given  * datanode is a part of. This information will be added whenever a new  * pipeline allocation happens.  *  *<p>TODO: this information needs to be regenerated from pipeline reports  * on SCM restart  */
end_comment

begin_class
DECL|class|Node2PipelineMap
specifier|public
class|class
name|Node2PipelineMap
extends|extends
name|Node2ObjectsMap
argument_list|<
name|PipelineID
argument_list|>
block|{
comment|/** Constructs a Node2PipelineMap Object. */
DECL|method|Node2PipelineMap ()
specifier|public
name|Node2PipelineMap
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns null if there no pipelines associated with this datanode ID.    *    * @param datanode - UUID    * @return Set of pipelines or Null.    */
DECL|method|getPipelines (UUID datanode)
specifier|public
name|Set
argument_list|<
name|PipelineID
argument_list|>
name|getPipelines
parameter_list|(
name|UUID
name|datanode
parameter_list|)
block|{
return|return
name|getObjects
argument_list|(
name|datanode
argument_list|)
return|;
block|}
comment|/**    * Adds a pipeline entry to a given dataNode in the map.    *    * @param pipeline Pipeline to be added    */
DECL|method|addPipeline (Pipeline pipeline)
specifier|public
specifier|synchronized
name|void
name|addPipeline
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
block|{
for|for
control|(
name|DatanodeDetails
name|details
range|:
name|pipeline
operator|.
name|getNodes
argument_list|()
control|)
block|{
name|UUID
name|dnId
init|=
name|details
operator|.
name|getUuid
argument_list|()
decl_stmt|;
name|dn2ObjectMap
operator|.
name|computeIfAbsent
argument_list|(
name|dnId
argument_list|,
name|k
lambda|->
name|ConcurrentHashMap
operator|.
name|newKeySet
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removePipeline (Pipeline pipeline)
specifier|public
specifier|synchronized
name|void
name|removePipeline
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
block|{
for|for
control|(
name|DatanodeDetails
name|details
range|:
name|pipeline
operator|.
name|getNodes
argument_list|()
control|)
block|{
name|UUID
name|dnId
init|=
name|details
operator|.
name|getUuid
argument_list|()
decl_stmt|;
name|dn2ObjectMap
operator|.
name|computeIfPresent
argument_list|(
name|dnId
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|v
operator|.
name|remove
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

