begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.ââSee the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.ââThe ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.ââYou may obtain a copy of the License at  *  * ââââ http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.safemode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|safemode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterLong
import|;
end_import

begin_comment
comment|/**  * This class is used for maintaining SafeMode metric information, which can  * be used for monitoring during SCM startup when SCM is still in SafeMode.  */
end_comment

begin_class
DECL|class|SafeModeMetrics
specifier|public
class|class
name|SafeModeMetrics
block|{
DECL|field|SOURCE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SOURCE_NAME
init|=
name|SafeModeMetrics
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
comment|// These all values will be set to some values when safemode is enabled.
specifier|private
annotation|@
name|Metric
name|MutableCounterLong
DECL|field|numContainerWithOneReplicaReportedThreshold
name|numContainerWithOneReplicaReportedThreshold
decl_stmt|;
specifier|private
annotation|@
name|Metric
name|MutableCounterLong
DECL|field|currentContainersWithOneReplicaReportedCount
name|currentContainersWithOneReplicaReportedCount
decl_stmt|;
comment|// When hdds.scm.safemode.pipeline-availability.check is set then only
comment|// below metrics will have some values, otherwise they will be zero.
DECL|field|numHealthyPipelinesThreshold
specifier|private
annotation|@
name|Metric
name|MutableCounterLong
name|numHealthyPipelinesThreshold
decl_stmt|;
DECL|field|currentHealthyPipelinesCount
specifier|private
annotation|@
name|Metric
name|MutableCounterLong
name|currentHealthyPipelinesCount
decl_stmt|;
specifier|private
annotation|@
name|Metric
name|MutableCounterLong
DECL|field|numPipelinesWithAtleastOneReplicaReportedThreshold
name|numPipelinesWithAtleastOneReplicaReportedThreshold
decl_stmt|;
specifier|private
annotation|@
name|Metric
name|MutableCounterLong
DECL|field|currentPipelinesWithAtleastOneReplicaReportedCount
name|currentPipelinesWithAtleastOneReplicaReportedCount
decl_stmt|;
DECL|method|create ()
specifier|public
specifier|static
name|SafeModeMetrics
name|create
parameter_list|()
block|{
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
return|return
name|ms
operator|.
name|register
argument_list|(
name|SOURCE_NAME
argument_list|,
literal|"SCM Safemode Metrics"
argument_list|,
operator|new
name|SafeModeMetrics
argument_list|()
argument_list|)
return|;
block|}
DECL|method|setNumHealthyPipelinesThreshold (long val)
specifier|public
name|void
name|setNumHealthyPipelinesThreshold
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|this
operator|.
name|numHealthyPipelinesThreshold
operator|.
name|incr
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
DECL|method|incCurrentHealthyPipelinesCount ()
specifier|public
name|void
name|incCurrentHealthyPipelinesCount
parameter_list|()
block|{
name|this
operator|.
name|currentHealthyPipelinesCount
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
DECL|method|setNumPipelinesWithAtleastOneReplicaReportedThreshold (long val)
specifier|public
name|void
name|setNumPipelinesWithAtleastOneReplicaReportedThreshold
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|this
operator|.
name|numPipelinesWithAtleastOneReplicaReportedThreshold
operator|.
name|incr
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
DECL|method|incCurrentHealthyPipelinesWithAtleastOneReplicaReportedCount ()
specifier|public
name|void
name|incCurrentHealthyPipelinesWithAtleastOneReplicaReportedCount
parameter_list|()
block|{
name|this
operator|.
name|currentPipelinesWithAtleastOneReplicaReportedCount
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
DECL|method|setNumContainerWithOneReplicaReportedThreshold (long val)
specifier|public
name|void
name|setNumContainerWithOneReplicaReportedThreshold
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|this
operator|.
name|numContainerWithOneReplicaReportedThreshold
operator|.
name|incr
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
DECL|method|incCurrentContainersWithOneReplicaReportedCount ()
specifier|public
name|void
name|incCurrentContainersWithOneReplicaReportedCount
parameter_list|()
block|{
name|this
operator|.
name|currentContainersWithOneReplicaReportedCount
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
DECL|method|getNumHealthyPipelinesThreshold ()
specifier|public
name|MutableCounterLong
name|getNumHealthyPipelinesThreshold
parameter_list|()
block|{
return|return
name|numHealthyPipelinesThreshold
return|;
block|}
DECL|method|getCurrentHealthyPipelinesCount ()
specifier|public
name|MutableCounterLong
name|getCurrentHealthyPipelinesCount
parameter_list|()
block|{
return|return
name|currentHealthyPipelinesCount
return|;
block|}
specifier|public
name|MutableCounterLong
DECL|method|getNumPipelinesWithAtleastOneReplicaReportedThreshold ()
name|getNumPipelinesWithAtleastOneReplicaReportedThreshold
parameter_list|()
block|{
return|return
name|numPipelinesWithAtleastOneReplicaReportedThreshold
return|;
block|}
DECL|method|getCurrentPipelinesWithAtleastOneReplicaCount ()
specifier|public
name|MutableCounterLong
name|getCurrentPipelinesWithAtleastOneReplicaCount
parameter_list|()
block|{
return|return
name|currentPipelinesWithAtleastOneReplicaReportedCount
return|;
block|}
DECL|method|getNumContainerWithOneReplicaReportedThreshold ()
specifier|public
name|MutableCounterLong
name|getNumContainerWithOneReplicaReportedThreshold
parameter_list|()
block|{
return|return
name|numContainerWithOneReplicaReportedThreshold
return|;
block|}
DECL|method|getCurrentContainersWithOneReplicaReportedCount ()
specifier|public
name|MutableCounterLong
name|getCurrentContainersWithOneReplicaReportedCount
parameter_list|()
block|{
return|return
name|currentContainersWithOneReplicaReportedCount
return|;
block|}
DECL|method|unRegister ()
specifier|public
name|void
name|unRegister
parameter_list|()
block|{
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
name|ms
operator|.
name|unregisterSource
argument_list|(
name|SOURCE_NAME
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

