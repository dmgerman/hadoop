begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container.replication
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|LifeCycleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerReplica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|DeleteContainerCommandWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
operator|.
name|ContainerPlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|IdentifiableEventPayload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|CommandForDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|DeleteContainerCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|ReplicateContainerCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
operator|.
name|TRACK_DELETE_CONTAINER_COMMAND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
operator|.
name|TRACK_REPLICATE_COMMAND
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Replication Manager manages the replication of the closed container.  */
end_comment

begin_class
DECL|class|ReplicationManager
specifier|public
class|class
name|ReplicationManager
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplicationManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|replicationQueue
specifier|private
name|ReplicationQueue
name|replicationQueue
decl_stmt|;
DECL|field|containerPlacement
specifier|private
name|ContainerPlacementPolicy
name|containerPlacement
decl_stmt|;
DECL|field|eventPublisher
specifier|private
name|EventPublisher
name|eventPublisher
decl_stmt|;
DECL|field|replicationCommandWatcher
specifier|private
name|ReplicationCommandWatcher
name|replicationCommandWatcher
decl_stmt|;
DECL|field|deleteContainerCommandWatcher
specifier|private
name|DeleteContainerCommandWatcher
name|deleteContainerCommandWatcher
decl_stmt|;
DECL|field|running
specifier|private
name|boolean
name|running
init|=
literal|true
decl_stmt|;
DECL|field|containerManager
specifier|private
name|ContainerManager
name|containerManager
decl_stmt|;
DECL|method|ReplicationManager (ContainerPlacementPolicy containerPlacement, ContainerManager containerManager, EventQueue eventQueue, LeaseManager<Long> commandWatcherLeaseManager)
specifier|public
name|ReplicationManager
parameter_list|(
name|ContainerPlacementPolicy
name|containerPlacement
parameter_list|,
name|ContainerManager
name|containerManager
parameter_list|,
name|EventQueue
name|eventQueue
parameter_list|,
name|LeaseManager
argument_list|<
name|Long
argument_list|>
name|commandWatcherLeaseManager
parameter_list|)
block|{
name|this
operator|.
name|containerPlacement
operator|=
name|containerPlacement
expr_stmt|;
name|this
operator|.
name|containerManager
operator|=
name|containerManager
expr_stmt|;
name|this
operator|.
name|eventPublisher
operator|=
name|eventQueue
expr_stmt|;
name|this
operator|.
name|replicationCommandWatcher
operator|=
operator|new
name|ReplicationCommandWatcher
argument_list|(
name|TRACK_REPLICATE_COMMAND
argument_list|,
name|SCMEvents
operator|.
name|REPLICATION_COMPLETE
argument_list|,
name|commandWatcherLeaseManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|deleteContainerCommandWatcher
operator|=
operator|new
name|DeleteContainerCommandWatcher
argument_list|(
name|TRACK_DELETE_CONTAINER_COMMAND
argument_list|,
name|SCMEvents
operator|.
name|DELETE_CONTAINER_COMMAND_COMPLETE
argument_list|,
name|commandWatcherLeaseManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationQueue
operator|=
operator|new
name|ReplicationQueue
argument_list|()
expr_stmt|;
name|eventQueue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|REPLICATE_CONTAINER
argument_list|,
parameter_list|(
name|replicationRequest
parameter_list|,
name|publisher
parameter_list|)
lambda|->
name|replicationQueue
operator|.
name|add
argument_list|(
name|replicationRequest
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationCommandWatcher
operator|.
name|start
argument_list|(
name|eventQueue
argument_list|)
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|ThreadFactory
name|threadFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"Replication Manager"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|threadFactory
operator|.
name|newThread
argument_list|(
name|this
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|running
condition|)
block|{
name|ReplicationRequest
name|request
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//TODO: add throttling here
name|request
operator|=
name|replicationQueue
operator|.
name|take
argument_list|()
expr_stmt|;
name|ContainerID
name|containerID
init|=
operator|new
name|ContainerID
argument_list|(
name|request
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerInfo
name|container
init|=
name|containerManager
operator|.
name|getContainer
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
specifier|final
name|HddsProtos
operator|.
name|LifeCycleState
name|state
init|=
name|container
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|!=
name|LifeCycleState
operator|.
name|CLOSED
operator|&&
name|state
operator|!=
name|LifeCycleState
operator|.
name|QUASI_CLOSED
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot replicate the container {} when in {} state."
argument_list|,
name|containerID
argument_list|,
name|state
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|//check the current replication
name|List
argument_list|<
name|ContainerReplica
argument_list|>
name|containerReplicas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getCurrentReplicas
argument_list|(
name|request
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerReplicas
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Container {} should be replicated but can't find any existing "
operator|+
literal|"replicas"
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|ReplicationRequest
name|finalRequest
init|=
name|request
decl_stmt|;
name|int
name|inFlightReplications
init|=
name|replicationCommandWatcher
operator|.
name|getTimeoutEvents
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getRequest
argument_list|()
operator|.
name|getContainerId
argument_list|()
operator|==
name|finalRequest
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|inFlightDelete
init|=
name|deleteContainerCommandWatcher
operator|.
name|getTimeoutEvents
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getRequest
argument_list|()
operator|.
name|getContainerId
argument_list|()
operator|==
name|finalRequest
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|deficit
init|=
operator|(
name|request
operator|.
name|getExpecReplicationCount
argument_list|()
operator|-
name|containerReplicas
operator|.
name|size
argument_list|()
operator|)
operator|-
operator|(
name|inFlightReplications
operator|-
name|inFlightDelete
operator|)
decl_stmt|;
if|if
condition|(
name|deficit
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodes
init|=
name|containerReplicas
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
parameter_list|(
name|r1
parameter_list|,
name|r2
parameter_list|)
lambda|->
name|r2
operator|.
name|getSequenceId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r1
operator|.
name|getSequenceId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|ContainerReplica
operator|::
name|getDatanodeDetails
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|selectedDatanodes
init|=
name|containerPlacement
operator|.
name|chooseDatanodes
argument_list|(
name|datanodes
argument_list|,
name|deficit
argument_list|,
name|container
operator|.
name|getUsedBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|//send the command
for|for
control|(
name|DatanodeDetails
name|datanode
range|:
name|selectedDatanodes
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container {} is under replicated."
operator|+
literal|" Expected replica count is {}, but found {}."
operator|+
literal|" Re-replicating it on {}."
argument_list|,
name|container
operator|.
name|containerID
argument_list|()
argument_list|,
name|request
operator|.
name|getExpecReplicationCount
argument_list|()
argument_list|,
name|containerReplicas
operator|.
name|size
argument_list|()
argument_list|,
name|datanode
argument_list|)
expr_stmt|;
name|ReplicateContainerCommand
name|replicateCommand
init|=
operator|new
name|ReplicateContainerCommand
argument_list|(
name|containerID
operator|.
name|getId
argument_list|()
argument_list|,
name|datanodes
argument_list|)
decl_stmt|;
name|eventPublisher
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|DATANODE_COMMAND
argument_list|,
operator|new
name|CommandForDatanode
argument_list|<>
argument_list|(
name|datanode
operator|.
name|getUuid
argument_list|()
argument_list|,
name|replicateCommand
argument_list|)
argument_list|)
expr_stmt|;
name|ReplicationRequestToRepeat
name|timeoutEvent
init|=
operator|new
name|ReplicationRequestToRepeat
argument_list|(
name|replicateCommand
operator|.
name|getId
argument_list|()
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|eventPublisher
operator|.
name|fireEvent
argument_list|(
name|TRACK_REPLICATE_COMMAND
argument_list|,
name|timeoutEvent
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|deficit
operator|<
literal|0
condition|)
block|{
name|int
name|numberOfReplicasToDelete
init|=
name|Math
operator|.
name|abs
argument_list|(
name|deficit
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
argument_list|>
name|originIdToDnMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|containerReplicas
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|ContainerReplica
operator|::
name|getSequenceId
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|replica
lambda|->
block|{
name|originIdToDnMap
operator|.
name|computeIfAbsent
argument_list|(
name|replica
operator|.
name|getOriginDatanodeId
argument_list|()
argument_list|,
name|key
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|originIdToDnMap
operator|.
name|get
argument_list|(
name|replica
operator|.
name|getOriginDatanodeId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|replica
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|UUID
name|originId
range|:
name|originIdToDnMap
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|listOfReplica
init|=
name|originIdToDnMap
operator|.
name|get
argument_list|(
name|originId
argument_list|)
decl_stmt|;
if|if
condition|(
name|listOfReplica
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
specifier|final
name|int
name|toDelete
init|=
name|Math
operator|.
name|min
argument_list|(
name|listOfReplica
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|numberOfReplicasToDelete
argument_list|)
decl_stmt|;
specifier|final
name|DeleteContainerCommand
name|deleteContainer
init|=
operator|new
name|DeleteContainerCommand
argument_list|(
name|containerID
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toDelete
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container {} is over replicated."
operator|+
literal|" Expected replica count is {}, but found {}."
operator|+
literal|" Deleting the replica on {}."
argument_list|,
name|container
operator|.
name|containerID
argument_list|()
argument_list|,
name|request
operator|.
name|getExpecReplicationCount
argument_list|()
argument_list|,
name|containerReplicas
operator|.
name|size
argument_list|()
argument_list|,
name|listOfReplica
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|eventPublisher
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|DATANODE_COMMAND
argument_list|,
operator|new
name|CommandForDatanode
argument_list|<>
argument_list|(
name|listOfReplica
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getUuid
argument_list|()
argument_list|,
name|deleteContainer
argument_list|)
argument_list|)
expr_stmt|;
name|DeletionRequestToRepeat
name|timeoutEvent
init|=
operator|new
name|DeletionRequestToRepeat
argument_list|(
name|deleteContainer
operator|.
name|getId
argument_list|()
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|eventPublisher
operator|.
name|fireEvent
argument_list|(
name|TRACK_DELETE_CONTAINER_COMMAND
argument_list|,
name|timeoutEvent
argument_list|)
expr_stmt|;
block|}
name|numberOfReplicasToDelete
operator|-=
name|toDelete
expr_stmt|;
block|}
if|if
condition|(
name|numberOfReplicasToDelete
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|numberOfReplicasToDelete
operator|!=
literal|0
condition|)
block|{
specifier|final
name|int
name|expectedReplicaCount
init|=
name|container
operator|.
name|getReplicationFactor
argument_list|()
operator|.
name|getNumber
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not able to delete the container replica of Container"
operator|+
literal|" {} even though it is over replicated. Expected replica"
operator|+
literal|" count is {}, current replica count is {}."
argument_list|,
name|containerID
argument_list|,
name|expectedReplicaCount
argument_list|,
name|expectedReplicaCount
operator|+
name|numberOfReplicasToDelete
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't replicate container {}"
argument_list|,
name|request
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCurrentReplicas (ReplicationRequest request)
specifier|protected
name|Set
argument_list|<
name|ContainerReplica
argument_list|>
name|getCurrentReplicas
parameter_list|(
name|ReplicationRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|containerManager
operator|.
name|getContainerReplicas
argument_list|(
operator|new
name|ContainerID
argument_list|(
name|request
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getReplicationQueue ()
specifier|public
name|ReplicationQueue
name|getReplicationQueue
parameter_list|()
block|{
return|return
name|replicationQueue
return|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|running
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Event for the ReplicationCommandWatcher to repeat the embedded request.    * in case fof timeout.    */
DECL|class|ReplicationRequestToRepeat
specifier|public
specifier|static
class|class
name|ReplicationRequestToRepeat
extends|extends
name|ContainerRequestToRepeat
block|{
DECL|method|ReplicationRequestToRepeat ( long commandId, ReplicationRequest request)
specifier|public
name|ReplicationRequestToRepeat
parameter_list|(
name|long
name|commandId
parameter_list|,
name|ReplicationRequest
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|commandId
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Event for the DeleteContainerCommandWatcher to repeat the    * embedded request. In case fof timeout.    */
DECL|class|DeletionRequestToRepeat
specifier|public
specifier|static
class|class
name|DeletionRequestToRepeat
extends|extends
name|ContainerRequestToRepeat
block|{
DECL|method|DeletionRequestToRepeat ( long commandId, ReplicationRequest request)
specifier|public
name|DeletionRequestToRepeat
parameter_list|(
name|long
name|commandId
parameter_list|,
name|ReplicationRequest
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|commandId
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Container Request wrapper which will be used by ReplicationManager to    * perform the intended operation.    */
DECL|class|ContainerRequestToRepeat
specifier|public
specifier|static
class|class
name|ContainerRequestToRepeat
implements|implements
name|IdentifiableEventPayload
block|{
DECL|field|commandId
specifier|private
specifier|final
name|long
name|commandId
decl_stmt|;
DECL|field|request
specifier|private
specifier|final
name|ReplicationRequest
name|request
decl_stmt|;
DECL|method|ContainerRequestToRepeat (long commandId, ReplicationRequest request)
name|ContainerRequestToRepeat
parameter_list|(
name|long
name|commandId
parameter_list|,
name|ReplicationRequest
name|request
parameter_list|)
block|{
name|this
operator|.
name|commandId
operator|=
name|commandId
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
DECL|method|getRequest ()
specifier|public
name|ReplicationRequest
name|getRequest
parameter_list|()
block|{
return|return
name|request
return|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|commandId
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ContainerRequestToRepeat
name|that
init|=
operator|(
name|ContainerRequestToRepeat
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|request
argument_list|,
name|that
operator|.
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
comment|/**    * Event which indicates that the replicate operation is completed.    */
DECL|class|ReplicationCompleted
specifier|public
specifier|static
class|class
name|ReplicationCompleted
implements|implements
name|IdentifiableEventPayload
block|{
DECL|field|uuid
specifier|private
specifier|final
name|long
name|uuid
decl_stmt|;
DECL|method|ReplicationCompleted (long uuid)
specifier|public
name|ReplicationCompleted
parameter_list|(
name|long
name|uuid
parameter_list|)
block|{
name|this
operator|.
name|uuid
operator|=
name|uuid
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|uuid
return|;
block|}
block|}
comment|/**    * Event which indicates that the container deletion operation is completed.    */
DECL|class|DeleteContainerCommandCompleted
specifier|public
specifier|static
class|class
name|DeleteContainerCommandCompleted
implements|implements
name|IdentifiableEventPayload
block|{
DECL|field|uuid
specifier|private
specifier|final
name|long
name|uuid
decl_stmt|;
DECL|method|DeleteContainerCommandCompleted (long uuid)
specifier|public
name|DeleteContainerCommandCompleted
parameter_list|(
name|long
name|uuid
parameter_list|)
block|{
name|this
operator|.
name|uuid
operator|=
name|uuid
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|uuid
return|;
block|}
block|}
block|}
end_class

end_unit

