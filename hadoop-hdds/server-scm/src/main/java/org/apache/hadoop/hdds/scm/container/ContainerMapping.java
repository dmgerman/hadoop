begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  *<p>http://www.apache.org/licenses/LICENSE-2.0  *<p>  *<p>Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|closer
operator|.
name|ContainerCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|replication
operator|.
name|ContainerSupervisor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipelines
operator|.
name|PipelineSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|Lease
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|LeaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_SIZE_GB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
operator|.
name|ResultCodes
operator|.
name|FAILED_TO_CHANGE_CONTAINER_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|ServerUtils
operator|.
name|getOzoneMetaDirPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|SCM_CONTAINER_DB
import|;
end_import

begin_comment
comment|/**  * Mapping class contains the mapping from a name to a pipeline mapping. This  * is used by SCM when  * allocating new locations and when looking up a key.  */
end_comment

begin_class
DECL|class|ContainerMapping
specifier|public
class|class
name|ContainerMapping
implements|implements
name|Mapping
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerMapping
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nodeManager
specifier|private
specifier|final
name|NodeManager
name|nodeManager
decl_stmt|;
DECL|field|cacheSize
specifier|private
specifier|final
name|long
name|cacheSize
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Lock
name|lock
decl_stmt|;
DECL|field|encoding
specifier|private
specifier|final
name|Charset
name|encoding
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
DECL|field|containerStore
specifier|private
specifier|final
name|MetadataStore
name|containerStore
decl_stmt|;
DECL|field|pipelineSelector
specifier|private
specifier|final
name|PipelineSelector
name|pipelineSelector
decl_stmt|;
DECL|field|containerStateManager
specifier|private
specifier|final
name|ContainerStateManager
name|containerStateManager
decl_stmt|;
DECL|field|containerLeaseManager
specifier|private
specifier|final
name|LeaseManager
argument_list|<
name|ContainerInfo
argument_list|>
name|containerLeaseManager
decl_stmt|;
DECL|field|containerSupervisor
specifier|private
specifier|final
name|ContainerSupervisor
name|containerSupervisor
decl_stmt|;
DECL|field|containerCloseThreshold
specifier|private
specifier|final
name|float
name|containerCloseThreshold
decl_stmt|;
DECL|field|closer
specifier|private
specifier|final
name|ContainerCloser
name|closer
decl_stmt|;
DECL|field|size
specifier|private
specifier|final
name|long
name|size
decl_stmt|;
comment|/**    * Constructs a mapping class that creates mapping between container names    * and pipelines.    *    * @param nodeManager - NodeManager so that we can get the nodes that are    * healthy to place new    * containers.    * @param cacheSizeMB - Amount of memory reserved for the LSM tree to cache    * its nodes. This is    * passed to LevelDB and this memory is allocated in Native code space.    * CacheSize is specified    * in MB.    * @throws IOException on Failure.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|ContainerMapping ( final Configuration conf, final NodeManager nodeManager, final int cacheSizeMB)
specifier|public
name|ContainerMapping
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|NodeManager
name|nodeManager
parameter_list|,
specifier|final
name|int
name|cacheSizeMB
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|nodeManager
operator|=
name|nodeManager
expr_stmt|;
name|this
operator|.
name|cacheSize
operator|=
name|cacheSizeMB
expr_stmt|;
name|this
operator|.
name|closer
operator|=
operator|new
name|ContainerCloser
argument_list|(
name|nodeManager
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|File
name|metaDir
init|=
name|getOzoneMetaDirPath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Write the container name to pipeline mapping.
name|File
name|containerDBPath
init|=
operator|new
name|File
argument_list|(
name|metaDir
argument_list|,
name|SCM_CONTAINER_DB
argument_list|)
decl_stmt|;
name|containerStore
operator|=
name|MetadataStoreBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setDbFile
argument_list|(
name|containerDBPath
argument_list|)
operator|.
name|setCacheSize
argument_list|(
name|this
operator|.
name|cacheSize
operator|*
name|OzoneConsts
operator|.
name|MB
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|lock
operator|=
operator|new
name|ReentrantLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|pipelineSelector
operator|=
operator|new
name|PipelineSelector
argument_list|(
name|nodeManager
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// To be replaced with code getStorageSize once it is committed.
name|size
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|OZONE_SCM_CONTAINER_SIZE_GB
argument_list|,
name|OZONE_SCM_CONTAINER_SIZE_DEFAULT
argument_list|)
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
name|this
operator|.
name|containerStateManager
operator|=
operator|new
name|ContainerStateManager
argument_list|(
name|conf
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerSupervisor
operator|=
operator|new
name|ContainerSupervisor
argument_list|(
name|conf
argument_list|,
name|nodeManager
argument_list|,
name|nodeManager
operator|.
name|getNodePoolManager
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerCloseThreshold
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_CLOSE_THRESHOLD
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_CLOSE_THRESHOLD_DEFAULT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Container State Manager created."
argument_list|)
expr_stmt|;
name|long
name|containerCreationLeaseTimeout
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_CREATION_LEASE_TIMEOUT
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_CREATION_LEASE_TIMEOUT_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Starting Container Lease Manager."
argument_list|)
expr_stmt|;
name|containerLeaseManager
operator|=
operator|new
name|LeaseManager
argument_list|<>
argument_list|(
name|containerCreationLeaseTimeout
argument_list|)
expr_stmt|;
name|containerLeaseManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|getContainer (final long containerID)
specifier|public
name|ContainerInfo
name|getContainer
parameter_list|(
specifier|final
name|long
name|containerID
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerInfo
name|containerInfo
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|containerBytes
init|=
name|containerStore
operator|.
name|get
argument_list|(
name|Longs
operator|.
name|toByteArray
argument_list|(
name|containerID
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerBytes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SCMException
argument_list|(
literal|"Specified key does not exist. key : "
operator|+
name|containerID
argument_list|,
name|SCMException
operator|.
name|ResultCodes
operator|.
name|FAILED_TO_FIND_CONTAINER
argument_list|)
throw|;
block|}
name|HddsProtos
operator|.
name|SCMContainerInfo
name|temp
init|=
name|HddsProtos
operator|.
name|SCMContainerInfo
operator|.
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|containerBytes
argument_list|)
decl_stmt|;
name|containerInfo
operator|=
name|ContainerInfo
operator|.
name|fromProtobuf
argument_list|(
name|temp
argument_list|)
expr_stmt|;
return|return
name|containerInfo
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|listContainer (long startContainerID, int count)
specifier|public
name|List
argument_list|<
name|ContainerInfo
argument_list|>
name|listContainer
parameter_list|(
name|long
name|startContainerID
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ContainerInfo
argument_list|>
name|containerList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|containerStore
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No container exists in current db"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|startKey
init|=
name|startContainerID
operator|<=
literal|0
condition|?
literal|null
else|:
name|Longs
operator|.
name|toByteArray
argument_list|(
name|startContainerID
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|range
init|=
name|containerStore
operator|.
name|getSequentialRangeKVs
argument_list|(
name|startKey
argument_list|,
name|count
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Transform the values into the pipelines.
comment|// TODO: filter by container state
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|range
control|)
block|{
name|ContainerInfo
name|containerInfo
init|=
name|ContainerInfo
operator|.
name|fromProtobuf
argument_list|(
name|HddsProtos
operator|.
name|SCMContainerInfo
operator|.
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
name|containerList
operator|.
name|add
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|containerList
return|;
block|}
comment|/**    * Allocates a new container.    *    * @param replicationFactor - replication factor of the container.    * @param owner - The string name of the Service that owns this container.    * @return - Pipeline that makes up this container.    * @throws IOException - Exception    */
annotation|@
name|Override
DECL|method|allocateContainer ( ReplicationType type, ReplicationFactor replicationFactor, String owner)
specifier|public
name|ContainerInfo
name|allocateContainer
parameter_list|(
name|ReplicationType
name|type
parameter_list|,
name|ReplicationFactor
name|replicationFactor
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerInfo
name|containerInfo
decl_stmt|;
if|if
condition|(
operator|!
name|nodeManager
operator|.
name|isOutOfChillMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SCMException
argument_list|(
literal|"Unable to create container while in chill mode"
argument_list|,
name|SCMException
operator|.
name|ResultCodes
operator|.
name|CHILL_MODE_EXCEPTION
argument_list|)
throw|;
block|}
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|containerInfo
operator|=
name|containerStateManager
operator|.
name|allocateContainer
argument_list|(
name|pipelineSelector
argument_list|,
name|type
argument_list|,
name|replicationFactor
argument_list|,
name|owner
argument_list|)
expr_stmt|;
name|byte
index|[]
name|containerIDBytes
init|=
name|Longs
operator|.
name|toByteArray
argument_list|(
name|containerInfo
operator|.
name|getContainerID
argument_list|()
argument_list|)
decl_stmt|;
name|containerStore
operator|.
name|put
argument_list|(
name|containerIDBytes
argument_list|,
name|containerInfo
operator|.
name|getProtobuf
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|containerInfo
return|;
block|}
comment|/**    * Deletes a container from SCM.    *    * @param containerID - Container ID    * @throws IOException if container doesn't exist or container store failed    *                     to delete the    *                     specified key.    */
annotation|@
name|Override
DECL|method|deleteContainer (long containerID)
specifier|public
name|void
name|deleteContainer
parameter_list|(
name|long
name|containerID
parameter_list|)
throws|throws
name|IOException
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|dbKey
init|=
name|Longs
operator|.
name|toByteArray
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
name|byte
index|[]
name|containerBytes
init|=
name|containerStore
operator|.
name|get
argument_list|(
name|dbKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerBytes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SCMException
argument_list|(
literal|"Failed to delete container "
operator|+
name|containerID
operator|+
literal|", reason : "
operator|+
literal|"container doesn't exist."
argument_list|,
name|SCMException
operator|.
name|ResultCodes
operator|.
name|FAILED_TO_FIND_CONTAINER
argument_list|)
throw|;
block|}
name|containerStore
operator|.
name|delete
argument_list|(
name|dbKey
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDoc} Used by client to update container state on SCM.    */
annotation|@
name|Override
DECL|method|updateContainerState ( long containerID, HddsProtos.LifeCycleEvent event)
specifier|public
name|HddsProtos
operator|.
name|LifeCycleState
name|updateContainerState
parameter_list|(
name|long
name|containerID
parameter_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
name|event
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerInfo
name|containerInfo
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|dbKey
init|=
name|Longs
operator|.
name|toByteArray
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
name|byte
index|[]
name|containerBytes
init|=
name|containerStore
operator|.
name|get
argument_list|(
name|dbKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerBytes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SCMException
argument_list|(
literal|"Failed to update container state"
operator|+
name|containerID
operator|+
literal|", reason : container doesn't exist."
argument_list|,
name|SCMException
operator|.
name|ResultCodes
operator|.
name|FAILED_TO_FIND_CONTAINER
argument_list|)
throw|;
block|}
name|containerInfo
operator|=
name|ContainerInfo
operator|.
name|fromProtobuf
argument_list|(
name|HddsProtos
operator|.
name|SCMContainerInfo
operator|.
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|containerBytes
argument_list|)
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|event
condition|)
block|{
case|case
name|CREATE
case|:
comment|// Acquire lease on container
name|Lease
argument_list|<
name|ContainerInfo
argument_list|>
name|containerLease
init|=
name|containerLeaseManager
operator|.
name|acquire
argument_list|(
name|containerInfo
argument_list|)
decl_stmt|;
comment|// Register callback to be executed in case of timeout
name|containerLease
operator|.
name|registerCallBack
argument_list|(
parameter_list|()
lambda|->
block|{
name|updateContainerState
argument_list|(
name|containerID
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|TIMEOUT
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
break|break;
case|case
name|CREATED
case|:
comment|// Release the lease on container
name|containerLeaseManager
operator|.
name|release
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
break|break;
case|case
name|FINALIZE
case|:
comment|// TODO: we don't need a lease manager here for closing as the
comment|// container report will include the container state after HDFS-13008
comment|// If a client failed to update the container close state, DN container
comment|// report from 3 DNs will be used to close the container eventually.
break|break;
case|case
name|CLOSE
case|:
break|break;
case|case
name|UPDATE
case|:
break|break;
case|case
name|DELETE
case|:
break|break;
case|case
name|TIMEOUT
case|:
break|break;
case|case
name|CLEANUP
case|:
break|break;
default|default:
throw|throw
operator|new
name|SCMException
argument_list|(
literal|"Unsupported container LifeCycleEvent."
argument_list|,
name|FAILED_TO_CHANGE_CONTAINER_STATE
argument_list|)
throw|;
block|}
comment|// If the below updateContainerState call fails, we should revert the
comment|// changes made in switch case.
comment|// Like releasing the lease in case of BEGIN_CREATE.
name|ContainerInfo
name|updatedContainer
init|=
name|containerStateManager
operator|.
name|updateContainerState
argument_list|(
name|containerInfo
argument_list|,
name|event
argument_list|)
decl_stmt|;
name|containerStore
operator|.
name|put
argument_list|(
name|dbKey
argument_list|,
name|updatedContainer
operator|.
name|getProtobuf
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|updatedContainer
operator|.
name|getState
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LeaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Lease Exception."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns the container State Manager.    *    * @return ContainerStateManager    */
annotation|@
name|Override
DECL|method|getStateManager ()
specifier|public
name|ContainerStateManager
name|getStateManager
parameter_list|()
block|{
return|return
name|containerStateManager
return|;
block|}
comment|/**    * Process container report from Datanode.    *<p>    * Processing follows a very simple logic for time being.    *<p>    * 1. Datanodes report the current State -- denoted by the datanodeState    *<p>    * 2. We are the older SCM state from the Database -- denoted by    * the knownState.    *<p>    * 3. We copy the usage etc. from currentState to newState and log that    * newState to the DB. This allows us SCM to bootup again and read the    * state of the world from the DB, and then reconcile the state from    * container reports, when they arrive.    *    * @param reports Container report    */
annotation|@
name|Override
DECL|method|processContainerReports (DatanodeDetails datanodeDetails, ContainerReportsProto reports)
specifier|public
name|void
name|processContainerReports
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|,
name|ContainerReportsProto
name|reports
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerInfo
argument_list|>
name|containerInfos
init|=
name|reports
operator|.
name|getReportsList
argument_list|()
decl_stmt|;
name|containerSupervisor
operator|.
name|handleContainerReport
argument_list|(
name|datanodeDetails
argument_list|,
name|reports
argument_list|)
expr_stmt|;
for|for
control|(
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerInfo
name|datanodeState
range|:
name|containerInfos
control|)
block|{
name|byte
index|[]
name|dbKey
init|=
name|Longs
operator|.
name|toByteArray
argument_list|(
name|datanodeState
operator|.
name|getContainerID
argument_list|()
argument_list|)
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|containerBytes
init|=
name|containerStore
operator|.
name|get
argument_list|(
name|dbKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerBytes
operator|!=
literal|null
condition|)
block|{
name|HddsProtos
operator|.
name|SCMContainerInfo
name|knownState
init|=
name|HddsProtos
operator|.
name|SCMContainerInfo
operator|.
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|containerBytes
argument_list|)
decl_stmt|;
name|HddsProtos
operator|.
name|SCMContainerInfo
name|newState
init|=
name|reconcileState
argument_list|(
name|datanodeState
argument_list|,
name|knownState
argument_list|)
decl_stmt|;
comment|// FIX ME: This can be optimized, we write twice to memory, where a
comment|// single write would work well.
comment|//
comment|// We need to write this to DB again since the closed only write
comment|// the updated State.
name|containerStore
operator|.
name|put
argument_list|(
name|dbKey
argument_list|,
name|newState
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// If the container is closed, then state is already written to SCM
comment|// DB.TODO: So can we can write only once to DB.
if|if
condition|(
name|closeContainerIfNeeded
argument_list|(
name|newState
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing the Container: {}"
argument_list|,
name|newState
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Container not found in our container db.
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while processing container report from datanode :"
operator|+
literal|" {}, for container: {}, reason: container doesn't exist in"
operator|+
literal|"container database."
argument_list|,
name|datanodeDetails
argument_list|,
name|datanodeState
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Reconciles the state from Datanode with the state in SCM.    *    * @param datanodeState - State from the Datanode.    * @param knownState - State inside SCM.    * @return new SCM State for this container.    */
DECL|method|reconcileState ( StorageContainerDatanodeProtocolProtos.ContainerInfo datanodeState, HddsProtos.SCMContainerInfo knownState)
specifier|private
name|HddsProtos
operator|.
name|SCMContainerInfo
name|reconcileState
parameter_list|(
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerInfo
name|datanodeState
parameter_list|,
name|HddsProtos
operator|.
name|SCMContainerInfo
name|knownState
parameter_list|)
block|{
name|HddsProtos
operator|.
name|SCMContainerInfo
operator|.
name|Builder
name|builder
init|=
name|HddsProtos
operator|.
name|SCMContainerInfo
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setContainerID
argument_list|(
name|knownState
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setPipeline
argument_list|(
name|knownState
operator|.
name|getPipeline
argument_list|()
argument_list|)
expr_stmt|;
comment|// If used size is greater than allocated size, we will be updating
comment|// allocated size with used size. This update is done as a fallback
comment|// mechanism in case SCM crashes without properly updating allocated
comment|// size. Correct allocated value will be updated by
comment|// ContainerStateManager during SCM shutdown.
name|long
name|usedSize
init|=
name|datanodeState
operator|.
name|getUsed
argument_list|()
decl_stmt|;
name|long
name|allocated
init|=
name|knownState
operator|.
name|getAllocatedBytes
argument_list|()
operator|>
name|usedSize
condition|?
name|knownState
operator|.
name|getAllocatedBytes
argument_list|()
else|:
name|usedSize
decl_stmt|;
name|builder
operator|.
name|setAllocatedBytes
argument_list|(
name|allocated
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setUsedBytes
argument_list|(
name|usedSize
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setNumberOfKeys
argument_list|(
name|datanodeState
operator|.
name|getKeyCount
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setState
argument_list|(
name|knownState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStateEnterTime
argument_list|(
name|knownState
operator|.
name|getStateEnterTime
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setContainerID
argument_list|(
name|knownState
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|knownState
operator|.
name|getOwner
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setOwner
argument_list|(
name|knownState
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Queues the close container command, to datanode and writes the new state    * to container DB.    *<p>    * TODO : Remove this 2 ContainerInfo definitions. It is brain dead to have    * one protobuf in one file and another definition in another file.    *    * @param newState - This is the state we maintain in SCM.    * @throws IOException    */
DECL|method|closeContainerIfNeeded (HddsProtos.SCMContainerInfo newState)
specifier|private
name|boolean
name|closeContainerIfNeeded
parameter_list|(
name|HddsProtos
operator|.
name|SCMContainerInfo
name|newState
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|containerUsedPercentage
init|=
literal|1.0f
operator|*
name|newState
operator|.
name|getUsedBytes
argument_list|()
operator|/
name|this
operator|.
name|size
decl_stmt|;
name|ContainerInfo
name|scmInfo
init|=
name|getContainer
argument_list|(
name|newState
operator|.
name|getContainerID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerUsedPercentage
operator|>=
name|containerCloseThreshold
operator|&&
operator|!
name|isClosed
argument_list|(
name|scmInfo
argument_list|)
condition|)
block|{
comment|// We will call closer till get to the closed state.
comment|// That is SCM will make this call repeatedly until we reach the closed
comment|// state.
name|closer
operator|.
name|close
argument_list|(
name|newState
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldClose
argument_list|(
name|scmInfo
argument_list|)
condition|)
block|{
comment|// This event moves the Container from Open to Closing State, this is
comment|// a state inside SCM. This is the desired state that SCM wants this
comment|// container to reach. We will know that a container has reached the
comment|// closed state from container reports. This state change should be
comment|// invoked once and only once.
name|HddsProtos
operator|.
name|LifeCycleState
name|state
init|=
name|updateContainerState
argument_list|(
name|scmInfo
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|FINALIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|CLOSING
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close container {}, reason : Not able "
operator|+
literal|"to "
operator|+
literal|"update container state, current container state: {}."
argument_list|,
name|newState
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * In Container is in closed state, if it is in closed, Deleting or Deleted    * State.    *    * @param info - ContainerInfo.    * @return true if is in open state, false otherwise    */
DECL|method|shouldClose (ContainerInfo info)
specifier|private
name|boolean
name|shouldClose
parameter_list|(
name|ContainerInfo
name|info
parameter_list|)
block|{
return|return
name|info
operator|.
name|getState
argument_list|()
operator|==
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|OPEN
return|;
block|}
DECL|method|isClosed (ContainerInfo info)
specifier|private
name|boolean
name|isClosed
parameter_list|(
name|ContainerInfo
name|info
parameter_list|)
block|{
return|return
name|info
operator|.
name|getState
argument_list|()
operator|==
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|CLOSED
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCloser ()
specifier|public
name|ContainerCloser
name|getCloser
parameter_list|()
block|{
return|return
name|closer
return|;
block|}
comment|/**    * Closes this stream and releases any system resources associated with it.    * If the stream is    * already closed then invoking this method has no effect.    *<p>    *<p>As noted in {@link AutoCloseable#close()}, cases where the close may    * fail require careful    * attention. It is strongly advised to relinquish the underlying resources    * and to internally    *<em>mark</em> the {@code Closeable} as closed, prior to throwing the    * {@code IOException}.    *    * @throws IOException if an I/O error occurs    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|containerLeaseManager
operator|!=
literal|null
condition|)
block|{
name|containerLeaseManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|containerStateManager
operator|!=
literal|null
condition|)
block|{
name|flushContainerInfo
argument_list|()
expr_stmt|;
name|containerStateManager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|containerStore
operator|!=
literal|null
condition|)
block|{
name|containerStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Since allocatedBytes of a container is only in memory, stored in    * containerStateManager, when closing ContainerMapping, we need to update    * this in the container store.    *    * @throws IOException on failure.    */
annotation|@
name|VisibleForTesting
DECL|method|flushContainerInfo ()
specifier|public
name|void
name|flushContainerInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ContainerInfo
argument_list|>
name|containers
init|=
name|containerStateManager
operator|.
name|getAllContainers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|failedContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerInfo
name|info
range|:
name|containers
control|)
block|{
comment|// even if some container updated failed, others can still proceed
try|try
block|{
name|byte
index|[]
name|dbKey
init|=
name|Longs
operator|.
name|toByteArray
argument_list|(
name|info
operator|.
name|getContainerID
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|containerBytes
init|=
name|containerStore
operator|.
name|get
argument_list|(
name|dbKey
argument_list|)
decl_stmt|;
comment|// TODO : looks like when a container is deleted, the container is
comment|// removed from containerStore but not containerStateManager, so it can
comment|// return info of a deleted container. may revisit this in the future,
comment|// for now, just skip a not-found container
if|if
condition|(
name|containerBytes
operator|!=
literal|null
condition|)
block|{
name|HddsProtos
operator|.
name|SCMContainerInfo
name|oldInfoProto
init|=
name|HddsProtos
operator|.
name|SCMContainerInfo
operator|.
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|containerBytes
argument_list|)
decl_stmt|;
name|ContainerInfo
name|oldInfo
init|=
name|ContainerInfo
operator|.
name|fromProtobuf
argument_list|(
name|oldInfoProto
argument_list|)
decl_stmt|;
name|ContainerInfo
name|newInfo
init|=
operator|new
name|ContainerInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setAllocatedBytes
argument_list|(
name|info
operator|.
name|getAllocatedBytes
argument_list|()
argument_list|)
operator|.
name|setNumberOfKeys
argument_list|(
name|oldInfo
operator|.
name|getNumberOfKeys
argument_list|()
argument_list|)
operator|.
name|setOwner
argument_list|(
name|oldInfo
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|.
name|setPipeline
argument_list|(
name|oldInfo
operator|.
name|getPipeline
argument_list|()
argument_list|)
operator|.
name|setState
argument_list|(
name|oldInfo
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|setUsedBytes
argument_list|(
name|oldInfo
operator|.
name|getUsedBytes
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|containerStore
operator|.
name|put
argument_list|(
name|dbKey
argument_list|,
name|newInfo
operator|.
name|getProtobuf
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Container state manager has container {} but not found "
operator|+
literal|"in container store, a deleted container?"
argument_list|,
name|info
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|failedContainers
operator|.
name|add
argument_list|(
name|info
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|failedContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error in flushing container info from container "
operator|+
literal|"state manager: "
operator|+
name|failedContainers
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNodeManager ()
specifier|public
name|NodeManager
name|getNodeManager
parameter_list|()
block|{
return|return
name|nodeManager
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getContainerStore ()
specifier|public
name|MetadataStore
name|getContainerStore
parameter_list|()
block|{
return|return
name|containerStore
return|;
block|}
block|}
end_class

end_unit

