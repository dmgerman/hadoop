begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container.placement.algorithms
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterLong
import|;
end_import

begin_comment
comment|/**  * This class is for maintaining Topology aware container placement statistics.  */
end_comment

begin_class
annotation|@
name|Metrics
argument_list|(
name|about
operator|=
literal|"SCM Container Placement Metrics"
argument_list|,
name|context
operator|=
literal|"ozone"
argument_list|)
DECL|class|SCMContainerPlacementMetrics
specifier|public
class|class
name|SCMContainerPlacementMetrics
implements|implements
name|MetricsSource
block|{
DECL|field|SOURCE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SOURCE_NAME
init|=
name|SCMContainerPlacementMetrics
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
DECL|field|RECORD_INFO
specifier|private
specifier|static
specifier|final
name|MetricsInfo
name|RECORD_INFO
init|=
name|Interns
operator|.
name|info
argument_list|(
name|SOURCE_NAME
argument_list|,
literal|"SCM Container Placement Metrics"
argument_list|)
decl_stmt|;
DECL|field|registry
specifier|private
specifier|static
name|MetricsRegistry
name|registry
decl_stmt|;
comment|// total datanode allocation request count
DECL|field|datanodeRequestCount
annotation|@
name|Metric
specifier|private
name|MutableCounterLong
name|datanodeRequestCount
decl_stmt|;
comment|// datanode allocation attempt count, including success, fallback and failed
DECL|field|datanodeChooseAttemptCount
annotation|@
name|Metric
specifier|private
name|MutableCounterLong
name|datanodeChooseAttemptCount
decl_stmt|;
comment|// datanode successful allocation count
DECL|field|datanodeChooseSuccessCount
annotation|@
name|Metric
specifier|private
name|MutableCounterLong
name|datanodeChooseSuccessCount
decl_stmt|;
comment|// datanode allocated with some allocation constrains compromised
DECL|field|datanodeChooseFallbackCount
annotation|@
name|Metric
specifier|private
name|MutableCounterLong
name|datanodeChooseFallbackCount
decl_stmt|;
DECL|method|SCMContainerPlacementMetrics ()
specifier|public
name|SCMContainerPlacementMetrics
parameter_list|()
block|{   }
DECL|method|create ()
specifier|public
specifier|static
name|SCMContainerPlacementMetrics
name|create
parameter_list|()
block|{
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
name|registry
operator|=
operator|new
name|MetricsRegistry
argument_list|(
name|RECORD_INFO
argument_list|)
expr_stmt|;
return|return
name|ms
operator|.
name|register
argument_list|(
name|SOURCE_NAME
argument_list|,
literal|"SCM Container Placement Metrics"
argument_list|,
operator|new
name|SCMContainerPlacementMetrics
argument_list|()
argument_list|)
return|;
block|}
DECL|method|incrDatanodeRequestCount (long count)
specifier|public
name|void
name|incrDatanodeRequestCount
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|this
operator|.
name|datanodeRequestCount
operator|.
name|incr
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|incrDatanodeChooseSuccessCount ()
specifier|public
name|void
name|incrDatanodeChooseSuccessCount
parameter_list|()
block|{
name|this
operator|.
name|datanodeChooseSuccessCount
operator|.
name|incr
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|incrDatanodeChooseFallbackCount ()
specifier|public
name|void
name|incrDatanodeChooseFallbackCount
parameter_list|()
block|{
name|this
operator|.
name|datanodeChooseFallbackCount
operator|.
name|incr
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|incrDatanodeChooseAttemptCount ()
specifier|public
name|void
name|incrDatanodeChooseAttemptCount
parameter_list|()
block|{
name|this
operator|.
name|datanodeChooseAttemptCount
operator|.
name|incr
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|unRegister ()
specifier|public
name|void
name|unRegister
parameter_list|()
block|{
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
name|ms
operator|.
name|unregisterSource
argument_list|(
name|SOURCE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDatanodeRequestCount ()
specifier|public
name|long
name|getDatanodeRequestCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|datanodeRequestCount
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDatanodeChooseSuccessCount ()
specifier|public
name|long
name|getDatanodeChooseSuccessCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|datanodeChooseSuccessCount
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDatanodeChooseFallbackCount ()
specifier|public
name|long
name|getDatanodeChooseFallbackCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|datanodeChooseFallbackCount
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDatanodeChooseAttemptCount ()
specifier|public
name|long
name|getDatanodeChooseAttemptCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|datanodeChooseAttemptCount
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMetrics (MetricsCollector collector, boolean all)
specifier|public
name|void
name|getMetrics
parameter_list|(
name|MetricsCollector
name|collector
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|registry
operator|.
name|snapshot
argument_list|(
name|collector
operator|.
name|addRecord
argument_list|(
name|registry
operator|.
name|info
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

