begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|DatanodeDetailsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|SCMSecurityProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocolPB
operator|.
name|SCMSecurityProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocolPB
operator|.
name|SCMSecurityProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|HddsServerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|SCMSecurityProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|KerberosInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The protocol used to perform security related operations with SCM.  */
end_comment

begin_class
annotation|@
name|KerberosInfo
argument_list|(
name|serverPrincipal
operator|=
name|ScmConfigKeys
operator|.
name|HDDS_SCM_KERBEROS_PRINCIPAL_KEY
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|SCMSecurityProtocolServer
specifier|public
class|class
name|SCMSecurityProtocolServer
implements|implements
name|SCMSecurityProtocol
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SCMClientProtocolServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|OzoneConfiguration
name|config
decl_stmt|;
DECL|field|scm
specifier|private
specifier|final
name|StorageContainerManager
name|scm
decl_stmt|;
DECL|field|rpcServer
specifier|private
specifier|final
name|RPC
operator|.
name|Server
name|rpcServer
decl_stmt|;
DECL|field|rpcAddress
specifier|private
specifier|final
name|InetSocketAddress
name|rpcAddress
decl_stmt|;
DECL|method|SCMSecurityProtocolServer (OzoneConfiguration conf, StorageContainerManager scm)
name|SCMSecurityProtocolServer
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|StorageContainerManager
name|scm
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|config
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|scm
operator|=
name|scm
expr_stmt|;
specifier|final
name|int
name|handlerCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_SECURITY_HANDLER_COUNT_KEY
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_SECURITY_HANDLER_COUNT_DEFAULT
argument_list|)
decl_stmt|;
name|rpcAddress
operator|=
name|HddsServerUtil
operator|.
name|getScmSecurityInetAddress
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// SCM security service RPC service.
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|SCMSecurityProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|BlockingService
name|secureProtoPbService
init|=
name|SCMSecurityProtocolProtos
operator|.
name|SCMSecurityProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
operator|new
name|SCMSecurityProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|rpcServer
operator|=
name|StorageContainerManager
operator|.
name|startRpcServer
argument_list|(
name|conf
argument_list|,
name|rpcAddress
argument_list|,
name|SCMSecurityProtocolPB
operator|.
name|class
argument_list|,
name|secureProtoPbService
argument_list|,
name|handlerCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get SCM signed certificate for DataNode.    *    * @param dnDetails   - DataNode Details.    * @param certSignReq - Certificate signing request.    * @return byte[]         - SCM signed certificate.    */
annotation|@
name|Override
DECL|method|getDataNodeCertificate ( DatanodeDetailsProto dnDetails, String certSignReq)
specifier|public
name|String
name|getDataNodeCertificate
parameter_list|(
name|DatanodeDetailsProto
name|dnDetails
parameter_list|,
name|String
name|certSignReq
parameter_list|)
throws|throws
name|IOException
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Processing CSR for dn {}, UUID: {}"
argument_list|,
name|dnDetails
operator|.
name|getHostName
argument_list|()
argument_list|,
name|dnDetails
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: Call scm to sign the csr.
return|return
literal|null
return|;
block|}
DECL|method|getRpcServer ()
specifier|public
name|RPC
operator|.
name|Server
name|getRpcServer
parameter_list|()
block|{
return|return
name|rpcServer
return|;
block|}
DECL|method|getRpcAddress ()
specifier|public
name|InetSocketAddress
name|getRpcAddress
parameter_list|()
block|{
return|return
name|rpcAddress
return|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|LOGGER
operator|.
name|info
argument_list|(
name|StorageContainerManager
operator|.
name|buildRpcServerStartMessage
argument_list|(
literal|"Starting"
operator|+
literal|" RPC server for SCMSecurityProtocolServer."
argument_list|,
name|getRpcAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getRpcServer
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Stopping the SCMSecurityProtocolServer."
argument_list|)
expr_stmt|;
name|getRpcServer
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"SCMSecurityProtocolServer stop failed."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|join ()
specifier|public
name|void
name|join
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Join RPC server for SCMSecurityProtocolServer."
argument_list|)
expr_stmt|;
name|getRpcServer
argument_list|()
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

