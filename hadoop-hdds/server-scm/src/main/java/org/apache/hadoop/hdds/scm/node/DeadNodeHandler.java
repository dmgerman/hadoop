begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.node
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|states
operator|.
name|NodeNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
operator|.
name|CLOSE_CONTAINER
import|;
end_import

begin_comment
comment|/**  * Handles Dead Node event.  */
end_comment

begin_class
DECL|class|DeadNodeHandler
specifier|public
class|class
name|DeadNodeHandler
implements|implements
name|EventHandler
argument_list|<
name|DatanodeDetails
argument_list|>
block|{
DECL|field|nodeManager
specifier|private
specifier|final
name|NodeManager
name|nodeManager
decl_stmt|;
DECL|field|pipelineManager
specifier|private
specifier|final
name|PipelineManager
name|pipelineManager
decl_stmt|;
DECL|field|containerManager
specifier|private
specifier|final
name|ContainerManager
name|containerManager
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DeadNodeHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|DeadNodeHandler (final NodeManager nodeManager, final PipelineManager pipelineManager, final ContainerManager containerManager)
specifier|public
name|DeadNodeHandler
parameter_list|(
specifier|final
name|NodeManager
name|nodeManager
parameter_list|,
specifier|final
name|PipelineManager
name|pipelineManager
parameter_list|,
specifier|final
name|ContainerManager
name|containerManager
parameter_list|)
block|{
name|this
operator|.
name|nodeManager
operator|=
name|nodeManager
expr_stmt|;
name|this
operator|.
name|pipelineManager
operator|=
name|pipelineManager
expr_stmt|;
name|this
operator|.
name|containerManager
operator|=
name|containerManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMessage (final DatanodeDetails datanodeDetails, final EventPublisher publisher)
specifier|public
name|void
name|onMessage
parameter_list|(
specifier|final
name|DatanodeDetails
name|datanodeDetails
parameter_list|,
specifier|final
name|EventPublisher
name|publisher
parameter_list|)
block|{
try|try
block|{
comment|/*        * We should have already destroyed all the pipelines on this datanode        * when it was marked as stale. Destroy pipeline should also have closed        * all the containers on this datanode.        *        * Ideally we should not have any pipeline or OPEN containers now.        *        * To be on a safer side, we double check here and take appropriate        * action.        */
name|destroyPipelines
argument_list|(
name|datanodeDetails
argument_list|)
expr_stmt|;
name|closeContainers
argument_list|(
name|datanodeDetails
argument_list|,
name|publisher
argument_list|)
expr_stmt|;
comment|// Remove the container replicas associated with the dead node.
name|removeContainerReplicas
argument_list|(
name|datanodeDetails
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NodeNotFoundException
name|ex
parameter_list|)
block|{
comment|// This should not happen, we cannot get a dead node event for an
comment|// unregistered datanode!
name|LOG
operator|.
name|error
argument_list|(
literal|"DeadNode event for a unregistered node: {}!"
argument_list|,
name|datanodeDetails
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Destroys all the pipelines on the given datanode if there are any.    *    * @param datanodeDetails DatanodeDetails    */
DECL|method|destroyPipelines (final DatanodeDetails datanodeDetails)
specifier|private
name|void
name|destroyPipelines
parameter_list|(
specifier|final
name|DatanodeDetails
name|datanodeDetails
parameter_list|)
block|{
name|Optional
operator|.
name|ofNullable
argument_list|(
name|nodeManager
operator|.
name|getPipelines
argument_list|(
name|datanodeDetails
argument_list|)
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|pipelines
lambda|->
name|pipelines
operator|.
name|forEach
argument_list|(
name|id
lambda|->
block|{
block|try
block|{
name|pipelineManager
operator|.
name|finalizeAndDestroyPipeline
argument_list|(
name|pipelineManager
operator|.
name|getPipeline
argument_list|(
name|id
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PipelineNotFoundException
name|ignore
parameter_list|)
block|{
comment|// Pipeline is not there in pipeline manager,
comment|// should we care?
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while finalizing pipeline {}"
argument_list|,
name|id
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|)
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/**    * Sends CloseContainerCommand to all the open containers on the    * given datanode.    *    * @param datanodeDetails DatanodeDetails    * @param publisher EventPublisher    * @throws NodeNotFoundException    */
end_comment

begin_function
DECL|method|closeContainers (final DatanodeDetails datanodeDetails, final EventPublisher publisher)
unit|private
name|void
name|closeContainers
parameter_list|(
specifier|final
name|DatanodeDetails
name|datanodeDetails
parameter_list|,
specifier|final
name|EventPublisher
name|publisher
parameter_list|)
throws|throws
name|NodeNotFoundException
block|{
name|nodeManager
operator|.
name|getContainers
argument_list|(
name|datanodeDetails
argument_list|)
operator|.
name|forEach
argument_list|(
name|id
lambda|->
block|{
try|try
block|{
specifier|final
name|ContainerInfo
name|container
init|=
name|containerManager
operator|.
name|getContainer
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|.
name|getState
argument_list|()
operator|==
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|OPEN
condition|)
block|{
name|publisher
operator|.
name|fireEvent
argument_list|(
name|CLOSE_CONTAINER
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ContainerNotFoundException
name|cnfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Container {} is not managed by ContainerManager."
argument_list|,
name|id
argument_list|,
name|cnfe
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Removes the ContainerReplica of the dead datanode from the containers    * which are hosted by that datanode.    *    * @param datanodeDetails DatanodeDetails    * @throws NodeNotFoundException    */
end_comment

begin_function
DECL|method|removeContainerReplicas (final DatanodeDetails datanodeDetails)
specifier|private
name|void
name|removeContainerReplicas
parameter_list|(
specifier|final
name|DatanodeDetails
name|datanodeDetails
parameter_list|)
throws|throws
name|NodeNotFoundException
block|{
name|nodeManager
operator|.
name|getContainers
argument_list|(
name|datanodeDetails
argument_list|)
operator|.
name|forEach
argument_list|(
name|id
lambda|->
block|{
try|try
block|{
specifier|final
name|ContainerInfo
name|container
init|=
name|containerManager
operator|.
name|getContainer
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// Identify and remove the ContainerReplica of dead node
name|containerManager
operator|.
name|getContainerReplicas
argument_list|(
name|id
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getDatanodeDetails
argument_list|()
operator|.
name|equals
argument_list|(
name|datanodeDetails
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|replica
lambda|->
block|{
lambda|try
block|{
name|containerManager
operator|.
name|removeContainerReplica
argument_list|(
name|id
argument_list|,
name|replica
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while removing container replica #{} "
operator|+
literal|"of container {}."
argument_list|,
name|replica
argument_list|,
name|container
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_catch
catch|catch
parameter_list|(
name|ContainerNotFoundException
name|cnfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Container {} is not managed by ContainerManager."
argument_list|,
name|id
argument_list|,
name|cnfe
argument_list|)
expr_stmt|;
block|}
end_catch

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

unit|}   }
end_unit

