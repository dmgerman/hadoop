begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.node
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerReplica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|replication
operator|.
name|ReplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Handles Dead Node event.  */
end_comment

begin_class
DECL|class|DeadNodeHandler
specifier|public
class|class
name|DeadNodeHandler
implements|implements
name|EventHandler
argument_list|<
name|DatanodeDetails
argument_list|>
block|{
DECL|field|containerManager
specifier|private
specifier|final
name|ContainerManager
name|containerManager
decl_stmt|;
DECL|field|nodeManager
specifier|private
specifier|final
name|NodeManager
name|nodeManager
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DeadNodeHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|DeadNodeHandler (NodeManager nodeManager, ContainerManager containerManager)
specifier|public
name|DeadNodeHandler
parameter_list|(
name|NodeManager
name|nodeManager
parameter_list|,
name|ContainerManager
name|containerManager
parameter_list|)
block|{
name|this
operator|.
name|containerManager
operator|=
name|containerManager
expr_stmt|;
name|this
operator|.
name|nodeManager
operator|=
name|nodeManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMessage (DatanodeDetails datanodeDetails, EventPublisher publisher)
specifier|public
name|void
name|onMessage
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
block|{
name|nodeManager
operator|.
name|processDeadNode
argument_list|(
name|datanodeDetails
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: check if there are any pipeline on this node and fire close
comment|// pipeline event
name|Set
argument_list|<
name|ContainerID
argument_list|>
name|ids
init|=
name|nodeManager
operator|.
name|getContainers
argument_list|(
name|datanodeDetails
operator|.
name|getUuid
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"There's no containers in dead datanode {}, no replica will be"
operator|+
literal|" removed from the in-memory state."
argument_list|,
name|datanodeDetails
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Datanode {}  is dead. Removing replications from the in-memory"
operator|+
literal|" state."
argument_list|,
name|datanodeDetails
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerID
name|id
range|:
name|ids
control|)
block|{
try|try
block|{
specifier|final
name|ContainerInfo
name|container
init|=
name|containerManager
operator|.
name|getContainer
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|container
operator|.
name|isOpen
argument_list|()
condition|)
block|{
specifier|final
name|ContainerReplica
name|replica
init|=
name|ContainerReplica
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerID
argument_list|(
name|id
argument_list|)
operator|.
name|setDatanodeDetails
argument_list|(
name|datanodeDetails
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|containerManager
operator|.
name|removeContainerReplica
argument_list|(
name|id
argument_list|,
name|replica
argument_list|)
expr_stmt|;
name|replicateIfNeeded
argument_list|(
name|container
argument_list|,
name|publisher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while removing container replica #{} for "
operator|+
literal|"container #{}."
argument_list|,
name|replica
argument_list|,
name|container
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ContainerNotFoundException
name|cnfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Container Not found!"
argument_list|,
name|cnfe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Compare the existing replication number with the expected one.    */
DECL|method|replicateIfNeeded (ContainerInfo container, EventPublisher publisher)
specifier|private
name|void
name|replicateIfNeeded
parameter_list|(
name|ContainerInfo
name|container
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
throws|throws
name|ContainerNotFoundException
block|{
specifier|final
name|int
name|existingReplicas
init|=
name|containerManager
operator|.
name|getContainerReplicas
argument_list|(
name|container
operator|.
name|containerID
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|int
name|expectedReplicas
init|=
name|container
operator|.
name|getReplicationFactor
argument_list|()
operator|.
name|getNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|existingReplicas
operator|!=
name|expectedReplicas
condition|)
block|{
name|publisher
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|REPLICATE_CONTAINER
argument_list|,
operator|new
name|ReplicationRequest
argument_list|(
name|container
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|existingReplicas
argument_list|,
name|expectedReplicas
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns logger.    * */
comment|// TODO: remove this.
DECL|method|getLogger ()
specifier|public
specifier|static
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
block|}
end_class

end_unit

