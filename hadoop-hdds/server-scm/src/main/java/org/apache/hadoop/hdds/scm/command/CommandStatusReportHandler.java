begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.command
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|command
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|CommandStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeHeartbeatDispatcher
operator|.
name|CommandStatusReportFromDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|IdentifiableEventPayload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Handles CommandStatusReports from datanode.  */
end_comment

begin_class
DECL|class|CommandStatusReportHandler
specifier|public
class|class
name|CommandStatusReportHandler
implements|implements
name|EventHandler
argument_list|<
name|CommandStatusReportFromDatanode
argument_list|>
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CommandStatusReportHandler
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|onMessage (CommandStatusReportFromDatanode report, EventPublisher publisher)
specifier|public
name|void
name|onMessage
parameter_list|(
name|CommandStatusReportFromDatanode
name|report
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommandStatus
argument_list|>
name|cmdStatusList
init|=
name|report
operator|.
name|getReport
argument_list|()
operator|.
name|getCmdStatusList
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|cmdStatusList
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Processing command status report for dn: {}"
argument_list|,
name|report
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|)
expr_stmt|;
comment|// Route command status to its watchers.
name|cmdStatusList
operator|.
name|forEach
argument_list|(
name|cmdStatus
lambda|->
block|{
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Emitting command status for id:{} type: {}"
argument_list|,
name|cmdStatus
operator|.
name|getCmdId
argument_list|()
argument_list|,
name|cmdStatus
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|cmdStatus
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|replicateContainerCommand
case|:
name|publisher
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|REPLICATION_STATUS
argument_list|,
operator|new
name|ReplicationStatus
argument_list|(
name|cmdStatus
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|deleteBlocksCommand
case|:
if|if
condition|(
name|cmdStatus
operator|.
name|getStatus
argument_list|()
operator|==
name|CommandStatus
operator|.
name|Status
operator|.
name|EXECUTED
condition|)
block|{
name|publisher
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|DELETE_BLOCK_STATUS
argument_list|,
operator|new
name|DeleteBlockStatus
argument_list|(
name|cmdStatus
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"CommandStatus of type:{} not handled in "
operator|+
literal|"CommandStatusReportHandler."
argument_list|,
name|cmdStatus
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wrapper event for CommandStatus.    */
DECL|class|CommandStatusEvent
specifier|public
specifier|static
class|class
name|CommandStatusEvent
implements|implements
name|IdentifiableEventPayload
block|{
DECL|field|cmdStatus
specifier|private
name|CommandStatus
name|cmdStatus
decl_stmt|;
DECL|method|CommandStatusEvent (CommandStatus cmdStatus)
name|CommandStatusEvent
parameter_list|(
name|CommandStatus
name|cmdStatus
parameter_list|)
block|{
name|this
operator|.
name|cmdStatus
operator|=
name|cmdStatus
expr_stmt|;
block|}
DECL|method|getCmdStatus ()
specifier|public
name|CommandStatus
name|getCmdStatus
parameter_list|()
block|{
return|return
name|cmdStatus
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CommandStatusEvent:"
operator|+
name|cmdStatus
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|cmdStatus
operator|.
name|getCmdId
argument_list|()
return|;
block|}
block|}
comment|/**    * Wrapper event for Replicate Command.    */
DECL|class|ReplicationStatus
specifier|public
specifier|static
class|class
name|ReplicationStatus
extends|extends
name|CommandStatusEvent
block|{
DECL|method|ReplicationStatus (CommandStatus cmdStatus)
specifier|public
name|ReplicationStatus
parameter_list|(
name|CommandStatus
name|cmdStatus
parameter_list|)
block|{
name|super
argument_list|(
name|cmdStatus
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Wrapper event for CloseContainer Command.    */
DECL|class|CloseContainerStatus
specifier|public
specifier|static
class|class
name|CloseContainerStatus
extends|extends
name|CommandStatusEvent
block|{
DECL|method|CloseContainerStatus (CommandStatus cmdStatus)
specifier|public
name|CloseContainerStatus
parameter_list|(
name|CommandStatus
name|cmdStatus
parameter_list|)
block|{
name|super
argument_list|(
name|cmdStatus
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Wrapper event for DeleteBlock Command.    */
DECL|class|DeleteBlockStatus
specifier|public
specifier|static
class|class
name|DeleteBlockStatus
extends|extends
name|CommandStatusEvent
block|{
DECL|method|DeleteBlockStatus (CommandStatus cmdStatus)
specifier|public
name|DeleteBlockStatus
parameter_list|(
name|CommandStatus
name|cmdStatus
parameter_list|)
block|{
name|super
argument_list|(
name|cmdStatus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

