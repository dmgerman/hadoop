begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container.closer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|closer
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|SCMContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|CloseContainerCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_CONTAINER_REPORT_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_CONTAINER_REPORT_INTERVAL_DEFAULT
import|;
end_import

begin_comment
comment|/**  * A class that manages closing of containers. This allows transition from a  * open but full container to a closed container, to which no data is written.  */
end_comment

begin_class
DECL|class|ContainerCloser
specifier|public
class|class
name|ContainerCloser
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerCloser
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MULTIPLIER
specifier|private
specifier|static
specifier|final
name|long
name|MULTIPLIER
init|=
literal|3L
decl_stmt|;
DECL|field|CLEANUP_WATER_MARK
specifier|private
specifier|static
specifier|final
name|int
name|CLEANUP_WATER_MARK
init|=
literal|1000
decl_stmt|;
DECL|field|nodeManager
specifier|private
specifier|final
name|NodeManager
name|nodeManager
decl_stmt|;
DECL|field|commandIssued
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|commandIssued
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|Configuration
name|configuration
decl_stmt|;
DECL|field|mapCount
specifier|private
specifier|final
name|AtomicInteger
name|mapCount
decl_stmt|;
DECL|field|reportInterval
specifier|private
specifier|final
name|long
name|reportInterval
decl_stmt|;
DECL|field|threadRunCount
specifier|private
specifier|final
name|AtomicInteger
name|threadRunCount
decl_stmt|;
DECL|field|isRunning
specifier|private
specifier|final
name|AtomicBoolean
name|isRunning
decl_stmt|;
comment|/**    * Constructs the ContainerCloser class.    *    * @param nodeManager - NodeManager    * @param conf -   Configuration    */
DECL|method|ContainerCloser (NodeManager nodeManager, Configuration conf)
specifier|public
name|ContainerCloser
parameter_list|(
name|NodeManager
name|nodeManager
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|nodeManager
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeManager
operator|=
name|nodeManager
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|commandIssued
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|mapCount
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadRunCount
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|isRunning
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|reportInterval
operator|=
name|this
operator|.
name|configuration
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_CONTAINER_REPORT_INTERVAL
argument_list|,
name|OZONE_CONTAINER_REPORT_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|this
operator|.
name|reportInterval
operator|>
literal|0
argument_list|,
literal|"report interval has to be greater than 0"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCleanupWaterMark ()
specifier|public
specifier|static
name|int
name|getCleanupWaterMark
parameter_list|()
block|{
return|return
name|CLEANUP_WATER_MARK
return|;
block|}
comment|/**    * Sends a Container Close command to the data nodes where this container    * lives.    *    * @param info - ContainerInfo.    * @param pipeline    */
DECL|method|close (SCMContainerInfo info, Pipeline pipeline)
specifier|public
name|void
name|close
parameter_list|(
name|SCMContainerInfo
name|info
parameter_list|,
name|Pipeline
name|pipeline
parameter_list|)
block|{
if|if
condition|(
name|commandIssued
operator|.
name|containsKey
argument_list|(
name|info
operator|.
name|getContainerID
argument_list|()
argument_list|)
condition|)
block|{
comment|// We check if we issued a close command in last 3 * reportInterval secs.
name|long
name|commandQueueTime
init|=
name|commandIssued
operator|.
name|get
argument_list|(
name|info
operator|.
name|getContainerID
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|currentTime
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentTime
operator|>
name|commandQueueTime
operator|+
operator|(
name|MULTIPLIER
operator|*
name|reportInterval
operator|)
condition|)
block|{
name|commandIssued
operator|.
name|remove
argument_list|(
name|info
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|mapCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Ignore this request, since we just issued a close command. We
comment|// should wait instead of sending a command to datanode again.
return|return;
block|}
block|}
comment|// if we reached here, it means that we have not issued a command to the
comment|// data node in last (3 times report interval). We are presuming that is
comment|// enough time to close the container. Let us go ahead and queue a close
comment|// to all the datanodes that participate in the container.
comment|//
comment|// Three important things to note here:
comment|//
comment|// 1. It is ok to send this command multiple times to a datanode. Close
comment|// container is an idempotent command, if the container is already closed
comment|// then we have no issues.
comment|//
comment|// 2. The container close command is issued to all datanodes. But
comment|// depending on the pipeline type, some of the datanodes might ignore it.
comment|//
comment|// 3. SCM will see that datanode is closed from container reports, but it
comment|// is possible that datanodes might get close commands since
comment|// this queue can be emptied by a datanode after a close report is send
comment|// to SCM. In that case also, data node will ignore this command.
for|for
control|(
name|DatanodeDetails
name|datanodeDetails
range|:
name|pipeline
operator|.
name|getMachines
argument_list|()
control|)
block|{
name|nodeManager
operator|.
name|addDatanodeCommand
argument_list|(
name|datanodeDetails
operator|.
name|getUuid
argument_list|()
argument_list|,
operator|new
name|CloseContainerCommand
argument_list|(
name|info
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|info
operator|.
name|getReplicationType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|commandIssued
operator|.
name|containsKey
argument_list|(
name|info
operator|.
name|getContainerID
argument_list|()
argument_list|)
condition|)
block|{
name|commandIssued
operator|.
name|put
argument_list|(
name|info
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mapCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|// run the hash map cleaner thread if needed, non-blocking call.
name|runCleanerThreadIfNeeded
argument_list|()
expr_stmt|;
block|}
DECL|method|runCleanerThreadIfNeeded ()
specifier|private
name|void
name|runCleanerThreadIfNeeded
parameter_list|()
block|{
comment|// Let us check if we should run a cleaner thread, not using map.size
comment|// since it runs a loop in the case of the concurrentMap.
if|if
condition|(
name|mapCount
operator|.
name|get
argument_list|()
operator|>
name|CLEANUP_WATER_MARK
operator|&&
name|isRunning
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|Runnable
name|entryCleaner
init|=
parameter_list|()
lambda|->
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting close container Hash map cleaner."
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|commandIssued
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
name|commandQueueTime
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|commandQueueTime
operator|+
operator|(
name|MULTIPLIER
operator|*
name|reportInterval
operator|)
operator|>
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
condition|)
block|{
comment|// It is possible for this remove to fail due to race conditions.
comment|// No big deal we will cleanup next time.
name|commandIssued
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|mapCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
name|isRunning
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished running, close container Hash map cleaner."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to finish cleaning the closed containers map."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// Launch the cleaner thread when we need instead of having a daemon
comment|// thread that is sleeping all the time. We need to set the Daemon to
comment|// true to avoid blocking clean exits.
name|Thread
name|cleanerThread
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"Closed Container Cleaner Thread - %d"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|newThread
argument_list|(
name|entryCleaner
argument_list|)
decl_stmt|;
name|threadRunCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|cleanerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getThreadRunCount ()
specifier|public
name|int
name|getThreadRunCount
parameter_list|()
block|{
return|return
name|threadRunCount
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCloseCount ()
specifier|public
name|int
name|getCloseCount
parameter_list|()
block|{
return|return
name|mapCount
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

