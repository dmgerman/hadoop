begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container.states
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|states
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
operator|.
name|ResultCodes
operator|.
name|FAILED_TO_CHANGE_CONTAINER_STATE
import|;
end_import

begin_comment
comment|/**  * Each Attribute that we manage for a container is maintained as a map.  *<p>  * Currently we manage the following attributes for a container.  *<p>  * 1. StateMap - LifeCycleState -> Set of ContainerIDs  * 2. TypeMap  - ReplicationType -> Set of ContainerIDs  * 3. OwnerMap - OwnerNames -> Set of ContainerIDs  * 4. FactorMap - ReplicationFactor -> Set of ContainerIDs  *<p>  * This means that for a cluster size of 750 PB -- we will have around 150  * Million containers, if we assume 5GB average container size.  *<p>  * That implies that these maps will take around 2/3 GB of RAM which will be  * pinned down in the SCM. This is deemed acceptable since we can tune the  * container size --say we make it 10GB average size, then we can deal with a  * cluster size of 1.5 exa bytes with the same metadata in SCMs memory.  *<p>  * Please note: **This class is not thread safe**. This used to be thread safe,  * while bench marking we found that ContainerStateMap would be taking 5  * locks for a single container insert. If we remove locks in this class,  * then we are able to perform about 540K operations per second, with the  * locks in this class it goes down to 246K operations per second. Hence we  * are going to rely on ContainerStateMap locks to maintain consistency of  * data in these classes too, since ContainerAttribute is only used by  * ContainerStateMap class.  */
end_comment

begin_class
DECL|class|ContainerAttribute
specifier|public
class|class
name|ContainerAttribute
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|attributeMap
specifier|private
specifier|final
name|Map
argument_list|<
name|T
argument_list|,
name|NavigableSet
argument_list|<
name|ContainerID
argument_list|>
argument_list|>
name|attributeMap
decl_stmt|;
DECL|field|EMPTY_SET
specifier|private
specifier|static
specifier|final
name|NavigableSet
argument_list|<
name|ContainerID
argument_list|>
name|EMPTY_SET
init|=
name|Collections
operator|.
name|unmodifiableNavigableSet
argument_list|(
operator|new
name|TreeSet
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Creates a Container Attribute map from an existing Map.    *    * @param attributeMap - AttributeMap    */
DECL|method|ContainerAttribute (Map<T, NavigableSet<ContainerID>> attributeMap)
specifier|public
name|ContainerAttribute
parameter_list|(
name|Map
argument_list|<
name|T
argument_list|,
name|NavigableSet
argument_list|<
name|ContainerID
argument_list|>
argument_list|>
name|attributeMap
parameter_list|)
block|{
name|this
operator|.
name|attributeMap
operator|=
name|attributeMap
expr_stmt|;
block|}
comment|/**    * Create an empty Container Attribute map.    */
DECL|method|ContainerAttribute ()
specifier|public
name|ContainerAttribute
parameter_list|()
block|{
name|this
operator|.
name|attributeMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Insert or update the value in the Attribute map.    *    * @param key - The key to the set where the ContainerID should exist.    * @param value - Actual Container ID.    * @throws SCMException - on Error    */
DECL|method|insert (T key, ContainerID value)
specifier|public
name|boolean
name|insert
parameter_list|(
name|T
name|key
parameter_list|,
name|ContainerID
name|value
parameter_list|)
throws|throws
name|SCMException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributeMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
name|attributeMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|add
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
comment|//we inserted the value as it doesnât exist in the set.
block|}
else|else
block|{
comment|// Failure indicates that this ContainerID exists in the Set
if|if
condition|(
operator|!
name|attributeMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|remove
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failure to remove the object from the Map.Key:{}, "
operator|+
literal|"ContainerID: {}"
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SCMException
argument_list|(
literal|"Failure to remove the object from the Map"
argument_list|,
name|FAILED_TO_CHANGE_CONTAINER_STATE
argument_list|)
throw|;
block|}
name|attributeMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
comment|// This key does not exist, we need to allocate this key in the map.
comment|// TODO: Replace TreeSet with FoldedTreeSet from HDFS Utils.
comment|// Skipping for now, since FoldedTreeSet does not have implementations
comment|// for headSet and TailSet. We need those calls.
name|this
operator|.
name|attributeMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|TreeSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
comment|// This should not fail, we just allocated this object.
name|attributeMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Returns true if have this bucket in the attribute map.    *    * @param key - Key to lookup    * @return true if we have the key    */
DECL|method|hasKey (T key)
specifier|public
name|boolean
name|hasKey
parameter_list|(
name|T
name|key
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|attributeMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Returns true if we have the key and the containerID in the bucket.    *    * @param key - Key to the bucket    * @param id - container ID that we want to lookup    * @return true or false    */
DECL|method|hasContainerID (T key, ContainerID id)
specifier|public
name|boolean
name|hasContainerID
parameter_list|(
name|T
name|key
parameter_list|,
name|ContainerID
name|id
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|attributeMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|&&
name|this
operator|.
name|attributeMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|contains
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**    * Returns true if we have the key and the containerID in the bucket.    *    * @param key - Key to the bucket    * @param id - container ID that we want to lookup    * @return true or false    */
DECL|method|hasContainerID (T key, int id)
specifier|public
name|boolean
name|hasContainerID
parameter_list|(
name|T
name|key
parameter_list|,
name|int
name|id
parameter_list|)
block|{
return|return
name|hasContainerID
argument_list|(
name|key
argument_list|,
name|ContainerID
operator|.
name|valueof
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Clears all entries for this key type.    *    * @param key - Key that identifies the Set.    */
DECL|method|clearSet (T key)
specifier|public
name|void
name|clearSet
parameter_list|(
name|T
name|key
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributeMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|attributeMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"key: {} does not exist in the attributeMap"
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Removes a container ID from the set pointed by the key.    *    * @param key - key to identify the set.    * @param value - Container ID    */
DECL|method|remove (T key, ContainerID value)
specifier|public
name|boolean
name|remove
parameter_list|(
name|T
name|key
parameter_list|,
name|ContainerID
name|value
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributeMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|attributeMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|remove
argument_list|(
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"ContainerID: {} does not exist in the set pointed by "
operator|+
literal|"key:{}"
argument_list|,
name|value
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"key: {} does not exist in the attributeMap"
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Returns the collection that maps to the given key.    *    * @param key - Key to the bucket.    * @return Underlying Set in immutable form.    */
DECL|method|getCollection (T key)
specifier|public
name|NavigableSet
argument_list|<
name|ContainerID
argument_list|>
name|getCollection
parameter_list|(
name|T
name|key
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributeMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableNavigableSet
argument_list|(
name|this
operator|.
name|attributeMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No such Key. Key {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|EMPTY_SET
return|;
block|}
comment|/**    * Moves a ContainerID from one bucket to another.    *    * @param currentKey - Current Key    * @param newKey - newKey    * @param value - ContainerID    * @throws SCMException on Error    */
DECL|method|update (T currentKey, T newKey, ContainerID value)
specifier|public
name|void
name|update
parameter_list|(
name|T
name|currentKey
parameter_list|,
name|T
name|newKey
parameter_list|,
name|ContainerID
name|value
parameter_list|)
throws|throws
name|SCMException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|currentKey
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|newKey
argument_list|)
expr_stmt|;
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|removed
operator|=
name|remove
argument_list|(
name|currentKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|removed
condition|)
block|{
throw|throw
operator|new
name|SCMException
argument_list|(
literal|"Unable to find key in the current key bucket"
argument_list|,
name|FAILED_TO_CHANGE_CONTAINER_STATE
argument_list|)
throw|;
block|}
name|insert
argument_list|(
name|newKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SCMException
name|ex
parameter_list|)
block|{
comment|// if we removed the key, insert it back to original bucket, since the
comment|// next insert failed.
name|LOG
operator|.
name|error
argument_list|(
literal|"error in update."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
name|removed
condition|)
block|{
name|insert
argument_list|(
name|currentKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"reinserted the removed key. {}"
argument_list|,
name|currentKey
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
name|ex
throw|;
block|}
block|}
block|}
end_class

end_unit

