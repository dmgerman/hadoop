begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license  * agreements. See the NOTICE file distributed with this work for additional  * information regarding  * copyright ownership. The ASF licenses this file to you under the Apache  * License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the  * License. You may obtain a  * copy of the License at  *  *<p>http://www.apache.org/licenses/LICENSE-2.0  *  *<p>Unless required by applicable law or agreed to in writing, software  * distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR  * CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing  * permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalNotification
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|block
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|block
operator|.
name|BlockManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|command
operator|.
name|CommandStatusReportHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|CloseContainerEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerActionsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerReportHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|replication
operator|.
name|ReplicationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
operator|.
name|ContainerPlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
operator|.
name|SCMContainerPlacementCapacity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|metrics
operator|.
name|ContainerStat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|metrics
operator|.
name|SCMMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
operator|.
name|ResultCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|DeadNodeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|NewNodeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeReportHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|SCMNodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|StaleNodeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|states
operator|.
name|Node2ContainerMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|ServiceRuntimeInfoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|HDDS_SCM_WATCHER_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DB_CACHE_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DB_CACHE_SIZE_MB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
operator|.
name|terminate
import|;
end_import

begin_comment
comment|/**  * StorageContainerManager is the main entry point for the service that  * provides information about  * which SCM nodes host containers.  *  *<p>DataNodes report to StorageContainerManager using heartbeat messages.  * SCM allocates containers  * and returns a pipeline.  *  *<p>A client once it gets a pipeline (a list of datanodes) will connect to  * the datanodes and  * create a container, which then can be used to store data.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"CBLOCK"
block|,
literal|"OZONE"
block|,
literal|"HBASE"
block|}
argument_list|)
DECL|class|StorageContainerManager
specifier|public
specifier|final
class|class
name|StorageContainerManager
extends|extends
name|ServiceRuntimeInfoImpl
implements|implements
name|SCMMXBean
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StorageContainerManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|USAGE
specifier|private
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"Usage: \n ozone scm [genericOptions] "
operator|+
literal|"[ "
operator|+
name|StartupOption
operator|.
name|INIT
operator|.
name|getName
argument_list|()
operator|+
literal|" [ "
operator|+
name|StartupOption
operator|.
name|CLUSTERID
operator|.
name|getName
argument_list|()
operator|+
literal|"<cid> ] ]\n "
operator|+
literal|"ozone scm [genericOptions] [ "
operator|+
name|StartupOption
operator|.
name|GENCLUSTERID
operator|.
name|getName
argument_list|()
operator|+
literal|" ]\n "
operator|+
literal|"ozone scm [ "
operator|+
name|StartupOption
operator|.
name|HELP
operator|.
name|getName
argument_list|()
operator|+
literal|" ]\n"
decl_stmt|;
comment|/**    * SCM metrics.    */
DECL|field|metrics
specifier|private
specifier|static
name|SCMMetrics
name|metrics
decl_stmt|;
comment|/*    * RPC Endpoints exposed by SCM.    */
DECL|field|datanodeProtocolServer
specifier|private
specifier|final
name|SCMDatanodeProtocolServer
name|datanodeProtocolServer
decl_stmt|;
DECL|field|blockProtocolServer
specifier|private
specifier|final
name|SCMBlockProtocolServer
name|blockProtocolServer
decl_stmt|;
DECL|field|clientProtocolServer
specifier|private
specifier|final
name|SCMClientProtocolServer
name|clientProtocolServer
decl_stmt|;
comment|/*    * State Managers of SCM.    */
DECL|field|scmNodeManager
specifier|private
specifier|final
name|NodeManager
name|scmNodeManager
decl_stmt|;
DECL|field|scmContainerManager
specifier|private
specifier|final
name|Mapping
name|scmContainerManager
decl_stmt|;
DECL|field|scmBlockManager
specifier|private
specifier|final
name|BlockManager
name|scmBlockManager
decl_stmt|;
DECL|field|scmStorage
specifier|private
specifier|final
name|SCMStorage
name|scmStorage
decl_stmt|;
DECL|field|eventQueue
specifier|private
specifier|final
name|EventQueue
name|eventQueue
decl_stmt|;
comment|/*    * HTTP endpoint for JMX access.    */
DECL|field|httpServer
specifier|private
specifier|final
name|StorageContainerManagerHttpServer
name|httpServer
decl_stmt|;
comment|/**    * SCM super user.    */
DECL|field|scmUsername
specifier|private
specifier|final
name|String
name|scmUsername
decl_stmt|;
DECL|field|scmAdminUsernames
specifier|private
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|scmAdminUsernames
decl_stmt|;
comment|/**    * SCM mxbean.    */
DECL|field|scmInfoBeanName
specifier|private
name|ObjectName
name|scmInfoBeanName
decl_stmt|;
comment|/**    * Key = DatanodeUuid, value = ContainerStat.    */
DECL|field|containerReportCache
specifier|private
name|Cache
argument_list|<
name|String
argument_list|,
name|ContainerStat
argument_list|>
name|containerReportCache
decl_stmt|;
DECL|field|replicationManager
specifier|private
specifier|final
name|ReplicationManager
name|replicationManager
decl_stmt|;
DECL|field|commandWatcherLeaseManager
specifier|private
specifier|final
name|LeaseManager
argument_list|<
name|Long
argument_list|>
name|commandWatcherLeaseManager
decl_stmt|;
comment|/**    * Creates a new StorageContainerManager. Configuration will be updated    * with information on the    * actual listening addresses used for RPC servers.    *    * @param conf configuration    */
DECL|method|StorageContainerManager (OzoneConfiguration conf)
specifier|private
name|StorageContainerManager
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|cacheSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_SCM_DB_CACHE_SIZE_MB
argument_list|,
name|OZONE_SCM_DB_CACHE_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|StorageContainerManager
operator|.
name|initMetrics
argument_list|()
expr_stmt|;
name|initContainerReportCache
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scmStorage
operator|=
operator|new
name|SCMStorage
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|scmStorage
operator|.
name|getState
argument_list|()
operator|!=
name|StorageState
operator|.
name|INITIALIZED
condition|)
block|{
throw|throw
operator|new
name|SCMException
argument_list|(
literal|"SCM not initialized."
argument_list|,
name|ResultCodes
operator|.
name|SCM_NOT_INITIALIZED
argument_list|)
throw|;
block|}
name|eventQueue
operator|=
operator|new
name|EventQueue
argument_list|()
expr_stmt|;
name|scmNodeManager
operator|=
operator|new
name|SCMNodeManager
argument_list|(
name|conf
argument_list|,
name|scmStorage
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|this
argument_list|,
name|eventQueue
argument_list|)
expr_stmt|;
name|scmContainerManager
operator|=
operator|new
name|ContainerMapping
argument_list|(
name|conf
argument_list|,
name|getScmNodeManager
argument_list|()
argument_list|,
name|cacheSize
argument_list|,
name|eventQueue
argument_list|)
expr_stmt|;
name|scmBlockManager
operator|=
operator|new
name|BlockManagerImpl
argument_list|(
name|conf
argument_list|,
name|getScmNodeManager
argument_list|()
argument_list|,
name|scmContainerManager
argument_list|,
name|eventQueue
argument_list|)
expr_stmt|;
name|Node2ContainerMap
name|node2ContainerMap
init|=
operator|new
name|Node2ContainerMap
argument_list|()
decl_stmt|;
name|CloseContainerEventHandler
name|closeContainerHandler
init|=
operator|new
name|CloseContainerEventHandler
argument_list|(
name|scmContainerManager
argument_list|)
decl_stmt|;
name|NodeReportHandler
name|nodeReportHandler
init|=
operator|new
name|NodeReportHandler
argument_list|(
name|scmNodeManager
argument_list|)
decl_stmt|;
name|ContainerReportHandler
name|containerReportHandler
init|=
operator|new
name|ContainerReportHandler
argument_list|(
name|scmContainerManager
argument_list|,
name|node2ContainerMap
argument_list|)
decl_stmt|;
name|CommandStatusReportHandler
name|cmdStatusReportHandler
init|=
operator|new
name|CommandStatusReportHandler
argument_list|()
decl_stmt|;
name|NewNodeHandler
name|newNodeHandler
init|=
operator|new
name|NewNodeHandler
argument_list|(
name|node2ContainerMap
argument_list|)
decl_stmt|;
name|StaleNodeHandler
name|staleNodeHandler
init|=
operator|new
name|StaleNodeHandler
argument_list|(
name|node2ContainerMap
argument_list|)
decl_stmt|;
name|DeadNodeHandler
name|deadNodeHandler
init|=
operator|new
name|DeadNodeHandler
argument_list|(
name|node2ContainerMap
argument_list|)
decl_stmt|;
name|ContainerActionsHandler
name|actionsHandler
init|=
operator|new
name|ContainerActionsHandler
argument_list|()
decl_stmt|;
name|eventQueue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|DATANODE_COMMAND
argument_list|,
name|scmNodeManager
argument_list|)
expr_stmt|;
name|eventQueue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|NODE_REPORT
argument_list|,
name|nodeReportHandler
argument_list|)
expr_stmt|;
name|eventQueue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|CONTAINER_REPORT
argument_list|,
name|containerReportHandler
argument_list|)
expr_stmt|;
name|eventQueue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|CONTAINER_ACTIONS
argument_list|,
name|actionsHandler
argument_list|)
expr_stmt|;
name|eventQueue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER
argument_list|,
name|closeContainerHandler
argument_list|)
expr_stmt|;
name|eventQueue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|NEW_NODE
argument_list|,
name|newNodeHandler
argument_list|)
expr_stmt|;
name|eventQueue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|STALE_NODE
argument_list|,
name|staleNodeHandler
argument_list|)
expr_stmt|;
name|eventQueue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|DEAD_NODE
argument_list|,
name|deadNodeHandler
argument_list|)
expr_stmt|;
name|eventQueue
operator|.
name|addHandler
argument_list|(
name|SCMEvents
operator|.
name|CMD_STATUS_REPORT
argument_list|,
name|cmdStatusReportHandler
argument_list|)
expr_stmt|;
name|long
name|watcherTimeout
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_WATCHER_TIMEOUT
argument_list|,
name|HDDS_SCM_WATCHER_TIMEOUT_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|commandWatcherLeaseManager
operator|=
operator|new
name|LeaseManager
argument_list|<>
argument_list|(
literal|"CommandWatcher"
argument_list|,
name|watcherTimeout
argument_list|)
expr_stmt|;
comment|//TODO: support configurable containerPlacement policy
name|ContainerPlacementPolicy
name|containerPlacementPolicy
init|=
operator|new
name|SCMContainerPlacementCapacity
argument_list|(
name|scmNodeManager
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|replicationManager
operator|=
operator|new
name|ReplicationManager
argument_list|(
name|containerPlacementPolicy
argument_list|,
name|scmContainerManager
operator|.
name|getStateManager
argument_list|()
argument_list|,
name|eventQueue
argument_list|,
name|commandWatcherLeaseManager
argument_list|)
expr_stmt|;
name|scmAdminUsernames
operator|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_ADMINISTRATORS
argument_list|)
expr_stmt|;
name|scmUsername
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|scmAdminUsernames
operator|.
name|contains
argument_list|(
name|scmUsername
argument_list|)
condition|)
block|{
name|scmAdminUsernames
operator|.
name|add
argument_list|(
name|scmUsername
argument_list|)
expr_stmt|;
block|}
name|datanodeProtocolServer
operator|=
operator|new
name|SCMDatanodeProtocolServer
argument_list|(
name|conf
argument_list|,
name|this
argument_list|,
name|eventQueue
argument_list|)
expr_stmt|;
name|blockProtocolServer
operator|=
operator|new
name|SCMBlockProtocolServer
argument_list|(
name|conf
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|clientProtocolServer
operator|=
operator|new
name|SCMClientProtocolServer
argument_list|(
name|conf
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|httpServer
operator|=
operator|new
name|StorageContainerManagerHttpServer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|registerMXBean
argument_list|()
expr_stmt|;
block|}
comment|/**    * Builds a message for logging startup information about an RPC server.    *    * @param description RPC server description    * @param addr RPC server listening address    * @return server startup message    */
DECL|method|buildRpcServerStartMessage (String description, InetSocketAddress addr)
specifier|public
specifier|static
name|String
name|buildRpcServerStartMessage
parameter_list|(
name|String
name|description
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|)
block|{
return|return
name|addr
operator|!=
literal|null
condition|?
name|String
operator|.
name|format
argument_list|(
literal|"%s is listening at %s"
argument_list|,
name|description
argument_list|,
name|addr
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|String
operator|.
name|format
argument_list|(
literal|"%s not started"
argument_list|,
name|description
argument_list|)
return|;
block|}
comment|/**    * Starts an RPC server, if configured.    *    * @param conf configuration    * @param addr configured address of RPC server    * @param protocol RPC protocol provided by RPC server    * @param instance RPC protocol implementation instance    * @param handlerCount RPC server handler count    * @return RPC server    * @throws IOException if there is an I/O error while creating RPC server    */
DECL|method|startRpcServer ( OzoneConfiguration conf, InetSocketAddress addr, Class<?> protocol, BlockingService instance, int handlerCount)
specifier|public
specifier|static
name|RPC
operator|.
name|Server
name|startRpcServer
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|BlockingService
name|instance
parameter_list|,
name|int
name|handlerCount
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|Server
name|rpcServer
init|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|protocol
argument_list|)
operator|.
name|setInstance
argument_list|(
name|instance
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|)
operator|.
name|setPort
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
name|handlerCount
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
operator|.
name|setSecretManager
argument_list|(
literal|null
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|protocol
argument_list|,
name|instance
argument_list|,
name|rpcServer
argument_list|)
expr_stmt|;
return|return
name|rpcServer
return|;
block|}
comment|/**    * Main entry point for starting StorageContainerManager.    *    * @param argv arguments    * @throws IOException if startup fails due to I/O error    */
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|DFSUtil
operator|.
name|parseHelpArgument
argument_list|(
name|argv
argument_list|,
name|USAGE
argument_list|,
name|System
operator|.
name|out
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|GenericOptionsParser
name|hParser
init|=
operator|new
name|GenericOptionsParser
argument_list|(
name|conf
argument_list|,
name|argv
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hParser
operator|.
name|isParseSuccessful
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"USAGE: "
operator|+
name|USAGE
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|hParser
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|StorageContainerManager
operator|.
name|class
argument_list|,
name|argv
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|StorageContainerManager
name|scm
init|=
name|createSCM
argument_list|(
name|hParser
operator|.
name|getRemainingArgs
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|scm
operator|!=
literal|null
condition|)
block|{
name|scm
operator|.
name|start
argument_list|()
expr_stmt|;
name|scm
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to start the StorageContainerManager."
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
literal|1
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printUsage (PrintStream out)
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
name|USAGE
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|createSCM (String[] argv, OzoneConfiguration conf)
specifier|public
specifier|static
name|StorageContainerManager
name|createSCM
parameter_list|(
name|String
index|[]
name|argv
parameter_list|,
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|HddsUtils
operator|.
name|isHddsEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"SCM cannot be started in secure mode or when "
operator|+
name|OZONE_ENABLED
operator|+
literal|""
operator|+
literal|" is set to false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|StartupOption
name|startOpt
init|=
name|parseArguments
argument_list|(
name|argv
argument_list|)
decl_stmt|;
if|if
condition|(
name|startOpt
operator|==
literal|null
condition|)
block|{
name|printUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|startOpt
condition|)
block|{
case|case
name|INIT
case|:
name|terminate
argument_list|(
name|scmInit
argument_list|(
name|conf
argument_list|)
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
case|case
name|GENCLUSTERID
case|:
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Generating new cluster id:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|StorageInfo
operator|.
name|newClusterID
argument_list|()
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
case|case
name|HELP
case|:
name|printUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
default|default:
return|return
operator|new
name|StorageContainerManager
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
comment|/**    * Routine to set up the Version info for StorageContainerManager.    *    * @param conf OzoneConfiguration    * @return true if SCM initialization is successful, false otherwise.    * @throws IOException if init fails due to I/O error    */
DECL|method|scmInit (OzoneConfiguration conf)
specifier|public
specifier|static
name|boolean
name|scmInit
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|SCMStorage
name|scmStorage
init|=
operator|new
name|SCMStorage
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|StorageState
name|state
init|=
name|scmStorage
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|!=
name|StorageState
operator|.
name|INITIALIZED
condition|)
block|{
try|try
block|{
name|String
name|clusterId
init|=
name|StartupOption
operator|.
name|INIT
operator|.
name|getClusterId
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterId
operator|!=
literal|null
operator|&&
operator|!
name|clusterId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|scmStorage
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
block|}
name|scmStorage
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SCM initialization succeeded."
operator|+
literal|"Current cluster id for sd="
operator|+
name|scmStorage
operator|.
name|getStorageDir
argument_list|()
operator|+
literal|";cid="
operator|+
name|scmStorage
operator|.
name|getClusterID
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not initialize SCM version file"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SCM already initialized. Reusing existing"
operator|+
literal|" cluster id for sd="
operator|+
name|scmStorage
operator|.
name|getStorageDir
argument_list|()
operator|+
literal|";cid="
operator|+
name|scmStorage
operator|.
name|getClusterID
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|method|parseArguments (String[] args)
specifier|private
specifier|static
name|StartupOption
name|parseArguments
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|int
name|argsLen
init|=
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|args
operator|.
name|length
decl_stmt|;
name|StartupOption
name|startOpt
init|=
name|StartupOption
operator|.
name|HELP
decl_stmt|;
if|if
condition|(
name|argsLen
operator|==
literal|0
condition|)
block|{
name|startOpt
operator|=
name|StartupOption
operator|.
name|REGULAR
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argsLen
condition|;
name|i
operator|++
control|)
block|{
name|String
name|cmd
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|StartupOption
operator|.
name|INIT
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|startOpt
operator|=
name|StartupOption
operator|.
name|INIT
expr_stmt|;
if|if
condition|(
name|argsLen
operator|>
literal|3
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|i
operator|=
name|i
operator|+
literal|1
init|;
name|i
operator|<
name|argsLen
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
name|StartupOption
operator|.
name|CLUSTERID
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|argsLen
operator|&&
operator|!
name|args
index|[
name|i
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|startOpt
operator|.
name|setClusterId
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if no cluster id specified or is empty string, return null
name|LOG
operator|.
name|error
argument_list|(
literal|"Must specify a valid cluster ID after the "
operator|+
name|StartupOption
operator|.
name|CLUSTERID
operator|.
name|getName
argument_list|()
operator|+
literal|" flag"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|StartupOption
operator|.
name|GENCLUSTERID
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argsLen
operator|>
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|startOpt
operator|=
name|StartupOption
operator|.
name|GENCLUSTERID
expr_stmt|;
block|}
block|}
block|}
return|return
name|startOpt
return|;
block|}
comment|/**    * Initialize SCM metrics.    */
DECL|method|initMetrics ()
specifier|public
specifier|static
name|void
name|initMetrics
parameter_list|()
block|{
name|metrics
operator|=
name|SCMMetrics
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
comment|/**    * Return SCM metrics instance.    */
DECL|method|getMetrics ()
specifier|public
specifier|static
name|SCMMetrics
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
operator|==
literal|null
condition|?
name|SCMMetrics
operator|.
name|create
argument_list|()
else|:
name|metrics
return|;
block|}
DECL|method|getScmStorage ()
specifier|public
name|SCMStorage
name|getScmStorage
parameter_list|()
block|{
return|return
name|scmStorage
return|;
block|}
DECL|method|getDatanodeProtocolServer ()
specifier|public
name|SCMDatanodeProtocolServer
name|getDatanodeProtocolServer
parameter_list|()
block|{
return|return
name|datanodeProtocolServer
return|;
block|}
DECL|method|getBlockProtocolServer ()
specifier|public
name|SCMBlockProtocolServer
name|getBlockProtocolServer
parameter_list|()
block|{
return|return
name|blockProtocolServer
return|;
block|}
DECL|method|getClientProtocolServer ()
specifier|public
name|SCMClientProtocolServer
name|getClientProtocolServer
parameter_list|()
block|{
return|return
name|clientProtocolServer
return|;
block|}
comment|/**    * Initialize container reports cache that sent from datanodes.    *    * @param conf    */
DECL|method|initContainerReportCache (OzoneConfiguration conf)
specifier|private
name|void
name|initContainerReportCache
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
block|{
name|containerReportCache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|maximumSize
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|removalListener
argument_list|(
operator|new
name|RemovalListener
argument_list|<
name|String
argument_list|,
name|ContainerStat
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onRemoval
parameter_list|(
name|RemovalNotification
argument_list|<
name|String
argument_list|,
name|ContainerStat
argument_list|>
name|removalNotification
parameter_list|)
block|{
synchronized|synchronized
init|(
name|containerReportCache
init|)
block|{
name|ContainerStat
name|stat
init|=
name|removalNotification
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// remove invalid container report
name|metrics
operator|.
name|decrContainerStat
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Remove expired container stat entry for datanode: "
operator|+
literal|"{}."
argument_list|,
name|removalNotification
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|registerMXBean ()
specifier|private
name|void
name|registerMXBean
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jmxProperties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|jmxProperties
operator|.
name|put
argument_list|(
literal|"component"
argument_list|,
literal|"ServerRuntime"
argument_list|)
expr_stmt|;
name|this
operator|.
name|scmInfoBeanName
operator|=
name|MBeans
operator|.
name|register
argument_list|(
literal|"StorageContainerManager"
argument_list|,
literal|"StorageContainerManagerInfo"
argument_list|,
name|jmxProperties
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterMXBean ()
specifier|private
name|void
name|unregisterMXBean
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|scmInfoBeanName
operator|!=
literal|null
condition|)
block|{
name|MBeans
operator|.
name|unregister
argument_list|(
name|this
operator|.
name|scmInfoBeanName
argument_list|)
expr_stmt|;
name|this
operator|.
name|scmInfoBeanName
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getContainerInfo (long containerID)
specifier|public
name|ContainerInfo
name|getContainerInfo
parameter_list|(
name|long
name|containerID
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|scmContainerManager
operator|.
name|getContainer
argument_list|(
name|containerID
argument_list|)
return|;
block|}
comment|/**    * Returns listening address of StorageLocation Protocol RPC server.    *    * @return listen address of StorageLocation RPC server    */
annotation|@
name|VisibleForTesting
DECL|method|getClientRpcAddress ()
specifier|public
name|InetSocketAddress
name|getClientRpcAddress
parameter_list|()
block|{
return|return
name|getClientProtocolServer
argument_list|()
operator|.
name|getClientRpcAddress
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getClientRpcPort ()
specifier|public
name|String
name|getClientRpcPort
parameter_list|()
block|{
name|InetSocketAddress
name|addr
init|=
name|getClientRpcAddress
argument_list|()
decl_stmt|;
return|return
name|addr
operator|==
literal|null
condition|?
literal|"0"
else|:
name|Integer
operator|.
name|toString
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns listening address of StorageDatanode Protocol RPC server.    *    * @return Address where datanode are communicating.    */
DECL|method|getDatanodeRpcAddress ()
specifier|public
name|InetSocketAddress
name|getDatanodeRpcAddress
parameter_list|()
block|{
return|return
name|getDatanodeProtocolServer
argument_list|()
operator|.
name|getDatanodeRpcAddress
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDatanodeRpcPort ()
specifier|public
name|String
name|getDatanodeRpcPort
parameter_list|()
block|{
name|InetSocketAddress
name|addr
init|=
name|getDatanodeRpcAddress
argument_list|()
decl_stmt|;
return|return
name|addr
operator|==
literal|null
condition|?
literal|"0"
else|:
name|Integer
operator|.
name|toString
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Start service.    */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|buildRpcServerStartMessage
argument_list|(
literal|"StorageContainerLocationProtocol RPC server"
argument_list|,
name|getClientRpcAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|initialize
argument_list|(
literal|"StorageContainerManager"
argument_list|)
expr_stmt|;
name|getClientProtocolServer
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|buildRpcServerStartMessage
argument_list|(
literal|"ScmBlockLocationProtocol RPC "
operator|+
literal|"server"
argument_list|,
name|getBlockProtocolServer
argument_list|()
operator|.
name|getBlockRpcAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getBlockProtocolServer
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|buildRpcServerStartMessage
argument_list|(
literal|"ScmDatanodeProtocl RPC "
operator|+
literal|"server"
argument_list|,
name|getDatanodeProtocolServer
argument_list|()
operator|.
name|getDatanodeRpcAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getDatanodeProtocolServer
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|scmBlockManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|replicationManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|setStartTime
argument_list|()
expr_stmt|;
block|}
comment|/**    * Stop service.    */
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping Replication Manager Service."
argument_list|)
expr_stmt|;
name|replicationManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Replication manager service stop failed."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping Lease Manager of the command watchers"
argument_list|)
expr_stmt|;
name|commandWatcherLeaseManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Lease Manager of the command watchers stop failed"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping datanode service RPC server"
argument_list|)
expr_stmt|;
name|getDatanodeProtocolServer
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Storage Container Manager datanode RPC stop failed."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping block service RPC server"
argument_list|)
expr_stmt|;
name|getBlockProtocolServer
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Storage Container Manager blockRpcServer stop failed."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping the StorageContainerLocationProtocol RPC server"
argument_list|)
expr_stmt|;
name|getClientProtocolServer
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Storage Container Manager clientRpcServer stop failed."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping Storage Container Manager HTTP server."
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Storage Container Manager HTTP server stop failed."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping Block Manager Service."
argument_list|)
expr_stmt|;
name|scmBlockManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"SCM block manager service stop failed."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containerReportCache
operator|!=
literal|null
condition|)
block|{
name|containerReportCache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
name|containerReportCache
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|unRegister
argument_list|()
expr_stmt|;
block|}
name|unregisterMXBean
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|scmContainerManager
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait until service has completed shutdown.    */
DECL|method|join ()
specifier|public
name|void
name|join
parameter_list|()
block|{
try|try
block|{
name|getBlockProtocolServer
argument_list|()
operator|.
name|join
argument_list|()
expr_stmt|;
name|getClientProtocolServer
argument_list|()
operator|.
name|join
argument_list|()
expr_stmt|;
name|getDatanodeProtocolServer
argument_list|()
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted during StorageContainerManager join."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns the Number of Datanodes that are communicating with SCM.    *    * @param nodestate Healthy, Dead etc.    * @return int -- count    */
DECL|method|getNodeCount (NodeState nodestate)
specifier|public
name|int
name|getNodeCount
parameter_list|(
name|NodeState
name|nodestate
parameter_list|)
block|{
return|return
name|scmNodeManager
operator|.
name|getNodeCount
argument_list|(
name|nodestate
argument_list|)
return|;
block|}
comment|/**    * Returns SCM container manager.    */
annotation|@
name|VisibleForTesting
DECL|method|getScmContainerManager ()
specifier|public
name|Mapping
name|getScmContainerManager
parameter_list|()
block|{
return|return
name|scmContainerManager
return|;
block|}
comment|/**    * Returns node manager.    *    * @return - Node Manager    */
annotation|@
name|VisibleForTesting
DECL|method|getScmNodeManager ()
specifier|public
name|NodeManager
name|getScmNodeManager
parameter_list|()
block|{
return|return
name|scmNodeManager
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getScmBlockManager ()
specifier|public
name|BlockManager
name|getScmBlockManager
parameter_list|()
block|{
return|return
name|scmBlockManager
return|;
block|}
DECL|method|checkAdminAccess (String remoteUser)
specifier|public
name|void
name|checkAdminAccess
parameter_list|(
name|String
name|remoteUser
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|remoteUser
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|scmAdminUsernames
operator|.
name|contains
argument_list|(
name|remoteUser
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Access denied for user "
operator|+
name|remoteUser
operator|+
literal|". Superuser privilege "
operator|+
literal|"is required."
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Invalidate container stat entry for given datanode.    *    * @param datanodeUuid    */
DECL|method|removeContainerReport (String datanodeUuid)
specifier|public
name|void
name|removeContainerReport
parameter_list|(
name|String
name|datanodeUuid
parameter_list|)
block|{
synchronized|synchronized
init|(
name|containerReportCache
init|)
block|{
name|containerReportCache
operator|.
name|invalidate
argument_list|(
name|datanodeUuid
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get container stat of specified datanode.    *    * @param datanodeUuid    * @return    */
DECL|method|getContainerReport (String datanodeUuid)
specifier|public
name|ContainerStat
name|getContainerReport
parameter_list|(
name|String
name|datanodeUuid
parameter_list|)
block|{
name|ContainerStat
name|stat
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|containerReportCache
init|)
block|{
name|stat
operator|=
name|containerReportCache
operator|.
name|getIfPresent
argument_list|(
name|datanodeUuid
argument_list|)
expr_stmt|;
block|}
return|return
name|stat
return|;
block|}
comment|/**    * Returns a view of the container stat entries. Modifications made to the    * map will directly    * affect the cache.    *    * @return    */
DECL|method|getContainerReportCache ()
specifier|public
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ContainerStat
argument_list|>
name|getContainerReportCache
parameter_list|()
block|{
return|return
name|containerReportCache
operator|.
name|asMap
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerReport ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getContainerReport
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|id2StatMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|containerReportCache
init|)
block|{
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ContainerStat
argument_list|>
name|map
init|=
name|containerReportCache
operator|.
name|asMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ContainerStat
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|id2StatMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toJsonString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|id2StatMap
return|;
block|}
comment|/**    * Startup options.    */
DECL|enum|StartupOption
specifier|public
enum|enum
name|StartupOption
block|{
DECL|enumConstant|INIT
name|INIT
argument_list|(
literal|"-init"
argument_list|)
block|,
DECL|enumConstant|CLUSTERID
name|CLUSTERID
argument_list|(
literal|"-clusterid"
argument_list|)
block|,
DECL|enumConstant|GENCLUSTERID
name|GENCLUSTERID
argument_list|(
literal|"-genclusterid"
argument_list|)
block|,
DECL|enumConstant|REGULAR
name|REGULAR
argument_list|(
literal|"-regular"
argument_list|)
block|,
DECL|enumConstant|HELP
name|HELP
argument_list|(
literal|"-help"
argument_list|)
block|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|clusterId
specifier|private
name|String
name|clusterId
init|=
literal|null
decl_stmt|;
DECL|method|StartupOption (String arg)
name|StartupOption
parameter_list|(
name|String
name|arg
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|arg
expr_stmt|;
block|}
DECL|method|getClusterId ()
specifier|public
name|String
name|getClusterId
parameter_list|()
block|{
return|return
name|clusterId
return|;
block|}
DECL|method|setClusterId (String cid)
specifier|public
name|void
name|setClusterId
parameter_list|(
name|String
name|cid
parameter_list|)
block|{
if|if
condition|(
name|cid
operator|!=
literal|null
operator|&&
operator|!
name|cid
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clusterId
operator|=
name|cid
expr_stmt|;
block|}
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
block|}
end_class

end_unit

