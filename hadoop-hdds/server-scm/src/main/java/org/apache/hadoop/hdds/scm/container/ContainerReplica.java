begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|CompareToBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|EqualsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * In-memory state of a container replica.  */
end_comment

begin_class
DECL|class|ContainerReplica
specifier|public
specifier|final
class|class
name|ContainerReplica
implements|implements
name|Comparable
argument_list|<
name|ContainerReplica
argument_list|>
block|{
DECL|field|containerID
specifier|final
specifier|private
name|ContainerID
name|containerID
decl_stmt|;
DECL|field|datanodeDetails
specifier|final
specifier|private
name|DatanodeDetails
name|datanodeDetails
decl_stmt|;
DECL|field|placeOfBirth
specifier|final
specifier|private
name|UUID
name|placeOfBirth
decl_stmt|;
DECL|field|sequenceId
specifier|private
name|Long
name|sequenceId
decl_stmt|;
DECL|method|ContainerReplica (ContainerID containerID, DatanodeDetails datanode, UUID originNodeId)
specifier|private
name|ContainerReplica
parameter_list|(
name|ContainerID
name|containerID
parameter_list|,
name|DatanodeDetails
name|datanode
parameter_list|,
name|UUID
name|originNodeId
parameter_list|)
block|{
name|this
operator|.
name|containerID
operator|=
name|containerID
expr_stmt|;
name|this
operator|.
name|datanodeDetails
operator|=
name|datanode
expr_stmt|;
name|this
operator|.
name|placeOfBirth
operator|=
name|originNodeId
expr_stmt|;
block|}
DECL|method|setSequenceId (Long seqId)
specifier|private
name|void
name|setSequenceId
parameter_list|(
name|Long
name|seqId
parameter_list|)
block|{
name|sequenceId
operator|=
name|seqId
expr_stmt|;
block|}
comment|/**    * Returns the DatanodeDetails to which this replica belongs.    *    * @return DatanodeDetails    */
DECL|method|getDatanodeDetails ()
specifier|public
name|DatanodeDetails
name|getDatanodeDetails
parameter_list|()
block|{
return|return
name|datanodeDetails
return|;
block|}
comment|/**    * Returns the UUID of Datanode where this replica originated.    *    * @return UUID    */
DECL|method|getOriginDatanodeId ()
specifier|public
name|UUID
name|getOriginDatanodeId
parameter_list|()
block|{
return|return
name|placeOfBirth
return|;
block|}
comment|/**    * Returns the Sequence Id of this replica.    *    * @return Sequence Id    */
DECL|method|getSequenceId ()
specifier|public
name|Long
name|getSequenceId
parameter_list|()
block|{
return|return
name|sequenceId
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|(
literal|61
argument_list|,
literal|71
argument_list|)
operator|.
name|append
argument_list|(
name|containerID
argument_list|)
operator|.
name|append
argument_list|(
name|datanodeDetails
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|ContainerReplica
name|that
init|=
operator|(
name|ContainerReplica
operator|)
name|o
decl_stmt|;
return|return
operator|new
name|EqualsBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|containerID
argument_list|,
name|that
operator|.
name|containerID
argument_list|)
operator|.
name|append
argument_list|(
name|datanodeDetails
argument_list|,
name|that
operator|.
name|datanodeDetails
argument_list|)
operator|.
name|isEquals
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (ContainerReplica that)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ContainerReplica
name|that
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|that
argument_list|)
expr_stmt|;
return|return
operator|new
name|CompareToBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|this
operator|.
name|containerID
argument_list|,
name|that
operator|.
name|containerID
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|datanodeDetails
argument_list|,
name|that
operator|.
name|datanodeDetails
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a new Builder to construct ContainerReplica.    *    * @return ContainerReplicaBuilder    */
DECL|method|newBuilder ()
specifier|public
specifier|static
name|ContainerReplicaBuilder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|ContainerReplicaBuilder
argument_list|()
return|;
block|}
comment|/**    * Used for building ContainerReplica instance.    */
DECL|class|ContainerReplicaBuilder
specifier|public
specifier|static
class|class
name|ContainerReplicaBuilder
block|{
DECL|field|containerID
specifier|private
name|ContainerID
name|containerID
decl_stmt|;
DECL|field|datanode
specifier|private
name|DatanodeDetails
name|datanode
decl_stmt|;
DECL|field|placeOfBirth
specifier|private
name|UUID
name|placeOfBirth
decl_stmt|;
DECL|field|sequenceId
specifier|private
name|Long
name|sequenceId
decl_stmt|;
comment|/**      * Set Container Id.      *      * @param containerId ContainerID      * @return ContainerReplicaBuilder      */
DECL|method|setContainerID ( final ContainerID containerId)
specifier|public
name|ContainerReplicaBuilder
name|setContainerID
parameter_list|(
specifier|final
name|ContainerID
name|containerId
parameter_list|)
block|{
name|containerID
operator|=
name|containerId
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set DatanodeDetails.      *      * @param datanodeDetails DatanodeDetails      * @return ContainerReplicaBuilder      */
DECL|method|setDatanodeDetails ( DatanodeDetails datanodeDetails)
specifier|public
name|ContainerReplicaBuilder
name|setDatanodeDetails
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|)
block|{
name|datanode
operator|=
name|datanodeDetails
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set replica origin node id.      *      * @param originNodeId origin node UUID      * @return ContainerReplicaBuilder      */
DECL|method|setOriginNodeId (UUID originNodeId)
specifier|public
name|ContainerReplicaBuilder
name|setOriginNodeId
parameter_list|(
name|UUID
name|originNodeId
parameter_list|)
block|{
name|placeOfBirth
operator|=
name|originNodeId
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set sequence Id of the replica.      *      * @param seqId container sequence Id      * @return ContainerReplicaBuilder      */
DECL|method|setSequenceId (long seqId)
specifier|public
name|ContainerReplicaBuilder
name|setSequenceId
parameter_list|(
name|long
name|seqId
parameter_list|)
block|{
name|sequenceId
operator|=
name|seqId
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Constructs new ContainerReplicaBuilder.      *      * @return ContainerReplicaBuilder      */
DECL|method|build ()
specifier|public
name|ContainerReplica
name|build
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containerID
argument_list|,
literal|"Container Id can't be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|datanode
argument_list|,
literal|"DatanodeDetails can't be null"
argument_list|)
expr_stmt|;
name|ContainerReplica
name|replica
init|=
operator|new
name|ContainerReplica
argument_list|(
name|containerID
argument_list|,
name|datanode
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|placeOfBirth
argument_list|)
operator|.
name|orElse
argument_list|(
name|datanode
operator|.
name|getUuid
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Optional
operator|.
name|ofNullable
argument_list|(
name|sequenceId
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|replica
operator|::
name|setSequenceId
argument_list|)
expr_stmt|;
return|return
name|replica
return|;
block|}
block|}
block|}
end_class

end_unit

