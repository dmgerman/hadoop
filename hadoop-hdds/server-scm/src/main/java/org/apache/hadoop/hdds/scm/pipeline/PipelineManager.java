begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.pipeline
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|grpc
operator|.
name|GrpcTlsConfig
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_comment
comment|/**  * Interface which exposes the api for pipeline management.  */
end_comment

begin_interface
DECL|interface|PipelineManager
specifier|public
interface|interface
name|PipelineManager
extends|extends
name|Closeable
extends|,
name|PipelineManagerMXBean
block|{
DECL|method|createPipeline (ReplicationType type, ReplicationFactor factor)
name|Pipeline
name|createPipeline
parameter_list|(
name|ReplicationType
name|type
parameter_list|,
name|ReplicationFactor
name|factor
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|createPipeline (ReplicationType type, ReplicationFactor factor, List<DatanodeDetails> nodes)
name|Pipeline
name|createPipeline
parameter_list|(
name|ReplicationType
name|type
parameter_list|,
name|ReplicationFactor
name|factor
parameter_list|,
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|nodes
parameter_list|)
function_decl|;
DECL|method|getPipeline (PipelineID pipelineID)
name|Pipeline
name|getPipeline
parameter_list|(
name|PipelineID
name|pipelineID
parameter_list|)
throws|throws
name|PipelineNotFoundException
function_decl|;
DECL|method|getPipelines ()
name|List
argument_list|<
name|Pipeline
argument_list|>
name|getPipelines
parameter_list|()
function_decl|;
DECL|method|getPipelines (ReplicationType type)
name|List
argument_list|<
name|Pipeline
argument_list|>
name|getPipelines
parameter_list|(
name|ReplicationType
name|type
parameter_list|)
function_decl|;
DECL|method|getPipelines (ReplicationType type, ReplicationFactor factor)
name|List
argument_list|<
name|Pipeline
argument_list|>
name|getPipelines
parameter_list|(
name|ReplicationType
name|type
parameter_list|,
name|ReplicationFactor
name|factor
parameter_list|)
function_decl|;
DECL|method|getPipelines (ReplicationType type, ReplicationFactor factor, Pipeline.PipelineState state)
name|List
argument_list|<
name|Pipeline
argument_list|>
name|getPipelines
parameter_list|(
name|ReplicationType
name|type
parameter_list|,
name|ReplicationFactor
name|factor
parameter_list|,
name|Pipeline
operator|.
name|PipelineState
name|state
parameter_list|)
function_decl|;
DECL|method|getPipelines (ReplicationType type, ReplicationFactor factor, Pipeline.PipelineState state, Collection<DatanodeDetails> excludeDns, Collection<PipelineID> excludePipelines)
name|List
argument_list|<
name|Pipeline
argument_list|>
name|getPipelines
parameter_list|(
name|ReplicationType
name|type
parameter_list|,
name|ReplicationFactor
name|factor
parameter_list|,
name|Pipeline
operator|.
name|PipelineState
name|state
parameter_list|,
name|Collection
argument_list|<
name|DatanodeDetails
argument_list|>
name|excludeDns
parameter_list|,
name|Collection
argument_list|<
name|PipelineID
argument_list|>
name|excludePipelines
parameter_list|)
function_decl|;
DECL|method|addContainerToPipeline (PipelineID pipelineID, ContainerID containerID)
name|void
name|addContainerToPipeline
parameter_list|(
name|PipelineID
name|pipelineID
parameter_list|,
name|ContainerID
name|containerID
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|removeContainerFromPipeline (PipelineID pipelineID, ContainerID containerID)
name|void
name|removeContainerFromPipeline
parameter_list|(
name|PipelineID
name|pipelineID
parameter_list|,
name|ContainerID
name|containerID
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|getContainersInPipeline (PipelineID pipelineID)
name|NavigableSet
argument_list|<
name|ContainerID
argument_list|>
name|getContainersInPipeline
parameter_list|(
name|PipelineID
name|pipelineID
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|getNumberOfContainers (PipelineID pipelineID)
name|int
name|getNumberOfContainers
parameter_list|(
name|PipelineID
name|pipelineID
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|openPipeline (PipelineID pipelineId)
name|void
name|openPipeline
parameter_list|(
name|PipelineID
name|pipelineId
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|finalizeAndDestroyPipeline (Pipeline pipeline, boolean onTimeout)
name|void
name|finalizeAndDestroyPipeline
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|boolean
name|onTimeout
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|startPipelineCreator ()
name|void
name|startPipelineCreator
parameter_list|()
function_decl|;
DECL|method|triggerPipelineCreation ()
name|void
name|triggerPipelineCreation
parameter_list|()
function_decl|;
DECL|method|incNumBlocksAllocatedMetric (PipelineID id)
name|void
name|incNumBlocksAllocatedMetric
parameter_list|(
name|PipelineID
name|id
parameter_list|)
function_decl|;
comment|/**    * Activates a dormant pipeline.    *    * @param pipelineID ID of the pipeline to activate.    * @throws IOException in case of any Exception    */
DECL|method|activatePipeline (PipelineID pipelineID)
name|void
name|activatePipeline
parameter_list|(
name|PipelineID
name|pipelineID
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Deactivates an active pipeline.    *    * @param pipelineID ID of the pipeline to deactivate.    * @throws IOException in case of any Exception    */
DECL|method|deactivatePipeline (PipelineID pipelineID)
name|void
name|deactivatePipeline
parameter_list|(
name|PipelineID
name|pipelineID
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|getGrpcTlsConfig ()
name|GrpcTlsConfig
name|getGrpcTlsConfig
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

