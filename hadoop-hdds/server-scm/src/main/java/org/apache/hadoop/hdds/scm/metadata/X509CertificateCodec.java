begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.ââSee the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.ââThe ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.ââYou may obtain a copy of the License at  *  * ââââ http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.metadata
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|exception
operator|.
name|SCMSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|utils
operator|.
name|CertificateCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|Codec
import|;
end_import

begin_comment
comment|/**  * Encodes and Decodes X509Certificate Class.  */
end_comment

begin_class
DECL|class|X509CertificateCodec
specifier|public
class|class
name|X509CertificateCodec
implements|implements
name|Codec
argument_list|<
name|X509Certificate
argument_list|>
block|{
annotation|@
name|Override
DECL|method|toPersistedFormat (X509Certificate object)
specifier|public
name|byte
index|[]
name|toPersistedFormat
parameter_list|(
name|X509Certificate
name|object
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|CertificateCodec
operator|.
name|getPEMEncodedString
argument_list|(
name|object
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SCMSecurityException
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|exp
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|fromPersistedFormat (byte[] rawData)
specifier|public
name|X509Certificate
name|fromPersistedFormat
parameter_list|(
name|byte
index|[]
name|rawData
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|rawData
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|CertificateCodec
operator|.
name|getX509Certificate
argument_list|(
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CertificateException
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|exp
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

