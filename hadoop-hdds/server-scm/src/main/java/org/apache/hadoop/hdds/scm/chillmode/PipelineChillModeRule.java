begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.chillmode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|chillmode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|PipelineReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|PipelineReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeHeartbeatDispatcher
operator|.
name|PipelineReportFromDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Class defining Chill mode exit criteria for Pipelines.  */
end_comment

begin_class
DECL|class|PipelineChillModeRule
specifier|public
class|class
name|PipelineChillModeRule
implements|implements
name|ChillModeExitRule
argument_list|<
name|PipelineReportFromDatanode
argument_list|>
implements|,
name|EventHandler
argument_list|<
name|PipelineReportFromDatanode
argument_list|>
block|{
comment|/** Pipeline availability.*/
DECL|field|isPipelineAvailable
specifier|private
name|AtomicBoolean
name|isPipelineAvailable
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|pipelineManager
specifier|private
specifier|final
name|PipelineManager
name|pipelineManager
decl_stmt|;
DECL|field|chillModeManager
specifier|private
specifier|final
name|SCMChillModeManager
name|chillModeManager
decl_stmt|;
DECL|method|PipelineChillModeRule (PipelineManager pipelineManager, SCMChillModeManager manager)
name|PipelineChillModeRule
parameter_list|(
name|PipelineManager
name|pipelineManager
parameter_list|,
name|SCMChillModeManager
name|manager
parameter_list|)
block|{
name|this
operator|.
name|pipelineManager
operator|=
name|pipelineManager
expr_stmt|;
name|this
operator|.
name|chillModeManager
operator|=
name|manager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate ()
specifier|public
name|boolean
name|validate
parameter_list|()
block|{
return|return
name|isPipelineAvailable
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|process (PipelineReportFromDatanode report)
specifier|public
name|void
name|process
parameter_list|(
name|PipelineReportFromDatanode
name|report
parameter_list|)
block|{
comment|// No need to deal with
block|}
annotation|@
name|Override
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
comment|// No need to deal with
block|}
annotation|@
name|Override
DECL|method|onMessage (PipelineReportFromDatanode pipelineReportFromDatanode, EventPublisher publisher)
specifier|public
name|void
name|onMessage
parameter_list|(
name|PipelineReportFromDatanode
name|pipelineReportFromDatanode
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
block|{
comment|// If we are already in pipeline available state,
comment|// skipping following check.
if|if
condition|(
name|validate
argument_list|()
condition|)
block|{
name|chillModeManager
operator|.
name|validateChillModeExitRules
argument_list|(
name|publisher
argument_list|)
expr_stmt|;
return|return;
block|}
name|Pipeline
name|pipeline
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pipelineReportFromDatanode
argument_list|)
expr_stmt|;
name|PipelineReportsProto
name|pipelineReport
init|=
name|pipelineReportFromDatanode
operator|.
name|getReport
argument_list|()
decl_stmt|;
for|for
control|(
name|PipelineReport
name|report
range|:
name|pipelineReport
operator|.
name|getPipelineReportList
argument_list|()
control|)
block|{
name|PipelineID
name|pipelineID
init|=
name|PipelineID
operator|.
name|getFromProtobuf
argument_list|(
name|report
operator|.
name|getPipelineID
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|pipeline
operator|=
name|pipelineManager
operator|.
name|getPipeline
argument_list|(
name|pipelineID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PipelineNotFoundException
name|e
parameter_list|)
block|{
continue|continue;
block|}
if|if
condition|(
name|pipeline
operator|.
name|getPipelineState
argument_list|()
operator|==
name|Pipeline
operator|.
name|PipelineState
operator|.
name|OPEN
condition|)
block|{
comment|// ensure there is an OPEN state pipeline and then allowed
comment|// to exit chill mode
name|isPipelineAvailable
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|chillModeManager
operator|.
name|getInChillMode
argument_list|()
condition|)
block|{
name|SCMChillModeManager
operator|.
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"SCM in chill mode. 1 Pipeline reported, 1 required."
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|validate
argument_list|()
condition|)
block|{
name|chillModeManager
operator|.
name|validateChillModeExitRules
argument_list|(
name|publisher
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

