begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.pipelines
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipelines
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|PipelineAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|PipelineID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMDatanodeHeartbeatDispatcher
operator|.
name|PipelineActionsFromDatanode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
operator|.
name|EventPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Handles pipeline actions from datanode.  */
end_comment

begin_class
DECL|class|PipelineActionEventHandler
specifier|public
class|class
name|PipelineActionEventHandler
implements|implements
name|EventHandler
argument_list|<
name|PipelineActionsFromDatanode
argument_list|>
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PipelineActionEventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|PipelineActionEventHandler ()
specifier|public
name|PipelineActionEventHandler
parameter_list|()
block|{    }
annotation|@
name|Override
DECL|method|onMessage (PipelineActionsFromDatanode report, EventPublisher publisher)
specifier|public
name|void
name|onMessage
parameter_list|(
name|PipelineActionsFromDatanode
name|report
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
block|{
for|for
control|(
name|PipelineAction
name|action
range|:
name|report
operator|.
name|getReport
argument_list|()
operator|.
name|getPipelineActionsList
argument_list|()
control|)
block|{
switch|switch
condition|(
name|action
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|CLOSE
case|:
name|PipelineID
name|pipelineID
init|=
name|PipelineID
operator|.
name|getFromProtobuf
argument_list|(
name|action
operator|.
name|getClosePipeline
argument_list|()
operator|.
name|getPipelineID
argument_list|()
argument_list|)
decl_stmt|;
name|publisher
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|PIPELINE_CLOSE
argument_list|,
name|pipelineID
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"unknown pipeline action:{}"
operator|+
name|action
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

