begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|AbstractProcessor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|Filer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|RoundEnvironment
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|processing
operator|.
name|SupportedAnnotationTypes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|ElementKind
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|TypeElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|Diagnostic
operator|.
name|Kind
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|FileObject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|StandardLocation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Annotation processor to generate config fragments from Config annotations.  */
end_comment

begin_class
annotation|@
name|SupportedAnnotationTypes
argument_list|(
literal|"org.apache.hadoop.hdds.conf.ConfigGroup"
argument_list|)
DECL|class|ConfigFileGenerator
specifier|public
class|class
name|ConfigFileGenerator
extends|extends
name|AbstractProcessor
block|{
DECL|field|OUTPUT_FILE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_FILE_NAME
init|=
literal|"ozone-default-generated.xml"
decl_stmt|;
annotation|@
name|Override
DECL|method|process (Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)
specifier|public
name|boolean
name|process
parameter_list|(
name|Set
argument_list|<
name|?
extends|extends
name|TypeElement
argument_list|>
name|annotations
parameter_list|,
name|RoundEnvironment
name|roundEnv
parameter_list|)
block|{
if|if
condition|(
name|roundEnv
operator|.
name|processingOver
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Filer
name|filer
init|=
name|processingEnv
operator|.
name|getFiler
argument_list|()
decl_stmt|;
try|try
block|{
comment|//load existing generated config (if exists)
name|ConfigFileAppender
name|appender
init|=
operator|new
name|ConfigFileAppender
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|input
init|=
name|filer
operator|.
name|getResource
argument_list|(
name|StandardLocation
operator|.
name|CLASS_OUTPUT
argument_list|,
literal|""
argument_list|,
name|OUTPUT_FILE_NAME
argument_list|)
operator|.
name|openInputStream
argument_list|()
init|)
block|{
name|appender
operator|.
name|load
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
name|appender
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|annotatedElements
init|=
name|roundEnv
operator|.
name|getElementsAnnotatedWith
argument_list|(
name|ConfigGroup
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|annotatedElement
range|:
name|annotatedElements
control|)
block|{
name|TypeElement
name|configGroup
init|=
operator|(
name|TypeElement
operator|)
name|annotatedElement
decl_stmt|;
comment|//check if any of the setters are annotated with @Config
for|for
control|(
name|Element
name|element
range|:
name|configGroup
operator|.
name|getEnclosedElements
argument_list|()
control|)
block|{
if|if
condition|(
name|element
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|METHOD
condition|)
block|{
name|processingEnv
operator|.
name|getMessager
argument_list|()
operator|.
name|printMessage
argument_list|(
name|Kind
operator|.
name|WARNING
argument_list|,
name|element
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
operator|&&
name|element
operator|.
name|getAnnotation
argument_list|(
name|Config
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|//update the ozone-site-generated.xml
name|Config
name|configAnnotation
init|=
name|element
operator|.
name|getAnnotation
argument_list|(
name|Config
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConfigGroup
name|configGroupAnnotation
init|=
name|configGroup
operator|.
name|getAnnotation
argument_list|(
name|ConfigGroup
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|configGroupAnnotation
operator|.
name|prefix
argument_list|()
operator|+
literal|"."
operator|+
name|configAnnotation
operator|.
name|key
argument_list|()
decl_stmt|;
name|appender
operator|.
name|addConfig
argument_list|(
name|key
argument_list|,
name|configAnnotation
operator|.
name|defaultValue
argument_list|()
argument_list|,
name|configAnnotation
operator|.
name|description
argument_list|()
argument_list|,
name|configAnnotation
operator|.
name|tags
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|FileObject
name|resource
init|=
name|filer
operator|.
name|createResource
argument_list|(
name|StandardLocation
operator|.
name|CLASS_OUTPUT
argument_list|,
literal|""
argument_list|,
name|OUTPUT_FILE_NAME
argument_list|)
decl_stmt|;
try|try
init|(
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|resource
operator|.
name|openOutputStream
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|appender
operator|.
name|write
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|processingEnv
operator|.
name|getMessager
argument_list|()
operator|.
name|printMessage
argument_list|(
name|Kind
operator|.
name|ERROR
argument_list|,
literal|"Can't generate the config file from annotation: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

