begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_comment
comment|/**  * Simple DOM based config file writer.  *<p>  * This class can init/load existing ozone-default-generated.xml fragments  * and append new entries and write to the file system.  */
end_comment

begin_class
DECL|class|ConfigFileAppender
specifier|public
class|class
name|ConfigFileAppender
block|{
DECL|field|document
specifier|private
name|Document
name|document
decl_stmt|;
DECL|field|builder
specifier|private
specifier|final
name|DocumentBuilder
name|builder
decl_stmt|;
DECL|method|ConfigFileAppender ()
specifier|public
name|ConfigFileAppender
parameter_list|()
block|{
try|try
block|{
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|builder
operator|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Can initialize new configuration"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Initialize a new ozone-site.xml structure with empty content.    */
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
try|try
block|{
name|document
operator|=
name|builder
operator|.
name|newDocument
argument_list|()
expr_stmt|;
name|document
operator|.
name|appendChild
argument_list|(
name|document
operator|.
name|createElement
argument_list|(
literal|"configuration"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Can initialize new configuration"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Load existing ozone-site.xml content and parse the DOM tree.    */
DECL|method|load (InputStream stream)
specifier|public
name|void
name|load
parameter_list|(
name|InputStream
name|stream
parameter_list|)
block|{
try|try
block|{
name|document
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Can't load existing configuration"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Add configuration fragment.    */
DECL|method|addConfig (String key, String defaultValue, String description, ConfigTag[] tags)
specifier|public
name|void
name|addConfig
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|String
name|description
parameter_list|,
name|ConfigTag
index|[]
name|tags
parameter_list|)
block|{
name|Element
name|root
init|=
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|Element
name|propertyElement
init|=
name|document
operator|.
name|createElement
argument_list|(
literal|"property"
argument_list|)
decl_stmt|;
name|addXmlElement
argument_list|(
name|propertyElement
argument_list|,
literal|"name"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|addXmlElement
argument_list|(
name|propertyElement
argument_list|,
literal|"value"
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
name|addXmlElement
argument_list|(
name|propertyElement
argument_list|,
literal|"description"
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|String
name|tagsAsString
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|tags
argument_list|)
operator|.
name|map
argument_list|(
name|tag
lambda|->
name|tag
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
decl_stmt|;
name|addXmlElement
argument_list|(
name|propertyElement
argument_list|,
literal|"tag"
argument_list|,
name|tagsAsString
argument_list|)
expr_stmt|;
name|root
operator|.
name|appendChild
argument_list|(
name|propertyElement
argument_list|)
expr_stmt|;
block|}
DECL|method|addXmlElement (Element parentElement, String tagValue, String textValue)
specifier|private
name|void
name|addXmlElement
parameter_list|(
name|Element
name|parentElement
parameter_list|,
name|String
name|tagValue
parameter_list|,
name|String
name|textValue
parameter_list|)
block|{
name|Element
name|element
init|=
name|document
operator|.
name|createElement
argument_list|(
name|tagValue
argument_list|)
decl_stmt|;
name|element
operator|.
name|appendChild
argument_list|(
name|document
operator|.
name|createTextNode
argument_list|(
name|textValue
argument_list|)
argument_list|)
expr_stmt|;
name|parentElement
operator|.
name|appendChild
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write out the XML content to a writer.    */
DECL|method|write (Writer writer)
specifier|public
name|void
name|write
parameter_list|(
name|Writer
name|writer
parameter_list|)
block|{
try|try
block|{
name|TransformerFactory
name|transformerFactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Transformer
name|transf
init|=
name|transformerFactory
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|transf
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|transf
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|transf
operator|.
name|setOutputProperty
argument_list|(
literal|"{http://xml.apache.org/xslt}indent-amount"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|transf
operator|.
name|transform
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|document
argument_list|)
argument_list|,
operator|new
name|StreamResult
argument_list|(
name|writer
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Can't write the configuration xml"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

