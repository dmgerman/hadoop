begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Example configuration to test the configuration injection.  */
end_comment

begin_class
annotation|@
name|ConfigGroup
argument_list|(
name|prefix
operator|=
literal|"ozone.scm.client"
argument_list|)
DECL|class|ConfigurationExample
specifier|public
class|class
name|ConfigurationExample
block|{
DECL|field|clientAddress
specifier|private
name|String
name|clientAddress
decl_stmt|;
DECL|field|bindHost
specifier|private
name|String
name|bindHost
decl_stmt|;
DECL|field|compressionEnabled
specifier|private
name|boolean
name|compressionEnabled
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
init|=
literal|1234
decl_stmt|;
DECL|field|waitTime
specifier|private
name|long
name|waitTime
init|=
literal|1
decl_stmt|;
annotation|@
name|Config
argument_list|(
name|key
operator|=
literal|"address"
argument_list|,
name|defaultValue
operator|=
literal|"localhost"
argument_list|,
name|description
operator|=
literal|"Client "
operator|+
literal|"addres (To test string injection)."
argument_list|,
name|tags
operator|=
name|ConfigTag
operator|.
name|MANAGEMENT
argument_list|)
DECL|method|setClientAddress (String clientAddress)
specifier|public
name|void
name|setClientAddress
parameter_list|(
name|String
name|clientAddress
parameter_list|)
block|{
name|this
operator|.
name|clientAddress
operator|=
name|clientAddress
expr_stmt|;
block|}
annotation|@
name|Config
argument_list|(
name|key
operator|=
literal|"bind.host"
argument_list|,
name|defaultValue
operator|=
literal|"0.0.0.0"
argument_list|,
name|description
operator|=
literal|"Bind "
operator|+
literal|"host(To test string injection)."
argument_list|,
name|tags
operator|=
name|ConfigTag
operator|.
name|MANAGEMENT
argument_list|)
DECL|method|setBindHost (String bindHost)
specifier|public
name|void
name|setBindHost
parameter_list|(
name|String
name|bindHost
parameter_list|)
block|{
name|this
operator|.
name|bindHost
operator|=
name|bindHost
expr_stmt|;
block|}
annotation|@
name|Config
argument_list|(
name|key
operator|=
literal|"compression.enabled"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"Compression enabled. (Just to test boolean flag)"
argument_list|,
name|tags
operator|=
name|ConfigTag
operator|.
name|MANAGEMENT
argument_list|)
DECL|method|setCompressionEnabled (boolean compressionEnabled)
specifier|public
name|void
name|setCompressionEnabled
parameter_list|(
name|boolean
name|compressionEnabled
parameter_list|)
block|{
name|this
operator|.
name|compressionEnabled
operator|=
name|compressionEnabled
expr_stmt|;
block|}
annotation|@
name|Config
argument_list|(
name|key
operator|=
literal|"port"
argument_list|,
name|defaultValue
operator|=
literal|"1234"
argument_list|,
name|description
operator|=
literal|"Port number "
operator|+
literal|"config (To test in injection)"
argument_list|,
name|tags
operator|=
name|ConfigTag
operator|.
name|MANAGEMENT
argument_list|)
DECL|method|setPort (int port)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
annotation|@
name|Config
argument_list|(
name|key
operator|=
literal|"wait"
argument_list|,
name|type
operator|=
name|ConfigType
operator|.
name|TIME
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|defaultValue
operator|=
literal|"30m"
argument_list|,
name|description
operator|=
literal|"Wait time (To "
operator|+
literal|"test TIME config type)"
argument_list|,
name|tags
operator|=
name|ConfigTag
operator|.
name|MANAGEMENT
argument_list|)
DECL|method|setWaitTime (long waitTime)
specifier|public
name|void
name|setWaitTime
parameter_list|(
name|long
name|waitTime
parameter_list|)
block|{
name|this
operator|.
name|waitTime
operator|=
name|waitTime
expr_stmt|;
block|}
DECL|method|getClientAddress ()
specifier|public
name|String
name|getClientAddress
parameter_list|()
block|{
return|return
name|clientAddress
return|;
block|}
DECL|method|getBindHost ()
specifier|public
name|String
name|getBindHost
parameter_list|()
block|{
return|return
name|bindHost
return|;
block|}
DECL|method|isCompressionEnabled ()
specifier|public
name|boolean
name|isCompressionEnabled
parameter_list|()
block|{
return|return
name|compressionEnabled
return|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|getWaitTime ()
specifier|public
name|long
name|getWaitTime
parameter_list|()
block|{
return|return
name|waitTime
return|;
block|}
block|}
end_class

end_unit

