begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ContainerBlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChecksumType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|token
operator|.
name|OzoneBlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
operator|.
name|TestChunkInputStream
operator|.
name|generateRandomData
import|;
end_import

begin_comment
comment|/**  * Tests for {@link BlockInputStream}'s functionality.  */
end_comment

begin_class
DECL|class|TestBlockInputStream
specifier|public
class|class
name|TestBlockInputStream
block|{
DECL|field|CHUNK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|CHUNK_SIZE
init|=
literal|100
decl_stmt|;
DECL|field|checksum
specifier|private
specifier|static
name|Checksum
name|checksum
decl_stmt|;
DECL|field|blockStream
specifier|private
name|BlockInputStream
name|blockStream
decl_stmt|;
DECL|field|blockData
specifier|private
name|byte
index|[]
name|blockData
decl_stmt|;
DECL|field|blockSize
specifier|private
name|int
name|blockSize
decl_stmt|;
DECL|field|chunks
specifier|private
name|List
argument_list|<
name|ChunkInfo
argument_list|>
name|chunks
decl_stmt|;
DECL|field|chunkDataMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|chunkDataMap
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockID
name|blockID
init|=
operator|new
name|BlockID
argument_list|(
operator|new
name|ContainerBlockID
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|checksum
operator|=
operator|new
name|Checksum
argument_list|(
name|ChecksumType
operator|.
name|NONE
argument_list|,
name|CHUNK_SIZE
argument_list|)
expr_stmt|;
name|createChunkList
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|blockStream
operator|=
operator|new
name|DummyBlockInputStream
argument_list|(
name|blockID
argument_list|,
name|blockSize
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a mock list of chunks. The first n-1 chunks of length CHUNK_SIZE    * and the last chunk with length CHUNK_SIZE/2.    */
DECL|method|createChunkList (int numChunks)
specifier|private
name|void
name|createChunkList
parameter_list|(
name|int
name|numChunks
parameter_list|)
throws|throws
name|Exception
block|{
name|chunks
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numChunks
argument_list|)
expr_stmt|;
name|chunkDataMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|blockData
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
name|int
name|i
decl_stmt|,
name|chunkLen
decl_stmt|;
name|byte
index|[]
name|byteData
decl_stmt|;
name|String
name|chunkName
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|numChunks
condition|;
name|i
operator|++
control|)
block|{
name|chunkName
operator|=
literal|"chunk-"
operator|+
name|i
expr_stmt|;
name|chunkLen
operator|=
name|CHUNK_SIZE
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|numChunks
operator|-
literal|1
condition|)
block|{
name|chunkLen
operator|=
name|CHUNK_SIZE
operator|/
literal|2
expr_stmt|;
block|}
name|byteData
operator|=
name|generateRandomData
argument_list|(
name|chunkLen
argument_list|)
expr_stmt|;
name|ChunkInfo
name|chunkInfo
init|=
name|ChunkInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setChunkName
argument_list|(
name|chunkName
argument_list|)
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
operator|.
name|setLen
argument_list|(
name|chunkLen
argument_list|)
operator|.
name|setChecksumData
argument_list|(
name|checksum
operator|.
name|computeChecksum
argument_list|(
name|byteData
argument_list|,
literal|0
argument_list|,
name|chunkLen
argument_list|)
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|chunkDataMap
operator|.
name|put
argument_list|(
name|chunkName
argument_list|,
name|byteData
argument_list|)
expr_stmt|;
name|chunks
operator|.
name|add
argument_list|(
name|chunkInfo
argument_list|)
expr_stmt|;
name|blockSize
operator|+=
name|chunkLen
expr_stmt|;
name|blockData
operator|=
name|Bytes
operator|.
name|concat
argument_list|(
name|blockData
argument_list|,
name|byteData
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A dummy BlockInputStream to mock read block call to DN.    */
DECL|class|DummyBlockInputStream
specifier|private
class|class
name|DummyBlockInputStream
extends|extends
name|BlockInputStream
block|{
DECL|method|DummyBlockInputStream (BlockID blockId, long blockLen, Pipeline pipeline, Token<OzoneBlockTokenIdentifier> token, boolean verifyChecksum, XceiverClientManager xceiverClientManager)
name|DummyBlockInputStream
parameter_list|(
name|BlockID
name|blockId
parameter_list|,
name|long
name|blockLen
parameter_list|,
name|Pipeline
name|pipeline
parameter_list|,
name|Token
argument_list|<
name|OzoneBlockTokenIdentifier
argument_list|>
name|token
parameter_list|,
name|boolean
name|verifyChecksum
parameter_list|,
name|XceiverClientManager
name|xceiverClientManager
parameter_list|)
block|{
name|super
argument_list|(
name|blockId
argument_list|,
name|blockLen
argument_list|,
name|pipeline
argument_list|,
name|token
argument_list|,
name|verifyChecksum
argument_list|,
name|xceiverClientManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getChunkInfos ()
specifier|protected
name|List
argument_list|<
name|ChunkInfo
argument_list|>
name|getChunkInfos
parameter_list|()
block|{
return|return
name|chunks
return|;
block|}
annotation|@
name|Override
DECL|method|addStream (ChunkInfo chunkInfo)
specifier|protected
name|void
name|addStream
parameter_list|(
name|ChunkInfo
name|chunkInfo
parameter_list|)
block|{
name|TestChunkInputStream
name|testChunkInputStream
init|=
operator|new
name|TestChunkInputStream
argument_list|()
decl_stmt|;
name|getChunkStreams
argument_list|()
operator|.
name|add
argument_list|(
name|testChunkInputStream
operator|.
expr|new
name|DummyChunkInputStream
argument_list|(
name|chunkInfo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|chunkDataMap
operator|.
name|get
argument_list|(
name|chunkInfo
operator|.
name|getChunkName
argument_list|()
argument_list|)
operator|.
name|clone
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkOpen ()
specifier|protected
specifier|synchronized
name|void
name|checkOpen
parameter_list|()
throws|throws
name|IOException
block|{
comment|// No action needed
block|}
block|}
DECL|method|seekAndVerify (int pos)
specifier|private
name|void
name|seekAndVerify
parameter_list|(
name|int
name|pos
parameter_list|)
throws|throws
name|Exception
block|{
name|blockStream
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Current position of buffer does not match with the "
operator|+
literal|"seeked position"
argument_list|,
name|pos
argument_list|,
name|blockStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Match readData with the chunkData byte-wise.    * @param readData Data read through ChunkInputStream    * @param inputDataStartIndex first index (inclusive) in chunkData to compare    *                            with read data    * @param length the number of bytes of data to match starting from    *               inputDataStartIndex    */
DECL|method|matchWithInputData (byte[] readData, int inputDataStartIndex, int length)
specifier|private
name|void
name|matchWithInputData
parameter_list|(
name|byte
index|[]
name|readData
parameter_list|,
name|int
name|inputDataStartIndex
parameter_list|,
name|int
name|length
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|inputDataStartIndex
init|;
name|i
operator|<
name|inputDataStartIndex
operator|+
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|blockData
index|[
name|i
index|]
argument_list|,
name|readData
index|[
name|i
operator|-
name|inputDataStartIndex
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSeek ()
specifier|public
name|void
name|testSeek
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Seek to position 0
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|seekAndVerify
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ChunkIndex is incorrect"
argument_list|,
literal|0
argument_list|,
name|blockStream
operator|.
name|getChunkIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|// Before BlockInputStream is initialized (initialization happens during
comment|// read operation), seek should update the BlockInputStream#blockPosition
name|pos
operator|=
name|CHUNK_SIZE
expr_stmt|;
name|seekAndVerify
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ChunkIndex is incorrect"
argument_list|,
literal|0
argument_list|,
name|blockStream
operator|.
name|getChunkIndex
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pos
argument_list|,
name|blockStream
operator|.
name|getBlockPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// Initialize the BlockInputStream. After initializtion, the chunkIndex
comment|// should be updated to correspond to the seeked position.
name|blockStream
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ChunkIndex is incorrect"
argument_list|,
literal|1
argument_list|,
name|blockStream
operator|.
name|getChunkIndex
argument_list|()
argument_list|)
expr_stmt|;
name|pos
operator|=
operator|(
name|CHUNK_SIZE
operator|*
literal|4
operator|)
operator|+
literal|5
expr_stmt|;
name|seekAndVerify
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ChunkIndex is incorrect"
argument_list|,
literal|4
argument_list|,
name|blockStream
operator|.
name|getChunkIndex
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Try seeking beyond the blockSize.
name|pos
operator|=
name|blockSize
operator|+
literal|10
expr_stmt|;
name|seekAndVerify
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Seek to position beyond block size should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Seek to random positions between 0 and the block size.
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|pos
operator|=
name|random
operator|.
name|nextInt
argument_list|(
name|blockSize
argument_list|)
expr_stmt|;
name|seekAndVerify
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRead ()
specifier|public
name|void
name|testRead
parameter_list|()
throws|throws
name|Exception
block|{
comment|// read 200 bytes of data starting from position 50. Chunk0 contains
comment|// indices 0 to 99, chunk1 from 100 to 199 and chunk3 from 200 to 299. So
comment|// the read should result in 3 ChunkInputStream reads
name|seekAndVerify
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|200
index|]
decl_stmt|;
name|blockStream
operator|.
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|matchWithInputData
argument_list|(
name|b
argument_list|,
literal|50
argument_list|,
literal|200
argument_list|)
expr_stmt|;
comment|// The new position of the blockInputStream should be the last index read
comment|// + 1.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|250
argument_list|,
name|blockStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|blockStream
operator|.
name|getChunkIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSeekAndRead ()
specifier|public
name|void
name|testSeekAndRead
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Seek to a position and read data
name|seekAndVerify
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b1
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|blockStream
operator|.
name|read
argument_list|(
name|b1
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|matchWithInputData
argument_list|(
name|b1
argument_list|,
literal|50
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// Next read should start from the position of the last read + 1 i.e. 100
name|byte
index|[]
name|b2
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|blockStream
operator|.
name|read
argument_list|(
name|b2
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|matchWithInputData
argument_list|(
name|b2
argument_list|,
literal|150
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

