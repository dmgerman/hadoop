begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ContainerBlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChecksumData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChecksumType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * Tests {@link BlockInputStream}.  */
end_comment

begin_class
DECL|class|TestBlockInputStream
specifier|public
class|class
name|TestBlockInputStream
block|{
DECL|field|blockInputStream
specifier|private
specifier|static
name|BlockInputStream
name|blockInputStream
decl_stmt|;
DECL|field|chunks
specifier|private
specifier|static
name|List
argument_list|<
name|ChunkInfo
argument_list|>
name|chunks
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|static
name|int
name|blockSize
decl_stmt|;
DECL|field|CHUNK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|CHUNK_SIZE
init|=
literal|20
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockID
name|blockID
init|=
operator|new
name|BlockID
argument_list|(
operator|new
name|ContainerBlockID
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|chunks
operator|=
name|createChunkList
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|String
name|traceID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|blockInputStream
operator|=
operator|new
name|DummyBlockInputStream
argument_list|(
name|blockID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|chunks
argument_list|,
name|traceID
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|blockSize
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|ChunkInfo
name|chunk
range|:
name|chunks
control|)
block|{
name|blockSize
operator|+=
name|chunk
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Create a mock list of chunks. The first n-1 chunks of length CHUNK_SIZE    * and the last chunk with length CHUNK_SIZE/2.    * @param numChunks    * @return    */
DECL|method|createChunkList (int numChunks)
specifier|private
specifier|static
name|List
argument_list|<
name|ChunkInfo
argument_list|>
name|createChunkList
parameter_list|(
name|int
name|numChunks
parameter_list|)
block|{
name|ChecksumData
name|dummyChecksumData
init|=
name|ChecksumData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|ChecksumType
operator|.
name|NONE
argument_list|)
operator|.
name|setBytesPerChecksum
argument_list|(
literal|100
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChunkInfo
argument_list|>
name|chunkList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numChunks
argument_list|)
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|numChunks
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|String
name|chunkName
init|=
literal|"chunk-"
operator|+
name|i
decl_stmt|;
name|ChunkInfo
name|chunkInfo
init|=
name|ChunkInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setChunkName
argument_list|(
name|chunkName
argument_list|)
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
operator|.
name|setLen
argument_list|(
name|CHUNK_SIZE
argument_list|)
operator|.
name|setChecksumData
argument_list|(
name|dummyChecksumData
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|chunkList
operator|.
name|add
argument_list|(
name|chunkInfo
argument_list|)
expr_stmt|;
block|}
name|ChunkInfo
name|chunkInfo
init|=
name|ChunkInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setChunkName
argument_list|(
literal|"chunk-"
operator|+
name|i
argument_list|)
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
operator|.
name|setLen
argument_list|(
name|CHUNK_SIZE
operator|/
literal|2
argument_list|)
operator|.
name|setChecksumData
argument_list|(
name|dummyChecksumData
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|chunkList
operator|.
name|add
argument_list|(
name|chunkInfo
argument_list|)
expr_stmt|;
return|return
name|chunkList
return|;
block|}
comment|/**    * A dummy BlockInputStream to test the functionality of BlockInputStream.    */
DECL|class|DummyBlockInputStream
specifier|private
specifier|static
class|class
name|DummyBlockInputStream
extends|extends
name|BlockInputStream
block|{
DECL|method|DummyBlockInputStream (BlockID blockID, XceiverClientManager xceiverClientManager, XceiverClientSpi xceiverClient, List<ChunkInfo> chunks, String traceID, boolean verifyChecksum, long initialPosition)
name|DummyBlockInputStream
parameter_list|(
name|BlockID
name|blockID
parameter_list|,
name|XceiverClientManager
name|xceiverClientManager
parameter_list|,
name|XceiverClientSpi
name|xceiverClient
parameter_list|,
name|List
argument_list|<
name|ChunkInfo
argument_list|>
name|chunks
parameter_list|,
name|String
name|traceID
parameter_list|,
name|boolean
name|verifyChecksum
parameter_list|,
name|long
name|initialPosition
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|blockID
argument_list|,
name|xceiverClientManager
argument_list|,
name|xceiverClient
argument_list|,
name|chunks
argument_list|,
name|traceID
argument_list|,
name|verifyChecksum
argument_list|,
name|initialPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readChunk (final ChunkInfo chunkInfo, List<DatanodeDetails> excludeDns, List<DatanodeDetails> dnListFromReply)
specifier|protected
name|ByteString
name|readChunk
parameter_list|(
specifier|final
name|ChunkInfo
name|chunkInfo
parameter_list|,
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|excludeDns
parameter_list|,
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|dnListFromReply
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getByteString
argument_list|(
name|chunkInfo
operator|.
name|getChunkName
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|chunkInfo
operator|.
name|getLen
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDatanodeList ()
specifier|protected
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|getDatanodeList
parameter_list|()
block|{
comment|// return an empty dummy list of size 10
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
return|;
block|}
comment|/**      * Create ByteString with the input data to return when a readChunk call is      * placed.      */
DECL|method|getByteString (String data, int length)
specifier|private
specifier|static
name|ByteString
name|getByteString
parameter_list|(
name|String
name|data
parameter_list|,
name|int
name|length
parameter_list|)
block|{
while|while
condition|(
name|data
operator|.
name|length
argument_list|()
operator|<
name|length
condition|)
block|{
name|data
operator|=
name|data
operator|+
literal|"0"
expr_stmt|;
block|}
return|return
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSeek ()
specifier|public
name|void
name|testSeek
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Seek to position 0
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|seekAndVerify
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ChunkIndex is incorrect"
argument_list|,
literal|0
argument_list|,
name|blockInputStream
operator|.
name|getChunkIndex
argument_list|()
argument_list|)
expr_stmt|;
name|pos
operator|=
name|CHUNK_SIZE
expr_stmt|;
name|seekAndVerify
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ChunkIndex is incorrect"
argument_list|,
literal|1
argument_list|,
name|blockInputStream
operator|.
name|getChunkIndex
argument_list|()
argument_list|)
expr_stmt|;
name|pos
operator|=
operator|(
name|CHUNK_SIZE
operator|*
literal|5
operator|)
operator|+
literal|5
expr_stmt|;
name|seekAndVerify
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ChunkIndex is incorrect"
argument_list|,
literal|5
argument_list|,
name|blockInputStream
operator|.
name|getChunkIndex
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Try seeking beyond the blockSize.
name|pos
operator|=
name|blockSize
operator|+
literal|10
expr_stmt|;
name|seekAndVerify
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Seek to position beyond block size should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
comment|// Seek to random positions between 0 and the block size.
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|pos
operator|=
name|random
operator|.
name|nextInt
argument_list|(
name|blockSize
argument_list|)
expr_stmt|;
name|seekAndVerify
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBlockEOF ()
specifier|public
name|void
name|testBlockEOF
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Seek to some position< blockSize and verify EOF is not reached.
name|seekAndVerify
argument_list|(
name|CHUNK_SIZE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|blockInputStream
operator|.
name|blockStreamEOF
argument_list|()
argument_list|)
expr_stmt|;
comment|// Seek to blockSize-1 and verify that EOF is not reached as the chunk
comment|// has not been read from container yet.
name|seekAndVerify
argument_list|(
name|blockSize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|blockInputStream
operator|.
name|blockStreamEOF
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|seekAndVerify (int pos)
specifier|private
name|void
name|seekAndVerify
parameter_list|(
name|int
name|pos
parameter_list|)
throws|throws
name|Exception
block|{
name|blockInputStream
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Current position of buffer does not match with the "
operator|+
literal|"seeked position"
argument_list|,
name|pos
argument_list|,
name|blockInputStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

