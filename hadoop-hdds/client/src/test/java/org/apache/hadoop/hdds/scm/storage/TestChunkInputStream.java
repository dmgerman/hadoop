begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChecksumType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ChunkInputStream}'s functionality.  */
end_comment

begin_class
DECL|class|TestChunkInputStream
specifier|public
class|class
name|TestChunkInputStream
block|{
DECL|field|CHUNK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|CHUNK_SIZE
init|=
literal|100
decl_stmt|;
DECL|field|BYTES_PER_CHECKSUM
specifier|private
specifier|static
specifier|final
name|int
name|BYTES_PER_CHECKSUM
init|=
literal|20
decl_stmt|;
DECL|field|CHUNK_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CHUNK_NAME
init|=
literal|"dummyChunk"
decl_stmt|;
DECL|field|RANDOM
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|checksum
specifier|private
specifier|static
name|Checksum
name|checksum
decl_stmt|;
DECL|field|chunkStream
specifier|private
name|DummyChunkInputStream
name|chunkStream
decl_stmt|;
DECL|field|chunkInfo
specifier|private
name|ChunkInfo
name|chunkInfo
decl_stmt|;
DECL|field|chunkData
specifier|private
name|byte
index|[]
name|chunkData
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|checksum
operator|=
operator|new
name|Checksum
argument_list|(
name|ChecksumType
operator|.
name|valueOf
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_CHECKSUM_TYPE_DEFAULT
argument_list|)
argument_list|,
name|BYTES_PER_CHECKSUM
argument_list|)
expr_stmt|;
name|chunkData
operator|=
name|generateRandomData
argument_list|(
name|CHUNK_SIZE
argument_list|)
expr_stmt|;
name|chunkInfo
operator|=
name|ChunkInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setChunkName
argument_list|(
name|CHUNK_NAME
argument_list|)
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
operator|.
name|setLen
argument_list|(
name|CHUNK_SIZE
argument_list|)
operator|.
name|setChecksumData
argument_list|(
name|checksum
operator|.
name|computeChecksum
argument_list|(
name|chunkData
argument_list|,
literal|0
argument_list|,
name|CHUNK_SIZE
argument_list|)
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|chunkStream
operator|=
operator|new
name|DummyChunkInputStream
argument_list|(
name|chunkInfo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|generateRandomData (int length)
specifier|static
name|byte
index|[]
name|generateRandomData
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|RANDOM
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
block|}
comment|/**    * A dummy ChunkInputStream to mock read chunk calls to DN.    */
DECL|class|DummyChunkInputStream
specifier|public
class|class
name|DummyChunkInputStream
extends|extends
name|ChunkInputStream
block|{
comment|// Stores the read chunk data in each readChunk call
DECL|field|readByteBuffers
specifier|private
name|List
argument_list|<
name|ByteString
argument_list|>
name|readByteBuffers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|DummyChunkInputStream (ChunkInfo chunkInfo, BlockID blockId, XceiverClientSpi xceiverClient, boolean verifyChecksum)
name|DummyChunkInputStream
parameter_list|(
name|ChunkInfo
name|chunkInfo
parameter_list|,
name|BlockID
name|blockId
parameter_list|,
name|XceiverClientSpi
name|xceiverClient
parameter_list|,
name|boolean
name|verifyChecksum
parameter_list|)
block|{
name|super
argument_list|(
name|chunkInfo
argument_list|,
name|blockId
argument_list|,
name|xceiverClient
argument_list|,
name|verifyChecksum
argument_list|)
expr_stmt|;
block|}
DECL|method|DummyChunkInputStream (ChunkInfo chunkInfo, BlockID blockId, XceiverClientSpi xceiverClient, boolean verifyChecksum, byte[] data)
specifier|public
name|DummyChunkInputStream
parameter_list|(
name|ChunkInfo
name|chunkInfo
parameter_list|,
name|BlockID
name|blockId
parameter_list|,
name|XceiverClientSpi
name|xceiverClient
parameter_list|,
name|boolean
name|verifyChecksum
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
name|super
argument_list|(
name|chunkInfo
argument_list|,
name|blockId
argument_list|,
name|xceiverClient
argument_list|,
name|verifyChecksum
argument_list|)
expr_stmt|;
name|chunkData
operator|=
name|data
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readChunk (ChunkInfo readChunkInfo)
specifier|protected
name|ByteString
name|readChunk
parameter_list|(
name|ChunkInfo
name|readChunkInfo
parameter_list|)
block|{
name|ByteString
name|byteString
init|=
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|chunkData
argument_list|,
operator|(
name|int
operator|)
name|readChunkInfo
operator|.
name|getOffset
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|readChunkInfo
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|readByteBuffers
operator|.
name|add
argument_list|(
name|byteString
argument_list|)
expr_stmt|;
return|return
name|byteString
return|;
block|}
annotation|@
name|Override
DECL|method|checkOpen ()
specifier|protected
name|void
name|checkOpen
parameter_list|()
block|{
comment|// No action needed
block|}
block|}
comment|/**    * Match readData with the chunkData byte-wise.    * @param readData Data read through ChunkInputStream    * @param inputDataStartIndex first index (inclusive) in chunkData to compare    *                            with read data    * @param length the number of bytes of data to match starting from    *               inputDataStartIndex    */
DECL|method|matchWithInputData (byte[] readData, int inputDataStartIndex, int length)
specifier|private
name|void
name|matchWithInputData
parameter_list|(
name|byte
index|[]
name|readData
parameter_list|,
name|int
name|inputDataStartIndex
parameter_list|,
name|int
name|length
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|inputDataStartIndex
init|;
name|i
operator|<
name|inputDataStartIndex
operator|+
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|chunkData
index|[
name|i
index|]
argument_list|,
name|readData
index|[
name|i
operator|-
name|inputDataStartIndex
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Seek to a position and verify through getPos().    */
DECL|method|seekAndVerify (int pos)
specifier|private
name|void
name|seekAndVerify
parameter_list|(
name|int
name|pos
parameter_list|)
throws|throws
name|Exception
block|{
name|chunkStream
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Current position of buffer does not match with the "
operator|+
literal|"seeked position"
argument_list|,
name|pos
argument_list|,
name|chunkStream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFullChunkRead ()
specifier|public
name|void
name|testFullChunkRead
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|CHUNK_SIZE
index|]
decl_stmt|;
name|chunkStream
operator|.
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|CHUNK_SIZE
argument_list|)
expr_stmt|;
name|matchWithInputData
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|CHUNK_SIZE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPartialChunkRead ()
specifier|public
name|void
name|testPartialChunkRead
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|len
init|=
name|CHUNK_SIZE
operator|/
literal|2
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|chunkStream
operator|.
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|matchWithInputData
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|// To read chunk data from index 0 to 49 (len = 50), we need to read
comment|// chunk from offset 0 to 60 as the checksum boundary is at every 20
comment|// bytes. Verify that 60 bytes of chunk data are read and stored in the
comment|// buffers.
name|matchWithInputData
argument_list|(
name|chunkStream
operator|.
name|readByteBuffers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|60
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSeek ()
specifier|public
name|void
name|testSeek
parameter_list|()
throws|throws
name|Exception
block|{
name|seekAndVerify
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|seekAndVerify
argument_list|(
name|CHUNK_SIZE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Seeking to Chunk Length should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"EOF encountered at pos: "
operator|+
name|CHUNK_SIZE
operator|+
literal|" for chunk: "
operator|+
name|CHUNK_NAME
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Seek before read should update the ChunkInputStream#chunkPosition
name|seekAndVerify
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|chunkStream
operator|.
name|getChunkPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read from the seeked position.
comment|// Reading from index 25 to 54 should result in the ChunkInputStream
comment|// copying chunk data from index 20 to 59 into the buffers (checksum
comment|// boundaries).
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|30
index|]
decl_stmt|;
name|chunkStream
operator|.
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|matchWithInputData
argument_list|(
name|b
argument_list|,
literal|25
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|matchWithInputData
argument_list|(
name|chunkStream
operator|.
name|readByteBuffers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|20
argument_list|,
literal|40
argument_list|)
expr_stmt|;
comment|// After read, the position of the chunkStream is evaluated from the
comment|// buffers and the chunkPosition should be reset to -1.
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|chunkStream
operator|.
name|getChunkPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// Seek to a position within the current buffers. Current buffers contain
comment|// data from index 20 to 59. ChunkPosition should still not be used to
comment|// set the position.
name|seekAndVerify
argument_list|(
literal|35
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|chunkStream
operator|.
name|getChunkPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// Seek to a position outside the current buffers. In this case, the
comment|// chunkPosition should be updated to the seeked position.
name|seekAndVerify
argument_list|(
literal|75
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|75
argument_list|,
name|chunkStream
operator|.
name|getChunkPosition
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSeekAndRead ()
specifier|public
name|void
name|testSeekAndRead
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Seek to a position and read data
name|seekAndVerify
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b1
init|=
operator|new
name|byte
index|[
literal|20
index|]
decl_stmt|;
name|chunkStream
operator|.
name|read
argument_list|(
name|b1
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|matchWithInputData
argument_list|(
name|b1
argument_list|,
literal|50
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|// Next read should start from the position of the last read + 1 i.e. 70
name|byte
index|[]
name|b2
init|=
operator|new
name|byte
index|[
literal|20
index|]
decl_stmt|;
name|chunkStream
operator|.
name|read
argument_list|(
name|b2
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|matchWithInputData
argument_list|(
name|b2
argument_list|,
literal|70
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

