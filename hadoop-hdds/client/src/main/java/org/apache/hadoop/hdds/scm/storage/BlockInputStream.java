begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientReply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|ChecksumData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Seekable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ReadChunkResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_comment
comment|/**  * An {@link InputStream} used by the REST service in combination with the  * SCMClient to read the value of a key from a sequence  * of container chunks.  All bytes of the key value are stored in container  * chunks.  Each chunk may contain multiple underlying {@link ByteBuffer}  * instances.  This class encapsulates all state management for iterating  * through the sequence of chunks and the sequence of buffers within each chunk.  */
end_comment

begin_class
DECL|class|BlockInputStream
specifier|public
class|class
name|BlockInputStream
extends|extends
name|InputStream
implements|implements
name|Seekable
block|{
DECL|field|EOF
specifier|private
specifier|static
specifier|final
name|int
name|EOF
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|blockID
specifier|private
specifier|final
name|BlockID
name|blockID
decl_stmt|;
DECL|field|traceID
specifier|private
specifier|final
name|String
name|traceID
decl_stmt|;
DECL|field|xceiverClientManager
specifier|private
name|XceiverClientManager
name|xceiverClientManager
decl_stmt|;
DECL|field|xceiverClient
specifier|private
name|XceiverClientSpi
name|xceiverClient
decl_stmt|;
DECL|field|chunks
specifier|private
name|List
argument_list|<
name|ChunkInfo
argument_list|>
name|chunks
decl_stmt|;
comment|// ChunkIndex points to the index current chunk in the buffers or the the
comment|// index of chunk which will be read next into the buffers in
comment|// readChunkFromContainer().
DECL|field|chunkIndex
specifier|private
name|int
name|chunkIndex
decl_stmt|;
comment|// ChunkIndexOfCurrentBuffer points to the index of chunk read into the
comment|// buffers or index of the last chunk in the buffers. It is updated only
comment|// when a new chunk is read from container into the buffers.
DECL|field|chunkIndexOfCurrentBuffer
specifier|private
name|int
name|chunkIndexOfCurrentBuffer
decl_stmt|;
DECL|field|chunkOffset
specifier|private
name|long
index|[]
name|chunkOffset
decl_stmt|;
DECL|field|buffers
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|buffers
decl_stmt|;
DECL|field|bufferIndex
specifier|private
name|int
name|bufferIndex
decl_stmt|;
DECL|field|bufferPosition
specifier|private
name|long
name|bufferPosition
decl_stmt|;
DECL|field|verifyChecksum
specifier|private
specifier|final
name|boolean
name|verifyChecksum
decl_stmt|;
comment|/**    * Creates a new BlockInputStream.    *    * @param blockID block ID of the chunk    * @param xceiverClientManager client manager that controls client    * @param xceiverClient client to perform container calls    * @param chunks list of chunks to read    * @param traceID container protocol call traceID    * @param verifyChecksum verify checksum    * @param initialPosition the initial position of the stream pointer. This    *                        position is seeked now if the up-stream was seeked    *                        before this was created.    */
DECL|method|BlockInputStream ( BlockID blockID, XceiverClientManager xceiverClientManager, XceiverClientSpi xceiverClient, List<ChunkInfo> chunks, String traceID, boolean verifyChecksum, long initialPosition)
specifier|public
name|BlockInputStream
parameter_list|(
name|BlockID
name|blockID
parameter_list|,
name|XceiverClientManager
name|xceiverClientManager
parameter_list|,
name|XceiverClientSpi
name|xceiverClient
parameter_list|,
name|List
argument_list|<
name|ChunkInfo
argument_list|>
name|chunks
parameter_list|,
name|String
name|traceID
parameter_list|,
name|boolean
name|verifyChecksum
parameter_list|,
name|long
name|initialPosition
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|blockID
operator|=
name|blockID
expr_stmt|;
name|this
operator|.
name|traceID
operator|=
name|traceID
expr_stmt|;
name|this
operator|.
name|xceiverClientManager
operator|=
name|xceiverClientManager
expr_stmt|;
name|this
operator|.
name|xceiverClient
operator|=
name|xceiverClient
expr_stmt|;
name|this
operator|.
name|chunks
operator|=
name|chunks
expr_stmt|;
name|this
operator|.
name|chunkIndex
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|chunkIndexOfCurrentBuffer
operator|=
operator|-
literal|1
expr_stmt|;
comment|// chunkOffset[i] stores offset at which chunk i stores data in
comment|// BlockInputStream
name|this
operator|.
name|chunkOffset
operator|=
operator|new
name|long
index|[
name|this
operator|.
name|chunks
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|initializeChunkOffset
argument_list|()
expr_stmt|;
name|this
operator|.
name|buffers
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|bufferIndex
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|bufferPosition
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|verifyChecksum
operator|=
name|verifyChecksum
expr_stmt|;
if|if
condition|(
name|initialPosition
operator|>
literal|0
condition|)
block|{
comment|// The stream was seeked to a position before the stream was
comment|// initialized. So seeking to the position now.
name|seek
argument_list|(
name|initialPosition
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initializeChunkOffset ()
specifier|private
name|void
name|initializeChunkOffset
parameter_list|()
block|{
name|long
name|tempOffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|chunkOffset
index|[
name|i
index|]
operator|=
name|tempOffset
expr_stmt|;
name|tempOffset
operator|+=
name|chunks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|int
name|available
init|=
name|prepareRead
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|dataout
init|=
name|EOF
decl_stmt|;
if|if
condition|(
name|available
operator|==
name|EOF
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|buffers
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//should have released by now, see below
block|}
else|else
block|{
name|dataout
operator|=
name|Byte
operator|.
name|toUnsignedInt
argument_list|(
name|buffers
operator|.
name|get
argument_list|(
name|bufferIndex
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blockStreamEOF
argument_list|()
condition|)
block|{
comment|// consumer might use getPos to determine EOF,
comment|// so release buffers when serving the last byte of data
name|releaseBuffers
argument_list|()
expr_stmt|;
block|}
return|return
name|dataout
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] b, int off, int len)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// According to the JavaDocs for InputStream, it is recommended that
comment|// subclasses provide an override of bulk read if possible for performance
comment|// reasons.  In addition to performance, we need to do it for correctness
comment|// reasons.  The Ozone REST service uses PipedInputStream and
comment|// PipedOutputStream to relay HTTP response data between a Jersey thread and
comment|// a Netty thread.  It turns out that PipedInputStream/PipedOutputStream
comment|// have a subtle dependency (bug?) on the wrapped stream providing separate
comment|// implementations of single-byte read and bulk read.  Without this, get key
comment|// responses might close the connection before writing all of the bytes
comment|// advertised in the Content-Length.
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|off
operator|<
literal|0
operator|||
name|len
argument_list|<
literal|0
operator|||
name|len
argument_list|>
name|b
operator|.
name|length
operator|-
name|off
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|checkOpen
argument_list|()
expr_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|available
init|=
name|prepareRead
argument_list|(
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|available
operator|==
name|EOF
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|buffers
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//should have been released by now
return|return
name|total
operator|!=
literal|0
condition|?
name|total
else|:
name|EOF
return|;
block|}
name|buffers
operator|.
name|get
argument_list|(
name|bufferIndex
argument_list|)
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
operator|+
name|total
argument_list|,
name|available
argument_list|)
expr_stmt|;
name|len
operator|-=
name|available
expr_stmt|;
name|total
operator|+=
name|available
expr_stmt|;
block|}
if|if
condition|(
name|blockStreamEOF
argument_list|()
condition|)
block|{
comment|// smart consumers determine EOF by calling getPos()
comment|// so we release buffers when serving the final bytes of data
name|releaseBuffers
argument_list|()
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
comment|/**    * Determines if all data in the stream has been consumed.    *    * @return true if EOF, false if more data is available    */
DECL|method|blockStreamEOF ()
specifier|protected
name|boolean
name|blockStreamEOF
parameter_list|()
block|{
if|if
condition|(
name|buffersHaveData
argument_list|()
operator|||
name|chunksRemaining
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// if there are any chunks, we better be at the last chunk for EOF
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|(
operator|(
name|chunks
operator|==
literal|null
operator|)
operator|||
name|chunks
operator|.
name|isEmpty
argument_list|()
operator|||
name|chunkIndex
operator|==
operator|(
name|chunks
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|)
argument_list|,
literal|"EOF detected, but not at the last chunk"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|method|releaseBuffers ()
specifier|private
name|void
name|releaseBuffers
parameter_list|()
block|{
comment|//ashes to ashes, dust to dust
name|buffers
operator|=
literal|null
expr_stmt|;
name|bufferIndex
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|xceiverClientManager
operator|!=
literal|null
operator|&&
name|xceiverClient
operator|!=
literal|null
condition|)
block|{
name|xceiverClientManager
operator|.
name|releaseClient
argument_list|(
name|xceiverClient
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|xceiverClientManager
operator|=
literal|null
expr_stmt|;
name|xceiverClient
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Checks if the stream is open.  If not, throws an exception.    *    * @throws IOException if stream is closed    */
DECL|method|checkOpen ()
specifier|private
specifier|synchronized
name|void
name|checkOpen
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|xceiverClient
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"BlockInputStream has been closed."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Prepares to read by advancing through chunks and buffers as needed until it    * finds data to return or encounters EOF.    *    * @param len desired length of data to read    * @return length of data available to read, possibly less than desired length    */
DECL|method|prepareRead (int len)
specifier|private
specifier|synchronized
name|int
name|prepareRead
parameter_list|(
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|buffersAllocated
argument_list|()
condition|)
block|{
comment|// The current chunk at chunkIndex has not been read from the
comment|// container. Read the chunk and put the data into buffers.
name|readChunkFromContainer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|buffersHaveData
argument_list|()
condition|)
block|{
comment|// Data is available from buffers
name|ByteBuffer
name|bb
init|=
name|buffers
operator|.
name|get
argument_list|(
name|bufferIndex
argument_list|)
decl_stmt|;
return|return
name|len
operator|>
name|bb
operator|.
name|remaining
argument_list|()
condition|?
name|bb
operator|.
name|remaining
argument_list|()
else|:
name|len
return|;
block|}
elseif|else
if|if
condition|(
name|chunksRemaining
argument_list|()
condition|)
block|{
comment|// There are additional chunks available.
comment|// Read the next chunk in the block.
name|chunkIndex
operator|+=
literal|1
expr_stmt|;
name|readChunkFromContainer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// All available input has been consumed.
return|return
name|EOF
return|;
block|}
block|}
block|}
DECL|method|buffersAllocated ()
specifier|private
name|boolean
name|buffersAllocated
parameter_list|()
block|{
if|if
condition|(
name|buffers
operator|==
literal|null
operator|||
name|buffers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|buffersHaveData ()
specifier|private
name|boolean
name|buffersHaveData
parameter_list|()
block|{
name|boolean
name|hasData
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|buffersAllocated
argument_list|()
condition|)
block|{
while|while
condition|(
name|bufferIndex
operator|<
operator|(
name|buffers
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|buffers
operator|.
name|get
argument_list|(
name|bufferIndex
argument_list|)
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
comment|// current buffer has data
name|hasData
operator|=
literal|true
expr_stmt|;
break|break;
block|}
else|else
block|{
if|if
condition|(
name|buffersRemaining
argument_list|()
condition|)
block|{
comment|// move to next available buffer
operator|++
name|bufferIndex
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|bufferIndex
operator|<
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no more buffers remaining
break|break;
block|}
block|}
block|}
block|}
return|return
name|hasData
return|;
block|}
DECL|method|buffersRemaining ()
specifier|private
name|boolean
name|buffersRemaining
parameter_list|()
block|{
return|return
operator|(
name|bufferIndex
operator|<
operator|(
name|buffers
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|)
return|;
block|}
DECL|method|chunksRemaining ()
specifier|private
name|boolean
name|chunksRemaining
parameter_list|()
block|{
if|if
condition|(
operator|(
name|chunks
operator|==
literal|null
operator|)
operator|||
name|chunks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Check if more chunks are remaining in the stream after chunkIndex
if|if
condition|(
name|chunkIndex
operator|<
operator|(
name|chunks
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// ChunkIndex is the last chunk in the stream. Check if this chunk has
comment|// been read from container or not. Return true if chunkIndex has not
comment|// been read yet and false otherwise.
return|return
name|chunkIndexOfCurrentBuffer
operator|!=
name|chunkIndex
return|;
block|}
comment|/**    * Attempts to read the chunk at the specified offset in the chunk list.  If    * successful, then the data of the read chunk is saved so that its bytes can    * be returned from subsequent read calls.    *    * @throws IOException if there is an I/O error while performing the call    */
DECL|method|readChunkFromContainer ()
specifier|private
specifier|synchronized
name|void
name|readChunkFromContainer
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Read the chunk at chunkIndex
specifier|final
name|ChunkInfo
name|chunkInfo
init|=
name|chunks
operator|.
name|get
argument_list|(
name|chunkIndex
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|excludeDns
init|=
literal|null
decl_stmt|;
name|ByteString
name|byteString
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|dnList
init|=
name|getDatanodeList
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|dnListFromReadChunkCall
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|byteString
operator|=
name|readChunk
argument_list|(
name|chunkInfo
argument_list|,
name|excludeDns
argument_list|,
name|dnListFromReadChunkCall
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|byteString
operator|.
name|size
argument_list|()
operator|!=
name|chunkInfo
operator|.
name|getLen
argument_list|()
condition|)
block|{
comment|// Bytes read from chunk should be equal to chunk size.
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Inconsistent read for chunk=%s len=%d bytesRead=%d"
argument_list|,
name|chunkInfo
operator|.
name|getChunkName
argument_list|()
argument_list|,
name|chunkInfo
operator|.
name|getLen
argument_list|()
argument_list|,
name|byteString
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|ChecksumData
name|checksumData
init|=
name|ChecksumData
operator|.
name|getFromProtoBuf
argument_list|(
name|chunkInfo
operator|.
name|getChecksumData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|verifyChecksum
condition|)
block|{
name|Checksum
operator|.
name|verifyChecksum
argument_list|(
name|byteString
argument_list|,
name|checksumData
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// we will end up in this situation only if the checksum mismatch
comment|// happens or the length of the chunk mismatches.
comment|// In this case, read should be retried on a different replica.
comment|// TODO: Inform SCM of a possible corrupt container replica here
if|if
condition|(
name|excludeDns
operator|==
literal|null
condition|)
block|{
name|excludeDns
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|excludeDns
operator|.
name|addAll
argument_list|(
name|dnListFromReadChunkCall
argument_list|)
expr_stmt|;
if|if
condition|(
name|excludeDns
operator|.
name|size
argument_list|()
operator|==
name|dnList
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
block|}
name|buffers
operator|=
name|byteString
operator|.
name|asReadOnlyByteBufferList
argument_list|()
expr_stmt|;
name|bufferIndex
operator|=
literal|0
expr_stmt|;
name|chunkIndexOfCurrentBuffer
operator|=
name|chunkIndex
expr_stmt|;
comment|// The bufferIndex and position might need to be adjusted if seek() was
comment|// called on the stream before. This needs to be done so that the buffer
comment|// position can be advanced to the 'seeked' position.
name|adjustBufferIndex
argument_list|()
expr_stmt|;
block|}
comment|/**    * Send RPC call to get the chunk from the container.    */
annotation|@
name|VisibleForTesting
DECL|method|readChunk (final ChunkInfo chunkInfo, List<DatanodeDetails> excludeDns, List<DatanodeDetails> dnListFromReply)
specifier|protected
name|ByteString
name|readChunk
parameter_list|(
specifier|final
name|ChunkInfo
name|chunkInfo
parameter_list|,
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|excludeDns
parameter_list|,
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|dnListFromReply
parameter_list|)
throws|throws
name|IOException
block|{
name|XceiverClientReply
name|reply
decl_stmt|;
name|ReadChunkResponseProto
name|readChunkResponse
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reply
operator|=
name|ContainerProtocolCalls
operator|.
name|readChunk
argument_list|(
name|xceiverClient
argument_list|,
name|chunkInfo
argument_list|,
name|blockID
argument_list|,
name|traceID
argument_list|,
name|excludeDns
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|response
decl_stmt|;
name|response
operator|=
name|reply
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|ContainerProtocolCalls
operator|.
name|validateContainerResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|readChunkResponse
operator|=
name|response
operator|.
name|getReadChunk
argument_list|()
expr_stmt|;
name|dnListFromReply
operator|.
name|addAll
argument_list|(
name|reply
operator|.
name|getDatanodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|StorageContainerException
condition|)
block|{
throw|throw
name|e
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected OzoneException: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to execute ReadChunk command for chunk  "
operator|+
name|chunkInfo
operator|.
name|getChunkName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|readChunkResponse
operator|.
name|getData
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDatanodeList ()
specifier|protected
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|getDatanodeList
parameter_list|()
block|{
return|return
name|xceiverClient
operator|.
name|getPipeline
argument_list|()
operator|.
name|getNodes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|seek (long pos)
specifier|public
specifier|synchronized
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|<
literal|0
operator|||
operator|(
name|chunks
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|pos
operator|>
literal|0
operator|)
operator|||
name|pos
operator|>=
name|chunkOffset
index|[
name|chunks
operator|.
name|size
argument_list|()
operator|-
literal|1
index|]
operator|+
name|chunks
operator|.
name|get
argument_list|(
name|chunks
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getLen
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"EOF encountered pos: "
operator|+
name|pos
operator|+
literal|" container key: "
operator|+
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|pos
operator|<
name|chunkOffset
index|[
name|chunkIndex
index|]
condition|)
block|{
name|chunkIndex
operator|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|chunkOffset
argument_list|,
literal|0
argument_list|,
name|chunkIndex
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pos
operator|>=
name|chunkOffset
index|[
name|chunkIndex
index|]
operator|+
name|chunks
operator|.
name|get
argument_list|(
name|chunkIndex
argument_list|)
operator|.
name|getLen
argument_list|()
condition|)
block|{
name|chunkIndex
operator|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|chunkOffset
argument_list|,
name|chunkIndex
operator|+
literal|1
argument_list|,
name|chunks
operator|.
name|size
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|chunkIndex
operator|<
literal|0
condition|)
block|{
comment|// Binary search returns -insertionPoint - 1  if element is not present
comment|// in the array. insertionPoint is the point at which element would be
comment|// inserted in the sorted array. We need to adjust the chunkIndex
comment|// accordingly so that chunkIndex = insertionPoint - 1
name|chunkIndex
operator|=
operator|-
name|chunkIndex
operator|-
literal|2
expr_stmt|;
block|}
comment|// The bufferPosition should be adjusted to account for the chunk offset
comment|// of the chunk the the pos actually points to.
name|bufferPosition
operator|=
name|pos
operator|-
name|chunkOffset
index|[
name|chunkIndex
index|]
expr_stmt|;
comment|// Check if current buffers correspond to the chunk index being seeked
comment|// and if the buffers have any data.
if|if
condition|(
name|chunkIndex
operator|==
name|chunkIndexOfCurrentBuffer
operator|&&
name|buffersAllocated
argument_list|()
condition|)
block|{
comment|// Position the buffer to the seeked position.
name|adjustBufferIndex
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Release the current buffers. The next readChunkFromContainer will
comment|// read the required chunk and position the buffer to the seeked
comment|// position.
name|releaseBuffers
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|adjustBufferIndex ()
specifier|private
name|void
name|adjustBufferIndex
parameter_list|()
block|{
if|if
condition|(
name|bufferPosition
operator|==
operator|-
literal|1
condition|)
block|{
comment|// The stream has not been seeked to a position. No need to adjust the
comment|// buffer Index and position.
return|return;
block|}
comment|// The bufferPosition is w.r.t the buffers for current chunk.
comment|// Adjust the bufferIndex and position to the seeked position.
name|long
name|tempOffest
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|bufferPosition
operator|-
name|tempOffest
operator|>=
name|buffers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|capacity
argument_list|()
condition|)
block|{
name|tempOffest
operator|+=
name|buffers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|capacity
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bufferIndex
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
name|buffers
operator|.
name|get
argument_list|(
name|bufferIndex
argument_list|)
operator|.
name|position
argument_list|(
call|(
name|int
call|)
argument_list|(
name|bufferPosition
operator|-
name|tempOffest
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reset the bufferPosition as the seek() operation has been completed.
name|bufferPosition
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
specifier|synchronized
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
comment|// position = chunkOffset of current chunk (at chunkIndex) + position of
comment|// the buffer corresponding to the chunk.
name|long
name|bufferPos
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|bufferPosition
operator|>=
literal|0
condition|)
block|{
comment|// seek has been called but the buffers were empty. Hence, the buffer
comment|// position will be advanced after the buffers are filled.
comment|// We return the chunkOffset + bufferPosition here as that will be the
comment|// position of the buffer pointer after reading the chunk file.
name|bufferPos
operator|=
name|bufferPosition
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|blockStreamEOF
argument_list|()
condition|)
block|{
comment|// all data consumed, buffers have been released.
comment|// get position from the chunk offset and chunk length of last chunk
name|bufferPos
operator|=
name|chunks
operator|.
name|get
argument_list|(
name|chunkIndex
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|buffersAllocated
argument_list|()
condition|)
block|{
comment|// get position from available buffers of current chunk
name|bufferPos
operator|=
name|buffers
operator|.
name|get
argument_list|(
name|bufferIndex
argument_list|)
operator|.
name|position
argument_list|()
expr_stmt|;
block|}
return|return
name|chunkOffset
index|[
name|chunkIndex
index|]
operator|+
name|bufferPos
return|;
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
DECL|method|getBlockID ()
specifier|public
name|BlockID
name|getBlockID
parameter_list|()
block|{
return|return
name|blockID
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getChunkIndex ()
specifier|protected
name|int
name|getChunkIndex
parameter_list|()
block|{
return|return
name|chunkIndex
return|;
block|}
block|}
end_class

end_unit

