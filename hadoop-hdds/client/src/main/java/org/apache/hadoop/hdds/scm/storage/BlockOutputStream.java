begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ByteStringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientReply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|ChecksumData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|OzoneChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChecksumType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|BlockData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
operator|.
name|ContainerProtocolCalls
operator|.
name|putBlockAsync
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
operator|.
name|ContainerProtocolCalls
operator|.
name|writeChunkAsync
import|;
end_import

begin_comment
comment|/**  * An {@link OutputStream} used by the REST service in combination with the  * SCMClient to write the value of a key to a sequence  * of container chunks.  Writes are buffered locally and periodically written to  * the container as a new chunk.  In order to preserve the semantics that  * replacement of a pre-existing key is atomic, each instance of the stream has  * an internal unique identifier.  This unique identifier and a monotonically  * increasing chunk index form a composite key that is used as the chunk name.  * After all data is written, a putKey call creates or updates the corresponding  * container key, and this call includes the full list of chunks that make up  * the key data.  The list of chunks is updated all at once.  Therefore, a  * concurrent reader never can see an intermediate state in which different  * chunks of data from different versions of the key data are interleaved.  * This class encapsulates all state management for buffering and writing  * through to the container.  */
end_comment

begin_class
DECL|class|BlockOutputStream
specifier|public
class|class
name|BlockOutputStream
extends|extends
name|OutputStream
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlockOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|blockID
specifier|private
specifier|volatile
name|BlockID
name|blockID
decl_stmt|;
DECL|field|containerBlockData
specifier|private
specifier|final
name|BlockData
operator|.
name|Builder
name|containerBlockData
decl_stmt|;
DECL|field|xceiverClientManager
specifier|private
name|XceiverClientManager
name|xceiverClientManager
decl_stmt|;
DECL|field|xceiverClient
specifier|private
name|XceiverClientSpi
name|xceiverClient
decl_stmt|;
DECL|field|checksumType
specifier|private
specifier|final
name|ContainerProtos
operator|.
name|ChecksumType
name|checksumType
decl_stmt|;
DECL|field|bytesPerChecksum
specifier|private
specifier|final
name|int
name|bytesPerChecksum
decl_stmt|;
DECL|field|chunkIndex
specifier|private
name|int
name|chunkIndex
decl_stmt|;
DECL|field|chunkSize
specifier|private
name|int
name|chunkSize
decl_stmt|;
DECL|field|streamBufferFlushSize
specifier|private
specifier|final
name|long
name|streamBufferFlushSize
decl_stmt|;
DECL|field|streamBufferMaxSize
specifier|private
specifier|final
name|long
name|streamBufferMaxSize
decl_stmt|;
DECL|field|bufferPool
specifier|private
name|BufferPool
name|bufferPool
decl_stmt|;
comment|// The IOException will be set by response handling thread in case there is an
comment|// exception received in the response. If the exception is set, the next
comment|// request will fail upfront.
DECL|field|ioException
specifier|private
name|AtomicReference
argument_list|<
name|IOException
argument_list|>
name|ioException
decl_stmt|;
DECL|field|responseExecutor
specifier|private
name|ExecutorService
name|responseExecutor
decl_stmt|;
comment|// the effective length of data flushed so far
DECL|field|totalDataFlushedLength
specifier|private
name|long
name|totalDataFlushedLength
decl_stmt|;
comment|// effective data write attempted so far for the block
DECL|field|writtenDataLength
specifier|private
name|long
name|writtenDataLength
decl_stmt|;
comment|// List containing buffers for which the putBlock call will
comment|// update the length in the datanodes. This list will just maintain
comment|// references to the buffers in the BufferPool which will be cleared
comment|// when the watchForCommit acknowledges a putBlock logIndex has been
comment|// committed on all datanodes. This list will be a  place holder for buffers
comment|// which got written between successive putBlock calls.
DECL|field|bufferList
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|bufferList
decl_stmt|;
comment|// This object will maintain the commitIndexes and byteBufferList in order
comment|// Also, corresponding to the logIndex, the corresponding list of buffers will
comment|// be released from the buffer pool.
DECL|field|commitWatcher
specifier|private
specifier|final
name|CommitWatcher
name|commitWatcher
decl_stmt|;
DECL|field|failedServers
specifier|private
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|failedServers
decl_stmt|;
comment|/**    * Creates a new BlockOutputStream.    *    * @param blockID              block ID    * @param xceiverClientManager client manager that controls client    * @param pipeline             pipeline where block will be written    * @param chunkSize            chunk size    * @param bufferPool           pool of buffers    * @param streamBufferFlushSize flush size    * @param streamBufferMaxSize   max size of the currentBuffer    * @param watchTimeout          watch timeout    * @param checksumType          checksum type    * @param bytesPerChecksum      Bytes per checksum    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"parameternumber"
argument_list|)
DECL|method|BlockOutputStream (BlockID blockID, XceiverClientManager xceiverClientManager, Pipeline pipeline, int chunkSize, long streamBufferFlushSize, long streamBufferMaxSize, long watchTimeout, BufferPool bufferPool, ChecksumType checksumType, int bytesPerChecksum)
specifier|public
name|BlockOutputStream
parameter_list|(
name|BlockID
name|blockID
parameter_list|,
name|XceiverClientManager
name|xceiverClientManager
parameter_list|,
name|Pipeline
name|pipeline
parameter_list|,
name|int
name|chunkSize
parameter_list|,
name|long
name|streamBufferFlushSize
parameter_list|,
name|long
name|streamBufferMaxSize
parameter_list|,
name|long
name|watchTimeout
parameter_list|,
name|BufferPool
name|bufferPool
parameter_list|,
name|ChecksumType
name|checksumType
parameter_list|,
name|int
name|bytesPerChecksum
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|blockID
operator|=
name|blockID
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
name|chunkSize
expr_stmt|;
name|KeyValue
name|keyValue
init|=
name|KeyValue
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"TYPE"
argument_list|)
operator|.
name|setValue
argument_list|(
literal|"KEY"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|this
operator|.
name|containerBlockData
operator|=
name|BlockData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|blockID
operator|.
name|getDatanodeBlockIDProtobuf
argument_list|()
argument_list|)
operator|.
name|addMetadata
argument_list|(
name|keyValue
argument_list|)
expr_stmt|;
name|this
operator|.
name|xceiverClientManager
operator|=
name|xceiverClientManager
expr_stmt|;
name|this
operator|.
name|xceiverClient
operator|=
name|xceiverClientManager
operator|.
name|acquireClient
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|this
operator|.
name|chunkIndex
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|streamBufferFlushSize
operator|=
name|streamBufferFlushSize
expr_stmt|;
name|this
operator|.
name|streamBufferMaxSize
operator|=
name|streamBufferMaxSize
expr_stmt|;
name|this
operator|.
name|bufferPool
operator|=
name|bufferPool
expr_stmt|;
name|this
operator|.
name|checksumType
operator|=
name|checksumType
expr_stmt|;
name|this
operator|.
name|bytesPerChecksum
operator|=
name|bytesPerChecksum
expr_stmt|;
comment|// A single thread executor handle the responses of async requests
name|responseExecutor
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
expr_stmt|;
name|commitWatcher
operator|=
operator|new
name|CommitWatcher
argument_list|(
name|bufferPool
argument_list|,
name|xceiverClient
argument_list|,
name|watchTimeout
argument_list|)
expr_stmt|;
name|bufferList
operator|=
literal|null
expr_stmt|;
name|totalDataFlushedLength
operator|=
literal|0
expr_stmt|;
name|writtenDataLength
operator|=
literal|0
expr_stmt|;
name|failedServers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ioException
operator|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|getBlockID ()
specifier|public
name|BlockID
name|getBlockID
parameter_list|()
block|{
return|return
name|blockID
return|;
block|}
DECL|method|getTotalAckDataLength ()
specifier|public
name|long
name|getTotalAckDataLength
parameter_list|()
block|{
return|return
name|commitWatcher
operator|.
name|getTotalAckDataLength
argument_list|()
return|;
block|}
DECL|method|getWrittenDataLength ()
specifier|public
name|long
name|getWrittenDataLength
parameter_list|()
block|{
return|return
name|writtenDataLength
return|;
block|}
DECL|method|getFailedServers ()
specifier|public
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|getFailedServers
parameter_list|()
block|{
return|return
name|failedServers
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getXceiverClient ()
specifier|public
name|XceiverClientSpi
name|getXceiverClient
parameter_list|()
block|{
return|return
name|xceiverClient
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getTotalDataFlushedLength ()
specifier|public
name|long
name|getTotalDataFlushedLength
parameter_list|()
block|{
return|return
name|totalDataFlushedLength
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getBufferPool ()
specifier|public
name|BufferPool
name|getBufferPool
parameter_list|()
block|{
return|return
name|bufferPool
return|;
block|}
DECL|method|getIoException ()
specifier|public
name|IOException
name|getIoException
parameter_list|()
block|{
return|return
name|ioException
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCommitIndex2flushedDataMap ()
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|>
name|getCommitIndex2flushedDataMap
parameter_list|()
block|{
return|return
name|commitWatcher
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|buf
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] b, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|(
name|off
operator|<
literal|0
operator|)
operator|||
operator|(
name|off
operator|>
name|b
operator|.
name|length
operator|)
operator|||
operator|(
name|len
operator|<
literal|0
operator|)
operator|||
operator|(
operator|(
name|off
operator|+
name|len
operator|)
operator|>
name|b
operator|.
name|length
operator|)
operator|||
operator|(
operator|(
name|off
operator|+
name|len
operator|)
operator|<
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return;
block|}
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|writeLen
decl_stmt|;
comment|// Allocate a buffer if needed. The buffer will be allocated only
comment|// once as needed and will be reused again for multiple blockOutputStream
comment|// entries.
name|ByteBuffer
name|currentBuffer
init|=
name|bufferPool
operator|.
name|allocateBufferIfNeeded
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|currentBuffer
operator|.
name|position
argument_list|()
decl_stmt|;
name|writeLen
operator|=
name|Math
operator|.
name|min
argument_list|(
name|chunkSize
operator|-
name|pos
operator|%
name|chunkSize
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|currentBuffer
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|writeLen
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|currentBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|writeChunk
argument_list|(
name|currentBuffer
argument_list|)
expr_stmt|;
block|}
name|off
operator|+=
name|writeLen
expr_stmt|;
name|len
operator|-=
name|writeLen
expr_stmt|;
name|writtenDataLength
operator|+=
name|writeLen
expr_stmt|;
if|if
condition|(
name|shouldFlush
argument_list|()
condition|)
block|{
name|updateFlushLength
argument_list|()
expr_stmt|;
name|executePutBlock
argument_list|()
expr_stmt|;
block|}
comment|// Data in the bufferPool can not exceed streamBufferMaxSize
if|if
condition|(
name|isBufferPoolFull
argument_list|()
condition|)
block|{
name|handleFullBuffer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|shouldFlush ()
specifier|private
name|boolean
name|shouldFlush
parameter_list|()
block|{
return|return
name|bufferPool
operator|.
name|computeBufferData
argument_list|()
operator|%
name|streamBufferFlushSize
operator|==
literal|0
return|;
block|}
DECL|method|updateFlushLength ()
specifier|private
name|void
name|updateFlushLength
parameter_list|()
block|{
name|totalDataFlushedLength
operator|+=
name|writtenDataLength
operator|-
name|totalDataFlushedLength
expr_stmt|;
block|}
DECL|method|isBufferPoolFull ()
specifier|private
name|boolean
name|isBufferPoolFull
parameter_list|()
block|{
return|return
name|bufferPool
operator|.
name|computeBufferData
argument_list|()
operator|==
name|streamBufferMaxSize
return|;
block|}
comment|/**    * Will be called on the retryPath in case closedContainerException/    * TimeoutException.    * @param len length of data to write    * @throws IOException if error occurred    */
comment|// In this case, the data is already cached in the currentBuffer.
DECL|method|writeOnRetry (long len)
specifier|public
name|void
name|writeOnRetry
parameter_list|(
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|len
operator|<=
name|streamBufferMaxSize
argument_list|)
expr_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|long
name|writeLen
decl_stmt|;
name|writeLen
operator|=
name|Math
operator|.
name|min
argument_list|(
name|chunkSize
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|writeLen
operator|==
name|chunkSize
condition|)
block|{
name|writeChunk
argument_list|(
name|bufferPool
operator|.
name|getBuffer
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|len
operator|-=
name|writeLen
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|writtenDataLength
operator|+=
name|writeLen
expr_stmt|;
comment|// we should not call isBufferFull/shouldFlush here.
comment|// The buffer might already be full as whole data is already cached in
comment|// the buffer. We should just validate
comment|// if we wrote data of size streamBufferMaxSize/streamBufferFlushSize to
comment|// call for handling full buffer/flush buffer condition.
if|if
condition|(
name|writtenDataLength
operator|%
name|streamBufferFlushSize
operator|==
literal|0
condition|)
block|{
comment|// reset the position to zero as now we will be reading the
comment|// next buffer in the list
name|updateFlushLength
argument_list|()
expr_stmt|;
name|executePutBlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|writtenDataLength
operator|==
name|streamBufferMaxSize
condition|)
block|{
name|handleFullBuffer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This is a blocking call. It will wait for the flush till the commit index    * at the head of the commitIndex2flushedDataMap gets replicated to all or    * majority.    * @throws IOException    */
DECL|method|handleFullBuffer ()
specifier|private
name|void
name|handleFullBuffer
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|checkOpen
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|commitWatcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|waitOnFlushFutures
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|setIoException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|adjustBuffersOnException
argument_list|()
expr_stmt|;
throw|throw
name|getIoException
argument_list|()
throw|;
block|}
name|watchForCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// It may happen that once the exception is encountered , we still might
comment|// have successfully flushed up to a certain index. Make sure the buffers
comment|// only contain data which have not been sufficiently replicated
DECL|method|adjustBuffersOnException ()
specifier|private
name|void
name|adjustBuffersOnException
parameter_list|()
block|{
name|commitWatcher
operator|.
name|releaseBuffersOnException
argument_list|()
expr_stmt|;
block|}
comment|/**    * calls watchForCommit API of the Ratis Client. For Standalone client,    * it is a no op.    * @param bufferFull flag indicating whether bufferFull condition is hit or    *              its called as part flush/close    * @return minimum commit index replicated to all nodes    * @throws IOException IOException in case watch gets timed out    */
DECL|method|watchForCommit (boolean bufferFull)
specifier|private
name|void
name|watchForCommit
parameter_list|(
name|boolean
name|bufferFull
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|XceiverClientReply
name|reply
init|=
name|bufferFull
condition|?
name|commitWatcher
operator|.
name|watchOnFirstIndex
argument_list|()
else|:
name|commitWatcher
operator|.
name|watchOnLastIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|reply
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|dnList
init|=
name|reply
operator|.
name|getDatanodes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dnList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Pipeline
name|pipe
init|=
name|xceiverClient
operator|.
name|getPipeline
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to commit BlockId {} on {}. Failed nodes: {}"
argument_list|,
name|blockID
argument_list|,
name|pipe
argument_list|,
name|dnList
argument_list|)
expr_stmt|;
name|failedServers
operator|.
name|addAll
argument_list|(
name|dnList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|setIoException
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|getIoException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
DECL|method|executePutBlock ()
name|ContainerCommandResponseProto
argument_list|>
name|executePutBlock
parameter_list|()
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|long
name|flushPos
init|=
name|totalDataFlushedLength
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|bufferList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|byteBufferList
init|=
name|bufferList
decl_stmt|;
name|bufferList
operator|=
literal|null
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|byteBufferList
argument_list|)
expr_stmt|;
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
name|flushFuture
decl_stmt|;
try|try
block|{
name|XceiverClientReply
name|asyncReply
init|=
name|putBlockAsync
argument_list|(
name|xceiverClient
argument_list|,
name|containerBlockData
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
name|future
init|=
name|asyncReply
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|flushFuture
operator|=
name|future
operator|.
name|thenApplyAsync
argument_list|(
name|e
lambda|->
block|{
try|try
block|{
name|validateResponse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|sce
parameter_list|)
block|{
throw|throw
operator|new
name|CompletionException
argument_list|(
name|sce
argument_list|)
throw|;
block|}
comment|// if the ioException is not set, putBlock is successful
if|if
condition|(
name|getIoException
argument_list|()
operator|==
literal|null
condition|)
block|{
name|BlockID
name|responseBlockID
init|=
name|BlockID
operator|.
name|getFromProtobuf
argument_list|(
name|e
operator|.
name|getPutBlock
argument_list|()
operator|.
name|getCommittedBlockLength
argument_list|()
operator|.
name|getBlockID
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|blockID
operator|.
name|getContainerBlockID
argument_list|()
operator|.
name|equals
argument_list|(
name|responseBlockID
operator|.
name|getContainerBlockID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// updates the bcsId of the block
name|blockID
operator|=
name|responseBlockID
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding index "
operator|+
name|asyncReply
operator|.
name|getLogIndex
argument_list|()
operator|+
literal|" commitMap size "
operator|+
name|commitWatcher
operator|.
name|getCommitInfoMapSize
argument_list|()
operator|+
literal|" flushLength "
operator|+
name|flushPos
operator|+
literal|" numBuffers "
operator|+
name|byteBufferList
operator|.
name|size
argument_list|()
operator|+
literal|" blockID "
operator|+
name|blockID
operator|+
literal|" bufferPool size"
operator|+
name|bufferPool
operator|.
name|getSize
argument_list|()
operator|+
literal|" currentBufferIndex "
operator|+
name|bufferPool
operator|.
name|getCurrentBufferIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// for standalone protocol, logIndex will always be 0.
name|commitWatcher
operator|.
name|updateCommitInfoMap
argument_list|(
name|asyncReply
operator|.
name|getLogIndex
argument_list|()
argument_list|,
name|byteBufferList
argument_list|)
expr_stmt|;
block|}
return|return
name|e
return|;
block|}
argument_list|,
name|responseExecutor
argument_list|)
operator|.
name|exceptionally
argument_list|(
name|e
lambda|->
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"putBlock failed for blockID "
operator|+
name|blockID
operator|+
literal|" with exception "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CompletionException
name|ce
init|=
operator|new
name|CompletionException
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|setIoException
argument_list|(
name|ce
argument_list|)
expr_stmt|;
throw|throw
name|ce
throw|;
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected Storage Container Exception: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|commitWatcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|put
argument_list|(
name|flushPos
argument_list|,
name|flushFuture
argument_list|)
expr_stmt|;
return|return
name|flushFuture
return|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|xceiverClientManager
operator|!=
literal|null
operator|&&
name|xceiverClient
operator|!=
literal|null
operator|&&
name|bufferPool
operator|!=
literal|null
operator|&&
name|bufferPool
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|handleFlush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
comment|// just set the exception here as well in order to maintain sanctity of
comment|// ioException field
name|setIoException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|adjustBuffersOnException
argument_list|()
expr_stmt|;
throw|throw
name|getIoException
argument_list|()
throw|;
block|}
block|}
block|}
DECL|method|writeChunk (ByteBuffer buffer)
specifier|private
name|void
name|writeChunk
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
comment|// This data in the buffer will be pushed to datanode and a reference will
comment|// be added to the bufferList. Once putBlock gets executed, this list will
comment|// be marked null. Hence, during first writeChunk call after every putBlock
comment|// call or during the first call to writeChunk here, the list will be null.
if|if
condition|(
name|bufferList
operator|==
literal|null
condition|)
block|{
name|bufferList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|bufferList
operator|.
name|add
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
comment|// Please note : We are not flipping the slice when we write since
comment|// the slices are pointing the currentBuffer start and end as needed for
comment|// the chunk write. Also please note, Duplicate does not create a
comment|// copy of data, it only creates metadata that points to the data
comment|// stream.
name|ByteBuffer
name|chunk
init|=
name|buffer
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|chunk
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|chunk
operator|.
name|limit
argument_list|(
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|writeChunkToContainer
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
DECL|method|handleFlush ()
specifier|private
name|void
name|handleFlush
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
comment|// flush the last chunk data residing on the currentBuffer
if|if
condition|(
name|totalDataFlushedLength
operator|<
name|writtenDataLength
condition|)
block|{
name|ByteBuffer
name|currentBuffer
init|=
name|bufferPool
operator|.
name|getCurrentBuffer
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|currentBuffer
operator|.
name|position
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentBuffer
operator|.
name|position
argument_list|()
operator|!=
name|chunkSize
condition|)
block|{
name|writeChunk
argument_list|(
name|currentBuffer
argument_list|)
expr_stmt|;
block|}
comment|// This can be a partially filled chunk. Since we are flushing the buffer
comment|// here, we just limit this buffer to the current position. So that next
comment|// write will happen in new buffer
name|updateFlushLength
argument_list|()
expr_stmt|;
name|executePutBlock
argument_list|()
expr_stmt|;
block|}
name|waitOnFlushFutures
argument_list|()
expr_stmt|;
name|watchForCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// just check again if the exception is hit while waiting for the
comment|// futures to ensure flush has indeed succeeded
comment|// irrespective of whether the commitIndex2flushedDataMap is empty
comment|// or not, ensure there is no exception set
name|checkOpen
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|xceiverClientManager
operator|!=
literal|null
operator|&&
name|xceiverClient
operator|!=
literal|null
operator|&&
name|bufferPool
operator|!=
literal|null
operator|&&
name|bufferPool
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|handleFlush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|setIoException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|adjustBuffersOnException
argument_list|()
expr_stmt|;
throw|throw
name|getIoException
argument_list|()
throw|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Turn the below buffer empty check on when Standalone pipeline
comment|// is removed in the write path in tests
comment|// Preconditions.checkArgument(buffer.position() == 0);
comment|// bufferPool.checkBufferPoolEmpty();
block|}
block|}
DECL|method|waitOnFlushFutures ()
specifier|private
name|void
name|waitOnFlushFutures
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|combinedFuture
init|=
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|commitWatcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|CompletableFuture
index|[
name|commitWatcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
comment|// wait for all the transactions to complete
name|combinedFuture
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|validateResponse ( ContainerProtos.ContainerCommandResponseProto responseProto)
specifier|private
name|void
name|validateResponse
parameter_list|(
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|responseProto
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// if the ioException is already set, it means a prev request has failed
comment|// just throw the exception. The current operation will fail with the
comment|// original error
name|IOException
name|exception
init|=
name|getIoException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
name|ContainerProtocolCalls
operator|.
name|validateContainerResponse
argument_list|(
name|responseProto
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|sce
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected Storage Container Exception: "
argument_list|,
name|sce
argument_list|)
expr_stmt|;
name|setIoException
argument_list|(
name|sce
argument_list|)
expr_stmt|;
throw|throw
name|sce
throw|;
block|}
block|}
DECL|method|setIoException (Exception e)
specifier|private
name|void
name|setIoException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|getIoException
argument_list|()
operator|==
literal|null
condition|)
block|{
name|IOException
name|exception
init|=
operator|new
name|IOException
argument_list|(
literal|"Unexpected Storage Container Exception: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ioException
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cleanup (boolean invalidateClient)
specifier|public
name|void
name|cleanup
parameter_list|(
name|boolean
name|invalidateClient
parameter_list|)
block|{
if|if
condition|(
name|xceiverClientManager
operator|!=
literal|null
condition|)
block|{
name|xceiverClientManager
operator|.
name|releaseClient
argument_list|(
name|xceiverClient
argument_list|,
name|invalidateClient
argument_list|)
expr_stmt|;
block|}
name|xceiverClientManager
operator|=
literal|null
expr_stmt|;
name|xceiverClient
operator|=
literal|null
expr_stmt|;
name|commitWatcher
operator|.
name|cleanup
argument_list|()
expr_stmt|;
if|if
condition|(
name|bufferList
operator|!=
literal|null
condition|)
block|{
name|bufferList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|bufferList
operator|=
literal|null
expr_stmt|;
name|responseExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Checks if the stream is open or exception has occured.    * If not, throws an exception.    *    * @throws IOException if stream is closed    */
DECL|method|checkOpen ()
specifier|private
name|void
name|checkOpen
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"BlockOutputStream has been closed."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|getIoException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|adjustBuffersOnException
argument_list|()
expr_stmt|;
throw|throw
name|getIoException
argument_list|()
throw|;
block|}
block|}
DECL|method|isClosed ()
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|xceiverClient
operator|==
literal|null
return|;
block|}
comment|/**    * Writes buffered data as a new chunk to the container and saves chunk    * information to be used later in putKey call.    *    * @throws IOException if there is an I/O error while performing the call    * @throws OzoneChecksumException if there is an error while computing    * checksum    */
DECL|method|writeChunkToContainer (ByteBuffer chunk)
specifier|private
name|void
name|writeChunkToContainer
parameter_list|(
name|ByteBuffer
name|chunk
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|effectiveChunkSize
init|=
name|chunk
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|ByteString
name|data
init|=
name|ByteStringHelper
operator|.
name|getByteString
argument_list|(
name|chunk
argument_list|)
decl_stmt|;
name|Checksum
name|checksum
init|=
operator|new
name|Checksum
argument_list|(
name|checksumType
argument_list|,
name|bytesPerChecksum
argument_list|)
decl_stmt|;
name|ChecksumData
name|checksumData
init|=
name|checksum
operator|.
name|computeChecksum
argument_list|(
name|chunk
argument_list|)
decl_stmt|;
name|ChunkInfo
name|chunkInfo
init|=
name|ChunkInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setChunkName
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
operator|+
literal|"_chunk_"
operator|+
operator|++
name|chunkIndex
argument_list|)
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
operator|.
name|setLen
argument_list|(
name|effectiveChunkSize
argument_list|)
operator|.
name|setChecksumData
argument_list|(
name|checksumData
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|XceiverClientReply
name|asyncReply
init|=
name|writeChunkAsync
argument_list|(
name|xceiverClient
argument_list|,
name|chunkInfo
argument_list|,
name|blockID
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
name|future
init|=
name|asyncReply
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|future
operator|.
name|thenApplyAsync
argument_list|(
name|e
lambda|->
block|{
try|try
block|{
name|validateResponse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|sce
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|sce
argument_list|)
expr_stmt|;
block|}
return|return
name|e
return|;
block|}
argument_list|,
name|responseExecutor
argument_list|)
operator|.
name|exceptionally
argument_list|(
name|e
lambda|->
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"writing chunk failed "
operator|+
name|chunkInfo
operator|.
name|getChunkName
argument_list|()
operator|+
literal|" blockID "
operator|+
name|blockID
operator|+
literal|" with exception "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CompletionException
name|ce
init|=
operator|new
name|CompletionException
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|setIoException
argument_list|(
name|ce
argument_list|)
expr_stmt|;
throw|throw
name|ce
throw|;
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected Storage Container Exception: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"writing chunk "
operator|+
name|chunkInfo
operator|.
name|getChunkName
argument_list|()
operator|+
literal|" blockID "
operator|+
name|blockID
operator|+
literal|" length "
operator|+
name|effectiveChunkSize
argument_list|)
expr_stmt|;
block|}
name|containerBlockData
operator|.
name|addChunks
argument_list|(
name|chunkInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setXceiverClient (XceiverClientSpi xceiverClient)
specifier|public
name|void
name|setXceiverClient
parameter_list|(
name|XceiverClientSpi
name|xceiverClient
parameter_list|)
block|{
name|this
operator|.
name|xceiverClient
operator|=
name|xceiverClient
expr_stmt|;
block|}
block|}
end_class

end_unit

