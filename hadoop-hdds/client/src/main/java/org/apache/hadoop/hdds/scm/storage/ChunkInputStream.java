begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Seekable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ReadChunkResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|ChecksumData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|OzoneChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * An {@link InputStream} called from BlockInputStream to read a chunk from the  * container. Each chunk may contain multiple underlying {@link ByteBuffer}  * instances.  */
end_comment

begin_class
DECL|class|ChunkInputStream
specifier|public
class|class
name|ChunkInputStream
extends|extends
name|InputStream
implements|implements
name|Seekable
block|{
DECL|field|chunkInfo
specifier|private
name|ChunkInfo
name|chunkInfo
decl_stmt|;
DECL|field|length
specifier|private
specifier|final
name|long
name|length
decl_stmt|;
DECL|field|blockID
specifier|private
specifier|final
name|BlockID
name|blockID
decl_stmt|;
DECL|field|xceiverClient
specifier|private
name|XceiverClientSpi
name|xceiverClient
decl_stmt|;
DECL|field|verifyChecksum
specifier|private
name|boolean
name|verifyChecksum
decl_stmt|;
DECL|field|allocated
specifier|private
name|boolean
name|allocated
init|=
literal|false
decl_stmt|;
comment|// Buffer to store the chunk data read from the DN container
DECL|field|buffers
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|buffers
decl_stmt|;
comment|// Index of the buffers corresponding to the current position of the buffers
DECL|field|bufferIndex
specifier|private
name|int
name|bufferIndex
decl_stmt|;
comment|// The offset of the current data residing in the buffers w.r.t the start
comment|// of chunk data
DECL|field|bufferOffset
specifier|private
name|long
name|bufferOffset
decl_stmt|;
comment|// The number of bytes of chunk data residing in the buffers currently
DECL|field|bufferLength
specifier|private
name|long
name|bufferLength
decl_stmt|;
comment|// Position of the ChunkInputStream is maintained by this variable (if a
comment|// seek is performed. This position is w.r.t to the chunk only and not the
comment|// block or key. This variable is set only if either the buffers are not
comment|// yet allocated or the if the allocated buffers do not cover the seeked
comment|// position. Once the chunk is read, this variable is reset.
DECL|field|chunkPosition
specifier|private
name|long
name|chunkPosition
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|EOF
specifier|private
specifier|static
specifier|final
name|int
name|EOF
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|ChunkInputStream (ChunkInfo chunkInfo, BlockID blockId, XceiverClientSpi xceiverClient, boolean verifyChecksum)
name|ChunkInputStream
parameter_list|(
name|ChunkInfo
name|chunkInfo
parameter_list|,
name|BlockID
name|blockId
parameter_list|,
name|XceiverClientSpi
name|xceiverClient
parameter_list|,
name|boolean
name|verifyChecksum
parameter_list|)
block|{
name|this
operator|.
name|chunkInfo
operator|=
name|chunkInfo
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|chunkInfo
operator|.
name|getLen
argument_list|()
expr_stmt|;
name|this
operator|.
name|blockID
operator|=
name|blockId
expr_stmt|;
name|this
operator|.
name|xceiverClient
operator|=
name|xceiverClient
expr_stmt|;
name|this
operator|.
name|verifyChecksum
operator|=
name|verifyChecksum
expr_stmt|;
block|}
DECL|method|getRemaining ()
specifier|public
specifier|synchronized
name|long
name|getRemaining
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|length
operator|-
name|getPos
argument_list|()
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|read ()
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|int
name|available
init|=
name|prepareRead
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|dataout
init|=
name|EOF
decl_stmt|;
if|if
condition|(
name|available
operator|==
name|EOF
condition|)
block|{
comment|// There is no more data in the chunk stream. The buffers should have
comment|// been released by now
name|Preconditions
operator|.
name|checkState
argument_list|(
name|buffers
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataout
operator|=
name|Byte
operator|.
name|toUnsignedInt
argument_list|(
name|buffers
operator|.
name|get
argument_list|(
name|bufferIndex
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|chunkStreamEOF
argument_list|()
condition|)
block|{
comment|// consumer might use getPos to determine EOF,
comment|// so release buffers when serving the last byte of data
name|releaseBuffers
argument_list|()
expr_stmt|;
block|}
return|return
name|dataout
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|read (byte[] b, int off, int len)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// According to the JavaDocs for InputStream, it is recommended that
comment|// subclasses provide an override of bulk read if possible for performance
comment|// reasons.  In addition to performance, we need to do it for correctness
comment|// reasons.  The Ozone REST service uses PipedInputStream and
comment|// PipedOutputStream to relay HTTP response data between a Jersey thread and
comment|// a Netty thread.  It turns out that PipedInputStream/PipedOutputStream
comment|// have a subtle dependency (bug?) on the wrapped stream providing separate
comment|// implementations of single-byte read and bulk read.  Without this, get key
comment|// responses might close the connection before writing all of the bytes
comment|// advertised in the Content-Length.
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|off
operator|<
literal|0
operator|||
name|len
argument_list|<
literal|0
operator|||
name|len
argument_list|>
name|b
operator|.
name|length
operator|-
name|off
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|checkOpen
argument_list|()
expr_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|available
init|=
name|prepareRead
argument_list|(
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|available
operator|==
name|EOF
condition|)
block|{
comment|// There is no more data in the chunk stream. The buffers should have
comment|// been released by now
name|Preconditions
operator|.
name|checkState
argument_list|(
name|buffers
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return
name|total
operator|!=
literal|0
condition|?
name|total
else|:
name|EOF
return|;
block|}
name|buffers
operator|.
name|get
argument_list|(
name|bufferIndex
argument_list|)
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
operator|+
name|total
argument_list|,
name|available
argument_list|)
expr_stmt|;
name|len
operator|-=
name|available
expr_stmt|;
name|total
operator|+=
name|available
expr_stmt|;
block|}
if|if
condition|(
name|chunkStreamEOF
argument_list|()
condition|)
block|{
comment|// smart consumers determine EOF by calling getPos()
comment|// so we release buffers when serving the final bytes of data
name|releaseBuffers
argument_list|()
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
comment|/**    * Seeks the ChunkInputStream to the specified position. This is done by    * updating the chunkPosition to the seeked position in case the buffers    * are not allocated or buffers do not contain the data corresponding to    * the seeked position (determined by buffersHavePosition()). Otherwise,    * the buffers position is updated to the seeked position.    */
annotation|@
name|Override
DECL|method|seek (long pos)
specifier|public
specifier|synchronized
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|<
literal|0
operator|||
name|pos
operator|>=
name|length
condition|)
block|{
if|if
condition|(
name|pos
operator|==
literal|0
condition|)
block|{
comment|// It is possible for length and pos to be zero in which case
comment|// seek should return instead of throwing exception
return|return;
block|}
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"EOF encountered at pos: "
operator|+
name|pos
operator|+
literal|" for chunk: "
operator|+
name|chunkInfo
operator|.
name|getChunkName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|buffersHavePosition
argument_list|(
name|pos
argument_list|)
condition|)
block|{
comment|// The bufferPosition is w.r.t the current chunk.
comment|// Adjust the bufferIndex and position to the seeked position.
name|adjustBufferPosition
argument_list|(
name|pos
operator|-
name|bufferOffset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|chunkPosition
operator|=
name|pos
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
specifier|synchronized
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|chunkPosition
operator|>=
literal|0
condition|)
block|{
return|return
name|chunkPosition
return|;
block|}
if|if
condition|(
name|chunkStreamEOF
argument_list|()
condition|)
block|{
return|return
name|length
return|;
block|}
if|if
condition|(
name|buffersHaveData
argument_list|()
condition|)
block|{
return|return
name|bufferOffset
operator|+
name|buffers
operator|.
name|get
argument_list|(
name|bufferIndex
argument_list|)
operator|.
name|position
argument_list|()
return|;
block|}
if|if
condition|(
name|buffersAllocated
argument_list|()
condition|)
block|{
return|return
name|bufferOffset
operator|+
name|bufferLength
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|xceiverClient
operator|!=
literal|null
condition|)
block|{
name|xceiverClient
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Checks if the stream is open.  If not, throw an exception.    *    * @throws IOException if stream is closed    */
DECL|method|checkOpen ()
specifier|protected
specifier|synchronized
name|void
name|checkOpen
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|xceiverClient
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"BlockInputStream has been closed."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Prepares to read by advancing through buffers or allocating new buffers,    * as needed until it finds data to return, or encounters EOF.    * @param len desired lenght of data to read    * @return length of data available to read, possibly less than desired length    */
DECL|method|prepareRead (int len)
specifier|private
specifier|synchronized
name|int
name|prepareRead
parameter_list|(
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|chunkPosition
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|buffersHavePosition
argument_list|(
name|chunkPosition
argument_list|)
condition|)
block|{
comment|// The current buffers have the seeked position. Adjust the buffer
comment|// index and position to point to the chunkPosition.
name|adjustBufferPosition
argument_list|(
name|chunkPosition
operator|-
name|bufferOffset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Read a required chunk data to fill the buffers with seeked
comment|// position data
name|readChunkFromContainer
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|buffersHaveData
argument_list|()
condition|)
block|{
comment|// Data is available from buffers
name|ByteBuffer
name|bb
init|=
name|buffers
operator|.
name|get
argument_list|(
name|bufferIndex
argument_list|)
decl_stmt|;
return|return
name|len
operator|>
name|bb
operator|.
name|remaining
argument_list|()
condition|?
name|bb
operator|.
name|remaining
argument_list|()
else|:
name|len
return|;
block|}
elseif|else
if|if
condition|(
name|dataRemainingInChunk
argument_list|()
condition|)
block|{
comment|// There is more data in the chunk stream which has not
comment|// been read into the buffers yet.
name|readChunkFromContainer
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// All available input from this chunk stream has been consumed.
return|return
name|EOF
return|;
block|}
block|}
block|}
comment|/**    * Reads full or partial Chunk from DN Container based on the current    * position of the ChunkInputStream, the number of bytes of data to read    * and the checksum boundaries.    * If successful, then the read data in saved in the buffers so that    * subsequent read calls can utilize it.    * @param len number of bytes of data to be read    * @throws IOException if there is an I/O error while performing the call    * to Datanode    */
DECL|method|readChunkFromContainer (int len)
specifier|private
specifier|synchronized
name|void
name|readChunkFromContainer
parameter_list|(
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// index of first byte to be read from the chunk
name|long
name|startByteIndex
decl_stmt|;
if|if
condition|(
name|chunkPosition
operator|>=
literal|0
condition|)
block|{
comment|// If seek operation was called to advance the buffer position, the
comment|// chunk should be read from that position onwards.
name|startByteIndex
operator|=
name|chunkPosition
expr_stmt|;
block|}
else|else
block|{
comment|// Start reading the chunk from the last chunkPosition onwards.
name|startByteIndex
operator|=
name|bufferOffset
operator|+
name|bufferLength
expr_stmt|;
block|}
if|if
condition|(
name|verifyChecksum
condition|)
block|{
comment|// Update the bufferOffset and bufferLength as per the checksum
comment|// boundary requirement.
name|computeChecksumBoundaries
argument_list|(
name|startByteIndex
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Read from the startByteIndex
name|bufferOffset
operator|=
name|startByteIndex
expr_stmt|;
name|bufferLength
operator|=
name|len
expr_stmt|;
block|}
comment|// Adjust the chunkInfo so that only the required bytes are read from
comment|// the chunk.
specifier|final
name|ChunkInfo
name|adjustedChunkInfo
init|=
name|ChunkInfo
operator|.
name|newBuilder
argument_list|(
name|chunkInfo
argument_list|)
operator|.
name|setOffset
argument_list|(
name|bufferOffset
argument_list|)
operator|.
name|setLen
argument_list|(
name|bufferLength
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ByteString
name|byteString
init|=
name|readChunk
argument_list|(
name|adjustedChunkInfo
argument_list|)
decl_stmt|;
name|buffers
operator|=
name|byteString
operator|.
name|asReadOnlyByteBufferList
argument_list|()
expr_stmt|;
name|bufferIndex
operator|=
literal|0
expr_stmt|;
name|allocated
operator|=
literal|true
expr_stmt|;
comment|// If the stream was seeked to position before, then the buffer
comment|// position should be adjusted as the reads happen at checksum boundaries.
comment|// The buffers position might need to be adjusted for the following
comment|// scenarios:
comment|//    1. Stream was seeked to a position before the chunk was read
comment|//    2. Chunk was read from index< the current position to account for
comment|//    checksum boundaries.
name|adjustBufferPosition
argument_list|(
name|startByteIndex
operator|-
name|bufferOffset
argument_list|)
expr_stmt|;
block|}
comment|/**    * Send RPC call to get the chunk from the container.    */
annotation|@
name|VisibleForTesting
DECL|method|readChunk (ChunkInfo readChunkInfo)
specifier|protected
name|ByteString
name|readChunk
parameter_list|(
name|ChunkInfo
name|readChunkInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|ReadChunkResponseProto
name|readChunkResponse
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|CheckedBiFunction
argument_list|>
name|validators
init|=
name|ContainerProtocolCalls
operator|.
name|getValidatorList
argument_list|()
decl_stmt|;
name|validators
operator|.
name|add
argument_list|(
name|validator
argument_list|)
expr_stmt|;
name|readChunkResponse
operator|=
name|ContainerProtocolCalls
operator|.
name|readChunk
argument_list|(
name|xceiverClient
argument_list|,
name|readChunkInfo
argument_list|,
name|blockID
argument_list|,
name|validators
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|StorageContainerException
condition|)
block|{
throw|throw
name|e
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected OzoneException: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|readChunkResponse
operator|.
name|getData
argument_list|()
return|;
block|}
specifier|private
name|CheckedBiFunction
argument_list|<
name|ContainerCommandRequestProto
argument_list|,
DECL|field|validator
name|ContainerCommandResponseProto
argument_list|,
name|IOException
argument_list|>
name|validator
init|=
parameter_list|(
name|request
parameter_list|,
name|response
parameter_list|)
lambda|->
block|{
specifier|final
name|ChunkInfo
name|reqChunkInfo
init|=
name|request
operator|.
name|getReadChunk
argument_list|()
operator|.
name|getChunkData
argument_list|()
decl_stmt|;
name|ReadChunkResponseProto
name|readChunkResponse
init|=
name|response
operator|.
name|getReadChunk
argument_list|()
decl_stmt|;
name|ByteString
name|byteString
init|=
name|readChunkResponse
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
name|byteString
operator|.
name|size
argument_list|()
operator|!=
name|reqChunkInfo
operator|.
name|getLen
argument_list|()
condition|)
block|{
comment|// Bytes read from chunk should be equal to chunk size.
throw|throw
operator|new
name|OzoneChecksumException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Inconsistent read for chunk=%s len=%d bytesRead=%d"
argument_list|,
name|reqChunkInfo
operator|.
name|getChunkName
argument_list|()
argument_list|,
name|reqChunkInfo
operator|.
name|getLen
argument_list|()
argument_list|,
name|byteString
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|verifyChecksum
condition|)
block|{
name|ChecksumData
name|checksumData
init|=
name|ChecksumData
operator|.
name|getFromProtoBuf
argument_list|(
name|chunkInfo
operator|.
name|getChecksumData
argument_list|()
argument_list|)
decl_stmt|;
comment|// ChecksumData stores checksum for each 'numBytesPerChecksum'
comment|// number of bytes in a list. Compute the index of the first
comment|// checksum to match with the read data
name|int
name|checkumStartIndex
init|=
call|(
name|int
call|)
argument_list|(
name|reqChunkInfo
operator|.
name|getOffset
argument_list|()
operator|/
name|checksumData
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|)
decl_stmt|;
name|Checksum
operator|.
name|verifyChecksum
argument_list|(
name|byteString
argument_list|,
name|checksumData
argument_list|,
name|checkumStartIndex
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**    * Return the offset and length of bytes that need to be read from the    * chunk file to cover the checksum boundaries covering the actual start and    * end of the chunk index to be read.    * For example, lets say the client is reading from index 120 to 450 in the    * chunk. And let's say checksum is stored for every 100 bytes in the chunk    * i.e. the first checksum is for bytes from index 0 to 99, the next for    * bytes from index 100 to 199 and so on. To verify bytes from 120 to 450,    * we would need to read from bytes 100 to 499 so that checksum    * verification can be done.    *    * @param startByteIndex the first byte index to be read by client    * @param dataLen number of bytes to be read from the chunk    */
DECL|method|computeChecksumBoundaries (long startByteIndex, int dataLen)
specifier|private
name|void
name|computeChecksumBoundaries
parameter_list|(
name|long
name|startByteIndex
parameter_list|,
name|int
name|dataLen
parameter_list|)
block|{
name|int
name|bytesPerChecksum
init|=
name|chunkInfo
operator|.
name|getChecksumData
argument_list|()
operator|.
name|getBytesPerChecksum
argument_list|()
decl_stmt|;
comment|// index of the last byte to be read from chunk, inclusively.
specifier|final
name|long
name|endByteIndex
init|=
name|startByteIndex
operator|+
name|dataLen
operator|-
literal|1
decl_stmt|;
name|bufferOffset
operator|=
operator|(
name|startByteIndex
operator|/
name|bytesPerChecksum
operator|)
operator|*
name|bytesPerChecksum
expr_stmt|;
comment|// inclusive
specifier|final
name|long
name|endIndex
init|=
operator|(
operator|(
name|endByteIndex
operator|/
name|bytesPerChecksum
operator|)
operator|+
literal|1
operator|)
operator|*
name|bytesPerChecksum
decl_stmt|;
comment|// exclusive
name|bufferLength
operator|=
name|Math
operator|.
name|min
argument_list|(
name|endIndex
argument_list|,
name|length
argument_list|)
operator|-
name|bufferOffset
expr_stmt|;
block|}
comment|/**    * Adjust the buffers position to account for seeked position and/ or checksum    * boundary reads.    * @param bufferPosition the position to which the buffers must be advanced    */
DECL|method|adjustBufferPosition (long bufferPosition)
specifier|private
name|void
name|adjustBufferPosition
parameter_list|(
name|long
name|bufferPosition
parameter_list|)
block|{
comment|// The bufferPosition is w.r.t the current chunk.
comment|// Adjust the bufferIndex and position to the seeked chunkPosition.
name|long
name|tempOffest
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|bufferPosition
operator|-
name|tempOffest
operator|>=
name|buffers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|capacity
argument_list|()
condition|)
block|{
name|tempOffest
operator|+=
name|buffers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|capacity
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bufferIndex
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
name|buffers
operator|.
name|get
argument_list|(
name|bufferIndex
argument_list|)
operator|.
name|position
argument_list|(
call|(
name|int
call|)
argument_list|(
name|bufferPosition
operator|-
name|tempOffest
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reset the chunkPosition as chunk stream has been initialized i.e. the
comment|// buffers have been allocated.
name|resetPosition
argument_list|()
expr_stmt|;
block|}
comment|/**    * Check if the buffers have been allocated data and false otherwise.    */
DECL|method|buffersAllocated ()
specifier|private
name|boolean
name|buffersAllocated
parameter_list|()
block|{
return|return
name|buffers
operator|!=
literal|null
operator|&&
operator|!
name|buffers
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * Check if the buffers have any data remaining between the current    * position and the limit.    */
DECL|method|buffersHaveData ()
specifier|private
name|boolean
name|buffersHaveData
parameter_list|()
block|{
name|boolean
name|hasData
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|buffersAllocated
argument_list|()
condition|)
block|{
while|while
condition|(
name|bufferIndex
operator|<
operator|(
name|buffers
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|buffers
operator|.
name|get
argument_list|(
name|bufferIndex
argument_list|)
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
comment|// current buffer has data
name|hasData
operator|=
literal|true
expr_stmt|;
break|break;
block|}
else|else
block|{
if|if
condition|(
name|buffersRemaining
argument_list|()
condition|)
block|{
comment|// move to next available buffer
operator|++
name|bufferIndex
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|bufferIndex
operator|<
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no more buffers remaining
break|break;
block|}
block|}
block|}
block|}
return|return
name|hasData
return|;
block|}
DECL|method|buffersRemaining ()
specifier|private
name|boolean
name|buffersRemaining
parameter_list|()
block|{
return|return
operator|(
name|bufferIndex
operator|<
operator|(
name|buffers
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|)
return|;
block|}
comment|/**    * Check if curernt buffers have the data corresponding to the input position.    */
DECL|method|buffersHavePosition (long pos)
specifier|private
name|boolean
name|buffersHavePosition
parameter_list|(
name|long
name|pos
parameter_list|)
block|{
comment|// Check if buffers have been allocated
if|if
condition|(
name|buffersAllocated
argument_list|()
condition|)
block|{
comment|// Check if the current buffers cover the input position
return|return
name|pos
operator|>=
name|bufferOffset
operator|&&
name|pos
operator|<
name|bufferOffset
operator|+
name|bufferLength
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Check if there is more data in the chunk which has not yet been read    * into the buffers.    */
DECL|method|dataRemainingInChunk ()
specifier|private
name|boolean
name|dataRemainingInChunk
parameter_list|()
block|{
name|long
name|bufferPos
decl_stmt|;
if|if
condition|(
name|chunkPosition
operator|>=
literal|0
condition|)
block|{
name|bufferPos
operator|=
name|chunkPosition
expr_stmt|;
block|}
else|else
block|{
name|bufferPos
operator|=
name|bufferOffset
operator|+
name|bufferLength
expr_stmt|;
block|}
return|return
name|bufferPos
operator|<
name|length
return|;
block|}
comment|/**    * Check if end of chunkStream has been reached.    */
DECL|method|chunkStreamEOF ()
specifier|private
name|boolean
name|chunkStreamEOF
parameter_list|()
block|{
if|if
condition|(
operator|!
name|allocated
condition|)
block|{
comment|// Chunk data has not been read yet
return|return
literal|false
return|;
block|}
if|if
condition|(
name|buffersHaveData
argument_list|()
operator|||
name|dataRemainingInChunk
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|bufferOffset
operator|+
name|bufferLength
operator|==
name|length
argument_list|,
literal|"EOF detected, but not at the last byte of the chunk"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|/**    * If EOF is reached, release the buffers.    */
DECL|method|releaseBuffers ()
specifier|private
name|void
name|releaseBuffers
parameter_list|()
block|{
name|buffers
operator|=
literal|null
expr_stmt|;
name|bufferIndex
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Reset the chunkPosition once the buffers are allocated.    */
DECL|method|resetPosition ()
name|void
name|resetPosition
parameter_list|()
block|{
name|this
operator|.
name|chunkPosition
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|getChunkName ()
name|String
name|getChunkName
parameter_list|()
block|{
return|return
name|chunkInfo
operator|.
name|getChunkName
argument_list|()
return|;
block|}
DECL|method|getLength ()
specifier|protected
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getChunkPosition ()
specifier|protected
name|long
name|getChunkPosition
parameter_list|()
block|{
return|return
name|chunkPosition
return|;
block|}
block|}
end_class

end_unit

