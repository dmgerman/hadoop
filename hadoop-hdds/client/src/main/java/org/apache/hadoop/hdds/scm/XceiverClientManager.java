begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|ConfigGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|ConfigType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|exception
operator|.
name|SCMSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|utils
operator|.
name|CertificateCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneSecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|ConfigTag
operator|.
name|OZONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|ConfigTag
operator|.
name|PERFORMANCE
import|;
end_import

begin_comment
comment|/**  * XceiverClientManager is responsible for the lifecycle of XceiverClient  * instances.  Callers use this class to acquire an XceiverClient instance  * connected to the desired container pipeline.  When done, the caller also uses  * this class to release the previously acquired XceiverClient instance.  *  *  * This class caches connection to container for reuse purpose, such that  * accessing same container frequently will be through the same connection  * without reestablishing connection. But the connection will be closed if  * not being used for a period of time.  */
end_comment

begin_class
DECL|class|XceiverClientManager
specifier|public
class|class
name|XceiverClientManager
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|XceiverClientManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//TODO : change this to SCM configuration class
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|clientCache
specifier|private
specifier|final
name|Cache
argument_list|<
name|String
argument_list|,
name|XceiverClientSpi
argument_list|>
name|clientCache
decl_stmt|;
DECL|field|useRatis
specifier|private
specifier|final
name|boolean
name|useRatis
decl_stmt|;
DECL|field|caCert
specifier|private
name|X509Certificate
name|caCert
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|static
name|XceiverClientMetrics
name|metrics
decl_stmt|;
DECL|field|isSecurityEnabled
specifier|private
name|boolean
name|isSecurityEnabled
decl_stmt|;
DECL|field|topologyAwareRead
specifier|private
specifier|final
name|boolean
name|topologyAwareRead
decl_stmt|;
comment|/**    * Creates a new XceiverClientManager for non secured ozone cluster.    * For security enabled ozone cluster, client should use the other constructor    * with a valid ca certificate in pem string format.    *    * @param conf configuration    */
DECL|method|XceiverClientManager (Configuration conf)
specifier|public
name|XceiverClientManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|OzoneConfiguration
operator|.
name|of
argument_list|(
name|conf
argument_list|)
operator|.
name|getObject
argument_list|(
name|ScmClientConfig
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|XceiverClientManager (Configuration conf, ScmClientConfig clientConf, String caCertPem)
specifier|public
name|XceiverClientManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ScmClientConfig
name|clientConf
parameter_list|,
name|String
name|caCertPem
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|clientConf
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|long
name|staleThresholdMs
init|=
name|clientConf
operator|.
name|getStaleThreshold
argument_list|(
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|this
operator|.
name|useRatis
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|ScmConfigKeys
operator|.
name|DFS_CONTAINER_RATIS_ENABLED_KEY
argument_list|,
name|ScmConfigKeys
operator|.
name|DFS_CONTAINER_RATIS_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|isSecurityEnabled
operator|=
name|OzoneSecurityUtil
operator|.
name|isSecurityEnabled
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSecurityEnabled
condition|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|caCertPem
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|caCert
operator|=
name|CertificateCodec
operator|.
name|getX509Cert
argument_list|(
name|caCertPem
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CertificateException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SCMSecurityException
argument_list|(
literal|"Error: Fail to get SCM CA certificate"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|clientCache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
name|staleThresholdMs
argument_list|,
name|MILLISECONDS
argument_list|)
operator|.
name|maximumSize
argument_list|(
name|clientConf
operator|.
name|getMaxSize
argument_list|()
argument_list|)
operator|.
name|removalListener
argument_list|(
operator|new
name|RemovalListener
argument_list|<
name|String
argument_list|,
name|XceiverClientSpi
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onRemoval
parameter_list|(
name|RemovalNotification
argument_list|<
name|String
argument_list|,
name|XceiverClientSpi
argument_list|>
name|removalNotification
parameter_list|)
block|{
synchronized|synchronized
init|(
name|clientCache
init|)
block|{
comment|// Mark the entry as evicted
name|XceiverClientSpi
name|info
init|=
name|removalNotification
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|info
operator|.
name|setEvicted
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|topologyAwareRead
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_NETWORK_TOPOLOGY_AWARE_READ_KEY
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_NETWORK_TOPOLOGY_AWARE_READ_DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getClientCache ()
specifier|public
name|Cache
argument_list|<
name|String
argument_list|,
name|XceiverClientSpi
argument_list|>
name|getClientCache
parameter_list|()
block|{
return|return
name|clientCache
return|;
block|}
comment|/**    * Acquires a XceiverClientSpi connected to a container capable of    * storing the specified key.    *    * If there is already a cached XceiverClientSpi, simply return    * the cached otherwise create a new one.    *    * @param pipeline the container pipeline for the client connection    * @return XceiverClientSpi connected to a container    * @throws IOException if a XceiverClientSpi cannot be acquired    */
DECL|method|acquireClient (Pipeline pipeline)
specifier|public
name|XceiverClientSpi
name|acquireClient
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|acquireClient
argument_list|(
name|pipeline
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Acquires a XceiverClientSpi connected to a container for read.    *    * If there is already a cached XceiverClientSpi, simply return    * the cached otherwise create a new one.    *    * @param pipeline the container pipeline for the client connection    * @return XceiverClientSpi connected to a container    * @throws IOException if a XceiverClientSpi cannot be acquired    */
DECL|method|acquireClientForReadData (Pipeline pipeline)
specifier|public
name|XceiverClientSpi
name|acquireClientForReadData
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|acquireClient
argument_list|(
name|pipeline
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|acquireClient (Pipeline pipeline, boolean read)
specifier|private
name|XceiverClientSpi
name|acquireClient
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|boolean
name|read
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|pipeline
operator|.
name|getNodes
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|pipeline
operator|.
name|getNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|clientCache
init|)
block|{
name|XceiverClientSpi
name|info
init|=
name|getClient
argument_list|(
name|pipeline
argument_list|,
name|read
argument_list|)
decl_stmt|;
name|info
operator|.
name|incrementReference
argument_list|()
expr_stmt|;
return|return
name|info
return|;
block|}
block|}
comment|/**    * Releases a XceiverClientSpi after use.    *    * @param client client to release    * @param invalidateClient if true, invalidates the client in cache    */
DECL|method|releaseClient (XceiverClientSpi client, boolean invalidateClient)
specifier|public
name|void
name|releaseClient
parameter_list|(
name|XceiverClientSpi
name|client
parameter_list|,
name|boolean
name|invalidateClient
parameter_list|)
block|{
name|releaseClient
argument_list|(
name|client
argument_list|,
name|invalidateClient
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Releases a read XceiverClientSpi after use.    *    * @param client client to release    * @param invalidateClient if true, invalidates the client in cache    */
DECL|method|releaseClientForReadData (XceiverClientSpi client, boolean invalidateClient)
specifier|public
name|void
name|releaseClientForReadData
parameter_list|(
name|XceiverClientSpi
name|client
parameter_list|,
name|boolean
name|invalidateClient
parameter_list|)
block|{
name|releaseClient
argument_list|(
name|client
argument_list|,
name|invalidateClient
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|releaseClient (XceiverClientSpi client, boolean invalidateClient, boolean read)
specifier|private
name|void
name|releaseClient
parameter_list|(
name|XceiverClientSpi
name|client
parameter_list|,
name|boolean
name|invalidateClient
parameter_list|,
name|boolean
name|read
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|client
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|clientCache
init|)
block|{
name|client
operator|.
name|decrementReference
argument_list|()
expr_stmt|;
if|if
condition|(
name|invalidateClient
condition|)
block|{
name|Pipeline
name|pipeline
init|=
name|client
operator|.
name|getPipeline
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|getPipelineCacheKey
argument_list|(
name|pipeline
argument_list|,
name|read
argument_list|)
decl_stmt|;
name|XceiverClientSpi
name|cachedClient
init|=
name|clientCache
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedClient
operator|==
name|client
condition|)
block|{
name|clientCache
operator|.
name|invalidate
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getClient (Pipeline pipeline, boolean forRead)
specifier|private
name|XceiverClientSpi
name|getClient
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|boolean
name|forRead
parameter_list|)
throws|throws
name|IOException
block|{
name|HddsProtos
operator|.
name|ReplicationType
name|type
init|=
name|pipeline
operator|.
name|getType
argument_list|()
decl_stmt|;
try|try
block|{
comment|// create different client for read different pipeline node based on
comment|// network topology
name|String
name|key
init|=
name|getPipelineCacheKey
argument_list|(
name|pipeline
argument_list|,
name|forRead
argument_list|)
decl_stmt|;
comment|// Append user short name to key to prevent a different user
comment|// from using same instance of xceiverClient.
name|key
operator|=
name|isSecurityEnabled
condition|?
name|key
operator|+
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
else|:
name|key
expr_stmt|;
return|return
name|clientCache
operator|.
name|get
argument_list|(
name|key
argument_list|,
operator|new
name|Callable
argument_list|<
name|XceiverClientSpi
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|XceiverClientSpi
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|XceiverClientSpi
name|client
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|RATIS
case|:
name|client
operator|=
name|XceiverClientRatis
operator|.
name|newXceiverClientRatis
argument_list|(
name|pipeline
argument_list|,
name|conf
argument_list|,
name|caCert
argument_list|)
expr_stmt|;
name|client
operator|.
name|connect
argument_list|()
expr_stmt|;
break|break;
case|case
name|STAND_ALONE
case|:
name|client
operator|=
operator|new
name|XceiverClientGrpc
argument_list|(
name|pipeline
argument_list|,
name|conf
argument_list|,
name|caCert
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAINED
case|:
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"not implemented"
operator|+
name|pipeline
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|client
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception getting XceiverClient: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getPipelineCacheKey (Pipeline pipeline, boolean forRead)
specifier|private
name|String
name|getPipelineCacheKey
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|boolean
name|forRead
parameter_list|)
block|{
name|String
name|key
init|=
name|pipeline
operator|.
name|getId
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|pipeline
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|topologyAwareRead
operator|&&
name|forRead
condition|)
block|{
try|try
block|{
name|key
operator|+=
name|pipeline
operator|.
name|getClosestNode
argument_list|()
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get closest node to create pipeline cache key:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|key
return|;
block|}
comment|/**    * Close and remove all the cached clients.    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|//closing is done through RemovalListener
name|clientCache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
name|clientCache
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|unRegister
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tells us if Ratis is enabled for this cluster.    * @return True if Ratis is enabled.    */
DECL|method|isUseRatis ()
specifier|public
name|boolean
name|isUseRatis
parameter_list|()
block|{
return|return
name|useRatis
return|;
block|}
comment|/**    * Returns hard coded 3 as replication factor.    * @return 3    */
DECL|method|getFactor ()
specifier|public
name|HddsProtos
operator|.
name|ReplicationFactor
name|getFactor
parameter_list|()
block|{
if|if
condition|(
name|isUseRatis
argument_list|()
condition|)
block|{
return|return
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
return|;
block|}
return|return
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
return|;
block|}
comment|/**    * Returns the default replication type.    * @return Ratis or Standalone    */
DECL|method|getType ()
specifier|public
name|HddsProtos
operator|.
name|ReplicationType
name|getType
parameter_list|()
block|{
comment|// TODO : Fix me and make Ratis default before release.
comment|// TODO: Remove this as replication factor and type are pipeline properties
if|if
condition|(
name|isUseRatis
argument_list|()
condition|)
block|{
return|return
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
return|;
block|}
return|return
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|STAND_ALONE
return|;
block|}
DECL|method|byteBufferToByteStringConversion ()
specifier|public
name|Function
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteString
argument_list|>
name|byteBufferToByteStringConversion
parameter_list|()
block|{
return|return
name|ByteStringConversion
operator|.
name|createByteBufferConversion
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * Get xceiver client metric.    */
DECL|method|getXceiverClientMetrics ()
specifier|public
specifier|synchronized
specifier|static
name|XceiverClientMetrics
name|getXceiverClientMetrics
parameter_list|()
block|{
if|if
condition|(
name|metrics
operator|==
literal|null
condition|)
block|{
name|metrics
operator|=
name|XceiverClientMetrics
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
return|return
name|metrics
return|;
block|}
comment|/**    * Configuration for HDDS client.    */
annotation|@
name|ConfigGroup
argument_list|(
name|prefix
operator|=
literal|"scm.container.client"
argument_list|)
DECL|class|ScmClientConfig
specifier|public
specifier|static
class|class
name|ScmClientConfig
block|{
DECL|field|maxSize
specifier|private
name|int
name|maxSize
decl_stmt|;
DECL|field|staleThreshold
specifier|private
name|long
name|staleThreshold
decl_stmt|;
DECL|field|maxOutstandingRequests
specifier|private
name|int
name|maxOutstandingRequests
decl_stmt|;
DECL|method|getStaleThreshold (TimeUnit unit)
specifier|public
name|long
name|getStaleThreshold
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|unit
operator|.
name|convert
argument_list|(
name|staleThreshold
argument_list|,
name|MILLISECONDS
argument_list|)
return|;
block|}
annotation|@
name|Config
argument_list|(
name|key
operator|=
literal|"idle.threshold"
argument_list|,
name|type
operator|=
name|ConfigType
operator|.
name|TIME
argument_list|,
name|timeUnit
operator|=
name|MILLISECONDS
argument_list|,
name|defaultValue
operator|=
literal|"10s"
argument_list|,
name|tags
operator|=
block|{
name|OZONE
block|,
name|PERFORMANCE
block|}
argument_list|,
name|description
operator|=
literal|"In the standalone pipelines, the SCM clients use netty to "
operator|+
literal|" communicate with the container. It also uses connection pooling"
operator|+
literal|" to reduce client side overheads. This allows a connection to"
operator|+
literal|" stay idle for a while before the connection is closed."
argument_list|)
DECL|method|setStaleThreshold (long staleThreshold)
specifier|public
name|void
name|setStaleThreshold
parameter_list|(
name|long
name|staleThreshold
parameter_list|)
block|{
name|this
operator|.
name|staleThreshold
operator|=
name|staleThreshold
expr_stmt|;
block|}
DECL|method|getMaxSize ()
specifier|public
name|int
name|getMaxSize
parameter_list|()
block|{
return|return
name|maxSize
return|;
block|}
annotation|@
name|Config
argument_list|(
name|key
operator|=
literal|"max.size"
argument_list|,
name|defaultValue
operator|=
literal|"256"
argument_list|,
name|tags
operator|=
block|{
name|OZONE
block|,
name|PERFORMANCE
block|}
argument_list|,
name|description
operator|=
literal|"Controls the maximum number of connections that are cached via"
operator|+
literal|" client connection pooling. If the number of connections"
operator|+
literal|" exceed this count, then the oldest idle connection is evicted."
argument_list|)
DECL|method|setMaxSize (int maxSize)
specifier|public
name|void
name|setMaxSize
parameter_list|(
name|int
name|maxSize
parameter_list|)
block|{
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
block|}
DECL|method|getMaxOutstandingRequests ()
specifier|public
name|int
name|getMaxOutstandingRequests
parameter_list|()
block|{
return|return
name|maxOutstandingRequests
return|;
block|}
annotation|@
name|Config
argument_list|(
name|key
operator|=
literal|"max.outstanding.requests"
argument_list|,
name|defaultValue
operator|=
literal|"100"
argument_list|,
name|tags
operator|=
block|{
name|OZONE
block|,
name|PERFORMANCE
block|}
argument_list|,
name|description
operator|=
literal|"Controls the maximum number of outstanding async requests that can"
operator|+
literal|" be handled by the Standalone as well as Ratis client."
argument_list|)
DECL|method|setMaxOutstandingRequests (int maxOutstandingRequests)
specifier|public
name|void
name|setMaxOutstandingRequests
parameter_list|(
name|int
name|maxOutstandingRequests
parameter_list|)
block|{
name|this
operator|.
name|maxOutstandingRequests
operator|=
name|maxOutstandingRequests
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

