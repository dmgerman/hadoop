begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientAsyncReply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|ChecksumData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|OzoneChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|BlockData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
operator|.
name|ContainerProtocolCalls
operator|.
name|putBlockAsync
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
operator|.
name|ContainerProtocolCalls
operator|.
name|writeChunkAsync
import|;
end_import

begin_comment
comment|/**  * An {@link OutputStream} used by the REST service in combination with the  * SCMClient to write the value of a key to a sequence  * of container chunks.  Writes are buffered locally and periodically written to  * the container as a new chunk.  In order to preserve the semantics that  * replacement of a pre-existing key is atomic, each instance of the stream has  * an internal unique identifier.  This unique identifier and a monotonically  * increasing chunk index form a composite key that is used as the chunk name.  * After all data is written, a putKey call creates or updates the corresponding  * container key, and this call includes the full list of chunks that make up  * the key data.  The list of chunks is updated all at once.  Therefore, a  * concurrent reader never can see an intermediate state in which different  * chunks of data from different versions of the key data are interleaved.  * This class encapsulates all state management for buffering and writing  * through to the container.  */
end_comment

begin_class
DECL|class|ChunkOutputStream
specifier|public
class|class
name|ChunkOutputStream
extends|extends
name|OutputStream
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChunkOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|blockID
specifier|private
name|BlockID
name|blockID
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|traceID
specifier|private
specifier|final
name|String
name|traceID
decl_stmt|;
DECL|field|containerBlockData
specifier|private
specifier|final
name|BlockData
operator|.
name|Builder
name|containerBlockData
decl_stmt|;
DECL|field|xceiverClientManager
specifier|private
name|XceiverClientManager
name|xceiverClientManager
decl_stmt|;
DECL|field|xceiverClient
specifier|private
name|XceiverClientSpi
name|xceiverClient
decl_stmt|;
DECL|field|checksum
specifier|private
specifier|final
name|Checksum
name|checksum
decl_stmt|;
DECL|field|streamId
specifier|private
specifier|final
name|String
name|streamId
decl_stmt|;
DECL|field|chunkIndex
specifier|private
name|int
name|chunkIndex
decl_stmt|;
DECL|field|chunkSize
specifier|private
name|int
name|chunkSize
decl_stmt|;
DECL|field|streamBufferFlushSize
specifier|private
specifier|final
name|long
name|streamBufferFlushSize
decl_stmt|;
DECL|field|streamBufferMaxSize
specifier|private
specifier|final
name|long
name|streamBufferMaxSize
decl_stmt|;
DECL|field|watchTimeout
specifier|private
specifier|final
name|long
name|watchTimeout
decl_stmt|;
DECL|field|buffer
specifier|private
name|ByteBuffer
name|buffer
decl_stmt|;
comment|// The IOException will be set by response handling thread in case there is an
comment|// exception received in the response. If the exception is set, the next
comment|// request will fail upfront.
DECL|field|ioException
specifier|private
name|IOException
name|ioException
decl_stmt|;
DECL|field|responseExecutor
specifier|private
name|ExecutorService
name|responseExecutor
decl_stmt|;
comment|// position of the buffer where the last flush was attempted
DECL|field|lastFlushPos
specifier|private
name|int
name|lastFlushPos
decl_stmt|;
comment|// position of the buffer till which the flush was successfully
comment|// acknowledged by all nodes in pipeline
DECL|field|lastSuccessfulFlushIndex
specifier|private
name|int
name|lastSuccessfulFlushIndex
decl_stmt|;
comment|// list to hold up all putBlock futures
specifier|private
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
argument_list|>
DECL|field|futureList
name|futureList
decl_stmt|;
comment|// list maintaining commit indexes for putBlocks
DECL|field|commitIndexList
specifier|private
name|List
argument_list|<
name|Long
argument_list|>
name|commitIndexList
decl_stmt|;
comment|/**    * Creates a new ChunkOutputStream.    *    * @param blockID              block ID    * @param key                  chunk key    * @param xceiverClientManager client manager that controls client    * @param xceiverClient        client to perform container calls    * @param traceID              container protocol call args    * @param chunkSize            chunk size    */
DECL|method|ChunkOutputStream (BlockID blockID, String key, XceiverClientManager xceiverClientManager, XceiverClientSpi xceiverClient, String traceID, int chunkSize, long streamBufferFlushSize, long streamBufferMaxSize, long watchTimeout, ByteBuffer buffer, Checksum checksum)
specifier|public
name|ChunkOutputStream
parameter_list|(
name|BlockID
name|blockID
parameter_list|,
name|String
name|key
parameter_list|,
name|XceiverClientManager
name|xceiverClientManager
parameter_list|,
name|XceiverClientSpi
name|xceiverClient
parameter_list|,
name|String
name|traceID
parameter_list|,
name|int
name|chunkSize
parameter_list|,
name|long
name|streamBufferFlushSize
parameter_list|,
name|long
name|streamBufferMaxSize
parameter_list|,
name|long
name|watchTimeout
parameter_list|,
name|ByteBuffer
name|buffer
parameter_list|,
name|Checksum
name|checksum
parameter_list|)
block|{
name|this
operator|.
name|blockID
operator|=
name|blockID
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|traceID
operator|=
name|traceID
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
name|chunkSize
expr_stmt|;
name|KeyValue
name|keyValue
init|=
name|KeyValue
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"TYPE"
argument_list|)
operator|.
name|setValue
argument_list|(
literal|"KEY"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|this
operator|.
name|containerBlockData
operator|=
name|BlockData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|blockID
operator|.
name|getDatanodeBlockIDProtobuf
argument_list|()
argument_list|)
operator|.
name|addMetadata
argument_list|(
name|keyValue
argument_list|)
expr_stmt|;
name|this
operator|.
name|xceiverClientManager
operator|=
name|xceiverClientManager
expr_stmt|;
name|this
operator|.
name|xceiverClient
operator|=
name|xceiverClient
expr_stmt|;
name|this
operator|.
name|streamId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|chunkIndex
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|streamBufferFlushSize
operator|=
name|streamBufferFlushSize
expr_stmt|;
name|this
operator|.
name|streamBufferMaxSize
operator|=
name|streamBufferMaxSize
expr_stmt|;
name|this
operator|.
name|watchTimeout
operator|=
name|watchTimeout
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
name|this
operator|.
name|ioException
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|checksum
operator|=
name|checksum
expr_stmt|;
comment|// A single thread executor handle the responses of async requests
name|responseExecutor
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
expr_stmt|;
name|commitIndexList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|lastSuccessfulFlushIndex
operator|=
literal|0
expr_stmt|;
name|futureList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|lastFlushPos
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|getBlockID ()
specifier|public
name|BlockID
name|getBlockID
parameter_list|()
block|{
return|return
name|blockID
return|;
block|}
DECL|method|getLastSuccessfulFlushIndex ()
specifier|public
name|int
name|getLastSuccessfulFlushIndex
parameter_list|()
block|{
return|return
name|lastSuccessfulFlushIndex
return|;
block|}
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|buf
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] b, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|(
name|off
operator|<
literal|0
operator|)
operator|||
operator|(
name|off
operator|>
name|b
operator|.
name|length
operator|)
operator|||
operator|(
name|len
operator|<
literal|0
operator|)
operator|||
operator|(
operator|(
name|off
operator|+
name|len
operator|)
operator|>
name|b
operator|.
name|length
operator|)
operator|||
operator|(
operator|(
name|off
operator|+
name|len
operator|)
operator|<
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|checkOpen
argument_list|()
expr_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|writeLen
decl_stmt|;
name|writeLen
operator|=
name|Math
operator|.
name|min
argument_list|(
name|chunkSize
operator|-
name|buffer
operator|.
name|position
argument_list|()
operator|%
name|chunkSize
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|writeLen
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|position
argument_list|()
operator|%
name|chunkSize
operator|==
literal|0
condition|)
block|{
name|int
name|pos
init|=
name|buffer
operator|.
name|position
argument_list|()
operator|-
name|chunkSize
decl_stmt|;
name|int
name|limit
init|=
name|buffer
operator|.
name|position
argument_list|()
decl_stmt|;
name|writeChunk
argument_list|(
name|pos
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
name|off
operator|+=
name|writeLen
expr_stmt|;
name|len
operator|-=
name|writeLen
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|position
argument_list|()
operator|>=
name|streamBufferFlushSize
operator|&&
name|buffer
operator|.
name|position
argument_list|()
operator|%
name|streamBufferFlushSize
operator|==
literal|0
condition|)
block|{
name|lastFlushPos
operator|=
name|buffer
operator|.
name|position
argument_list|()
expr_stmt|;
name|futureList
operator|.
name|add
argument_list|(
name|handlePartialFlush
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buffer
operator|.
name|position
argument_list|()
operator|>=
name|streamBufferMaxSize
operator|&&
name|buffer
operator|.
name|position
argument_list|()
operator|%
name|streamBufferMaxSize
operator|==
literal|0
condition|)
block|{
name|handleFullBuffer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Will be called on the retryPath in case closedContainerException/    * TimeoutException.    * @param len length of data to write    * @throws IOException if error occured    */
comment|// In this case, the data is already cached in the buffer.
DECL|method|writeOnRetry (int len)
specifier|public
name|void
name|writeOnRetry
parameter_list|(
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|int
name|off
init|=
literal|0
decl_stmt|;
name|checkOpen
argument_list|()
expr_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|writeLen
decl_stmt|;
name|writeLen
operator|=
name|Math
operator|.
name|min
argument_list|(
name|chunkSize
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|writeLen
operator|==
name|chunkSize
condition|)
block|{
name|int
name|pos
init|=
name|off
decl_stmt|;
name|int
name|limit
init|=
name|pos
operator|+
name|chunkSize
decl_stmt|;
name|writeChunk
argument_list|(
name|pos
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
name|off
operator|+=
name|writeLen
expr_stmt|;
name|len
operator|-=
name|writeLen
expr_stmt|;
if|if
condition|(
name|off
operator|%
name|streamBufferFlushSize
operator|==
literal|0
condition|)
block|{
name|lastFlushPos
operator|=
name|off
expr_stmt|;
name|futureList
operator|.
name|add
argument_list|(
name|handlePartialFlush
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|off
operator|%
name|streamBufferMaxSize
operator|==
literal|0
condition|)
block|{
name|handleFullBuffer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleResponse ( ContainerProtos.ContainerCommandResponseProto response, XceiverClientAsyncReply asyncReply)
specifier|private
name|void
name|handleResponse
parameter_list|(
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|response
parameter_list|,
name|XceiverClientAsyncReply
name|asyncReply
parameter_list|)
block|{
name|validateResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|discardBuffer
argument_list|(
name|asyncReply
argument_list|)
expr_stmt|;
block|}
DECL|method|discardBuffer (XceiverClientAsyncReply asyncReply)
specifier|private
name|void
name|discardBuffer
parameter_list|(
name|XceiverClientAsyncReply
name|asyncReply
parameter_list|)
block|{
if|if
condition|(
operator|!
name|commitIndexList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|long
name|index
init|=
name|commitIndexList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkIfBufferDiscardRequired
argument_list|(
name|asyncReply
argument_list|,
name|index
argument_list|)
condition|)
block|{
name|updateFlushIndex
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * just update the lastSuccessfulFlushIndex. Since we have allocated    * the buffer more than the streamBufferMaxSize, we can keep on writing    * to the buffer. In case of failure, we will read the data starting from    * lastSuccessfulFlushIndex.    */
DECL|method|updateFlushIndex ()
specifier|private
name|void
name|updateFlushIndex
parameter_list|()
block|{
name|lastSuccessfulFlushIndex
operator|+=
name|streamBufferFlushSize
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Discarding buffer till pos "
operator|+
name|lastSuccessfulFlushIndex
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|commitIndexList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|commitIndexList
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|futureList
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check if the last commitIndex stored at the beginning of the    * commitIndexList is less than equal to current commitInfo indexes.    * If its true, the buffer has been successfully flushed till the    * last position where flush happened.    */
DECL|method|checkIfBufferDiscardRequired ( XceiverClientAsyncReply asyncReply, long commitIndex)
specifier|private
name|boolean
name|checkIfBufferDiscardRequired
parameter_list|(
name|XceiverClientAsyncReply
name|asyncReply
parameter_list|,
name|long
name|commitIndex
parameter_list|)
block|{
if|if
condition|(
name|asyncReply
operator|.
name|getCommitInfos
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XceiverClientAsyncReply
operator|.
name|CommitInfo
name|info
range|:
name|asyncReply
operator|.
name|getCommitInfos
argument_list|()
control|)
block|{
if|if
condition|(
name|info
operator|.
name|getCommitIndex
argument_list|()
operator|<
name|commitIndex
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * This is a blocking call.It will wait for the flush till the commit index    * at the head of the commitIndexList gets replicated to all or majority.    * @throws IOException    */
DECL|method|handleFullBuffer ()
specifier|private
name|void
name|handleFullBuffer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|commitIndexList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|watchForCommit
argument_list|(
name|commitIndexList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * calls watchForCommit API of the Ratis Client. For Standalone client,    * it is a no op.    * @param commitIndex log index to watch for    * @throws IOException IOException in case watch gets timed out    */
DECL|method|watchForCommit (long commitIndex)
specifier|private
name|void
name|watchForCommit
parameter_list|(
name|long
name|commitIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|commitIndexList
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|xceiverClient
operator|.
name|watchForCommit
argument_list|(
name|commitIndex
argument_list|,
name|watchTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
decl||
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"watchForCommit failed for index "
operator|+
name|commitIndex
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected Storage Container Exception: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
DECL|method|handlePartialFlush ()
name|ContainerCommandResponseProto
argument_list|>
name|handlePartialFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|requestId
init|=
name|traceID
operator|+
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
operator|+
name|chunkIndex
operator|+
name|blockID
decl_stmt|;
try|try
block|{
name|XceiverClientAsyncReply
name|asyncReply
init|=
name|putBlockAsync
argument_list|(
name|xceiverClient
argument_list|,
name|containerBlockData
operator|.
name|build
argument_list|()
argument_list|,
name|requestId
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
name|future
init|=
name|asyncReply
operator|.
name|getResponse
argument_list|()
decl_stmt|;
return|return
name|future
operator|.
name|thenApplyAsync
argument_list|(
name|e
lambda|->
block|{
name|handleResponse
argument_list|(
name|e
argument_list|,
name|asyncReply
argument_list|)
expr_stmt|;
comment|// if the ioException is not set, putBlock is successful
if|if
condition|(
name|ioException
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding index "
operator|+
name|asyncReply
operator|.
name|getLogIndex
argument_list|()
operator|+
literal|" commitList size "
operator|+
name|commitIndexList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BlockID
name|responseBlockID
init|=
name|BlockID
operator|.
name|getFromProtobuf
argument_list|(
name|e
operator|.
name|getPutBlock
argument_list|()
operator|.
name|getCommittedBlockLength
argument_list|()
operator|.
name|getBlockID
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|blockID
operator|.
name|getContainerBlockID
argument_list|()
operator|.
name|equals
argument_list|(
name|responseBlockID
operator|.
name|getContainerBlockID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// updates the bcsId of the block
name|blockID
operator|=
name|responseBlockID
expr_stmt|;
name|long
name|index
init|=
name|asyncReply
operator|.
name|getLogIndex
argument_list|()
decl_stmt|;
comment|// for standalone protocol, logIndex will always be 0.
if|if
condition|(
name|index
operator|!=
literal|0
condition|)
block|{
name|commitIndexList
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateFlushIndex
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|e
return|;
block|}
argument_list|,
name|responseExecutor
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected Storage Container Exception: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|xceiverClientManager
operator|!=
literal|null
operator|&&
name|xceiverClient
operator|!=
literal|null
operator|&&
name|buffer
operator|!=
literal|null
condition|)
block|{
name|checkOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|position
argument_list|()
operator|>
literal|0
operator|&&
name|lastSuccessfulFlushIndex
operator|!=
name|buffer
operator|.
name|position
argument_list|()
condition|)
block|{
try|try
block|{
comment|// flush the last chunk data residing on the buffer
if|if
condition|(
name|buffer
operator|.
name|position
argument_list|()
operator|%
name|chunkSize
operator|>
literal|0
condition|)
block|{
name|int
name|pos
init|=
name|buffer
operator|.
name|position
argument_list|()
operator|-
operator|(
name|buffer
operator|.
name|position
argument_list|()
operator|%
name|chunkSize
operator|)
decl_stmt|;
name|writeChunk
argument_list|(
name|pos
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastFlushPos
operator|!=
name|buffer
operator|.
name|position
argument_list|()
condition|)
block|{
name|lastFlushPos
operator|=
name|buffer
operator|.
name|position
argument_list|()
expr_stmt|;
name|handlePartialFlush
argument_list|()
expr_stmt|;
block|}
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|combinedFuture
init|=
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|futureList
operator|.
name|toArray
argument_list|(
operator|new
name|CompletableFuture
index|[
name|futureList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|combinedFuture
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// just check again if the exception is hit while waiting for the
comment|// futures to ensure flush has indeed succeeded
name|checkOpen
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected Storage Container Exception: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|writeChunk (int pos, int limit)
specifier|private
name|void
name|writeChunk
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Please note : We are not flipping the slice when we write since
comment|// the slices are pointing the buffer start and end as needed for
comment|// the chunk write. Also please note, Duplicate does not create a
comment|// copy of data, it only creates metadata that points to the data
comment|// stream.
name|ByteBuffer
name|chunk
init|=
name|buffer
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|chunk
operator|.
name|position
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|chunk
operator|.
name|limit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|writeChunkToContainer
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|xceiverClientManager
operator|!=
literal|null
operator|&&
name|xceiverClient
operator|!=
literal|null
operator|&&
name|buffer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|buffer
operator|.
name|position
argument_list|()
operator|>
name|lastFlushPos
condition|)
block|{
name|int
name|pos
init|=
name|buffer
operator|.
name|position
argument_list|()
operator|-
operator|(
name|buffer
operator|.
name|position
argument_list|()
operator|%
name|chunkSize
operator|)
decl_stmt|;
name|writeChunk
argument_list|(
name|pos
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|futureList
operator|.
name|add
argument_list|(
name|handlePartialFlush
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|combinedFuture
init|=
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|futureList
operator|.
name|toArray
argument_list|(
operator|new
name|CompletableFuture
index|[
name|futureList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
comment|// wait for all the transactions to complete
name|combinedFuture
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// irrespective of whether the commitIndexList is empty or not,
comment|// ensure there is no exception set(For Standalone Protocol)
name|checkOpen
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|commitIndexList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// wait for the last commit index in the commitIndexList to get
comment|// committed to all or majority of nodes in case timeout happens.
name|long
name|lastIndex
init|=
name|commitIndexList
operator|.
name|get
argument_list|(
name|commitIndexList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"waiting for last flush Index "
operator|+
name|lastIndex
operator|+
literal|" to catch up"
argument_list|)
expr_stmt|;
name|watchForCommit
argument_list|(
name|lastIndex
argument_list|)
expr_stmt|;
name|updateFlushIndex
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected Storage Container Exception: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
comment|// clear the buffer
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|validateResponse ( ContainerProtos.ContainerCommandResponseProto responseProto)
specifier|private
name|void
name|validateResponse
parameter_list|(
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|responseProto
parameter_list|)
block|{
try|try
block|{
name|ContainerProtocolCalls
operator|.
name|validateContainerResponse
argument_list|(
name|responseProto
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|sce
parameter_list|)
block|{
name|ioException
operator|=
operator|new
name|IOException
argument_list|(
literal|"Unexpected Storage Container Exception: "
operator|+
name|sce
operator|.
name|toString
argument_list|()
argument_list|,
name|sce
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|xceiverClientManager
operator|!=
literal|null
condition|)
block|{
name|xceiverClientManager
operator|.
name|releaseClient
argument_list|(
name|xceiverClient
argument_list|)
expr_stmt|;
block|}
name|xceiverClientManager
operator|=
literal|null
expr_stmt|;
name|xceiverClient
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|futureList
operator|!=
literal|null
condition|)
block|{
name|futureList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|futureList
operator|=
literal|null
expr_stmt|;
name|commitIndexList
operator|=
literal|null
expr_stmt|;
name|responseExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Checks if the stream is open or exception has occured.    * If not, throws an exception.    *    * @throws IOException if stream is closed    */
DECL|method|checkOpen ()
specifier|private
name|void
name|checkOpen
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|xceiverClient
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"ChunkOutputStream has been closed."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|ioException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ioException
throw|;
block|}
block|}
comment|/**    * Writes buffered data as a new chunk to the container and saves chunk    * information to be used later in putKey call.    *    * @throws IOException if there is an I/O error while performing the call    * @throws OzoneChecksumException if there is an error while computing    * checksum    */
DECL|method|writeChunkToContainer (ByteBuffer chunk)
specifier|private
name|void
name|writeChunkToContainer
parameter_list|(
name|ByteBuffer
name|chunk
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|effectiveChunkSize
init|=
name|chunk
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|ByteString
name|data
init|=
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|chunk
argument_list|)
decl_stmt|;
name|ChecksumData
name|checksumData
init|=
name|checksum
operator|.
name|computeChecksum
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|ChunkInfo
name|chunkInfo
init|=
name|ChunkInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setChunkName
argument_list|(
name|DigestUtils
operator|.
name|md5Hex
argument_list|(
name|key
argument_list|)
operator|+
literal|"_stream_"
operator|+
name|streamId
operator|+
literal|"_chunk_"
operator|+
operator|++
name|chunkIndex
argument_list|)
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
operator|.
name|setLen
argument_list|(
name|effectiveChunkSize
argument_list|)
operator|.
name|setChecksumData
argument_list|(
name|checksumData
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// generate a unique requestId
name|String
name|requestId
init|=
name|traceID
operator|+
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
operator|+
name|chunkIndex
operator|+
name|chunkInfo
operator|.
name|getChunkName
argument_list|()
decl_stmt|;
try|try
block|{
name|XceiverClientAsyncReply
name|asyncReply
init|=
name|writeChunkAsync
argument_list|(
name|xceiverClient
argument_list|,
name|chunkInfo
argument_list|,
name|blockID
argument_list|,
name|data
argument_list|,
name|requestId
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
name|future
init|=
name|asyncReply
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|future
operator|.
name|thenApplyAsync
argument_list|(
name|e
lambda|->
block|{
name|handleResponse
argument_list|(
name|e
argument_list|,
name|asyncReply
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
argument_list|,
name|responseExecutor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected Storage Container Exception: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"writing chunk "
operator|+
name|chunkInfo
operator|.
name|getChunkName
argument_list|()
operator|+
literal|" blockID "
operator|+
name|blockID
operator|+
literal|" length "
operator|+
name|chunk
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|containerBlockData
operator|.
name|addChunks
argument_list|(
name|chunkInfo
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

