begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_comment
comment|/**  * This class maintains the map of the commitIndexes to be watched for  * successful replication in the datanodes in a given pipeline. It also releases  * the buffers associated with the user data back to {@Link BufferPool} once  * minimum replication criteria is achieved during an ozone key write.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientReply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * This class executes watchForCommit on ratis pipeline and releases  * buffers once data successfully gets replicated.  */
end_comment

begin_class
DECL|class|CommitWatcher
specifier|public
class|class
name|CommitWatcher
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CommitWatcher
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// A reference to the pool of buffers holding the data
DECL|field|bufferPool
specifier|private
name|BufferPool
name|bufferPool
decl_stmt|;
comment|// The map should maintain the keys (logIndexes) in order so that while
comment|// removing we always end up updating incremented data flushed length.
comment|// Also, corresponding to the logIndex, the corresponding list of buffers will
comment|// be released from the buffer pool.
specifier|private
name|ConcurrentSkipListMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|>
DECL|field|commitIndex2flushedDataMap
name|commitIndex2flushedDataMap
decl_stmt|;
comment|// future Map to hold up all putBlock futures
specifier|private
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
argument_list|>
DECL|field|futureMap
name|futureMap
decl_stmt|;
DECL|field|xceiverClient
specifier|private
name|XceiverClientSpi
name|xceiverClient
decl_stmt|;
DECL|field|watchTimeout
specifier|private
specifier|final
name|long
name|watchTimeout
decl_stmt|;
comment|// total data which has been successfully flushed and acknowledged
comment|// by all servers
DECL|field|totalAckDataLength
specifier|private
name|long
name|totalAckDataLength
decl_stmt|;
DECL|method|CommitWatcher (BufferPool bufferPool, XceiverClientSpi xceiverClient, long watchTimeout)
specifier|public
name|CommitWatcher
parameter_list|(
name|BufferPool
name|bufferPool
parameter_list|,
name|XceiverClientSpi
name|xceiverClient
parameter_list|,
name|long
name|watchTimeout
parameter_list|)
block|{
name|this
operator|.
name|bufferPool
operator|=
name|bufferPool
expr_stmt|;
name|this
operator|.
name|xceiverClient
operator|=
name|xceiverClient
expr_stmt|;
name|this
operator|.
name|watchTimeout
operator|=
name|watchTimeout
expr_stmt|;
name|commitIndex2flushedDataMap
operator|=
operator|new
name|ConcurrentSkipListMap
argument_list|<>
argument_list|()
expr_stmt|;
name|totalAckDataLength
operator|=
literal|0
expr_stmt|;
name|futureMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * just update the totalAckDataLength. In case of failure,    * we will read the data starting from totalAckDataLength.    */
DECL|method|releaseBuffers (List<Long> indexes)
specifier|private
name|long
name|releaseBuffers
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|indexes
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|commitIndex2flushedDataMap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|index
range|:
name|indexes
control|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|commitIndex2flushedDataMap
operator|.
name|containsKey
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|buffers
init|=
name|commitIndex2flushedDataMap
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|long
name|length
init|=
name|buffers
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|value
lambda|->
block|{
name|int
name|pos
init|=
name|value
operator|.
name|position
argument_list|()
decl_stmt|;
return|return
name|pos
return|;
block|}
argument_list|)
operator|.
name|sum
argument_list|()
decl_stmt|;
name|totalAckDataLength
operator|+=
name|length
expr_stmt|;
comment|// clear the future object from the future Map
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|futureMap
operator|.
name|remove
argument_list|(
name|totalAckDataLength
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|byteBuffer
range|:
name|buffers
control|)
block|{
name|bufferPool
operator|.
name|releaseBuffer
argument_list|(
name|byteBuffer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|totalAckDataLength
return|;
block|}
DECL|method|updateCommitInfoMap (long index, List<ByteBuffer> byteBufferList)
specifier|public
name|void
name|updateCommitInfoMap
parameter_list|(
name|long
name|index
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|byteBufferList
parameter_list|)
block|{
name|commitIndex2flushedDataMap
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|byteBufferList
argument_list|)
expr_stmt|;
block|}
DECL|method|getCommitInfoMapSize ()
name|int
name|getCommitInfoMapSize
parameter_list|()
block|{
return|return
name|commitIndex2flushedDataMap
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Calls watch for commit for the first index in commitIndex2flushedDataMap to    * the Ratis client.    * @return reply reply from raft client    * @throws IOException in case watchForCommit fails    */
DECL|method|watchOnFirstIndex ()
specifier|public
name|XceiverClientReply
name|watchOnFirstIndex
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|commitIndex2flushedDataMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// wait for the  first commit index in the commitIndex2flushedDataMap
comment|// to get committed to all or majority of nodes in case timeout
comment|// happens.
name|long
name|index
init|=
name|commitIndex2flushedDataMap
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|v
lambda|->
name|v
argument_list|)
operator|.
name|min
argument_list|()
operator|.
name|getAsLong
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"waiting for first index "
operator|+
name|index
operator|+
literal|" to catch up"
argument_list|)
expr_stmt|;
return|return
name|watchForCommit
argument_list|(
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Calls watch for commit for the first index in commitIndex2flushedDataMap to    * the Ratis client.    * @return reply reply from raft client    * @throws IOException in case watchForCommit fails    */
DECL|method|watchOnLastIndex ()
specifier|public
name|XceiverClientReply
name|watchOnLastIndex
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|commitIndex2flushedDataMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// wait for the  commit index in the commitIndex2flushedDataMap
comment|// to get committed to all or majority of nodes in case timeout
comment|// happens.
name|long
name|index
init|=
name|commitIndex2flushedDataMap
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|v
lambda|->
name|v
argument_list|)
operator|.
name|max
argument_list|()
operator|.
name|getAsLong
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"waiting for last flush Index "
operator|+
name|index
operator|+
literal|" to catch up"
argument_list|)
expr_stmt|;
return|return
name|watchForCommit
argument_list|(
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|adjustBuffers (long commitIndex)
specifier|private
name|void
name|adjustBuffers
parameter_list|(
name|long
name|commitIndex
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|keyList
init|=
name|commitIndex2flushedDataMap
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
name|p
operator|<=
name|commitIndex
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
else|else
block|{
name|releaseBuffers
argument_list|(
name|keyList
argument_list|)
expr_stmt|;
block|}
block|}
comment|// It may happen that once the exception is encountered , we still might
comment|// have successfully flushed up to a certain index. Make sure the buffers
comment|// only contain data which have not been sufficiently replicated
DECL|method|releaseBuffersOnException ()
name|void
name|releaseBuffersOnException
parameter_list|()
block|{
name|adjustBuffers
argument_list|(
name|xceiverClient
operator|.
name|getReplicatedMinCommitIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * calls watchForCommit API of the Ratis Client. For Standalone client,    * it is a no op.    * @param commitIndex log index to watch for    * @return minimum commit index replicated to all nodes    * @throws IOException IOException in case watch gets timed out    */
DECL|method|watchForCommit (long commitIndex)
specifier|public
name|XceiverClientReply
name|watchForCommit
parameter_list|(
name|long
name|commitIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|index
decl_stmt|;
try|try
block|{
name|XceiverClientReply
name|reply
init|=
name|xceiverClient
operator|.
name|watchForCommit
argument_list|(
name|commitIndex
argument_list|,
name|watchTimeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|==
literal|null
condition|)
block|{
name|index
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|index
operator|=
name|reply
operator|.
name|getLogIndex
argument_list|()
expr_stmt|;
block|}
name|adjustBuffers
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|reply
return|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
decl||
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"watchForCommit failed for index "
operator|+
name|commitIndex
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|IOException
name|ioException
init|=
operator|new
name|IOException
argument_list|(
literal|"Unexpected Storage Container Exception: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|releaseBuffersOnException
argument_list|()
expr_stmt|;
throw|throw
name|ioException
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|ConcurrentSkipListMap
argument_list|<
name|Long
argument_list|,
DECL|method|getCommitIndex2flushedDataMap ()
name|List
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|>
name|getCommitIndex2flushedDataMap
parameter_list|()
block|{
return|return
name|commitIndex2flushedDataMap
return|;
block|}
specifier|public
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
DECL|method|getFutureMap ()
name|ContainerCommandResponseProto
argument_list|>
argument_list|>
name|getFutureMap
parameter_list|()
block|{
return|return
name|futureMap
return|;
block|}
DECL|method|getTotalAckDataLength ()
specifier|public
name|long
name|getTotalAckDataLength
parameter_list|()
block|{
return|return
name|totalAckDataLength
return|;
block|}
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|commitIndex2flushedDataMap
operator|!=
literal|null
condition|)
block|{
name|commitIndex2flushedDataMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|futureMap
operator|!=
literal|null
condition|)
block|{
name|futureMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|commitIndex2flushedDataMap
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

