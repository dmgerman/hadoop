begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.server.events
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterLong
import|;
end_import

begin_comment
comment|/**  * Simple EventExecutor to call all the event handler one-by-one.  *  * @param<T>  */
end_comment

begin_class
annotation|@
name|Metrics
argument_list|(
name|context
operator|=
literal|"EventQueue"
argument_list|)
DECL|class|SingleThreadExecutor
specifier|public
class|class
name|SingleThreadExecutor
parameter_list|<
name|T
parameter_list|>
implements|implements
name|EventExecutor
argument_list|<
name|T
argument_list|>
block|{
DECL|field|THREAD_NAME_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|THREAD_NAME_PREFIX
init|=
literal|"EventQueue"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SingleThreadExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|ThreadPoolExecutor
name|executor
decl_stmt|;
annotation|@
name|Metric
DECL|field|queued
specifier|private
name|MutableCounterLong
name|queued
decl_stmt|;
annotation|@
name|Metric
DECL|field|done
specifier|private
name|MutableCounterLong
name|done
decl_stmt|;
annotation|@
name|Metric
DECL|field|failed
specifier|private
name|MutableCounterLong
name|failed
decl_stmt|;
comment|/**    * Create SingleThreadExecutor.    *    * @param name Unique name used in monitoring and metrics.    */
DECL|method|SingleThreadExecutor (String name)
specifier|public
name|SingleThreadExecutor
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
operator|.
name|register
argument_list|(
literal|"EventQueue"
operator|+
name|name
argument_list|,
literal|"Event Executor metrics "
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|workQueue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|executor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|workQueue
argument_list|,
name|runnable
lambda|->
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setName
argument_list|(
name|THREAD_NAME_PREFIX
operator|+
literal|"-"
operator|+
name|name
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMessage (EventHandler<T> handler, T message, EventPublisher publisher)
specifier|public
name|void
name|onMessage
parameter_list|(
name|EventHandler
argument_list|<
name|T
argument_list|>
name|handler
parameter_list|,
name|T
name|message
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
block|{
name|queued
operator|.
name|incr
argument_list|()
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|handler
operator|.
name|onMessage
argument_list|(
name|message
argument_list|,
name|publisher
argument_list|)
expr_stmt|;
name|done
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error on execution message {}"
argument_list|,
name|message
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|failed
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|failedEvents ()
specifier|public
name|long
name|failedEvents
parameter_list|()
block|{
return|return
name|failed
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|successfulEvents ()
specifier|public
name|long
name|successfulEvents
parameter_list|()
block|{
return|return
name|done
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|queuedEvents ()
specifier|public
name|long
name|queuedEvents
parameter_list|()
block|{
return|return
name|queued
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

