begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.server.events
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|Lease
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|LeaseAlreadyExistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|LeaseExpiredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|LeaseNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|HashedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Event watcher the (re)send a message after timeout.  *<p>  * Event watcher will send the tracked payload/event after a timeout period  * unless a confirmation from the original event (completion event) is arrived.  *  * @param<TIMEOUT_PAYLOAD>    The type of the events which are tracked.  * @param<COMPLETION_PAYLOAD> The type of event which could cancel the  *                             tracking.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"CheckStyle"
argument_list|)
DECL|class|EventWatcher
specifier|public
specifier|abstract
class|class
name|EventWatcher
parameter_list|<
name|TIMEOUT_PAYLOAD
extends|extends
name|IdentifiableEventPayload
parameter_list|,
name|COMPLETION_PAYLOAD
extends|extends
name|IdentifiableEventPayload
parameter_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EventWatcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|startEvent
specifier|private
specifier|final
name|Event
argument_list|<
name|TIMEOUT_PAYLOAD
argument_list|>
name|startEvent
decl_stmt|;
DECL|field|completionEvent
specifier|private
specifier|final
name|Event
argument_list|<
name|COMPLETION_PAYLOAD
argument_list|>
name|completionEvent
decl_stmt|;
DECL|field|leaseManager
specifier|private
specifier|final
name|LeaseManager
argument_list|<
name|Long
argument_list|>
name|leaseManager
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|EventWatcherMetrics
name|metrics
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|trackedEventsByID
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|TIMEOUT_PAYLOAD
argument_list|>
name|trackedEventsByID
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|trackedEvents
specifier|private
specifier|final
name|Set
argument_list|<
name|TIMEOUT_PAYLOAD
argument_list|>
name|trackedEvents
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|startTrackingTimes
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|startTrackingTimes
init|=
operator|new
name|HashedMap
argument_list|()
decl_stmt|;
DECL|method|EventWatcher (String name, Event<TIMEOUT_PAYLOAD> startEvent, Event<COMPLETION_PAYLOAD> completionEvent, LeaseManager<Long> leaseManager)
specifier|public
name|EventWatcher
parameter_list|(
name|String
name|name
parameter_list|,
name|Event
argument_list|<
name|TIMEOUT_PAYLOAD
argument_list|>
name|startEvent
parameter_list|,
name|Event
argument_list|<
name|COMPLETION_PAYLOAD
argument_list|>
name|completionEvent
parameter_list|,
name|LeaseManager
argument_list|<
name|Long
argument_list|>
name|leaseManager
parameter_list|)
block|{
name|this
operator|.
name|startEvent
operator|=
name|startEvent
expr_stmt|;
name|this
operator|.
name|completionEvent
operator|=
name|completionEvent
expr_stmt|;
name|this
operator|.
name|leaseManager
operator|=
name|leaseManager
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
operator|new
name|EventWatcherMetrics
argument_list|()
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|name
operator|=
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|//for anonymous inner classes
name|name
operator|=
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|EventWatcher (Event<TIMEOUT_PAYLOAD> startEvent, Event<COMPLETION_PAYLOAD> completionEvent, LeaseManager<Long> leaseManager)
specifier|public
name|EventWatcher
parameter_list|(
name|Event
argument_list|<
name|TIMEOUT_PAYLOAD
argument_list|>
name|startEvent
parameter_list|,
name|Event
argument_list|<
name|COMPLETION_PAYLOAD
argument_list|>
name|completionEvent
parameter_list|,
name|LeaseManager
argument_list|<
name|Long
argument_list|>
name|leaseManager
parameter_list|)
block|{
name|this
argument_list|(
literal|""
argument_list|,
name|startEvent
argument_list|,
name|completionEvent
argument_list|,
name|leaseManager
argument_list|)
expr_stmt|;
block|}
DECL|method|start (EventQueue queue)
specifier|public
name|void
name|start
parameter_list|(
name|EventQueue
name|queue
parameter_list|)
block|{
name|queue
operator|.
name|addHandler
argument_list|(
name|startEvent
argument_list|,
name|this
operator|::
name|handleStartEvent
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addHandler
argument_list|(
name|completionEvent
argument_list|,
parameter_list|(
name|completionPayload
parameter_list|,
name|publisher
parameter_list|)
lambda|->
block|{
try|try
block|{
name|handleCompletion
argument_list|(
name|completionPayload
argument_list|,
name|publisher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LeaseNotFoundException
name|e
parameter_list|)
block|{
comment|//It's already done. Too late, we already retried it.
comment|//Not a real problem.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Completion event without active lease. Id={}"
argument_list|,
name|completionPayload
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
name|ms
operator|.
name|register
argument_list|(
name|name
argument_list|,
literal|"EventWatcher metrics"
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
DECL|method|handleStartEvent (TIMEOUT_PAYLOAD payload, EventPublisher publisher)
specifier|private
specifier|synchronized
name|void
name|handleStartEvent
parameter_list|(
name|TIMEOUT_PAYLOAD
name|payload
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
block|{
name|metrics
operator|.
name|incrementTrackedEvents
argument_list|()
expr_stmt|;
name|long
name|identifier
init|=
name|payload
operator|.
name|getId
argument_list|()
decl_stmt|;
name|startTrackingTimes
operator|.
name|put
argument_list|(
name|identifier
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|trackedEventsByID
operator|.
name|put
argument_list|(
name|identifier
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|trackedEvents
operator|.
name|add
argument_list|(
name|payload
argument_list|)
expr_stmt|;
try|try
block|{
name|Lease
argument_list|<
name|Long
argument_list|>
name|lease
init|=
name|leaseManager
operator|.
name|acquire
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
try|try
block|{
name|lease
operator|.
name|registerCallBack
argument_list|(
parameter_list|()
lambda|->
block|{
name|handleTimeout
argument_list|(
name|publisher
argument_list|,
name|identifier
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LeaseExpiredException
name|e
parameter_list|)
block|{
name|handleTimeout
argument_list|(
name|publisher
argument_list|,
name|identifier
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LeaseAlreadyExistException
name|e
parameter_list|)
block|{
comment|//No problem at all. But timer is not reset.
block|}
block|}
DECL|method|handleCompletion (COMPLETION_PAYLOAD completionPayload, EventPublisher publisher)
specifier|protected
specifier|synchronized
name|void
name|handleCompletion
parameter_list|(
name|COMPLETION_PAYLOAD
name|completionPayload
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
throws|throws
name|LeaseNotFoundException
block|{
name|metrics
operator|.
name|incrementCompletedEvents
argument_list|()
expr_stmt|;
name|long
name|id
init|=
name|completionPayload
operator|.
name|getId
argument_list|()
decl_stmt|;
name|leaseManager
operator|.
name|release
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|TIMEOUT_PAYLOAD
name|payload
init|=
name|trackedEventsByID
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|trackedEvents
operator|.
name|remove
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|long
name|originalTime
init|=
name|startTrackingTimes
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|updateFinishingTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|originalTime
argument_list|)
expr_stmt|;
name|onFinished
argument_list|(
name|publisher
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
DECL|method|handleTimeout (EventPublisher publisher, long identifier)
specifier|private
specifier|synchronized
name|void
name|handleTimeout
parameter_list|(
name|EventPublisher
name|publisher
parameter_list|,
name|long
name|identifier
parameter_list|)
block|{
name|metrics
operator|.
name|incrementTimedOutEvents
argument_list|()
expr_stmt|;
name|TIMEOUT_PAYLOAD
name|payload
init|=
name|trackedEventsByID
operator|.
name|remove
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|trackedEvents
operator|.
name|remove
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|startTrackingTimes
operator|.
name|remove
argument_list|(
name|payload
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|onTimeout
argument_list|(
name|publisher
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if a specific payload is in-progress.    */
DECL|method|contains (TIMEOUT_PAYLOAD payload)
specifier|public
specifier|synchronized
name|boolean
name|contains
parameter_list|(
name|TIMEOUT_PAYLOAD
name|payload
parameter_list|)
block|{
return|return
name|trackedEvents
operator|.
name|contains
argument_list|(
name|payload
argument_list|)
return|;
block|}
DECL|method|remove (TIMEOUT_PAYLOAD payload)
specifier|public
specifier|synchronized
name|boolean
name|remove
parameter_list|(
name|TIMEOUT_PAYLOAD
name|payload
parameter_list|)
block|{
try|try
block|{
name|leaseManager
operator|.
name|release
argument_list|(
name|payload
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LeaseNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Completion event without active lease. Id={}"
argument_list|,
name|payload
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|trackedEventsByID
operator|.
name|remove
argument_list|(
name|payload
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|trackedEvents
operator|.
name|remove
argument_list|(
name|payload
argument_list|)
return|;
block|}
DECL|method|onTimeout ( EventPublisher publisher, TIMEOUT_PAYLOAD payload)
specifier|protected
specifier|abstract
name|void
name|onTimeout
parameter_list|(
name|EventPublisher
name|publisher
parameter_list|,
name|TIMEOUT_PAYLOAD
name|payload
parameter_list|)
function_decl|;
DECL|method|onFinished ( EventPublisher publisher, TIMEOUT_PAYLOAD payload)
specifier|protected
specifier|abstract
name|void
name|onFinished
parameter_list|(
name|EventPublisher
name|publisher
parameter_list|,
name|TIMEOUT_PAYLOAD
name|payload
parameter_list|)
function_decl|;
DECL|method|getTimeoutEvents ( Predicate<? super TIMEOUT_PAYLOAD> predicate)
specifier|public
name|List
argument_list|<
name|TIMEOUT_PAYLOAD
argument_list|>
name|getTimeoutEvents
parameter_list|(
name|Predicate
argument_list|<
name|?
super|super
name|TIMEOUT_PAYLOAD
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|trackedEventsByID
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|predicate
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getMetrics ()
specifier|protected
name|EventWatcherMetrics
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
comment|/**    * Returns a tracked event to which the specified id is    * mapped, or {@code null} if there is no mapping for the id.    */
DECL|method|getTrackedEventbyId (long id)
specifier|public
name|TIMEOUT_PAYLOAD
name|getTrackedEventbyId
parameter_list|(
name|long
name|id
parameter_list|)
block|{
return|return
name|trackedEventsByID
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|method|getTrackedEventsByID ()
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|TIMEOUT_PAYLOAD
argument_list|>
name|getTrackedEventsByID
parameter_list|()
block|{
return|return
name|trackedEventsByID
return|;
block|}
DECL|method|getTrackedEvents ()
specifier|public
name|Set
argument_list|<
name|TIMEOUT_PAYLOAD
argument_list|>
name|getTrackedEvents
parameter_list|()
block|{
return|return
name|trackedEvents
return|;
block|}
block|}
end_class

end_unit

