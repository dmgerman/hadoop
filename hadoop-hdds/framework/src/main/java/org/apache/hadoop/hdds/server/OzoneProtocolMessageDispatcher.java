begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|function
operator|.
name|FunctionWithServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|tracing
operator|.
name|TracingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|ProtocolMessageMetrics
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ProtocolMessageEnum
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * Dispatch message after tracing and message logging for insight.  *<p>  * This is a generic utility to dispatch message in ServerSide translators.  *<p>  * It logs the message type/content on DEBUG/TRACING log for insight and create  * a new span based on the tracing information.  */
end_comment

begin_class
DECL|class|OzoneProtocolMessageDispatcher
specifier|public
class|class
name|OzoneProtocolMessageDispatcher
parameter_list|<
name|REQUEST
parameter_list|,
name|RESPONSE
parameter_list|>
block|{
DECL|field|serviceName
specifier|private
name|String
name|serviceName
decl_stmt|;
DECL|field|protocolMessageMetrics
specifier|private
specifier|final
name|ProtocolMessageMetrics
name|protocolMessageMetrics
decl_stmt|;
DECL|field|logger
specifier|private
name|Logger
name|logger
decl_stmt|;
DECL|method|OzoneProtocolMessageDispatcher (String serviceName, ProtocolMessageMetrics protocolMessageMetrics, Logger logger)
specifier|public
name|OzoneProtocolMessageDispatcher
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|ProtocolMessageMetrics
name|protocolMessageMetrics
parameter_list|,
name|Logger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|serviceName
operator|=
name|serviceName
expr_stmt|;
name|this
operator|.
name|protocolMessageMetrics
operator|=
name|protocolMessageMetrics
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
DECL|method|processRequest ( REQUEST request, FunctionWithServiceException<REQUEST, RESPONSE> methodCall, ProtocolMessageEnum type, String traceId)
specifier|public
name|RESPONSE
name|processRequest
parameter_list|(
name|REQUEST
name|request
parameter_list|,
name|FunctionWithServiceException
argument_list|<
name|REQUEST
argument_list|,
name|RESPONSE
argument_list|>
name|methodCall
parameter_list|,
name|ProtocolMessageEnum
name|type
parameter_list|,
name|String
name|traceId
parameter_list|)
throws|throws
name|ServiceException
block|{
name|Scope
name|scope
init|=
name|TracingUtil
operator|.
name|importAndCreateScope
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|,
name|traceId
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} {} request is received:<json>{}</json>"
argument_list|,
name|serviceName
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|,
name|request
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"\\\\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} {} request is received"
argument_list|,
name|serviceName
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|protocolMessageMetrics
operator|.
name|increment
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|RESPONSE
name|response
init|=
name|methodCall
operator|.
name|apply
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} {} request is processed. Response: "
operator|+
literal|"<json>{}</json>"
argument_list|,
name|serviceName
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|,
name|response
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"\\\\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
finally|finally
block|{
name|scope
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

