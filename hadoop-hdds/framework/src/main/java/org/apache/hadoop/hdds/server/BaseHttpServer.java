begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|webapp
operator|.
name|WebAppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsUtils
operator|.
name|getHostNameFromConfigKeys
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsUtils
operator|.
name|getPortNumberFromConfigKeys
import|;
end_import

begin_comment
comment|/**  * Base class for HTTP server of the Ozone related components.  */
end_comment

begin_class
DECL|class|BaseHttpServer
specifier|public
specifier|abstract
class|class
name|BaseHttpServer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BaseHttpServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|httpServer
specifier|private
name|HttpServer2
name|httpServer
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|httpAddress
specifier|private
name|InetSocketAddress
name|httpAddress
decl_stmt|;
DECL|field|httpsAddress
specifier|private
name|InetSocketAddress
name|httpsAddress
decl_stmt|;
DECL|field|policy
specifier|private
name|HttpConfig
operator|.
name|Policy
name|policy
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|method|BaseHttpServer (Configuration conf, String name)
specifier|public
name|BaseHttpServer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
block|{
name|policy
operator|=
name|DFSUtil
operator|.
name|getHttpPolicy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|policy
operator|.
name|isHttpEnabled
argument_list|()
condition|)
block|{
name|this
operator|.
name|httpAddress
operator|=
name|getHttpBindAddress
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isHttpsEnabled
argument_list|()
condition|)
block|{
name|this
operator|.
name|httpsAddress
operator|=
name|getHttpsBindAddress
argument_list|()
expr_stmt|;
block|}
name|HttpServer2
operator|.
name|Builder
name|builder
init|=
literal|null
decl_stmt|;
name|builder
operator|=
name|DFSUtil
operator|.
name|httpServerTemplateForNNAndJN
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|httpAddress
argument_list|,
name|this
operator|.
name|httpsAddress
argument_list|,
name|name
argument_list|,
name|getSpnegoPrincipal
argument_list|()
argument_list|,
name|getKeytabFile
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|xFrameEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_XFRAME_OPTION_ENABLED
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_XFRAME_OPTION_ENABLED_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|String
name|xFrameOptionValue
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_XFRAME_OPTION_VALUE
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_XFRAME_OPTION_VALUE_DEFAULT
argument_list|)
decl_stmt|;
name|builder
operator|.
name|configureXFrame
argument_list|(
name|xFrameEnabled
argument_list|)
operator|.
name|setXFrameOption
argument_list|(
name|xFrameOptionValue
argument_list|)
expr_stmt|;
name|httpServer
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Add a servlet to BaseHttpServer.    * @param servletName The name of the servlet    * @param pathSpec The path spec for the servlet    * @param clazz The servlet class    */
DECL|method|addServlet (String servletName, String pathSpec, Class<? extends HttpServlet> clazz)
specifier|protected
name|void
name|addServlet
parameter_list|(
name|String
name|servletName
parameter_list|,
name|String
name|pathSpec
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|HttpServlet
argument_list|>
name|clazz
parameter_list|)
block|{
name|httpServer
operator|.
name|addServlet
argument_list|(
name|servletName
argument_list|,
name|pathSpec
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the WebAppContext associated with this HttpServer.    * @return WebAppContext    */
DECL|method|getWebAppContext ()
specifier|protected
name|WebAppContext
name|getWebAppContext
parameter_list|()
block|{
return|return
name|httpServer
operator|.
name|getWebAppContext
argument_list|()
return|;
block|}
DECL|method|getBindAddress (String bindHostKey, String addressKey, String bindHostDefault, int bindPortdefault)
specifier|protected
name|InetSocketAddress
name|getBindAddress
parameter_list|(
name|String
name|bindHostKey
parameter_list|,
name|String
name|addressKey
parameter_list|,
name|String
name|bindHostDefault
parameter_list|,
name|int
name|bindPortdefault
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|bindHost
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|bindHostKey
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|addressPort
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|addressKey
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|addresHost
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|addressKey
argument_list|)
decl_stmt|;
name|String
name|hostName
init|=
name|bindHost
operator|.
name|or
argument_list|(
name|addresHost
argument_list|)
operator|.
name|or
argument_list|(
name|bindHostDefault
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|hostName
operator|+
literal|":"
operator|+
name|addressPort
operator|.
name|or
argument_list|(
name|bindPortdefault
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by clients to connect    * to the  HTTPS web interface.    *    * @return Target InetSocketAddress for the Ozone HTTPS endpoint.    */
DECL|method|getHttpsBindAddress ()
specifier|public
name|InetSocketAddress
name|getHttpsBindAddress
parameter_list|()
block|{
return|return
name|getBindAddress
argument_list|(
name|getHttpsBindHostKey
argument_list|()
argument_list|,
name|getHttpsAddressKey
argument_list|()
argument_list|,
name|getBindHostDefault
argument_list|()
argument_list|,
name|getHttpsBindPortDefault
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by clients to connect    * to the  HTTP web interface.    *<p>    * * @return Target InetSocketAddress for the Ozone HTTP endpoint.    */
DECL|method|getHttpBindAddress ()
specifier|public
name|InetSocketAddress
name|getHttpBindAddress
parameter_list|()
block|{
return|return
name|getBindAddress
argument_list|(
name|getHttpBindHostKey
argument_list|()
argument_list|,
name|getHttpAddressKey
argument_list|()
argument_list|,
name|getBindHostDefault
argument_list|()
argument_list|,
name|getHttpBindPortDefault
argument_list|()
argument_list|)
return|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|httpServer
operator|!=
literal|null
operator|&&
name|isEnabled
argument_list|()
condition|)
block|{
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|updateConnectorAddress
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isEnabled ()
specifier|private
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|getEnabledKey
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|httpServer
operator|!=
literal|null
condition|)
block|{
name|httpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Update the configured listen address based on the real port    *<p>    * (eg. replace :0 with real port)    */
DECL|method|updateConnectorAddress ()
specifier|public
name|void
name|updateConnectorAddress
parameter_list|()
block|{
name|int
name|connIdx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|policy
operator|.
name|isHttpEnabled
argument_list|()
condition|)
block|{
name|httpAddress
operator|=
name|httpServer
operator|.
name|getConnectorAddress
argument_list|(
name|connIdx
operator|++
argument_list|)
expr_stmt|;
name|String
name|realAddress
init|=
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|httpAddress
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|getHttpAddressKey
argument_list|()
argument_list|,
name|realAddress
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"HTTP server of %s is listening at http://%s"
argument_list|,
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|realAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isHttpsEnabled
argument_list|()
condition|)
block|{
name|httpsAddress
operator|=
name|httpServer
operator|.
name|getConnectorAddress
argument_list|(
name|connIdx
argument_list|)
expr_stmt|;
name|String
name|realAddress
init|=
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|httpsAddress
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|getHttpsAddressKey
argument_list|()
argument_list|,
name|realAddress
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"HTTP server of %s is listening at https://%s"
argument_list|,
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|realAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getHttpAddress ()
specifier|public
name|InetSocketAddress
name|getHttpAddress
parameter_list|()
block|{
return|return
name|httpAddress
return|;
block|}
DECL|method|getHttpsAddress ()
specifier|public
name|InetSocketAddress
name|getHttpsAddress
parameter_list|()
block|{
return|return
name|httpsAddress
return|;
block|}
DECL|method|getHttpAddressKey ()
specifier|protected
specifier|abstract
name|String
name|getHttpAddressKey
parameter_list|()
function_decl|;
DECL|method|getHttpsAddressKey ()
specifier|protected
specifier|abstract
name|String
name|getHttpsAddressKey
parameter_list|()
function_decl|;
DECL|method|getHttpBindHostKey ()
specifier|protected
specifier|abstract
name|String
name|getHttpBindHostKey
parameter_list|()
function_decl|;
DECL|method|getHttpsBindHostKey ()
specifier|protected
specifier|abstract
name|String
name|getHttpsBindHostKey
parameter_list|()
function_decl|;
DECL|method|getBindHostDefault ()
specifier|protected
specifier|abstract
name|String
name|getBindHostDefault
parameter_list|()
function_decl|;
DECL|method|getHttpBindPortDefault ()
specifier|protected
specifier|abstract
name|int
name|getHttpBindPortDefault
parameter_list|()
function_decl|;
DECL|method|getHttpsBindPortDefault ()
specifier|protected
specifier|abstract
name|int
name|getHttpsBindPortDefault
parameter_list|()
function_decl|;
DECL|method|getKeytabFile ()
specifier|protected
specifier|abstract
name|String
name|getKeytabFile
parameter_list|()
function_decl|;
DECL|method|getSpnegoPrincipal ()
specifier|protected
specifier|abstract
name|String
name|getSpnegoPrincipal
parameter_list|()
function_decl|;
DECL|method|getEnabledKey ()
specifier|protected
specifier|abstract
name|String
name|getEnabledKey
parameter_list|()
function_decl|;
block|}
end_class

end_unit

