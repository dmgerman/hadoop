begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|ProfileServlet
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|ProfileServlet
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterLong
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test prometheus Sink.  */
end_comment

begin_class
DECL|class|TestProfileServlet
specifier|public
class|class
name|TestProfileServlet
block|{
annotation|@
name|Test
DECL|method|testNameValidation ()
specifier|public
name|void
name|testNameValidation
parameter_list|()
throws|throws
name|IOException
block|{
name|ProfileServlet
operator|.
name|validateFileName
argument_list|(
name|ProfileServlet
operator|.
name|generateFileName
argument_list|(
literal|1
argument_list|,
name|Output
operator|.
name|SVG
argument_list|,
name|Event
operator|.
name|ALLOC
argument_list|)
argument_list|)
expr_stmt|;
name|ProfileServlet
operator|.
name|validateFileName
argument_list|(
name|ProfileServlet
operator|.
name|generateFileName
argument_list|(
literal|23
argument_list|,
name|Output
operator|.
name|COLLAPSED
argument_list|,
name|Event
operator|.
name|L1_DCACHE_LOAD_MISSES
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testNameValidationWithNewLine ()
specifier|public
name|void
name|testNameValidationWithNewLine
parameter_list|()
throws|throws
name|IOException
block|{
name|ProfileServlet
operator|.
name|validateFileName
argument_list|(
literal|"test\n"
operator|+
name|ProfileServlet
operator|.
name|generateFileName
argument_list|(
literal|1
argument_list|,
name|Output
operator|.
name|SVG
argument_list|,
name|Event
operator|.
name|ALLOC
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testNameValidationWithSlash ()
specifier|public
name|void
name|testNameValidationWithSlash
parameter_list|()
throws|throws
name|IOException
block|{
name|ProfileServlet
operator|.
name|validateFileName
argument_list|(
literal|"../"
operator|+
name|ProfileServlet
operator|.
name|generateFileName
argument_list|(
literal|1
argument_list|,
name|Output
operator|.
name|SVG
argument_list|,
name|Event
operator|.
name|ALLOC
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

