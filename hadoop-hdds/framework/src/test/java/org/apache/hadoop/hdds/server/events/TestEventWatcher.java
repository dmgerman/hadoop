begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.server.events
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsIdFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|lease
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Test the basic functionality of event watcher.  */
end_comment

begin_class
DECL|class|TestEventWatcher
specifier|public
class|class
name|TestEventWatcher
block|{
DECL|field|WATCH_UNDER_REPLICATED
specifier|private
specifier|static
specifier|final
name|TypedEvent
argument_list|<
name|UnderreplicatedEvent
argument_list|>
name|WATCH_UNDER_REPLICATED
init|=
operator|new
name|TypedEvent
argument_list|<>
argument_list|(
name|UnderreplicatedEvent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|UNDER_REPLICATED
specifier|private
specifier|static
specifier|final
name|TypedEvent
argument_list|<
name|UnderreplicatedEvent
argument_list|>
name|UNDER_REPLICATED
init|=
operator|new
name|TypedEvent
argument_list|<>
argument_list|(
name|UnderreplicatedEvent
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TypedEvent
argument_list|<
name|ReplicationCompletedEvent
argument_list|>
DECL|field|REPLICATION_COMPLETED
name|REPLICATION_COMPLETED
init|=
operator|new
name|TypedEvent
argument_list|<>
argument_list|(
name|ReplicationCompletedEvent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|leaseManager
specifier|private
name|LeaseManager
argument_list|<
name|Long
argument_list|>
name|leaseManager
decl_stmt|;
annotation|@
name|Before
DECL|method|startLeaseManager ()
specifier|public
name|void
name|startLeaseManager
parameter_list|()
block|{
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
expr_stmt|;
name|leaseManager
operator|=
operator|new
name|LeaseManager
argument_list|<>
argument_list|(
literal|"Test"
argument_list|,
literal|2000L
argument_list|)
expr_stmt|;
name|leaseManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|stopLeaseManager ()
specifier|public
name|void
name|stopLeaseManager
parameter_list|()
block|{
name|leaseManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEventHandling ()
specifier|public
name|void
name|testEventHandling
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|EventQueue
name|queue
init|=
operator|new
name|EventQueue
argument_list|()
decl_stmt|;
name|EventWatcher
argument_list|<
name|UnderreplicatedEvent
argument_list|,
name|ReplicationCompletedEvent
argument_list|>
name|replicationWatcher
init|=
name|createEventWatcher
argument_list|()
decl_stmt|;
name|EventHandlerStub
argument_list|<
name|UnderreplicatedEvent
argument_list|>
name|underReplicatedEvents
init|=
operator|new
name|EventHandlerStub
argument_list|<>
argument_list|()
decl_stmt|;
name|queue
operator|.
name|addHandler
argument_list|(
name|UNDER_REPLICATED
argument_list|,
name|underReplicatedEvents
argument_list|)
expr_stmt|;
name|replicationWatcher
operator|.
name|start
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|long
name|id1
init|=
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
decl_stmt|;
name|long
name|id2
init|=
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
decl_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|WATCH_UNDER_REPLICATED
argument_list|,
operator|new
name|UnderreplicatedEvent
argument_list|(
name|id1
argument_list|,
literal|"C1"
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|WATCH_UNDER_REPLICATED
argument_list|,
operator|new
name|UnderreplicatedEvent
argument_list|(
name|id2
argument_list|,
literal|"C2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|underReplicatedEvents
operator|.
name|getReceivedEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|REPLICATION_COMPLETED
argument_list|,
operator|new
name|ReplicationCompletedEvent
argument_list|(
name|id1
argument_list|,
literal|"C2"
argument_list|,
literal|"D1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|underReplicatedEvents
operator|.
name|getReceivedEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
name|queue
operator|.
name|processAll
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|underReplicatedEvents
operator|.
name|getReceivedEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|id2
argument_list|,
name|underReplicatedEvents
operator|.
name|getReceivedEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInprogressFilter ()
specifier|public
name|void
name|testInprogressFilter
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|EventQueue
name|queue
init|=
operator|new
name|EventQueue
argument_list|()
decl_stmt|;
name|EventWatcher
argument_list|<
name|UnderreplicatedEvent
argument_list|,
name|ReplicationCompletedEvent
argument_list|>
name|replicationWatcher
init|=
name|createEventWatcher
argument_list|()
decl_stmt|;
name|EventHandlerStub
argument_list|<
name|UnderreplicatedEvent
argument_list|>
name|underReplicatedEvents
init|=
operator|new
name|EventHandlerStub
argument_list|<>
argument_list|()
decl_stmt|;
name|queue
operator|.
name|addHandler
argument_list|(
name|UNDER_REPLICATED
argument_list|,
name|underReplicatedEvents
argument_list|)
expr_stmt|;
name|replicationWatcher
operator|.
name|start
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|UnderreplicatedEvent
name|event1
init|=
operator|new
name|UnderreplicatedEvent
argument_list|(
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
argument_list|,
literal|"C1"
argument_list|)
decl_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|WATCH_UNDER_REPLICATED
argument_list|,
name|event1
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|WATCH_UNDER_REPLICATED
argument_list|,
operator|new
name|UnderreplicatedEvent
argument_list|(
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
argument_list|,
literal|"C2"
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|WATCH_UNDER_REPLICATED
argument_list|,
operator|new
name|UnderreplicatedEvent
argument_list|(
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
argument_list|,
literal|"C1"
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|processAll
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UnderreplicatedEvent
argument_list|>
name|c1todo
init|=
name|replicationWatcher
operator|.
name|getTimeoutEvents
argument_list|(
name|e
lambda|->
name|e
operator|.
name|containerId
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"C1"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c1todo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|replicationWatcher
operator|.
name|contains
argument_list|(
name|event1
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500L
argument_list|)
expr_stmt|;
name|c1todo
operator|=
name|replicationWatcher
operator|.
name|getTimeoutEvents
argument_list|(
name|e
lambda|->
name|e
operator|.
name|containerId
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"C1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c1todo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|replicationWatcher
operator|.
name|contains
argument_list|(
name|event1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMetrics ()
specifier|public
name|void
name|testMetrics
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|DefaultMetricsSystem
operator|.
name|initialize
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|EventQueue
name|queue
init|=
operator|new
name|EventQueue
argument_list|()
decl_stmt|;
name|EventWatcher
argument_list|<
name|UnderreplicatedEvent
argument_list|,
name|ReplicationCompletedEvent
argument_list|>
name|replicationWatcher
init|=
name|createEventWatcher
argument_list|()
decl_stmt|;
name|EventHandlerStub
argument_list|<
name|UnderreplicatedEvent
argument_list|>
name|underReplicatedEvents
init|=
operator|new
name|EventHandlerStub
argument_list|<>
argument_list|()
decl_stmt|;
name|queue
operator|.
name|addHandler
argument_list|(
name|UNDER_REPLICATED
argument_list|,
name|underReplicatedEvents
argument_list|)
expr_stmt|;
name|replicationWatcher
operator|.
name|start
argument_list|(
name|queue
argument_list|)
expr_stmt|;
comment|//send 3 event to track 3 in-progress activity
name|UnderreplicatedEvent
name|event1
init|=
operator|new
name|UnderreplicatedEvent
argument_list|(
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
argument_list|,
literal|"C1"
argument_list|)
decl_stmt|;
name|UnderreplicatedEvent
name|event2
init|=
operator|new
name|UnderreplicatedEvent
argument_list|(
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
argument_list|,
literal|"C2"
argument_list|)
decl_stmt|;
name|UnderreplicatedEvent
name|event3
init|=
operator|new
name|UnderreplicatedEvent
argument_list|(
name|HddsIdFactory
operator|.
name|getLongId
argument_list|()
argument_list|,
literal|"C1"
argument_list|)
decl_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|WATCH_UNDER_REPLICATED
argument_list|,
name|event1
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|WATCH_UNDER_REPLICATED
argument_list|,
name|event2
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|WATCH_UNDER_REPLICATED
argument_list|,
name|event3
argument_list|)
expr_stmt|;
comment|//1st event is completed, don't need to track any more
name|ReplicationCompletedEvent
name|event1Completed
init|=
operator|new
name|ReplicationCompletedEvent
argument_list|(
name|event1
operator|.
name|id
argument_list|,
literal|"C1"
argument_list|,
literal|"D1"
argument_list|)
decl_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|REPLICATION_COMPLETED
argument_list|,
name|event1Completed
argument_list|)
expr_stmt|;
comment|//lease manager timeout = 2000L
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|2000L
argument_list|)
expr_stmt|;
name|queue
operator|.
name|processAll
argument_list|(
literal|2000L
argument_list|)
expr_stmt|;
comment|//until now: 3 in-progress activities are tracked with three
comment|// UnderreplicatedEvents. The first one is completed, the remaining two
comment|// are timed out (as the timeout -- defined in the lease manager -- is
comment|// 2000ms).
name|EventWatcherMetrics
name|metrics
init|=
name|replicationWatcher
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
comment|//3 events are received
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|metrics
operator|.
name|getTrackedEvents
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
comment|//completed + timed out = all messages
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"number of timed out and completed messages should be the same as the"
operator|+
literal|" all messages"
argument_list|,
name|metrics
operator|.
name|getTrackedEvents
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
name|metrics
operator|.
name|getCompletedEvents
argument_list|()
operator|.
name|value
argument_list|()
operator|+
name|metrics
operator|.
name|getTimedOutEvents
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
comment|//_at least_ two are timed out.
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"At least two events should be timed out."
argument_list|,
name|metrics
operator|.
name|getTimedOutEvents
argument_list|()
operator|.
name|value
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|EventWatcher
argument_list|<
name|UnderreplicatedEvent
argument_list|,
name|ReplicationCompletedEvent
argument_list|>
DECL|method|createEventWatcher ()
name|createEventWatcher
parameter_list|()
block|{
return|return
operator|new
name|CommandWatcherExample
argument_list|(
name|WATCH_UNDER_REPLICATED
argument_list|,
name|REPLICATION_COMPLETED
argument_list|,
name|leaseManager
argument_list|)
return|;
block|}
DECL|class|CommandWatcherExample
specifier|private
specifier|static
class|class
name|CommandWatcherExample
extends|extends
name|EventWatcher
argument_list|<
name|UnderreplicatedEvent
argument_list|,
name|ReplicationCompletedEvent
argument_list|>
block|{
DECL|method|CommandWatcherExample (Event<UnderreplicatedEvent> startEvent, Event<ReplicationCompletedEvent> completionEvent, LeaseManager<Long> leaseManager)
name|CommandWatcherExample
parameter_list|(
name|Event
argument_list|<
name|UnderreplicatedEvent
argument_list|>
name|startEvent
parameter_list|,
name|Event
argument_list|<
name|ReplicationCompletedEvent
argument_list|>
name|completionEvent
parameter_list|,
name|LeaseManager
argument_list|<
name|Long
argument_list|>
name|leaseManager
parameter_list|)
block|{
name|super
argument_list|(
literal|"TestCommandWatcher"
argument_list|,
name|startEvent
argument_list|,
name|completionEvent
argument_list|,
name|leaseManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onTimeout (EventPublisher publisher, UnderreplicatedEvent payload)
specifier|protected
name|void
name|onTimeout
parameter_list|(
name|EventPublisher
name|publisher
parameter_list|,
name|UnderreplicatedEvent
name|payload
parameter_list|)
block|{
name|publisher
operator|.
name|fireEvent
argument_list|(
name|UNDER_REPLICATED
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFinished (EventPublisher publisher, UnderreplicatedEvent payload)
specifier|protected
name|void
name|onFinished
parameter_list|(
name|EventPublisher
name|publisher
parameter_list|,
name|UnderreplicatedEvent
name|payload
parameter_list|)
block|{
comment|//Good job. We did it.
block|}
annotation|@
name|Override
DECL|method|getMetrics ()
specifier|public
name|EventWatcherMetrics
name|getMetrics
parameter_list|()
block|{
return|return
name|super
operator|.
name|getMetrics
argument_list|()
return|;
block|}
block|}
DECL|class|ReplicationCompletedEvent
specifier|private
specifier|static
class|class
name|ReplicationCompletedEvent
implements|implements
name|IdentifiableEventPayload
block|{
DECL|field|id
specifier|private
specifier|final
name|long
name|id
decl_stmt|;
DECL|field|containerId
specifier|private
specifier|final
name|String
name|containerId
decl_stmt|;
DECL|field|datanodeId
specifier|private
specifier|final
name|String
name|datanodeId
decl_stmt|;
DECL|method|ReplicationCompletedEvent (long id, String containerId, String datanodeId)
name|ReplicationCompletedEvent
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|datanodeId
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|datanodeId
operator|=
name|datanodeId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ReplicationCompletedEvent
name|that
init|=
operator|(
name|ReplicationCompletedEvent
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|containerId
argument_list|,
name|that
operator|.
name|containerId
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|datanodeId
argument_list|,
name|that
operator|.
name|datanodeId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|containerId
argument_list|,
name|datanodeId
argument_list|)
return|;
block|}
block|}
DECL|class|UnderreplicatedEvent
specifier|private
specifier|static
class|class
name|UnderreplicatedEvent
implements|implements
name|IdentifiableEventPayload
block|{
DECL|field|id
specifier|private
specifier|final
name|long
name|id
decl_stmt|;
DECL|field|containerId
specifier|private
specifier|final
name|String
name|containerId
decl_stmt|;
DECL|method|UnderreplicatedEvent (long id, String containerId)
name|UnderreplicatedEvent
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|containerId
parameter_list|)
block|{
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
block|}
block|}
end_class

end_unit

