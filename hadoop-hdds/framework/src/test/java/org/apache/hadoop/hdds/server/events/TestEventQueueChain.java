begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.server.events
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * More realistic event test with sending event from one listener.  */
end_comment

begin_class
DECL|class|TestEventQueueChain
specifier|public
class|class
name|TestEventQueueChain
block|{
DECL|field|DECOMMISSION
specifier|private
specifier|static
specifier|final
name|Event
argument_list|<
name|FailedNode
argument_list|>
name|DECOMMISSION
init|=
operator|new
name|TypedEvent
argument_list|<>
argument_list|(
name|FailedNode
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DECOMMISSION_START
specifier|private
specifier|static
specifier|final
name|Event
argument_list|<
name|FailedNode
argument_list|>
name|DECOMMISSION_START
init|=
operator|new
name|TypedEvent
argument_list|<>
argument_list|(
name|FailedNode
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|simpleEvent ()
specifier|public
name|void
name|simpleEvent
parameter_list|()
block|{
name|EventQueue
name|queue
init|=
operator|new
name|EventQueue
argument_list|()
decl_stmt|;
name|queue
operator|.
name|addHandler
argument_list|(
name|DECOMMISSION
argument_list|,
operator|new
name|PipelineManager
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addHandler
argument_list|(
name|DECOMMISSION_START
argument_list|,
operator|new
name|NodeWatcher
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|DECOMMISSION
argument_list|,
operator|new
name|FailedNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|processAll
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
DECL|class|FailedNode
specifier|static
class|class
name|FailedNode
block|{
DECL|field|nodeId
specifier|private
specifier|final
name|String
name|nodeId
decl_stmt|;
DECL|method|FailedNode (String nodeId)
name|FailedNode
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
block|}
DECL|method|getNodeId ()
name|String
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
block|}
DECL|class|PipelineManager
specifier|private
specifier|static
class|class
name|PipelineManager
implements|implements
name|EventHandler
argument_list|<
name|FailedNode
argument_list|>
block|{
annotation|@
name|Override
DECL|method|onMessage (FailedNode message, EventPublisher publisher)
specifier|public
name|void
name|onMessage
parameter_list|(
name|FailedNode
name|message
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Closing pipelines for all pipelines including node: "
operator|+
name|message
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|publisher
operator|.
name|fireEvent
argument_list|(
name|DECOMMISSION_START
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NodeWatcher
specifier|private
specifier|static
class|class
name|NodeWatcher
implements|implements
name|EventHandler
argument_list|<
name|FailedNode
argument_list|>
block|{
annotation|@
name|Override
DECL|method|onMessage (FailedNode message, EventPublisher publisher)
specifier|public
name|void
name|onMessage
parameter_list|(
name|FailedNode
name|message
parameter_list|,
name|EventPublisher
name|publisher
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Clear timer"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

