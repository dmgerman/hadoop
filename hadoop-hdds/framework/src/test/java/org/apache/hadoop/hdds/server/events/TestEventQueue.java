begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.server.events
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|events
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_comment
comment|/**  * Testing the basic functionality of the event queue.  */
end_comment

begin_class
DECL|class|TestEventQueue
specifier|public
class|class
name|TestEventQueue
block|{
DECL|field|EVENT1
specifier|private
specifier|static
specifier|final
name|Event
argument_list|<
name|Long
argument_list|>
name|EVENT1
init|=
operator|new
name|TypedEvent
argument_list|<>
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"SCM_EVENT1"
argument_list|)
decl_stmt|;
DECL|field|EVENT2
specifier|private
specifier|static
specifier|final
name|Event
argument_list|<
name|Long
argument_list|>
name|EVENT2
init|=
operator|new
name|TypedEvent
argument_list|<>
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"SCM_EVENT2"
argument_list|)
decl_stmt|;
DECL|field|EVENT3
specifier|private
specifier|static
specifier|final
name|Event
argument_list|<
name|Long
argument_list|>
name|EVENT3
init|=
operator|new
name|TypedEvent
argument_list|<>
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"SCM_EVENT3"
argument_list|)
decl_stmt|;
DECL|field|EVENT4
specifier|private
specifier|static
specifier|final
name|Event
argument_list|<
name|Long
argument_list|>
name|EVENT4
init|=
operator|new
name|TypedEvent
argument_list|<>
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"SCM_EVENT4"
argument_list|)
decl_stmt|;
DECL|field|queue
specifier|private
name|EventQueue
name|queue
decl_stmt|;
annotation|@
name|Before
DECL|method|startEventQueue ()
specifier|public
name|void
name|startEventQueue
parameter_list|()
block|{
name|DefaultMetricsSystem
operator|.
name|initialize
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|=
operator|new
name|EventQueue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|stopEventQueue ()
specifier|public
name|void
name|stopEventQueue
parameter_list|()
block|{
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|queue
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|simpleEvent ()
specifier|public
name|void
name|simpleEvent
parameter_list|()
block|{
specifier|final
name|long
index|[]
name|result
init|=
operator|new
name|long
index|[
literal|2
index|]
decl_stmt|;
name|queue
operator|.
name|addHandler
argument_list|(
name|EVENT1
argument_list|,
parameter_list|(
name|payload
parameter_list|,
name|publisher
parameter_list|)
lambda|->
name|result
index|[
literal|0
index|]
operator|=
name|payload
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|EVENT1
argument_list|,
literal|11L
argument_list|)
expr_stmt|;
name|queue
operator|.
name|processAll
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multipleSubscriber ()
specifier|public
name|void
name|multipleSubscriber
parameter_list|()
block|{
specifier|final
name|long
index|[]
name|result
init|=
operator|new
name|long
index|[
literal|2
index|]
decl_stmt|;
name|queue
operator|.
name|addHandler
argument_list|(
name|EVENT2
argument_list|,
parameter_list|(
name|payload
parameter_list|,
name|publisher
parameter_list|)
lambda|->
name|result
index|[
literal|0
index|]
operator|=
name|payload
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addHandler
argument_list|(
name|EVENT2
argument_list|,
parameter_list|(
name|payload
parameter_list|,
name|publisher
parameter_list|)
lambda|->
name|result
index|[
literal|1
index|]
operator|=
name|payload
argument_list|)
expr_stmt|;
name|queue
operator|.
name|fireEvent
argument_list|(
name|EVENT2
argument_list|,
literal|23L
argument_list|)
expr_stmt|;
name|queue
operator|.
name|processAll
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|result
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

