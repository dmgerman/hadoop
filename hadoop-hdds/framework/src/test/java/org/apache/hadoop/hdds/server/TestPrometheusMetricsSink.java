begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterLong
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test prometheus Sink.  */
end_comment

begin_class
DECL|class|TestPrometheusMetricsSink
specifier|public
class|class
name|TestPrometheusMetricsSink
block|{
annotation|@
name|Test
DECL|method|testPublish ()
specifier|public
name|void
name|testPublish
parameter_list|()
throws|throws
name|IOException
block|{
comment|//GIVEN
name|MetricsSystem
name|metrics
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|init
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|PrometheusMetricsSink
name|sink
init|=
operator|new
name|PrometheusMetricsSink
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"Prometheus"
argument_list|,
literal|"Prometheus"
argument_list|,
name|sink
argument_list|)
expr_stmt|;
name|TestMetrics
name|testMetrics
init|=
name|metrics
operator|.
name|register
argument_list|(
literal|"TestMetrics"
argument_list|,
literal|"Testing metrics"
argument_list|,
operator|new
name|TestMetrics
argument_list|()
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|start
argument_list|()
expr_stmt|;
name|testMetrics
operator|.
name|numBucketCreateFails
operator|.
name|incr
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|publishMetricsNow
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|stream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStreamWriter
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|stream
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
comment|//WHEN
name|sink
operator|.
name|writeMetrics
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//THEN
name|String
name|writtenMetrics
init|=
name|stream
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The expected metric line is missing from prometheus metrics output"
argument_list|,
name|writtenMetrics
operator|.
name|contains
argument_list|(
literal|"test_metrics_num_bucket_create_fails{context=\"dfs\""
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|stop
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPublishWithSameName ()
specifier|public
name|void
name|testPublishWithSameName
parameter_list|()
throws|throws
name|IOException
block|{
comment|//GIVEN
name|MetricsSystem
name|metrics
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|init
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|PrometheusMetricsSink
name|sink
init|=
operator|new
name|PrometheusMetricsSink
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"Prometheus"
argument_list|,
literal|"Prometheus"
argument_list|,
name|sink
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|register
argument_list|(
literal|"FooBar"
argument_list|,
literal|"fooBar"
argument_list|,
call|(
name|MetricsSource
call|)
argument_list|(
name|collector
argument_list|,
name|all
argument_list|)
operator|->
block|{
name|collector
operator|.
name|addRecord
argument_list|(
literal|"RpcMetrics"
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|MetricsTag
argument_list|(
name|PORT_INFO
argument_list|,
literal|"1234"
argument_list|)
argument_list|)
operator|.
name|addGauge
argument_list|(
name|COUNTER_INFO
argument_list|,
literal|123
argument_list|)
operator|.
name|endRecord
argument_list|()
block|;
name|collector
operator|.
name|addRecord
argument_list|(
literal|"RpcMetrics"
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|MetricsTag
argument_list|(
name|PORT_INFO
argument_list|,
literal|"2345"
argument_list|)
argument_list|)
operator|.
name|addGauge
argument_list|(
name|COUNTER_INFO
argument_list|,
literal|234
argument_list|)
operator|.
name|endRecord
argument_list|()
block|;     }
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|start
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|publishMetricsNow
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|stream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStreamWriter
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|stream
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
comment|//WHEN
name|sink
operator|.
name|writeMetrics
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//THEN
name|String
name|writtenMetrics
init|=
name|stream
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The expected metric line is missing from prometheus metrics output"
argument_list|,
name|writtenMetrics
operator|.
name|contains
argument_list|(
literal|"rpc_metrics_counter{port=\"2345\""
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The expected metric line is missing from prometheus metrics "
operator|+
literal|"output"
argument_list|,
name|writtenMetrics
operator|.
name|contains
argument_list|(
literal|"rpc_metrics_counter{port=\"1234\""
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|stop
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNamingCamelCase ()
specifier|public
name|void
name|testNamingCamelCase
parameter_list|()
block|{
name|PrometheusMetricsSink
name|sink
init|=
operator|new
name|PrometheusMetricsSink
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"rpc_time_some_metrics"
argument_list|,
name|sink
operator|.
name|prometheusName
argument_list|(
literal|"RpcTime"
argument_list|,
literal|"SomeMetrics"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"om_rpc_time_om_info_keys"
argument_list|,
name|sink
operator|.
name|prometheusName
argument_list|(
literal|"OMRpcTime"
argument_list|,
literal|"OMInfoKeys"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"rpc_time_small"
argument_list|,
name|sink
operator|.
name|prometheusName
argument_list|(
literal|"RpcTime"
argument_list|,
literal|"small"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNamingRocksDB ()
specifier|public
name|void
name|testNamingRocksDB
parameter_list|()
block|{
comment|//RocksDB metrics are handled differently.
name|PrometheusMetricsSink
name|sink
init|=
operator|new
name|PrometheusMetricsSink
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"rocksdb_om.db_num_open_connections"
argument_list|,
name|sink
operator|.
name|prometheusName
argument_list|(
literal|"Rocksdb_om.db"
argument_list|,
literal|"num_open_connections"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNamingPipeline ()
specifier|public
name|void
name|testNamingPipeline
parameter_list|()
block|{
name|PrometheusMetricsSink
name|sink
init|=
operator|new
name|PrometheusMetricsSink
argument_list|()
decl_stmt|;
name|String
name|recordName
init|=
literal|"SCMPipelineMetrics"
decl_stmt|;
name|String
name|metricName
init|=
literal|"NumBlocksAllocated-"
operator|+
literal|"RATIS-THREE-47659e3d-40c9-43b3-9792-4982fc279aba"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"scm_pipeline_metrics_"
operator|+
literal|"num_blocks_allocated_"
operator|+
literal|"ratis_three_47659e3d_40c9_43b3_9792_4982fc279aba"
argument_list|,
name|sink
operator|.
name|prometheusName
argument_list|(
name|recordName
argument_list|,
name|metricName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNamingSpaces ()
specifier|public
name|void
name|testNamingSpaces
parameter_list|()
block|{
name|PrometheusMetricsSink
name|sink
init|=
operator|new
name|PrometheusMetricsSink
argument_list|()
decl_stmt|;
name|String
name|recordName
init|=
literal|"JvmMetrics"
decl_stmt|;
name|String
name|metricName
init|=
literal|"GcTimeMillisG1 Young Generation"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"jvm_metrics_gc_time_millis_g1_young_generation"
argument_list|,
name|sink
operator|.
name|prometheusName
argument_list|(
name|recordName
argument_list|,
name|metricName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Example metric pojo.    */
annotation|@
name|Metrics
argument_list|(
name|about
operator|=
literal|"Test Metrics"
argument_list|,
name|context
operator|=
literal|"dfs"
argument_list|)
DECL|class|TestMetrics
specifier|private
specifier|static
class|class
name|TestMetrics
block|{
annotation|@
name|Metric
DECL|field|numBucketCreateFails
specifier|private
name|MutableCounterLong
name|numBucketCreateFails
decl_stmt|;
block|}
DECL|field|PORT_INFO
specifier|public
specifier|static
specifier|final
name|MetricsInfo
name|PORT_INFO
init|=
operator|new
name|MetricsInfo
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"PORT"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"port"
return|;
block|}
block|}
decl_stmt|;
DECL|field|COUNTER_INFO
specifier|public
specifier|static
specifier|final
name|MetricsInfo
name|COUNTER_INFO
init|=
operator|new
name|MetricsInfo
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"COUNTER"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"counter"
return|;
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

