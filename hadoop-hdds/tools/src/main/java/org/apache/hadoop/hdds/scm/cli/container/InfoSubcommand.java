begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.cli.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|cli
operator|.
name|container
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|cli
operator|.
name|HddsVersionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|cli
operator|.
name|SCMCLI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|client
operator|.
name|ScmClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerWithPipeline
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|ParentCommand
import|;
end_import

begin_comment
comment|/**  * This is the handler that process container info command.  */
end_comment

begin_class
annotation|@
name|Command
argument_list|(
name|name
operator|=
literal|"info"
argument_list|,
name|description
operator|=
literal|"Show information about a specific container"
argument_list|,
name|mixinStandardHelpOptions
operator|=
literal|true
argument_list|,
name|versionProvider
operator|=
name|HddsVersionProvider
operator|.
name|class
argument_list|)
DECL|class|InfoSubcommand
specifier|public
class|class
name|InfoSubcommand
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InfoSubcommand
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|ParentCommand
DECL|field|parent
specifier|private
name|SCMCLI
name|parent
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|description
operator|=
literal|"Decimal id of the container."
argument_list|)
DECL|field|containerID
specifier|private
name|long
name|containerID
decl_stmt|;
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ScmClient
name|scmClient
init|=
name|parent
operator|.
name|createScmClient
argument_list|()
init|)
block|{
name|ContainerWithPipeline
name|container
init|=
name|scmClient
operator|.
name|getContainerWithPipeline
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|container
argument_list|,
literal|"Container cannot be null"
argument_list|)
expr_stmt|;
name|ContainerDataProto
name|containerData
init|=
name|scmClient
operator|.
name|readContainer
argument_list|(
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|container
operator|.
name|getPipeline
argument_list|()
argument_list|)
decl_stmt|;
comment|// Print container report info.
name|LOG
operator|.
name|info
argument_list|(
literal|"Container id: {}"
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
name|String
name|openStatus
init|=
name|containerData
operator|.
name|getState
argument_list|()
operator|==
name|ContainerDataProto
operator|.
name|State
operator|.
name|OPEN
condition|?
literal|"OPEN"
else|:
literal|"CLOSED"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Container State: {}"
argument_list|,
name|openStatus
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Container Path: {}"
argument_list|,
name|containerData
operator|.
name|getContainerPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Output meta data.
name|String
name|metadataStr
init|=
name|containerData
operator|.
name|getMetadataList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getKey
argument_list|()
operator|+
literal|":"
operator|+
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Container Metadata: {}"
argument_list|,
name|metadataStr
argument_list|)
expr_stmt|;
comment|// Print pipeline of an existing container.
name|String
name|machinesStr
init|=
name|container
operator|.
name|getPipeline
argument_list|()
operator|.
name|getNodes
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|DatanodeDetails
operator|::
name|getHostName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Datanodes: [{}]"
argument_list|,
name|machinesStr
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

