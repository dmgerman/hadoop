begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.cli.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|cli
operator|.
name|container
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|cli
operator|.
name|HddsVersionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|cli
operator|.
name|SCMCLI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|client
operator|.
name|ScmClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|JsonUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|Help
operator|.
name|Visibility
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|ParentCommand
import|;
end_import

begin_comment
comment|/**  * This is the handler that process container list command.  */
end_comment

begin_class
annotation|@
name|Command
argument_list|(
name|name
operator|=
literal|"list"
argument_list|,
name|description
operator|=
literal|"List containers"
argument_list|,
name|mixinStandardHelpOptions
operator|=
literal|true
argument_list|,
name|versionProvider
operator|=
name|HddsVersionProvider
operator|.
name|class
argument_list|)
DECL|class|ListSubcommand
specifier|public
class|class
name|ListSubcommand
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ListSubcommand
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|ParentCommand
DECL|field|parent
specifier|private
name|SCMCLI
name|parent
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-s"
block|,
literal|"--start"
block|}
argument_list|,
name|description
operator|=
literal|"Container id to start the iteration"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|startId
specifier|private
name|long
name|startId
init|=
literal|1
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-c"
block|,
literal|"--count"
block|}
argument_list|,
name|description
operator|=
literal|"Maximum number of containers to list"
argument_list|,
name|defaultValue
operator|=
literal|"20"
argument_list|,
name|showDefaultValue
operator|=
name|Visibility
operator|.
name|ALWAYS
argument_list|)
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|20
decl_stmt|;
DECL|method|outputContainerInfo (ContainerInfo containerInfo)
specifier|private
name|void
name|outputContainerInfo
parameter_list|(
name|ContainerInfo
name|containerInfo
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Print container report info.
name|LOG
operator|.
name|info
argument_list|(
literal|"{}"
argument_list|,
name|JsonUtils
operator|.
name|toJsonStringWithDefaultPrettyPrinter
argument_list|(
name|containerInfo
operator|.
name|toJsonString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ScmClient
name|scmClient
init|=
name|parent
operator|.
name|createScmClient
argument_list|()
init|)
block|{
name|List
argument_list|<
name|ContainerInfo
argument_list|>
name|containerList
init|=
name|scmClient
operator|.
name|listContainer
argument_list|(
name|startId
argument_list|,
name|count
argument_list|)
decl_stmt|;
comment|// Output data list
for|for
control|(
name|ContainerInfo
name|container
range|:
name|containerList
control|)
block|{
name|outputContainerInfo
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

