begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|cli
operator|.
name|HddsVersionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|client
operator|.
name|ScmClient
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|NodeState
operator|.
name|DEAD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|NodeState
operator|.
name|DECOMMISSIONED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|NodeState
operator|.
name|DECOMMISSIONING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|NodeState
operator|.
name|HEALTHY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|NodeState
operator|.
name|STALE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_comment
comment|/**  * Handler of printTopology command.  */
end_comment

begin_class
annotation|@
name|CommandLine
operator|.
name|Command
argument_list|(
name|name
operator|=
literal|"printTopology"
argument_list|,
name|description
operator|=
literal|"Print a tree of the network topology as reported by SCM"
argument_list|,
name|mixinStandardHelpOptions
operator|=
literal|true
argument_list|,
name|versionProvider
operator|=
name|HddsVersionProvider
operator|.
name|class
argument_list|)
DECL|class|TopologySubcommand
specifier|public
class|class
name|TopologySubcommand
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
annotation|@
name|CommandLine
operator|.
name|ParentCommand
DECL|field|parent
specifier|private
name|SCMCLI
name|parent
decl_stmt|;
DECL|field|stateArray
specifier|private
specifier|static
name|List
argument_list|<
name|HddsProtos
operator|.
name|NodeState
argument_list|>
name|stateArray
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|stateArray
operator|.
name|add
argument_list|(
name|HEALTHY
argument_list|)
expr_stmt|;
name|stateArray
operator|.
name|add
argument_list|(
name|STALE
argument_list|)
expr_stmt|;
name|stateArray
operator|.
name|add
argument_list|(
name|DEAD
argument_list|)
expr_stmt|;
name|stateArray
operator|.
name|add
argument_list|(
name|DECOMMISSIONING
argument_list|)
expr_stmt|;
name|stateArray
operator|.
name|add
argument_list|(
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CommandLine
operator|.
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-o"
block|,
literal|"--order"
block|}
argument_list|,
name|description
operator|=
literal|"Print Topology ordered by network location"
argument_list|)
DECL|field|order
specifier|private
name|boolean
name|order
decl_stmt|;
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ScmClient
name|scmClient
init|=
name|parent
operator|.
name|createScmClient
argument_list|()
init|)
block|{
for|for
control|(
name|HddsProtos
operator|.
name|NodeState
name|state
range|:
name|stateArray
control|)
block|{
name|List
argument_list|<
name|HddsProtos
operator|.
name|Node
argument_list|>
name|nodes
init|=
name|scmClient
operator|.
name|queryNode
argument_list|(
name|state
argument_list|,
name|HddsProtos
operator|.
name|QueryScope
operator|.
name|CLUSTER
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
operator|&&
name|nodes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// show node state
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"State = "
operator|+
name|state
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|order
condition|)
block|{
name|printOrderedByLocation
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printNodesWithLocation
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
comment|// Format
comment|// Location: rack1
comment|//  ipAddress(hostName)
DECL|method|printOrderedByLocation (List<HddsProtos.Node> nodes)
specifier|private
name|void
name|printOrderedByLocation
parameter_list|(
name|List
argument_list|<
name|HddsProtos
operator|.
name|Node
argument_list|>
name|nodes
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|DatanodeDetails
argument_list|>
argument_list|>
name|tree
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|HddsProtos
operator|.
name|Node
name|node
range|:
name|nodes
control|)
block|{
name|String
name|location
init|=
name|node
operator|.
name|getNodeID
argument_list|()
operator|.
name|getNetworkLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
operator|&&
operator|!
name|tree
operator|.
name|containsKey
argument_list|(
name|location
argument_list|)
condition|)
block|{
name|tree
operator|.
name|put
argument_list|(
name|location
argument_list|,
operator|new
name|TreeSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tree
operator|.
name|get
argument_list|(
name|location
argument_list|)
operator|.
name|add
argument_list|(
name|DatanodeDetails
operator|.
name|getFromProtoBuf
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tree
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|locations
argument_list|)
expr_stmt|;
name|locations
operator|.
name|forEach
argument_list|(
name|location
lambda|->
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Location: "
operator|+
name|location
argument_list|)
expr_stmt|;
name|tree
operator|.
name|get
argument_list|(
name|location
argument_list|)
operator|.
name|forEach
argument_list|(
name|node
lambda|->
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" "
operator|+
name|node
operator|.
name|getIpAddress
argument_list|()
operator|+
literal|"("
operator|+
name|node
operator|.
name|getHostName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Format "ipAddress(hostName)    networkLocation"
DECL|method|printNodesWithLocation (Collection<HddsProtos.Node> nodes)
specifier|private
name|void
name|printNodesWithLocation
parameter_list|(
name|Collection
argument_list|<
name|HddsProtos
operator|.
name|Node
argument_list|>
name|nodes
parameter_list|)
block|{
name|nodes
operator|.
name|forEach
argument_list|(
name|node
lambda|->
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|" "
operator|+
name|node
operator|.
name|getNodeID
argument_list|()
operator|.
name|getIpAddress
argument_list|()
operator|+
literal|"("
operator|+
name|node
operator|.
name|getNodeID
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
operator|(
name|node
operator|.
name|getNodeID
argument_list|()
operator|.
name|getNetworkLocation
argument_list|()
operator|!=
literal|null
condition|?
name|node
operator|.
name|getNodeID
argument_list|()
operator|.
name|getNetworkLocation
argument_list|()
else|:
literal|"NA"
operator|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

