begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.cli.pipeline
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|cli
operator|.
name|pipeline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|cli
operator|.
name|HddsVersionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|cli
operator|.
name|SCMCLI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|client
operator|.
name|ScmClient
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_comment
comment|/**  * Handler of listPipelines command.  */
end_comment

begin_class
annotation|@
name|CommandLine
operator|.
name|Command
argument_list|(
name|name
operator|=
literal|"listPipelines"
argument_list|,
name|description
operator|=
literal|"List all active pipelines"
argument_list|,
name|mixinStandardHelpOptions
operator|=
literal|true
argument_list|,
name|versionProvider
operator|=
name|HddsVersionProvider
operator|.
name|class
argument_list|)
DECL|class|ListPipelinesSubcommand
specifier|public
class|class
name|ListPipelinesSubcommand
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
annotation|@
name|CommandLine
operator|.
name|ParentCommand
DECL|field|parent
specifier|private
name|SCMCLI
name|parent
decl_stmt|;
annotation|@
name|CommandLine
operator|.
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-ffc"
block|,
literal|"--filterByFactor"
block|}
argument_list|,
name|description
operator|=
literal|"Filter listed pipelines by Factor(ONE/one)"
argument_list|,
name|defaultValue
operator|=
literal|""
argument_list|,
name|required
operator|=
literal|false
argument_list|)
DECL|field|factor
specifier|private
name|String
name|factor
decl_stmt|;
annotation|@
name|CommandLine
operator|.
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-fst"
block|,
literal|"--filterByState"
block|}
argument_list|,
name|description
operator|=
literal|"Filter listed pipelines by State(OPEN/CLOSE)"
argument_list|,
name|defaultValue
operator|=
literal|""
argument_list|,
name|required
operator|=
literal|false
argument_list|)
DECL|field|state
specifier|private
name|String
name|state
decl_stmt|;
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ScmClient
name|scmClient
init|=
name|parent
operator|.
name|createScmClient
argument_list|()
init|)
block|{
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|factor
argument_list|)
operator|&&
name|isNullOrEmpty
argument_list|(
name|state
argument_list|)
condition|)
block|{
name|scmClient
operator|.
name|listPipelines
argument_list|()
operator|.
name|forEach
argument_list|(
name|System
operator|.
name|out
operator|::
name|println
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scmClient
operator|.
name|listPipelines
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
operator|(
operator|(
name|isNullOrEmpty
argument_list|(
name|factor
argument_list|)
operator|||
operator|(
name|p
operator|.
name|getFactor
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|factor
argument_list|)
operator|==
literal|0
operator|)
operator|)
operator|&&
operator|(
name|isNullOrEmpty
argument_list|(
name|state
argument_list|)
operator|||
operator|(
name|p
operator|.
name|getPipelineState
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|state
argument_list|)
operator|==
literal|0
operator|)
operator|)
operator|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|System
operator|.
name|out
operator|::
name|println
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|method|isNullOrEmpty (String str)
specifier|protected
specifier|static
name|boolean
name|isNullOrEmpty
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
operator|(
operator|(
name|str
operator|==
literal|null
operator|)
operator|||
name|str
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

