begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|SecurityConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|client
operator|.
name|CertificateClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|client
operator|.
name|DNCertificateClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|utils
operator|.
name|CertificateCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|keys
operator|.
name|KeyCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|KeyStoreTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ServicePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|X509CertificateHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|pkcs
operator|.
name|PKCS10CertificationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|HddsDatanodeService
operator|.
name|getLogger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_SECURITY_ENABLED_KEY
import|;
end_import

begin_comment
comment|/**  * Test class for {@link HddsDatanodeService}.  */
end_comment

begin_class
DECL|class|TestHddsSecureDatanodeInit
specifier|public
class|class
name|TestHddsSecureDatanodeInit
block|{
DECL|field|testDir
specifier|private
specifier|static
name|File
name|testDir
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|service
specifier|private
specifier|static
name|HddsDatanodeService
name|service
decl_stmt|;
DECL|field|args
specifier|private
specifier|static
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
DECL|field|privateKey
specifier|private
specifier|static
name|PrivateKey
name|privateKey
decl_stmt|;
DECL|field|publicKey
specifier|private
specifier|static
name|PublicKey
name|publicKey
decl_stmt|;
DECL|field|dnLogs
specifier|private
specifier|static
name|GenericTestUtils
operator|.
name|LogCapturer
name|dnLogs
decl_stmt|;
DECL|field|client
specifier|private
specifier|static
name|CertificateClient
name|client
decl_stmt|;
DECL|field|securityConfig
specifier|private
specifier|static
name|SecurityConfig
name|securityConfig
decl_stmt|;
DECL|field|keyCodec
specifier|private
specifier|static
name|KeyCodec
name|keyCodec
decl_stmt|;
DECL|field|certCodec
specifier|private
specifier|static
name|CertificateCodec
name|certCodec
decl_stmt|;
DECL|field|certHolder
specifier|private
specifier|static
name|X509CertificateHolder
name|certHolder
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|testDir
operator|=
name|GenericTestUtils
operator|.
name|getRandomizedTestDir
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|testDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|volumeDir
init|=
name|testDir
operator|+
literal|"/disk1"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|volumeDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OZONE_SECURITY_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|OzoneConfigKeys
operator|.
name|HDDS_DATANODE_PLUGINS_KEY
argument_list|,
name|TestHddsDatanodeService
operator|.
name|MockService
operator|.
name|class
argument_list|,
name|ServicePlugin
operator|.
name|class
argument_list|)
expr_stmt|;
name|securityConfig
operator|=
operator|new
name|SecurityConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|service
operator|=
name|HddsDatanodeService
operator|.
name|createHddsDatanodeService
argument_list|(
name|args
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|dnLogs
operator|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|getLogger
argument_list|()
argument_list|)
expr_stmt|;
name|callQuietly
argument_list|(
parameter_list|()
lambda|->
block|{
name|service
operator|.
name|start
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
name|callQuietly
argument_list|(
parameter_list|()
lambda|->
block|{
name|service
operator|.
name|initializeCertificateClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
name|certCodec
operator|=
operator|new
name|CertificateCodec
argument_list|(
name|securityConfig
argument_list|)
expr_stmt|;
name|keyCodec
operator|=
operator|new
name|KeyCodec
argument_list|(
name|securityConfig
argument_list|)
expr_stmt|;
name|dnLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|privateKey
operator|=
name|service
operator|.
name|getCertificateClient
argument_list|()
operator|.
name|getPrivateKey
argument_list|()
expr_stmt|;
name|publicKey
operator|=
name|service
operator|.
name|getCertificateClient
argument_list|()
operator|.
name|getPublicKey
argument_list|()
expr_stmt|;
name|X509Certificate
name|x509Certificate
init|=
literal|null
decl_stmt|;
name|x509Certificate
operator|=
name|KeyStoreTestUtil
operator|.
name|generateCertificate
argument_list|(
literal|"CN=Test"
argument_list|,
operator|new
name|KeyPair
argument_list|(
name|publicKey
argument_list|,
name|privateKey
argument_list|)
argument_list|,
literal|10
argument_list|,
name|securityConfig
operator|.
name|getSignatureAlgo
argument_list|()
argument_list|)
expr_stmt|;
name|certHolder
operator|=
operator|new
name|X509CertificateHolder
argument_list|(
name|x509Certificate
operator|.
name|getEncoded
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUpDNCertClient ()
specifier|public
name|void
name|setUpDNCertClient
parameter_list|()
block|{
name|client
operator|=
operator|new
name|DNCertificateClient
argument_list|(
name|securityConfig
argument_list|)
expr_stmt|;
name|service
operator|.
name|setCertificateClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|securityConfig
operator|.
name|getKeyLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|securityConfig
operator|.
name|getPrivateKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|securityConfig
operator|.
name|getKeyLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|securityConfig
operator|.
name|getPublicKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|securityConfig
operator|.
name|getCertificateLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|securityConfig
operator|.
name|getCertificateFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|dnLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecureDnStartupCase0 ()
specifier|public
name|void
name|testSecureDnStartupCase0
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Case 0: When keypair as well as certificate is missing. Initial keypair
comment|// boot-up. Get certificate will fail as no SCM is not running.
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
name|service
operator|.
name|initializeCertificateClient
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|client
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dnLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Init response: GETCERT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecureDnStartupCase1 ()
specifier|public
name|void
name|testSecureDnStartupCase1
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Case 1: When only certificate is present.
name|certCodec
operator|.
name|writeCertificate
argument_list|(
name|certHolder
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
literal|"DN security"
operator|+
literal|" initialization failed"
argument_list|,
parameter_list|()
lambda|->
name|service
operator|.
name|initializeCertificateClient
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|client
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|client
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dnLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Init response: FAILURE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecureDnStartupCase2 ()
specifier|public
name|void
name|testSecureDnStartupCase2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Case 2: When private key and certificate is missing.
name|keyCodec
operator|.
name|writePublicKey
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
literal|"DN security"
operator|+
literal|" initialization failed"
argument_list|,
parameter_list|()
lambda|->
name|service
operator|.
name|initializeCertificateClient
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|client
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|client
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dnLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Init response: FAILURE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecureDnStartupCase3 ()
specifier|public
name|void
name|testSecureDnStartupCase3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Case 3: When only public key and certificate is present.
name|keyCodec
operator|.
name|writePublicKey
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
name|certCodec
operator|.
name|writeCertificate
argument_list|(
name|certHolder
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
literal|"DN security"
operator|+
literal|" initialization failed"
argument_list|,
parameter_list|()
lambda|->
name|service
operator|.
name|initializeCertificateClient
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|client
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dnLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Init response: FAILURE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecureDnStartupCase4 ()
specifier|public
name|void
name|testSecureDnStartupCase4
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Case 4: When public key as well as certificate is missing.
name|keyCodec
operator|.
name|writePrivateKey
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
literal|" DN security"
operator|+
literal|" initialization failed"
argument_list|,
parameter_list|()
lambda|->
name|service
operator|.
name|initializeCertificateClient
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|client
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|client
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dnLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Init response: FAILURE"
argument_list|)
argument_list|)
expr_stmt|;
name|dnLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecureDnStartupCase5 ()
specifier|public
name|void
name|testSecureDnStartupCase5
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Case 5: If private key and certificate is present.
name|certCodec
operator|.
name|writeCertificate
argument_list|(
name|certHolder
argument_list|)
expr_stmt|;
name|keyCodec
operator|.
name|writePrivateKey
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
name|service
operator|.
name|initializeCertificateClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dnLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Init response: SUCCESS"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecureDnStartupCase6 ()
specifier|public
name|void
name|testSecureDnStartupCase6
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Case 6: If key pair already exist than response should be GETCERT.
name|keyCodec
operator|.
name|writePublicKey
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
name|keyCodec
operator|.
name|writePrivateKey
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
name|service
operator|.
name|initializeCertificateClient
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|client
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dnLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Init response: GETCERT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecureDnStartupCase7 ()
specifier|public
name|void
name|testSecureDnStartupCase7
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Case 7 When keypair and certificate is present.
name|keyCodec
operator|.
name|writePublicKey
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
name|keyCodec
operator|.
name|writePrivateKey
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
name|certCodec
operator|.
name|writeCertificate
argument_list|(
name|certHolder
argument_list|)
expr_stmt|;
name|service
operator|.
name|initializeCertificateClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dnLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Init response: SUCCESS"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Invoke a callable; Ignore all exception.    * @param closure closure to execute    * @return    */
DECL|method|callQuietly (Callable closure)
specifier|public
specifier|static
name|void
name|callQuietly
parameter_list|(
name|Callable
name|closure
parameter_list|)
block|{
try|try
block|{
name|closure
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// Ignore all Throwable,
block|}
block|}
annotation|@
name|Test
DECL|method|testGetCSR ()
specifier|public
name|void
name|testGetCSR
parameter_list|()
throws|throws
name|Exception
block|{
name|keyCodec
operator|.
name|writePublicKey
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
name|keyCodec
operator|.
name|writePrivateKey
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
name|service
operator|.
name|setCertificateClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|PKCS10CertificationRequest
name|csr
init|=
name|service
operator|.
name|getCSR
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|csr
argument_list|)
expr_stmt|;
name|csr
operator|=
name|service
operator|.
name|getCSR
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|csr
argument_list|)
expr_stmt|;
name|csr
operator|=
name|service
operator|.
name|getCSR
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|csr
argument_list|)
expr_stmt|;
name|csr
operator|=
name|service
operator|.
name|getCSR
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|csr
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

