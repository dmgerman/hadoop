begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.volume
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskErrorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Verify that {@link VolumeSet} correctly checks for failed disks  * during initialization.  */
end_comment

begin_class
DECL|class|TestVolumeSetDiskChecks
specifier|public
class|class
name|TestVolumeSetDiskChecks
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestVolumeSetDiskChecks
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|30_000
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
comment|/**    * Cleanup volume directories.    */
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|dirs
init|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|d
range|:
name|dirs
control|)
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
operator|new
name|File
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify that VolumeSet creates volume root directories at startup.    * @throws IOException    */
annotation|@
name|Test
DECL|method|testOzoneDirsAreCreated ()
specifier|public
name|void
name|testOzoneDirsAreCreated
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numVolumes
init|=
literal|2
decl_stmt|;
name|conf
operator|=
name|getConfWithDataNodeDirs
argument_list|(
name|numVolumes
argument_list|)
expr_stmt|;
specifier|final
name|VolumeSet
name|volumeSet
init|=
operator|new
name|VolumeSet
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|volumeSet
operator|.
name|getVolumesList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|numVolumes
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|volumeSet
operator|.
name|getFailedVolumesList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that the Ozone dirs were created during initialization.
name|Collection
argument_list|<
name|String
argument_list|>
name|dirs
init|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|d
range|:
name|dirs
control|)
block|{
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|d
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|volumeSet
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify that bad volumes are filtered at startup.    * @throws IOException    */
annotation|@
name|Test
DECL|method|testBadDirectoryDetection ()
specifier|public
name|void
name|testBadDirectoryDetection
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numVolumes
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|numBadVolumes
init|=
literal|2
decl_stmt|;
name|conf
operator|=
name|getConfWithDataNodeDirs
argument_list|(
name|numVolumes
argument_list|)
expr_stmt|;
specifier|final
name|VolumeSet
name|volumeSet
init|=
operator|new
name|VolumeSet
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
block|{
annotation|@
name|Override
name|HddsVolumeChecker
name|getVolumeChecker
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|DiskErrorException
block|{
return|return
operator|new
name|DummyChecker
argument_list|(
name|configuration
argument_list|,
operator|new
name|Timer
argument_list|()
argument_list|,
name|numBadVolumes
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|assertThat
argument_list|(
name|volumeSet
operator|.
name|getFailedVolumesList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|numBadVolumes
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|volumeSet
operator|.
name|getVolumesList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|numVolumes
operator|-
name|numBadVolumes
argument_list|)
argument_list|)
expr_stmt|;
name|volumeSet
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify that all volumes are added to fail list if all volumes are bad.    */
annotation|@
name|Test
DECL|method|testAllVolumesAreBad ()
specifier|public
name|void
name|testAllVolumesAreBad
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numVolumes
init|=
literal|5
decl_stmt|;
name|conf
operator|=
name|getConfWithDataNodeDirs
argument_list|(
name|numVolumes
argument_list|)
expr_stmt|;
specifier|final
name|VolumeSet
name|volumeSet
init|=
operator|new
name|VolumeSet
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
block|{
annotation|@
name|Override
name|HddsVolumeChecker
name|getVolumeChecker
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|DiskErrorException
block|{
return|return
operator|new
name|DummyChecker
argument_list|(
name|configuration
argument_list|,
operator|new
name|Timer
argument_list|()
argument_list|,
name|numVolumes
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|volumeSet
operator|.
name|getFailedVolumesList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|numVolumes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volumeSet
operator|.
name|getVolumesList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|volumeSet
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Update configuration with the specified number of Datanode    * storage directories.    * @param conf    * @param numDirs    */
DECL|method|getConfWithDataNodeDirs (int numDirs)
specifier|private
name|Configuration
name|getConfWithDataNodeDirs
parameter_list|(
name|int
name|numDirs
parameter_list|)
block|{
specifier|final
name|Configuration
name|ozoneConf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|dirs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDirs
condition|;
operator|++
name|i
control|)
block|{
name|dirs
operator|.
name|add
argument_list|(
name|GenericTestUtils
operator|.
name|getRandomizedTestDir
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ozoneConf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|dirs
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ozoneConf
return|;
block|}
comment|/**    * A no-op checker that fails the given number of volumes and succeeds    * the rest.    */
DECL|class|DummyChecker
specifier|static
class|class
name|DummyChecker
extends|extends
name|HddsVolumeChecker
block|{
DECL|field|numBadVolumes
specifier|private
specifier|final
name|int
name|numBadVolumes
decl_stmt|;
DECL|method|DummyChecker (Configuration conf, Timer timer, int numBadVolumes)
name|DummyChecker
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Timer
name|timer
parameter_list|,
name|int
name|numBadVolumes
parameter_list|)
throws|throws
name|DiskErrorException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|timer
argument_list|)
expr_stmt|;
name|this
operator|.
name|numBadVolumes
operator|=
name|numBadVolumes
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkAllVolumes (Collection<HddsVolume> volumes)
specifier|public
name|Set
argument_list|<
name|HddsVolume
argument_list|>
name|checkAllVolumes
parameter_list|(
name|Collection
argument_list|<
name|HddsVolume
argument_list|>
name|volumes
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|// Return the first 'numBadVolumes' as failed.
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|Iterables
operator|.
name|limit
argument_list|(
name|volumes
argument_list|,
name|numBadVolumes
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

