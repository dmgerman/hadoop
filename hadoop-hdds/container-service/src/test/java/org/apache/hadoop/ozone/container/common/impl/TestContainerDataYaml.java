begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|StorageUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * This class tests create/read .container files.  */
end_comment

begin_class
DECL|class|TestContainerDataYaml
specifier|public
class|class
name|TestContainerDataYaml
block|{
DECL|field|testContainerID
specifier|private
specifier|static
name|long
name|testContainerID
init|=
literal|1234
decl_stmt|;
DECL|field|testRoot
specifier|private
specifier|static
name|String
name|testRoot
init|=
operator|new
name|FileSystemTestHelper
argument_list|()
operator|.
name|getTestRootDir
argument_list|()
decl_stmt|;
DECL|field|MAXSIZE
specifier|private
specifier|static
specifier|final
name|long
name|MAXSIZE
init|=
operator|(
name|long
operator|)
name|StorageUnit
operator|.
name|GB
operator|.
name|toBytes
argument_list|(
literal|5
argument_list|)
decl_stmt|;
comment|/**    * Creates a .container file. cleanup() should be called at the end of the    * test when container file is created.    */
DECL|method|createContainerFile (long containerID)
specifier|private
name|File
name|createContainerFile
parameter_list|(
name|long
name|containerID
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|File
argument_list|(
name|testRoot
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|String
name|containerPath
init|=
name|containerID
operator|+
literal|".container"
decl_stmt|;
name|KeyValueContainerData
name|keyValueContainerData
init|=
operator|new
name|KeyValueContainerData
argument_list|(
name|containerID
argument_list|,
name|MAXSIZE
argument_list|)
decl_stmt|;
name|keyValueContainerData
operator|.
name|setContainerDBType
argument_list|(
literal|"RocksDB"
argument_list|)
expr_stmt|;
name|keyValueContainerData
operator|.
name|setMetadataPath
argument_list|(
name|testRoot
argument_list|)
expr_stmt|;
name|keyValueContainerData
operator|.
name|setChunksPath
argument_list|(
name|testRoot
argument_list|)
expr_stmt|;
name|File
name|containerFile
init|=
operator|new
name|File
argument_list|(
name|testRoot
argument_list|,
name|containerPath
argument_list|)
decl_stmt|;
comment|// Create .container file with ContainerData
name|ContainerDataYaml
operator|.
name|createContainerFile
argument_list|(
name|ContainerProtos
operator|.
name|ContainerType
operator|.
name|KeyValueContainer
argument_list|,
name|keyValueContainerData
argument_list|,
name|containerFile
argument_list|)
expr_stmt|;
comment|//Check .container file exists or not.
name|assertTrue
argument_list|(
name|containerFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|containerFile
return|;
block|}
DECL|method|cleanup ()
specifier|private
name|void
name|cleanup
parameter_list|()
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|testRoot
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateContainerFile ()
specifier|public
name|void
name|testCreateContainerFile
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|containerID
init|=
name|testContainerID
operator|++
decl_stmt|;
name|File
name|containerFile
init|=
name|createContainerFile
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
comment|// Read from .container file, and verify data.
name|KeyValueContainerData
name|kvData
init|=
operator|(
name|KeyValueContainerData
operator|)
name|ContainerDataYaml
operator|.
name|readContainerFile
argument_list|(
name|containerFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|containerID
argument_list|,
name|kvData
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|ContainerType
operator|.
name|KeyValueContainer
argument_list|,
name|kvData
operator|.
name|getContainerType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RocksDB"
argument_list|,
name|kvData
operator|.
name|getContainerDBType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|containerFile
operator|.
name|getParent
argument_list|()
argument_list|,
name|kvData
operator|.
name|getMetadataPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|containerFile
operator|.
name|getParent
argument_list|()
argument_list|,
name|kvData
operator|.
name|getChunksPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|ContainerDataProto
operator|.
name|State
operator|.
name|OPEN
argument_list|,
name|kvData
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvData
operator|.
name|getLayOutVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kvData
operator|.
name|getMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MAXSIZE
argument_list|,
name|kvData
operator|.
name|getMaxSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update ContainerData.
name|kvData
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"hdfs"
argument_list|)
expr_stmt|;
name|kvData
operator|.
name|addMetadata
argument_list|(
literal|"OWNER"
argument_list|,
literal|"ozone"
argument_list|)
expr_stmt|;
name|kvData
operator|.
name|setState
argument_list|(
name|ContainerProtos
operator|.
name|ContainerDataProto
operator|.
name|State
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|ContainerDataYaml
operator|.
name|createContainerFile
argument_list|(
name|ContainerProtos
operator|.
name|ContainerType
operator|.
name|KeyValueContainer
argument_list|,
name|kvData
argument_list|,
name|containerFile
argument_list|)
expr_stmt|;
comment|// Reading newly updated data from .container file
name|kvData
operator|=
operator|(
name|KeyValueContainerData
operator|)
name|ContainerDataYaml
operator|.
name|readContainerFile
argument_list|(
name|containerFile
argument_list|)
expr_stmt|;
comment|// verify data.
name|assertEquals
argument_list|(
name|containerID
argument_list|,
name|kvData
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|ContainerType
operator|.
name|KeyValueContainer
argument_list|,
name|kvData
operator|.
name|getContainerType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RocksDB"
argument_list|,
name|kvData
operator|.
name|getContainerDBType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|containerFile
operator|.
name|getParent
argument_list|()
argument_list|,
name|kvData
operator|.
name|getMetadataPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|containerFile
operator|.
name|getParent
argument_list|()
argument_list|,
name|kvData
operator|.
name|getChunksPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|ContainerDataProto
operator|.
name|State
operator|.
name|CLOSED
argument_list|,
name|kvData
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvData
operator|.
name|getLayOutVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|kvData
operator|.
name|getMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hdfs"
argument_list|,
name|kvData
operator|.
name|getMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"VOLUME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ozone"
argument_list|,
name|kvData
operator|.
name|getMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"OWNER"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MAXSIZE
argument_list|,
name|kvData
operator|.
name|getMaxSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIncorrectContainerFile ()
specifier|public
name|void
name|testIncorrectContainerFile
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
name|containerFile
init|=
literal|"incorrect.container"
decl_stmt|;
comment|//Get file from resources folder
name|ClassLoader
name|classLoader
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|classLoader
operator|.
name|getResource
argument_list|(
name|containerFile
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|KeyValueContainerData
name|kvData
init|=
operator|(
name|KeyValueContainerData
operator|)
name|ContainerDataYaml
operator|.
name|readContainerFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"testIncorrectContainerFile failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Unexpected "
operator|+
literal|"ContainerLifeCycleState"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCheckBackWardCompatabilityOfContainerFile ()
specifier|public
name|void
name|testCheckBackWardCompatabilityOfContainerFile
parameter_list|()
throws|throws
name|IOException
block|{
comment|// This test is for if we upgrade, and then .container files added by new
comment|// server will have new fields added to .container file, after a while we
comment|// decided to rollback. Then older ozone can read .container files
comment|// created or not.
try|try
block|{
name|String
name|containerFile
init|=
literal|"additionalfields.container"
decl_stmt|;
comment|//Get file from resources folder
name|ClassLoader
name|classLoader
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|classLoader
operator|.
name|getResource
argument_list|(
name|containerFile
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|KeyValueContainerData
name|kvData
init|=
operator|(
name|KeyValueContainerData
operator|)
name|ContainerDataYaml
operator|.
name|readContainerFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|ContainerUtils
operator|.
name|verifyChecksum
argument_list|(
name|kvData
argument_list|)
expr_stmt|;
comment|//Checking the Container file data is consistent or not
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|ContainerDataProto
operator|.
name|State
operator|.
name|CLOSED
argument_list|,
name|kvData
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RocksDB"
argument_list|,
name|kvData
operator|.
name|getContainerDBType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|ContainerType
operator|.
name|KeyValueContainer
argument_list|,
name|kvData
operator|.
name|getContainerType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9223372036854775807L
argument_list|,
name|kvData
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/hdds/current/aed-fg4-hji-jkl/containerDir0/1"
argument_list|,
name|kvData
operator|.
name|getChunksPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/hdds/current/aed-fg4-hji-jkl/containerDir0/1"
argument_list|,
name|kvData
operator|.
name|getMetadataPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvData
operator|.
name|getLayOutVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|kvData
operator|.
name|getMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"testCheckBackWardCompatabilityOfContainerFile failed"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test to verify {@link ContainerUtils#verifyChecksum(ContainerData)}.    */
annotation|@
name|Test
DECL|method|testChecksumInContainerFile ()
specifier|public
name|void
name|testChecksumInContainerFile
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|containerID
init|=
name|testContainerID
operator|++
decl_stmt|;
name|File
name|containerFile
init|=
name|createContainerFile
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
comment|// Read from .container file, and verify data.
name|KeyValueContainerData
name|kvData
init|=
operator|(
name|KeyValueContainerData
operator|)
name|ContainerDataYaml
operator|.
name|readContainerFile
argument_list|(
name|containerFile
argument_list|)
decl_stmt|;
name|ContainerUtils
operator|.
name|verifyChecksum
argument_list|(
name|kvData
argument_list|)
expr_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test to verify incorrect checksum is detected.    */
annotation|@
name|Test
DECL|method|testIncorrectChecksum ()
specifier|public
name|void
name|testIncorrectChecksum
parameter_list|()
block|{
try|try
block|{
name|String
name|containerFile
init|=
literal|"incorrect.checksum.container"
decl_stmt|;
comment|//Get file from resources folder
name|ClassLoader
name|classLoader
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|classLoader
operator|.
name|getResource
argument_list|(
name|containerFile
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|KeyValueContainerData
name|kvData
init|=
operator|(
name|KeyValueContainerData
operator|)
name|ContainerDataYaml
operator|.
name|readContainerFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|ContainerUtils
operator|.
name|verifyChecksum
argument_list|(
name|kvData
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testIncorrectChecksum failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Container checksum error for "
operator|+
literal|"ContainerID:"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

