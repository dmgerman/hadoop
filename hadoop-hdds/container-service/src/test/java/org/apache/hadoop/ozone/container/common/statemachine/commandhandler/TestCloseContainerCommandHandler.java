begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.statemachine.commandhandler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|commandhandler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|DatanodeStateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|StateContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|server
operator|.
name|XceiverServerSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
operator|.
name|ContainerController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
operator|.
name|OzoneContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|CloseContainerCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|GB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test cases to verify CloseContainerCommandHandler in datanode.  */
end_comment

begin_class
DECL|class|TestCloseContainerCommandHandler
specifier|public
class|class
name|TestCloseContainerCommandHandler
block|{
DECL|field|CONTAINER_ID
specifier|private
specifier|static
specifier|final
name|long
name|CONTAINER_ID
init|=
literal|123L
decl_stmt|;
DECL|field|ozoneContainer
specifier|private
name|OzoneContainer
name|ozoneContainer
decl_stmt|;
DECL|field|context
specifier|private
name|StateContext
name|context
decl_stmt|;
DECL|field|writeChannel
specifier|private
name|XceiverServerSpi
name|writeChannel
decl_stmt|;
DECL|field|container
specifier|private
name|Container
name|container
decl_stmt|;
DECL|field|containerHandler
specifier|private
name|Handler
name|containerHandler
decl_stmt|;
DECL|field|pipelineID
specifier|private
name|PipelineID
name|pipelineID
decl_stmt|;
DECL|field|nonExistentPipelineID
specifier|private
name|PipelineID
name|nonExistentPipelineID
init|=
name|PipelineID
operator|.
name|randomId
argument_list|()
decl_stmt|;
DECL|field|subject
specifier|private
name|CloseContainerCommandHandler
name|subject
init|=
operator|new
name|CloseContainerCommandHandler
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|=
name|mock
argument_list|(
name|StateContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|DatanodeStateMachine
name|dnStateMachine
init|=
name|mock
argument_list|(
name|DatanodeStateMachine
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|dnStateMachine
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|randomDatanodeDetails
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dnStateMachine
argument_list|)
expr_stmt|;
name|pipelineID
operator|=
name|PipelineID
operator|.
name|randomId
argument_list|()
expr_stmt|;
name|KeyValueContainerData
name|data
init|=
operator|new
name|KeyValueContainerData
argument_list|(
name|CONTAINER_ID
argument_list|,
name|GB
argument_list|,
name|pipelineID
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|container
operator|=
operator|new
name|KeyValueContainer
argument_list|(
name|data
argument_list|,
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerSet
name|containerSet
init|=
operator|new
name|ContainerSet
argument_list|()
decl_stmt|;
name|containerSet
operator|.
name|addContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|containerHandler
operator|=
name|mock
argument_list|(
name|Handler
operator|.
name|class
argument_list|)
expr_stmt|;
name|ContainerController
name|controller
init|=
operator|new
name|ContainerController
argument_list|(
name|containerSet
argument_list|,
name|singletonMap
argument_list|(
name|ContainerProtos
operator|.
name|ContainerType
operator|.
name|KeyValueContainer
argument_list|,
name|containerHandler
argument_list|)
argument_list|)
decl_stmt|;
name|writeChannel
operator|=
name|mock
argument_list|(
name|XceiverServerSpi
operator|.
name|class
argument_list|)
expr_stmt|;
name|ozoneContainer
operator|=
name|mock
argument_list|(
name|OzoneContainer
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ozoneContainer
operator|.
name|getController
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|controller
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ozoneContainer
operator|.
name|getContainerSet
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerSet
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ozoneContainer
operator|.
name|getWriteChannel
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|writeChannel
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|writeChannel
operator|.
name|isExist
argument_list|(
name|pipelineID
operator|.
name|getProtobuf
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|writeChannel
operator|.
name|isExist
argument_list|(
name|nonExistentPipelineID
operator|.
name|getProtobuf
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|closeContainerWithPipeline ()
specifier|public
name|void
name|closeContainerWithPipeline
parameter_list|()
throws|throws
name|Exception
block|{
comment|// close a container that's associated with an existing pipeline
name|subject
operator|.
name|handle
argument_list|(
name|closeWithKnownPipeline
argument_list|()
argument_list|,
name|ozoneContainer
argument_list|,
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|containerHandler
argument_list|)
operator|.
name|markContainerForClose
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|writeChannel
argument_list|)
operator|.
name|submitRequest
argument_list|(
name|any
argument_list|()
argument_list|,
name|eq
argument_list|(
name|pipelineID
operator|.
name|getProtobuf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|containerHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|quasiCloseContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|closeContainerWithoutPipeline ()
specifier|public
name|void
name|closeContainerWithoutPipeline
parameter_list|()
throws|throws
name|IOException
block|{
comment|// close a container that's NOT associated with an open pipeline
name|subject
operator|.
name|handle
argument_list|(
name|closeWithUnknownPipeline
argument_list|()
argument_list|,
name|ozoneContainer
argument_list|,
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|containerHandler
argument_list|)
operator|.
name|markContainerForClose
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|writeChannel
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|submitRequest
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
comment|// Container in CLOSING state is moved to UNHEALTHY if pipeline does not
comment|// exist. Container should not exist in CLOSING state without a pipeline.
name|verify
argument_list|(
name|containerHandler
argument_list|)
operator|.
name|markContainerUnhealthy
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forceCloseQuasiClosedContainer ()
specifier|public
name|void
name|forceCloseQuasiClosedContainer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// force-close a container that's already quasi closed
name|container
operator|.
name|getContainerData
argument_list|()
operator|.
name|setState
argument_list|(
name|ContainerProtos
operator|.
name|ContainerDataProto
operator|.
name|State
operator|.
name|QUASI_CLOSED
argument_list|)
expr_stmt|;
name|subject
operator|.
name|handle
argument_list|(
name|forceCloseWithoutPipeline
argument_list|()
argument_list|,
name|ozoneContainer
argument_list|,
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|writeChannel
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|submitRequest
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|containerHandler
argument_list|)
operator|.
name|closeContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forceCloseOpenContainer ()
specifier|public
name|void
name|forceCloseOpenContainer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// force-close a container that's NOT associated with an open pipeline
name|subject
operator|.
name|handle
argument_list|(
name|forceCloseWithoutPipeline
argument_list|()
argument_list|,
name|ozoneContainer
argument_list|,
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|writeChannel
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|submitRequest
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
comment|// Container in CLOSING state is moved to UNHEALTHY if pipeline does not
comment|// exist. Container should not exist in CLOSING state without a pipeline.
name|verify
argument_list|(
name|containerHandler
argument_list|)
operator|.
name|markContainerUnhealthy
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forceCloseOpenContainerWithPipeline ()
specifier|public
name|void
name|forceCloseOpenContainerWithPipeline
parameter_list|()
throws|throws
name|Exception
block|{
comment|// force-close a container that's associated with an existing pipeline
name|subject
operator|.
name|handle
argument_list|(
name|forceCloseWithPipeline
argument_list|()
argument_list|,
name|ozoneContainer
argument_list|,
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|containerHandler
argument_list|)
operator|.
name|markContainerForClose
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|writeChannel
argument_list|)
operator|.
name|submitRequest
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|containerHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|quasiCloseContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|containerHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|closeContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|closeAlreadyClosedContainer ()
specifier|public
name|void
name|closeAlreadyClosedContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|getContainerData
argument_list|()
operator|.
name|setState
argument_list|(
name|ContainerProtos
operator|.
name|ContainerDataProto
operator|.
name|State
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
comment|// Since the container is already closed, these commands should do nothing,
comment|// neither should they fail
name|subject
operator|.
name|handle
argument_list|(
name|closeWithUnknownPipeline
argument_list|()
argument_list|,
name|ozoneContainer
argument_list|,
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|subject
operator|.
name|handle
argument_list|(
name|closeWithKnownPipeline
argument_list|()
argument_list|,
name|ozoneContainer
argument_list|,
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|containerHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|markContainerForClose
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|containerHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|quasiCloseContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|containerHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|closeContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|writeChannel
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|submitRequest
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|closeWithKnownPipeline ()
specifier|private
name|CloseContainerCommand
name|closeWithKnownPipeline
parameter_list|()
block|{
return|return
operator|new
name|CloseContainerCommand
argument_list|(
name|CONTAINER_ID
argument_list|,
name|pipelineID
argument_list|)
return|;
block|}
DECL|method|closeWithUnknownPipeline ()
specifier|private
name|CloseContainerCommand
name|closeWithUnknownPipeline
parameter_list|()
block|{
return|return
operator|new
name|CloseContainerCommand
argument_list|(
name|CONTAINER_ID
argument_list|,
name|nonExistentPipelineID
argument_list|)
return|;
block|}
DECL|method|forceCloseWithPipeline ()
specifier|private
name|CloseContainerCommand
name|forceCloseWithPipeline
parameter_list|()
block|{
return|return
operator|new
name|CloseContainerCommand
argument_list|(
name|CONTAINER_ID
argument_list|,
name|pipelineID
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|forceCloseWithoutPipeline ()
specifier|private
name|CloseContainerCommand
name|forceCloseWithoutPipeline
parameter_list|()
block|{
return|return
operator|new
name|CloseContainerCommand
argument_list|(
name|CONTAINER_ID
argument_list|,
name|nonExistentPipelineID
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Creates a random DatanodeDetails.    * @return DatanodeDetails    */
DECL|method|randomDatanodeDetails ()
specifier|private
specifier|static
name|DatanodeDetails
name|randomDatanodeDetails
parameter_list|()
block|{
name|String
name|ipAddress
init|=
literal|"127.0.0.1"
decl_stmt|;
name|DatanodeDetails
operator|.
name|Port
name|containerPort
init|=
name|DatanodeDetails
operator|.
name|newPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|STANDALONE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DatanodeDetails
operator|.
name|Port
name|ratisPort
init|=
name|DatanodeDetails
operator|.
name|newPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|RATIS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DatanodeDetails
operator|.
name|Port
name|restPort
init|=
name|DatanodeDetails
operator|.
name|newPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|REST
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DatanodeDetails
operator|.
name|Builder
name|builder
init|=
name|DatanodeDetails
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setUuid
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setHostName
argument_list|(
literal|"localhost"
argument_list|)
operator|.
name|setIpAddress
argument_list|(
name|ipAddress
argument_list|)
operator|.
name|addPort
argument_list|(
name|containerPort
argument_list|)
operator|.
name|addPort
argument_list|(
name|ratisPort
argument_list|)
operator|.
name|addPort
argument_list|(
name|restPort
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

