begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.report
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|report
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|StateContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_comment
comment|/**  * Test cases to test {@link ReportManager}.  */
end_comment

begin_class
DECL|class|TestReportManager
specifier|public
class|class
name|TestReportManager
block|{
annotation|@
name|Test
DECL|method|testReportManagerInit ()
specifier|public
name|void
name|testReportManagerInit
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|StateContext
name|dummyContext
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|StateContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ReportPublisher
name|dummyPublisher
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ReportPublisher
operator|.
name|class
argument_list|)
decl_stmt|;
name|ReportManager
operator|.
name|Builder
name|builder
init|=
name|ReportManager
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setStateContext
argument_list|(
name|dummyContext
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addPublisher
argument_list|(
name|dummyPublisher
argument_list|)
expr_stmt|;
name|ReportManager
name|reportManager
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|reportManager
operator|.
name|init
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|dummyPublisher
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|init
argument_list|(
name|eq
argument_list|(
name|dummyContext
argument_list|)
argument_list|,
name|any
argument_list|(
name|ScheduledExecutorService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

