begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|StorageContainerDatanodeProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|StorageContainerDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|StorageContainerDatanodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|StorageContainerDatanodeProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|HDDS_DATANODE_DIR_KEY
import|;
end_import

begin_comment
comment|/**  * Test Endpoint class.  */
end_comment

begin_class
DECL|class|SCMTestUtils
specifier|public
specifier|final
class|class
name|SCMTestUtils
block|{
comment|/**    * Never constructed.    */
DECL|method|SCMTestUtils ()
specifier|private
name|SCMTestUtils
parameter_list|()
block|{   }
comment|/**    * Starts an RPC server, if configured.    *    * @param conf configuration    * @param addr configured address of RPC server    * @param protocol RPC protocol provided by RPC server    * @param instance RPC protocol implementation instance    * @param handlerCount RPC server handler count    * @return RPC server    * @throws IOException if there is an I/O error while creating RPC server    */
DECL|method|startRpcServer (Configuration conf, InetSocketAddress addr, Class<?> protocol, BlockingService instance, int handlerCount)
specifier|private
specifier|static
name|RPC
operator|.
name|Server
name|startRpcServer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|BlockingService
name|instance
parameter_list|,
name|int
name|handlerCount
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|Server
name|rpcServer
init|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|protocol
argument_list|)
operator|.
name|setInstance
argument_list|(
name|instance
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|)
operator|.
name|setPort
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
name|handlerCount
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
operator|.
name|setSecretManager
argument_list|(
literal|null
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|protocol
argument_list|,
name|instance
argument_list|,
name|rpcServer
argument_list|)
expr_stmt|;
return|return
name|rpcServer
return|;
block|}
comment|/**    * Start Datanode RPC server.    */
DECL|method|startScmRpcServer (Configuration configuration, StorageContainerDatanodeProtocol server, InetSocketAddress rpcServerAddresss, int handlerCount)
specifier|public
specifier|static
name|RPC
operator|.
name|Server
name|startScmRpcServer
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|StorageContainerDatanodeProtocol
name|server
parameter_list|,
name|InetSocketAddress
name|rpcServerAddresss
parameter_list|,
name|int
name|handlerCount
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|configuration
argument_list|,
name|StorageContainerDatanodeProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|BlockingService
name|scmDatanodeService
init|=
name|StorageContainerDatanodeProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
operator|new
name|StorageContainerDatanodeProtocolServerSideTranslatorPB
argument_list|(
name|server
argument_list|)
argument_list|)
decl_stmt|;
name|RPC
operator|.
name|Server
name|scmServer
init|=
name|startRpcServer
argument_list|(
name|configuration
argument_list|,
name|rpcServerAddresss
argument_list|,
name|StorageContainerDatanodeProtocolPB
operator|.
name|class
argument_list|,
name|scmDatanodeService
argument_list|,
name|handlerCount
argument_list|)
decl_stmt|;
name|scmServer
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|scmServer
return|;
block|}
DECL|method|getReuseableAddress ()
specifier|public
specifier|static
name|InetSocketAddress
name|getReuseableAddress
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|ServerSocket
name|socket
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
init|)
block|{
name|socket
operator|.
name|setReuseAddress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|socket
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
name|String
name|addr
init|=
name|InetAddress
operator|.
name|getLoopbackAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
decl_stmt|;
return|return
operator|new
name|InetSocketAddress
argument_list|(
name|addr
argument_list|,
name|port
argument_list|)
return|;
block|}
block|}
DECL|method|getConf ()
specifier|public
specifier|static
name|OzoneConfiguration
name|getConf
parameter_list|()
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HDDS_DATANODE_DIR_KEY
argument_list|,
name|GenericTestUtils
operator|.
name|getRandomizedTempPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|GenericTestUtils
operator|.
name|getRandomizedTempPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|getOzoneConf ()
specifier|public
specifier|static
name|OzoneConfiguration
name|getOzoneConf
parameter_list|()
block|{
return|return
operator|new
name|OzoneConfiguration
argument_list|()
return|;
block|}
block|}
end_class

end_unit

