begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.keyvalue
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerPacker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|CompressorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|CompressorInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|CompressorStreamFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * Test the tar/untar for a given container.  */
end_comment

begin_class
DECL|class|TestTarContainerPacker
specifier|public
class|class
name|TestTarContainerPacker
block|{
DECL|field|TEST_DB_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DB_FILE_NAME
init|=
literal|"test1"
decl_stmt|;
DECL|field|TEST_DB_FILE_CONTENT
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DB_FILE_CONTENT
init|=
literal|"test1"
decl_stmt|;
DECL|field|TEST_CHUNK_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CHUNK_FILE_NAME
init|=
literal|"chunk1"
decl_stmt|;
DECL|field|TEST_CHUNK_FILE_CONTENT
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CHUNK_FILE_CONTENT
init|=
literal|"This is a chunk"
decl_stmt|;
DECL|field|TEST_DESCRIPTOR_FILE_CONTENT
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DESCRIPTOR_FILE_CONTENT
init|=
literal|"descriptor"
decl_stmt|;
DECL|field|packer
specifier|private
name|ContainerPacker
name|packer
init|=
operator|new
name|TarContainerPacker
argument_list|()
decl_stmt|;
DECL|field|SOURCE_CONTAINER_ROOT
specifier|private
specifier|static
specifier|final
name|Path
name|SOURCE_CONTAINER_ROOT
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"target/test/data/packer-source-dir"
argument_list|)
decl_stmt|;
DECL|field|DEST_CONTAINER_ROOT
specifier|private
specifier|static
specifier|final
name|Path
name|DEST_CONTAINER_ROOT
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"target/test/data/packer-dest-dir"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|initDir
argument_list|(
name|SOURCE_CONTAINER_ROOT
argument_list|)
expr_stmt|;
name|initDir
argument_list|(
name|DEST_CONTAINER_ROOT
argument_list|)
expr_stmt|;
block|}
DECL|method|initDir (Path path)
specifier|private
specifier|static
name|void
name|initDir
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|path
operator|.
name|toFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|path
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|path
operator|.
name|toFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
DECL|method|createContainer (long id, Path dir, OzoneConfiguration conf)
specifier|private
name|KeyValueContainerData
name|createContainer
parameter_list|(
name|long
name|id
parameter_list|,
name|Path
name|dir
parameter_list|,
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|containerDir
init|=
name|dir
operator|.
name|resolve
argument_list|(
literal|"container"
operator|+
name|id
argument_list|)
decl_stmt|;
name|Path
name|dbDir
init|=
name|containerDir
operator|.
name|resolve
argument_list|(
literal|"db"
argument_list|)
decl_stmt|;
name|Path
name|dataDir
init|=
name|containerDir
operator|.
name|resolve
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|dbDir
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|KeyValueContainerData
name|containerData
init|=
operator|new
name|KeyValueContainerData
argument_list|(
name|id
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|containerData
operator|.
name|setChunksPath
argument_list|(
name|dataDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|containerData
operator|.
name|setMetadataPath
argument_list|(
name|dbDir
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|containerData
operator|.
name|setDbFile
argument_list|(
name|dbDir
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|containerData
return|;
block|}
annotation|@
name|Test
DECL|method|pack ()
specifier|public
name|void
name|pack
parameter_list|()
throws|throws
name|IOException
throws|,
name|CompressorException
block|{
comment|//GIVEN
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|KeyValueContainerData
name|sourceContainerData
init|=
name|createContainer
argument_list|(
literal|1L
argument_list|,
name|SOURCE_CONTAINER_ROOT
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyValueContainer
name|sourceContainer
init|=
operator|new
name|KeyValueContainer
argument_list|(
name|sourceContainerData
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|//sample db file in the metadata directory
try|try
init|(
name|FileWriter
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
name|sourceContainerData
operator|.
name|getDbFile
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|TEST_DB_FILE_NAME
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|write
argument_list|(
name|TEST_DB_FILE_CONTENT
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
comment|//sample chunk file in the chunk directory
try|try
init|(
name|FileWriter
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|sourceContainerData
operator|.
name|getChunksPath
argument_list|()
argument_list|)
operator|.
name|resolve
argument_list|(
name|TEST_CHUNK_FILE_NAME
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|write
argument_list|(
name|TEST_CHUNK_FILE_CONTENT
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
comment|//sample container descriptor file
try|try
init|(
name|FileWriter
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
name|sourceContainer
operator|.
name|getContainerFile
argument_list|()
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|write
argument_list|(
name|TEST_DESCRIPTOR_FILE_CONTENT
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
name|Path
name|targetFile
init|=
name|SOURCE_CONTAINER_ROOT
operator|.
name|getParent
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"container.tar.gz"
argument_list|)
decl_stmt|;
comment|//WHEN: pack it
try|try
init|(
name|FileOutputStream
name|output
init|=
operator|new
name|FileOutputStream
argument_list|(
name|targetFile
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|packer
operator|.
name|pack
argument_list|(
name|sourceContainer
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
comment|//THEN: check the result
try|try
init|(
name|FileInputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|targetFile
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|CompressorInputStream
name|uncompressed
init|=
operator|new
name|CompressorStreamFactory
argument_list|()
operator|.
name|createCompressorInputStream
argument_list|(
name|CompressorStreamFactory
operator|.
name|GZIP
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|TarArchiveInputStream
name|tarStream
init|=
operator|new
name|TarArchiveInputStream
argument_list|(
name|uncompressed
argument_list|)
decl_stmt|;
name|TarArchiveEntry
name|entry
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TarArchiveEntry
argument_list|>
name|entries
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|tarStream
operator|.
name|getNextTarEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|entries
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|entries
operator|.
name|containsKey
argument_list|(
literal|"container.yaml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//read the container descriptor only
try|try
init|(
name|FileInputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|targetFile
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|String
name|containerYaml
init|=
operator|new
name|String
argument_list|(
name|packer
operator|.
name|unpackContainerDescriptor
argument_list|(
name|input
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TEST_DESCRIPTOR_FILE_CONTENT
argument_list|,
name|containerYaml
argument_list|)
expr_stmt|;
block|}
name|KeyValueContainerData
name|destinationContainerData
init|=
name|createContainer
argument_list|(
literal|2L
argument_list|,
name|DEST_CONTAINER_ROOT
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyValueContainer
name|destinationContainer
init|=
operator|new
name|KeyValueContainer
argument_list|(
name|destinationContainerData
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|descriptor
init|=
literal|""
decl_stmt|;
comment|//unpackContainerData
try|try
init|(
name|FileInputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|targetFile
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|descriptor
operator|=
operator|new
name|String
argument_list|(
name|packer
operator|.
name|unpackContainerData
argument_list|(
name|destinationContainer
argument_list|,
name|input
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertExampleMetadataDbIsGood
argument_list|(
name|destinationContainerData
operator|.
name|getDbFile
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertExampleChunkFileIsGood
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|destinationContainerData
operator|.
name|getChunksPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Descriptor file should not been exctarcted by the "
operator|+
literal|"unpackContainerData Call"
argument_list|,
name|destinationContainer
operator|.
name|getContainerFile
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TEST_DESCRIPTOR_FILE_CONTENT
argument_list|,
name|descriptor
argument_list|)
expr_stmt|;
block|}
DECL|method|assertExampleMetadataDbIsGood (Path dbPath)
specifier|private
name|void
name|assertExampleMetadataDbIsGood
parameter_list|(
name|Path
name|dbPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dbFile
init|=
name|dbPath
operator|.
name|resolve
argument_list|(
name|TEST_DB_FILE_NAME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"example DB file is missing after pack/unpackContainerData: "
operator|+
name|dbFile
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|dbFile
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|FileInputStream
name|testFile
init|=
operator|new
name|FileInputStream
argument_list|(
name|dbFile
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|IOUtils
operator|.
name|readLines
argument_list|(
name|testFile
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|strings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TEST_DB_FILE_CONTENT
argument_list|,
name|strings
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertExampleChunkFileIsGood (Path chunkDirPath)
specifier|private
name|void
name|assertExampleChunkFileIsGood
parameter_list|(
name|Path
name|chunkDirPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|chunkFile
init|=
name|chunkDirPath
operator|.
name|resolve
argument_list|(
name|TEST_CHUNK_FILE_NAME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"example chunk file is missing after pack/unpackContainerData: "
operator|+
name|chunkFile
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|chunkFile
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|FileInputStream
name|testFile
init|=
operator|new
name|FileInputStream
argument_list|(
name|chunkFile
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|IOUtils
operator|.
name|readLines
argument_list|(
name|testFile
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|strings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TEST_CHUNK_FILE_CONTENT
argument_list|,
name|strings
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

