begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|utils
operator|.
name|ContainerCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|utils
operator|.
name|ReferenceCountedDB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_comment
comment|/**  * Test ContainerCache with evictions.  */
end_comment

begin_class
DECL|class|TestContainerCache
specifier|public
class|class
name|TestContainerCache
block|{
DECL|field|testRoot
specifier|private
specifier|static
name|String
name|testRoot
init|=
operator|new
name|FileSystemTestHelper
argument_list|()
operator|.
name|getTestRootDir
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|method|createContainerDB (OzoneConfiguration conf, File dbFile)
specifier|private
name|void
name|createContainerDB
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|File
name|dbFile
parameter_list|)
throws|throws
name|Exception
block|{
name|MetadataStore
name|store
init|=
name|MetadataStoreBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setCreateIfMissing
argument_list|(
literal|true
argument_list|)
operator|.
name|setDbFile
argument_list|(
name|dbFile
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// we close since the SCM pre-creates containers.
comment|// we will open and put Db handle into a cache when keys are being created
comment|// in a container.
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerCacheEviction ()
specifier|public
name|void
name|testContainerCacheEviction
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|root
init|=
operator|new
name|File
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
name|root
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CONTAINER_CACHE_SIZE
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ContainerCache
name|cache
init|=
name|ContainerCache
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|File
name|containerDir1
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"cont1"
argument_list|)
decl_stmt|;
name|File
name|containerDir2
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"cont2"
argument_list|)
decl_stmt|;
name|File
name|containerDir3
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"cont3"
argument_list|)
decl_stmt|;
name|File
name|containerDir4
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"cont4"
argument_list|)
decl_stmt|;
name|createContainerDB
argument_list|(
name|conf
argument_list|,
name|containerDir1
argument_list|)
expr_stmt|;
name|createContainerDB
argument_list|(
name|conf
argument_list|,
name|containerDir2
argument_list|)
expr_stmt|;
name|createContainerDB
argument_list|(
name|conf
argument_list|,
name|containerDir3
argument_list|)
expr_stmt|;
name|createContainerDB
argument_list|(
name|conf
argument_list|,
name|containerDir4
argument_list|)
expr_stmt|;
comment|// Get 2 references out of the same db and verify the objects are same.
name|ReferenceCountedDB
name|db1
init|=
name|cache
operator|.
name|getDB
argument_list|(
literal|1
argument_list|,
literal|"RocksDB"
argument_list|,
name|containerDir1
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|db1
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|ReferenceCountedDB
name|db2
init|=
name|cache
operator|.
name|getDB
argument_list|(
literal|1
argument_list|,
literal|"RocksDB"
argument_list|,
name|containerDir1
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db2
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|db1
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db1
argument_list|,
name|db2
argument_list|)
expr_stmt|;
comment|// add one more references to ContainerCache.
name|ReferenceCountedDB
name|db3
init|=
name|cache
operator|.
name|getDB
argument_list|(
literal|2
argument_list|,
literal|"RocksDB"
argument_list|,
name|containerDir2
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|db3
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// and close the reference
name|db3
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|db3
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cache
operator|.
name|isFull
argument_list|()
argument_list|)
expr_stmt|;
comment|// add one more reference to ContainerCache and verify that it will not
comment|// evict the least recent entry as it has reference.
name|ReferenceCountedDB
name|db4
init|=
name|cache
operator|.
name|getDB
argument_list|(
literal|3
argument_list|,
literal|"RocksDB"
argument_list|,
name|containerDir3
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|db4
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
name|containerDir1
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
name|containerDir2
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now close both the references for container1
name|db1
operator|.
name|close
argument_list|()
expr_stmt|;
name|db2
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|db1
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|db2
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// The reference count for container1 is 0 but it is not evicted.
name|ReferenceCountedDB
name|db5
init|=
name|cache
operator|.
name|getDB
argument_list|(
literal|1
argument_list|,
literal|"RocksDB"
argument_list|,
name|containerDir1
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|db5
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db1
argument_list|,
name|db5
argument_list|)
expr_stmt|;
name|db5
operator|.
name|close
argument_list|()
expr_stmt|;
name|db4
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Decrementing reference count below zero should fail.
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|db5
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

