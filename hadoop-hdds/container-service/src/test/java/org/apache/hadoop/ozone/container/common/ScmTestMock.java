begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|CommandStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|DatanodeDetailsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMHeartbeatRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerBlocksDeletionACKProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerBlocksDeletionACKResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMHeartbeatResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|NodeReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|StorageReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|StorageContainerDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|VersionResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * SCM RPC mock class.  */
end_comment

begin_class
DECL|class|ScmTestMock
specifier|public
class|class
name|ScmTestMock
implements|implements
name|StorageContainerDatanodeProtocol
block|{
DECL|field|rpcResponseDelay
specifier|private
name|int
name|rpcResponseDelay
decl_stmt|;
DECL|field|heartbeatCount
specifier|private
name|AtomicInteger
name|heartbeatCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|rpcCount
specifier|private
name|AtomicInteger
name|rpcCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|containerReportsCount
specifier|private
name|AtomicInteger
name|containerReportsCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|clusterId
specifier|private
name|String
name|clusterId
decl_stmt|;
DECL|field|scmId
specifier|private
name|String
name|scmId
decl_stmt|;
DECL|method|ScmTestMock ()
specifier|public
name|ScmTestMock
parameter_list|()
block|{
name|clusterId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|scmId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// Map of datanode to containers
DECL|field|nodeContainers
specifier|private
name|Map
argument_list|<
name|DatanodeDetails
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ContainerInfo
argument_list|>
argument_list|>
name|nodeContainers
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
DECL|field|nodeReports
specifier|private
name|Map
argument_list|<
name|DatanodeDetails
argument_list|,
name|NodeReportProto
argument_list|>
name|nodeReports
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|commandStatusReport
specifier|private
name|AtomicInteger
name|commandStatusReport
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|cmdStatusList
specifier|private
name|List
argument_list|<
name|CommandStatus
argument_list|>
name|cmdStatusList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|scmCommandRequests
specifier|private
name|List
argument_list|<
name|SCMCommandProto
argument_list|>
name|scmCommandRequests
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Returns the number of heartbeats made to this class.    *    * @return int    */
DECL|method|getHeartbeatCount ()
specifier|public
name|int
name|getHeartbeatCount
parameter_list|()
block|{
return|return
name|heartbeatCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Returns the number of RPC calls made to this mock class instance.    *    * @return - Number of RPC calls serviced by this class.    */
DECL|method|getRpcCount ()
specifier|public
name|int
name|getRpcCount
parameter_list|()
block|{
return|return
name|rpcCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Gets the RPC response delay.    *    * @return delay in milliseconds.    */
DECL|method|getRpcResponseDelay ()
specifier|public
name|int
name|getRpcResponseDelay
parameter_list|()
block|{
return|return
name|rpcResponseDelay
return|;
block|}
comment|/**    * Sets the RPC response delay.    *    * @param rpcResponseDelay - delay in milliseconds.    */
DECL|method|setRpcResponseDelay (int rpcResponseDelay)
specifier|public
name|void
name|setRpcResponseDelay
parameter_list|(
name|int
name|rpcResponseDelay
parameter_list|)
block|{
name|this
operator|.
name|rpcResponseDelay
operator|=
name|rpcResponseDelay
expr_stmt|;
block|}
comment|/**    * Returns the number of container reports server has seen.    * @return int    */
DECL|method|getContainerReportsCount ()
specifier|public
name|int
name|getContainerReportsCount
parameter_list|()
block|{
return|return
name|containerReportsCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Returns the number of containers that have been reported so far.    * @return - count of reported containers.    */
DECL|method|getContainerCount ()
specifier|public
name|long
name|getContainerCount
parameter_list|()
block|{
return|return
name|nodeContainers
operator|.
name|values
argument_list|()
operator|.
name|parallelStream
argument_list|()
operator|.
name|mapToLong
argument_list|(
parameter_list|(
name|containerMap
parameter_list|)
lambda|->
block|{
return|return
name|containerMap
operator|.
name|size
argument_list|()
return|;
block|}
argument_list|)
operator|.
name|sum
argument_list|()
return|;
block|}
comment|/**    * Get the number keys reported from container reports.    * @return - number of keys reported.    */
DECL|method|getKeyCount ()
specifier|public
name|long
name|getKeyCount
parameter_list|()
block|{
return|return
name|nodeContainers
operator|.
name|values
argument_list|()
operator|.
name|parallelStream
argument_list|()
operator|.
name|mapToLong
argument_list|(
parameter_list|(
name|containerMap
parameter_list|)
lambda|->
block|{
return|return
name|containerMap
operator|.
name|values
argument_list|()
operator|.
name|parallelStream
argument_list|()
operator|.
name|mapToLong
argument_list|(
parameter_list|(
name|container
parameter_list|)
lambda|->
block|{
return|return
name|container
operator|.
name|getKeyCount
argument_list|()
return|;
block|}
argument_list|)
operator|.
name|sum
argument_list|()
return|;
block|}
argument_list|)
operator|.
name|sum
argument_list|()
return|;
block|}
comment|/**    * Get the number of bytes used from container reports.    * @return - number of bytes used.    */
DECL|method|getBytesUsed ()
specifier|public
name|long
name|getBytesUsed
parameter_list|()
block|{
return|return
name|nodeContainers
operator|.
name|values
argument_list|()
operator|.
name|parallelStream
argument_list|()
operator|.
name|mapToLong
argument_list|(
parameter_list|(
name|containerMap
parameter_list|)
lambda|->
block|{
return|return
name|containerMap
operator|.
name|values
argument_list|()
operator|.
name|parallelStream
argument_list|()
operator|.
name|mapToLong
argument_list|(
parameter_list|(
name|container
parameter_list|)
lambda|->
block|{
return|return
name|container
operator|.
name|getUsed
argument_list|()
return|;
block|}
argument_list|)
operator|.
name|sum
argument_list|()
return|;
block|}
argument_list|)
operator|.
name|sum
argument_list|()
return|;
block|}
comment|/**    * Returns SCM version.    *    * @return Version info.    */
annotation|@
name|Override
specifier|public
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMVersionResponseProto
DECL|method|getVersion (StorageContainerDatanodeProtocolProtos .SCMVersionRequestProto unused)
name|getVersion
parameter_list|(
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMVersionRequestProto
name|unused
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|sleepIfNeeded
argument_list|()
expr_stmt|;
name|VersionInfo
name|versionInfo
init|=
name|VersionInfo
operator|.
name|getLatestVersion
argument_list|()
decl_stmt|;
return|return
name|VersionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVersion
argument_list|(
name|versionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|addValue
argument_list|(
name|VersionInfo
operator|.
name|DESCRIPTION_KEY
argument_list|,
name|versionInfo
operator|.
name|getDescription
argument_list|()
argument_list|)
operator|.
name|addValue
argument_list|(
name|OzoneConsts
operator|.
name|SCM_ID
argument_list|,
name|scmId
argument_list|)
operator|.
name|addValue
argument_list|(
name|OzoneConsts
operator|.
name|CLUSTER_ID
argument_list|,
name|clusterId
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|getProtobufMessage
argument_list|()
return|;
block|}
DECL|method|sleepIfNeeded ()
specifier|private
name|void
name|sleepIfNeeded
parameter_list|()
block|{
if|if
condition|(
name|getRpcResponseDelay
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|getRpcResponseDelay
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// Just ignore this exception.
block|}
block|}
block|}
comment|/**    * Used by data node to send a Heartbeat.    *    * @param heartbeat - node heartbeat.    * @return - SCMHeartbeatResponseProto    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMHeartbeatResponseProto
DECL|method|sendHeartbeat (SCMHeartbeatRequestProto heartbeat)
name|sendHeartbeat
parameter_list|(
name|SCMHeartbeatRequestProto
name|heartbeat
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|heartbeatCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|heartbeat
operator|.
name|hasCommandStatusReport
argument_list|()
condition|)
block|{
name|cmdStatusList
operator|.
name|addAll
argument_list|(
name|heartbeat
operator|.
name|getCommandStatusReport
argument_list|()
operator|.
name|getCmdStatusList
argument_list|()
argument_list|)
expr_stmt|;
name|commandStatusReport
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|sleepIfNeeded
argument_list|()
expr_stmt|;
return|return
name|SCMHeartbeatResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllCommands
argument_list|(
name|scmCommandRequests
argument_list|)
operator|.
name|setDatanodeUUID
argument_list|(
name|heartbeat
operator|.
name|getDatanodeDetails
argument_list|()
operator|.
name|getUuid
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Register Datanode.    *    * @param datanodeDetailsProto DatanodDetailsProto.    * @return SCM Command.    */
annotation|@
name|Override
specifier|public
name|StorageContainerDatanodeProtocolProtos
DECL|method|register ( DatanodeDetailsProto datanodeDetailsProto, NodeReportProto nodeReport, StorageContainerDatanodeProtocolProtos.ContainerReportsProto containerReportsRequestProto)
operator|.
name|SCMRegisteredResponseProto
name|register
parameter_list|(
name|DatanodeDetailsProto
name|datanodeDetailsProto
parameter_list|,
name|NodeReportProto
name|nodeReport
parameter_list|,
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReportsProto
name|containerReportsRequestProto
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|updateNodeReport
argument_list|(
name|datanodeDetailsProto
argument_list|,
name|nodeReport
argument_list|)
expr_stmt|;
name|updateContainerReport
argument_list|(
name|containerReportsRequestProto
argument_list|,
name|datanodeDetailsProto
argument_list|)
expr_stmt|;
name|sleepIfNeeded
argument_list|()
expr_stmt|;
return|return
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMRegisteredResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setDatanodeUUID
argument_list|(
name|datanodeDetailsProto
operator|.
name|getUuid
argument_list|()
argument_list|)
operator|.
name|setErrorCode
argument_list|(
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMRegisteredResponseProto
operator|.
name|ErrorCode
operator|.
name|success
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Update nodeReport.    * @param datanodeDetailsProto    * @param nodeReport    */
DECL|method|updateNodeReport (DatanodeDetailsProto datanodeDetailsProto, NodeReportProto nodeReport)
specifier|public
name|void
name|updateNodeReport
parameter_list|(
name|DatanodeDetailsProto
name|datanodeDetailsProto
parameter_list|,
name|NodeReportProto
name|nodeReport
parameter_list|)
block|{
name|DatanodeDetails
name|datanode
init|=
name|DatanodeDetails
operator|.
name|getFromProtoBuf
argument_list|(
name|datanodeDetailsProto
argument_list|)
decl_stmt|;
name|NodeReportProto
operator|.
name|Builder
name|nodeReportProto
init|=
name|NodeReportProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|StorageReportProto
argument_list|>
name|storageReports
init|=
name|nodeReport
operator|.
name|getStorageReportList
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageReportProto
name|report
range|:
name|storageReports
control|)
block|{
name|nodeReportProto
operator|.
name|addStorageReport
argument_list|(
name|report
argument_list|)
expr_stmt|;
block|}
name|nodeReports
operator|.
name|put
argument_list|(
name|datanode
argument_list|,
name|nodeReportProto
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update the cotainerReport.    *    * @param reports Container report    * @param datanodeDetails DataNode Info    * @throws IOException    */
DECL|method|updateContainerReport ( StorageContainerDatanodeProtocolProtos.ContainerReportsProto reports, DatanodeDetailsProto datanodeDetails)
specifier|public
name|void
name|updateContainerReport
parameter_list|(
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReportsProto
name|reports
parameter_list|,
name|DatanodeDetailsProto
name|datanodeDetails
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|reports
argument_list|)
expr_stmt|;
name|containerReportsCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|DatanodeDetails
name|datanode
init|=
name|DatanodeDetails
operator|.
name|getFromProtoBuf
argument_list|(
name|datanodeDetails
argument_list|)
decl_stmt|;
if|if
condition|(
name|reports
operator|.
name|getReportsCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
name|containers
init|=
name|nodeContainers
operator|.
name|get
argument_list|(
name|datanode
argument_list|)
decl_stmt|;
if|if
condition|(
name|containers
operator|==
literal|null
condition|)
block|{
name|containers
operator|=
operator|new
name|LinkedHashMap
argument_list|()
expr_stmt|;
name|nodeContainers
operator|.
name|put
argument_list|(
name|datanode
argument_list|,
name|containers
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerInfo
name|report
range|:
name|reports
operator|.
name|getReportsList
argument_list|()
control|)
block|{
name|containers
operator|.
name|put
argument_list|(
name|report
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|report
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Return the number of StorageReports of a datanode.    * @param datanodeDetails    * @return count of containers of a datanode    */
DECL|method|getNodeReportsCount (DatanodeDetails datanodeDetails)
specifier|public
name|int
name|getNodeReportsCount
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|)
block|{
return|return
name|nodeReports
operator|.
name|get
argument_list|(
name|datanodeDetails
argument_list|)
operator|.
name|getStorageReportCount
argument_list|()
return|;
block|}
comment|/**    * Returns the number of containers of a datanode.    * @param datanodeDetails    * @return count of storage reports of a datanode    */
DECL|method|getContainerCountsForDatanode (DatanodeDetails datanodeDetails)
specifier|public
name|int
name|getContainerCountsForDatanode
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ContainerInfo
argument_list|>
name|cr
init|=
name|nodeContainers
operator|.
name|get
argument_list|(
name|datanodeDetails
argument_list|)
decl_stmt|;
if|if
condition|(
name|cr
operator|!=
literal|null
condition|)
block|{
return|return
name|cr
operator|.
name|size
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|sendContainerBlocksDeletionACK ( ContainerBlocksDeletionACKProto request)
specifier|public
name|ContainerBlocksDeletionACKResponseProto
name|sendContainerBlocksDeletionACK
parameter_list|(
name|ContainerBlocksDeletionACKProto
name|request
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ContainerBlocksDeletionACKResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|getDefaultInstanceForType
argument_list|()
return|;
block|}
comment|/**    * Reset the mock Scm for test to get a fresh start without rebuild MockScm.    */
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|heartbeatCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rpcCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|containerReportsCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nodeContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|getCommandStatusReportCount ()
specifier|public
name|int
name|getCommandStatusReportCount
parameter_list|()
block|{
return|return
name|commandStatusReport
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getCmdStatusList ()
specifier|public
name|List
argument_list|<
name|CommandStatus
argument_list|>
name|getCmdStatusList
parameter_list|()
block|{
return|return
name|cmdStatusList
return|;
block|}
DECL|method|getScmCommandRequests ()
specifier|public
name|List
argument_list|<
name|SCMCommandProto
argument_list|>
name|getScmCommandRequests
parameter_list|()
block|{
return|return
name|scmCommandRequests
return|;
block|}
DECL|method|clearScmCommandRequests ()
specifier|public
name|void
name|clearScmCommandRequests
parameter_list|()
block|{
name|scmCommandRequests
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|addScmCommandRequest (SCMCommandProto scmCmd)
specifier|public
name|void
name|addScmCommandRequest
parameter_list|(
name|SCMCommandProto
name|scmCmd
parameter_list|)
block|{
name|scmCommandRequests
operator|.
name|add
argument_list|(
name|scmCmd
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set scmId.    * @param id    */
DECL|method|setScmId (String id)
specifier|public
name|void
name|setScmId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|scmId
operator|=
name|id
expr_stmt|;
block|}
comment|/**    * Set scmId.    * @return scmId    */
DECL|method|getScmId ()
specifier|public
name|String
name|getScmId
parameter_list|()
block|{
return|return
name|scmId
return|;
block|}
block|}
end_class

end_unit

