begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.replication
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Test the replication supervisor.  */
end_comment

begin_class
DECL|class|TestReplicationSupervisor
specifier|public
class|class
name|TestReplicationSupervisor
block|{
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|normal ()
specifier|public
name|void
name|normal
parameter_list|()
throws|throws
name|Exception
block|{
comment|//GIVEN
name|ContainerSet
name|set
init|=
operator|new
name|ContainerSet
argument_list|()
decl_stmt|;
name|FakeReplicator
name|replicator
init|=
operator|new
name|FakeReplicator
argument_list|(
name|set
argument_list|)
decl_stmt|;
name|ReplicationSupervisor
name|supervisor
init|=
operator|new
name|ReplicationSupervisor
argument_list|(
name|set
argument_list|,
name|replicator
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodes
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|v
lambda|->
name|Mockito
operator|.
name|mock
argument_list|(
name|DatanodeDetails
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|//WHEN
name|supervisor
operator|.
name|addTask
argument_list|(
operator|new
name|ReplicationTask
argument_list|(
literal|1L
argument_list|,
name|datanodes
argument_list|)
argument_list|)
expr_stmt|;
name|supervisor
operator|.
name|addTask
argument_list|(
operator|new
name|ReplicationTask
argument_list|(
literal|1L
argument_list|,
name|datanodes
argument_list|)
argument_list|)
expr_stmt|;
name|supervisor
operator|.
name|addTask
argument_list|(
operator|new
name|ReplicationTask
argument_list|(
literal|1L
argument_list|,
name|datanodes
argument_list|)
argument_list|)
expr_stmt|;
name|supervisor
operator|.
name|addTask
argument_list|(
operator|new
name|ReplicationTask
argument_list|(
literal|2L
argument_list|,
name|datanodes
argument_list|)
argument_list|)
expr_stmt|;
name|supervisor
operator|.
name|addTask
argument_list|(
operator|new
name|ReplicationTask
argument_list|(
literal|2L
argument_list|,
name|datanodes
argument_list|)
argument_list|)
expr_stmt|;
name|supervisor
operator|.
name|addTask
argument_list|(
operator|new
name|ReplicationTask
argument_list|(
literal|3L
argument_list|,
name|datanodes
argument_list|)
argument_list|)
expr_stmt|;
comment|//THEN
name|LambdaTestUtils
operator|.
name|await
argument_list|(
literal|200_000
argument_list|,
literal|1000
argument_list|,
parameter_list|()
lambda|->
name|supervisor
operator|.
name|getInFlightReplications
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|replicator
operator|.
name|replicated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|supervisor
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|duplicateMessageAfterAWhile ()
specifier|public
name|void
name|duplicateMessageAfterAWhile
parameter_list|()
throws|throws
name|Exception
block|{
comment|//GIVEN
name|ContainerSet
name|set
init|=
operator|new
name|ContainerSet
argument_list|()
decl_stmt|;
name|FakeReplicator
name|replicator
init|=
operator|new
name|FakeReplicator
argument_list|(
name|set
argument_list|)
decl_stmt|;
name|ReplicationSupervisor
name|supervisor
init|=
operator|new
name|ReplicationSupervisor
argument_list|(
name|set
argument_list|,
name|replicator
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodes
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|v
lambda|->
name|Mockito
operator|.
name|mock
argument_list|(
name|DatanodeDetails
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|//WHEN
name|supervisor
operator|.
name|addTask
argument_list|(
operator|new
name|ReplicationTask
argument_list|(
literal|1L
argument_list|,
name|datanodes
argument_list|)
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|await
argument_list|(
literal|200_000
argument_list|,
literal|1000
argument_list|,
parameter_list|()
lambda|->
name|supervisor
operator|.
name|getInFlightReplications
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|supervisor
operator|.
name|addTask
argument_list|(
operator|new
name|ReplicationTask
argument_list|(
literal|1L
argument_list|,
name|datanodes
argument_list|)
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|await
argument_list|(
literal|200_000
argument_list|,
literal|1000
argument_list|,
parameter_list|()
lambda|->
name|supervisor
operator|.
name|getInFlightReplications
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|//THEN
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|replicator
operator|.
name|replicated
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|replicator
operator|.
name|replicated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|supervisor
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|FakeReplicator
specifier|private
class|class
name|FakeReplicator
implements|implements
name|ContainerReplicator
block|{
DECL|field|replicated
specifier|private
name|List
argument_list|<
name|ReplicationTask
argument_list|>
name|replicated
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|containerSet
specifier|private
name|ContainerSet
name|containerSet
decl_stmt|;
DECL|method|FakeReplicator (ContainerSet set)
name|FakeReplicator
parameter_list|(
name|ContainerSet
name|set
parameter_list|)
block|{
name|this
operator|.
name|containerSet
operator|=
name|set
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|replicate (ReplicationTask task)
specifier|public
name|void
name|replicate
parameter_list|(
name|ReplicationTask
name|task
parameter_list|)
block|{
name|KeyValueContainerData
name|kvcd
init|=
operator|new
name|KeyValueContainerData
argument_list|(
name|task
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|100L
argument_list|)
decl_stmt|;
name|KeyValueContainer
name|kvc
init|=
operator|new
name|KeyValueContainer
argument_list|(
name|kvcd
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
comment|//download is slow
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|replicated
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|containerSet
operator|.
name|addContainer
argument_list|(
name|kvc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

