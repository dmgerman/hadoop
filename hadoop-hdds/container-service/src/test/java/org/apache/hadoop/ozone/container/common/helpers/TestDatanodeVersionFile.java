begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|InconsistentStorageStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|DataNodeLayoutVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|utils
operator|.
name|HddsVolumeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class tests {@link DatanodeVersionFile}.  */
end_comment

begin_class
DECL|class|TestDatanodeVersionFile
specifier|public
class|class
name|TestDatanodeVersionFile
block|{
DECL|field|versionFile
specifier|private
name|File
name|versionFile
decl_stmt|;
DECL|field|dnVersionFile
specifier|private
name|DatanodeVersionFile
name|dnVersionFile
decl_stmt|;
DECL|field|properties
specifier|private
name|Properties
name|properties
decl_stmt|;
DECL|field|storageID
specifier|private
name|String
name|storageID
decl_stmt|;
DECL|field|clusterID
specifier|private
name|String
name|clusterID
decl_stmt|;
DECL|field|datanodeUUID
specifier|private
name|String
name|datanodeUUID
decl_stmt|;
DECL|field|cTime
specifier|private
name|long
name|cTime
decl_stmt|;
DECL|field|lv
specifier|private
name|int
name|lv
decl_stmt|;
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|versionFile
operator|=
name|folder
operator|.
name|newFile
argument_list|(
literal|"Version"
argument_list|)
expr_stmt|;
name|storageID
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|clusterID
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|datanodeUUID
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|cTime
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|lv
operator|=
name|DataNodeLayoutVersion
operator|.
name|getLatestVersion
argument_list|()
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|dnVersionFile
operator|=
operator|new
name|DatanodeVersionFile
argument_list|(
name|storageID
argument_list|,
name|clusterID
argument_list|,
name|datanodeUUID
argument_list|,
name|cTime
argument_list|,
name|lv
argument_list|)
expr_stmt|;
name|dnVersionFile
operator|.
name|createVersionFile
argument_list|(
name|versionFile
argument_list|)
expr_stmt|;
name|properties
operator|=
name|dnVersionFile
operator|.
name|readFrom
argument_list|(
name|versionFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateAndReadVersionFile ()
specifier|public
name|void
name|testCreateAndReadVersionFile
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Check VersionFile exists
name|assertTrue
argument_list|(
name|versionFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storageID
argument_list|,
name|HddsVolumeUtil
operator|.
name|getStorageID
argument_list|(
name|properties
argument_list|,
name|versionFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clusterID
argument_list|,
name|HddsVolumeUtil
operator|.
name|getClusterID
argument_list|(
name|properties
argument_list|,
name|versionFile
argument_list|,
name|clusterID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|datanodeUUID
argument_list|,
name|HddsVolumeUtil
operator|.
name|getDatanodeUUID
argument_list|(
name|properties
argument_list|,
name|versionFile
argument_list|,
name|datanodeUUID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cTime
argument_list|,
name|HddsVolumeUtil
operator|.
name|getCreationTime
argument_list|(
name|properties
argument_list|,
name|versionFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lv
argument_list|,
name|HddsVolumeUtil
operator|.
name|getLayOutVersion
argument_list|(
name|properties
argument_list|,
name|versionFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIncorrectClusterId ()
specifier|public
name|void
name|testIncorrectClusterId
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
name|randomClusterID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|HddsVolumeUtil
operator|.
name|getClusterID
argument_list|(
name|properties
argument_list|,
name|versionFile
argument_list|,
name|randomClusterID
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Test failure in testIncorrectClusterId"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InconsistentStorageStateException
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Mismatched ClusterIDs"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testVerifyCTime ()
specifier|public
name|void
name|testVerifyCTime
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|invalidCTime
init|=
operator|-
literal|10
decl_stmt|;
name|dnVersionFile
operator|=
operator|new
name|DatanodeVersionFile
argument_list|(
name|storageID
argument_list|,
name|clusterID
argument_list|,
name|datanodeUUID
argument_list|,
name|invalidCTime
argument_list|,
name|lv
argument_list|)
expr_stmt|;
name|dnVersionFile
operator|.
name|createVersionFile
argument_list|(
name|versionFile
argument_list|)
expr_stmt|;
name|properties
operator|=
name|dnVersionFile
operator|.
name|readFrom
argument_list|(
name|versionFile
argument_list|)
expr_stmt|;
try|try
block|{
name|HddsVolumeUtil
operator|.
name|getCreationTime
argument_list|(
name|properties
argument_list|,
name|versionFile
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Test failure in testVerifyCTime"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InconsistentStorageStateException
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Invalid Creation time in "
operator|+
literal|"Version File : "
operator|+
name|versionFile
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testVerifyLayOut ()
specifier|public
name|void
name|testVerifyLayOut
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|invalidLayOutVersion
init|=
literal|100
decl_stmt|;
name|dnVersionFile
operator|=
operator|new
name|DatanodeVersionFile
argument_list|(
name|storageID
argument_list|,
name|clusterID
argument_list|,
name|datanodeUUID
argument_list|,
name|cTime
argument_list|,
name|invalidLayOutVersion
argument_list|)
expr_stmt|;
name|dnVersionFile
operator|.
name|createVersionFile
argument_list|(
name|versionFile
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
name|dnVersionFile
operator|.
name|readFrom
argument_list|(
name|versionFile
argument_list|)
decl_stmt|;
try|try
block|{
name|HddsVolumeUtil
operator|.
name|getLayOutVersion
argument_list|(
name|props
argument_list|,
name|versionFile
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Test failure in testVerifyLayOut"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InconsistentStorageStateException
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Invalid layOutVersion."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

