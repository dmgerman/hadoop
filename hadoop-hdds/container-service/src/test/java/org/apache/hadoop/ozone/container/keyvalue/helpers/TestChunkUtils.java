begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.keyvalue.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|VolumeIOStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ChunkUtils}.  */
end_comment

begin_class
DECL|class|TestChunkUtils
specifier|public
class|class
name|TestChunkUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestChunkUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PREFIX
init|=
name|TestChunkUtils
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|concurrentReadOfSameFile ()
specifier|public
name|void
name|concurrentReadOfSameFile
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|s
init|=
literal|"Hello World"
decl_stmt|;
name|byte
index|[]
name|array
init|=
name|s
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|data
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|Path
name|tempFile
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
name|PREFIX
argument_list|,
literal|"concurrent"
argument_list|)
decl_stmt|;
try|try
block|{
name|ChunkInfo
name|chunkInfo
init|=
operator|new
name|ChunkInfo
argument_list|(
name|tempFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|capacity
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|file
init|=
name|tempFile
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|VolumeIOStats
name|stats
init|=
operator|new
name|VolumeIOStats
argument_list|()
decl_stmt|;
name|ChunkUtils
operator|.
name|writeData
argument_list|(
name|file
argument_list|,
name|chunkInfo
argument_list|,
name|data
argument_list|,
name|stats
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|threads
init|=
literal|10
decl_stmt|;
name|ExecutorService
name|executor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|threads
argument_list|,
name|threads
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|AtomicInteger
name|processed
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|failed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|threadNumber
init|=
name|i
decl_stmt|;
name|executor
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|ByteBuffer
name|readBuffer
init|=
name|ChunkUtils
operator|.
name|readData
argument_list|(
name|file
argument_list|,
name|chunkInfo
argument_list|,
name|stats
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Read data ({}): {}"
argument_list|,
name|threadNumber
argument_list|,
operator|new
name|String
argument_list|(
name|readBuffer
operator|.
name|array
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|array
argument_list|,
name|readBuffer
operator|.
name|array
argument_list|()
argument_list|)
condition|)
block|{
name|failed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to read data ({})"
argument_list|,
name|threadNumber
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|failed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|processed
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|processed
operator|.
name|get
argument_list|()
operator|==
name|threads
argument_list|,
literal|100
argument_list|,
operator|(
name|int
operator|)
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|threads
operator|*
name|stats
operator|.
name|getWriteBytes
argument_list|()
argument_list|,
name|stats
operator|.
name|getReadBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|failed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|concurrentProcessing ()
specifier|public
name|void
name|concurrentProcessing
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|perThreadWait
init|=
literal|1000
decl_stmt|;
specifier|final
name|int
name|maxTotalWait
init|=
literal|5000
decl_stmt|;
name|int
name|threads
init|=
literal|20
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|ExecutorService
name|executor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|threads
argument_list|,
name|threads
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|AtomicInteger
name|processed
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|path
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
name|PREFIX
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
name|ChunkUtils
operator|.
name|processFileExclusively
argument_list|(
name|path
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|perThreadWait
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|processed
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|processed
operator|.
name|get
argument_list|()
operator|==
name|threads
argument_list|,
literal|100
argument_list|,
name|maxTotalWait
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|path
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|serialRead ()
specifier|public
name|void
name|serialRead
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|s
init|=
literal|"Hello World"
decl_stmt|;
name|byte
index|[]
name|array
init|=
name|s
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|data
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|Path
name|tempFile
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
name|PREFIX
argument_list|,
literal|"serial"
argument_list|)
decl_stmt|;
try|try
block|{
name|ChunkInfo
name|chunkInfo
init|=
operator|new
name|ChunkInfo
argument_list|(
name|tempFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|capacity
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|file
init|=
name|tempFile
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|VolumeIOStats
name|stats
init|=
operator|new
name|VolumeIOStats
argument_list|()
decl_stmt|;
name|ChunkUtils
operator|.
name|writeData
argument_list|(
name|file
argument_list|,
name|chunkInfo
argument_list|,
name|data
argument_list|,
name|stats
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ByteBuffer
name|readBuffer
init|=
name|ChunkUtils
operator|.
name|readData
argument_list|(
name|file
argument_list|,
name|chunkInfo
argument_list|,
name|stats
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|array
argument_list|,
name|readBuffer
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stats
operator|.
name|getWriteBytes
argument_list|()
argument_list|,
name|stats
operator|.
name|getReadBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to read data"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

