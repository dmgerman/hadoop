begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.ozoneimpl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|StorageUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|BlockData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|DatanodeStateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|StateContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|utils
operator|.
name|ReferenceCountedDB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|HddsVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|RoundRobinVolumeChoosingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|VolumeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|BlockUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|DISK_OUT_OF_SPACE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * This class is used to test OzoneContainer.  */
end_comment

begin_class
DECL|class|TestOzoneContainer
specifier|public
class|class
name|TestOzoneContainer
block|{
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|scmId
specifier|private
name|String
name|scmId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|volumeSet
specifier|private
name|VolumeSet
name|volumeSet
decl_stmt|;
DECL|field|volumeChoosingPolicy
specifier|private
name|RoundRobinVolumeChoosingPolicy
name|volumeChoosingPolicy
decl_stmt|;
DECL|field|keyValueContainerData
specifier|private
name|KeyValueContainerData
name|keyValueContainerData
decl_stmt|;
DECL|field|keyValueContainer
specifier|private
name|KeyValueContainer
name|keyValueContainer
decl_stmt|;
DECL|field|datanodeDetails
specifier|private
specifier|final
name|DatanodeDetails
name|datanodeDetails
init|=
name|createDatanodeDetails
argument_list|()
decl_stmt|;
DECL|field|commitSpaceMap
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|commitSpaceMap
decl_stmt|;
comment|//RootDir -> committed space
DECL|field|numTestContainers
specifier|private
specifier|final
name|int
name|numTestContainers
init|=
literal|10
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_DATANODE_DIR_KEY
argument_list|,
name|folder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|commitSpaceMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|volumeSet
operator|=
operator|new
name|VolumeSet
argument_list|(
name|datanodeDetails
operator|.
name|getUuidString
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|volumeChoosingPolicy
operator|=
operator|new
name|RoundRobinVolumeChoosingPolicy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|volumeSet
operator|!=
literal|null
condition|)
block|{
name|volumeSet
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|volumeSet
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBuildContainerMap ()
specifier|public
name|void
name|testBuildContainerMap
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Format the volumes
for|for
control|(
name|HddsVolume
name|volume
range|:
name|volumeSet
operator|.
name|getVolumesList
argument_list|()
control|)
block|{
name|volume
operator|.
name|format
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|commitSpaceMap
operator|.
name|put
argument_list|(
name|getVolumeKey
argument_list|(
name|volume
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add containers to disk
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTestContainers
condition|;
name|i
operator|++
control|)
block|{
name|long
name|freeBytes
init|=
literal|0
decl_stmt|;
name|long
name|volCommitBytes
decl_stmt|;
name|long
name|maxCap
init|=
operator|(
name|long
operator|)
name|StorageUnit
operator|.
name|GB
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|HddsVolume
name|myVolume
decl_stmt|;
name|keyValueContainerData
operator|=
operator|new
name|KeyValueContainerData
argument_list|(
name|i
argument_list|,
name|maxCap
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|datanodeDetails
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
name|keyValueContainer
operator|=
operator|new
name|KeyValueContainer
argument_list|(
name|keyValueContainerData
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|keyValueContainer
operator|.
name|create
argument_list|(
name|volumeSet
argument_list|,
name|volumeChoosingPolicy
argument_list|,
name|scmId
argument_list|)
expr_stmt|;
name|myVolume
operator|=
name|keyValueContainer
operator|.
name|getContainerData
argument_list|()
operator|.
name|getVolume
argument_list|()
expr_stmt|;
name|freeBytes
operator|=
name|addBlocks
argument_list|(
name|keyValueContainer
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// update our expectation of volume committed space in the map
name|volCommitBytes
operator|=
name|commitSpaceMap
operator|.
name|get
argument_list|(
name|getVolumeKey
argument_list|(
name|myVolume
argument_list|)
argument_list|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|freeBytes
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|commitSpaceMap
operator|.
name|put
argument_list|(
name|getVolumeKey
argument_list|(
name|myVolume
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|volCommitBytes
operator|+
name|freeBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DatanodeStateMachine
name|stateMachine
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DatanodeStateMachine
operator|.
name|class
argument_list|)
decl_stmt|;
name|StateContext
name|context
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|StateContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|stateMachine
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|datanodeDetails
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|context
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|stateMachine
argument_list|)
expr_stmt|;
comment|// When OzoneContainer is started, the containers from disk should be
comment|// loaded into the containerSet.
comment|// Also expected to initialize committed space for each volume.
name|OzoneContainer
name|ozoneContainer
init|=
operator|new
name|OzoneContainer
argument_list|(
name|datanodeDetails
argument_list|,
name|conf
argument_list|,
name|context
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ContainerSet
name|containerset
init|=
name|ozoneContainer
operator|.
name|getContainerSet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|numTestContainers
argument_list|,
name|containerset
operator|.
name|containerCount
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCommittedSpace
argument_list|(
name|ozoneContainer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerCreateDiskFull ()
specifier|public
name|void
name|testContainerCreateDiskFull
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|containerSize
init|=
operator|(
name|long
operator|)
name|StorageUnit
operator|.
name|MB
operator|.
name|toBytes
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|boolean
name|diskSpaceException
init|=
literal|false
decl_stmt|;
comment|// Format the volumes
for|for
control|(
name|HddsVolume
name|volume
range|:
name|volumeSet
operator|.
name|getVolumesList
argument_list|()
control|)
block|{
name|volume
operator|.
name|format
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// eat up all available space except size of 1 container
name|volume
operator|.
name|incCommittedBytes
argument_list|(
name|volume
operator|.
name|getAvailable
argument_list|()
operator|-
name|containerSize
argument_list|)
expr_stmt|;
comment|// eat up 10 bytes more, now available space is less than 1 container
name|volume
operator|.
name|incCommittedBytes
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|keyValueContainerData
operator|=
operator|new
name|KeyValueContainerData
argument_list|(
literal|99
argument_list|,
name|containerSize
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|datanodeDetails
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
name|keyValueContainer
operator|=
operator|new
name|KeyValueContainer
argument_list|(
name|keyValueContainerData
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// we expect an out of space Exception
try|try
block|{
name|keyValueContainer
operator|.
name|create
argument_list|(
name|volumeSet
argument_list|,
name|volumeChoosingPolicy
argument_list|,
name|scmId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getResult
argument_list|()
operator|==
name|DISK_OUT_OF_SPACE
condition|)
block|{
name|diskSpaceException
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Test failed if there was no exception
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|diskSpaceException
argument_list|)
expr_stmt|;
block|}
comment|//verify committed space on each volume
DECL|method|verifyCommittedSpace (OzoneContainer oc)
specifier|private
name|void
name|verifyCommittedSpace
parameter_list|(
name|OzoneContainer
name|oc
parameter_list|)
block|{
for|for
control|(
name|HddsVolume
name|dnVol
range|:
name|oc
operator|.
name|getVolumeSet
argument_list|()
operator|.
name|getVolumesList
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|getVolumeKey
argument_list|(
name|dnVol
argument_list|)
decl_stmt|;
name|long
name|expectedCommit
init|=
name|commitSpaceMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|long
name|volumeCommitted
init|=
name|dnVol
operator|.
name|getCommittedBytes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Volume committed space not initialized correctly"
argument_list|,
name|expectedCommit
argument_list|,
name|volumeCommitted
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addBlocks (KeyValueContainer container, int blocks, int chunksPerBlock)
specifier|private
name|long
name|addBlocks
parameter_list|(
name|KeyValueContainer
name|container
parameter_list|,
name|int
name|blocks
parameter_list|,
name|int
name|chunksPerBlock
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|strBlock
init|=
literal|"block"
decl_stmt|;
name|String
name|strChunk
init|=
literal|"-chunkFile"
decl_stmt|;
name|int
name|datalen
init|=
literal|65536
decl_stmt|;
name|long
name|usedBytes
init|=
literal|0
decl_stmt|;
name|long
name|freeBytes
init|=
name|container
operator|.
name|getContainerData
argument_list|()
operator|.
name|getMaxSize
argument_list|()
decl_stmt|;
name|long
name|containerId
init|=
name|container
operator|.
name|getContainerData
argument_list|()
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|ReferenceCountedDB
name|db
init|=
name|BlockUtils
operator|.
name|getDB
argument_list|(
name|container
operator|.
name|getContainerData
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|bi
init|=
literal|0
init|;
name|bi
operator|<
name|blocks
condition|;
name|bi
operator|++
control|)
block|{
comment|// Creating BlockData
name|BlockID
name|blockID
init|=
operator|new
name|BlockID
argument_list|(
name|containerId
argument_list|,
name|bi
argument_list|)
decl_stmt|;
name|BlockData
name|blockData
init|=
operator|new
name|BlockData
argument_list|(
name|blockID
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|chunkList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|chunkList
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|ci
init|=
literal|0
init|;
name|ci
operator|<
name|chunksPerBlock
condition|;
name|ci
operator|++
control|)
block|{
name|String
name|chunkName
init|=
name|strBlock
operator|+
name|bi
operator|+
name|strChunk
operator|+
name|ci
decl_stmt|;
name|long
name|offset
init|=
name|ci
operator|*
name|datalen
decl_stmt|;
name|ChunkInfo
name|info
init|=
operator|new
name|ChunkInfo
argument_list|(
name|chunkName
argument_list|,
name|offset
argument_list|,
name|datalen
argument_list|)
decl_stmt|;
name|usedBytes
operator|+=
name|datalen
expr_stmt|;
name|chunkList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|blockData
operator|.
name|setChunks
argument_list|(
name|chunkList
argument_list|)
expr_stmt|;
name|db
operator|.
name|getStore
argument_list|()
operator|.
name|put
argument_list|(
name|Longs
operator|.
name|toByteArray
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
argument_list|,
name|blockData
operator|.
name|getProtoBufMessage
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// remaining available capacity of the container
return|return
operator|(
name|freeBytes
operator|-
name|usedBytes
operator|)
return|;
block|}
DECL|method|getVolumeKey (HddsVolume volume)
specifier|private
name|String
name|getVolumeKey
parameter_list|(
name|HddsVolume
name|volume
parameter_list|)
block|{
return|return
name|volume
operator|.
name|getHddsRootDir
argument_list|()
operator|.
name|getPath
argument_list|()
return|;
block|}
DECL|method|createDatanodeDetails ()
specifier|private
name|DatanodeDetails
name|createDatanodeDetails
parameter_list|()
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|String
name|ipAddress
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
operator|+
literal|"."
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
operator|+
literal|"."
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
operator|+
literal|"."
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|String
name|uuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|hostName
init|=
name|uuid
decl_stmt|;
name|DatanodeDetails
operator|.
name|Port
name|containerPort
init|=
name|DatanodeDetails
operator|.
name|newPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|STANDALONE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DatanodeDetails
operator|.
name|Port
name|ratisPort
init|=
name|DatanodeDetails
operator|.
name|newPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|RATIS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DatanodeDetails
operator|.
name|Port
name|restPort
init|=
name|DatanodeDetails
operator|.
name|newPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|REST
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DatanodeDetails
operator|.
name|Builder
name|builder
init|=
name|DatanodeDetails
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setUuid
argument_list|(
name|uuid
argument_list|)
operator|.
name|setHostName
argument_list|(
literal|"localhost"
argument_list|)
operator|.
name|setIpAddress
argument_list|(
name|ipAddress
argument_list|)
operator|.
name|addPort
argument_list|(
name|containerPort
argument_list|)
operator|.
name|addPort
argument_list|(
name|ratisPort
argument_list|)
operator|.
name|addPort
argument_list|(
name|restPort
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

