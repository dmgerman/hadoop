begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.keyvalue
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|DatanodeStateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|StateContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|VolumeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|CONTAINER_UNHEALTHY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test that KeyValueHandler fails certain operations when the  * container is unhealthy.  */
end_comment

begin_class
DECL|class|TestKeyValueHandlerWithUnhealthyContainer
specifier|public
class|class
name|TestKeyValueHandlerWithUnhealthyContainer
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestKeyValueHandlerWithUnhealthyContainer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DATANODE_UUID
specifier|private
specifier|final
specifier|static
name|String
name|DATANODE_UUID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|DUMMY_CONTAINER_ID
specifier|private
specifier|static
specifier|final
name|long
name|DUMMY_CONTAINER_ID
init|=
literal|9999
decl_stmt|;
annotation|@
name|Test
DECL|method|testRead ()
specifier|public
name|void
name|testRead
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValueContainer
name|container
init|=
name|getMockUnhealthyContainer
argument_list|()
decl_stmt|;
name|KeyValueHandler
name|handler
init|=
name|getDummyHandler
argument_list|()
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|response
init|=
name|handler
operator|.
name|handleReadContainer
argument_list|(
name|getDummyCommandRequestProto
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|ReadContainer
argument_list|)
argument_list|,
name|container
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getResult
argument_list|()
argument_list|,
name|is
argument_list|(
name|CONTAINER_UNHEALTHY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetBlock ()
specifier|public
name|void
name|testGetBlock
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValueContainer
name|container
init|=
name|getMockUnhealthyContainer
argument_list|()
decl_stmt|;
name|KeyValueHandler
name|handler
init|=
name|getDummyHandler
argument_list|()
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|response
init|=
name|handler
operator|.
name|handleGetBlock
argument_list|(
name|getDummyCommandRequestProto
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|GetBlock
argument_list|)
argument_list|,
name|container
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getResult
argument_list|()
argument_list|,
name|is
argument_list|(
name|CONTAINER_UNHEALTHY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetCommittedBlockLength ()
specifier|public
name|void
name|testGetCommittedBlockLength
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValueContainer
name|container
init|=
name|getMockUnhealthyContainer
argument_list|()
decl_stmt|;
name|KeyValueHandler
name|handler
init|=
name|getDummyHandler
argument_list|()
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|response
init|=
name|handler
operator|.
name|handleGetCommittedBlockLength
argument_list|(
name|getDummyCommandRequestProto
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|GetCommittedBlockLength
argument_list|)
argument_list|,
name|container
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getResult
argument_list|()
argument_list|,
name|is
argument_list|(
name|CONTAINER_UNHEALTHY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadChunk ()
specifier|public
name|void
name|testReadChunk
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValueContainer
name|container
init|=
name|getMockUnhealthyContainer
argument_list|()
decl_stmt|;
name|KeyValueHandler
name|handler
init|=
name|getDummyHandler
argument_list|()
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|response
init|=
name|handler
operator|.
name|handleReadChunk
argument_list|(
name|getDummyCommandRequestProto
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|ReadChunk
argument_list|)
argument_list|,
name|container
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getResult
argument_list|()
argument_list|,
name|is
argument_list|(
name|CONTAINER_UNHEALTHY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteChunk ()
specifier|public
name|void
name|testDeleteChunk
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValueContainer
name|container
init|=
name|getMockUnhealthyContainer
argument_list|()
decl_stmt|;
name|KeyValueHandler
name|handler
init|=
name|getDummyHandler
argument_list|()
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|response
init|=
name|handler
operator|.
name|handleDeleteChunk
argument_list|(
name|getDummyCommandRequestProto
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|DeleteChunk
argument_list|)
argument_list|,
name|container
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getResult
argument_list|()
argument_list|,
name|is
argument_list|(
name|CONTAINER_UNHEALTHY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetSmallFile ()
specifier|public
name|void
name|testGetSmallFile
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValueContainer
name|container
init|=
name|getMockUnhealthyContainer
argument_list|()
decl_stmt|;
name|KeyValueHandler
name|handler
init|=
name|getDummyHandler
argument_list|()
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|response
init|=
name|handler
operator|.
name|handleGetSmallFile
argument_list|(
name|getDummyCommandRequestProto
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|GetSmallFile
argument_list|)
argument_list|,
name|container
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getResult
argument_list|()
argument_list|,
name|is
argument_list|(
name|CONTAINER_UNHEALTHY
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// -- Helper methods below.
DECL|method|getDummyHandler ()
specifier|private
name|KeyValueHandler
name|getDummyHandler
parameter_list|()
throws|throws
name|IOException
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|DatanodeDetails
name|dnDetails
init|=
name|DatanodeDetails
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUuid
argument_list|(
name|DATANODE_UUID
argument_list|)
operator|.
name|setHostName
argument_list|(
literal|"dummyHost"
argument_list|)
operator|.
name|setIpAddress
argument_list|(
literal|"1.2.3.4"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DatanodeStateMachine
name|stateMachine
init|=
name|mock
argument_list|(
name|DatanodeStateMachine
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|stateMachine
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dnDetails
argument_list|)
expr_stmt|;
name|StateContext
name|context
init|=
operator|new
name|StateContext
argument_list|(
name|conf
argument_list|,
name|DatanodeStateMachine
operator|.
name|DatanodeStates
operator|.
name|RUNNING
argument_list|,
name|stateMachine
argument_list|)
decl_stmt|;
return|return
operator|new
name|KeyValueHandler
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|,
name|context
argument_list|,
name|mock
argument_list|(
name|ContainerSet
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|VolumeSet
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|ContainerMetrics
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getMockUnhealthyContainer ()
specifier|private
name|KeyValueContainer
name|getMockUnhealthyContainer
parameter_list|()
block|{
name|KeyValueContainerData
name|containerData
init|=
name|mock
argument_list|(
name|KeyValueContainerData
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|containerData
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ContainerProtos
operator|.
name|ContainerDataProto
operator|.
name|State
operator|.
name|UNHEALTHY
argument_list|)
expr_stmt|;
return|return
operator|new
name|KeyValueContainer
argument_list|(
name|containerData
argument_list|,
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Construct fake protobuf messages for various types of requests.    * This is tedious, however necessary to test. Protobuf classes are final    * and cannot be mocked by Mockito.    *    * @param cmdType type of the container command.    * @return    */
DECL|method|getDummyCommandRequestProto ( ContainerProtos.Type cmdType)
specifier|private
name|ContainerCommandRequestProto
name|getDummyCommandRequestProto
parameter_list|(
name|ContainerProtos
operator|.
name|Type
name|cmdType
parameter_list|)
block|{
specifier|final
name|ContainerCommandRequestProto
operator|.
name|Builder
name|builder
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|cmdType
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|DUMMY_CONTAINER_ID
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|DATANODE_UUID
argument_list|)
decl_stmt|;
specifier|final
name|ContainerProtos
operator|.
name|DatanodeBlockID
name|fakeBlockId
init|=
name|ContainerProtos
operator|.
name|DatanodeBlockID
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerID
argument_list|(
name|DUMMY_CONTAINER_ID
argument_list|)
operator|.
name|setLocalID
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ContainerProtos
operator|.
name|ChunkInfo
name|fakeChunkInfo
init|=
name|ContainerProtos
operator|.
name|ChunkInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setChunkName
argument_list|(
literal|"dummy"
argument_list|)
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
operator|.
name|setLen
argument_list|(
literal|100
argument_list|)
operator|.
name|setChecksumData
argument_list|(
name|ContainerProtos
operator|.
name|ChecksumData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBytesPerChecksum
argument_list|(
literal|1
argument_list|)
operator|.
name|setType
argument_list|(
name|ContainerProtos
operator|.
name|ChecksumType
operator|.
name|CRC32
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|cmdType
condition|)
block|{
case|case
name|ReadContainer
case|:
name|builder
operator|.
name|setReadContainer
argument_list|(
name|ContainerProtos
operator|.
name|ReadContainerRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GetBlock
case|:
name|builder
operator|.
name|setGetBlock
argument_list|(
name|ContainerProtos
operator|.
name|GetBlockRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|fakeBlockId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GetCommittedBlockLength
case|:
name|builder
operator|.
name|setGetCommittedBlockLength
argument_list|(
name|ContainerProtos
operator|.
name|GetCommittedBlockLengthRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|fakeBlockId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
case|case
name|ReadChunk
case|:
name|builder
operator|.
name|setReadChunk
argument_list|(
name|ContainerProtos
operator|.
name|ReadChunkRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|fakeBlockId
argument_list|)
operator|.
name|setChunkData
argument_list|(
name|fakeChunkInfo
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DeleteChunk
case|:
name|builder
operator|.
name|setDeleteChunk
argument_list|(
name|ContainerProtos
operator|.
name|DeleteChunkRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|fakeBlockId
argument_list|)
operator|.
name|setChunkData
argument_list|(
name|fakeChunkInfo
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GetSmallFile
case|:
name|builder
operator|.
name|setGetSmallFile
argument_list|(
name|ContainerProtos
operator|.
name|GetSmallFileRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlock
argument_list|(
name|ContainerProtos
operator|.
name|GetBlockRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|fakeBlockId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unhandled request type "
operator|+
name|cmdType
operator|+
literal|" in unit test"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

