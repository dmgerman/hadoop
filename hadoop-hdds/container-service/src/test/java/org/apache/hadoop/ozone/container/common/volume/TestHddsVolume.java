begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.volume
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|GetSpaceUsed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|DatanodeVersionFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|utils
operator|.
name|HddsVolumeUtil
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link HddsVolume}.  */
end_comment

begin_class
DECL|class|TestHddsVolume
specifier|public
class|class
name|TestHddsVolume
block|{
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
DECL|field|DATANODE_UUID
specifier|private
specifier|static
specifier|final
name|String
name|DATANODE_UUID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|CLUSTER_ID
specifier|private
specifier|static
specifier|final
name|String
name|CLUSTER_ID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|CONF
specifier|private
specifier|static
specifier|final
name|Configuration
name|CONF
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|DU_CACHE_FILE
specifier|private
specifier|static
specifier|final
name|String
name|DU_CACHE_FILE
init|=
literal|"scmUsed"
decl_stmt|;
DECL|field|rootDir
specifier|private
name|File
name|rootDir
decl_stmt|;
DECL|field|volume
specifier|private
name|HddsVolume
name|volume
decl_stmt|;
DECL|field|versionFile
specifier|private
name|File
name|versionFile
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|rootDir
operator|=
operator|new
name|File
argument_list|(
name|folder
operator|.
name|getRoot
argument_list|()
argument_list|,
name|HddsVolume
operator|.
name|HDDS_VOLUME_DIR
argument_list|)
expr_stmt|;
name|volume
operator|=
operator|new
name|HddsVolume
operator|.
name|Builder
argument_list|(
name|folder
operator|.
name|getRoot
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|datanodeUuid
argument_list|(
name|DATANODE_UUID
argument_list|)
operator|.
name|conf
argument_list|(
name|CONF
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|versionFile
operator|=
name|HddsVolumeUtil
operator|.
name|getVersionFile
argument_list|(
name|rootDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHddsVolumeInitialization ()
specifier|public
name|void
name|testHddsVolumeInitialization
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The initial state of HddsVolume should be "NOT_FORMATTED" when
comment|// clusterID is not specified and the version file should not be written
comment|// to disk.
name|assertTrue
argument_list|(
name|volume
operator|.
name|getClusterID
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volume
operator|.
name|getStorageType
argument_list|()
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volume
operator|.
name|getStorageState
argument_list|()
argument_list|,
name|HddsVolume
operator|.
name|VolumeState
operator|.
name|NOT_FORMATTED
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Version file should not be created when clusterID is not "
operator|+
literal|"known."
argument_list|,
name|versionFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Format the volume with clusterID.
name|volume
operator|.
name|format
argument_list|(
name|CLUSTER_ID
argument_list|)
expr_stmt|;
comment|// The state of HddsVolume after formatting with clusterID should be
comment|// NORMAL and the version file should exist.
name|assertTrue
argument_list|(
literal|"Volume format should create Version file"
argument_list|,
name|versionFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volume
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|CLUSTER_ID
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volume
operator|.
name|getStorageState
argument_list|()
argument_list|,
name|HddsVolume
operator|.
name|VolumeState
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadPropertiesFromVersionFile ()
specifier|public
name|void
name|testReadPropertiesFromVersionFile
parameter_list|()
throws|throws
name|Exception
block|{
name|volume
operator|.
name|format
argument_list|(
name|CLUSTER_ID
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
name|DatanodeVersionFile
operator|.
name|readFrom
argument_list|(
name|versionFile
argument_list|)
decl_stmt|;
name|String
name|storageID
init|=
name|HddsVolumeUtil
operator|.
name|getStorageID
argument_list|(
name|properties
argument_list|,
name|versionFile
argument_list|)
decl_stmt|;
name|String
name|clusterID
init|=
name|HddsVolumeUtil
operator|.
name|getClusterID
argument_list|(
name|properties
argument_list|,
name|versionFile
argument_list|,
name|CLUSTER_ID
argument_list|)
decl_stmt|;
name|String
name|datanodeUuid
init|=
name|HddsVolumeUtil
operator|.
name|getDatanodeUUID
argument_list|(
name|properties
argument_list|,
name|versionFile
argument_list|,
name|DATANODE_UUID
argument_list|)
decl_stmt|;
name|long
name|cTime
init|=
name|HddsVolumeUtil
operator|.
name|getCreationTime
argument_list|(
name|properties
argument_list|,
name|versionFile
argument_list|)
decl_stmt|;
name|int
name|layoutVersion
init|=
name|HddsVolumeUtil
operator|.
name|getLayOutVersion
argument_list|(
name|properties
argument_list|,
name|versionFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|volume
operator|.
name|getStorageID
argument_list|()
argument_list|,
name|storageID
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volume
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|clusterID
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volume
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|datanodeUuid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volume
operator|.
name|getCTime
argument_list|()
argument_list|,
name|cTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volume
operator|.
name|getLayoutVersion
argument_list|()
argument_list|,
name|layoutVersion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShutdown ()
specifier|public
name|void
name|testShutdown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Return dummy value> 0 for scmUsage so that scm cache file is written
comment|// during shutdown.
name|GetSpaceUsed
name|scmUsageMock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|GetSpaceUsed
operator|.
name|class
argument_list|)
decl_stmt|;
name|volume
operator|.
name|setScmUsageForTesting
argument_list|(
name|scmUsageMock
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|scmUsageMock
operator|.
name|getUsed
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Available volume should be positive"
argument_list|,
name|volume
operator|.
name|getAvailable
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Shutdown the volume.
name|volume
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Volume state should be "NON_EXISTENT" when volume is shutdown.
name|assertEquals
argument_list|(
name|volume
operator|.
name|getStorageState
argument_list|()
argument_list|,
name|HddsVolume
operator|.
name|VolumeState
operator|.
name|NON_EXISTENT
argument_list|)
expr_stmt|;
comment|// Volume should save scmUsed cache file once volume is shutdown
name|File
name|scmUsedFile
init|=
operator|new
name|File
argument_list|(
name|folder
operator|.
name|getRoot
argument_list|()
argument_list|,
name|DU_CACHE_FILE
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"scmUsedFile: "
operator|+
name|scmUsedFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"scmUsed cache file should be saved on shutdown"
argument_list|,
name|scmUsedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Volume.getAvailable() should fail with IOException
comment|// as usage thread is shutdown.
name|volume
operator|.
name|getAvailable
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"HddsVolume#shutdown test failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Volume Usage thread is not running."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

