begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.ozoneimpl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|Canceler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|DataTransferThrottler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|HddsVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * This test verifies the container scrubber metrics functionality.  */
end_comment

begin_class
DECL|class|TestContainerScrubberMetrics
specifier|public
class|class
name|TestContainerScrubberMetrics
block|{
annotation|@
name|Test
DECL|method|testContainerMetaDataScrubberMetrics ()
specifier|public
name|void
name|testContainerMetaDataScrubberMetrics
parameter_list|()
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|ContainerScrubberConfiguration
name|c
init|=
name|conf
operator|.
name|getObject
argument_list|(
name|ContainerScrubberConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|c
operator|.
name|setMetadataScanInterval
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|HddsVolume
name|vol
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HddsVolume
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerController
name|cntrl
init|=
name|mockContainerController
argument_list|(
name|vol
argument_list|)
decl_stmt|;
name|ContainerMetadataScanner
name|mc
init|=
operator|new
name|ContainerMetadataScanner
argument_list|(
name|conf
argument_list|,
name|cntrl
argument_list|,
name|c
operator|.
name|getMetadataScanInterval
argument_list|()
argument_list|)
decl_stmt|;
name|mc
operator|.
name|runIteration
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mc
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumScanIterations
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mc
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumContainersScanned
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mc
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumUnHealthyContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerDataScrubberMetrics ()
specifier|public
name|void
name|testContainerDataScrubberMetrics
parameter_list|()
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|ContainerScrubberConfiguration
name|c
init|=
name|conf
operator|.
name|getObject
argument_list|(
name|ContainerScrubberConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|HddsVolume
name|vol
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HddsVolume
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerController
name|cntrl
init|=
name|mockContainerController
argument_list|(
name|vol
argument_list|)
decl_stmt|;
name|ContainerDataScanner
name|sc
init|=
operator|new
name|ContainerDataScanner
argument_list|(
name|conf
argument_list|,
name|cntrl
argument_list|,
name|vol
argument_list|,
name|c
operator|.
name|getBandwidthPerVolume
argument_list|()
argument_list|)
decl_stmt|;
name|sc
operator|.
name|runIteration
argument_list|()
expr_stmt|;
name|ContainerDataScrubberMetrics
name|m
init|=
name|sc
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|m
operator|.
name|getNumScanIterations
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|m
operator|.
name|getNumContainersScanned
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|m
operator|.
name|getNumUnHealthyContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|mockContainerController (HddsVolume vol)
specifier|private
name|ContainerController
name|mockContainerController
parameter_list|(
name|HddsVolume
name|vol
parameter_list|)
block|{
comment|// healthy container
name|Container
name|c1
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c1
operator|.
name|shouldScanData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c1
operator|.
name|scanMetaData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c1
operator|.
name|scanData
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|DataTransferThrottler
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|Canceler
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// unhealthy container (corrupt data)
name|ContainerData
name|c2d
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ContainerData
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c2d
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|101L
argument_list|)
expr_stmt|;
name|Container
name|c2
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c2
operator|.
name|scanMetaData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c2
operator|.
name|shouldScanData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c2
operator|.
name|scanData
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|DataTransferThrottler
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|Canceler
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c2
operator|.
name|getContainerData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|c2d
argument_list|)
expr_stmt|;
comment|// unhealthy container (corrupt metadata)
name|ContainerData
name|c3d
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ContainerData
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c3d
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|102L
argument_list|)
expr_stmt|;
name|Container
name|c3
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c3
operator|.
name|shouldScanData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c3
operator|.
name|scanMetaData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c3
operator|.
name|getContainerData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|c3d
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Container
argument_list|>
name|iter
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Iterator
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|,
name|c3
argument_list|)
expr_stmt|;
name|ContainerController
name|cntrl
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ContainerController
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|cntrl
operator|.
name|getContainers
argument_list|(
name|vol
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|iter
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|cntrl
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|iter
argument_list|)
expr_stmt|;
return|return
name|cntrl
return|;
block|}
block|}
end_class

end_unit

