begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.keyvalue
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|KeyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|KeyValueContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Class which defines utility methods for KeyValueContainer.  */
end_comment

begin_class
DECL|class|KeyValueContainerUtil
specifier|public
specifier|final
class|class
name|KeyValueContainerUtil
block|{
comment|/* Never constructed. */
DECL|method|KeyValueContainerUtil ()
specifier|private
name|KeyValueContainerUtil
parameter_list|()
block|{    }
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KeyValueContainerUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|verifyIsNewContainer (File containerFile)
specifier|public
specifier|static
name|void
name|verifyIsNewContainer
parameter_list|(
name|File
name|containerFile
parameter_list|)
throws|throws
name|FileAlreadyExistsException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containerFile
argument_list|,
literal|"containerFile Should not be "
operator|+
literal|"null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|containerFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"container already exists on disk. File: {}"
argument_list|,
name|containerFile
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"container already exists on "
operator|+
literal|"disk."
argument_list|)
throw|;
block|}
block|}
comment|/**    * creates metadata path, chunks path and  metadata DB for the specified    * container.    *    * @param containerMetaDataPath    * @throws IOException    */
DECL|method|createContainerMetaData (File containerMetaDataPath, File chunksPath, File dbFile, String containerName, Configuration conf)
specifier|public
specifier|static
name|void
name|createContainerMetaData
parameter_list|(
name|File
name|containerMetaDataPath
parameter_list|,
name|File
name|chunksPath
parameter_list|,
name|File
name|dbFile
parameter_list|,
name|String
name|containerName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containerMetaDataPath
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|containerMetaDataPath
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create directory for metadata storage. Path: {}"
argument_list|,
name|containerMetaDataPath
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to create directory for metadata storage."
operator|+
literal|" Path: "
operator|+
name|containerMetaDataPath
argument_list|)
throw|;
block|}
name|MetadataStore
name|store
init|=
name|MetadataStoreBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setCreateIfMissing
argument_list|(
literal|true
argument_list|)
operator|.
name|setDbFile
argument_list|(
name|dbFile
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// we close since the SCM pre-creates containers.
comment|// we will open and put Db handle into a cache when keys are being created
comment|// in a container.
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|chunksPath
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create chunks directory Container {}"
argument_list|,
name|chunksPath
argument_list|)
expr_stmt|;
comment|//clean up container metadata path and metadata db
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|containerMetaDataPath
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|containerMetaDataPath
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to create directory for data storage."
operator|+
literal|" Path: "
operator|+
name|chunksPath
argument_list|)
throw|;
block|}
block|}
comment|/**    * remove Container if it is empty.    *<p/>    * There are three things we need to delete.    *<p/>    * 1. Container file and metadata file. 2. The Level DB file 3. The path that    * we created on the data location.    *    * @param containerData - Data of the container to remove.    * @param conf - configuration of the cluster.    * @param forceDelete - whether this container should be deleted forcibly.    * @throws IOException    */
DECL|method|removeContainer (KeyValueContainerData containerData, Configuration conf, boolean forceDelete)
specifier|public
specifier|static
name|void
name|removeContainer
parameter_list|(
name|KeyValueContainerData
name|containerData
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|forceDelete
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containerData
argument_list|)
expr_stmt|;
name|File
name|containerMetaDataPath
init|=
operator|new
name|File
argument_list|(
name|containerData
operator|.
name|getMetadataPath
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|chunksPath
init|=
operator|new
name|File
argument_list|(
name|containerData
operator|.
name|getChunksPath
argument_list|()
argument_list|)
decl_stmt|;
name|MetadataStore
name|db
init|=
name|KeyUtils
operator|.
name|getDB
argument_list|(
name|containerData
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// If the container is not empty and cannot be deleted forcibly,
comment|// then throw a SCE to stop deleting.
if|if
condition|(
operator|!
name|forceDelete
operator|&&
operator|!
name|db
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Container cannot be deleted because it is not empty."
argument_list|,
name|ContainerProtos
operator|.
name|Result
operator|.
name|ERROR_CONTAINER_NOT_EMPTY
argument_list|)
throw|;
block|}
comment|// Close the DB connection and remove the DB handler from cache
name|KeyUtils
operator|.
name|removeDB
argument_list|(
name|containerData
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Delete the Container MetaData path.
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|containerMetaDataPath
argument_list|)
expr_stmt|;
comment|//Delete the Container Chunks Path.
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|chunksPath
argument_list|)
expr_stmt|;
comment|//Delete Container directory
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|containerMetaDataPath
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

