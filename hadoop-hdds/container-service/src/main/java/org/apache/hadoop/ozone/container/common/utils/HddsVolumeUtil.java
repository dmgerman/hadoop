begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|InconsistentStorageStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|DataNodeLayoutVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|HddsVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * A util class for {@link HddsVolume}.  */
end_comment

begin_class
DECL|class|HddsVolumeUtil
specifier|public
specifier|final
class|class
name|HddsVolumeUtil
block|{
comment|// Private constructor for Utility class. Unused.
DECL|method|HddsVolumeUtil ()
specifier|private
name|HddsVolumeUtil
parameter_list|()
block|{   }
DECL|field|VERSION_FILE
specifier|private
specifier|static
specifier|final
name|String
name|VERSION_FILE
init|=
literal|"VERSION"
decl_stmt|;
DECL|field|STORAGE_ID_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|STORAGE_ID_PREFIX
init|=
literal|"DS-"
decl_stmt|;
DECL|method|getVersionFile (File rootDir)
specifier|public
specifier|static
name|File
name|getVersionFile
parameter_list|(
name|File
name|rootDir
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
name|VERSION_FILE
argument_list|)
return|;
block|}
DECL|method|generateUuid ()
specifier|public
specifier|static
name|String
name|generateUuid
parameter_list|()
block|{
return|return
name|STORAGE_ID_PREFIX
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
return|;
block|}
comment|/**    * Get hddsRoot from volume root. If volumeRoot points to hddsRoot, it is    * returned as is.    * For a volumeRoot /data/disk1, the hddsRoot is /data/disk1/hdds.    * @param volumeRoot root of the volume.    * @return hddsRoot of the volume.    */
DECL|method|getHddsRoot (String volumeRoot)
specifier|public
specifier|static
name|String
name|getHddsRoot
parameter_list|(
name|String
name|volumeRoot
parameter_list|)
block|{
if|if
condition|(
name|volumeRoot
operator|.
name|endsWith
argument_list|(
name|HddsVolume
operator|.
name|HDDS_VOLUME_DIR
argument_list|)
condition|)
block|{
return|return
name|volumeRoot
return|;
block|}
else|else
block|{
name|File
name|hddsRoot
init|=
operator|new
name|File
argument_list|(
name|volumeRoot
argument_list|,
name|HddsVolume
operator|.
name|HDDS_VOLUME_DIR
argument_list|)
decl_stmt|;
return|return
name|hddsRoot
operator|.
name|getPath
argument_list|()
return|;
block|}
block|}
comment|/**    * Returns storageID if it is valid. Throws an exception otherwise.    */
annotation|@
name|VisibleForTesting
DECL|method|getStorageID (Properties props, File versionFile)
specifier|public
specifier|static
name|String
name|getStorageID
parameter_list|(
name|Properties
name|props
parameter_list|,
name|File
name|versionFile
parameter_list|)
throws|throws
name|InconsistentStorageStateException
block|{
return|return
name|getProperty
argument_list|(
name|props
argument_list|,
name|OzoneConsts
operator|.
name|STORAGE_ID
argument_list|,
name|versionFile
argument_list|)
return|;
block|}
comment|/**    * Returns clusterID if it is valid. It should match the clusterID from the    * Datanode. Throws an exception otherwise.    */
annotation|@
name|VisibleForTesting
DECL|method|getClusterID (Properties props, File versionFile, String clusterID)
specifier|public
specifier|static
name|String
name|getClusterID
parameter_list|(
name|Properties
name|props
parameter_list|,
name|File
name|versionFile
parameter_list|,
name|String
name|clusterID
parameter_list|)
throws|throws
name|InconsistentStorageStateException
block|{
name|String
name|cid
init|=
name|getProperty
argument_list|(
name|props
argument_list|,
name|OzoneConsts
operator|.
name|CLUSTER_ID
argument_list|,
name|versionFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusterID
operator|==
literal|null
condition|)
block|{
return|return
name|cid
return|;
block|}
if|if
condition|(
operator|!
name|clusterID
operator|.
name|equals
argument_list|(
name|cid
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InconsistentStorageStateException
argument_list|(
literal|"Mismatched "
operator|+
literal|"ClusterIDs. Version File : "
operator|+
name|versionFile
operator|+
literal|" has clusterID: "
operator|+
name|cid
operator|+
literal|" and Datanode has clusterID: "
operator|+
name|clusterID
argument_list|)
throw|;
block|}
return|return
name|cid
return|;
block|}
comment|/**    * Returns datanodeUuid if it is valid. It should match the UUID of the    * Datanode. Throws an exception otherwise.    */
annotation|@
name|VisibleForTesting
DECL|method|getDatanodeUUID (Properties props, File versionFile, String datanodeUuid)
specifier|public
specifier|static
name|String
name|getDatanodeUUID
parameter_list|(
name|Properties
name|props
parameter_list|,
name|File
name|versionFile
parameter_list|,
name|String
name|datanodeUuid
parameter_list|)
throws|throws
name|InconsistentStorageStateException
block|{
name|String
name|datanodeID
init|=
name|getProperty
argument_list|(
name|props
argument_list|,
name|OzoneConsts
operator|.
name|DATANODE_UUID
argument_list|,
name|versionFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|datanodeUuid
operator|!=
literal|null
operator|&&
operator|!
name|datanodeUuid
operator|.
name|equals
argument_list|(
name|datanodeID
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InconsistentStorageStateException
argument_list|(
literal|"Mismatched "
operator|+
literal|"DatanodeUUIDs. Version File : "
operator|+
name|versionFile
operator|+
literal|" has datanodeUuid: "
operator|+
name|datanodeID
operator|+
literal|" and Datanode has datanodeUuid: "
operator|+
name|datanodeUuid
argument_list|)
throw|;
block|}
return|return
name|datanodeID
return|;
block|}
comment|/**    * Returns creationTime if it is valid. Throws an exception otherwise.    */
annotation|@
name|VisibleForTesting
DECL|method|getCreationTime (Properties props, File versionFile)
specifier|public
specifier|static
name|long
name|getCreationTime
parameter_list|(
name|Properties
name|props
parameter_list|,
name|File
name|versionFile
parameter_list|)
throws|throws
name|InconsistentStorageStateException
block|{
name|String
name|cTimeStr
init|=
name|getProperty
argument_list|(
name|props
argument_list|,
name|OzoneConsts
operator|.
name|CTIME
argument_list|,
name|versionFile
argument_list|)
decl_stmt|;
name|long
name|cTime
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|cTimeStr
argument_list|)
decl_stmt|;
name|long
name|currentTime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
if|if
condition|(
name|cTime
operator|>
name|currentTime
operator|||
name|cTime
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|InconsistentStorageStateException
argument_list|(
literal|"Invalid Creation time in "
operator|+
literal|"Version File : "
operator|+
name|versionFile
operator|+
literal|" - "
operator|+
name|cTime
operator|+
literal|". Current system"
operator|+
literal|" time is "
operator|+
name|currentTime
argument_list|)
throw|;
block|}
return|return
name|cTime
return|;
block|}
comment|/**    * Returns layOutVersion if it is valid. Throws an exception otherwise.    */
annotation|@
name|VisibleForTesting
DECL|method|getLayOutVersion (Properties props, File versionFile)
specifier|public
specifier|static
name|int
name|getLayOutVersion
parameter_list|(
name|Properties
name|props
parameter_list|,
name|File
name|versionFile
parameter_list|)
throws|throws
name|InconsistentStorageStateException
block|{
name|String
name|lvStr
init|=
name|getProperty
argument_list|(
name|props
argument_list|,
name|OzoneConsts
operator|.
name|LAYOUTVERSION
argument_list|,
name|versionFile
argument_list|)
decl_stmt|;
name|int
name|lv
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|lvStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|DataNodeLayoutVersion
operator|.
name|getLatestVersion
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|!=
name|lv
condition|)
block|{
throw|throw
operator|new
name|InconsistentStorageStateException
argument_list|(
literal|"Invalid layOutVersion. "
operator|+
literal|"Version file has layOutVersion as "
operator|+
name|lv
operator|+
literal|" and latest Datanode "
operator|+
literal|"layOutVersion is "
operator|+
name|DataNodeLayoutVersion
operator|.
name|getLatestVersion
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|lv
return|;
block|}
DECL|method|getProperty (Properties props, String propName, File versionFile)
specifier|private
specifier|static
name|String
name|getProperty
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|propName
parameter_list|,
name|File
name|versionFile
parameter_list|)
throws|throws
name|InconsistentStorageStateException
block|{
name|String
name|value
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|value
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InconsistentStorageStateException
argument_list|(
literal|"Invalid "
operator|+
name|propName
operator|+
literal|". Version File : "
operator|+
name|versionFile
operator|+
literal|" has null or empty "
operator|+
name|propName
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
comment|/**    * Check Volume is in consistent state or not.    * @param hddsVolume    * @param scmId    * @param clusterId    * @param logger    * @return true - if volume is in consistent state, otherwise false.    */
DECL|method|checkVolume (HddsVolume hddsVolume, String scmId, String clusterId, Logger logger)
specifier|public
specifier|static
name|boolean
name|checkVolume
parameter_list|(
name|HddsVolume
name|hddsVolume
parameter_list|,
name|String
name|scmId
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|Logger
name|logger
parameter_list|)
block|{
name|File
name|hddsRoot
init|=
name|hddsVolume
operator|.
name|getHddsRootDir
argument_list|()
decl_stmt|;
name|String
name|volumeRoot
init|=
name|hddsRoot
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|File
name|scmDir
init|=
operator|new
name|File
argument_list|(
name|hddsRoot
argument_list|,
name|scmId
argument_list|)
decl_stmt|;
try|try
block|{
name|hddsVolume
operator|.
name|format
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error during formatting volume {}, exception is {}"
argument_list|,
name|volumeRoot
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|File
index|[]
name|hddsFiles
init|=
name|hddsRoot
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|hddsFiles
operator|==
literal|null
condition|)
block|{
comment|// This is the case for IOException, where listFiles returns null.
comment|// So, we fail the volume.
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|hddsFiles
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// DN started for first time or this is a newly added volume.
comment|// So we create scm directory.
if|if
condition|(
operator|!
name|scmDir
operator|.
name|mkdir
argument_list|()
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Unable to create scmDir {}"
argument_list|,
name|scmDir
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|hddsFiles
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|// The files should be Version and SCM directory
if|if
condition|(
name|scmDir
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Volume {} is in Inconsistent state, expected scm "
operator|+
literal|"directory {} does not exist"
argument_list|,
name|volumeRoot
argument_list|,
name|scmDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// The hdds root dir should always have 2 files. One is Version file
comment|// and other is SCM directory.
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

