begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.transport.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|XceiverClientProtocolServiceGrpc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|token
operator|.
name|TokenVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|grpc
operator|.
name|stub
operator|.
name|StreamObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * Grpc Service for handling Container Commands on datanode.  */
end_comment

begin_class
DECL|class|GrpcXceiverService
specifier|public
class|class
name|GrpcXceiverService
extends|extends
name|XceiverClientProtocolServiceGrpc
operator|.
name|XceiverClientProtocolServiceImplBase
block|{
specifier|public
specifier|static
specifier|final
name|Logger
DECL|field|LOG
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GrpcXceiverService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|final
name|ContainerDispatcher
name|dispatcher
decl_stmt|;
DECL|field|isGrpcTokenEnabled
specifier|private
specifier|final
name|boolean
name|isGrpcTokenEnabled
decl_stmt|;
DECL|field|tokenVerifier
specifier|private
specifier|final
name|TokenVerifier
name|tokenVerifier
decl_stmt|;
DECL|method|GrpcXceiverService (ContainerDispatcher dispatcher)
specifier|public
name|GrpcXceiverService
parameter_list|(
name|ContainerDispatcher
name|dispatcher
parameter_list|)
block|{
name|this
argument_list|(
name|dispatcher
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|GrpcXceiverService (ContainerDispatcher dispatcher, boolean grpcTokenEnabled, TokenVerifier tokenVerifier)
specifier|public
name|GrpcXceiverService
parameter_list|(
name|ContainerDispatcher
name|dispatcher
parameter_list|,
name|boolean
name|grpcTokenEnabled
parameter_list|,
name|TokenVerifier
name|tokenVerifier
parameter_list|)
block|{
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
name|this
operator|.
name|isGrpcTokenEnabled
operator|=
name|grpcTokenEnabled
expr_stmt|;
name|this
operator|.
name|tokenVerifier
operator|=
name|tokenVerifier
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|send ( StreamObserver<ContainerCommandResponseProto> responseObserver)
specifier|public
name|StreamObserver
argument_list|<
name|ContainerCommandRequestProto
argument_list|>
name|send
parameter_list|(
name|StreamObserver
argument_list|<
name|ContainerCommandResponseProto
argument_list|>
name|responseObserver
parameter_list|)
block|{
return|return
operator|new
name|StreamObserver
argument_list|<
name|ContainerCommandRequestProto
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|AtomicBoolean
name|isClosed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onNext
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|isGrpcTokenEnabled
condition|)
block|{
comment|// ServerInterceptors intercepts incoming request and creates ugi.
name|tokenVerifier
operator|.
name|verify
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|request
operator|.
name|getEncodedToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ContainerCommandResponseProto
name|resp
init|=
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|responseObserver
operator|.
name|onNext
argument_list|(
name|resp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"{} got exception when processing"
operator|+
literal|" ContainerCommandRequestProto {}: {}"
argument_list|,
name|request
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseObserver
operator|.
name|onError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// for now we just log a msg
name|LOG
operator|.
name|error
argument_list|(
literal|"{}: ContainerCommand send on error. Exception: {}"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCompleted
parameter_list|()
block|{
if|if
condition|(
name|isClosed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}: ContainerCommand send completed"
argument_list|)
expr_stmt|;
name|responseObserver
operator|.
name|onCompleted
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

