begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.replication
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerDataYaml
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|TarContainerPacker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
operator|.
name|ContainerController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|replication
operator|.
name|ReplicationTask
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default replication implementation.  *<p>  * This class does the real job. Executes the download and import the container  * to the container set.  */
end_comment

begin_class
DECL|class|DownloadAndImportReplicator
specifier|public
class|class
name|DownloadAndImportReplicator
implements|implements
name|ContainerReplicator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DownloadAndImportReplicator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|containerSet
specifier|private
specifier|final
name|ContainerSet
name|containerSet
decl_stmt|;
DECL|field|controller
specifier|private
specifier|final
name|ContainerController
name|controller
decl_stmt|;
DECL|field|downloader
specifier|private
specifier|final
name|ContainerDownloader
name|downloader
decl_stmt|;
DECL|field|packer
specifier|private
specifier|final
name|TarContainerPacker
name|packer
decl_stmt|;
DECL|method|DownloadAndImportReplicator ( ContainerSet containerSet, ContainerController controller, ContainerDownloader downloader, TarContainerPacker packer)
specifier|public
name|DownloadAndImportReplicator
parameter_list|(
name|ContainerSet
name|containerSet
parameter_list|,
name|ContainerController
name|controller
parameter_list|,
name|ContainerDownloader
name|downloader
parameter_list|,
name|TarContainerPacker
name|packer
parameter_list|)
block|{
name|this
operator|.
name|containerSet
operator|=
name|containerSet
expr_stmt|;
name|this
operator|.
name|controller
operator|=
name|controller
expr_stmt|;
name|this
operator|.
name|downloader
operator|=
name|downloader
expr_stmt|;
name|this
operator|.
name|packer
operator|=
name|packer
expr_stmt|;
block|}
DECL|method|importContainer (long containerID, Path tarFilePath)
specifier|public
name|void
name|importContainer
parameter_list|(
name|long
name|containerID
parameter_list|,
name|Path
name|tarFilePath
parameter_list|)
block|{
try|try
block|{
name|ContainerData
name|originalContainerData
decl_stmt|;
try|try
init|(
name|FileInputStream
name|tempContainerTarStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|tarFilePath
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|byte
index|[]
name|containerDescriptorYaml
init|=
name|packer
operator|.
name|unpackContainerDescriptor
argument_list|(
name|tempContainerTarStream
argument_list|)
decl_stmt|;
name|originalContainerData
operator|=
name|ContainerDataYaml
operator|.
name|readContainer
argument_list|(
name|containerDescriptorYaml
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|FileInputStream
name|tempContainerTarStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|tarFilePath
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|Container
name|container
init|=
name|controller
operator|.
name|importContainer
argument_list|(
name|originalContainerData
operator|.
name|getContainerType
argument_list|()
argument_list|,
name|containerID
argument_list|,
name|originalContainerData
operator|.
name|getMaxSize
argument_list|()
argument_list|,
name|tempContainerTarStream
argument_list|,
name|packer
argument_list|)
decl_stmt|;
name|containerSet
operator|.
name|addContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't import the downloaded container data id="
operator|+
name|containerID
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|delete
argument_list|(
name|tarFilePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Container import is failed and the downloaded file can't be "
operator|+
literal|"deleted: "
operator|+
name|tarFilePath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|replicate (ReplicationTask task)
specifier|public
name|void
name|replicate
parameter_list|(
name|ReplicationTask
name|task
parameter_list|)
block|{
name|long
name|containerID
init|=
name|task
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|sourceDatanodes
init|=
name|task
operator|.
name|getSources
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting replication of container {} from {}"
argument_list|,
name|containerID
argument_list|,
name|sourceDatanodes
argument_list|)
expr_stmt|;
name|CompletableFuture
argument_list|<
name|Path
argument_list|>
name|tempTarFile
init|=
name|downloader
operator|.
name|getContainerDataFromReplicas
argument_list|(
name|containerID
argument_list|,
name|sourceDatanodes
argument_list|)
decl_stmt|;
try|try
block|{
comment|//wait for the download. This thread pool is limiting the paralell
comment|//downloads, so it's ok to block here and wait for the full download.
name|Path
name|path
init|=
name|tempTarFile
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Container {} is downloaded, starting to import."
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
name|importContainer
argument_list|(
name|containerID
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Container {} is replicated successfully"
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
name|task
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|DONE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Container replication was unsuccessful ."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|task
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

