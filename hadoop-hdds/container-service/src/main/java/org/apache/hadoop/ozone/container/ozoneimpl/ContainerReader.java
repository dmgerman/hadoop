begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.ozoneimpl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|HddsVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerDataYaml
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|KeyValueContainerLocationUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|KeyValueContainerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Class used to read .container files from Volume and build container map.  */
end_comment

begin_class
DECL|class|ContainerReader
specifier|public
class|class
name|ContainerReader
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerReader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|hddsVolume
specifier|private
name|HddsVolume
name|hddsVolume
decl_stmt|;
DECL|field|containerSet
specifier|private
specifier|final
name|ContainerSet
name|containerSet
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|OzoneConfiguration
name|config
decl_stmt|;
DECL|field|hddsVolumeDir
specifier|private
specifier|final
name|File
name|hddsVolumeDir
decl_stmt|;
DECL|method|ContainerReader (HddsVolume volume, ContainerSet cset, OzoneConfiguration conf)
name|ContainerReader
parameter_list|(
name|HddsVolume
name|volume
parameter_list|,
name|ContainerSet
name|cset
parameter_list|,
name|OzoneConfiguration
name|conf
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|this
operator|.
name|hddsVolume
operator|=
name|volume
expr_stmt|;
name|this
operator|.
name|hddsVolumeDir
operator|=
name|hddsVolume
operator|.
name|getHddsRootDir
argument_list|()
expr_stmt|;
name|this
operator|.
name|containerSet
operator|=
name|cset
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|readVolume
argument_list|(
name|hddsVolumeDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught an Run time exception during reading container files"
operator|+
literal|" from Volume {}"
argument_list|,
name|hddsVolumeDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readVolume (File hddsVolumeRootDir)
specifier|public
name|void
name|readVolume
parameter_list|(
name|File
name|hddsVolumeRootDir
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|hddsVolumeRootDir
argument_list|,
literal|"hddsVolumeRootDir"
operator|+
literal|"cannot be null"
argument_list|)
expr_stmt|;
comment|/**      *      * layout of the container directory on the disk.      * /hdds/<<scmUuid>>/current/<<containerdir>>/</containerID>/metadata      * /<<containerID>>.container      * /hdds/<<scmUuid>>/current/<<containerdir>>/<<containerID>>/metadata      * /<<containerID>>.checksum      * /hdds/<<scmUuid>>/current/<<containerdir>>/<<containerID>>/metadata      * /<<containerID>>.db      * /hdds/<<scmUuid>>/current/<<containerdir>>/<<containerID>>/chunks      * /<<chunkFile>>      *      **/
comment|//filtering scm directory
name|File
index|[]
name|scmDir
init|=
name|hddsVolumeRootDir
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
return|return
name|pathname
operator|.
name|isDirectory
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|scmDir
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Volume {} is empty with out metadata and chunks"
argument_list|,
name|hddsVolumeRootDir
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|File
name|scmLoc
range|:
name|scmDir
control|)
block|{
name|File
name|currentDir
init|=
literal|null
decl_stmt|;
name|currentDir
operator|=
operator|new
name|File
argument_list|(
name|scmLoc
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
argument_list|)
expr_stmt|;
name|File
index|[]
name|containerTopDirs
init|=
name|currentDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|containerTopDirs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|containerTopDir
range|:
name|containerTopDirs
control|)
block|{
if|if
condition|(
name|containerTopDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|containerDirs
init|=
name|containerTopDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|containerDirs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|containerDir
range|:
name|containerDirs
control|)
block|{
name|File
name|metadataPath
init|=
operator|new
name|File
argument_list|(
name|containerDir
operator|+
name|File
operator|.
name|separator
operator|+
name|OzoneConsts
operator|.
name|CONTAINER_META_PATH
argument_list|)
decl_stmt|;
name|String
name|containerName
init|=
name|containerDir
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|metadataPath
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
name|containerFile
init|=
name|KeyValueContainerLocationUtil
operator|.
name|getContainerFile
argument_list|(
name|metadataPath
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
name|File
name|checksumFile
init|=
name|KeyValueContainerLocationUtil
operator|.
name|getContainerCheckSumFile
argument_list|(
name|metadataPath
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerFile
operator|.
name|exists
argument_list|()
operator|&&
name|checksumFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|verifyContainerFile
argument_list|(
name|containerName
argument_list|,
name|containerFile
argument_list|,
name|checksumFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Missing container metadata files for Container: "
operator|+
literal|"{}"
argument_list|,
name|containerName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Missing container metadata directory for "
operator|+
literal|"Container: {}"
argument_list|,
name|containerName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|verifyContainerFile (String containerName, File containerFile, File checksumFile)
specifier|private
name|void
name|verifyContainerFile
parameter_list|(
name|String
name|containerName
parameter_list|,
name|File
name|containerFile
parameter_list|,
name|File
name|checksumFile
parameter_list|)
block|{
try|try
block|{
name|ContainerData
name|containerData
init|=
name|ContainerDataYaml
operator|.
name|readContainerFile
argument_list|(
name|containerFile
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|containerData
operator|.
name|getContainerType
argument_list|()
condition|)
block|{
case|case
name|KeyValueContainer
case|:
name|KeyValueContainerData
name|keyValueContainerData
init|=
operator|(
name|KeyValueContainerData
operator|)
name|containerData
decl_stmt|;
name|containerData
operator|.
name|setVolume
argument_list|(
name|hddsVolume
argument_list|)
expr_stmt|;
name|File
name|dbFile
init|=
name|KeyValueContainerLocationUtil
operator|.
name|getContainerDBFile
argument_list|(
operator|new
name|File
argument_list|(
name|containerFile
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dbFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Container DB file is missing for Container {}, skipping "
operator|+
literal|"this"
argument_list|,
name|containerName
argument_list|)
expr_stmt|;
comment|// Don't further process this container, as it is missing db file.
return|return;
block|}
name|KeyValueContainerUtil
operator|.
name|parseKeyValueContainerData
argument_list|(
name|keyValueContainerData
argument_list|,
name|containerFile
argument_list|,
name|checksumFile
argument_list|,
name|dbFile
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|KeyValueContainer
name|keyValueContainer
init|=
operator|new
name|KeyValueContainer
argument_list|(
name|keyValueContainerData
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|containerSet
operator|.
name|addContainer
argument_list|(
name|keyValueContainer
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Unrecognized ContainerType {} format during verify "
operator|+
literal|"ContainerFile"
argument_list|,
name|containerData
operator|.
name|getContainerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during reading container file {}"
argument_list|,
name|containerFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

