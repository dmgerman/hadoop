begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.transport.server.ratis
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|server
operator|.
name|ratis
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftGroupId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|RaftServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Stage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ReadChunkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ReadChunkResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftClientRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|storage
operator|.
name|RaftStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|shaded
operator|.
name|proto
operator|.
name|RaftProtos
operator|.
name|LogEntryProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|shaded
operator|.
name|proto
operator|.
name|RaftProtos
operator|.
name|SMLogEntryProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|statemachine
operator|.
name|StateMachineStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|statemachine
operator|.
name|TransactionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|statemachine
operator|.
name|impl
operator|.
name|BaseStateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|statemachine
operator|.
name|impl
operator|.
name|SimpleStateMachineStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|statemachine
operator|.
name|impl
operator|.
name|TransactionContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_comment
comment|/** A {@link org.apache.ratis.statemachine.StateMachine} for containers.  *  * The stateMachine is responsible for handling different types of container  * requests. The container requests can be divided into readonly and write  * requests.  *  * Read only requests are classified in  * {@link org.apache.hadoop.hdds.HddsUtils#isReadOnly}  * and these readonly requests are replied from the {@link #query(Message)}.  *  * The write requests can be divided into requests with user data  * (WriteChunkRequest) and other request without user data.  *  * Inorder to optimize the write throughput, the writeChunk request is  * processed in 2 phases. The 2 phases are divided in  * {@link #startTransaction(RaftClientRequest)}, in the first phase the user  * data is written directly into the state machine via  * {@link #writeStateMachineData} and in the second phase the  * transaction is committed via {@link #applyTransaction(TransactionContext)}  *  * For the requests with no stateMachine data, the transaction is directly  * committed through  * {@link #applyTransaction(TransactionContext)}  *  * There are 2 ordering operation which are enforced right now in the code,  * 1) Write chunk operation are executed after the create container operation,  * the write chunk operation will fail otherwise as the container still hasn't  * been created. Hence the create container operation has been split in the  * {@link #startTransaction(RaftClientRequest)}, this will help in synchronizing  * the calls in {@link #writeStateMachineData}  *  * 2) Write chunk commit operation is executed after write chunk state machine  * operation. This will ensure that commit operation is sync'd with the state  * machine operation.  *  * Synchronization between {@link #writeStateMachineData} and  * {@link #applyTransaction} need to be enforced in the StateMachine  * implementation. For example, synchronization between writeChunk and  * createContainer in {@link ContainerStateMachine}.  *  * PutKey is synchronized with WriteChunk operations, PutKey for a block is  * executed only after all the WriteChunk preceding the PutKey have finished.  *  * CloseContainer is synchronized with WriteChunk and PutKey operations,  * CloseContainer for a container is processed after all the preceding write  * operations for the container have finished.  * */
end_comment

begin_class
DECL|class|ContainerStateMachine
specifier|public
class|class
name|ContainerStateMachine
extends|extends
name|BaseStateMachine
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerStateMachine
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|storage
specifier|private
specifier|final
name|SimpleStateMachineStorage
name|storage
init|=
operator|new
name|SimpleStateMachineStorage
argument_list|()
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|final
name|ContainerDispatcher
name|dispatcher
decl_stmt|;
DECL|field|chunkExecutor
specifier|private
name|ThreadPoolExecutor
name|chunkExecutor
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
argument_list|>
DECL|field|writeChunkFutureMap
name|writeChunkFutureMap
decl_stmt|;
DECL|field|stateMachineMap
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|StateMachineHelper
argument_list|>
name|stateMachineMap
decl_stmt|;
DECL|method|ContainerStateMachine (ContainerDispatcher dispatcher, ThreadPoolExecutor chunkExecutor)
specifier|public
name|ContainerStateMachine
parameter_list|(
name|ContainerDispatcher
name|dispatcher
parameter_list|,
name|ThreadPoolExecutor
name|chunkExecutor
parameter_list|)
block|{
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
name|this
operator|.
name|chunkExecutor
operator|=
name|chunkExecutor
expr_stmt|;
name|this
operator|.
name|writeChunkFutureMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|stateMachineMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStateMachineStorage ()
specifier|public
name|StateMachineStorage
name|getStateMachineStorage
parameter_list|()
block|{
return|return
name|storage
return|;
block|}
annotation|@
name|Override
DECL|method|initialize ( RaftServer server, RaftGroupId id, RaftStorage raftStorage)
specifier|public
name|void
name|initialize
parameter_list|(
name|RaftServer
name|server
parameter_list|,
name|RaftGroupId
name|id
parameter_list|,
name|RaftStorage
name|raftStorage
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|server
argument_list|,
name|id
argument_list|,
name|raftStorage
argument_list|)
expr_stmt|;
name|storage
operator|.
name|init
argument_list|(
name|raftStorage
argument_list|)
expr_stmt|;
comment|//  TODO handle snapshots
comment|// TODO: Add a flag that tells you that initialize has been called.
comment|// Check with Ratis if this feature is done in Ratis.
block|}
annotation|@
name|Override
DECL|method|startTransaction (RaftClientRequest request)
specifier|public
name|TransactionContext
name|startTransaction
parameter_list|(
name|RaftClientRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ContainerCommandRequestProto
name|proto
init|=
name|getRequestProto
argument_list|(
name|request
operator|.
name|getMessage
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|SMLogEntryProto
name|log
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|getCmdType
argument_list|()
operator|==
name|Type
operator|.
name|WriteChunk
condition|)
block|{
specifier|final
name|WriteChunkRequestProto
name|write
init|=
name|proto
operator|.
name|getWriteChunk
argument_list|()
decl_stmt|;
comment|// create the state machine data proto
specifier|final
name|WriteChunkRequestProto
name|dataWriteChunkProto
init|=
name|WriteChunkRequestProto
operator|.
name|newBuilder
argument_list|(
name|write
argument_list|)
operator|.
name|setStage
argument_list|(
name|Stage
operator|.
name|WRITE_DATA
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
name|dataContainerCommandProto
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
operator|.
name|setWriteChunk
argument_list|(
name|dataWriteChunkProto
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// create the log entry proto
specifier|final
name|WriteChunkRequestProto
name|commitWriteChunkProto
init|=
name|WriteChunkRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|write
operator|.
name|getBlockID
argument_list|()
argument_list|)
operator|.
name|setChunkData
argument_list|(
name|write
operator|.
name|getChunkData
argument_list|()
argument_list|)
comment|// skipping the data field as it is
comment|// already set in statemachine data proto
operator|.
name|setStage
argument_list|(
name|Stage
operator|.
name|COMMIT_DATA
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
name|commitContainerCommandProto
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
operator|.
name|setWriteChunk
argument_list|(
name|commitWriteChunkProto
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|log
operator|=
name|SMLogEntryProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setData
argument_list|(
name|commitContainerCommandProto
operator|.
name|toByteString
argument_list|()
argument_list|)
operator|.
name|setStateMachineData
argument_list|(
name|dataContainerCommandProto
operator|.
name|toByteString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|proto
operator|.
name|getCmdType
argument_list|()
operator|==
name|Type
operator|.
name|CreateContainer
condition|)
block|{
name|log
operator|=
name|SMLogEntryProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setData
argument_list|(
name|request
operator|.
name|getMessage
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
operator|.
name|setStateMachineData
argument_list|(
name|request
operator|.
name|getMessage
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|log
operator|=
name|SMLogEntryProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setData
argument_list|(
name|request
operator|.
name|getMessage
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|TransactionContextImpl
argument_list|(
name|this
argument_list|,
name|request
argument_list|,
name|log
argument_list|)
return|;
block|}
DECL|method|getRequestProto (ByteString request)
specifier|private
name|ContainerCommandRequestProto
name|getRequestProto
parameter_list|(
name|ByteString
name|request
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|ContainerCommandRequestProto
operator|.
name|parseFrom
argument_list|(
name|request
argument_list|)
return|;
block|}
DECL|method|dispatchCommand ( ContainerCommandRequestProto requestProto)
specifier|private
name|ContainerCommandResponseProto
name|dispatchCommand
parameter_list|(
name|ContainerCommandRequestProto
name|requestProto
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"dispatch {}"
argument_list|,
name|requestProto
argument_list|)
expr_stmt|;
name|ContainerCommandResponseProto
name|response
init|=
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|requestProto
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"response {}"
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|method|runCommand (ContainerCommandRequestProto requestProto)
specifier|private
name|Message
name|runCommand
parameter_list|(
name|ContainerCommandRequestProto
name|requestProto
parameter_list|)
block|{
return|return
name|dispatchCommand
argument_list|(
name|requestProto
argument_list|)
operator|::
name|toByteString
return|;
block|}
comment|/*    * writeStateMachineData calls are not synchronized with each other    * and also with applyTransaction.    */
annotation|@
name|Override
DECL|method|writeStateMachineData (LogEntryProto entry)
specifier|public
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|writeStateMachineData
parameter_list|(
name|LogEntryProto
name|entry
parameter_list|)
block|{
try|try
block|{
specifier|final
name|ContainerCommandRequestProto
name|requestProto
init|=
name|getRequestProto
argument_list|(
name|entry
operator|.
name|getSmLogEntry
argument_list|()
operator|.
name|getStateMachineData
argument_list|()
argument_list|)
decl_stmt|;
name|Type
name|cmdType
init|=
name|requestProto
operator|.
name|getCmdType
argument_list|()
decl_stmt|;
name|long
name|containerId
init|=
name|requestProto
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|stateMachineMap
operator|.
name|computeIfAbsent
argument_list|(
name|containerId
argument_list|,
name|k
lambda|->
operator|new
name|StateMachineHelper
argument_list|()
argument_list|)
expr_stmt|;
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|stateMachineFuture
init|=
name|stateMachineMap
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
operator|.
name|handleStateMachineData
argument_list|(
name|requestProto
argument_list|,
name|entry
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|stateMachineFuture
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cmd Type:"
operator|+
name|cmdType
operator|+
literal|" should not have state machine data"
argument_list|)
throw|;
block|}
return|return
name|stateMachineFuture
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|completeExceptionally
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|query (Message request)
specifier|public
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|query
parameter_list|(
name|Message
name|request
parameter_list|)
block|{
try|try
block|{
specifier|final
name|ContainerCommandRequestProto
name|requestProto
init|=
name|getRequestProto
argument_list|(
name|request
operator|.
name|getContent
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|runCommand
argument_list|(
name|requestProto
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|completeExceptionally
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
DECL|method|readStateMachineData (SMLogEntryProto smLogEntryProto, ContainerCommandRequestProto requestProto)
specifier|private
name|LogEntryProto
name|readStateMachineData
parameter_list|(
name|SMLogEntryProto
name|smLogEntryProto
parameter_list|,
name|ContainerCommandRequestProto
name|requestProto
parameter_list|)
block|{
name|WriteChunkRequestProto
name|writeChunkRequestProto
init|=
name|requestProto
operator|.
name|getWriteChunk
argument_list|()
decl_stmt|;
comment|// Assert that store log entry is for COMMIT_DATA, the WRITE_DATA is
comment|// written through writeStateMachineData.
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|writeChunkRequestProto
operator|.
name|getStage
argument_list|()
operator|==
name|Stage
operator|.
name|COMMIT_DATA
argument_list|)
expr_stmt|;
comment|// prepare the chunk to be read
name|ReadChunkRequestProto
operator|.
name|Builder
name|readChunkRequestProto
init|=
name|ReadChunkRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|writeChunkRequestProto
operator|.
name|getBlockID
argument_list|()
argument_list|)
operator|.
name|setChunkData
argument_list|(
name|writeChunkRequestProto
operator|.
name|getChunkData
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerCommandRequestProto
name|dataContainerCommandProto
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|(
name|requestProto
argument_list|)
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|ReadChunk
argument_list|)
operator|.
name|setReadChunk
argument_list|(
name|readChunkRequestProto
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// read the chunk
name|ContainerCommandResponseProto
name|response
init|=
name|dispatchCommand
argument_list|(
name|dataContainerCommandProto
argument_list|)
decl_stmt|;
name|ReadChunkResponseProto
name|responseProto
init|=
name|response
operator|.
name|getReadChunk
argument_list|()
decl_stmt|;
comment|// assert that the response has data in it.
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|responseProto
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
comment|// reconstruct the write chunk request
specifier|final
name|WriteChunkRequestProto
operator|.
name|Builder
name|dataWriteChunkProto
init|=
name|WriteChunkRequestProto
operator|.
name|newBuilder
argument_list|(
name|writeChunkRequestProto
argument_list|)
comment|// adding the state machine data
operator|.
name|setData
argument_list|(
name|responseProto
operator|.
name|getData
argument_list|()
argument_list|)
operator|.
name|setStage
argument_list|(
name|Stage
operator|.
name|WRITE_DATA
argument_list|)
decl_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|newStateMachineProto
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|(
name|requestProto
argument_list|)
operator|.
name|setWriteChunk
argument_list|(
name|dataWriteChunkProto
argument_list|)
decl_stmt|;
return|return
name|recreateLogEntryProto
argument_list|(
name|smLogEntryProto
argument_list|,
name|newStateMachineProto
operator|.
name|build
argument_list|()
operator|.
name|toByteString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|recreateLogEntryProto (SMLogEntryProto smLogEntryProto, ByteString stateMachineData)
specifier|private
name|LogEntryProto
name|recreateLogEntryProto
parameter_list|(
name|SMLogEntryProto
name|smLogEntryProto
parameter_list|,
name|ByteString
name|stateMachineData
parameter_list|)
block|{
comment|// recreate the log entry
specifier|final
name|SMLogEntryProto
name|log
init|=
name|SMLogEntryProto
operator|.
name|newBuilder
argument_list|(
name|smLogEntryProto
argument_list|)
operator|.
name|setStateMachineData
argument_list|(
name|stateMachineData
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|LogEntryProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSmLogEntry
argument_list|(
name|log
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/*    * This api is used by the leader while appending logs to the follower    * This allows the leader to read the state machine data from the    * state machine implementation in case cached state machine data has been    * evicted.    */
annotation|@
name|Override
DECL|method|readStateMachineData ( LogEntryProto entry)
specifier|public
name|CompletableFuture
argument_list|<
name|LogEntryProto
argument_list|>
name|readStateMachineData
parameter_list|(
name|LogEntryProto
name|entry
parameter_list|)
block|{
name|SMLogEntryProto
name|smLogEntryProto
init|=
name|entry
operator|.
name|getSmLogEntry
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|smLogEntryProto
operator|.
name|getStateMachineData
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|entry
argument_list|)
return|;
block|}
try|try
block|{
specifier|final
name|ContainerCommandRequestProto
name|requestProto
init|=
name|getRequestProto
argument_list|(
name|entry
operator|.
name|getSmLogEntry
argument_list|()
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
comment|// readStateMachineData should only be called for "write" to Ratis.
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|HddsUtils
operator|.
name|isReadOnly
argument_list|(
name|requestProto
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|requestProto
operator|.
name|getCmdType
argument_list|()
operator|==
name|Type
operator|.
name|WriteChunk
condition|)
block|{
return|return
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
parameter_list|()
lambda|->
name|readStateMachineData
argument_list|(
name|smLogEntryProto
argument_list|,
name|requestProto
argument_list|)
argument_list|,
name|chunkExecutor
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|requestProto
operator|.
name|getCmdType
argument_list|()
operator|==
name|Type
operator|.
name|CreateContainer
condition|)
block|{
name|LogEntryProto
name|log
init|=
name|recreateLogEntryProto
argument_list|(
name|smLogEntryProto
argument_list|,
name|requestProto
operator|.
name|toByteString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|log
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cmd type:"
operator|+
name|requestProto
operator|.
name|getCmdType
argument_list|()
operator|+
literal|" cannot have state machine data"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"unable to read stateMachineData:"
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
name|completeExceptionally
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
comment|/*    * ApplyTransaction calls in Ratis are sequential.    */
annotation|@
name|Override
DECL|method|applyTransaction (TransactionContext trx)
specifier|public
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|applyTransaction
parameter_list|(
name|TransactionContext
name|trx
parameter_list|)
block|{
try|try
block|{
name|ContainerCommandRequestProto
name|requestProto
init|=
name|getRequestProto
argument_list|(
name|trx
operator|.
name|getSMLogEntry
argument_list|()
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|HddsUtils
operator|.
name|isReadOnly
argument_list|(
name|requestProto
argument_list|)
argument_list|)
expr_stmt|;
name|stateMachineMap
operator|.
name|computeIfAbsent
argument_list|(
name|requestProto
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|k
lambda|->
operator|new
name|StateMachineHelper
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|index
init|=
name|trx
operator|.
name|getLogEntry
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|trx
operator|.
name|getLogEntry
argument_list|()
operator|.
name|getIndex
argument_list|()
decl_stmt|;
return|return
name|stateMachineMap
operator|.
name|get
argument_list|(
name|requestProto
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|executeContainerCommand
argument_list|(
name|requestProto
argument_list|,
name|index
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|completeExceptionally
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
DECL|method|completeExceptionally (Exception e)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|completeExceptionally
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{   }
comment|/**    * Class to manage the future tasks for writeChunks.    */
DECL|class|CommitChunkFutureMap
specifier|static
class|class
name|CommitChunkFutureMap
block|{
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
argument_list|>
DECL|field|block2ChunkMap
name|block2ChunkMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|removeAndGetSize (long index)
specifier|synchronized
name|int
name|removeAndGetSize
parameter_list|(
name|long
name|index
parameter_list|)
block|{
name|block2ChunkMap
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|block2ChunkMap
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|add (long index, CompletableFuture<Message> future)
specifier|synchronized
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|add
parameter_list|(
name|long
name|index
parameter_list|,
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|future
parameter_list|)
block|{
return|return
name|block2ChunkMap
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|future
argument_list|)
return|;
block|}
DECL|method|getAll ()
specifier|synchronized
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
argument_list|>
name|getAll
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|block2ChunkMap
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * This class maintains maps and provide utilities to enforce synchronization    * among createContainer, writeChunk, putKey and closeContainer.    */
DECL|class|StateMachineHelper
specifier|private
class|class
name|StateMachineHelper
block|{
DECL|field|createContainerFuture
specifier|private
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|createContainerFuture
decl_stmt|;
comment|// Map for maintaining all writeChunk futures mapped to blockId
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|CommitChunkFutureMap
argument_list|>
DECL|field|block2ChunkMap
name|block2ChunkMap
decl_stmt|;
comment|// Map for putKey futures
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
argument_list|>
DECL|field|blockCommitMap
name|blockCommitMap
decl_stmt|;
DECL|method|StateMachineHelper ()
name|StateMachineHelper
parameter_list|()
block|{
name|createContainerFuture
operator|=
literal|null
expr_stmt|;
name|block2ChunkMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|blockCommitMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|// The following section handles writeStateMachineData transactions
comment|// on a container
comment|// enqueue the create container future during writeStateMachineData
comment|// so that the write stateMachine data phase of writeChunk wait on
comment|// create container to finish.
DECL|method|handleCreateContainer ()
specifier|private
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|handleCreateContainer
parameter_list|()
block|{
name|createContainerFuture
operator|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
expr_stmt|;
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
parameter_list|()
lambda|->
name|ByteString
operator|.
name|EMPTY
argument_list|)
return|;
block|}
comment|// This synchronizes on create container to finish
DECL|method|handleWriteChunk ( ContainerCommandRequestProto requestProto, long entryIndex)
specifier|private
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|handleWriteChunk
parameter_list|(
name|ContainerCommandRequestProto
name|requestProto
parameter_list|,
name|long
name|entryIndex
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|containerOpFuture
decl_stmt|;
if|if
condition|(
name|createContainerFuture
operator|!=
literal|null
condition|)
block|{
name|containerOpFuture
operator|=
name|createContainerFuture
operator|.
name|thenApplyAsync
argument_list|(
name|v
lambda|->
name|runCommand
argument_list|(
name|requestProto
argument_list|)
argument_list|,
name|chunkExecutor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|containerOpFuture
operator|=
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
parameter_list|()
lambda|->
name|runCommand
argument_list|(
name|requestProto
argument_list|)
argument_list|,
name|chunkExecutor
argument_list|)
expr_stmt|;
block|}
name|writeChunkFutureMap
operator|.
name|put
argument_list|(
name|entryIndex
argument_list|,
name|containerOpFuture
argument_list|)
expr_stmt|;
return|return
name|containerOpFuture
return|;
block|}
DECL|method|handleStateMachineData ( final ContainerCommandRequestProto requestProto, long index)
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|handleStateMachineData
parameter_list|(
specifier|final
name|ContainerCommandRequestProto
name|requestProto
parameter_list|,
name|long
name|index
parameter_list|)
block|{
name|Type
name|cmdType
init|=
name|requestProto
operator|.
name|getCmdType
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmdType
operator|==
name|Type
operator|.
name|CreateContainer
condition|)
block|{
return|return
name|handleCreateContainer
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|cmdType
operator|==
name|Type
operator|.
name|WriteChunk
condition|)
block|{
return|return
name|handleWriteChunk
argument_list|(
name|requestProto
argument_list|,
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// The following section handles applyTransaction transactions
comment|// on a container
DECL|method|handlePutKey ( ContainerCommandRequestProto requestProto)
specifier|private
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|handlePutKey
parameter_list|(
name|ContainerCommandRequestProto
name|requestProto
parameter_list|)
block|{
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
argument_list|>
name|futureList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|localId
init|=
name|requestProto
operator|.
name|getPutKey
argument_list|()
operator|.
name|getKeyData
argument_list|()
operator|.
name|getBlockID
argument_list|()
operator|.
name|getLocalID
argument_list|()
decl_stmt|;
comment|// Need not wait for create container future here as it has already
comment|// finished.
if|if
condition|(
name|block2ChunkMap
operator|.
name|get
argument_list|(
name|localId
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|futureList
operator|.
name|addAll
argument_list|(
name|block2ChunkMap
operator|.
name|get
argument_list|(
name|localId
argument_list|)
operator|.
name|getAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|effectiveFuture
init|=
name|runCommandAfterFutures
argument_list|(
name|futureList
argument_list|,
name|requestProto
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|putKeyFuture
init|=
name|effectiveFuture
operator|.
name|thenApply
argument_list|(
name|message
lambda|->
block|{
name|blockCommitMap
operator|.
name|remove
argument_list|(
name|localId
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
argument_list|)
decl_stmt|;
name|blockCommitMap
operator|.
name|put
argument_list|(
name|localId
argument_list|,
name|putKeyFuture
argument_list|)
expr_stmt|;
return|return
name|putKeyFuture
return|;
block|}
comment|// Close Container should be executed only if all pending WriteType
comment|// container cmds get executed. Transactions which can return a future
comment|// are WriteChunk and PutKey.
DECL|method|handleCloseContainer ( ContainerCommandRequestProto requestProto)
specifier|private
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|handleCloseContainer
parameter_list|(
name|ContainerCommandRequestProto
name|requestProto
parameter_list|)
block|{
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
argument_list|>
name|futureList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// No need to wait for create container future here as it should have
comment|// already finished.
name|block2ChunkMap
operator|.
name|values
argument_list|()
operator|.
name|forEach
argument_list|(
name|b
lambda|->
name|futureList
operator|.
name|addAll
argument_list|(
name|b
operator|.
name|getAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|futureList
operator|.
name|addAll
argument_list|(
name|blockCommitMap
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
comment|// There are pending write Chunk/PutKey type requests
comment|// Queue this closeContainer request behind all these requests
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|closeContainerFuture
init|=
name|runCommandAfterFutures
argument_list|(
name|futureList
argument_list|,
name|requestProto
argument_list|)
decl_stmt|;
return|return
name|closeContainerFuture
operator|.
name|thenApply
argument_list|(
name|message
lambda|->
block|{
name|stateMachineMap
operator|.
name|remove
argument_list|(
name|requestProto
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
argument_list|)
return|;
block|}
DECL|method|handleChunkCommit ( ContainerCommandRequestProto requestProto, long index)
specifier|private
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|handleChunkCommit
parameter_list|(
name|ContainerCommandRequestProto
name|requestProto
parameter_list|,
name|long
name|index
parameter_list|)
block|{
name|WriteChunkRequestProto
name|write
init|=
name|requestProto
operator|.
name|getWriteChunk
argument_list|()
decl_stmt|;
comment|// the data field has already been removed in start Transaction
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|write
operator|.
name|hasData
argument_list|()
argument_list|)
expr_stmt|;
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|stateMachineFuture
init|=
name|writeChunkFutureMap
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|commitChunkFuture
init|=
name|stateMachineFuture
operator|.
name|thenComposeAsync
argument_list|(
name|v
lambda|->
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|runCommand
argument_list|(
name|requestProto
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|localId
init|=
name|requestProto
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getBlockID
argument_list|()
operator|.
name|getLocalID
argument_list|()
decl_stmt|;
comment|// Put the applyTransaction Future again to the Map.
comment|// closeContainer should synchronize with this.
name|block2ChunkMap
operator|.
name|computeIfAbsent
argument_list|(
name|localId
argument_list|,
name|id
lambda|->
operator|new
name|CommitChunkFutureMap
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|commitChunkFuture
argument_list|)
expr_stmt|;
return|return
name|commitChunkFuture
operator|.
name|thenApply
argument_list|(
name|message
lambda|->
block|{
name|block2ChunkMap
operator|.
name|computeIfPresent
argument_list|(
name|localId
argument_list|,
operator|(
name|containerId
operator|,
name|chunks
operator|)
operator|->
name|chunks
operator|.
name|removeAndGetSize
argument_list|(
name|index
argument_list|)
operator|==
literal|0
condition|?
literal|null
else|:
name|chunks
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
argument_list|)
return|;
block|}
DECL|method|runCommandAfterFutures ( List<CompletableFuture<Message>> futureList, ContainerCommandRequestProto requestProto)
specifier|private
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|runCommandAfterFutures
parameter_list|(
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
argument_list|>
name|futureList
parameter_list|,
name|ContainerCommandRequestProto
name|requestProto
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|effectiveFuture
decl_stmt|;
if|if
condition|(
name|futureList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|effectiveFuture
operator|=
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
parameter_list|()
lambda|->
name|runCommand
argument_list|(
name|requestProto
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|allFuture
init|=
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|futureList
operator|.
name|toArray
argument_list|(
operator|new
name|CompletableFuture
index|[
name|futureList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|effectiveFuture
operator|=
name|allFuture
operator|.
name|thenApplyAsync
argument_list|(
name|v
lambda|->
name|runCommand
argument_list|(
name|requestProto
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|effectiveFuture
return|;
block|}
DECL|method|handleCreateContainer ( ContainerCommandRequestProto requestProto)
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|handleCreateContainer
parameter_list|(
name|ContainerCommandRequestProto
name|requestProto
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|future
init|=
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|runCommand
argument_list|(
name|requestProto
argument_list|)
argument_list|)
decl_stmt|;
name|future
operator|.
name|thenAccept
argument_list|(
name|m
lambda|->
block|{
name|createContainerFuture
operator|.
name|complete
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|createContainerFuture
operator|=
literal|null
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
DECL|method|handleOtherCommands ( ContainerCommandRequestProto requestProto)
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|handleOtherCommands
parameter_list|(
name|ContainerCommandRequestProto
name|requestProto
parameter_list|)
block|{
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|runCommand
argument_list|(
name|requestProto
argument_list|)
argument_list|)
return|;
block|}
DECL|method|executeContainerCommand ( ContainerCommandRequestProto requestProto, long index)
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|executeContainerCommand
parameter_list|(
name|ContainerCommandRequestProto
name|requestProto
parameter_list|,
name|long
name|index
parameter_list|)
block|{
name|Type
name|cmdType
init|=
name|requestProto
operator|.
name|getCmdType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|cmdType
condition|)
block|{
case|case
name|WriteChunk
case|:
return|return
name|handleChunkCommit
argument_list|(
name|requestProto
argument_list|,
name|index
argument_list|)
return|;
case|case
name|CloseContainer
case|:
return|return
name|handleCloseContainer
argument_list|(
name|requestProto
argument_list|)
return|;
case|case
name|PutKey
case|:
return|return
name|handlePutKey
argument_list|(
name|requestProto
argument_list|)
return|;
case|case
name|CreateContainer
case|:
return|return
name|handleCreateContainer
argument_list|(
name|requestProto
argument_list|)
return|;
default|default:
return|return
name|handleOtherCommands
argument_list|(
name|requestProto
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getStateMachineMap ()
specifier|public
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|StateMachineHelper
argument_list|>
name|getStateMachineMap
parameter_list|()
block|{
return|return
name|stateMachineMap
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCreateContainerFuture (long containerId)
specifier|public
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|getCreateContainerFuture
parameter_list|(
name|long
name|containerId
parameter_list|)
block|{
name|StateMachineHelper
name|helper
init|=
name|stateMachineMap
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
return|return
name|helper
operator|==
literal|null
condition|?
literal|null
else|:
name|helper
operator|.
name|createContainerFuture
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCommitChunkFutureMap ( long containerId)
specifier|public
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
argument_list|>
name|getCommitChunkFutureMap
parameter_list|(
name|long
name|containerId
parameter_list|)
block|{
name|StateMachineHelper
name|helper
init|=
name|stateMachineMap
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
argument_list|>
name|futureList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|stateMachineMap
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
operator|.
name|block2ChunkMap
operator|.
name|values
argument_list|()
operator|.
name|forEach
argument_list|(
name|b
lambda|->
name|futureList
operator|.
name|addAll
argument_list|(
name|b
operator|.
name|getAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|futureList
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getWriteChunkFutureMap ()
specifier|public
name|Collection
argument_list|<
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
argument_list|>
name|getWriteChunkFutureMap
parameter_list|()
block|{
return|return
name|writeChunkFutureMap
operator|.
name|values
argument_list|()
return|;
block|}
block|}
end_class

end_unit

