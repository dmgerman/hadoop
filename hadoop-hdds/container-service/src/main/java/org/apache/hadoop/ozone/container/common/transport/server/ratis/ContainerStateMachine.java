begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.transport.server.ratis
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|server
operator|.
name|ratis
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerNotOpenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|proto
operator|.
name|RaftProtos
operator|.
name|RaftPeerRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftGroupId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|StateMachineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|RaftServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|impl
operator|.
name|RaftServerProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|protocol
operator|.
name|TermIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|raftlog
operator|.
name|RaftLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|statemachine
operator|.
name|impl
operator|.
name|SingleFileSnapshotInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerIdSetProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ReadChunkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ReadChunkResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|token
operator|.
name|TokenVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftClientRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|storage
operator|.
name|RaftStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|proto
operator|.
name|RaftProtos
operator|.
name|RoleInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|proto
operator|.
name|RaftProtos
operator|.
name|LogEntryProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|proto
operator|.
name|RaftProtos
operator|.
name|StateMachineLogEntryProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|statemachine
operator|.
name|StateMachineStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|statemachine
operator|.
name|TransactionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|statemachine
operator|.
name|impl
operator|.
name|BaseStateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|statemachine
operator|.
name|impl
operator|.
name|SimpleStateMachineStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/** A {@link org.apache.ratis.statemachine.StateMachine} for containers.  *  * The stateMachine is responsible for handling different types of container  * requests. The container requests can be divided into readonly and write  * requests.  *  * Read only requests are classified in  * {@link org.apache.hadoop.hdds.HddsUtils#isReadOnly}  * and these readonly requests are replied from the {@link #query(Message)}.  *  * The write requests can be divided into requests with user data  * (WriteChunkRequest) and other request without user data.  *  * Inorder to optimize the write throughput, the writeChunk request is  * processed in 2 phases. The 2 phases are divided in  * {@link #startTransaction(RaftClientRequest)}, in the first phase the user  * data is written directly into the state machine via  * {@link #writeStateMachineData} and in the second phase the  * transaction is committed via {@link #applyTransaction(TransactionContext)}  *  * For the requests with no stateMachine data, the transaction is directly  * committed through  * {@link #applyTransaction(TransactionContext)}  *  * There are 2 ordering operation which are enforced right now in the code,  * 1) Write chunk operation are executed after the create container operation,  * the write chunk operation will fail otherwise as the container still hasn't  * been created. Hence the create container operation has been split in the  * {@link #startTransaction(RaftClientRequest)}, this will help in synchronizing  * the calls in {@link #writeStateMachineData}  *  * 2) Write chunk commit operation is executed after write chunk state machine  * operation. This will ensure that commit operation is sync'd with the state  * machine operation.For example, synchronization between writeChunk and  * createContainer in {@link ContainerStateMachine}.  **/
end_comment

begin_class
DECL|class|ContainerStateMachine
specifier|public
class|class
name|ContainerStateMachine
extends|extends
name|BaseStateMachine
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerStateMachine
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|storage
specifier|private
specifier|final
name|SimpleStateMachineStorage
name|storage
init|=
operator|new
name|SimpleStateMachineStorage
argument_list|()
decl_stmt|;
DECL|field|gid
specifier|private
specifier|final
name|RaftGroupId
name|gid
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|final
name|ContainerDispatcher
name|dispatcher
decl_stmt|;
DECL|field|chunkExecutor
specifier|private
name|ThreadPoolExecutor
name|chunkExecutor
decl_stmt|;
DECL|field|ratisServer
specifier|private
specifier|final
name|XceiverServerRatis
name|ratisServer
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
DECL|field|writeChunkFutureMap
name|CompletableFuture
argument_list|<
name|ContainerCommandResponseProto
argument_list|>
argument_list|>
name|writeChunkFutureMap
decl_stmt|;
comment|// keeps track of the containers created per pipeline
DECL|field|createContainerSet
specifier|private
specifier|final
name|Set
argument_list|<
name|Long
argument_list|>
name|createContainerSet
decl_stmt|;
DECL|field|executors
specifier|private
name|ExecutorService
index|[]
name|executors
decl_stmt|;
DECL|field|applyTransactionCompletionMap
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|applyTransactionCompletionMap
decl_stmt|;
DECL|field|stateMachineDataCache
specifier|private
specifier|final
name|Cache
argument_list|<
name|Long
argument_list|,
name|ByteString
argument_list|>
name|stateMachineDataCache
decl_stmt|;
DECL|field|isBlockTokenEnabled
specifier|private
specifier|final
name|boolean
name|isBlockTokenEnabled
decl_stmt|;
DECL|field|tokenVerifier
specifier|private
specifier|final
name|TokenVerifier
name|tokenVerifier
decl_stmt|;
DECL|field|isStateMachineHealthy
specifier|private
specifier|final
name|AtomicBoolean
name|isStateMachineHealthy
decl_stmt|;
DECL|field|applyTransactionSemaphore
specifier|private
specifier|final
name|Semaphore
name|applyTransactionSemaphore
decl_stmt|;
comment|/**    * CSM metrics.    */
DECL|field|metrics
specifier|private
specifier|final
name|CSMMetrics
name|metrics
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"parameternumber"
argument_list|)
DECL|method|ContainerStateMachine (RaftGroupId gid, ContainerDispatcher dispatcher, ThreadPoolExecutor chunkExecutor, XceiverServerRatis ratisServer, long expiryInterval, boolean isBlockTokenEnabled, TokenVerifier tokenVerifier, Configuration conf)
specifier|public
name|ContainerStateMachine
parameter_list|(
name|RaftGroupId
name|gid
parameter_list|,
name|ContainerDispatcher
name|dispatcher
parameter_list|,
name|ThreadPoolExecutor
name|chunkExecutor
parameter_list|,
name|XceiverServerRatis
name|ratisServer
parameter_list|,
name|long
name|expiryInterval
parameter_list|,
name|boolean
name|isBlockTokenEnabled
parameter_list|,
name|TokenVerifier
name|tokenVerifier
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|gid
operator|=
name|gid
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
name|this
operator|.
name|chunkExecutor
operator|=
name|chunkExecutor
expr_stmt|;
name|this
operator|.
name|ratisServer
operator|=
name|ratisServer
expr_stmt|;
name|metrics
operator|=
name|CSMMetrics
operator|.
name|create
argument_list|(
name|gid
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeChunkFutureMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|applyTransactionCompletionMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|stateMachineDataCache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
name|expiryInterval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
comment|// set the limit on no of cached entries equal to no of max threads
comment|// executing writeStateMachineData
operator|.
name|maximumSize
argument_list|(
name|chunkExecutor
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|isBlockTokenEnabled
operator|=
name|isBlockTokenEnabled
expr_stmt|;
name|this
operator|.
name|tokenVerifier
operator|=
name|tokenVerifier
expr_stmt|;
name|this
operator|.
name|createContainerSet
operator|=
operator|new
name|ConcurrentSkipListSet
argument_list|<>
argument_list|()
expr_stmt|;
specifier|final
name|int
name|numContainerOpExecutors
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_RATIS_NUM_CONTAINER_OP_EXECUTORS_KEY
argument_list|,
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_RATIS_NUM_CONTAINER_OP_EXECUTORS_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|maxPendingApplyTransactions
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|ScmConfigKeys
operator|.
name|DFS_CONTAINER_RATIS_STATEMACHINE_MAX_PENDING_APPLY_TXNS
argument_list|,
name|ScmConfigKeys
operator|.
name|DFS_CONTAINER_RATIS_STATEMACHINE_MAX_PENDING_APPLY_TXNS_DEFAULT
argument_list|)
decl_stmt|;
name|applyTransactionSemaphore
operator|=
operator|new
name|Semaphore
argument_list|(
name|maxPendingApplyTransactions
argument_list|)
expr_stmt|;
name|isStateMachineHealthy
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|executors
operator|=
operator|new
name|ExecutorService
index|[
name|numContainerOpExecutors
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numContainerOpExecutors
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|index
init|=
name|i
decl_stmt|;
name|this
operator|.
name|executors
index|[
name|index
index|]
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
name|r
lambda|->
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|t
operator|.
name|setName
argument_list|(
literal|"RatisApplyTransactionExecutor "
operator|+
name|index
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getStateMachineStorage ()
specifier|public
name|StateMachineStorage
name|getStateMachineStorage
parameter_list|()
block|{
return|return
name|storage
return|;
block|}
DECL|method|getMetrics ()
specifier|public
name|CSMMetrics
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
annotation|@
name|Override
DECL|method|initialize ( RaftServer server, RaftGroupId id, RaftStorage raftStorage)
specifier|public
name|void
name|initialize
parameter_list|(
name|RaftServer
name|server
parameter_list|,
name|RaftGroupId
name|id
parameter_list|,
name|RaftStorage
name|raftStorage
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|server
argument_list|,
name|id
argument_list|,
name|raftStorage
argument_list|)
expr_stmt|;
name|storage
operator|.
name|init
argument_list|(
name|raftStorage
argument_list|)
expr_stmt|;
name|loadSnapshot
argument_list|(
name|storage
operator|.
name|getLatestSnapshot
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|loadSnapshot (SingleFileSnapshotInfo snapshot)
specifier|private
name|long
name|loadSnapshot
parameter_list|(
name|SingleFileSnapshotInfo
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
name|TermIndex
name|empty
init|=
name|TermIndex
operator|.
name|newTermIndex
argument_list|(
literal|0
argument_list|,
name|RaftLog
operator|.
name|INVALID_LOG_INDEX
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{}: The snapshot info is null. Setting the last applied index"
operator|+
literal|"to:{}"
argument_list|,
name|gid
argument_list|,
name|empty
argument_list|)
expr_stmt|;
name|setLastAppliedTermIndex
argument_list|(
name|empty
argument_list|)
expr_stmt|;
return|return
name|empty
operator|.
name|getIndex
argument_list|()
return|;
block|}
specifier|final
name|File
name|snapshotFile
init|=
name|snapshot
operator|.
name|getFile
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|toFile
argument_list|()
decl_stmt|;
specifier|final
name|TermIndex
name|last
init|=
name|SimpleStateMachineStorage
operator|.
name|getTermIndexFromSnapshotFile
argument_list|(
name|snapshotFile
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{}: Setting the last applied index to {}"
argument_list|,
name|gid
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|setLastAppliedTermIndex
argument_list|(
name|last
argument_list|)
expr_stmt|;
comment|// initialize the dispatcher with snapshot so that it build the missing
comment|// container list
try|try
init|(
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|snapshotFile
argument_list|)
init|)
block|{
name|byte
index|[]
name|containerIds
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|fin
argument_list|)
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerIdSetProto
name|proto
init|=
name|ContainerProtos
operator|.
name|ContainerIdSetProto
operator|.
name|parseFrom
argument_list|(
name|containerIds
argument_list|)
decl_stmt|;
comment|// read the created containers list from the snapshot file and add it to
comment|// the createContainerSet here.
comment|// createContainerSet will further grow as and when containers get created
name|createContainerSet
operator|.
name|addAll
argument_list|(
name|proto
operator|.
name|getContainerIdList
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|buildMissingContainerSet
argument_list|(
name|createContainerSet
argument_list|)
expr_stmt|;
block|}
return|return
name|last
operator|.
name|getIndex
argument_list|()
return|;
block|}
comment|/**    * As a part of taking snapshot with Ratis StateMachine, it will persist    * the existing container set in the snapshotFile.    * @param out OutputStream mapped to the Ratis snapshot file    * @throws IOException    */
DECL|method|persistContainerSet (OutputStream out)
specifier|public
name|void
name|persistContainerSet
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerIdSetProto
operator|.
name|Builder
name|builder
init|=
name|ContainerIdSetProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addAllContainerId
argument_list|(
name|createContainerSet
argument_list|)
expr_stmt|;
comment|// TODO : while snapshot is being taken, deleteContainer call should not
comment|// should not happen. Lock protection will be required if delete
comment|// container happens outside of Ratis.
name|IOUtils
operator|.
name|write
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|takeSnapshot ()
specifier|public
name|long
name|takeSnapshot
parameter_list|()
throws|throws
name|IOException
block|{
name|TermIndex
name|ti
init|=
name|getLastAppliedTermIndex
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isStateMachineHealthy
operator|.
name|get
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Failed to take snapshot "
operator|+
literal|" for "
operator|+
name|gid
operator|+
literal|" as the stateMachine"
operator|+
literal|" is unhealthy. The last applied index is at "
operator|+
name|ti
decl_stmt|;
name|StateMachineException
name|sme
init|=
operator|new
name|StateMachineException
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
name|sme
throw|;
block|}
if|if
condition|(
name|ti
operator|!=
literal|null
operator|&&
name|ti
operator|.
name|getIndex
argument_list|()
operator|!=
name|RaftLog
operator|.
name|INVALID_LOG_INDEX
condition|)
block|{
specifier|final
name|File
name|snapshotFile
init|=
name|storage
operator|.
name|getSnapshotFile
argument_list|(
name|ti
operator|.
name|getTerm
argument_list|()
argument_list|,
name|ti
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{}: Taking a snapshot at:{} file {}"
argument_list|,
name|gid
argument_list|,
name|ti
argument_list|,
name|snapshotFile
argument_list|)
expr_stmt|;
try|try
init|(
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|snapshotFile
argument_list|)
init|)
block|{
name|persistContainerSet
argument_list|(
name|fos
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// make sure the snapshot file is synced
name|fos
operator|.
name|getFD
argument_list|()
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"{}: Failed to write snapshot at:{} file {}"
argument_list|,
name|gid
argument_list|,
name|ti
argument_list|,
name|snapshotFile
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"{}: Finished taking a snapshot at:{} file:{} time:{}"
argument_list|,
name|gid
argument_list|,
name|ti
argument_list|,
name|snapshotFile
argument_list|,
operator|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|startTime
operator|)
argument_list|)
expr_stmt|;
return|return
name|ti
operator|.
name|getIndex
argument_list|()
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|startTransaction (RaftClientRequest request)
specifier|public
name|TransactionContext
name|startTransaction
parameter_list|(
name|RaftClientRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNowNanos
argument_list|()
decl_stmt|;
specifier|final
name|ContainerCommandRequestProto
name|proto
init|=
name|getContainerCommandRequestProto
argument_list|(
name|request
operator|.
name|getMessage
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|request
operator|.
name|getRaftGroupId
argument_list|()
operator|.
name|equals
argument_list|(
name|gid
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|dispatcher
operator|.
name|validateContainerCommand
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|ioe
operator|instanceof
name|ContainerNotOpenException
condition|)
block|{
name|metrics
operator|.
name|incNumContainerNotOpenVerifyFailures
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|metrics
operator|.
name|incNumStartTransactionVerifyFailures
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"startTransaction validation failed on leader"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|TransactionContext
name|ctxt
init|=
name|TransactionContext
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClientRequest
argument_list|(
name|request
argument_list|)
operator|.
name|setStateMachine
argument_list|(
name|this
argument_list|)
operator|.
name|setServerRole
argument_list|(
name|RaftPeerRole
operator|.
name|LEADER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ctxt
operator|.
name|setException
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
name|ctxt
return|;
block|}
if|if
condition|(
name|proto
operator|.
name|getCmdType
argument_list|()
operator|==
name|Type
operator|.
name|WriteChunk
condition|)
block|{
specifier|final
name|WriteChunkRequestProto
name|write
init|=
name|proto
operator|.
name|getWriteChunk
argument_list|()
decl_stmt|;
comment|// create the log entry proto
specifier|final
name|WriteChunkRequestProto
name|commitWriteChunkProto
init|=
name|WriteChunkRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|write
operator|.
name|getBlockID
argument_list|()
argument_list|)
operator|.
name|setChunkData
argument_list|(
name|write
operator|.
name|getChunkData
argument_list|()
argument_list|)
comment|// skipping the data field as it is
comment|// already set in statemachine data proto
operator|.
name|build
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
name|commitContainerCommandProto
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
operator|.
name|setWriteChunk
argument_list|(
name|commitWriteChunkProto
argument_list|)
operator|.
name|setTraceID
argument_list|(
name|proto
operator|.
name|getTraceID
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|TransactionContext
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClientRequest
argument_list|(
name|request
argument_list|)
operator|.
name|setStateMachine
argument_list|(
name|this
argument_list|)
operator|.
name|setServerRole
argument_list|(
name|RaftPeerRole
operator|.
name|LEADER
argument_list|)
operator|.
name|setStateMachineContext
argument_list|(
name|startTime
argument_list|)
operator|.
name|setStateMachineData
argument_list|(
name|write
operator|.
name|getData
argument_list|()
argument_list|)
operator|.
name|setLogData
argument_list|(
name|commitContainerCommandProto
operator|.
name|toByteString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|TransactionContext
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClientRequest
argument_list|(
name|request
argument_list|)
operator|.
name|setStateMachine
argument_list|(
name|this
argument_list|)
operator|.
name|setServerRole
argument_list|(
name|RaftPeerRole
operator|.
name|LEADER
argument_list|)
operator|.
name|setStateMachineContext
argument_list|(
name|startTime
argument_list|)
operator|.
name|setLogData
argument_list|(
name|request
operator|.
name|getMessage
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
DECL|method|getStateMachineData (StateMachineLogEntryProto entryProto)
specifier|private
name|ByteString
name|getStateMachineData
parameter_list|(
name|StateMachineLogEntryProto
name|entryProto
parameter_list|)
block|{
return|return
name|entryProto
operator|.
name|getStateMachineEntry
argument_list|()
operator|.
name|getStateMachineData
argument_list|()
return|;
block|}
DECL|method|getContainerCommandRequestProto ( ByteString request)
specifier|private
name|ContainerCommandRequestProto
name|getContainerCommandRequestProto
parameter_list|(
name|ByteString
name|request
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
comment|// TODO: We can avoid creating new builder and set pipeline Id if
comment|// the client is already sending the pipeline id, then we just have to
comment|// validate the pipeline Id.
return|return
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|(
name|ContainerCommandRequestProto
operator|.
name|parseFrom
argument_list|(
name|request
argument_list|)
argument_list|)
operator|.
name|setPipelineID
argument_list|(
name|gid
operator|.
name|getUuid
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|dispatchCommand ( ContainerCommandRequestProto requestProto, DispatcherContext context)
specifier|private
name|ContainerCommandResponseProto
name|dispatchCommand
parameter_list|(
name|ContainerCommandRequestProto
name|requestProto
parameter_list|,
name|DispatcherContext
name|context
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"{}: dispatch {} containerID={} pipelineID={} traceID={}"
argument_list|,
name|gid
argument_list|,
name|requestProto
operator|.
name|getCmdType
argument_list|()
argument_list|,
name|requestProto
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|requestProto
operator|.
name|getPipelineID
argument_list|()
argument_list|,
name|requestProto
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isBlockTokenEnabled
condition|)
block|{
try|try
block|{
comment|// ServerInterceptors intercepts incoming request and creates ugi.
name|tokenVerifier
operator|.
name|verify
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|requestProto
operator|.
name|getEncodedToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|StorageContainerException
name|sce
init|=
operator|new
name|StorageContainerException
argument_list|(
literal|"Block token verification failed. "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|,
name|ContainerProtos
operator|.
name|Result
operator|.
name|BLOCK_TOKEN_VERIFICATION_FAILED
argument_list|)
decl_stmt|;
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
name|sce
argument_list|,
name|requestProto
argument_list|)
return|;
block|}
block|}
name|ContainerCommandResponseProto
name|response
init|=
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|requestProto
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"{}: response {}"
argument_list|,
name|gid
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|method|runCommand ( ContainerCommandRequestProto requestProto, DispatcherContext context)
specifier|private
name|ContainerCommandResponseProto
name|runCommand
parameter_list|(
name|ContainerCommandRequestProto
name|requestProto
parameter_list|,
name|DispatcherContext
name|context
parameter_list|)
block|{
return|return
name|dispatchCommand
argument_list|(
name|requestProto
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|getCommandExecutor ( ContainerCommandRequestProto requestProto)
specifier|private
name|ExecutorService
name|getCommandExecutor
parameter_list|(
name|ContainerCommandRequestProto
name|requestProto
parameter_list|)
block|{
name|int
name|executorId
init|=
call|(
name|int
call|)
argument_list|(
name|requestProto
operator|.
name|getContainerID
argument_list|()
operator|%
name|executors
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
name|executors
index|[
name|executorId
index|]
return|;
block|}
DECL|method|handleWriteChunk ( ContainerCommandRequestProto requestProto, long entryIndex, long term, long startTime)
specifier|private
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|handleWriteChunk
parameter_list|(
name|ContainerCommandRequestProto
name|requestProto
parameter_list|,
name|long
name|entryIndex
parameter_list|,
name|long
name|term
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
specifier|final
name|WriteChunkRequestProto
name|write
init|=
name|requestProto
operator|.
name|getWriteChunk
argument_list|()
decl_stmt|;
name|RaftServer
name|server
init|=
name|ratisServer
operator|.
name|getServer
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|server
operator|instanceof
name|RaftServerProxy
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|(
operator|(
name|RaftServerProxy
operator|)
name|server
operator|)
operator|.
name|getImpl
argument_list|(
name|gid
argument_list|)
operator|.
name|isLeader
argument_list|()
condition|)
block|{
name|stateMachineDataCache
operator|.
name|put
argument_list|(
name|entryIndex
argument_list|,
name|write
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
return|return
name|completeExceptionally
argument_list|(
name|ioe
argument_list|)
return|;
block|}
name|DispatcherContext
name|context
init|=
operator|new
name|DispatcherContext
operator|.
name|Builder
argument_list|()
operator|.
name|setTerm
argument_list|(
name|term
argument_list|)
operator|.
name|setLogIndex
argument_list|(
name|entryIndex
argument_list|)
operator|.
name|setStage
argument_list|(
name|DispatcherContext
operator|.
name|WriteChunkStage
operator|.
name|WRITE_DATA
argument_list|)
operator|.
name|setCreateContainerSet
argument_list|(
name|createContainerSet
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// ensure the write chunk happens asynchronously in writeChunkExecutor pool
comment|// thread.
name|CompletableFuture
argument_list|<
name|ContainerCommandResponseProto
argument_list|>
name|writeChunkFuture
init|=
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
parameter_list|()
lambda|->
name|runCommand
argument_list|(
name|requestProto
argument_list|,
name|context
argument_list|)
argument_list|,
name|chunkExecutor
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|raftFuture
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|writeChunkFutureMap
operator|.
name|put
argument_list|(
name|entryIndex
argument_list|,
name|writeChunkFuture
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|gid
operator|+
literal|": writeChunk writeStateMachineData : blockId "
operator|+
name|write
operator|.
name|getBlockID
argument_list|()
operator|+
literal|" logIndex "
operator|+
name|entryIndex
operator|+
literal|" chunkName "
operator|+
name|write
operator|.
name|getChunkData
argument_list|()
operator|.
name|getChunkName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the future once it finishes execution from the
comment|// writeChunkFutureMap.
name|writeChunkFuture
operator|.
name|thenApply
argument_list|(
name|r
lambda|->
block|{
if|if
condition|(
name|r
operator|.
name|getResult
argument_list|()
operator|!=
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
condition|)
block|{
name|StorageContainerException
name|sce
init|=
operator|new
name|StorageContainerException
argument_list|(
name|r
operator|.
name|getMessage
argument_list|()
argument_list|,
name|r
operator|.
name|getResult
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|gid
operator|+
literal|": writeChunk writeStateMachineData failed: blockId"
operator|+
name|write
operator|.
name|getBlockID
argument_list|()
operator|+
literal|" logIndex "
operator|+
name|entryIndex
operator|+
literal|" chunkName "
operator|+
name|write
operator|.
name|getChunkData
argument_list|()
operator|.
name|getChunkName
argument_list|()
operator|+
literal|" Error message: "
operator|+
name|r
operator|.
name|getMessage
argument_list|()
operator|+
literal|" Container Result: "
operator|+
name|r
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incNumWriteDataFails
argument_list|()
expr_stmt|;
name|raftFuture
operator|.
name|completeExceptionally
argument_list|(
name|sce
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metrics
operator|.
name|incNumBytesWrittenCount
argument_list|(
name|requestProto
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getChunkData
argument_list|()
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|gid
operator|+
literal|": writeChunk writeStateMachineData  completed: blockId"
operator|+
name|write
operator|.
name|getBlockID
argument_list|()
operator|+
literal|" logIndex "
operator|+
name|entryIndex
operator|+
literal|" chunkName "
operator|+
name|write
operator|.
name|getChunkData
argument_list|()
operator|.
name|getChunkName
argument_list|()
argument_list|)
expr_stmt|;
name|raftFuture
operator|.
name|complete
argument_list|(
name|r
operator|::
name|toByteString
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|recordWriteStateMachineCompletion
argument_list|(
name|Time
operator|.
name|monotonicNowNanos
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
name|writeChunkFutureMap
operator|.
name|remove
argument_list|(
name|entryIndex
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|raftFuture
return|;
block|}
comment|/*    * writeStateMachineData calls are not synchronized with each other    * and also with applyTransaction.    */
annotation|@
name|Override
DECL|method|writeStateMachineData (LogEntryProto entry)
specifier|public
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|writeStateMachineData
parameter_list|(
name|LogEntryProto
name|entry
parameter_list|)
block|{
try|try
block|{
name|metrics
operator|.
name|incNumWriteStateMachineOps
argument_list|()
expr_stmt|;
name|long
name|writeStateMachineStartTime
init|=
name|Time
operator|.
name|monotonicNowNanos
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
name|requestProto
init|=
name|getContainerCommandRequestProto
argument_list|(
name|entry
operator|.
name|getStateMachineLogEntry
argument_list|()
operator|.
name|getLogData
argument_list|()
argument_list|)
decl_stmt|;
name|WriteChunkRequestProto
name|writeChunk
init|=
name|WriteChunkRequestProto
operator|.
name|newBuilder
argument_list|(
name|requestProto
operator|.
name|getWriteChunk
argument_list|()
argument_list|)
operator|.
name|setData
argument_list|(
name|getStateMachineData
argument_list|(
name|entry
operator|.
name|getStateMachineLogEntry
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|requestProto
operator|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|(
name|requestProto
argument_list|)
operator|.
name|setWriteChunk
argument_list|(
name|writeChunk
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Type
name|cmdType
init|=
name|requestProto
operator|.
name|getCmdType
argument_list|()
decl_stmt|;
comment|// For only writeChunk, there will be writeStateMachineData call.
comment|// CreateContainer will happen as a part of writeChunk only.
switch|switch
condition|(
name|cmdType
condition|)
block|{
case|case
name|WriteChunk
case|:
return|return
name|handleWriteChunk
argument_list|(
name|requestProto
argument_list|,
name|entry
operator|.
name|getIndex
argument_list|()
argument_list|,
name|entry
operator|.
name|getTerm
argument_list|()
argument_list|,
name|writeStateMachineStartTime
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cmd Type:"
operator|+
name|cmdType
operator|+
literal|" should not have state machine data"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|metrics
operator|.
name|incNumWriteStateMachineFails
argument_list|()
expr_stmt|;
return|return
name|completeExceptionally
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|query (Message request)
specifier|public
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|query
parameter_list|(
name|Message
name|request
parameter_list|)
block|{
try|try
block|{
name|metrics
operator|.
name|incNumQueryStateMachineOps
argument_list|()
expr_stmt|;
specifier|final
name|ContainerCommandRequestProto
name|requestProto
init|=
name|getContainerCommandRequestProto
argument_list|(
name|request
operator|.
name|getContent
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|runCommand
argument_list|(
name|requestProto
argument_list|,
literal|null
argument_list|)
operator|::
name|toByteString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|metrics
operator|.
name|incNumQueryStateMachineFails
argument_list|()
expr_stmt|;
return|return
name|completeExceptionally
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
DECL|method|readStateMachineData ( ContainerCommandRequestProto requestProto, long term, long index)
specifier|private
name|ByteString
name|readStateMachineData
parameter_list|(
name|ContainerCommandRequestProto
name|requestProto
parameter_list|,
name|long
name|term
parameter_list|,
name|long
name|index
parameter_list|)
throws|throws
name|IOException
block|{
comment|// the stateMachine data is not present in the stateMachine cache,
comment|// increment the stateMachine cache miss count
name|metrics
operator|.
name|incNumReadStateMachineMissCount
argument_list|()
expr_stmt|;
name|WriteChunkRequestProto
name|writeChunkRequestProto
init|=
name|requestProto
operator|.
name|getWriteChunk
argument_list|()
decl_stmt|;
name|ContainerProtos
operator|.
name|ChunkInfo
name|chunkInfo
init|=
name|writeChunkRequestProto
operator|.
name|getChunkData
argument_list|()
decl_stmt|;
comment|// prepare the chunk to be read
name|ReadChunkRequestProto
operator|.
name|Builder
name|readChunkRequestProto
init|=
name|ReadChunkRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|writeChunkRequestProto
operator|.
name|getBlockID
argument_list|()
argument_list|)
operator|.
name|setChunkData
argument_list|(
name|chunkInfo
argument_list|)
decl_stmt|;
name|ContainerCommandRequestProto
name|dataContainerCommandProto
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|(
name|requestProto
argument_list|)
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|ReadChunk
argument_list|)
operator|.
name|setReadChunk
argument_list|(
name|readChunkRequestProto
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DispatcherContext
name|context
init|=
operator|new
name|DispatcherContext
operator|.
name|Builder
argument_list|()
operator|.
name|setTerm
argument_list|(
name|term
argument_list|)
operator|.
name|setLogIndex
argument_list|(
name|index
argument_list|)
operator|.
name|setReadFromTmpFile
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// read the chunk
name|ContainerCommandResponseProto
name|response
init|=
name|dispatchCommand
argument_list|(
name|dataContainerCommandProto
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getResult
argument_list|()
operator|!=
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
condition|)
block|{
name|StorageContainerException
name|sce
init|=
operator|new
name|StorageContainerException
argument_list|(
name|response
operator|.
name|getMessage
argument_list|()
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"gid {} : ReadStateMachine failed. cmd {} logIndex {} msg : "
operator|+
literal|"{} Container Result: {}"
argument_list|,
name|gid
argument_list|,
name|response
operator|.
name|getCmdType
argument_list|()
argument_list|,
name|index
argument_list|,
name|response
operator|.
name|getMessage
argument_list|()
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|sce
throw|;
block|}
name|ReadChunkResponseProto
name|responseProto
init|=
name|response
operator|.
name|getReadChunk
argument_list|()
decl_stmt|;
name|ByteString
name|data
init|=
name|responseProto
operator|.
name|getData
argument_list|()
decl_stmt|;
comment|// assert that the response has data in it.
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|data
argument_list|,
literal|"read chunk data is null for chunk:"
operator|+
name|chunkInfo
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|data
operator|.
name|size
argument_list|()
operator|==
name|chunkInfo
operator|.
name|getLen
argument_list|()
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"read chunk len=%d does not match chunk expected len=%d for chunk:%s"
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|,
name|chunkInfo
operator|.
name|getLen
argument_list|()
argument_list|,
name|chunkInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/**    * Reads the Entry from the Cache or loads it back by reading from disk.    */
DECL|method|getCachedStateMachineData (Long logIndex, long term, ContainerCommandRequestProto requestProto)
specifier|private
name|ByteString
name|getCachedStateMachineData
parameter_list|(
name|Long
name|logIndex
parameter_list|,
name|long
name|term
parameter_list|,
name|ContainerCommandRequestProto
name|requestProto
parameter_list|)
throws|throws
name|ExecutionException
block|{
return|return
name|stateMachineDataCache
operator|.
name|get
argument_list|(
name|logIndex
argument_list|,
parameter_list|()
lambda|->
name|readStateMachineData
argument_list|(
name|requestProto
argument_list|,
name|term
argument_list|,
name|logIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns the combined future of all the writeChunks till the given log    * index. The Raft log worker will wait for the stateMachineData to complete    * flush as well.    *    * @param index log index till which the stateMachine data needs to be flushed    * @return Combined future of all writeChunks till the log index given.    */
annotation|@
name|Override
DECL|method|flushStateMachineData (long index)
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|flushStateMachineData
parameter_list|(
name|long
name|index
parameter_list|)
block|{
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|ContainerCommandResponseProto
argument_list|>
argument_list|>
name|futureList
init|=
name|writeChunkFutureMap
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getKey
argument_list|()
operator|<=
name|index
argument_list|)
operator|.
name|map
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getValue
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|futureList
operator|.
name|toArray
argument_list|(
operator|new
name|CompletableFuture
index|[
name|futureList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
comment|/*    * This api is used by the leader while appending logs to the follower    * This allows the leader to read the state machine data from the    * state machine implementation in case cached state machine data has been    * evicted.    */
annotation|@
name|Override
DECL|method|readStateMachineData ( LogEntryProto entry)
specifier|public
name|CompletableFuture
argument_list|<
name|ByteString
argument_list|>
name|readStateMachineData
parameter_list|(
name|LogEntryProto
name|entry
parameter_list|)
block|{
name|StateMachineLogEntryProto
name|smLogEntryProto
init|=
name|entry
operator|.
name|getStateMachineLogEntry
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|incNumReadStateMachineOps
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|getStateMachineData
argument_list|(
name|smLogEntryProto
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|ByteString
operator|.
name|EMPTY
argument_list|)
return|;
block|}
try|try
block|{
specifier|final
name|ContainerCommandRequestProto
name|requestProto
init|=
name|getContainerCommandRequestProto
argument_list|(
name|entry
operator|.
name|getStateMachineLogEntry
argument_list|()
operator|.
name|getLogData
argument_list|()
argument_list|)
decl_stmt|;
comment|// readStateMachineData should only be called for "write" to Ratis.
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|HddsUtils
operator|.
name|isReadOnly
argument_list|(
name|requestProto
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|requestProto
operator|.
name|getCmdType
argument_list|()
operator|==
name|Type
operator|.
name|WriteChunk
condition|)
block|{
specifier|final
name|CompletableFuture
argument_list|<
name|ByteString
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|future
operator|.
name|complete
argument_list|(
name|getCachedStateMachineData
argument_list|(
name|entry
operator|.
name|getIndex
argument_list|()
argument_list|,
name|entry
operator|.
name|getTerm
argument_list|()
argument_list|,
name|requestProto
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|metrics
operator|.
name|incNumReadStateMachineFails
argument_list|()
expr_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|future
return|;
block|}
argument_list|,
name|chunkExecutor
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cmd type:"
operator|+
name|requestProto
operator|.
name|getCmdType
argument_list|()
operator|+
literal|" cannot have state machine data"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|metrics
operator|.
name|incNumReadStateMachineFails
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"{} unable to read stateMachineData:"
argument_list|,
name|gid
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|completeExceptionally
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
DECL|method|updateLastApplied ()
specifier|private
specifier|synchronized
name|void
name|updateLastApplied
parameter_list|()
block|{
name|Long
name|appliedTerm
init|=
literal|null
decl_stmt|;
name|long
name|appliedIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
name|getLastAppliedTermIndex
argument_list|()
operator|.
name|getIndex
argument_list|()
operator|+
literal|1
init|;
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Long
name|removed
init|=
name|applyTransactionCompletionMap
operator|.
name|remove
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|appliedTerm
operator|=
name|removed
expr_stmt|;
name|appliedIndex
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
name|appliedTerm
operator|!=
literal|null
condition|)
block|{
name|updateLastAppliedTermIndex
argument_list|(
name|appliedTerm
argument_list|,
name|appliedIndex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Notifies the state machine about index updates because of entries    * which do not cause state machine update, i.e. conf entries, metadata    * entries    * @param term term of the log entry    * @param index index of the log entry    */
annotation|@
name|Override
DECL|method|notifyIndexUpdate (long term, long index)
specifier|public
name|void
name|notifyIndexUpdate
parameter_list|(
name|long
name|term
parameter_list|,
name|long
name|index
parameter_list|)
block|{
name|applyTransactionCompletionMap
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|term
argument_list|)
expr_stmt|;
block|}
comment|/*    * ApplyTransaction calls in Ratis are sequential.    */
annotation|@
name|Override
DECL|method|applyTransaction (TransactionContext trx)
specifier|public
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|applyTransaction
parameter_list|(
name|TransactionContext
name|trx
parameter_list|)
block|{
name|long
name|index
init|=
name|trx
operator|.
name|getLogEntry
argument_list|()
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|DispatcherContext
operator|.
name|Builder
name|builder
init|=
operator|new
name|DispatcherContext
operator|.
name|Builder
argument_list|()
operator|.
name|setTerm
argument_list|(
name|trx
operator|.
name|getLogEntry
argument_list|()
operator|.
name|getTerm
argument_list|()
argument_list|)
operator|.
name|setLogIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|long
name|applyTxnStartTime
init|=
name|Time
operator|.
name|monotonicNowNanos
argument_list|()
decl_stmt|;
try|try
block|{
name|applyTransactionSemaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incNumApplyTransactionsOps
argument_list|()
expr_stmt|;
name|ContainerCommandRequestProto
name|requestProto
init|=
name|getContainerCommandRequestProto
argument_list|(
name|trx
operator|.
name|getStateMachineLogEntry
argument_list|()
operator|.
name|getLogData
argument_list|()
argument_list|)
decl_stmt|;
name|Type
name|cmdType
init|=
name|requestProto
operator|.
name|getCmdType
argument_list|()
decl_stmt|;
comment|// Make sure that in write chunk, the user data is not set
if|if
condition|(
name|cmdType
operator|==
name|Type
operator|.
name|WriteChunk
condition|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|requestProto
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getData
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStage
argument_list|(
name|DispatcherContext
operator|.
name|WriteChunkStage
operator|.
name|COMMIT_DATA
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmdType
operator|==
name|Type
operator|.
name|WriteChunk
operator|||
name|cmdType
operator|==
name|Type
operator|.
name|PutSmallFile
condition|)
block|{
name|builder
operator|.
name|setCreateContainerSet
argument_list|(
name|createContainerSet
argument_list|)
expr_stmt|;
block|}
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|applyTransactionFuture
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Ensure the command gets executed in a separate thread than
comment|// stateMachineUpdater thread which is calling applyTransaction here.
name|CompletableFuture
argument_list|<
name|ContainerCommandResponseProto
argument_list|>
name|future
init|=
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
parameter_list|()
lambda|->
name|runCommand
argument_list|(
name|requestProto
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|getCommandExecutor
argument_list|(
name|requestProto
argument_list|)
argument_list|)
decl_stmt|;
name|future
operator|.
name|thenApply
argument_list|(
name|r
lambda|->
block|{
if|if
condition|(
name|trx
operator|.
name|getServerRole
argument_list|()
operator|==
name|RaftPeerRole
operator|.
name|LEADER
condition|)
block|{
name|long
name|startTime
init|=
operator|(
name|long
operator|)
name|trx
operator|.
name|getStateMachineContext
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|incPipelineLatency
argument_list|(
name|cmdType
argument_list|,
name|Time
operator|.
name|monotonicNowNanos
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|getResult
argument_list|()
operator|!=
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
condition|)
block|{
name|StorageContainerException
name|sce
init|=
operator|new
name|StorageContainerException
argument_list|(
name|r
operator|.
name|getMessage
argument_list|()
argument_list|,
name|r
operator|.
name|getResult
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"gid {} : ApplyTransaction failed. cmd {} logIndex {} msg : "
operator|+
literal|"{} Container Result: {}"
argument_list|,
name|gid
argument_list|,
name|r
operator|.
name|getCmdType
argument_list|()
argument_list|,
name|index
argument_list|,
name|r
operator|.
name|getMessage
argument_list|()
argument_list|,
name|r
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incNumApplyTransactionsFails
argument_list|()
expr_stmt|;
comment|// Since the applyTransaction now is completed exceptionally,
comment|// before any further snapshot is taken , the exception will be
comment|// caught in stateMachineUpdater in Ratis and ratis server will
comment|// shutdown.
name|applyTransactionFuture
operator|.
name|completeExceptionally
argument_list|(
name|sce
argument_list|)
expr_stmt|;
name|isStateMachineHealthy
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ratisServer
operator|.
name|handleApplyTransactionFailure
argument_list|(
name|gid
argument_list|,
name|trx
operator|.
name|getServerRole
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"gid {} : ApplyTransaction completed. cmd {} logIndex {} msg : "
operator|+
literal|"{} Container Result: {}"
argument_list|,
name|gid
argument_list|,
name|r
operator|.
name|getCmdType
argument_list|()
argument_list|,
name|index
argument_list|,
name|r
operator|.
name|getMessage
argument_list|()
argument_list|,
name|r
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|applyTransactionFuture
operator|.
name|complete
argument_list|(
name|r
operator|::
name|toByteString
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmdType
operator|==
name|Type
operator|.
name|WriteChunk
operator|||
name|cmdType
operator|==
name|Type
operator|.
name|PutSmallFile
condition|)
block|{
name|metrics
operator|.
name|incNumBytesCommittedCount
argument_list|(
name|requestProto
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getChunkData
argument_list|()
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add the entry to the applyTransactionCompletionMap only if the
comment|// stateMachine is healthy i.e, there has been no applyTransaction
comment|// failures before.
if|if
condition|(
name|isStateMachineHealthy
operator|.
name|get
argument_list|()
condition|)
block|{
specifier|final
name|Long
name|previous
init|=
name|applyTransactionCompletionMap
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|trx
operator|.
name|getLogEntry
argument_list|()
operator|.
name|getTerm
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|previous
operator|==
literal|null
argument_list|)
expr_stmt|;
name|updateLastApplied
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|applyTransactionFuture
return|;
block|}
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|r
parameter_list|,
name|t
parameter_list|)
lambda|->
block|{
name|applyTransactionSemaphore
operator|.
name|release
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|recordApplyTransactionCompletion
argument_list|(
name|Time
operator|.
name|monotonicNowNanos
argument_list|()
operator|-
name|applyTxnStartTime
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|applyTransactionFuture
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|metrics
operator|.
name|incNumApplyTransactionsFails
argument_list|()
expr_stmt|;
return|return
name|completeExceptionally
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
DECL|method|completeExceptionally (Exception e)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|completeExceptionally
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|evictStateMachineCache ()
specifier|public
name|void
name|evictStateMachineCache
parameter_list|()
block|{
name|stateMachineDataCache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
name|stateMachineDataCache
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|notifySlowness (RoleInfoProto roleInfoProto)
specifier|public
name|void
name|notifySlowness
parameter_list|(
name|RoleInfoProto
name|roleInfoProto
parameter_list|)
block|{
name|ratisServer
operator|.
name|handleNodeSlowness
argument_list|(
name|gid
argument_list|,
name|roleInfoProto
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|notifyExtendedNoLeader (RoleInfoProto roleInfoProto)
specifier|public
name|void
name|notifyExtendedNoLeader
parameter_list|(
name|RoleInfoProto
name|roleInfoProto
parameter_list|)
block|{
name|ratisServer
operator|.
name|handleNoLeader
argument_list|(
name|gid
argument_list|,
name|roleInfoProto
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|notifyNotLeader (Collection<TransactionContext> pendingEntries)
specifier|public
name|void
name|notifyNotLeader
parameter_list|(
name|Collection
argument_list|<
name|TransactionContext
argument_list|>
name|pendingEntries
parameter_list|)
throws|throws
name|IOException
block|{
name|evictStateMachineCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|notifyLogFailed (Throwable t, LogEntryProto failedEntry)
specifier|public
name|void
name|notifyLogFailed
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|LogEntryProto
name|failedEntry
parameter_list|)
block|{
name|ratisServer
operator|.
name|handleNodeLogFailure
argument_list|(
name|gid
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|notifyInstallSnapshotFromLeader ( RoleInfoProto roleInfoProto, TermIndex firstTermIndexInLog)
specifier|public
name|CompletableFuture
argument_list|<
name|TermIndex
argument_list|>
name|notifyInstallSnapshotFromLeader
parameter_list|(
name|RoleInfoProto
name|roleInfoProto
parameter_list|,
name|TermIndex
name|firstTermIndexInLog
parameter_list|)
block|{
name|ratisServer
operator|.
name|handleInstallSnapshotFromLeader
argument_list|(
name|gid
argument_list|,
name|roleInfoProto
argument_list|,
name|firstTermIndexInLog
argument_list|)
expr_stmt|;
specifier|final
name|CompletableFuture
argument_list|<
name|TermIndex
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|future
operator|.
name|complete
argument_list|(
name|firstTermIndexInLog
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|evictStateMachineCache
argument_list|()
expr_stmt|;
for|for
control|(
name|ExecutorService
name|executor
range|:
name|executors
control|)
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

