begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.ozoneimpl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|Canceler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|DataTransferThrottler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|HddsVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * VolumeScanner scans a single volume.  Each VolumeScanner has its own thread.  *<p>They are all managed by the DataNode's BlockScanner.  */
end_comment

begin_class
DECL|class|ContainerDataScanner
specifier|public
class|class
name|ContainerDataScanner
extends|extends
name|Thread
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerDataScanner
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * The volume that we're scanning.    */
DECL|field|volume
specifier|private
specifier|final
name|HddsVolume
name|volume
decl_stmt|;
DECL|field|controller
specifier|private
specifier|final
name|ContainerController
name|controller
decl_stmt|;
DECL|field|throttler
specifier|private
specifier|final
name|DataTransferThrottler
name|throttler
decl_stmt|;
DECL|field|canceler
specifier|private
specifier|final
name|Canceler
name|canceler
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|ContainerDataScrubberMetrics
name|metrics
decl_stmt|;
DECL|field|dataScanInterval
specifier|private
specifier|final
name|long
name|dataScanInterval
decl_stmt|;
comment|/**    * True if the thread is stopping.<p/>    * Protected by this object's lock.    */
DECL|field|stopping
specifier|private
specifier|volatile
name|boolean
name|stopping
init|=
literal|false
decl_stmt|;
DECL|method|ContainerDataScanner (ContainerScrubberConfiguration conf, ContainerController controller, HddsVolume volume)
specifier|public
name|ContainerDataScanner
parameter_list|(
name|ContainerScrubberConfiguration
name|conf
parameter_list|,
name|ContainerController
name|controller
parameter_list|,
name|HddsVolume
name|volume
parameter_list|)
block|{
name|this
operator|.
name|controller
operator|=
name|controller
expr_stmt|;
name|this
operator|.
name|volume
operator|=
name|volume
expr_stmt|;
name|dataScanInterval
operator|=
name|conf
operator|.
name|getDataScanInterval
argument_list|()
expr_stmt|;
name|throttler
operator|=
operator|new
name|HddsDataTransferThrottler
argument_list|(
name|conf
operator|.
name|getBandwidthPerVolume
argument_list|()
argument_list|)
expr_stmt|;
name|canceler
operator|=
operator|new
name|Canceler
argument_list|()
expr_stmt|;
name|metrics
operator|=
name|ContainerDataScrubberMetrics
operator|.
name|create
argument_list|(
name|volume
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|setName
argument_list|(
literal|"ContainerDataScanner("
operator|+
name|volume
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"{}: thread starting."
argument_list|,
name|this
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|stopping
condition|)
block|{
name|runIteration
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|resetNumContainersScanned
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|resetNumUnhealthyContainers
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"{} exiting."
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"{} exiting because of exception "
argument_list|,
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|runIteration ()
specifier|public
name|void
name|runIteration
parameter_list|()
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Container
argument_list|<
name|?
argument_list|>
argument_list|>
name|itr
init|=
name|controller
operator|.
name|getContainers
argument_list|(
name|volume
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|stopping
operator|&&
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Container
name|c
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|shouldScanData
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|scanData
argument_list|(
name|throttler
argument_list|,
name|canceler
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|incNumUnHealthyContainers
argument_list|()
expr_stmt|;
name|controller
operator|.
name|markContainerUnhealthy
argument_list|(
name|c
operator|.
name|getContainerData
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|long
name|containerId
init|=
name|c
operator|.
name|getContainerData
argument_list|()
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected exception while scanning container "
operator|+
name|containerId
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|metrics
operator|.
name|incNumContainersScanned
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|long
name|totalDuration
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
decl_stmt|;
if|if
condition|(
operator|!
name|stopping
condition|)
block|{
if|if
condition|(
name|metrics
operator|.
name|getNumContainersScanned
argument_list|()
operator|>
literal|0
condition|)
block|{
name|metrics
operator|.
name|incNumScanIterations
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed an iteration of container data scrubber in"
operator|+
literal|" {} minutes."
operator|+
literal|" Number of iterations (since the data-node restart) : {}"
operator|+
literal|", Number of containers scanned in this iteration : {}"
operator|+
literal|", Number of unhealthy containers found in this iteration : {}"
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMinutes
argument_list|(
name|totalDuration
argument_list|)
argument_list|,
name|metrics
operator|.
name|getNumScanIterations
argument_list|()
argument_list|,
name|metrics
operator|.
name|getNumContainersScanned
argument_list|()
argument_list|,
name|metrics
operator|.
name|getNumUnHealthyContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|elapsedMillis
init|=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|totalDuration
argument_list|)
decl_stmt|;
name|long
name|remainingSleep
init|=
name|dataScanInterval
operator|-
name|elapsedMillis
decl_stmt|;
if|if
condition|(
name|remainingSleep
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|remainingSleep
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{         }
block|}
block|}
block|}
DECL|method|shutdown ()
specifier|public
specifier|synchronized
name|void
name|shutdown
parameter_list|()
block|{
name|this
operator|.
name|stopping
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|canceler
operator|.
name|cancel
argument_list|(
literal|"ContainerDataScanner("
operator|+
name|volume
operator|+
literal|") is shutting down"
argument_list|)
expr_stmt|;
name|this
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected exception while stopping data scanner for volume "
operator|+
name|volume
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getMetrics ()
specifier|public
name|ContainerDataScrubberMetrics
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ContainerDataScanner("
operator|+
name|volume
operator|+
literal|", "
operator|+
name|volume
operator|.
name|getStorageID
argument_list|()
operator|+
literal|")"
return|;
block|}
DECL|class|HddsDataTransferThrottler
specifier|private
class|class
name|HddsDataTransferThrottler
extends|extends
name|DataTransferThrottler
block|{
DECL|method|HddsDataTransferThrottler (long bandwidthPerSec)
name|HddsDataTransferThrottler
parameter_list|(
name|long
name|bandwidthPerSec
parameter_list|)
block|{
name|super
argument_list|(
name|bandwidthPerSec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|throttle (long numOfBytes)
specifier|public
specifier|synchronized
name|void
name|throttle
parameter_list|(
name|long
name|numOfBytes
parameter_list|)
block|{
name|ContainerDataScanner
operator|.
name|this
operator|.
name|metrics
operator|.
name|incNumBytesScanned
argument_list|(
name|numOfBytes
argument_list|)
expr_stmt|;
name|super
operator|.
name|throttle
argument_list|(
name|numOfBytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|throttle (long numOfBytes, Canceler c)
specifier|public
specifier|synchronized
name|void
name|throttle
parameter_list|(
name|long
name|numOfBytes
parameter_list|,
name|Canceler
name|c
parameter_list|)
block|{
name|ContainerDataScanner
operator|.
name|this
operator|.
name|metrics
operator|.
name|incNumBytesScanned
argument_list|(
name|numOfBytes
argument_list|)
expr_stmt|;
name|super
operator|.
name|throttle
argument_list|(
name|numOfBytes
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

