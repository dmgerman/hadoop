begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.statemachine
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|VersionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|StorageContainerDatanodeProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZonedDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|HddsServerUtil
operator|.
name|getLogWarnInterval
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|HddsServerUtil
operator|.
name|getScmHeartbeatInterval
import|;
end_import

begin_comment
comment|/**  * Endpoint is used as holder class that keeps state around the RPC endpoint.  */
end_comment

begin_class
DECL|class|EndpointStateMachine
specifier|public
class|class
name|EndpointStateMachine
implements|implements
name|Closeable
implements|,
name|EndpointStateMachineMBean
block|{
specifier|static
specifier|final
name|Logger
DECL|field|LOG
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EndpointStateMachine
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endPoint
specifier|private
specifier|final
name|StorageContainerDatanodeProtocolClientSideTranslatorPB
name|endPoint
decl_stmt|;
DECL|field|missedCount
specifier|private
specifier|final
name|AtomicLong
name|missedCount
decl_stmt|;
DECL|field|address
specifier|private
specifier|final
name|InetSocketAddress
name|address
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Lock
name|lock
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|state
specifier|private
name|EndPointStates
name|state
decl_stmt|;
DECL|field|version
specifier|private
name|VersionResponse
name|version
decl_stmt|;
DECL|field|lastSuccessfulHeartbeat
specifier|private
name|ZonedDateTime
name|lastSuccessfulHeartbeat
decl_stmt|;
comment|/**    * Constructs RPC Endpoints.    *    * @param endPoint - RPC endPoint.    */
DECL|method|EndpointStateMachine (InetSocketAddress address, StorageContainerDatanodeProtocolClientSideTranslatorPB endPoint, Configuration conf)
specifier|public
name|EndpointStateMachine
parameter_list|(
name|InetSocketAddress
name|address
parameter_list|,
name|StorageContainerDatanodeProtocolClientSideTranslatorPB
name|endPoint
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|endPoint
operator|=
name|endPoint
expr_stmt|;
name|this
operator|.
name|missedCount
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
name|state
operator|=
name|EndPointStates
operator|.
name|getInitState
argument_list|()
expr_stmt|;
name|lock
operator|=
operator|new
name|ReentrantLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * Takes a lock on this EndPoint so that other threads don't use this while we    * are trying to communicate via this endpoint.    */
DECL|method|lock ()
specifier|public
name|void
name|lock
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Unlocks this endpoint.    */
DECL|method|unlock ()
specifier|public
name|void
name|unlock
parameter_list|()
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns the version that we read from the server if anyone asks .    *    * @return - Version Response.    */
DECL|method|getVersion ()
specifier|public
name|VersionResponse
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
comment|/**    * Sets the Version reponse we recieved from the SCM.    *    * @param version VersionResponse    */
DECL|method|setVersion (VersionResponse version)
specifier|public
name|void
name|setVersion
parameter_list|(
name|VersionResponse
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
comment|/**    * Returns the current State this end point is in.    *    * @return - getState.    */
DECL|method|getState ()
specifier|public
name|EndPointStates
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|getVersionNumber ()
specifier|public
name|int
name|getVersionNumber
parameter_list|()
block|{
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
return|return
name|version
operator|.
name|getProtobufMessage
argument_list|()
operator|.
name|getSoftwareVersion
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**    * Sets the endpoint state.    *    * @param epState - end point state.    */
DECL|method|setState (EndPointStates epState)
specifier|public
name|EndPointStates
name|setState
parameter_list|(
name|EndPointStates
name|epState
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|epState
expr_stmt|;
return|return
name|this
operator|.
name|state
return|;
block|}
comment|/**    * Closes the connection.    *    * @throws IOException    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|endPoint
operator|!=
literal|null
condition|)
block|{
name|endPoint
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * We maintain a count of how many times we missed communicating with a    * specific SCM. This is not made atomic since the access to this is always    * guarded by the read or write lock. That is, it is serialized.    */
DECL|method|incMissed ()
specifier|public
name|void
name|incMissed
parameter_list|()
block|{
name|this
operator|.
name|missedCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns the value of the missed count.    *    * @return int    */
DECL|method|getMissedCount ()
specifier|public
name|long
name|getMissedCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|missedCount
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getAddressString ()
specifier|public
name|String
name|getAddressString
parameter_list|()
block|{
return|return
name|getAddress
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|zeroMissedCount ()
specifier|public
name|void
name|zeroMissedCount
parameter_list|()
block|{
name|this
operator|.
name|missedCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the InetAddress of the endPoint.    *    * @return - EndPoint.    */
DECL|method|getAddress ()
specifier|public
name|InetSocketAddress
name|getAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|address
return|;
block|}
comment|/**    * Returns real RPC endPoint.    *    * @return rpc client.    */
specifier|public
name|StorageContainerDatanodeProtocolClientSideTranslatorPB
DECL|method|getEndPoint ()
name|getEndPoint
parameter_list|()
block|{
return|return
name|endPoint
return|;
block|}
comment|/**    * Returns the string that represents this endpoint.    *    * @return - String    */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|address
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Logs exception if needed.    *  @param ex         - Exception    */
DECL|method|logIfNeeded (Exception ex)
specifier|public
name|void
name|logIfNeeded
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getMissedCount
argument_list|()
operator|%
name|getLogWarnInterval
argument_list|(
name|conf
argument_list|)
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to communicate to SCM server at {} for past {} seconds."
argument_list|,
name|this
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostString
argument_list|()
operator|+
literal|":"
operator|+
name|this
operator|.
name|getAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|this
operator|.
name|getMissedCount
argument_list|()
operator|*
name|getScmHeartbeatInterval
argument_list|(
name|this
operator|.
name|conf
argument_list|)
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Incrementing the Missed count. Ex : {}"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|incMissed
argument_list|()
expr_stmt|;
block|}
comment|/**    * States that an Endpoint can be in.    *<p>    * This is a sorted list of states that EndPoint will traverse.    *<p>    * GetNextState will move this enum from getInitState to getLastState.    */
DECL|enum|EndPointStates
specifier|public
enum|enum
name|EndPointStates
block|{
DECL|enumConstant|GETVERSION
name|GETVERSION
argument_list|(
literal|1
argument_list|)
block|,
DECL|enumConstant|REGISTER
name|REGISTER
argument_list|(
literal|2
argument_list|)
block|,
DECL|enumConstant|HEARTBEAT
name|HEARTBEAT
argument_list|(
literal|3
argument_list|)
block|,
DECL|enumConstant|SHUTDOWN
name|SHUTDOWN
argument_list|(
literal|4
argument_list|)
block|;
comment|// if you add value after this please edit getLastState too.
DECL|field|value
specifier|private
specifier|final
name|int
name|value
decl_stmt|;
comment|/**      * Constructs endPointStates.      *      * @param value  state.      */
DECL|method|EndPointStates (int value)
name|EndPointStates
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Returns the first State.      *      * @return First State.      */
DECL|method|getInitState ()
specifier|public
specifier|static
name|EndPointStates
name|getInitState
parameter_list|()
block|{
return|return
name|GETVERSION
return|;
block|}
comment|/**      * The last state of endpoint states.      *      * @return last state.      */
DECL|method|getLastState ()
specifier|public
specifier|static
name|EndPointStates
name|getLastState
parameter_list|()
block|{
return|return
name|SHUTDOWN
return|;
block|}
comment|/**      * returns the numeric value associated with the endPoint.      *      * @return int.      */
DECL|method|getValue ()
specifier|public
name|int
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**      * Returns the next logical state that endPoint should move to.      * The next state is computed by adding 1 to the current state.      *      * @return NextState.      */
DECL|method|getNextState ()
specifier|public
name|EndPointStates
name|getNextState
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|getValue
argument_list|()
operator|<
name|getLastState
argument_list|()
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|int
name|stateValue
init|=
name|this
operator|.
name|getValue
argument_list|()
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|EndPointStates
name|iter
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|stateValue
operator|==
name|iter
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
name|iter
return|;
block|}
block|}
block|}
return|return
name|getLastState
argument_list|()
return|;
block|}
block|}
DECL|method|getLastSuccessfulHeartbeat ()
specifier|public
name|long
name|getLastSuccessfulHeartbeat
parameter_list|()
block|{
return|return
name|lastSuccessfulHeartbeat
operator|==
literal|null
condition|?
literal|0
else|:
name|lastSuccessfulHeartbeat
operator|.
name|toEpochSecond
argument_list|()
return|;
block|}
DECL|method|setLastSuccessfulHeartbeat ( ZonedDateTime lastSuccessfulHeartbeat)
specifier|public
name|void
name|setLastSuccessfulHeartbeat
parameter_list|(
name|ZonedDateTime
name|lastSuccessfulHeartbeat
parameter_list|)
block|{
name|this
operator|.
name|lastSuccessfulHeartbeat
operator|=
name|lastSuccessfulHeartbeat
expr_stmt|;
block|}
block|}
end_class

end_unit

