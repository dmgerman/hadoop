begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.ââSee the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.ââThe ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.ââYou may obtain a copy of the License at  *  * ââââ http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.transport.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|exception
operator|.
name|SCMSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|token
operator|.
name|TokenVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|grpc
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|grpc
operator|.
name|Contexts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|grpc
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|grpc
operator|.
name|ServerCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|grpc
operator|.
name|ServerCallHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|grpc
operator|.
name|ServerInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|grpc
operator|.
name|Status
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OBT_METADATA_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|USER_METADATA_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|UGI_CTX_KEY
import|;
end_import

begin_comment
comment|/**  * Grpc Server Interceptor for Ozone Block token.  */
end_comment

begin_class
DECL|class|ServerCredentialInterceptor
specifier|public
class|class
name|ServerCredentialInterceptor
implements|implements
name|ServerInterceptor
block|{
DECL|field|NOOP_LISTENER
specifier|private
specifier|static
specifier|final
name|ServerCall
operator|.
name|Listener
name|NOOP_LISTENER
init|=
operator|new
name|ServerCall
operator|.
name|Listener
argument_list|()
block|{   }
decl_stmt|;
DECL|field|verifier
specifier|private
specifier|final
name|TokenVerifier
name|verifier
decl_stmt|;
DECL|method|ServerCredentialInterceptor (TokenVerifier verifier)
name|ServerCredentialInterceptor
parameter_list|(
name|TokenVerifier
name|verifier
parameter_list|)
block|{
name|this
operator|.
name|verifier
operator|=
name|verifier
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|interceptCall ( ServerCall<ReqT, RespT> call, Metadata headers, ServerCallHandler<ReqT, RespT> next)
specifier|public
parameter_list|<
name|ReqT
parameter_list|,
name|RespT
parameter_list|>
name|ServerCall
operator|.
name|Listener
argument_list|<
name|ReqT
argument_list|>
name|interceptCall
parameter_list|(
name|ServerCall
argument_list|<
name|ReqT
argument_list|,
name|RespT
argument_list|>
name|call
parameter_list|,
name|Metadata
name|headers
parameter_list|,
name|ServerCallHandler
argument_list|<
name|ReqT
argument_list|,
name|RespT
argument_list|>
name|next
parameter_list|)
block|{
name|String
name|token
init|=
name|headers
operator|.
name|get
argument_list|(
name|OBT_METADATA_KEY
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|headers
operator|.
name|get
argument_list|(
name|USER_METADATA_KEY
argument_list|)
decl_stmt|;
name|Context
name|ctx
init|=
name|Context
operator|.
name|current
argument_list|()
decl_stmt|;
try|try
block|{
name|UserGroupInformation
name|ugi
init|=
name|verifier
operator|.
name|verify
argument_list|(
name|user
argument_list|,
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|ugi
operator|==
literal|null
condition|)
block|{
name|call
operator|.
name|close
argument_list|(
name|Status
operator|.
name|UNAUTHENTICATED
operator|.
name|withDescription
argument_list|(
literal|"Missing Block "
operator|+
literal|"Token from headers when block token is required."
argument_list|)
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|NOOP_LISTENER
return|;
block|}
else|else
block|{
name|ctx
operator|=
name|ctx
operator|.
name|withValue
argument_list|(
name|UGI_CTX_KEY
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SCMSecurityException
name|e
parameter_list|)
block|{
name|call
operator|.
name|close
argument_list|(
name|Status
operator|.
name|UNAUTHENTICATED
operator|.
name|withDescription
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|NOOP_LISTENER
return|;
block|}
return|return
name|Contexts
operator|.
name|interceptCall
argument_list|(
name|ctx
argument_list|,
name|call
argument_list|,
name|headers
argument_list|,
name|next
argument_list|)
return|;
block|}
block|}
end_class

end_unit

