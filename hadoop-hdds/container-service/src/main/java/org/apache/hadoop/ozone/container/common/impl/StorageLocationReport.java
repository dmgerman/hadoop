begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMStorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|StorageTypeProto
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Storage location stats of datanodes that provide back store for containers.  *  */
end_comment

begin_class
DECL|class|StorageLocationReport
specifier|public
class|class
name|StorageLocationReport
block|{
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|failed
specifier|private
specifier|final
name|boolean
name|failed
decl_stmt|;
DECL|field|capacity
specifier|private
specifier|final
name|long
name|capacity
decl_stmt|;
DECL|field|scmUsed
specifier|private
specifier|final
name|long
name|scmUsed
decl_stmt|;
DECL|field|remaining
specifier|private
specifier|final
name|long
name|remaining
decl_stmt|;
DECL|field|storageType
specifier|private
specifier|final
name|StorageType
name|storageType
decl_stmt|;
DECL|field|storageLocation
specifier|private
specifier|final
name|String
name|storageLocation
decl_stmt|;
DECL|method|StorageLocationReport (String id, boolean failed, long capacity, long scmUsed, long remaining, StorageType storageType, String storageLocation)
specifier|private
name|StorageLocationReport
parameter_list|(
name|String
name|id
parameter_list|,
name|boolean
name|failed
parameter_list|,
name|long
name|capacity
parameter_list|,
name|long
name|scmUsed
parameter_list|,
name|long
name|remaining
parameter_list|,
name|StorageType
name|storageType
parameter_list|,
name|String
name|storageLocation
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|failed
operator|=
name|failed
expr_stmt|;
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
name|this
operator|.
name|scmUsed
operator|=
name|scmUsed
expr_stmt|;
name|this
operator|.
name|remaining
operator|=
name|remaining
expr_stmt|;
name|this
operator|.
name|storageType
operator|=
name|storageType
expr_stmt|;
name|this
operator|.
name|storageLocation
operator|=
name|storageLocation
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|isFailed ()
specifier|public
name|boolean
name|isFailed
parameter_list|()
block|{
return|return
name|failed
return|;
block|}
DECL|method|getCapacity ()
specifier|public
name|long
name|getCapacity
parameter_list|()
block|{
return|return
name|capacity
return|;
block|}
DECL|method|getScmUsed ()
specifier|public
name|long
name|getScmUsed
parameter_list|()
block|{
return|return
name|scmUsed
return|;
block|}
DECL|method|getRemaining ()
specifier|public
name|long
name|getRemaining
parameter_list|()
block|{
return|return
name|remaining
return|;
block|}
DECL|method|getStorageLocation ()
specifier|public
name|String
name|getStorageLocation
parameter_list|()
block|{
return|return
name|storageLocation
return|;
block|}
DECL|method|getStorageType ()
specifier|public
name|StorageType
name|getStorageType
parameter_list|()
block|{
return|return
name|storageType
return|;
block|}
DECL|method|getStorageTypeProto ()
specifier|private
name|StorageTypeProto
name|getStorageTypeProto
parameter_list|()
throws|throws
name|IOException
block|{
name|StorageTypeProto
name|storageTypeProto
decl_stmt|;
switch|switch
condition|(
name|getStorageType
argument_list|()
condition|)
block|{
case|case
name|SSD
case|:
name|storageTypeProto
operator|=
name|StorageTypeProto
operator|.
name|SSD
expr_stmt|;
break|break;
case|case
name|DISK
case|:
name|storageTypeProto
operator|=
name|StorageTypeProto
operator|.
name|DISK
expr_stmt|;
break|break;
case|case
name|ARCHIVE
case|:
name|storageTypeProto
operator|=
name|StorageTypeProto
operator|.
name|ARCHIVE
expr_stmt|;
break|break;
case|case
name|PROVIDED
case|:
name|storageTypeProto
operator|=
name|StorageTypeProto
operator|.
name|PROVIDED
expr_stmt|;
break|break;
case|case
name|RAM_DISK
case|:
name|storageTypeProto
operator|=
name|StorageTypeProto
operator|.
name|RAM_DISK
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal Storage Type specified"
argument_list|)
throw|;
block|}
return|return
name|storageTypeProto
return|;
block|}
DECL|method|getStorageType (StorageTypeProto proto)
specifier|private
specifier|static
name|StorageType
name|getStorageType
parameter_list|(
name|StorageTypeProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|StorageType
name|storageType
decl_stmt|;
switch|switch
condition|(
name|proto
condition|)
block|{
case|case
name|SSD
case|:
name|storageType
operator|=
name|StorageType
operator|.
name|SSD
expr_stmt|;
break|break;
case|case
name|DISK
case|:
name|storageType
operator|=
name|StorageType
operator|.
name|DISK
expr_stmt|;
break|break;
case|case
name|ARCHIVE
case|:
name|storageType
operator|=
name|StorageType
operator|.
name|ARCHIVE
expr_stmt|;
break|break;
case|case
name|PROVIDED
case|:
name|storageType
operator|=
name|StorageType
operator|.
name|PROVIDED
expr_stmt|;
break|break;
case|case
name|RAM_DISK
case|:
name|storageType
operator|=
name|StorageType
operator|.
name|RAM_DISK
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal Storage Type specified"
argument_list|)
throw|;
block|}
return|return
name|storageType
return|;
block|}
comment|/**    * Returns the SCMStorageReport protoBuf message for the Storage Location    * report.    * @return SCMStorageReport    * @throws IOException In case, the storage type specified is invalid.    */
DECL|method|getProtoBufMessage ()
specifier|public
name|SCMStorageReport
name|getProtoBufMessage
parameter_list|()
throws|throws
name|IOException
block|{
name|SCMStorageReport
operator|.
name|Builder
name|srb
init|=
name|SCMStorageReport
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
return|return
name|srb
operator|.
name|setStorageUuid
argument_list|(
name|getId
argument_list|()
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|getCapacity
argument_list|()
argument_list|)
operator|.
name|setScmUsed
argument_list|(
name|getScmUsed
argument_list|()
argument_list|)
operator|.
name|setRemaining
argument_list|(
name|getRemaining
argument_list|()
argument_list|)
operator|.
name|setStorageType
argument_list|(
name|getStorageTypeProto
argument_list|()
argument_list|)
operator|.
name|setStorageLocation
argument_list|(
name|getStorageLocation
argument_list|()
argument_list|)
operator|.
name|setFailed
argument_list|(
name|isFailed
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns the StorageLocationReport from the protoBuf message.    * @param report SCMStorageReport    * @return StorageLocationReport    * @throws IOException in case of invalid storage type    */
DECL|method|getFromProtobuf (SCMStorageReport report)
specifier|public
specifier|static
name|StorageLocationReport
name|getFromProtobuf
parameter_list|(
name|SCMStorageReport
name|report
parameter_list|)
throws|throws
name|IOException
block|{
name|StorageLocationReport
operator|.
name|Builder
name|builder
init|=
name|StorageLocationReport
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setId
argument_list|(
name|report
operator|.
name|getStorageUuid
argument_list|()
argument_list|)
operator|.
name|setStorageLocation
argument_list|(
name|report
operator|.
name|getStorageLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|report
operator|.
name|hasCapacity
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setCapacity
argument_list|(
name|report
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|report
operator|.
name|hasScmUsed
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setScmUsed
argument_list|(
name|report
operator|.
name|getScmUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|report
operator|.
name|hasStorageType
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setStorageType
argument_list|(
name|getStorageType
argument_list|(
name|report
operator|.
name|getStorageType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|report
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setRemaining
argument_list|(
name|report
operator|.
name|getRemaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|report
operator|.
name|hasFailed
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setFailed
argument_list|(
name|report
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns StorageLocation.Builder instance.    *    * @return StorageLocation.Builder    */
DECL|method|newBuilder ()
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**    * Builder class for building StorageLocationReport.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|failed
specifier|private
name|boolean
name|failed
decl_stmt|;
DECL|field|capacity
specifier|private
name|long
name|capacity
decl_stmt|;
DECL|field|scmUsed
specifier|private
name|long
name|scmUsed
decl_stmt|;
DECL|field|remaining
specifier|private
name|long
name|remaining
decl_stmt|;
DECL|field|storageType
specifier|private
name|StorageType
name|storageType
decl_stmt|;
DECL|field|storageLocation
specifier|private
name|String
name|storageLocation
decl_stmt|;
comment|/**      * Sets the storageId.      *      * @param id storageId      * @return StorageLocationReport.Builder      */
DECL|method|setId (String id)
specifier|public
name|Builder
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets whether the volume failed or not.      *      * @param failed whether volume failed or not      * @return StorageLocationReport.Builder      */
DECL|method|setFailed (boolean failed)
specifier|public
name|Builder
name|setFailed
parameter_list|(
name|boolean
name|failed
parameter_list|)
block|{
name|this
operator|.
name|failed
operator|=
name|failed
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the capacity of volume.      *      * @param capacity capacity      * @return StorageLocationReport.Builder      */
DECL|method|setCapacity (long capacity)
specifier|public
name|Builder
name|setCapacity
parameter_list|(
name|long
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the scmUsed Value.      *      * @param scmUsed storage space used by scm      * @return StorageLocationReport.Builder      */
DECL|method|setScmUsed (long scmUsed)
specifier|public
name|Builder
name|setScmUsed
parameter_list|(
name|long
name|scmUsed
parameter_list|)
block|{
name|this
operator|.
name|scmUsed
operator|=
name|scmUsed
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the remaining free space value.      *      * @param remaining remaining free space      * @return StorageLocationReport.Builder      */
DECL|method|setRemaining (long remaining)
specifier|public
name|Builder
name|setRemaining
parameter_list|(
name|long
name|remaining
parameter_list|)
block|{
name|this
operator|.
name|remaining
operator|=
name|remaining
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the storageType.      *      * @param storageType type of the storage used      * @return StorageLocationReport.Builder      */
DECL|method|setStorageType (StorageType storageType)
specifier|public
name|Builder
name|setStorageType
parameter_list|(
name|StorageType
name|storageType
parameter_list|)
block|{
name|this
operator|.
name|storageType
operator|=
name|storageType
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the storageLocation.      *      * @param storageLocation location of the volume      * @return StorageLocationReport.Builder      */
DECL|method|setStorageLocation (String storageLocation)
specifier|public
name|Builder
name|setStorageLocation
parameter_list|(
name|String
name|storageLocation
parameter_list|)
block|{
name|this
operator|.
name|storageLocation
operator|=
name|storageLocation
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Builds and returns StorageLocationReport instance.      *      * @return StorageLocationReport      */
DECL|method|build ()
specifier|public
name|StorageLocationReport
name|build
parameter_list|()
block|{
return|return
operator|new
name|StorageLocationReport
argument_list|(
name|id
argument_list|,
name|failed
argument_list|,
name|capacity
argument_list|,
name|scmUsed
argument_list|,
name|remaining
argument_list|,
name|storageType
argument_list|,
name|storageLocation
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

