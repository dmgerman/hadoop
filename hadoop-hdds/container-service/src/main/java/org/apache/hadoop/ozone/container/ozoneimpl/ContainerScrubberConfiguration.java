begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.ozoneimpl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|ConfigGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|ConfigTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|ConfigType
import|;
end_import

begin_comment
comment|/**  * This class defines configuration parameters for container scrubber.  **/
end_comment

begin_class
annotation|@
name|ConfigGroup
argument_list|(
name|prefix
operator|=
literal|"hdds.containerscrub"
argument_list|)
DECL|class|ContainerScrubberConfiguration
specifier|public
class|class
name|ContainerScrubberConfiguration
block|{
DECL|field|enabled
specifier|private
name|boolean
name|enabled
decl_stmt|;
DECL|field|metadataScanInterval
specifier|private
name|long
name|metadataScanInterval
decl_stmt|;
DECL|field|dataScanInterval
specifier|private
name|long
name|dataScanInterval
decl_stmt|;
DECL|field|bandwidthPerVolume
specifier|private
name|long
name|bandwidthPerVolume
decl_stmt|;
annotation|@
name|Config
argument_list|(
name|key
operator|=
literal|"enabled"
argument_list|,
name|type
operator|=
name|ConfigType
operator|.
name|BOOLEAN
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|,
name|tags
operator|=
block|{
name|ConfigTag
operator|.
name|STORAGE
block|}
argument_list|,
name|description
operator|=
literal|"Config parameter to enable container scrubber."
argument_list|)
DECL|method|setEnabled (boolean enabled)
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
block|}
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
annotation|@
name|Config
argument_list|(
name|key
operator|=
literal|"metadata.scan.interval"
argument_list|,
name|type
operator|=
name|ConfigType
operator|.
name|TIME
argument_list|,
name|defaultValue
operator|=
literal|"3h"
argument_list|,
name|tags
operator|=
block|{
name|ConfigTag
operator|.
name|STORAGE
block|}
argument_list|,
name|description
operator|=
literal|"Config parameter define time interval in milliseconds"
operator|+
literal|" between two metadata scans by container scrubber."
argument_list|)
DECL|method|setMetadataScanInterval (long metadataScanInterval)
specifier|public
name|void
name|setMetadataScanInterval
parameter_list|(
name|long
name|metadataScanInterval
parameter_list|)
block|{
name|this
operator|.
name|metadataScanInterval
operator|=
name|metadataScanInterval
expr_stmt|;
block|}
DECL|method|getMetadataScanInterval ()
specifier|public
name|long
name|getMetadataScanInterval
parameter_list|()
block|{
return|return
name|metadataScanInterval
return|;
block|}
annotation|@
name|Config
argument_list|(
name|key
operator|=
literal|"data.scan.interval"
argument_list|,
name|type
operator|=
name|ConfigType
operator|.
name|TIME
argument_list|,
name|defaultValue
operator|=
literal|"1m"
argument_list|,
name|tags
operator|=
block|{
name|ConfigTag
operator|.
name|STORAGE
block|}
argument_list|,
name|description
operator|=
literal|"Minimum time interval between two iterations of container"
operator|+
literal|" data scanning.  If an iteration takes less time than this, the"
operator|+
literal|" scanner will wait before starting the next iteration."
argument_list|)
DECL|method|setDataScanInterval (long dataScanInterval)
specifier|public
name|void
name|setDataScanInterval
parameter_list|(
name|long
name|dataScanInterval
parameter_list|)
block|{
name|this
operator|.
name|dataScanInterval
operator|=
name|dataScanInterval
expr_stmt|;
block|}
DECL|method|getDataScanInterval ()
specifier|public
name|long
name|getDataScanInterval
parameter_list|()
block|{
return|return
name|dataScanInterval
return|;
block|}
annotation|@
name|Config
argument_list|(
name|key
operator|=
literal|"volume.bytes.per.second"
argument_list|,
name|type
operator|=
name|ConfigType
operator|.
name|LONG
argument_list|,
name|defaultValue
operator|=
literal|"1048576"
argument_list|,
name|tags
operator|=
block|{
name|ConfigTag
operator|.
name|STORAGE
block|}
argument_list|,
name|description
operator|=
literal|"Config parameter to throttle I/O bandwidth used"
operator|+
literal|" by scrubber per volume."
argument_list|)
DECL|method|setBandwidthPerVolume (long bandwidthPerVolume)
specifier|public
name|void
name|setBandwidthPerVolume
parameter_list|(
name|long
name|bandwidthPerVolume
parameter_list|)
block|{
name|this
operator|.
name|bandwidthPerVolume
operator|=
name|bandwidthPerVolume
expr_stmt|;
block|}
DECL|method|getBandwidthPerVolume ()
specifier|public
name|long
name|getBandwidthPerVolume
parameter_list|()
block|{
return|return
name|bandwidthPerVolume
return|;
block|}
block|}
end_class

end_unit

