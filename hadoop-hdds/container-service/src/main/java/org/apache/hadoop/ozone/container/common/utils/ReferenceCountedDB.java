begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Class to implement reference counting over instances handed by Container  * Cache.  * Enable DEBUG log below will enable us quickly locate the leaked reference  * from caller stack. When JDK9 StackWalker is available, we can switch to  * StackWalker instead of new Exception().printStackTrace().  */
end_comment

begin_class
DECL|class|ReferenceCountedDB
specifier|public
class|class
name|ReferenceCountedDB
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReferenceCountedDB
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|referenceCount
specifier|private
specifier|final
name|AtomicInteger
name|referenceCount
decl_stmt|;
DECL|field|isEvicted
specifier|private
specifier|final
name|AtomicBoolean
name|isEvicted
decl_stmt|;
DECL|field|store
specifier|private
specifier|final
name|MetadataStore
name|store
decl_stmt|;
DECL|field|containerDBPath
specifier|private
specifier|final
name|String
name|containerDBPath
decl_stmt|;
DECL|method|ReferenceCountedDB (MetadataStore store, String containerDBPath)
specifier|public
name|ReferenceCountedDB
parameter_list|(
name|MetadataStore
name|store
parameter_list|,
name|String
name|containerDBPath
parameter_list|)
block|{
name|this
operator|.
name|referenceCount
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|isEvicted
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|containerDBPath
operator|=
name|containerDBPath
expr_stmt|;
block|}
DECL|method|incrementReference ()
specifier|public
name|void
name|incrementReference
parameter_list|()
block|{
name|this
operator|.
name|referenceCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"IncRef {} to refCnt {} \n"
argument_list|,
name|containerDBPath
argument_list|,
name|referenceCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|Exception
argument_list|()
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|decrementReference ()
specifier|public
name|void
name|decrementReference
parameter_list|()
block|{
name|this
operator|.
name|referenceCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DecRef {} to refCnt {} \n"
argument_list|,
name|containerDBPath
argument_list|,
name|referenceCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|Exception
argument_list|()
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|cleanup
argument_list|()
expr_stmt|;
block|}
DECL|method|setEvicted (boolean checkNoReferences)
specifier|public
name|void
name|setEvicted
parameter_list|(
name|boolean
name|checkNoReferences
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|checkNoReferences
operator|||
operator|(
name|referenceCount
operator|.
name|get
argument_list|()
operator|==
literal|0
operator|)
argument_list|,
literal|"checkNoReferences:%b, referencount:%d, dbPath:%s"
argument_list|,
name|checkNoReferences
argument_list|,
name|referenceCount
operator|.
name|get
argument_list|()
argument_list|,
name|containerDBPath
argument_list|)
expr_stmt|;
name|isEvicted
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
block|}
DECL|method|cleanup ()
specifier|private
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|referenceCount
operator|.
name|get
argument_list|()
operator|==
literal|0
operator|&&
name|isEvicted
operator|.
name|get
argument_list|()
operator|&&
name|store
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Close {} refCnt {}"
argument_list|,
name|containerDBPath
argument_list|,
name|referenceCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing DB. Container: "
operator|+
name|containerDBPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getStore ()
specifier|public
name|MetadataStore
name|getStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|decrementReference
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

