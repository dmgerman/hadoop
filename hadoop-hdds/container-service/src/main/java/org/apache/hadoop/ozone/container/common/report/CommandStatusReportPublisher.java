begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.report
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|report
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|CommandStatus
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|CommandStatusReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|CommandStatus
import|;
end_import

begin_comment
comment|/**  * Publishes CommandStatusReport which will be sent to SCM as part of  * heartbeat. CommandStatusReport consist of the following information:  * - type       : type of command.  * - status     : status of command execution (PENDING, EXECUTED, FAILURE).  * - cmdId      : Command id.  * - msg        : optional message.  */
end_comment

begin_class
DECL|class|CommandStatusReportPublisher
specifier|public
class|class
name|CommandStatusReportPublisher
extends|extends
name|ReportPublisher
argument_list|<
name|CommandStatusReportsProto
argument_list|>
block|{
DECL|field|cmdStatusReportInterval
specifier|private
name|long
name|cmdStatusReportInterval
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
DECL|method|getReportFrequency ()
specifier|protected
name|long
name|getReportFrequency
parameter_list|()
block|{
if|if
condition|(
name|cmdStatusReportInterval
operator|==
operator|-
literal|1
condition|)
block|{
name|cmdStatusReportInterval
operator|=
name|getConf
argument_list|()
operator|.
name|getTimeDuration
argument_list|(
name|HddsConfigKeys
operator|.
name|HDDS_COMMAND_STATUS_REPORT_INTERVAL
argument_list|,
name|HddsConfigKeys
operator|.
name|HDDS_COMMAND_STATUS_REPORT_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
return|return
name|cmdStatusReportInterval
return|;
block|}
annotation|@
name|Override
DECL|method|getReport ()
specifier|protected
name|CommandStatusReportsProto
name|getReport
parameter_list|()
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|CommandStatus
argument_list|>
name|map
init|=
name|this
operator|.
name|getContext
argument_list|()
operator|.
name|getCommandStatusMap
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Long
argument_list|>
name|iterator
init|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|CommandStatusReportsProto
operator|.
name|Builder
name|builder
init|=
name|CommandStatusReportsProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|iterator
operator|.
name|forEachRemaining
argument_list|(
name|key
lambda|->
block|{
name|CommandStatus
name|cmdStatus
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addCmdStatus
argument_list|(
name|cmdStatus
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// If status is still pending then don't remove it from map as
comment|// CommandHandler will change its status when it works on this command.
if|if
condition|(
operator|!
name|cmdStatus
operator|.
name|getStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|Status
operator|.
name|PENDING
argument_list|)
condition|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

