begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.replication
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Simple ContainerDownloaderImplementation to download the missing container  * from the first available datanode.  *<p>  * This is not the most effective implementation as it uses only one source  * for he container download.  */
end_comment

begin_class
DECL|class|SimpleContainerDownloader
specifier|public
class|class
name|SimpleContainerDownloader
implements|implements
name|ContainerDownloader
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SimpleContainerDownloader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|workingDirectory
specifier|private
specifier|final
name|Path
name|workingDirectory
decl_stmt|;
DECL|method|SimpleContainerDownloader (Configuration conf)
specifier|public
name|SimpleContainerDownloader
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|workDirString
init|=
name|conf
operator|.
name|get
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CONTAINER_COPY_WORKDIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|workDirString
operator|==
literal|null
condition|)
block|{
name|workingDirectory
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"container-copy"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|workingDirectory
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|workDirString
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainerDataFromReplicas (long containerId, List<DatanodeDetails> sourceDatanodes)
specifier|public
name|CompletableFuture
argument_list|<
name|Path
argument_list|>
name|getContainerDataFromReplicas
parameter_list|(
name|long
name|containerId
parameter_list|,
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|sourceDatanodes
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Path
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|DatanodeDetails
name|datanode
range|:
name|sourceDatanodes
control|)
block|{
try|try
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|GrpcReplicationClient
name|grpcReplicationClient
init|=
operator|new
name|GrpcReplicationClient
argument_list|(
name|datanode
operator|.
name|getIpAddress
argument_list|()
argument_list|,
name|datanode
operator|.
name|getPort
argument_list|(
name|Name
operator|.
name|STANDALONE
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|workingDirectory
argument_list|)
decl_stmt|;
name|result
operator|=
name|grpcReplicationClient
operator|.
name|download
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|result
operator|.
name|thenApply
argument_list|(
name|CompletableFuture
operator|::
name|completedFuture
argument_list|)
operator|.
name|exceptionally
argument_list|(
name|t
lambda|->
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error on replicating container: "
operator|+
name|containerId
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|GrpcReplicationClient
name|grpcReplicationClient
init|=
operator|new
name|GrpcReplicationClient
argument_list|(
name|datanode
operator|.
name|getIpAddress
argument_list|()
argument_list|,
name|datanode
operator|.
name|getPort
argument_list|(
name|Name
operator|.
name|STANDALONE
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|workingDirectory
argument_list|)
decl_stmt|;
return|return
name|grpcReplicationClient
operator|.
name|download
argument_list|(
name|containerId
argument_list|)
return|;
block|}
argument_list|)
operator|.
name|thenCompose
argument_list|(
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Container %s download from datanode %s was unsuccessful. "
operator|+
literal|"Trying the next datanode"
argument_list|,
name|containerId
argument_list|,
name|datanode
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// noop
block|}
block|}
end_class

end_unit

