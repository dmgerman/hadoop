begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|MapUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|DumperOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|Yaml
import|;
end_import

begin_comment
comment|/**  * Class for creating datanode.id file in yaml format.  */
end_comment

begin_class
DECL|class|DatanodeIdYaml
specifier|public
specifier|final
class|class
name|DatanodeIdYaml
block|{
DECL|method|DatanodeIdYaml ()
specifier|private
name|DatanodeIdYaml
parameter_list|()
block|{
comment|// static helper methods only, no state.
block|}
comment|/**    * Creates a yaml file using DatnodeDetails. This method expects the path    * validation to be performed by the caller.    *    * @param datanodeDetails {@link DatanodeDetails}    * @param path            Path to datnode.id file    */
DECL|method|createDatanodeIdFile (DatanodeDetails datanodeDetails, File path)
specifier|public
specifier|static
name|void
name|createDatanodeIdFile
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|,
name|File
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|DumperOptions
name|options
init|=
operator|new
name|DumperOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setPrettyFlow
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|options
operator|.
name|setDefaultFlowStyle
argument_list|(
name|DumperOptions
operator|.
name|FlowStyle
operator|.
name|FLOW
argument_list|)
expr_stmt|;
name|Yaml
name|yaml
init|=
operator|new
name|Yaml
argument_list|(
name|options
argument_list|)
decl_stmt|;
try|try
init|(
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|path
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
init|)
block|{
name|yaml
operator|.
name|dump
argument_list|(
name|getDatanodeDetailsYaml
argument_list|(
name|datanodeDetails
argument_list|)
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Read datanode.id from file.    */
DECL|method|readDatanodeIdFile (File path)
specifier|public
specifier|static
name|DatanodeDetails
name|readDatanodeIdFile
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|DatanodeDetails
name|datanodeDetails
decl_stmt|;
try|try
init|(
name|FileInputStream
name|inputFileStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|path
argument_list|)
init|)
block|{
name|Yaml
name|yaml
init|=
operator|new
name|Yaml
argument_list|()
decl_stmt|;
name|DatanodeDetailsYaml
name|datanodeDetailsYaml
decl_stmt|;
try|try
block|{
name|datanodeDetailsYaml
operator|=
name|yaml
operator|.
name|loadAs
argument_list|(
name|inputFileStream
argument_list|,
name|DatanodeDetailsYaml
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to parse yaml file."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|DatanodeDetails
operator|.
name|Builder
name|builder
init|=
name|DatanodeDetails
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setUuid
argument_list|(
name|datanodeDetailsYaml
operator|.
name|getUuid
argument_list|()
argument_list|)
operator|.
name|setIpAddress
argument_list|(
name|datanodeDetailsYaml
operator|.
name|getIpAddress
argument_list|()
argument_list|)
operator|.
name|setHostName
argument_list|(
name|datanodeDetailsYaml
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|setCertSerialId
argument_list|(
name|datanodeDetailsYaml
operator|.
name|getCertSerialId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|MapUtils
operator|.
name|isEmpty
argument_list|(
name|datanodeDetailsYaml
operator|.
name|getPortDetails
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|portEntry
range|:
name|datanodeDetailsYaml
operator|.
name|getPortDetails
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|addPort
argument_list|(
name|DatanodeDetails
operator|.
name|newPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|valueOf
argument_list|(
name|portEntry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|portEntry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|datanodeDetails
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|datanodeDetails
return|;
block|}
comment|/**    * Datanode details bean to be written to the yaml file.    */
DECL|class|DatanodeDetailsYaml
specifier|public
specifier|static
class|class
name|DatanodeDetailsYaml
block|{
DECL|field|uuid
specifier|private
name|String
name|uuid
decl_stmt|;
DECL|field|ipAddress
specifier|private
name|String
name|ipAddress
decl_stmt|;
DECL|field|hostName
specifier|private
name|String
name|hostName
decl_stmt|;
DECL|field|certSerialId
specifier|private
name|String
name|certSerialId
decl_stmt|;
DECL|field|portDetails
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|portDetails
decl_stmt|;
DECL|method|DatanodeDetailsYaml ()
specifier|public
name|DatanodeDetailsYaml
parameter_list|()
block|{
comment|// Needed for snake-yaml introspection.
block|}
DECL|method|DatanodeDetailsYaml (String uuid, String ipAddress, String hostName, String certSerialId, Map<String, Integer> portDetails)
specifier|private
name|DatanodeDetailsYaml
parameter_list|(
name|String
name|uuid
parameter_list|,
name|String
name|ipAddress
parameter_list|,
name|String
name|hostName
parameter_list|,
name|String
name|certSerialId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|portDetails
parameter_list|)
block|{
name|this
operator|.
name|uuid
operator|=
name|uuid
expr_stmt|;
name|this
operator|.
name|ipAddress
operator|=
name|ipAddress
expr_stmt|;
name|this
operator|.
name|hostName
operator|=
name|hostName
expr_stmt|;
name|this
operator|.
name|certSerialId
operator|=
name|certSerialId
expr_stmt|;
name|this
operator|.
name|portDetails
operator|=
name|portDetails
expr_stmt|;
block|}
DECL|method|getUuid ()
specifier|public
name|String
name|getUuid
parameter_list|()
block|{
return|return
name|uuid
return|;
block|}
DECL|method|getIpAddress ()
specifier|public
name|String
name|getIpAddress
parameter_list|()
block|{
return|return
name|ipAddress
return|;
block|}
DECL|method|getHostName ()
specifier|public
name|String
name|getHostName
parameter_list|()
block|{
return|return
name|hostName
return|;
block|}
DECL|method|getCertSerialId ()
specifier|public
name|String
name|getCertSerialId
parameter_list|()
block|{
return|return
name|certSerialId
return|;
block|}
DECL|method|getPortDetails ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getPortDetails
parameter_list|()
block|{
return|return
name|portDetails
return|;
block|}
DECL|method|setUuid (String uuid)
specifier|public
name|void
name|setUuid
parameter_list|(
name|String
name|uuid
parameter_list|)
block|{
name|this
operator|.
name|uuid
operator|=
name|uuid
expr_stmt|;
block|}
DECL|method|setIpAddress (String ipAddress)
specifier|public
name|void
name|setIpAddress
parameter_list|(
name|String
name|ipAddress
parameter_list|)
block|{
name|this
operator|.
name|ipAddress
operator|=
name|ipAddress
expr_stmt|;
block|}
DECL|method|setHostName (String hostName)
specifier|public
name|void
name|setHostName
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|this
operator|.
name|hostName
operator|=
name|hostName
expr_stmt|;
block|}
DECL|method|setCertSerialId (String certSerialId)
specifier|public
name|void
name|setCertSerialId
parameter_list|(
name|String
name|certSerialId
parameter_list|)
block|{
name|this
operator|.
name|certSerialId
operator|=
name|certSerialId
expr_stmt|;
block|}
DECL|method|setPortDetails (Map<String, Integer> portDetails)
specifier|public
name|void
name|setPortDetails
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|portDetails
parameter_list|)
block|{
name|this
operator|.
name|portDetails
operator|=
name|portDetails
expr_stmt|;
block|}
block|}
DECL|method|getDatanodeDetailsYaml ( DatanodeDetails datanodeDetails)
specifier|private
specifier|static
name|DatanodeDetailsYaml
name|getDatanodeDetailsYaml
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|portDetails
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|datanodeDetails
operator|.
name|getPorts
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|DatanodeDetails
operator|.
name|Port
name|port
range|:
name|datanodeDetails
operator|.
name|getPorts
argument_list|()
control|)
block|{
name|portDetails
operator|.
name|put
argument_list|(
name|port
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|port
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DatanodeDetailsYaml
argument_list|(
name|datanodeDetails
operator|.
name|getUuid
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|datanodeDetails
operator|.
name|getIpAddress
argument_list|()
argument_list|,
name|datanodeDetails
operator|.
name|getHostName
argument_list|()
argument_list|,
name|datanodeDetails
operator|.
name|getCertSerialId
argument_list|()
argument_list|,
name|portDetails
argument_list|)
return|;
block|}
block|}
end_class

end_unit

