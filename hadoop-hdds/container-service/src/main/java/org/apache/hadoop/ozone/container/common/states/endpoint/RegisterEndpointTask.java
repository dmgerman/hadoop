begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.states.endpoint
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|states
operator|.
name|endpoint
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|EndpointStateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMRegisteredCmdResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_comment
comment|/**  * Register a container with SCM.  */
end_comment

begin_class
DECL|class|RegisterEndpointTask
specifier|public
specifier|final
class|class
name|RegisterEndpointTask
implements|implements
name|Callable
argument_list|<
name|EndpointStateMachine
operator|.
name|EndPointStates
argument_list|>
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegisterEndpointTask
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rpcEndPoint
specifier|private
specifier|final
name|EndpointStateMachine
name|rpcEndPoint
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|result
specifier|private
name|Future
argument_list|<
name|EndpointStateMachine
operator|.
name|EndPointStates
argument_list|>
name|result
decl_stmt|;
DECL|field|datanodeDetails
specifier|private
name|DatanodeDetails
name|datanodeDetails
decl_stmt|;
comment|/**    * Creates a register endpoint task.    *    * @param rpcEndPoint - endpoint    * @param conf - conf    */
annotation|@
name|VisibleForTesting
DECL|method|RegisterEndpointTask (EndpointStateMachine rpcEndPoint, Configuration conf)
specifier|public
name|RegisterEndpointTask
parameter_list|(
name|EndpointStateMachine
name|rpcEndPoint
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|rpcEndPoint
operator|=
name|rpcEndPoint
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * Get the DatanodeDetails.    *    * @return DatanodeDetailsProto    */
DECL|method|getDatanodeDetails ()
specifier|public
name|DatanodeDetails
name|getDatanodeDetails
parameter_list|()
block|{
return|return
name|datanodeDetails
return|;
block|}
comment|/**    * Set the contiainerNodeID Proto.    *    * @param datanodeDetails - Container Node ID.    */
DECL|method|setDatanodeDetails ( DatanodeDetails datanodeDetails)
specifier|public
name|void
name|setDatanodeDetails
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|)
block|{
name|this
operator|.
name|datanodeDetails
operator|=
name|datanodeDetails
expr_stmt|;
block|}
comment|/**    * Computes a result, or throws an exception if unable to do so.    *    * @return computed result    * @throws Exception if unable to compute a result    */
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|EndpointStateMachine
operator|.
name|EndPointStates
name|call
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|getDatanodeDetails
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"DatanodeDetails cannot be null in RegisterEndpoint task, "
operator|+
literal|"shutting down the endpoint."
argument_list|)
expr_stmt|;
return|return
name|rpcEndPoint
operator|.
name|setState
argument_list|(
name|EndpointStateMachine
operator|.
name|EndPointStates
operator|.
name|SHUTDOWN
argument_list|)
return|;
block|}
name|rpcEndPoint
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// TODO : Add responses to the command Queue.
name|SCMRegisteredCmdResponseProto
name|response
init|=
name|rpcEndPoint
operator|.
name|getEndPoint
argument_list|()
operator|.
name|register
argument_list|(
name|datanodeDetails
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|,
name|conf
operator|.
name|getStrings
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_NAMES
argument_list|)
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|UUID
operator|.
name|fromString
argument_list|(
name|response
operator|.
name|getDatanodeUUID
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|datanodeDetails
operator|.
name|getUuid
argument_list|()
argument_list|)
argument_list|,
literal|"Unexpected datanode ID in the response."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|response
operator|.
name|getClusterID
argument_list|()
argument_list|)
argument_list|,
literal|"Invalid cluster ID in the response."
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|hasHostname
argument_list|()
operator|&&
name|response
operator|.
name|hasIpAddress
argument_list|()
condition|)
block|{
name|datanodeDetails
operator|.
name|setHostName
argument_list|(
name|response
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|datanodeDetails
operator|.
name|setIpAddress
argument_list|(
name|response
operator|.
name|getIpAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EndpointStateMachine
operator|.
name|EndPointStates
name|nextState
init|=
name|rpcEndPoint
operator|.
name|getState
argument_list|()
operator|.
name|getNextState
argument_list|()
decl_stmt|;
name|rpcEndPoint
operator|.
name|setState
argument_list|(
name|nextState
argument_list|)
expr_stmt|;
name|rpcEndPoint
operator|.
name|zeroMissedCount
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|rpcEndPoint
operator|.
name|logIfNeeded
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rpcEndPoint
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|rpcEndPoint
operator|.
name|getState
argument_list|()
return|;
block|}
comment|/**    * Returns a builder class for RegisterEndPoint task.    *    * @return Builder.    */
DECL|method|newBuilder ()
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**    * Builder class for RegisterEndPoint task.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|endPointStateMachine
specifier|private
name|EndpointStateMachine
name|endPointStateMachine
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|datanodeDetails
specifier|private
name|DatanodeDetails
name|datanodeDetails
decl_stmt|;
comment|/**      * Constructs the builder class.      */
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{     }
comment|/**      * Sets the endpoint state machine.      *      * @param rpcEndPoint - Endpoint state machine.      * @return Builder      */
DECL|method|setEndpointStateMachine (EndpointStateMachine rpcEndPoint)
specifier|public
name|Builder
name|setEndpointStateMachine
parameter_list|(
name|EndpointStateMachine
name|rpcEndPoint
parameter_list|)
block|{
name|this
operator|.
name|endPointStateMachine
operator|=
name|rpcEndPoint
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the Config.      *      * @param config - config      * @return Builder.      */
DECL|method|setConfig (Configuration config)
specifier|public
name|Builder
name|setConfig
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the NodeID.      *      * @param dnDetails - NodeID proto      * @return Builder      */
DECL|method|setDatanodeDetails (DatanodeDetails dnDetails)
specifier|public
name|Builder
name|setDatanodeDetails
parameter_list|(
name|DatanodeDetails
name|dnDetails
parameter_list|)
block|{
name|this
operator|.
name|datanodeDetails
operator|=
name|dnDetails
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|RegisterEndpointTask
name|build
parameter_list|()
block|{
if|if
condition|(
name|endPointStateMachine
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No endpoint specified."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A valid endpoint state machine is"
operator|+
literal|" needed to construct RegisterEndPoint task"
argument_list|)
throw|;
block|}
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No config specified."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A valid configration is needed to"
operator|+
literal|" construct RegisterEndpoint task"
argument_list|)
throw|;
block|}
if|if
condition|(
name|datanodeDetails
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No datanode specified."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A vaild Node ID is needed to "
operator|+
literal|"construct RegisterEndpoint task"
argument_list|)
throw|;
block|}
name|RegisterEndpointTask
name|task
init|=
operator|new
name|RegisterEndpointTask
argument_list|(
name|this
operator|.
name|endPointStateMachine
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|task
operator|.
name|setDatanodeDetails
argument_list|(
name|datanodeDetails
argument_list|)
expr_stmt|;
return|return
name|task
return|;
block|}
block|}
block|}
end_class

end_unit

