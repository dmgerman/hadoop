begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|HDDS_DATANODE_DIR_KEY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|StorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|VolumeInfo
operator|.
name|VolumeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|VolumeChoosingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|AutoCloseableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskOutOfSpaceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|InstrumentedLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_comment
comment|/**  * VolumeSet to manage volumes in a DataNode.  */
end_comment

begin_class
DECL|class|VolumeSet
specifier|public
class|class
name|VolumeSet
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VolumeSet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|/**    * {@link VolumeSet#volumeList} maintains a list of active volumes in the    * DataNode. Each volume has one-to-one mapping with a volumeInfo object.    */
DECL|field|volumeList
specifier|private
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|volumeList
decl_stmt|;
comment|/**    * {@link VolumeSet#failedVolumeList} maintains a list of volumes which have    * failed. This list is mutually exclusive to {@link VolumeSet#volumeList}.    */
DECL|field|failedVolumeList
specifier|private
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|failedVolumeList
decl_stmt|;
comment|/**    * {@link VolumeSet#volumeMap} maintains a map of all volumes in the    * DataNode irrespective of their state.    */
DECL|field|volumeMap
specifier|private
name|Map
argument_list|<
name|Path
argument_list|,
name|VolumeInfo
argument_list|>
name|volumeMap
decl_stmt|;
comment|/**    * {@link VolumeSet#volumeStateMap} maintains a list of volumes per    * StorageType.    */
DECL|field|volumeStateMap
specifier|private
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|VolumeInfo
argument_list|>
argument_list|>
name|volumeStateMap
decl_stmt|;
comment|/**    * Lock to synchronize changes to the VolumeSet. Any update to    * {@link VolumeSet#volumeList}, {@link VolumeSet#failedVolumeList},    * {@link VolumeSet#volumeMap} or {@link VolumeSet#volumeStateMap} should    * be done after acquiring this lock.    */
DECL|field|volumeSetLock
specifier|private
specifier|final
name|AutoCloseableLock
name|volumeSetLock
decl_stmt|;
DECL|method|VolumeSet (Configuration conf)
specifier|public
name|VolumeSet
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|DiskOutOfSpaceException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|volumeSetLock
operator|=
operator|new
name|AutoCloseableLock
argument_list|(
operator|new
name|InstrumentedLock
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|LOG
argument_list|,
operator|new
name|ReentrantLock
argument_list|(
literal|true
argument_list|)
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_LOCK_SUPPRESS_WARNING_INTERVAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_LOCK_SUPPRESS_WARNING_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
literal|300
argument_list|)
argument_list|)
expr_stmt|;
name|initializeVolumeSet
argument_list|()
expr_stmt|;
block|}
comment|// Add DN volumes configured through ConfigKeys to volumeMap.
DECL|method|initializeVolumeSet ()
specifier|private
name|void
name|initializeVolumeSet
parameter_list|()
throws|throws
name|DiskOutOfSpaceException
block|{
name|volumeList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|failedVolumeList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|volumeMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|volumeStateMap
operator|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|StorageType
operator|.
name|class
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|datanodeDirs
init|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|HDDS_DATANODE_DIR_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|datanodeDirs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|datanodeDirs
operator|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|datanodeDirs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No location configured in either "
operator|+
name|HDDS_DATANODE_DIR_KEY
operator|+
literal|" or "
operator|+
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
throw|;
block|}
for|for
control|(
name|StorageType
name|storageType
range|:
name|StorageType
operator|.
name|values
argument_list|()
control|)
block|{
name|volumeStateMap
operator|.
name|put
argument_list|(
name|storageType
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|VolumeInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|dir
range|:
name|datanodeDirs
control|)
block|{
try|try
block|{
name|VolumeInfo
name|volumeInfo
init|=
name|getVolumeInfo
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|volumeList
operator|.
name|add
argument_list|(
name|volumeInfo
argument_list|)
expr_stmt|;
name|volumeMap
operator|.
name|put
argument_list|(
name|volumeInfo
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|volumeInfo
argument_list|)
expr_stmt|;
name|volumeStateMap
operator|.
name|get
argument_list|(
name|volumeInfo
operator|.
name|getStorageType
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|volumeInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to parse the storage location: "
operator|+
name|dir
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|volumeList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DiskOutOfSpaceException
argument_list|(
literal|"No storage location configured"
argument_list|)
throw|;
block|}
block|}
DECL|method|acquireLock ()
specifier|public
name|void
name|acquireLock
parameter_list|()
block|{
name|volumeSetLock
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
DECL|method|releaseLock ()
specifier|public
name|void
name|releaseLock
parameter_list|()
block|{
name|volumeSetLock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|getVolumeInfo (String rootDir)
specifier|private
name|VolumeInfo
name|getVolumeInfo
parameter_list|(
name|String
name|rootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|StorageLocation
name|location
init|=
name|StorageLocation
operator|.
name|parse
argument_list|(
name|rootDir
argument_list|)
decl_stmt|;
name|StorageType
name|storageType
init|=
name|location
operator|.
name|getStorageType
argument_list|()
decl_stmt|;
name|VolumeInfo
operator|.
name|Builder
name|volumeBuilder
init|=
operator|new
name|VolumeInfo
operator|.
name|Builder
argument_list|(
name|rootDir
argument_list|)
decl_stmt|;
name|volumeBuilder
operator|.
name|storageType
argument_list|(
name|storageType
argument_list|)
expr_stmt|;
return|return
name|volumeBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Add a volume to VolumeSet
DECL|method|addVolume (String dataDir)
specifier|public
name|void
name|addVolume
parameter_list|(
name|String
name|dataDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|dataDir
argument_list|)
decl_stmt|;
try|try
init|(
name|AutoCloseableLock
name|lock
init|=
name|volumeSetLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|volumeMap
operator|.
name|containsKey
argument_list|(
name|dirPath
argument_list|)
condition|)
block|{
name|VolumeInfo
name|volumeInfo
init|=
name|volumeMap
operator|.
name|get
argument_list|(
name|dirPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|volumeInfo
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|volumeInfo
operator|.
name|setState
argument_list|(
name|VolumeState
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|failedVolumeList
operator|.
name|remove
argument_list|(
name|volumeInfo
argument_list|)
expr_stmt|;
name|volumeList
operator|.
name|add
argument_list|(
name|volumeInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Volume : "
operator|+
name|volumeInfo
operator|.
name|getRootDir
argument_list|()
operator|+
literal|" already "
operator|+
literal|"exists in VolumeMap"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|VolumeInfo
name|volumeInfo
init|=
name|getVolumeInfo
argument_list|(
name|dataDir
argument_list|)
decl_stmt|;
name|volumeList
operator|.
name|add
argument_list|(
name|volumeInfo
argument_list|)
expr_stmt|;
name|volumeMap
operator|.
name|put
argument_list|(
name|volumeInfo
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|volumeInfo
argument_list|)
expr_stmt|;
name|volumeStateMap
operator|.
name|get
argument_list|(
name|volumeInfo
operator|.
name|getStorageType
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|volumeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Mark a volume as failed
DECL|method|failVolume (String dataDir)
specifier|public
name|void
name|failVolume
parameter_list|(
name|String
name|dataDir
parameter_list|)
block|{
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|dataDir
argument_list|)
decl_stmt|;
try|try
init|(
name|AutoCloseableLock
name|lock
init|=
name|volumeSetLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|volumeMap
operator|.
name|containsKey
argument_list|(
name|dirPath
argument_list|)
condition|)
block|{
name|VolumeInfo
name|volumeInfo
init|=
name|volumeMap
operator|.
name|get
argument_list|(
name|dirPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|volumeInfo
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|volumeInfo
operator|.
name|setState
argument_list|(
name|VolumeState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|volumeList
operator|.
name|remove
argument_list|(
name|volumeInfo
argument_list|)
expr_stmt|;
name|failedVolumeList
operator|.
name|add
argument_list|(
name|volumeInfo
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Volume : "
operator|+
name|dataDir
operator|+
literal|" does not exist in VolumeMap"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Remove a volume from the VolumeSet completely.
DECL|method|removeVolume (String dataDir)
specifier|public
name|void
name|removeVolume
parameter_list|(
name|String
name|dataDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|dataDir
argument_list|)
decl_stmt|;
try|try
init|(
name|AutoCloseableLock
name|lock
init|=
name|volumeSetLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|volumeMap
operator|.
name|containsKey
argument_list|(
name|dirPath
argument_list|)
condition|)
block|{
name|VolumeInfo
name|volumeInfo
init|=
name|volumeMap
operator|.
name|get
argument_list|(
name|dirPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|volumeInfo
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|volumeList
operator|.
name|remove
argument_list|(
name|volumeInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failedVolumeList
operator|.
name|remove
argument_list|(
name|volumeInfo
argument_list|)
expr_stmt|;
block|}
name|volumeMap
operator|.
name|remove
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|volumeStateMap
operator|.
name|get
argument_list|(
name|volumeInfo
operator|.
name|getStorageType
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|volumeInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Volume: "
operator|+
name|dataDir
operator|+
literal|" does not exist in "
operator|+
literal|"volumeMap."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Return an iterator over {@link VolumeSet#volumeList}.    */
DECL|method|getIterator ()
specifier|public
name|Iterator
argument_list|<
name|VolumeInfo
argument_list|>
name|getIterator
parameter_list|()
block|{
return|return
name|volumeList
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|chooseVolume (long containerSize, VolumeChoosingPolicy choosingPolicy)
specifier|public
name|VolumeInfo
name|chooseVolume
parameter_list|(
name|long
name|containerSize
parameter_list|,
name|VolumeChoosingPolicy
name|choosingPolicy
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|choosingPolicy
operator|.
name|chooseVolume
argument_list|(
name|volumeList
argument_list|,
name|containerSize
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getVolumesList ()
specifier|public
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|getVolumesList
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|volumeList
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getFailedVolumesList ()
specifier|public
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|getFailedVolumesList
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|failedVolumeList
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getVolumeMap ()
specifier|public
name|Map
argument_list|<
name|Path
argument_list|,
name|VolumeInfo
argument_list|>
name|getVolumeMap
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|volumeMap
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getVolumeStateMap ()
specifier|public
name|Map
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|VolumeInfo
argument_list|>
argument_list|>
name|getVolumeStateMap
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|volumeStateMap
argument_list|)
return|;
block|}
block|}
end_class

end_unit

