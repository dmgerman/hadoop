begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.keyvalue
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|StorageUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerLifeCycleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|GetSmallFileRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|PutSmallFileRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|BlockData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|OpenContainerBlockMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|VolumeChoosingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|HddsVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|RoundRobinVolumeChoosingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|VolumeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|ChunkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|BlockUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|KeyValueContainerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|SmallFileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|impl
operator|.
name|ChunkManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|impl
operator|.
name|BlockManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|interfaces
operator|.
name|ChunkManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|interfaces
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|statemachine
operator|.
name|background
operator|.
name|BlockDeletingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|AutoCloseableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_DATANODE_VOLUME_CHOOSING_POLICY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Stage
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_BLOCK_DELETING_SERVICE_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_BLOCK_DELETING_SERVICE_INTERVAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_BLOCK_DELETING_SERVICE_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_BLOCK_DELETING_SERVICE_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Handler for KeyValue Container type.  */
end_comment

begin_class
DECL|class|KeyValueHandler
specifier|public
class|class
name|KeyValueHandler
extends|extends
name|Handler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KeyValueHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|containerType
specifier|private
specifier|final
name|ContainerType
name|containerType
decl_stmt|;
DECL|field|blockManager
specifier|private
specifier|final
name|BlockManager
name|blockManager
decl_stmt|;
DECL|field|chunkManager
specifier|private
specifier|final
name|ChunkManager
name|chunkManager
decl_stmt|;
DECL|field|blockDeletingService
specifier|private
specifier|final
name|BlockDeletingService
name|blockDeletingService
decl_stmt|;
DECL|field|volumeChoosingPolicy
specifier|private
specifier|final
name|VolumeChoosingPolicy
name|volumeChoosingPolicy
decl_stmt|;
DECL|field|maxContainerSize
specifier|private
specifier|final
name|long
name|maxContainerSize
decl_stmt|;
DECL|field|handlerLock
specifier|private
specifier|final
name|AutoCloseableLock
name|handlerLock
decl_stmt|;
DECL|field|openContainerBlockMap
specifier|private
specifier|final
name|OpenContainerBlockMap
name|openContainerBlockMap
decl_stmt|;
DECL|method|KeyValueHandler (Configuration config, ContainerSet contSet, VolumeSet volSet, ContainerMetrics metrics)
specifier|public
name|KeyValueHandler
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|ContainerSet
name|contSet
parameter_list|,
name|VolumeSet
name|volSet
parameter_list|,
name|ContainerMetrics
name|metrics
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|,
name|contSet
argument_list|,
name|volSet
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
name|containerType
operator|=
name|ContainerType
operator|.
name|KeyValueContainer
expr_stmt|;
name|blockManager
operator|=
operator|new
name|BlockManagerImpl
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|chunkManager
operator|=
operator|new
name|ChunkManagerImpl
argument_list|()
expr_stmt|;
name|long
name|svcInterval
init|=
name|config
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_BLOCK_DELETING_SERVICE_INTERVAL
argument_list|,
name|OZONE_BLOCK_DELETING_SERVICE_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|long
name|serviceTimeout
init|=
name|config
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_BLOCK_DELETING_SERVICE_TIMEOUT
argument_list|,
name|OZONE_BLOCK_DELETING_SERVICE_TIMEOUT_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|this
operator|.
name|blockDeletingService
operator|=
operator|new
name|BlockDeletingService
argument_list|(
name|containerSet
argument_list|,
name|svcInterval
argument_list|,
name|serviceTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|blockDeletingService
operator|.
name|start
argument_list|()
expr_stmt|;
name|volumeChoosingPolicy
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClass
argument_list|(
name|HDDS_DATANODE_VOLUME_CHOOSING_POLICY
argument_list|,
name|RoundRobinVolumeChoosingPolicy
operator|.
name|class
argument_list|,
name|VolumeChoosingPolicy
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|maxContainerSize
operator|=
operator|(
name|long
operator|)
name|config
operator|.
name|getStorageSize
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_SIZE
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_SIZE_DEFAULT
argument_list|,
name|StorageUnit
operator|.
name|BYTES
argument_list|)
expr_stmt|;
comment|// this handler lock is used for synchronizing createContainer Requests,
comment|// so using a fair lock here.
name|handlerLock
operator|=
operator|new
name|AutoCloseableLock
argument_list|(
operator|new
name|ReentrantLock
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|openContainerBlockMap
operator|=
operator|new
name|OpenContainerBlockMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getVolumeChoosingPolicyForTesting ()
specifier|public
name|VolumeChoosingPolicy
name|getVolumeChoosingPolicyForTesting
parameter_list|()
block|{
return|return
name|volumeChoosingPolicy
return|;
block|}
comment|/**    * Returns OpenContainerBlockMap instance.    *    * @return OpenContainerBlockMap    */
DECL|method|getOpenContainerBlockMap ()
specifier|public
name|OpenContainerBlockMap
name|getOpenContainerBlockMap
parameter_list|()
block|{
return|return
name|openContainerBlockMap
return|;
block|}
annotation|@
name|Override
DECL|method|handle ( ContainerCommandRequestProto request, Container container)
specifier|public
name|ContainerCommandResponseProto
name|handle
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|,
name|Container
name|container
parameter_list|)
block|{
name|Type
name|cmdType
init|=
name|request
operator|.
name|getCmdType
argument_list|()
decl_stmt|;
name|KeyValueContainer
name|kvContainer
init|=
operator|(
name|KeyValueContainer
operator|)
name|container
decl_stmt|;
switch|switch
condition|(
name|cmdType
condition|)
block|{
case|case
name|CreateContainer
case|:
return|return
name|handleCreateContainer
argument_list|(
name|request
argument_list|,
name|kvContainer
argument_list|)
return|;
case|case
name|ReadContainer
case|:
return|return
name|handleReadContainer
argument_list|(
name|request
argument_list|,
name|kvContainer
argument_list|)
return|;
case|case
name|UpdateContainer
case|:
return|return
name|handleUpdateContainer
argument_list|(
name|request
argument_list|,
name|kvContainer
argument_list|)
return|;
case|case
name|DeleteContainer
case|:
return|return
name|handleDeleteContainer
argument_list|(
name|request
argument_list|,
name|kvContainer
argument_list|)
return|;
case|case
name|ListContainer
case|:
return|return
name|handleUnsupportedOp
argument_list|(
name|request
argument_list|)
return|;
case|case
name|CloseContainer
case|:
return|return
name|handleCloseContainer
argument_list|(
name|request
argument_list|,
name|kvContainer
argument_list|)
return|;
case|case
name|PutBlock
case|:
return|return
name|handlePutBlock
argument_list|(
name|request
argument_list|,
name|kvContainer
argument_list|)
return|;
case|case
name|GetBlock
case|:
return|return
name|handleGetBlock
argument_list|(
name|request
argument_list|,
name|kvContainer
argument_list|)
return|;
case|case
name|DeleteBlock
case|:
return|return
name|handleDeleteBlock
argument_list|(
name|request
argument_list|,
name|kvContainer
argument_list|)
return|;
case|case
name|ListBlock
case|:
return|return
name|handleUnsupportedOp
argument_list|(
name|request
argument_list|)
return|;
case|case
name|ReadChunk
case|:
return|return
name|handleReadChunk
argument_list|(
name|request
argument_list|,
name|kvContainer
argument_list|)
return|;
case|case
name|DeleteChunk
case|:
return|return
name|handleDeleteChunk
argument_list|(
name|request
argument_list|,
name|kvContainer
argument_list|)
return|;
case|case
name|WriteChunk
case|:
return|return
name|handleWriteChunk
argument_list|(
name|request
argument_list|,
name|kvContainer
argument_list|)
return|;
case|case
name|ListChunk
case|:
return|return
name|handleUnsupportedOp
argument_list|(
name|request
argument_list|)
return|;
case|case
name|CompactChunk
case|:
return|return
name|handleUnsupportedOp
argument_list|(
name|request
argument_list|)
return|;
case|case
name|PutSmallFile
case|:
return|return
name|handlePutSmallFile
argument_list|(
name|request
argument_list|,
name|kvContainer
argument_list|)
return|;
case|case
name|GetSmallFile
case|:
return|return
name|handleGetSmallFile
argument_list|(
name|request
argument_list|,
name|kvContainer
argument_list|)
return|;
case|case
name|GetCommittedBlockLength
case|:
return|return
name|handleGetCommittedBlockLength
argument_list|(
name|request
argument_list|,
name|kvContainer
argument_list|)
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getChunkManager ()
specifier|public
name|ChunkManager
name|getChunkManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|chunkManager
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getBlockManager ()
specifier|public
name|BlockManager
name|getBlockManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|blockManager
return|;
block|}
comment|/**    * Handles Create Container Request. If successful, adds the container to    * ContainerSet.    */
DECL|method|handleCreateContainer ( ContainerCommandRequestProto request, KeyValueContainer kvContainer)
name|ContainerCommandResponseProto
name|handleCreateContainer
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|,
name|KeyValueContainer
name|kvContainer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasCreateContainer
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed Create Container request. trace ID: {}"
argument_list|,
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|// Create Container request should be passed a null container as the
comment|// container would be created here.
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|kvContainer
operator|==
literal|null
argument_list|)
expr_stmt|;
name|long
name|containerID
init|=
name|request
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|KeyValueContainerData
name|newContainerData
init|=
operator|new
name|KeyValueContainerData
argument_list|(
name|containerID
argument_list|,
name|maxContainerSize
argument_list|)
decl_stmt|;
comment|// TODO: Add support to add metadataList to ContainerData. Add metadata
comment|// to container during creation.
name|KeyValueContainer
name|newContainer
init|=
operator|new
name|KeyValueContainer
argument_list|(
name|newContainerData
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|handlerLock
operator|.
name|acquire
argument_list|()
expr_stmt|;
if|if
condition|(
name|containerSet
operator|.
name|getContainer
argument_list|(
name|containerID
argument_list|)
operator|==
literal|null
condition|)
block|{
name|newContainer
operator|.
name|create
argument_list|(
name|volumeSet
argument_list|,
name|volumeChoosingPolicy
argument_list|,
name|scmID
argument_list|)
expr_stmt|;
name|containerSet
operator|.
name|addContainer
argument_list|(
name|newContainer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The create container request for an already existing container can
comment|// arrive in case the ContainerStateMachine reapplies the transaction
comment|// on datanode restart. Just log a warning msg here.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Container already exists."
operator|+
literal|"container Id "
operator|+
name|containerID
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
name|ex
argument_list|,
name|request
argument_list|)
return|;
block|}
finally|finally
block|{
name|handlerLock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
return|return
name|ContainerUtils
operator|.
name|getSuccessResponse
argument_list|(
name|request
argument_list|)
return|;
block|}
DECL|method|populateContainerPathFields (KeyValueContainer container, long maxSize)
specifier|public
name|void
name|populateContainerPathFields
parameter_list|(
name|KeyValueContainer
name|container
parameter_list|,
name|long
name|maxSize
parameter_list|)
throws|throws
name|IOException
block|{
name|volumeSet
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|HddsVolume
name|containerVolume
init|=
name|volumeChoosingPolicy
operator|.
name|chooseVolume
argument_list|(
name|volumeSet
operator|.
name|getVolumesList
argument_list|()
argument_list|,
name|maxSize
argument_list|)
decl_stmt|;
name|String
name|hddsVolumeDir
init|=
name|containerVolume
operator|.
name|getHddsRootDir
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|container
operator|.
name|populatePathFields
argument_list|(
name|scmID
argument_list|,
name|containerVolume
argument_list|,
name|hddsVolumeDir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|volumeSet
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Handles Read Container Request. Returns the ContainerData as response.    */
DECL|method|handleReadContainer ( ContainerCommandRequestProto request, KeyValueContainer kvContainer)
name|ContainerCommandResponseProto
name|handleReadContainer
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|,
name|KeyValueContainer
name|kvContainer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasReadContainer
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed Read Container request. trace ID: {}"
argument_list|,
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|request
argument_list|)
return|;
block|}
name|KeyValueContainerData
name|containerData
init|=
name|kvContainer
operator|.
name|getContainerData
argument_list|()
decl_stmt|;
return|return
name|KeyValueContainerUtil
operator|.
name|getReadContainerResponse
argument_list|(
name|request
argument_list|,
name|containerData
argument_list|)
return|;
block|}
comment|/**    * Handles Update Container Request. If successful, the container metadata    * is updated.    */
DECL|method|handleUpdateContainer ( ContainerCommandRequestProto request, KeyValueContainer kvContainer)
name|ContainerCommandResponseProto
name|handleUpdateContainer
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|,
name|KeyValueContainer
name|kvContainer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasUpdateContainer
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed Update Container request. trace ID: {}"
argument_list|,
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|request
argument_list|)
return|;
block|}
name|boolean
name|forceUpdate
init|=
name|request
operator|.
name|getUpdateContainer
argument_list|()
operator|.
name|getForceUpdate
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|keyValueList
init|=
name|request
operator|.
name|getUpdateContainer
argument_list|()
operator|.
name|getMetadataList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyValue
name|keyValue
range|:
name|keyValueList
control|)
block|{
name|metadata
operator|.
name|put
argument_list|(
name|keyValue
operator|.
name|getKey
argument_list|()
argument_list|,
name|keyValue
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|metadata
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|kvContainer
operator|.
name|update
argument_list|(
name|metadata
argument_list|,
name|forceUpdate
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
name|ex
argument_list|,
name|request
argument_list|)
return|;
block|}
return|return
name|ContainerUtils
operator|.
name|getSuccessResponse
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * Handles Delete Container Request.    * Open containers cannot be deleted.    * Holds writeLock on ContainerSet till the container is removed from    * containerMap. On disk deletion of container files will happen    * asynchronously without the lock.    */
DECL|method|handleDeleteContainer ( ContainerCommandRequestProto request, KeyValueContainer kvContainer)
name|ContainerCommandResponseProto
name|handleDeleteContainer
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|,
name|KeyValueContainer
name|kvContainer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasDeleteContainer
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed Delete container request. trace ID: {}"
argument_list|,
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|request
argument_list|)
return|;
block|}
name|boolean
name|forceDelete
init|=
name|request
operator|.
name|getDeleteContainer
argument_list|()
operator|.
name|getForceDelete
argument_list|()
decl_stmt|;
name|kvContainer
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Check if container is open
if|if
condition|(
name|kvContainer
operator|.
name|getContainerData
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|kvContainer
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Deletion of Open Container is not allowed."
argument_list|,
name|DELETE_ON_OPEN_CONTAINER
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|forceDelete
operator|&&
name|kvContainer
operator|.
name|getContainerData
argument_list|()
operator|.
name|getKeyCount
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// If the container is not empty and cannot be deleted forcibly,
comment|// then throw a SCE to stop deleting.
name|kvContainer
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Container cannot be deleted because it is not empty."
argument_list|,
name|ContainerProtos
operator|.
name|Result
operator|.
name|ERROR_CONTAINER_NOT_EMPTY
argument_list|)
throw|;
block|}
else|else
block|{
name|long
name|containerId
init|=
name|kvContainer
operator|.
name|getContainerData
argument_list|()
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|containerSet
operator|.
name|removeContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|openContainerBlockMap
operator|.
name|removeContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
comment|// Release the lock first.
comment|// Avoid holding write locks for disk operations
name|kvContainer
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
name|kvContainer
operator|.
name|delete
argument_list|(
name|forceDelete
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
name|ex
argument_list|,
name|request
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|kvContainer
operator|.
name|hasWriteLock
argument_list|()
condition|)
block|{
name|kvContainer
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ContainerUtils
operator|.
name|getSuccessResponse
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * Handles Close Container Request. An open container is closed.    * Close Container call is idempotent.    */
DECL|method|handleCloseContainer ( ContainerCommandRequestProto request, KeyValueContainer kvContainer)
name|ContainerCommandResponseProto
name|handleCloseContainer
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|,
name|KeyValueContainer
name|kvContainer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasCloseContainer
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed Update Container request. trace ID: {}"
argument_list|,
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|request
argument_list|)
return|;
block|}
name|long
name|containerID
init|=
name|kvContainer
operator|.
name|getContainerData
argument_list|()
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|ContainerLifeCycleState
name|containerState
init|=
name|kvContainer
operator|.
name|getContainerState
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|containerState
operator|==
name|ContainerLifeCycleState
operator|.
name|CLOSED
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Container {} is already closed."
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|getSuccessResponse
argument_list|(
name|request
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|containerState
operator|==
name|ContainerLifeCycleState
operator|.
name|INVALID
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Invalid container data. ContainerID: {}"
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Invalid container data. "
operator|+
literal|"ContainerID: "
operator|+
name|containerID
argument_list|,
name|INVALID_CONTAINER_STATE
argument_list|)
throw|;
block|}
name|KeyValueContainerData
name|kvData
init|=
name|kvContainer
operator|.
name|getContainerData
argument_list|()
decl_stmt|;
comment|// remove the container from open block map once, all the blocks
comment|// have been committed and the container is closed
name|kvData
operator|.
name|setState
argument_list|(
name|ContainerProtos
operator|.
name|ContainerLifeCycleState
operator|.
name|CLOSING
argument_list|)
expr_stmt|;
name|commitPendingBlocks
argument_list|(
name|kvContainer
argument_list|)
expr_stmt|;
name|kvContainer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// make sure the the container open keys from BlockMap gets removed
name|openContainerBlockMap
operator|.
name|removeContainer
argument_list|(
name|kvData
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
name|ex
argument_list|,
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
operator|new
name|StorageContainerException
argument_list|(
literal|"Close Container failed"
argument_list|,
name|ex
argument_list|,
name|IO_EXCEPTION
argument_list|)
argument_list|,
name|request
argument_list|)
return|;
block|}
return|return
name|ContainerUtils
operator|.
name|getSuccessResponse
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * Handle Put Block operation. Calls BlockManager to process the request.    */
DECL|method|handlePutBlock ( ContainerCommandRequestProto request, KeyValueContainer kvContainer)
name|ContainerCommandResponseProto
name|handlePutBlock
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|,
name|KeyValueContainer
name|kvContainer
parameter_list|)
block|{
name|long
name|blockLength
decl_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|hasPutBlock
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed Put Key request. trace ID: {}"
argument_list|,
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|request
argument_list|)
return|;
block|}
try|try
block|{
name|checkContainerOpen
argument_list|(
name|kvContainer
argument_list|)
expr_stmt|;
name|BlockData
name|blockData
init|=
name|BlockData
operator|.
name|getFromProtoBuf
argument_list|(
name|request
operator|.
name|getPutBlock
argument_list|()
operator|.
name|getBlockData
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|numBytes
init|=
name|blockData
operator|.
name|getProtoBufMessage
argument_list|()
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
decl_stmt|;
name|blockLength
operator|=
name|commitKey
argument_list|(
name|blockData
argument_list|,
name|kvContainer
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incContainerBytesStats
argument_list|(
name|Type
operator|.
name|PutBlock
argument_list|,
name|numBytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
name|ex
argument_list|,
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
operator|new
name|StorageContainerException
argument_list|(
literal|"Put Key failed"
argument_list|,
name|ex
argument_list|,
name|IO_EXCEPTION
argument_list|)
argument_list|,
name|request
argument_list|)
return|;
block|}
return|return
name|BlockUtils
operator|.
name|putBlockResponseSuccess
argument_list|(
name|request
argument_list|,
name|blockLength
argument_list|)
return|;
block|}
DECL|method|commitPendingBlocks (KeyValueContainer kvContainer)
specifier|private
name|void
name|commitPendingBlocks
parameter_list|(
name|KeyValueContainer
name|kvContainer
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|containerId
init|=
name|kvContainer
operator|.
name|getContainerData
argument_list|()
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BlockData
argument_list|>
name|pendingBlocks
init|=
name|this
operator|.
name|openContainerBlockMap
operator|.
name|getOpenBlocks
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
for|for
control|(
name|BlockData
name|blockData
range|:
name|pendingBlocks
control|)
block|{
name|commitKey
argument_list|(
name|blockData
argument_list|,
name|kvContainer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|commitKey (BlockData blockData, KeyValueContainer kvContainer)
specifier|private
name|long
name|commitKey
parameter_list|(
name|BlockData
name|blockData
parameter_list|,
name|KeyValueContainer
name|kvContainer
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|blockData
argument_list|)
expr_stmt|;
name|long
name|length
init|=
name|blockManager
operator|.
name|putBlock
argument_list|(
name|kvContainer
argument_list|,
name|blockData
argument_list|)
decl_stmt|;
comment|//update the open key Map in containerManager
name|this
operator|.
name|openContainerBlockMap
operator|.
name|removeFromBlockMap
argument_list|(
name|blockData
operator|.
name|getBlockID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|length
return|;
block|}
comment|/**    * Handle Get Block operation. Calls BlockManager to process the request.    */
DECL|method|handleGetBlock ( ContainerCommandRequestProto request, KeyValueContainer kvContainer)
name|ContainerCommandResponseProto
name|handleGetBlock
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|,
name|KeyValueContainer
name|kvContainer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasGetBlock
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed Get Key request. trace ID: {}"
argument_list|,
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|request
argument_list|)
return|;
block|}
name|BlockData
name|responseData
decl_stmt|;
try|try
block|{
name|BlockID
name|blockID
init|=
name|BlockID
operator|.
name|getFromProtobuf
argument_list|(
name|request
operator|.
name|getGetBlock
argument_list|()
operator|.
name|getBlockID
argument_list|()
argument_list|)
decl_stmt|;
name|responseData
operator|=
name|blockManager
operator|.
name|getBlock
argument_list|(
name|kvContainer
argument_list|,
name|blockID
argument_list|,
name|request
operator|.
name|getGetBlock
argument_list|()
operator|.
name|getBlockCommitSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|numBytes
init|=
name|responseData
operator|.
name|getProtoBufMessage
argument_list|()
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
decl_stmt|;
name|metrics
operator|.
name|incContainerBytesStats
argument_list|(
name|Type
operator|.
name|GetBlock
argument_list|,
name|numBytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
name|ex
argument_list|,
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
operator|new
name|StorageContainerException
argument_list|(
literal|"Get Key failed"
argument_list|,
name|ex
argument_list|,
name|IO_EXCEPTION
argument_list|)
argument_list|,
name|request
argument_list|)
return|;
block|}
return|return
name|BlockUtils
operator|.
name|getBlockDataResponse
argument_list|(
name|request
argument_list|,
name|responseData
argument_list|)
return|;
block|}
comment|/**    * Handles GetCommittedBlockLength operation.    * Calls BlockManager to process the request.    */
DECL|method|handleGetCommittedBlockLength ( ContainerCommandRequestProto request, KeyValueContainer kvContainer)
name|ContainerCommandResponseProto
name|handleGetCommittedBlockLength
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|,
name|KeyValueContainer
name|kvContainer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasGetCommittedBlockLength
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed Get Key request. trace ID: {}"
argument_list|,
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|request
argument_list|)
return|;
block|}
name|long
name|blockLength
decl_stmt|;
try|try
block|{
name|BlockID
name|blockID
init|=
name|BlockID
operator|.
name|getFromProtobuf
argument_list|(
name|request
operator|.
name|getGetCommittedBlockLength
argument_list|()
operator|.
name|getBlockID
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check if it really exists in the openContainerBlockMap
if|if
condition|(
name|openContainerBlockMap
operator|.
name|checkIfBlockExists
argument_list|(
name|blockID
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Block "
operator|+
name|blockID
operator|+
literal|" is not committed yet."
decl_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
name|msg
argument_list|,
name|BLOCK_NOT_COMMITTED
argument_list|)
throw|;
block|}
name|blockLength
operator|=
name|blockManager
operator|.
name|getCommittedBlockLength
argument_list|(
name|kvContainer
argument_list|,
name|blockID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
name|ex
argument_list|,
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
operator|new
name|StorageContainerException
argument_list|(
literal|"GetCommittedBlockLength failed"
argument_list|,
name|ex
argument_list|,
name|IO_EXCEPTION
argument_list|)
argument_list|,
name|request
argument_list|)
return|;
block|}
return|return
name|BlockUtils
operator|.
name|getBlockLengthResponse
argument_list|(
name|request
argument_list|,
name|blockLength
argument_list|)
return|;
block|}
comment|/**    * Handle Delete Block operation. Calls BlockManager to process the request.    */
DECL|method|handleDeleteBlock ( ContainerCommandRequestProto request, KeyValueContainer kvContainer)
name|ContainerCommandResponseProto
name|handleDeleteBlock
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|,
name|KeyValueContainer
name|kvContainer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasDeleteBlock
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed Delete Key request. trace ID: {}"
argument_list|,
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|request
argument_list|)
return|;
block|}
try|try
block|{
name|checkContainerOpen
argument_list|(
name|kvContainer
argument_list|)
expr_stmt|;
name|BlockID
name|blockID
init|=
name|BlockID
operator|.
name|getFromProtobuf
argument_list|(
name|request
operator|.
name|getDeleteBlock
argument_list|()
operator|.
name|getBlockID
argument_list|()
argument_list|)
decl_stmt|;
name|blockManager
operator|.
name|deleteBlock
argument_list|(
name|kvContainer
argument_list|,
name|blockID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
name|ex
argument_list|,
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
operator|new
name|StorageContainerException
argument_list|(
literal|"Delete Key failed"
argument_list|,
name|ex
argument_list|,
name|IO_EXCEPTION
argument_list|)
argument_list|,
name|request
argument_list|)
return|;
block|}
return|return
name|BlockUtils
operator|.
name|getBlockResponseSuccess
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * Handle Read Chunk operation. Calls ChunkManager to process the request.    */
DECL|method|handleReadChunk ( ContainerCommandRequestProto request, KeyValueContainer kvContainer)
name|ContainerCommandResponseProto
name|handleReadChunk
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|,
name|KeyValueContainer
name|kvContainer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasReadChunk
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed Read Chunk request. trace ID: {}"
argument_list|,
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|request
argument_list|)
return|;
block|}
name|ChunkInfo
name|chunkInfo
decl_stmt|;
name|byte
index|[]
name|data
decl_stmt|;
try|try
block|{
name|BlockID
name|blockID
init|=
name|BlockID
operator|.
name|getFromProtobuf
argument_list|(
name|request
operator|.
name|getReadChunk
argument_list|()
operator|.
name|getBlockID
argument_list|()
argument_list|)
decl_stmt|;
name|chunkInfo
operator|=
name|ChunkInfo
operator|.
name|getFromProtoBuf
argument_list|(
name|request
operator|.
name|getReadChunk
argument_list|()
operator|.
name|getChunkData
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|chunkInfo
argument_list|)
expr_stmt|;
name|data
operator|=
name|chunkManager
operator|.
name|readChunk
argument_list|(
name|kvContainer
argument_list|,
name|blockID
argument_list|,
name|chunkInfo
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incContainerBytesStats
argument_list|(
name|Type
operator|.
name|ReadChunk
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
name|ex
argument_list|,
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
operator|new
name|StorageContainerException
argument_list|(
literal|"Read Chunk failed"
argument_list|,
name|ex
argument_list|,
name|IO_EXCEPTION
argument_list|)
argument_list|,
name|request
argument_list|)
return|;
block|}
return|return
name|ChunkUtils
operator|.
name|getReadChunkResponse
argument_list|(
name|request
argument_list|,
name|data
argument_list|,
name|chunkInfo
argument_list|)
return|;
block|}
comment|/**    * Handle Delete Chunk operation. Calls ChunkManager to process the request.    */
DECL|method|handleDeleteChunk ( ContainerCommandRequestProto request, KeyValueContainer kvContainer)
name|ContainerCommandResponseProto
name|handleDeleteChunk
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|,
name|KeyValueContainer
name|kvContainer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasDeleteChunk
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed Delete Chunk request. trace ID: {}"
argument_list|,
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|request
argument_list|)
return|;
block|}
try|try
block|{
name|checkContainerOpen
argument_list|(
name|kvContainer
argument_list|)
expr_stmt|;
name|BlockID
name|blockID
init|=
name|BlockID
operator|.
name|getFromProtobuf
argument_list|(
name|request
operator|.
name|getDeleteChunk
argument_list|()
operator|.
name|getBlockID
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerProtos
operator|.
name|ChunkInfo
name|chunkInfoProto
init|=
name|request
operator|.
name|getDeleteChunk
argument_list|()
operator|.
name|getChunkData
argument_list|()
decl_stmt|;
name|ChunkInfo
name|chunkInfo
init|=
name|ChunkInfo
operator|.
name|getFromProtoBuf
argument_list|(
name|chunkInfoProto
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|chunkInfo
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|deleteChunk
argument_list|(
name|kvContainer
argument_list|,
name|blockID
argument_list|,
name|chunkInfo
argument_list|)
expr_stmt|;
name|openContainerBlockMap
operator|.
name|removeChunk
argument_list|(
name|blockID
argument_list|,
name|chunkInfoProto
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
name|ex
argument_list|,
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
operator|new
name|StorageContainerException
argument_list|(
literal|"Delete Chunk failed"
argument_list|,
name|ex
argument_list|,
name|IO_EXCEPTION
argument_list|)
argument_list|,
name|request
argument_list|)
return|;
block|}
return|return
name|ChunkUtils
operator|.
name|getChunkResponseSuccess
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * Handle Write Chunk operation. Calls ChunkManager to process the request.    */
DECL|method|handleWriteChunk ( ContainerCommandRequestProto request, KeyValueContainer kvContainer)
name|ContainerCommandResponseProto
name|handleWriteChunk
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|,
name|KeyValueContainer
name|kvContainer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasWriteChunk
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed Write Chunk request. trace ID: {}"
argument_list|,
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|request
argument_list|)
return|;
block|}
try|try
block|{
name|checkContainerOpen
argument_list|(
name|kvContainer
argument_list|)
expr_stmt|;
name|BlockID
name|blockID
init|=
name|BlockID
operator|.
name|getFromProtobuf
argument_list|(
name|request
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getBlockID
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerProtos
operator|.
name|ChunkInfo
name|chunkInfoProto
init|=
name|request
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getChunkData
argument_list|()
decl_stmt|;
name|ChunkInfo
name|chunkInfo
init|=
name|ChunkInfo
operator|.
name|getFromProtoBuf
argument_list|(
name|chunkInfoProto
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|chunkInfo
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getStage
argument_list|()
operator|==
name|Stage
operator|.
name|WRITE_DATA
operator|||
name|request
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getStage
argument_list|()
operator|==
name|Stage
operator|.
name|COMBINED
condition|)
block|{
name|data
operator|=
name|request
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getData
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|kvContainer
argument_list|,
name|blockID
argument_list|,
name|chunkInfo
argument_list|,
name|data
argument_list|,
name|request
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getStage
argument_list|()
argument_list|)
expr_stmt|;
comment|// We should increment stats after writeChunk
if|if
condition|(
name|request
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getStage
argument_list|()
operator|==
name|Stage
operator|.
name|WRITE_DATA
operator|||
name|request
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getStage
argument_list|()
operator|==
name|Stage
operator|.
name|COMBINED
condition|)
block|{
name|metrics
operator|.
name|incContainerBytesStats
argument_list|(
name|Type
operator|.
name|WriteChunk
argument_list|,
name|request
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getChunkData
argument_list|()
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getStage
argument_list|()
operator|==
name|Stage
operator|.
name|COMMIT_DATA
operator|||
name|request
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getStage
argument_list|()
operator|==
name|Stage
operator|.
name|COMBINED
condition|)
block|{
comment|// the openContainerBlockMap should be updated only during
comment|// COMMIT_STAGE of handling write chunk request.
name|openContainerBlockMap
operator|.
name|addChunk
argument_list|(
name|blockID
argument_list|,
name|chunkInfoProto
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
name|ex
argument_list|,
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
operator|new
name|StorageContainerException
argument_list|(
literal|"Write Chunk failed"
argument_list|,
name|ex
argument_list|,
name|IO_EXCEPTION
argument_list|)
argument_list|,
name|request
argument_list|)
return|;
block|}
return|return
name|ChunkUtils
operator|.
name|getChunkResponseSuccess
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * Handle Put Small File operation. Writes the chunk and associated key    * using a single RPC. Calls BlockManager and ChunkManager to process the    * request.    */
DECL|method|handlePutSmallFile ( ContainerCommandRequestProto request, KeyValueContainer kvContainer)
name|ContainerCommandResponseProto
name|handlePutSmallFile
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|,
name|KeyValueContainer
name|kvContainer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasPutSmallFile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed Put Small File request. trace ID: {}"
argument_list|,
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|request
argument_list|)
return|;
block|}
name|PutSmallFileRequestProto
name|putSmallFileReq
init|=
name|request
operator|.
name|getPutSmallFile
argument_list|()
decl_stmt|;
try|try
block|{
name|checkContainerOpen
argument_list|(
name|kvContainer
argument_list|)
expr_stmt|;
name|BlockID
name|blockID
init|=
name|BlockID
operator|.
name|getFromProtobuf
argument_list|(
name|putSmallFileReq
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockData
argument_list|()
operator|.
name|getBlockID
argument_list|()
argument_list|)
decl_stmt|;
name|BlockData
name|blockData
init|=
name|BlockData
operator|.
name|getFromProtoBuf
argument_list|(
name|putSmallFileReq
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockData
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|blockData
argument_list|)
expr_stmt|;
name|ChunkInfo
name|chunkInfo
init|=
name|ChunkInfo
operator|.
name|getFromProtoBuf
argument_list|(
name|putSmallFileReq
operator|.
name|getChunkInfo
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|chunkInfo
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|putSmallFileReq
operator|.
name|getData
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// chunks will be committed as a part of handling putSmallFile
comment|// here. There is no need to maintain this info in openContainerBlockMap.
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|kvContainer
argument_list|,
name|blockID
argument_list|,
name|chunkInfo
argument_list|,
name|data
argument_list|,
name|Stage
operator|.
name|COMBINED
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|chunks
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|chunks
operator|.
name|add
argument_list|(
name|chunkInfo
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|blockData
operator|.
name|setChunks
argument_list|(
name|chunks
argument_list|)
expr_stmt|;
comment|// TODO: add bcsId as a part of putSmallFile transaction
name|blockManager
operator|.
name|putBlock
argument_list|(
name|kvContainer
argument_list|,
name|blockData
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incContainerBytesStats
argument_list|(
name|Type
operator|.
name|PutSmallFile
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
name|ex
argument_list|,
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
operator|new
name|StorageContainerException
argument_list|(
literal|"Read Chunk failed"
argument_list|,
name|ex
argument_list|,
name|PUT_SMALL_FILE_ERROR
argument_list|)
argument_list|,
name|request
argument_list|)
return|;
block|}
return|return
name|SmallFileUtils
operator|.
name|getPutFileResponseSuccess
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * Handle Get Small File operation. Gets a data stream using a key. This    * helps in reducing the RPC overhead for small files. Calls BlockManager and    * ChunkManager to process the request.    */
DECL|method|handleGetSmallFile ( ContainerCommandRequestProto request, KeyValueContainer kvContainer)
name|ContainerCommandResponseProto
name|handleGetSmallFile
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|,
name|KeyValueContainer
name|kvContainer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasGetSmallFile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed Get Small File request. trace ID: {}"
argument_list|,
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|request
argument_list|)
return|;
block|}
name|GetSmallFileRequestProto
name|getSmallFileReq
init|=
name|request
operator|.
name|getGetSmallFile
argument_list|()
decl_stmt|;
try|try
block|{
name|BlockID
name|blockID
init|=
name|BlockID
operator|.
name|getFromProtobuf
argument_list|(
name|getSmallFileReq
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockID
argument_list|()
argument_list|)
decl_stmt|;
comment|// TODO: add bcsId as a part of getSmallFile transaction
comment|// by default its 0
name|BlockData
name|responseData
init|=
name|blockManager
operator|.
name|getBlock
argument_list|(
name|kvContainer
argument_list|,
name|blockID
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ContainerProtos
operator|.
name|ChunkInfo
name|chunkInfo
init|=
literal|null
decl_stmt|;
name|ByteString
name|dataBuf
init|=
name|ByteString
operator|.
name|EMPTY
decl_stmt|;
for|for
control|(
name|ContainerProtos
operator|.
name|ChunkInfo
name|chunk
range|:
name|responseData
operator|.
name|getChunks
argument_list|()
control|)
block|{
name|byte
index|[]
name|data
init|=
name|chunkManager
operator|.
name|readChunk
argument_list|(
name|kvContainer
argument_list|,
name|blockID
argument_list|,
name|ChunkInfo
operator|.
name|getFromProtoBuf
argument_list|(
name|chunk
argument_list|)
argument_list|)
decl_stmt|;
name|ByteString
name|current
init|=
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|dataBuf
operator|=
name|dataBuf
operator|.
name|concat
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|chunkInfo
operator|=
name|chunk
expr_stmt|;
block|}
name|metrics
operator|.
name|incContainerBytesStats
argument_list|(
name|Type
operator|.
name|GetSmallFile
argument_list|,
name|dataBuf
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|SmallFileUtils
operator|.
name|getGetSmallFileResponseSuccess
argument_list|(
name|request
argument_list|,
name|dataBuf
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|ChunkInfo
operator|.
name|getFromProtoBuf
argument_list|(
name|chunkInfo
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|e
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
name|e
argument_list|,
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
operator|new
name|StorageContainerException
argument_list|(
literal|"Write Chunk failed"
argument_list|,
name|ex
argument_list|,
name|GET_SMALL_FILE_ERROR
argument_list|)
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
comment|/**    * Handle unsupported operation.    */
DECL|method|handleUnsupportedOp ( ContainerCommandRequestProto request)
name|ContainerCommandResponseProto
name|handleUnsupportedOp
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|)
block|{
comment|// TODO : remove all unsupported operations or handle them.
return|return
name|ContainerUtils
operator|.
name|unsupportedRequest
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * Check if container is open. Throw exception otherwise.    * @param kvContainer    * @throws StorageContainerException    */
DECL|method|checkContainerOpen (KeyValueContainer kvContainer)
specifier|private
name|void
name|checkContainerOpen
parameter_list|(
name|KeyValueContainer
name|kvContainer
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|ContainerLifeCycleState
name|containerState
init|=
name|kvContainer
operator|.
name|getContainerState
argument_list|()
decl_stmt|;
if|if
condition|(
name|containerState
operator|==
name|ContainerLifeCycleState
operator|.
name|OPEN
condition|)
block|{
return|return;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Requested operation not allowed as ContainerState is "
operator|+
name|containerState
decl_stmt|;
name|ContainerProtos
operator|.
name|Result
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|containerState
condition|)
block|{
case|case
name|CLOSING
case|:
case|case
name|CLOSED
case|:
name|result
operator|=
name|CLOSED_CONTAINER_IO
expr_stmt|;
break|break;
case|case
name|UNHEALTHY
case|:
name|result
operator|=
name|CONTAINER_UNHEALTHY
expr_stmt|;
break|break;
case|case
name|INVALID
case|:
name|result
operator|=
name|INVALID_CONTAINER_STATE
expr_stmt|;
break|break;
default|default:
name|result
operator|=
name|CONTAINER_INTERNAL_ERROR
expr_stmt|;
block|}
throw|throw
operator|new
name|StorageContainerException
argument_list|(
name|msg
argument_list|,
name|result
argument_list|)
throw|;
block|}
block|}
DECL|method|importContainer (long containerID, long maxSize, FileInputStream rawContainerStream, TarContainerPacker packer)
specifier|public
name|Container
name|importContainer
parameter_list|(
name|long
name|containerID
parameter_list|,
name|long
name|maxSize
parameter_list|,
name|FileInputStream
name|rawContainerStream
parameter_list|,
name|TarContainerPacker
name|packer
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyValueContainerData
name|containerData
init|=
operator|new
name|KeyValueContainerData
argument_list|(
name|containerID
argument_list|,
name|maxSize
argument_list|)
decl_stmt|;
name|KeyValueContainer
name|container
init|=
operator|new
name|KeyValueContainer
argument_list|(
name|containerData
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|populateContainerPathFields
argument_list|(
name|container
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
name|container
operator|.
name|importContainerData
argument_list|(
name|rawContainerStream
argument_list|,
name|packer
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
block|}
end_class

end_unit

