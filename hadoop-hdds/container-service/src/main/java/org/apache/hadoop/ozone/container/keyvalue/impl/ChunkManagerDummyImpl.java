begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.keyvalue.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|server
operator|.
name|ratis
operator|.
name|DispatcherContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|HddsVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|VolumeIOStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Implementation of ChunkManager built for running performance tests.  * Chunks are not written to disk, Reads are returned with zero-filled buffers  */
end_comment

begin_class
DECL|class|ChunkManagerDummyImpl
specifier|public
class|class
name|ChunkManagerDummyImpl
extends|extends
name|ChunkManagerImpl
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChunkManagerDummyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ChunkManagerDummyImpl (boolean sync)
specifier|public
name|ChunkManagerDummyImpl
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
name|super
argument_list|(
name|sync
argument_list|)
expr_stmt|;
block|}
comment|/**    * writes a given chunk.    *    * @param container - Container for the chunk    * @param blockID - ID of the block    * @param info - ChunkInfo    * @param data - data of the chunk    * @param dispatcherContext - dispatcherContextInfo    * @throws StorageContainerException    */
annotation|@
name|Override
DECL|method|writeChunk (Container container, BlockID blockID, ChunkInfo info, ByteBuffer data, DispatcherContext dispatcherContext)
specifier|public
name|void
name|writeChunk
parameter_list|(
name|Container
name|container
parameter_list|,
name|BlockID
name|blockID
parameter_list|,
name|ChunkInfo
name|info
parameter_list|,
name|ByteBuffer
name|data
parameter_list|,
name|DispatcherContext
name|dispatcherContext
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|long
name|writeTimeStart
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|dispatcherContext
argument_list|)
expr_stmt|;
name|DispatcherContext
operator|.
name|WriteChunkStage
name|stage
init|=
name|dispatcherContext
operator|.
name|getStage
argument_list|()
decl_stmt|;
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChunkManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyValueContainerData
name|containerData
init|=
operator|(
name|KeyValueContainerData
operator|)
name|container
operator|.
name|getContainerData
argument_list|()
decl_stmt|;
name|HddsVolume
name|volume
init|=
name|containerData
operator|.
name|getVolume
argument_list|()
decl_stmt|;
name|VolumeIOStats
name|volumeIOStats
init|=
name|volume
operator|.
name|getVolumeIOStats
argument_list|()
decl_stmt|;
name|int
name|bufferSize
decl_stmt|;
switch|switch
condition|(
name|stage
condition|)
block|{
case|case
name|WRITE_DATA
case|:
name|bufferSize
operator|=
name|data
operator|.
name|capacity
argument_list|()
expr_stmt|;
if|if
condition|(
name|bufferSize
operator|!=
name|info
operator|.
name|getLen
argument_list|()
condition|)
block|{
name|String
name|err
init|=
name|String
operator|.
name|format
argument_list|(
literal|"data array does not match the length "
operator|+
literal|"specified. DataLen: %d Byte Array: %d"
argument_list|,
name|info
operator|.
name|getLen
argument_list|()
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
name|err
argument_list|,
name|INVALID_WRITE_SIZE
argument_list|)
throw|;
block|}
comment|// Increment volumeIO stats here.
name|volumeIOStats
operator|.
name|incWriteTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|writeTimeStart
argument_list|)
expr_stmt|;
name|volumeIOStats
operator|.
name|incWriteOpCount
argument_list|()
expr_stmt|;
name|volumeIOStats
operator|.
name|incWriteBytes
argument_list|(
name|info
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|COMMIT_DATA
case|:
name|updateContainerWriteStats
argument_list|(
name|container
argument_list|,
name|info
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|COMBINED
case|:
name|updateContainerWriteStats
argument_list|(
name|container
argument_list|,
name|info
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not identify write operation."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"write data failed. error: {}"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Internal error: "
argument_list|,
name|ex
argument_list|,
name|CONTAINER_INTERNAL_ERROR
argument_list|)
throw|;
block|}
block|}
comment|/**    * return a zero-filled buffer.    *    * @param container - Container for the chunk    * @param blockID - ID of the block.    * @param info - ChunkInfo.    * @param dispatcherContext dispatcher context info.    * @return byte array    * TODO: Right now we do not support partial reads and writes of chunks.    * TODO: Explore if we need to do that for ozone.    */
annotation|@
name|Override
DECL|method|readChunk (Container container, BlockID blockID, ChunkInfo info, DispatcherContext dispatcherContext)
specifier|public
name|ByteBuffer
name|readChunk
parameter_list|(
name|Container
name|container
parameter_list|,
name|BlockID
name|blockID
parameter_list|,
name|ChunkInfo
name|info
parameter_list|,
name|DispatcherContext
name|dispatcherContext
parameter_list|)
block|{
name|long
name|readStartTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|KeyValueContainerData
name|containerData
init|=
operator|(
name|KeyValueContainerData
operator|)
name|container
operator|.
name|getContainerData
argument_list|()
decl_stmt|;
name|ByteBuffer
name|data
decl_stmt|;
name|HddsVolume
name|volume
init|=
name|containerData
operator|.
name|getVolume
argument_list|()
decl_stmt|;
name|VolumeIOStats
name|volumeIOStats
init|=
name|volume
operator|.
name|getVolumeIOStats
argument_list|()
decl_stmt|;
name|data
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
operator|(
name|int
operator|)
name|info
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// Increment volumeIO stats here.
name|volumeIOStats
operator|.
name|incReadTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|readStartTime
argument_list|)
expr_stmt|;
name|volumeIOStats
operator|.
name|incReadOpCount
argument_list|()
expr_stmt|;
name|volumeIOStats
operator|.
name|incReadBytes
argument_list|(
name|info
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/**    * Delete a given chunk - Do nothing except stats.    *    * @param container - Container for the chunk    * @param blockID - ID of the block    * @param info - Chunk Info    */
annotation|@
name|Override
DECL|method|deleteChunk (Container container, BlockID blockID, ChunkInfo info)
specifier|public
name|void
name|deleteChunk
parameter_list|(
name|Container
name|container
parameter_list|,
name|BlockID
name|blockID
parameter_list|,
name|ChunkInfo
name|info
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|blockID
argument_list|,
literal|"Block ID cannot be null."
argument_list|)
expr_stmt|;
name|KeyValueContainerData
name|containerData
init|=
operator|(
name|KeyValueContainerData
operator|)
name|container
operator|.
name|getContainerData
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getOffset
argument_list|()
operator|==
literal|0
condition|)
block|{
name|containerData
operator|.
name|decrBytesUsed
argument_list|(
name|info
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

