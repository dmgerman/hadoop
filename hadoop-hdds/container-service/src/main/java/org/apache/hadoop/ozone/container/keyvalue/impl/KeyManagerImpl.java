begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.keyvalue.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|KeyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|KeyData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|interfaces
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|utils
operator|.
name|ContainerCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|NO_SUCH_KEY
import|;
end_import

begin_comment
comment|/**  * This class is for performing key related operations on the KeyValue  * Container.  */
end_comment

begin_class
DECL|class|KeyManagerImpl
specifier|public
class|class
name|KeyManagerImpl
implements|implements
name|KeyManager
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KeyManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|config
specifier|private
name|Configuration
name|config
decl_stmt|;
comment|/**    * Constructs a key Manager.    *    * @param conf - Ozone configuration    */
DECL|method|KeyManagerImpl (Configuration conf)
specifier|public
name|KeyManagerImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|conf
argument_list|,
literal|"Config cannot be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * Puts or overwrites a key.    *    * @param container - Container for which key need to be added.    * @param data     - Key Data.    * @throws IOException    */
DECL|method|putKey (Container container, KeyData data)
specifier|public
name|void
name|putKey
parameter_list|(
name|Container
name|container
parameter_list|,
name|KeyData
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|data
argument_list|,
literal|"KeyData cannot be null for put "
operator|+
literal|"operation."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|data
operator|.
name|getContainerID
argument_list|()
operator|>=
literal|0
argument_list|,
literal|"Container Id "
operator|+
literal|"cannot be negative"
argument_list|)
expr_stmt|;
comment|// We are not locking the key manager since LevelDb serializes all actions
comment|// against a single DB. We rely on DB level locking to avoid conflicts.
name|MetadataStore
name|db
init|=
name|KeyUtils
operator|.
name|getDB
argument_list|(
operator|(
name|KeyValueContainerData
operator|)
name|container
operator|.
name|getContainerData
argument_list|()
argument_list|,
name|config
argument_list|)
decl_stmt|;
comment|// This is a post condition that acts as a hint to the user.
comment|// Should never fail.
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|db
argument_list|,
literal|"DB cannot be null here"
argument_list|)
expr_stmt|;
name|db
operator|.
name|put
argument_list|(
name|Longs
operator|.
name|toByteArray
argument_list|(
name|data
operator|.
name|getLocalID
argument_list|()
argument_list|)
argument_list|,
name|data
operator|.
name|getProtoBufMessage
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets an existing key.    *    * @param container - Container from which key need to be get.    * @param blockID - BlockID of the key.    * @return Key Data.    * @throws IOException    */
DECL|method|getKey (Container container, BlockID blockID)
specifier|public
name|KeyData
name|getKey
parameter_list|(
name|Container
name|container
parameter_list|,
name|BlockID
name|blockID
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|blockID
argument_list|,
literal|"BlockID cannot be null in GetKet request"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|,
literal|"Container name cannot be null"
argument_list|)
expr_stmt|;
name|KeyValueContainerData
name|containerData
init|=
operator|(
name|KeyValueContainerData
operator|)
name|container
operator|.
name|getContainerData
argument_list|()
decl_stmt|;
name|MetadataStore
name|db
init|=
name|KeyUtils
operator|.
name|getDB
argument_list|(
name|containerData
argument_list|,
name|config
argument_list|)
decl_stmt|;
comment|// This is a post condition that acts as a hint to the user.
comment|// Should never fail.
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|db
argument_list|,
literal|"DB cannot be null here"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|kData
init|=
name|db
operator|.
name|get
argument_list|(
name|Longs
operator|.
name|toByteArray
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|kData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Unable to find the key."
argument_list|,
name|NO_SUCH_KEY
argument_list|)
throw|;
block|}
name|ContainerProtos
operator|.
name|KeyData
name|keyData
init|=
name|ContainerProtos
operator|.
name|KeyData
operator|.
name|parseFrom
argument_list|(
name|kData
argument_list|)
decl_stmt|;
return|return
name|KeyData
operator|.
name|getFromProtoBuf
argument_list|(
name|keyData
argument_list|)
return|;
block|}
comment|/**    * Deletes an existing Key.    *    * @param container - Container from which key need to be deleted.    * @param blockID - ID of the block.    * @throws StorageContainerException    */
DECL|method|deleteKey (Container container, BlockID blockID)
specifier|public
name|void
name|deleteKey
parameter_list|(
name|Container
name|container
parameter_list|,
name|BlockID
name|blockID
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|blockID
argument_list|,
literal|"block ID cannot be null."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
operator|>=
literal|0
argument_list|,
literal|"Container ID cannot be negative."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
operator|>=
literal|0
argument_list|,
literal|"Local ID cannot be negative."
argument_list|)
expr_stmt|;
name|KeyValueContainerData
name|cData
init|=
operator|(
name|KeyValueContainerData
operator|)
name|container
operator|.
name|getContainerData
argument_list|()
decl_stmt|;
name|MetadataStore
name|db
init|=
name|KeyUtils
operator|.
name|getDB
argument_list|(
name|cData
argument_list|,
name|config
argument_list|)
decl_stmt|;
comment|// This is a post condition that acts as a hint to the user.
comment|// Should never fail.
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|db
argument_list|,
literal|"DB cannot be null here"
argument_list|)
expr_stmt|;
comment|// Note : There is a race condition here, since get and delete
comment|// are not atomic. Leaving it here since the impact is refusing
comment|// to delete a key which might have just gotten inserted after
comment|// the get check.
name|byte
index|[]
name|kKey
init|=
name|Longs
operator|.
name|toByteArray
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|kData
init|=
name|db
operator|.
name|get
argument_list|(
name|kKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|kData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Unable to find the key."
argument_list|,
name|NO_SUCH_KEY
argument_list|)
throw|;
block|}
name|db
operator|.
name|delete
argument_list|(
name|kKey
argument_list|)
expr_stmt|;
block|}
comment|/**    * List keys in a container.    *    * @param container - Container from which keys need to be listed.    * @param startLocalID  - Key to start from, 0 to begin.    * @param count    - Number of keys to return.    * @return List of Keys that match the criteria.    */
DECL|method|listKey (Container container, long startLocalID, int count)
specifier|public
name|List
argument_list|<
name|KeyData
argument_list|>
name|listKey
parameter_list|(
name|Container
name|container
parameter_list|,
name|long
name|startLocalID
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|container
argument_list|,
literal|"container cannot be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|startLocalID
operator|>=
literal|0
argument_list|,
literal|"startLocal ID cannot be "
operator|+
literal|"negative"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|count
operator|>
literal|0
argument_list|,
literal|"Count must be a positive number."
argument_list|)
expr_stmt|;
name|container
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|KeyData
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
name|KeyValueContainerData
name|cData
init|=
operator|(
name|KeyValueContainerData
operator|)
name|container
operator|.
name|getContainerData
argument_list|()
decl_stmt|;
name|MetadataStore
name|db
init|=
name|KeyUtils
operator|.
name|getDB
argument_list|(
name|cData
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|byte
index|[]
name|startKeyInBytes
init|=
name|Longs
operator|.
name|toByteArray
argument_list|(
name|startLocalID
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|range
init|=
name|db
operator|.
name|getSequentialRangeKVs
argument_list|(
name|startKeyInBytes
argument_list|,
name|count
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|range
control|)
block|{
name|KeyData
name|value
init|=
name|KeyUtils
operator|.
name|getKeyData
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|KeyData
name|data
init|=
operator|new
name|KeyData
argument_list|(
name|value
operator|.
name|getBlockID
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Shutdown KeyValueContainerManager.    */
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|KeyUtils
operator|.
name|shutdownCache
argument_list|(
name|ContainerCache
operator|.
name|getInstance
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

