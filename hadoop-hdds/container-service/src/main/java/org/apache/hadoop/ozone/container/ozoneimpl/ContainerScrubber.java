begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.ozoneimpl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ntp
operator|.
name|TimeStamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Background Metadata scrubbing for Ozone Containers.  * Future scope : data(chunks) checksum verification.  */
end_comment

begin_class
DECL|class|ContainerScrubber
specifier|public
class|class
name|ContainerScrubber
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerScrubber
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|OzoneConfiguration
name|config
decl_stmt|;
DECL|field|timePerContainer
specifier|private
specifier|final
name|long
name|timePerContainer
init|=
literal|10000
decl_stmt|;
comment|// 10 sec in millis
DECL|field|halt
specifier|private
name|boolean
name|halt
decl_stmt|;
DECL|field|scrubThread
specifier|private
name|Thread
name|scrubThread
decl_stmt|;
DECL|field|controller
specifier|private
name|ContainerController
name|controller
decl_stmt|;
DECL|method|ContainerScrubber (OzoneConfiguration conf, ContainerController controller)
specifier|public
name|ContainerScrubber
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|ContainerController
name|controller
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|halt
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|scrubThread
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|controller
operator|=
name|controller
expr_stmt|;
block|}
DECL|method|run ()
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|/**      * the outer daemon loop exits on down()      */
name|LOG
operator|.
name|info
argument_list|(
literal|"Background ContainerScrubber starting up"
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|scrub
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|halt
condition|)
block|{
break|break;
comment|// stop and exit if requested
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|300000
argument_list|)
expr_stmt|;
comment|/* 5 min between scans */
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Background ContainerScrubber interrupted. Going to exit"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Start the scrub scanner thread.    */
DECL|method|up ()
specifier|public
name|void
name|up
parameter_list|()
block|{
name|this
operator|.
name|halt
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|scrubThread
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|scrubThread
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|scrubThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scrubber up called multiple times. Scrub thread already up."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Stop the scrub scanner thread. Wait for thread to exit    */
DECL|method|down ()
specifier|public
name|void
name|down
parameter_list|()
block|{
name|this
operator|.
name|halt
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|scrubThread
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scrubber down invoked, but scrub thread is not running"
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|scrubThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|scrubThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception when waiting for Container Scrubber thread "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|scrubThread
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Current implementation : fixed rate scrub, no feedback loop.    * Dynamic throttling based on system load monitoring to be    * implemented later as jira [XXX]    *    * @param startTime    */
DECL|method|throttleScrubber (TimeStamp startTime)
specifier|private
name|void
name|throttleScrubber
parameter_list|(
name|TimeStamp
name|startTime
parameter_list|)
block|{
name|TimeStamp
name|endTime
init|=
operator|new
name|TimeStamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|timeTaken
init|=
name|endTime
operator|.
name|getTime
argument_list|()
operator|-
name|startTime
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeTaken
operator|<
name|timePerContainer
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|timePerContainer
operator|-
name|timeTaken
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring interrupted sleep inside throttle"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|scrub ()
specifier|private
name|void
name|scrub
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Container
argument_list|>
name|containerIt
init|=
name|controller
operator|.
name|getContainerSetIterator
argument_list|()
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|containerIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TimeStamp
name|startTime
init|=
operator|new
name|TimeStamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|containerIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|Handler
name|containerHandler
init|=
name|controller
operator|.
name|getHandler
argument_list|(
name|container
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|halt
condition|)
block|{
break|break;
comment|// stop if requested
block|}
try|try
block|{
name|container
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error unexpected exception {} for Container {}"
argument_list|,
name|e
argument_list|,
name|container
operator|.
name|getContainerData
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
comment|// XXX Action required here
block|}
name|count
operator|++
expr_stmt|;
name|throttleScrubber
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"iterator ran integrity checks on {} containers"
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

