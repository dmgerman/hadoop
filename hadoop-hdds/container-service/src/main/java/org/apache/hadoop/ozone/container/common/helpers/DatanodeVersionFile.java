begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * This is a utility class which helps to create the version file on datanode  * and also validate the content of the version file.  */
end_comment

begin_class
DECL|class|DatanodeVersionFile
specifier|public
class|class
name|DatanodeVersionFile
block|{
DECL|field|storageId
specifier|private
specifier|final
name|String
name|storageId
decl_stmt|;
DECL|field|clusterId
specifier|private
specifier|final
name|String
name|clusterId
decl_stmt|;
DECL|field|datanodeUuid
specifier|private
specifier|final
name|String
name|datanodeUuid
decl_stmt|;
DECL|field|cTime
specifier|private
specifier|final
name|long
name|cTime
decl_stmt|;
DECL|field|layOutVersion
specifier|private
specifier|final
name|int
name|layOutVersion
decl_stmt|;
DECL|method|DatanodeVersionFile (String storageId, String clusterId, String datanodeUuid, long cTime, int layOutVersion)
specifier|public
name|DatanodeVersionFile
parameter_list|(
name|String
name|storageId
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|String
name|datanodeUuid
parameter_list|,
name|long
name|cTime
parameter_list|,
name|int
name|layOutVersion
parameter_list|)
block|{
name|this
operator|.
name|storageId
operator|=
name|storageId
expr_stmt|;
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
name|this
operator|.
name|datanodeUuid
operator|=
name|datanodeUuid
expr_stmt|;
name|this
operator|.
name|cTime
operator|=
name|cTime
expr_stmt|;
name|this
operator|.
name|layOutVersion
operator|=
name|layOutVersion
expr_stmt|;
block|}
DECL|method|createProperties ()
specifier|private
name|Properties
name|createProperties
parameter_list|()
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|OzoneConsts
operator|.
name|STORAGE_ID
argument_list|,
name|storageId
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|OzoneConsts
operator|.
name|CLUSTER_ID
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|OzoneConsts
operator|.
name|DATANODE_UUID
argument_list|,
name|datanodeUuid
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|OzoneConsts
operator|.
name|CTIME
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|cTime
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|OzoneConsts
operator|.
name|LAYOUTVERSION
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|layOutVersion
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
comment|/**    * Creates a version File in specified path.    * @param path    * @throws IOException    */
DECL|method|createVersionFile (File path)
specifier|public
name|void
name|createVersionFile
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|RandomAccessFile
name|file
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|path
argument_list|,
literal|"rws"
argument_list|)
init|;
name|FileOutputStream
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
operator|.
name|getFD
argument_list|()
argument_list|)
init|)
block|{
name|file
operator|.
name|getChannel
argument_list|()
operator|.
name|truncate
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
name|createProperties
argument_list|()
decl_stmt|;
comment|/*        * If server is interrupted before this line,        * the version file will remain unchanged.        */
name|properties
operator|.
name|store
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a property object from the specified file content.    * @param  versionFile    * @return Properties    * @throws IOException    */
DECL|method|readFrom (File versionFile)
specifier|public
specifier|static
name|Properties
name|readFrom
parameter_list|(
name|File
name|versionFile
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|RandomAccessFile
name|file
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|versionFile
argument_list|,
literal|"rws"
argument_list|)
init|;
name|FileInputStream
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
operator|.
name|getFD
argument_list|()
argument_list|)
init|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
block|}
block|}
end_class

end_unit

