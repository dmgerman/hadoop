begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.protocol.commands
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCommandProto
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerBlocksDeletionACKProto
import|;
end_import

begin_class
DECL|class|DeleteBlockCommandStatus
specifier|public
class|class
name|DeleteBlockCommandStatus
extends|extends
name|CommandStatus
block|{
DECL|field|blocksDeletionAck
specifier|private
name|ContainerBlocksDeletionACKProto
name|blocksDeletionAck
init|=
literal|null
decl_stmt|;
DECL|method|DeleteBlockCommandStatus (Type type, Long cmdId, StorageContainerDatanodeProtocolProtos.CommandStatus.Status status, String msg, ContainerBlocksDeletionACKProto blocksDeletionAck)
specifier|public
name|DeleteBlockCommandStatus
parameter_list|(
name|Type
name|type
parameter_list|,
name|Long
name|cmdId
parameter_list|,
name|StorageContainerDatanodeProtocolProtos
operator|.
name|CommandStatus
operator|.
name|Status
name|status
parameter_list|,
name|String
name|msg
parameter_list|,
name|ContainerBlocksDeletionACKProto
name|blocksDeletionAck
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|cmdId
argument_list|,
name|status
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|blocksDeletionAck
operator|=
name|blocksDeletionAck
expr_stmt|;
block|}
DECL|method|setBlocksDeletionAck ( ContainerBlocksDeletionACKProto deletionAck)
specifier|public
name|void
name|setBlocksDeletionAck
parameter_list|(
name|ContainerBlocksDeletionACKProto
name|deletionAck
parameter_list|)
block|{
name|blocksDeletionAck
operator|=
name|deletionAck
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFromProtoBuf ( StorageContainerDatanodeProtocolProtos.CommandStatus cmdStatusProto)
specifier|public
name|CommandStatus
name|getFromProtoBuf
parameter_list|(
name|StorageContainerDatanodeProtocolProtos
operator|.
name|CommandStatus
name|cmdStatusProto
parameter_list|)
block|{
return|return
name|DeleteBlockCommandStatusBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockDeletionAck
argument_list|(
name|cmdStatusProto
operator|.
name|getBlockDeletionAck
argument_list|()
argument_list|)
operator|.
name|setCmdId
argument_list|(
name|cmdStatusProto
operator|.
name|getCmdId
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
name|cmdStatusProto
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|cmdStatusProto
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|setMsg
argument_list|(
name|cmdStatusProto
operator|.
name|getMsg
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getProtoBufMessage ()
specifier|public
name|StorageContainerDatanodeProtocolProtos
operator|.
name|CommandStatus
name|getProtoBufMessage
parameter_list|()
block|{
name|StorageContainerDatanodeProtocolProtos
operator|.
name|CommandStatus
operator|.
name|Builder
name|builder
init|=
name|StorageContainerDatanodeProtocolProtos
operator|.
name|CommandStatus
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdId
argument_list|(
name|this
operator|.
name|getCmdId
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
name|this
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|this
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|blocksDeletionAck
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setBlockDeletionAck
argument_list|(
name|blocksDeletionAck
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getMsg
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setMsg
argument_list|(
name|this
operator|.
name|getMsg
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|class|DeleteBlockCommandStatusBuilder
specifier|public
specifier|static
specifier|final
class|class
name|DeleteBlockCommandStatusBuilder
extends|extends
name|CommandStatusBuilder
block|{
DECL|field|blocksDeletionAck
specifier|private
name|ContainerBlocksDeletionACKProto
name|blocksDeletionAck
init|=
literal|null
decl_stmt|;
DECL|method|newBuilder ()
specifier|public
specifier|static
name|DeleteBlockCommandStatusBuilder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|DeleteBlockCommandStatusBuilder
argument_list|()
return|;
block|}
DECL|method|setBlockDeletionAck ( ContainerBlocksDeletionACKProto deletionAck)
specifier|public
name|DeleteBlockCommandStatusBuilder
name|setBlockDeletionAck
parameter_list|(
name|ContainerBlocksDeletionACKProto
name|deletionAck
parameter_list|)
block|{
name|this
operator|.
name|blocksDeletionAck
operator|=
name|deletionAck
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|build ()
specifier|public
name|CommandStatus
name|build
parameter_list|()
block|{
return|return
operator|new
name|DeleteBlockCommandStatus
argument_list|(
name|getType
argument_list|()
argument_list|,
name|getCmdId
argument_list|()
argument_list|,
name|getStatus
argument_list|()
argument_list|,
name|getMsg
argument_list|()
argument_list|,
name|blocksDeletionAck
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

