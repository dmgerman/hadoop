begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|HddsVolume
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|Yaml
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|CHECKSUM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|CONTAINER_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|CONTAINER_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|LAYOUTVERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|MAX_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|METADATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|ORIGIN_NODE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|ORIGIN_PIPELINE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|STATE
import|;
end_import

begin_comment
comment|/**  * ContainerData is the in-memory representation of container metadata and is  * represented on disk by the .container file.  */
end_comment

begin_class
DECL|class|ContainerData
specifier|public
specifier|abstract
class|class
name|ContainerData
block|{
comment|//Type of the container.
comment|// For now, we support only KeyValueContainer.
DECL|field|containerType
specifier|private
specifier|final
name|ContainerType
name|containerType
decl_stmt|;
comment|// Unique identifier for the container
DECL|field|containerID
specifier|private
specifier|final
name|long
name|containerID
decl_stmt|;
comment|// Layout version of the container data
DECL|field|layOutVersion
specifier|private
specifier|final
name|int
name|layOutVersion
decl_stmt|;
comment|// Metadata of the container will be a key value pair.
comment|// This can hold information like volume name, owner etc.,
DECL|field|metadata
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
decl_stmt|;
comment|// State of the Container
DECL|field|state
specifier|private
name|ContainerDataProto
operator|.
name|State
name|state
decl_stmt|;
DECL|field|maxSize
specifier|private
specifier|final
name|long
name|maxSize
decl_stmt|;
comment|//ID of the pipeline where this container is created
DECL|field|originPipelineId
specifier|private
name|String
name|originPipelineId
decl_stmt|;
comment|//ID of the datanode where this container is created
DECL|field|originNodeId
specifier|private
name|String
name|originNodeId
decl_stmt|;
comment|/** parameters for read/write statistics on the container. **/
DECL|field|readBytes
specifier|private
specifier|final
name|AtomicLong
name|readBytes
decl_stmt|;
DECL|field|writeBytes
specifier|private
specifier|final
name|AtomicLong
name|writeBytes
decl_stmt|;
DECL|field|readCount
specifier|private
specifier|final
name|AtomicLong
name|readCount
decl_stmt|;
DECL|field|writeCount
specifier|private
specifier|final
name|AtomicLong
name|writeCount
decl_stmt|;
DECL|field|bytesUsed
specifier|private
specifier|final
name|AtomicLong
name|bytesUsed
decl_stmt|;
DECL|field|keyCount
specifier|private
specifier|final
name|AtomicLong
name|keyCount
decl_stmt|;
DECL|field|volume
specifier|private
name|HddsVolume
name|volume
decl_stmt|;
DECL|field|checksum
specifier|private
name|String
name|checksum
decl_stmt|;
DECL|field|CHARSET_ENCODING
specifier|public
specifier|static
specifier|final
name|Charset
name|CHARSET_ENCODING
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
DECL|field|DUMMY_CHECKSUM
specifier|private
specifier|static
specifier|final
name|String
name|DUMMY_CHECKSUM
init|=
operator|new
name|String
argument_list|(
operator|new
name|byte
index|[
literal|64
index|]
argument_list|,
name|CHARSET_ENCODING
argument_list|)
decl_stmt|;
comment|// Common Fields need to be stored in .container file.
DECL|field|YAML_FIELDS
specifier|protected
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|YAML_FIELDS
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|CONTAINER_TYPE
argument_list|,
name|CONTAINER_ID
argument_list|,
name|LAYOUTVERSION
argument_list|,
name|STATE
argument_list|,
name|METADATA
argument_list|,
name|MAX_SIZE
argument_list|,
name|CHECKSUM
argument_list|,
name|ORIGIN_PIPELINE_ID
argument_list|,
name|ORIGIN_NODE_ID
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Creates a ContainerData Object, which holds metadata of the container.    * @param type - ContainerType    * @param containerId - ContainerId    * @param size - container maximum size in bytes    * @param originPipelineId - Pipeline Id where this container is/was created    * @param originNodeId - Node Id where this container is/was created    */
DECL|method|ContainerData (ContainerType type, long containerId, long size, String originPipelineId, String originNodeId)
specifier|protected
name|ContainerData
parameter_list|(
name|ContainerType
name|type
parameter_list|,
name|long
name|containerId
parameter_list|,
name|long
name|size
parameter_list|,
name|String
name|originPipelineId
parameter_list|,
name|String
name|originNodeId
parameter_list|)
block|{
name|this
argument_list|(
name|type
argument_list|,
name|containerId
argument_list|,
name|ChunkLayOutVersion
operator|.
name|getLatestVersion
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|size
argument_list|,
name|originPipelineId
argument_list|,
name|originNodeId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a ContainerData Object, which holds metadata of the container.    * @param type - ContainerType    * @param containerId - ContainerId    * @param layOutVersion - Container layOutVersion    * @param size - Container maximum size in bytes    * @param originPipelineId - Pipeline Id where this container is/was created    * @param originNodeId - Node Id where this container is/was created    */
DECL|method|ContainerData (ContainerType type, long containerId, int layOutVersion, long size, String originPipelineId, String originNodeId)
specifier|protected
name|ContainerData
parameter_list|(
name|ContainerType
name|type
parameter_list|,
name|long
name|containerId
parameter_list|,
name|int
name|layOutVersion
parameter_list|,
name|long
name|size
parameter_list|,
name|String
name|originPipelineId
parameter_list|,
name|String
name|originNodeId
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerType
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|containerID
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|layOutVersion
operator|=
name|layOutVersion
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|ContainerDataProto
operator|.
name|State
operator|.
name|OPEN
expr_stmt|;
name|this
operator|.
name|readCount
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|this
operator|.
name|readBytes
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeCount
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeBytes
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|this
operator|.
name|bytesUsed
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|this
operator|.
name|keyCount
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxSize
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|originPipelineId
operator|=
name|originPipelineId
expr_stmt|;
name|this
operator|.
name|originNodeId
operator|=
name|originNodeId
expr_stmt|;
name|setChecksumTo0ByteArray
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns the containerID.    */
DECL|method|getContainerID ()
specifier|public
name|long
name|getContainerID
parameter_list|()
block|{
return|return
name|containerID
return|;
block|}
comment|/**    * Returns the path to base dir of the container.    * @return Path to base dir.    */
DECL|method|getContainerPath ()
specifier|public
specifier|abstract
name|String
name|getContainerPath
parameter_list|()
function_decl|;
comment|/**    * Returns the type of the container.    * @return ContainerType    */
DECL|method|getContainerType ()
specifier|public
name|ContainerType
name|getContainerType
parameter_list|()
block|{
return|return
name|containerType
return|;
block|}
comment|/**    * Returns the state of the container.    * @return ContainerLifeCycleState    */
DECL|method|getState ()
specifier|public
specifier|synchronized
name|ContainerDataProto
operator|.
name|State
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
comment|/**    * Set the state of the container.    * @param state    */
DECL|method|setState (ContainerDataProto.State state)
specifier|public
specifier|synchronized
name|void
name|setState
parameter_list|(
name|ContainerDataProto
operator|.
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
comment|/**    * Return's maximum size of the container in bytes.    * @return maxSize in bytes    */
DECL|method|getMaxSize ()
specifier|public
name|long
name|getMaxSize
parameter_list|()
block|{
return|return
name|maxSize
return|;
block|}
comment|/**    * Returns the layOutVersion of the actual container data format.    * @return layOutVersion    */
DECL|method|getLayOutVersion ()
specifier|public
name|int
name|getLayOutVersion
parameter_list|()
block|{
return|return
name|ChunkLayOutVersion
operator|.
name|getChunkLayOutVersion
argument_list|(
name|layOutVersion
argument_list|)
operator|.
name|getVersion
argument_list|()
return|;
block|}
comment|/**    * Add/Update metadata.    * We should hold the container lock before updating the metadata as this    * will be persisted on disk. Unless, we are reconstructing ContainerData    * from protoBuf or from on disk .container file in which case lock is not    * required.    */
DECL|method|addMetadata (String key, String value)
specifier|public
name|void
name|addMetadata
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|metadata
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Retuns metadata of the container.    * @return metadata    */
DECL|method|getMetadata ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMetadata
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|this
operator|.
name|metadata
argument_list|)
return|;
block|}
comment|/**    * Set metadata.    * We should hold the container lock before updating the metadata as this    * will be persisted on disk. Unless, we are reconstructing ContainerData    * from protoBuf or from on disk .container file in which case lock is not    * required.    */
DECL|method|setMetadata (Map<String, String> metadataMap)
specifier|public
name|void
name|setMetadata
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadataMap
parameter_list|)
block|{
name|metadata
operator|.
name|clear
argument_list|()
expr_stmt|;
name|metadata
operator|.
name|putAll
argument_list|(
name|metadataMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * checks if the container is open.    * @return - boolean    */
DECL|method|isOpen ()
specifier|public
specifier|synchronized
name|boolean
name|isOpen
parameter_list|()
block|{
return|return
name|ContainerDataProto
operator|.
name|State
operator|.
name|OPEN
operator|==
name|state
return|;
block|}
comment|/**    * checks if the container is invalid.    * @return - boolean    */
DECL|method|isValid ()
specifier|public
specifier|synchronized
name|boolean
name|isValid
parameter_list|()
block|{
return|return
operator|!
operator|(
name|ContainerDataProto
operator|.
name|State
operator|.
name|INVALID
operator|==
name|state
operator|)
return|;
block|}
comment|/**    * checks if the container is closed.    * @return - boolean    */
DECL|method|isClosed ()
specifier|public
specifier|synchronized
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|ContainerDataProto
operator|.
name|State
operator|.
name|CLOSED
operator|==
name|state
return|;
block|}
comment|/**    * checks if the container is quasi closed.    * @return - boolean    */
DECL|method|isQuasiClosed ()
specifier|public
specifier|synchronized
name|boolean
name|isQuasiClosed
parameter_list|()
block|{
return|return
name|ContainerDataProto
operator|.
name|State
operator|.
name|QUASI_CLOSED
operator|==
name|state
return|;
block|}
comment|/**    * Marks this container as quasi closed.    */
DECL|method|quasiCloseContainer ()
specifier|public
specifier|synchronized
name|void
name|quasiCloseContainer
parameter_list|()
block|{
name|setState
argument_list|(
name|ContainerDataProto
operator|.
name|State
operator|.
name|QUASI_CLOSED
argument_list|)
expr_stmt|;
block|}
comment|/**    * Marks this container as closed.    */
DECL|method|closeContainer ()
specifier|public
specifier|synchronized
name|void
name|closeContainer
parameter_list|()
block|{
name|setState
argument_list|(
name|ContainerDataProto
operator|.
name|State
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the number of bytes read from the container.    * @return the number of bytes read from the container.    */
DECL|method|getReadBytes ()
specifier|public
name|long
name|getReadBytes
parameter_list|()
block|{
return|return
name|readBytes
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Increase the number of bytes read from the container.    * @param bytes number of bytes read.    */
DECL|method|incrReadBytes (long bytes)
specifier|public
name|void
name|incrReadBytes
parameter_list|(
name|long
name|bytes
parameter_list|)
block|{
name|this
operator|.
name|readBytes
operator|.
name|addAndGet
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the number of times the container is read.    * @return the number of times the container is read.    */
DECL|method|getReadCount ()
specifier|public
name|long
name|getReadCount
parameter_list|()
block|{
return|return
name|readCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Increase the number of container read count by 1.    */
DECL|method|incrReadCount ()
specifier|public
name|void
name|incrReadCount
parameter_list|()
block|{
name|this
operator|.
name|readCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the number of bytes write into the container.    * @return the number of bytes write into the container.    */
DECL|method|getWriteBytes ()
specifier|public
name|long
name|getWriteBytes
parameter_list|()
block|{
return|return
name|writeBytes
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Increase the number of bytes write into the container.    * @param bytes the number of bytes write into the container.    */
DECL|method|incrWriteBytes (long bytes)
specifier|public
name|void
name|incrWriteBytes
parameter_list|(
name|long
name|bytes
parameter_list|)
block|{
name|this
operator|.
name|writeBytes
operator|.
name|addAndGet
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the number of writes into the container.    * @return the number of writes into the container.    */
DECL|method|getWriteCount ()
specifier|public
name|long
name|getWriteCount
parameter_list|()
block|{
return|return
name|writeCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Increase the number of writes into the container by 1.    */
DECL|method|incrWriteCount ()
specifier|public
name|void
name|incrWriteCount
parameter_list|()
block|{
name|this
operator|.
name|writeCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/**    * Sets the number of bytes used by the container.    * @param used    */
DECL|method|setBytesUsed (long used)
specifier|public
name|void
name|setBytesUsed
parameter_list|(
name|long
name|used
parameter_list|)
block|{
name|this
operator|.
name|bytesUsed
operator|.
name|set
argument_list|(
name|used
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the number of bytes used by the container.    * @return the number of bytes used by the container.    */
DECL|method|getBytesUsed ()
specifier|public
name|long
name|getBytesUsed
parameter_list|()
block|{
return|return
name|bytesUsed
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Increase the number of bytes used by the container.    * @param used number of bytes used by the container.    * @return the current number of bytes used by the container afert increase.    */
DECL|method|incrBytesUsed (long used)
specifier|public
name|long
name|incrBytesUsed
parameter_list|(
name|long
name|used
parameter_list|)
block|{
return|return
name|this
operator|.
name|bytesUsed
operator|.
name|addAndGet
argument_list|(
name|used
argument_list|)
return|;
block|}
comment|/**    * Decrease the number of bytes used by the container.    * @param reclaimed the number of bytes reclaimed from the container.    * @return the current number of bytes used by the container after decrease.    */
DECL|method|decrBytesUsed (long reclaimed)
specifier|public
name|long
name|decrBytesUsed
parameter_list|(
name|long
name|reclaimed
parameter_list|)
block|{
return|return
name|this
operator|.
name|bytesUsed
operator|.
name|addAndGet
argument_list|(
operator|-
literal|1L
operator|*
name|reclaimed
argument_list|)
return|;
block|}
comment|/**    * Set the Volume for the Container.    * This should be called only from the createContainer.    * @param hddsVolume    */
DECL|method|setVolume (HddsVolume hddsVolume)
specifier|public
name|void
name|setVolume
parameter_list|(
name|HddsVolume
name|hddsVolume
parameter_list|)
block|{
name|this
operator|.
name|volume
operator|=
name|hddsVolume
expr_stmt|;
block|}
comment|/**    * Returns the volume of the Container.    * @return HddsVolume    */
DECL|method|getVolume ()
specifier|public
name|HddsVolume
name|getVolume
parameter_list|()
block|{
return|return
name|volume
return|;
block|}
comment|/**    * Increments the number of keys in the container.    */
DECL|method|incrKeyCount ()
specifier|public
name|void
name|incrKeyCount
parameter_list|()
block|{
name|this
operator|.
name|keyCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/**    * Decrements number of keys in the container.    */
DECL|method|decrKeyCount ()
specifier|public
name|void
name|decrKeyCount
parameter_list|()
block|{
name|this
operator|.
name|keyCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns number of keys in the container.    * @return key count    */
DECL|method|getKeyCount ()
specifier|public
name|long
name|getKeyCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|keyCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Set's number of keys in the container.    * @param count    */
DECL|method|setKeyCount (long count)
specifier|public
name|void
name|setKeyCount
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|this
operator|.
name|keyCount
operator|.
name|set
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|setChecksumTo0ByteArray ()
specifier|public
name|void
name|setChecksumTo0ByteArray
parameter_list|()
block|{
name|this
operator|.
name|checksum
operator|=
name|DUMMY_CHECKSUM
expr_stmt|;
block|}
DECL|method|setChecksum (String checkSum)
specifier|public
name|void
name|setChecksum
parameter_list|(
name|String
name|checkSum
parameter_list|)
block|{
name|this
operator|.
name|checksum
operator|=
name|checkSum
expr_stmt|;
block|}
DECL|method|getChecksum ()
specifier|public
name|String
name|getChecksum
parameter_list|()
block|{
return|return
name|this
operator|.
name|checksum
return|;
block|}
comment|/**    * Returns the origin pipeline Id of this container.    * @return origin node Id    */
DECL|method|getOriginPipelineId ()
specifier|public
name|String
name|getOriginPipelineId
parameter_list|()
block|{
return|return
name|originPipelineId
return|;
block|}
comment|/**    * Returns the origin node Id of this container.    * @return origin node Id    */
DECL|method|getOriginNodeId ()
specifier|public
name|String
name|getOriginNodeId
parameter_list|()
block|{
return|return
name|originNodeId
return|;
block|}
comment|/**    * Compute the checksum for ContainerData using the specified Yaml (based    * on ContainerType) and set the checksum.    *    * Checksum of ContainerData is calculated by setting the    * {@link ContainerData#checksum} field to a 64-byte array with all 0's -    * {@link ContainerData#DUMMY_CHECKSUM}. After the checksum is calculated,    * the checksum field is updated with this value.    *    * @param yaml Yaml for ContainerType to get the ContainerData as Yaml String    * @throws IOException    */
DECL|method|computeAndSetChecksum (Yaml yaml)
specifier|public
name|void
name|computeAndSetChecksum
parameter_list|(
name|Yaml
name|yaml
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Set checksum to dummy value - 0 byte array, to calculate the checksum
comment|// of rest of the data.
name|setChecksumTo0ByteArray
argument_list|()
expr_stmt|;
comment|// Dump yaml data into a string to compute its checksum
name|String
name|containerDataYamlStr
init|=
name|yaml
operator|.
name|dump
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|this
operator|.
name|checksum
operator|=
name|ContainerUtils
operator|.
name|getChecksum
argument_list|(
name|containerDataYamlStr
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a ProtoBuf Message from ContainerData.    *    * @return Protocol Buffer Message    */
DECL|method|getProtoBufMessage ()
specifier|public
specifier|abstract
name|ContainerProtos
operator|.
name|ContainerDataProto
name|getProtoBufMessage
parameter_list|()
function_decl|;
block|}
end_class

end_unit

