begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.protocol.commands
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ReplicateContainerCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ReplicateContainerCommandProto
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCommandProto
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * SCM command to request replication of a container.  */
end_comment

begin_class
DECL|class|ReplicateContainerCommand
specifier|public
class|class
name|ReplicateContainerCommand
extends|extends
name|SCMCommand
argument_list|<
name|ReplicateContainerCommandProto
argument_list|>
block|{
DECL|field|containerID
specifier|private
specifier|final
name|long
name|containerID
decl_stmt|;
DECL|field|sourceDatanodes
specifier|private
specifier|final
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|sourceDatanodes
decl_stmt|;
DECL|method|ReplicateContainerCommand (long containerID, List<DatanodeDetails> sourceDatanodes)
specifier|public
name|ReplicateContainerCommand
parameter_list|(
name|long
name|containerID
parameter_list|,
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|sourceDatanodes
parameter_list|)
block|{
name|this
operator|.
name|containerID
operator|=
name|containerID
expr_stmt|;
name|this
operator|.
name|sourceDatanodes
operator|=
name|sourceDatanodes
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|SCMCommandProto
operator|.
name|Type
operator|.
name|replicateContainerCommand
return|;
block|}
annotation|@
name|Override
DECL|method|getProtoBufMessage ()
specifier|public
name|byte
index|[]
name|getProtoBufMessage
parameter_list|()
block|{
return|return
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|getProto ()
specifier|public
name|ReplicateContainerCommandProto
name|getProto
parameter_list|()
block|{
name|Builder
name|builder
init|=
name|ReplicateContainerCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerID
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeDetails
name|dd
range|:
name|sourceDatanodes
control|)
block|{
name|builder
operator|.
name|addSources
argument_list|(
name|dd
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getFromProtobuf ( ReplicateContainerCommandProto protoMessage)
specifier|public
specifier|static
name|ReplicateContainerCommand
name|getFromProtobuf
parameter_list|(
name|ReplicateContainerCommandProto
name|protoMessage
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|protoMessage
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodeDetails
init|=
name|protoMessage
operator|.
name|getSourcesList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|DatanodeDetails
operator|::
name|getFromProtoBuf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ReplicateContainerCommand
argument_list|(
name|protoMessage
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|datanodeDetails
argument_list|)
return|;
block|}
DECL|method|getContainerID ()
specifier|public
name|long
name|getContainerID
parameter_list|()
block|{
return|return
name|containerID
return|;
block|}
DECL|method|getSourceDatanodes ()
specifier|public
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|getSourceDatanodes
parameter_list|()
block|{
return|return
name|sourceDatanodes
return|;
block|}
block|}
end_class

end_unit

