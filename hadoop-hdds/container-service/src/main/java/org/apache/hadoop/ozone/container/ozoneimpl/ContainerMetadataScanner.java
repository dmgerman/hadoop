begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.ozoneimpl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * This class is responsible to perform metadata verification of the  * containers.  */
end_comment

begin_class
DECL|class|ContainerMetadataScanner
specifier|public
class|class
name|ContainerMetadataScanner
extends|extends
name|Thread
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerMetadataScanner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|controller
specifier|private
specifier|final
name|ContainerController
name|controller
decl_stmt|;
DECL|field|metadataScanInterval
specifier|private
specifier|final
name|long
name|metadataScanInterval
decl_stmt|;
comment|/**    * True if the thread is stopping.<p/>    * Protected by this object's lock.    */
DECL|field|stopping
specifier|private
name|boolean
name|stopping
init|=
literal|false
decl_stmt|;
DECL|method|ContainerMetadataScanner (ContainerController controller, long metadataScanInterval)
specifier|public
name|ContainerMetadataScanner
parameter_list|(
name|ContainerController
name|controller
parameter_list|,
name|long
name|metadataScanInterval
parameter_list|)
block|{
name|this
operator|.
name|controller
operator|=
name|controller
expr_stmt|;
name|this
operator|.
name|metadataScanInterval
operator|=
name|metadataScanInterval
expr_stmt|;
name|setName
argument_list|(
literal|"ContainerMetadataScanner"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|/**      * the outer daemon loop exits on down()      */
name|LOG
operator|.
name|info
argument_list|(
literal|"Background ContainerMetadataScanner starting up"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|stopping
condition|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|scrub
argument_list|()
expr_stmt|;
name|long
name|interval
init|=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
argument_list|)
decl_stmt|;
comment|// ensure to delay next metadata scan with respect to user config.
if|if
condition|(
operator|!
name|stopping
operator|&&
name|interval
operator|<
name|metadataScanInterval
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|metadataScanInterval
operator|-
name|interval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Background ContainerMetadataScanner interrupted."
operator|+
literal|" Going to exit"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|scrub ()
specifier|private
name|void
name|scrub
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Container
argument_list|>
name|containerIt
init|=
name|controller
operator|.
name|getContainers
argument_list|()
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|stopping
operator|&&
name|containerIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Container
name|container
init|=
name|containerIt
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|scrub
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unexpected error while scrubbing container {}"
argument_list|,
name|container
operator|.
name|getContainerData
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"iterator ran integrity checks on {} containers"
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|scrub (Container container)
specifier|public
name|void
name|scrub
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|container
operator|.
name|scanMetaData
argument_list|()
condition|)
block|{
name|controller
operator|.
name|markContainerUnhealthy
argument_list|(
name|container
operator|.
name|getContainerData
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|shutdown ()
specifier|public
specifier|synchronized
name|void
name|shutdown
parameter_list|()
block|{
name|this
operator|.
name|stopping
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected exception while stopping metadata scanner."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

