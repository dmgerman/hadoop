begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.replication
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|StreamingOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/**  * JAX-RS streaming output to return the binary container data.  */
end_comment

begin_class
DECL|class|ContainerStreamingOutput
specifier|public
class|class
name|ContainerStreamingOutput
implements|implements
name|StreamingOutput
block|{
DECL|field|containerId
specifier|private
name|long
name|containerId
decl_stmt|;
DECL|field|containerReplicationSource
specifier|private
name|ContainerReplicationSource
name|containerReplicationSource
decl_stmt|;
DECL|method|ContainerStreamingOutput (long containerId, ContainerReplicationSource containerReplicationSource)
specifier|public
name|ContainerStreamingOutput
parameter_list|(
name|long
name|containerId
parameter_list|,
name|ContainerReplicationSource
name|containerReplicationSource
parameter_list|)
block|{
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|containerReplicationSource
operator|=
name|containerReplicationSource
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (OutputStream outputStream)
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|containerReplicationSource
operator|.
name|copyData
argument_list|(
name|containerId
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

