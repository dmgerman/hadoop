begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.volume
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|HDDS_DATANODE_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|RunJar
operator|.
name|SHUTDOWN_HOOK_PRIORITY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|StorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|NodeReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|InconsistentStorageStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|StorageLocationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|utils
operator|.
name|HddsVolumeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|HddsVolume
operator|.
name|VolumeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|VolumeChoosingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|AutoCloseableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskOutOfSpaceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|InstrumentedLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_comment
comment|/**  * VolumeSet to manage volumes in a DataNode.  */
end_comment

begin_class
DECL|class|VolumeSet
specifier|public
class|class
name|VolumeSet
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VolumeSet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|/**    * {@link VolumeSet#volumeMap} maintains a map of all active volumes in the    * DataNode. Each volume has one-to-one mapping with a volumeInfo object.    */
DECL|field|volumeMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|HddsVolume
argument_list|>
name|volumeMap
decl_stmt|;
comment|/**    * {@link VolumeSet#failedVolumeMap} maintains a map of volumes which have    * failed. The keys in this map and {@link VolumeSet#volumeMap} are    * mutually exclusive.    */
DECL|field|failedVolumeMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|HddsVolume
argument_list|>
name|failedVolumeMap
decl_stmt|;
comment|/**    * {@link VolumeSet#volumeStateMap} maintains a list of active volumes per    * StorageType.    */
DECL|field|volumeStateMap
specifier|private
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|HddsVolume
argument_list|>
argument_list|>
name|volumeStateMap
decl_stmt|;
comment|/**    * Lock to synchronize changes to the VolumeSet. Any update to    * {@link VolumeSet#volumeMap}, {@link VolumeSet#failedVolumeMap}, or    * {@link VolumeSet#volumeStateMap} should be done after acquiring this lock.    */
DECL|field|volumeSetLock
specifier|private
specifier|final
name|AutoCloseableLock
name|volumeSetLock
decl_stmt|;
DECL|field|datanodeUuid
specifier|private
specifier|final
name|String
name|datanodeUuid
decl_stmt|;
DECL|field|clusterID
specifier|private
name|String
name|clusterID
decl_stmt|;
DECL|field|shutdownHook
specifier|private
name|Runnable
name|shutdownHook
decl_stmt|;
DECL|method|VolumeSet (String dnUuid, Configuration conf)
specifier|public
name|VolumeSet
parameter_list|(
name|String
name|dnUuid
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|dnUuid
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|VolumeSet (String dnUuid, String clusterID, Configuration conf)
specifier|public
name|VolumeSet
parameter_list|(
name|String
name|dnUuid
parameter_list|,
name|String
name|clusterID
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|datanodeUuid
operator|=
name|dnUuid
expr_stmt|;
name|this
operator|.
name|clusterID
operator|=
name|clusterID
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|volumeSetLock
operator|=
operator|new
name|AutoCloseableLock
argument_list|(
operator|new
name|InstrumentedLock
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|LOG
argument_list|,
operator|new
name|ReentrantLock
argument_list|(
literal|true
argument_list|)
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OzoneConfigKeys
operator|.
name|HDDS_WRITE_LOCK_REPORTING_THRESHOLD_MS_KEY
argument_list|,
name|OzoneConfigKeys
operator|.
name|HDDS_WRITE_LOCK_REPORTING_THRESHOLD_MS_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OzoneConfigKeys
operator|.
name|HDDS_LOCK_SUPPRESS_WARNING_INTERVAL_MS_KEY
argument_list|,
name|OzoneConfigKeys
operator|.
name|HDDS_LOCK_SUPPRESS_WARNING_INTERVAL_MS_DEAFULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|initializeVolumeSet
argument_list|()
expr_stmt|;
block|}
comment|// Add DN volumes configured through ConfigKeys to volumeMap.
DECL|method|initializeVolumeSet ()
specifier|private
name|void
name|initializeVolumeSet
parameter_list|()
throws|throws
name|IOException
block|{
name|volumeMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|failedVolumeMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|volumeStateMap
operator|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|StorageType
operator|.
name|class
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|rawLocations
init|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|HDDS_DATANODE_DIR_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|rawLocations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rawLocations
operator|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rawLocations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No location configured in either "
operator|+
name|HDDS_DATANODE_DIR_KEY
operator|+
literal|" or "
operator|+
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
throw|;
block|}
for|for
control|(
name|StorageType
name|storageType
range|:
name|StorageType
operator|.
name|values
argument_list|()
control|)
block|{
name|volumeStateMap
operator|.
name|put
argument_list|(
name|storageType
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|HddsVolume
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|locationString
range|:
name|rawLocations
control|)
block|{
try|try
block|{
name|StorageLocation
name|location
init|=
name|StorageLocation
operator|.
name|parse
argument_list|(
name|locationString
argument_list|)
decl_stmt|;
name|HddsVolume
name|hddsVolume
init|=
name|createVolume
argument_list|(
name|location
operator|.
name|getUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|location
operator|.
name|getStorageType
argument_list|()
argument_list|)
decl_stmt|;
name|checkAndSetClusterID
argument_list|(
name|hddsVolume
operator|.
name|getClusterID
argument_list|()
argument_list|)
expr_stmt|;
name|volumeMap
operator|.
name|put
argument_list|(
name|hddsVolume
operator|.
name|getHddsRootDir
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|hddsVolume
argument_list|)
expr_stmt|;
name|volumeStateMap
operator|.
name|get
argument_list|(
name|hddsVolume
operator|.
name|getStorageType
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|hddsVolume
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added Volume : {} to VolumeSet"
argument_list|,
name|hddsVolume
operator|.
name|getHddsRootDir
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|HddsVolume
name|volume
init|=
operator|new
name|HddsVolume
operator|.
name|Builder
argument_list|(
name|locationString
argument_list|)
operator|.
name|failedVolume
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|failedVolumeMap
operator|.
name|put
argument_list|(
name|locationString
argument_list|,
name|volume
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to parse the storage location: "
operator|+
name|locationString
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|volumeMap
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DiskOutOfSpaceException
argument_list|(
literal|"No storage location configured"
argument_list|)
throw|;
block|}
comment|// Ensure volume threads are stopped and scm df is saved during shutdown.
name|shutdownHook
operator|=
parameter_list|()
lambda|->
block|{
name|shutdown
argument_list|()
expr_stmt|;
block|}
expr_stmt|;
name|ShutdownHookManager
operator|.
name|get
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
name|shutdownHook
argument_list|,
name|SHUTDOWN_HOOK_PRIORITY
argument_list|)
expr_stmt|;
block|}
comment|/**    * If Version file exists and the {@link VolumeSet#clusterID} is not set yet,    * assign it the value from Version file. Otherwise, check that the given    * id matches with the id from version file.    * @param idFromVersionFile value of the property from Version file    * @throws InconsistentStorageStateException    */
DECL|method|checkAndSetClusterID (String idFromVersionFile)
specifier|private
name|void
name|checkAndSetClusterID
parameter_list|(
name|String
name|idFromVersionFile
parameter_list|)
throws|throws
name|InconsistentStorageStateException
block|{
comment|// If the clusterID is null (not set), assign it the value
comment|// from version file.
if|if
condition|(
name|this
operator|.
name|clusterID
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|clusterID
operator|=
name|idFromVersionFile
expr_stmt|;
return|return;
block|}
comment|// If the clusterID is already set, it should match with the value from the
comment|// version file.
if|if
condition|(
operator|!
name|idFromVersionFile
operator|.
name|equals
argument_list|(
name|this
operator|.
name|clusterID
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InconsistentStorageStateException
argument_list|(
literal|"Mismatched ClusterIDs. VolumeSet has: "
operator|+
name|this
operator|.
name|clusterID
operator|+
literal|", and version file has: "
operator|+
name|idFromVersionFile
argument_list|)
throw|;
block|}
block|}
DECL|method|acquireLock ()
specifier|public
name|void
name|acquireLock
parameter_list|()
block|{
name|volumeSetLock
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
DECL|method|releaseLock ()
specifier|public
name|void
name|releaseLock
parameter_list|()
block|{
name|volumeSetLock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|createVolume (String locationString, StorageType storageType)
specifier|private
name|HddsVolume
name|createVolume
parameter_list|(
name|String
name|locationString
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
throws|throws
name|IOException
block|{
name|HddsVolume
operator|.
name|Builder
name|volumeBuilder
init|=
operator|new
name|HddsVolume
operator|.
name|Builder
argument_list|(
name|locationString
argument_list|)
operator|.
name|conf
argument_list|(
name|conf
argument_list|)
operator|.
name|datanodeUuid
argument_list|(
name|datanodeUuid
argument_list|)
operator|.
name|clusterID
argument_list|(
name|clusterID
argument_list|)
operator|.
name|storageType
argument_list|(
name|storageType
argument_list|)
decl_stmt|;
return|return
name|volumeBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Add a volume to VolumeSet
DECL|method|addVolume (String dataDir)
specifier|public
name|boolean
name|addVolume
parameter_list|(
name|String
name|dataDir
parameter_list|)
block|{
return|return
name|addVolume
argument_list|(
name|dataDir
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|)
return|;
block|}
comment|// Add a volume to VolumeSet
DECL|method|addVolume (String volumeRoot, StorageType storageType)
specifier|public
name|boolean
name|addVolume
parameter_list|(
name|String
name|volumeRoot
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
block|{
name|String
name|hddsRoot
init|=
name|HddsVolumeUtil
operator|.
name|getHddsRoot
argument_list|(
name|volumeRoot
argument_list|)
decl_stmt|;
name|boolean
name|success
decl_stmt|;
try|try
init|(
name|AutoCloseableLock
name|lock
init|=
name|volumeSetLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|volumeMap
operator|.
name|containsKey
argument_list|(
name|hddsRoot
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Volume : {} already exists in VolumeMap"
argument_list|,
name|hddsRoot
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|failedVolumeMap
operator|.
name|containsKey
argument_list|(
name|hddsRoot
argument_list|)
condition|)
block|{
name|failedVolumeMap
operator|.
name|remove
argument_list|(
name|hddsRoot
argument_list|)
expr_stmt|;
block|}
name|HddsVolume
name|hddsVolume
init|=
name|createVolume
argument_list|(
name|volumeRoot
argument_list|,
name|storageType
argument_list|)
decl_stmt|;
name|volumeMap
operator|.
name|put
argument_list|(
name|hddsVolume
operator|.
name|getHddsRootDir
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|hddsVolume
argument_list|)
expr_stmt|;
name|volumeStateMap
operator|.
name|get
argument_list|(
name|hddsVolume
operator|.
name|getStorageType
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|hddsVolume
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added Volume : {} to VolumeSet"
argument_list|,
name|hddsVolume
operator|.
name|getHddsRootDir
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to add volume "
operator|+
name|volumeRoot
operator|+
literal|" to VolumeSet"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
comment|// Mark a volume as failed
DECL|method|failVolume (String dataDir)
specifier|public
name|void
name|failVolume
parameter_list|(
name|String
name|dataDir
parameter_list|)
block|{
name|String
name|hddsRoot
init|=
name|HddsVolumeUtil
operator|.
name|getHddsRoot
argument_list|(
name|dataDir
argument_list|)
decl_stmt|;
try|try
init|(
name|AutoCloseableLock
name|lock
init|=
name|volumeSetLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|volumeMap
operator|.
name|containsKey
argument_list|(
name|hddsRoot
argument_list|)
condition|)
block|{
name|HddsVolume
name|hddsVolume
init|=
name|volumeMap
operator|.
name|get
argument_list|(
name|hddsRoot
argument_list|)
decl_stmt|;
name|hddsVolume
operator|.
name|failVolume
argument_list|()
expr_stmt|;
name|volumeMap
operator|.
name|remove
argument_list|(
name|hddsRoot
argument_list|)
expr_stmt|;
name|volumeStateMap
operator|.
name|get
argument_list|(
name|hddsVolume
operator|.
name|getStorageType
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|hddsVolume
argument_list|)
expr_stmt|;
name|failedVolumeMap
operator|.
name|put
argument_list|(
name|hddsRoot
argument_list|,
name|hddsVolume
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving Volume : {} to failed Volumes"
argument_list|,
name|hddsRoot
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|failedVolumeMap
operator|.
name|containsKey
argument_list|(
name|hddsRoot
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Volume : {} is not active"
argument_list|,
name|hddsRoot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Volume : {} does not exist in VolumeSet"
argument_list|,
name|hddsRoot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Remove a volume from the VolumeSet completely.
DECL|method|removeVolume (String dataDir)
specifier|public
name|void
name|removeVolume
parameter_list|(
name|String
name|dataDir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|hddsRoot
init|=
name|HddsVolumeUtil
operator|.
name|getHddsRoot
argument_list|(
name|dataDir
argument_list|)
decl_stmt|;
try|try
init|(
name|AutoCloseableLock
name|lock
init|=
name|volumeSetLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|volumeMap
operator|.
name|containsKey
argument_list|(
name|hddsRoot
argument_list|)
condition|)
block|{
name|HddsVolume
name|hddsVolume
init|=
name|volumeMap
operator|.
name|get
argument_list|(
name|hddsRoot
argument_list|)
decl_stmt|;
name|hddsVolume
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|volumeMap
operator|.
name|remove
argument_list|(
name|hddsRoot
argument_list|)
expr_stmt|;
name|volumeStateMap
operator|.
name|get
argument_list|(
name|hddsVolume
operator|.
name|getStorageType
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|hddsVolume
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed Volume : {} from VolumeSet"
argument_list|,
name|hddsRoot
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|failedVolumeMap
operator|.
name|containsKey
argument_list|(
name|hddsRoot
argument_list|)
condition|)
block|{
name|HddsVolume
name|hddsVolume
init|=
name|failedVolumeMap
operator|.
name|get
argument_list|(
name|hddsRoot
argument_list|)
decl_stmt|;
name|hddsVolume
operator|.
name|setState
argument_list|(
name|VolumeState
operator|.
name|NON_EXISTENT
argument_list|)
expr_stmt|;
name|failedVolumeMap
operator|.
name|remove
argument_list|(
name|hddsRoot
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed Volume : {} from failed VolumeSet"
argument_list|,
name|hddsRoot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Volume : {} does not exist in VolumeSet"
argument_list|,
name|hddsRoot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|chooseVolume (long containerSize, VolumeChoosingPolicy choosingPolicy)
specifier|public
name|HddsVolume
name|chooseVolume
parameter_list|(
name|long
name|containerSize
parameter_list|,
name|VolumeChoosingPolicy
name|choosingPolicy
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|choosingPolicy
operator|.
name|chooseVolume
argument_list|(
name|getVolumesList
argument_list|()
argument_list|,
name|containerSize
argument_list|)
return|;
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
for|for
control|(
name|HddsVolume
name|hddsVolume
range|:
name|volumeMap
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|hddsVolume
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to shutdown volume : "
operator|+
name|hddsVolume
operator|.
name|getHddsRootDir
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|shutdownHook
operator|!=
literal|null
condition|)
block|{
name|ShutdownHookManager
operator|.
name|get
argument_list|()
operator|.
name|removeShutdownHook
argument_list|(
name|shutdownHook
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getVolumesList ()
specifier|public
name|List
argument_list|<
name|HddsVolume
argument_list|>
name|getVolumesList
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|volumeMap
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getFailedVolumesList ()
specifier|public
name|List
argument_list|<
name|HddsVolume
argument_list|>
name|getFailedVolumesList
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|failedVolumeMap
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getVolumeMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|HddsVolume
argument_list|>
name|getVolumeMap
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|volumeMap
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getVolumeStateMap ()
specifier|public
name|Map
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|HddsVolume
argument_list|>
argument_list|>
name|getVolumeStateMap
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|volumeStateMap
argument_list|)
return|;
block|}
DECL|method|getNodeReport ()
specifier|public
name|StorageContainerDatanodeProtocolProtos
operator|.
name|NodeReportProto
name|getNodeReport
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|failed
decl_stmt|;
name|StorageLocationReport
index|[]
name|reports
init|=
operator|new
name|StorageLocationReport
index|[
name|volumeMap
operator|.
name|size
argument_list|()
operator|+
name|failedVolumeMap
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|HddsVolume
name|hddsVolume
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|HddsVolume
argument_list|>
name|entry
range|:
name|volumeMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|hddsVolume
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|VolumeInfo
name|volumeInfo
init|=
name|hddsVolume
operator|.
name|getVolumeInfo
argument_list|()
decl_stmt|;
name|long
name|scmUsed
init|=
literal|0
decl_stmt|;
name|long
name|remaining
init|=
literal|0
decl_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|scmUsed
operator|=
name|volumeInfo
operator|.
name|getScmUsed
argument_list|()
expr_stmt|;
name|remaining
operator|=
name|volumeInfo
operator|.
name|getAvailable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get scmUsed and remaining for container "
operator|+
literal|"storage location {}"
argument_list|,
name|volumeInfo
operator|.
name|getRootDir
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset scmUsed and remaining if df/du failed.
name|scmUsed
operator|=
literal|0
expr_stmt|;
name|remaining
operator|=
literal|0
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|StorageLocationReport
operator|.
name|Builder
name|builder
init|=
name|StorageLocationReport
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setStorageLocation
argument_list|(
name|volumeInfo
operator|.
name|getRootDir
argument_list|()
argument_list|)
operator|.
name|setId
argument_list|(
name|hddsVolume
operator|.
name|getStorageID
argument_list|()
argument_list|)
operator|.
name|setFailed
argument_list|(
name|failed
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|hddsVolume
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|.
name|setRemaining
argument_list|(
name|remaining
argument_list|)
operator|.
name|setScmUsed
argument_list|(
name|scmUsed
argument_list|)
operator|.
name|setStorageType
argument_list|(
name|hddsVolume
operator|.
name|getStorageType
argument_list|()
argument_list|)
expr_stmt|;
name|StorageLocationReport
name|r
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|reports
index|[
name|counter
operator|++
index|]
operator|=
name|r
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|HddsVolume
argument_list|>
name|entry
range|:
name|failedVolumeMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|hddsVolume
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|StorageLocationReport
operator|.
name|Builder
name|builder
init|=
name|StorageLocationReport
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setStorageLocation
argument_list|(
name|hddsVolume
operator|.
name|getHddsRootDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|setId
argument_list|(
name|hddsVolume
operator|.
name|getStorageID
argument_list|()
argument_list|)
operator|.
name|setFailed
argument_list|(
literal|true
argument_list|)
operator|.
name|setCapacity
argument_list|(
literal|0
argument_list|)
operator|.
name|setRemaining
argument_list|(
literal|0
argument_list|)
operator|.
name|setScmUsed
argument_list|(
literal|0
argument_list|)
operator|.
name|setStorageType
argument_list|(
name|hddsVolume
operator|.
name|getStorageType
argument_list|()
argument_list|)
expr_stmt|;
name|StorageLocationReport
name|r
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|reports
index|[
name|counter
operator|++
index|]
operator|=
name|r
expr_stmt|;
block|}
name|NodeReportProto
operator|.
name|Builder
name|nrb
init|=
name|NodeReportProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reports
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|nrb
operator|.
name|addStorageReport
argument_list|(
name|reports
index|[
name|i
index|]
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|nrb
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

