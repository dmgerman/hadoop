begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.protocol.commands
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|CloseContainerCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineID
import|;
end_import

begin_comment
comment|/**  * Asks datanode to close a container.  */
end_comment

begin_class
DECL|class|CloseContainerCommand
specifier|public
class|class
name|CloseContainerCommand
extends|extends
name|SCMCommand
argument_list|<
name|CloseContainerCommandProto
argument_list|>
block|{
DECL|field|pipelineID
specifier|private
specifier|final
name|PipelineID
name|pipelineID
decl_stmt|;
DECL|field|force
specifier|private
name|boolean
name|force
decl_stmt|;
DECL|method|CloseContainerCommand (final long containerID, final PipelineID pipelineID)
specifier|public
name|CloseContainerCommand
parameter_list|(
specifier|final
name|long
name|containerID
parameter_list|,
specifier|final
name|PipelineID
name|pipelineID
parameter_list|)
block|{
name|this
argument_list|(
name|containerID
argument_list|,
name|pipelineID
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|CloseContainerCommand (final long containerID, final PipelineID pipelineID, boolean force)
specifier|public
name|CloseContainerCommand
parameter_list|(
specifier|final
name|long
name|containerID
parameter_list|,
specifier|final
name|PipelineID
name|pipelineID
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
name|super
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|this
operator|.
name|pipelineID
operator|=
name|pipelineID
expr_stmt|;
name|this
operator|.
name|force
operator|=
name|force
expr_stmt|;
block|}
comment|/**    * Returns the type of this command.    *    * @return Type    */
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|SCMCommandProto
operator|.
name|Type
name|getType
parameter_list|()
block|{
return|return
name|SCMCommandProto
operator|.
name|Type
operator|.
name|closeContainerCommand
return|;
block|}
annotation|@
name|Override
DECL|method|getProto ()
specifier|public
name|CloseContainerCommandProto
name|getProto
parameter_list|()
block|{
return|return
name|CloseContainerCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerID
argument_list|(
name|getId
argument_list|()
argument_list|)
operator|.
name|setCmdId
argument_list|(
name|getId
argument_list|()
argument_list|)
operator|.
name|setPipelineID
argument_list|(
name|pipelineID
operator|.
name|getProtobuf
argument_list|()
argument_list|)
operator|.
name|setForce
argument_list|(
name|force
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getFromProtobuf ( CloseContainerCommandProto closeContainerProto)
specifier|public
specifier|static
name|CloseContainerCommand
name|getFromProtobuf
parameter_list|(
name|CloseContainerCommandProto
name|closeContainerProto
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|closeContainerProto
argument_list|)
expr_stmt|;
return|return
operator|new
name|CloseContainerCommand
argument_list|(
name|closeContainerProto
operator|.
name|getCmdId
argument_list|()
argument_list|,
name|PipelineID
operator|.
name|getFromProtobuf
argument_list|(
name|closeContainerProto
operator|.
name|getPipelineID
argument_list|()
argument_list|)
argument_list|,
name|closeContainerProto
operator|.
name|getForce
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getContainerID ()
specifier|public
name|long
name|getContainerID
parameter_list|()
block|{
return|return
name|getId
argument_list|()
return|;
block|}
DECL|method|getPipelineID ()
specifier|public
name|PipelineID
name|getPipelineID
parameter_list|()
block|{
return|return
name|pipelineID
return|;
block|}
block|}
end_class

end_unit

