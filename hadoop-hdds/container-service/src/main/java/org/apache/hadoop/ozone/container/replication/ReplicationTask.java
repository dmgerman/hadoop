begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.replication
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_comment
comment|/**  * The task to download a container from the sources.  */
end_comment

begin_class
DECL|class|ReplicationTask
specifier|public
class|class
name|ReplicationTask
block|{
DECL|field|status
specifier|private
specifier|volatile
name|Status
name|status
init|=
name|Status
operator|.
name|QUEUED
decl_stmt|;
DECL|field|containerId
specifier|private
specifier|final
name|long
name|containerId
decl_stmt|;
DECL|field|sources
specifier|private
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|sources
decl_stmt|;
DECL|field|queued
specifier|private
specifier|final
name|Instant
name|queued
init|=
name|Instant
operator|.
name|now
argument_list|()
decl_stmt|;
DECL|method|ReplicationTask (long containerId, List<DatanodeDetails> sources)
specifier|public
name|ReplicationTask
parameter_list|(
name|long
name|containerId
parameter_list|,
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|sources
parameter_list|)
block|{
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|sources
operator|=
name|sources
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ReplicationTask
name|that
init|=
operator|(
name|ReplicationTask
operator|)
name|o
decl_stmt|;
return|return
name|containerId
operator|==
name|that
operator|.
name|containerId
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|containerId
argument_list|)
return|;
block|}
DECL|method|getContainerId ()
specifier|public
name|long
name|getContainerId
parameter_list|()
block|{
return|return
name|containerId
return|;
block|}
DECL|method|getSources ()
specifier|public
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|getSources
parameter_list|()
block|{
return|return
name|sources
return|;
block|}
DECL|method|getStatus ()
specifier|public
name|Status
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
DECL|method|setStatus ( Status status)
specifier|public
name|void
name|setStatus
parameter_list|(
name|Status
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ReplicationTask{"
operator|+
literal|"status="
operator|+
name|status
operator|+
literal|", containerId="
operator|+
name|containerId
operator|+
literal|", sources="
operator|+
name|sources
operator|+
literal|", queued="
operator|+
name|queued
operator|+
literal|'}'
return|;
block|}
DECL|method|getQueued ()
specifier|public
name|Instant
name|getQueued
parameter_list|()
block|{
return|return
name|queued
return|;
block|}
comment|/**    * Status of the replication.    */
DECL|enum|Status
specifier|public
enum|enum
name|Status
block|{
DECL|enumConstant|QUEUED
name|QUEUED
block|,
DECL|enumConstant|DOWNLOADING
name|DOWNLOADING
block|,
DECL|enumConstant|FAILED
name|FAILED
block|,
DECL|enumConstant|DONE
name|DONE
block|}
block|}
end_class

end_unit

