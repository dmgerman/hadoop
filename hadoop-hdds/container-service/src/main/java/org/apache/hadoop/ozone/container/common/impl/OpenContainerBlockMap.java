begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|KeyData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * This class will maintain list of open keys per container when closeContainer  * command comes, it should autocommit all open keys of a open container before  * marking the container as closed.  */
end_comment

begin_class
DECL|class|OpenContainerBlockMap
specifier|public
class|class
name|OpenContainerBlockMap
block|{
comment|/**    * TODO : We may construct the openBlockMap by reading the Block Layout    * for each block inside a container listing all chunk files and reading the    * sizes. This will help to recreate the openKeys Map once the DataNode    * restarts.    *    * For now, we will track all open blocks of a container in the blockMap.    */
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|HashMap
argument_list|<
name|Long
argument_list|,
name|KeyData
argument_list|>
argument_list|>
DECL|field|openContainerBlockMap
name|openContainerBlockMap
decl_stmt|;
comment|/**    * Constructs OpenContainerBlockMap.    */
DECL|method|OpenContainerBlockMap ()
specifier|public
name|OpenContainerBlockMap
parameter_list|()
block|{
name|openContainerBlockMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Removes the Container matching with specified containerId.    * @param containerId containerId    */
DECL|method|removeContainer (long containerId)
specifier|public
name|void
name|removeContainer
parameter_list|(
name|long
name|containerId
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|containerId
operator|>=
literal|0
argument_list|,
literal|"Container Id cannot be negative."
argument_list|)
expr_stmt|;
name|openContainerBlockMap
operator|.
name|computeIfPresent
argument_list|(
name|containerId
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * updates the chunkInfoList in case chunk is added or deleted    * @param blockID id of the block.    * @param info - Chunk Info    * @param remove if true, deletes the chunkInfo list otherwise appends to the    *               chunkInfo List    * @throws IOException    */
DECL|method|updateOpenKeyMap (BlockID blockID, ContainerProtos.ChunkInfo info, boolean remove)
specifier|public
specifier|synchronized
name|void
name|updateOpenKeyMap
parameter_list|(
name|BlockID
name|blockID
parameter_list|,
name|ContainerProtos
operator|.
name|ChunkInfo
name|info
parameter_list|,
name|boolean
name|remove
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|remove
condition|)
block|{
name|deleteChunkFromMap
argument_list|(
name|blockID
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addChunkToMap
argument_list|(
name|blockID
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getKeyData (ContainerProtos.ChunkInfo info, BlockID blockID)
specifier|private
name|KeyData
name|getKeyData
parameter_list|(
name|ContainerProtos
operator|.
name|ChunkInfo
name|info
parameter_list|,
name|BlockID
name|blockID
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyData
name|keyData
init|=
operator|new
name|KeyData
argument_list|(
name|blockID
argument_list|)
decl_stmt|;
name|keyData
operator|.
name|addMetadata
argument_list|(
literal|"TYPE"
argument_list|,
literal|"KEY"
argument_list|)
expr_stmt|;
name|keyData
operator|.
name|addChunk
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
name|keyData
return|;
block|}
DECL|method|addChunkToMap (BlockID blockID, ContainerProtos.ChunkInfo info)
specifier|private
name|void
name|addChunkToMap
parameter_list|(
name|BlockID
name|blockID
parameter_list|,
name|ContainerProtos
operator|.
name|ChunkInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|long
name|containerId
init|=
name|blockID
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|long
name|localID
init|=
name|blockID
operator|.
name|getLocalID
argument_list|()
decl_stmt|;
name|KeyData
name|keyData
init|=
name|openContainerBlockMap
operator|.
name|computeIfAbsent
argument_list|(
name|containerId
argument_list|,
name|emptyMap
lambda|->
operator|new
name|LinkedHashMap
argument_list|<
name|Long
argument_list|,
name|KeyData
argument_list|>
argument_list|()
argument_list|)
operator|.
name|putIfAbsent
argument_list|(
name|localID
argument_list|,
name|getKeyData
argument_list|(
name|info
argument_list|,
name|blockID
argument_list|)
argument_list|)
decl_stmt|;
comment|// KeyData != null means the block already exist
if|if
condition|(
name|keyData
operator|!=
literal|null
condition|)
block|{
name|HashMap
argument_list|<
name|Long
argument_list|,
name|KeyData
argument_list|>
name|keyDataSet
init|=
name|openContainerBlockMap
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|keyDataSet
operator|.
name|putIfAbsent
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
name|getKeyData
argument_list|(
name|info
argument_list|,
name|blockID
argument_list|)
argument_list|)
expr_stmt|;
name|keyDataSet
operator|.
name|computeIfPresent
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
name|value
operator|.
name|addChunk
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * removes the chunks from the chunkInfo list for the given block.    * @param blockID id of the block    * @param chunkInfo chunk info.    */
DECL|method|deleteChunkFromMap (BlockID blockID, ContainerProtos.ChunkInfo chunkInfo)
specifier|private
specifier|synchronized
name|void
name|deleteChunkFromMap
parameter_list|(
name|BlockID
name|blockID
parameter_list|,
name|ContainerProtos
operator|.
name|ChunkInfo
name|chunkInfo
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|chunkInfo
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|blockID
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Long
argument_list|,
name|KeyData
argument_list|>
name|keyDataMap
init|=
name|openContainerBlockMap
operator|.
name|get
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyDataMap
operator|!=
literal|null
condition|)
block|{
name|long
name|localId
init|=
name|blockID
operator|.
name|getLocalID
argument_list|()
decl_stmt|;
name|KeyData
name|keyData
init|=
name|keyDataMap
operator|.
name|get
argument_list|(
name|localId
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyData
operator|!=
literal|null
condition|)
block|{
name|keyData
operator|.
name|removeChunk
argument_list|(
name|chunkInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * returns the list of open to the openContainerBlockMap    * @param containerId container id    * @return List of open Keys(blocks)    */
DECL|method|getOpenKeys (long containerId)
specifier|public
name|List
argument_list|<
name|KeyData
argument_list|>
name|getOpenKeys
parameter_list|(
name|long
name|containerId
parameter_list|)
block|{
name|HashMap
argument_list|<
name|Long
argument_list|,
name|KeyData
argument_list|>
name|keyDataHashMap
init|=
name|openContainerBlockMap
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
return|return
name|keyDataHashMap
operator|==
literal|null
condition|?
literal|null
else|:
name|keyDataHashMap
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * removes the block from the block map.    * @param blockID    */
DECL|method|removeFromKeyMap (BlockID blockID)
specifier|public
specifier|synchronized
name|void
name|removeFromKeyMap
parameter_list|(
name|BlockID
name|blockID
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|blockID
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Long
argument_list|,
name|KeyData
argument_list|>
name|keyDataMap
init|=
name|openContainerBlockMap
operator|.
name|get
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyDataMap
operator|!=
literal|null
condition|)
block|{
name|keyDataMap
operator|.
name|remove
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyDataMap
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|removeContainer
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
DECL|method|getContainerOpenKeyMap ()
name|HashMap
argument_list|<
name|Long
argument_list|,
name|KeyData
argument_list|>
argument_list|>
name|getContainerOpenKeyMap
parameter_list|()
block|{
return|return
name|openContainerBlockMap
return|;
block|}
block|}
end_class

end_unit

