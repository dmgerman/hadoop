begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|KeyData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Map: containerId -> (localId -> KeyData).  * The outer container map does not entail locking for a better performance.  * The inner {@link KeyDataMap} is synchronized.  *  * This class will maintain list of open keys per container when closeContainer  * command comes, it should autocommit all open keys of a open container before  * marking the container as closed.  */
end_comment

begin_class
DECL|class|OpenContainerBlockMap
specifier|public
class|class
name|OpenContainerBlockMap
block|{
comment|/**    * Map: localId -> KeyData.    *    * In order to support {@link #getAll()}, the update operations are synchronized.    */
DECL|class|KeyDataMap
specifier|static
class|class
name|KeyDataMap
block|{
DECL|field|blocks
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|Long
argument_list|,
name|KeyData
argument_list|>
name|blocks
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|get (long localId)
name|KeyData
name|get
parameter_list|(
name|long
name|localId
parameter_list|)
block|{
return|return
name|blocks
operator|.
name|get
argument_list|(
name|localId
argument_list|)
return|;
block|}
DECL|method|removeAndGetSize (long localId)
specifier|synchronized
name|int
name|removeAndGetSize
parameter_list|(
name|long
name|localId
parameter_list|)
block|{
name|blocks
operator|.
name|remove
argument_list|(
name|localId
argument_list|)
expr_stmt|;
return|return
name|blocks
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|computeIfAbsent (long localId, Function<Long, KeyData> f)
specifier|synchronized
name|KeyData
name|computeIfAbsent
parameter_list|(
name|long
name|localId
parameter_list|,
name|Function
argument_list|<
name|Long
argument_list|,
name|KeyData
argument_list|>
name|f
parameter_list|)
block|{
return|return
name|blocks
operator|.
name|computeIfAbsent
argument_list|(
name|localId
argument_list|,
name|f
argument_list|)
return|;
block|}
DECL|method|getAll ()
specifier|synchronized
name|List
argument_list|<
name|KeyData
argument_list|>
name|getAll
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|blocks
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * TODO : We may construct the openBlockMap by reading the Block Layout    * for each block inside a container listing all chunk files and reading the    * sizes. This will help to recreate the openKeys Map once the DataNode    * restarts.    *    * For now, we will track all open blocks of a container in the blockMap.    */
DECL|field|containers
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|Long
argument_list|,
name|KeyDataMap
argument_list|>
name|containers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Removes the Container matching with specified containerId.    * @param containerId containerId    */
DECL|method|removeContainer (long containerId)
specifier|public
name|void
name|removeContainer
parameter_list|(
name|long
name|containerId
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|containerId
operator|>=
literal|0
argument_list|,
literal|"Container Id cannot be negative."
argument_list|)
expr_stmt|;
name|containers
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
DECL|method|addChunk (BlockID blockID, ChunkInfo info)
specifier|public
name|void
name|addChunk
parameter_list|(
name|BlockID
name|blockID
parameter_list|,
name|ChunkInfo
name|info
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|containers
operator|.
name|computeIfAbsent
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|id
lambda|->
operator|new
name|KeyDataMap
argument_list|()
argument_list|)
operator|.
name|computeIfAbsent
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
name|id
lambda|->
operator|new
name|KeyData
argument_list|(
name|blockID
argument_list|)
argument_list|)
operator|.
name|addChunk
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
comment|/**    * Removes the chunk from the chunkInfo list for the given block.    * @param blockID id of the block    * @param chunkInfo chunk info.    */
DECL|method|removeChunk (BlockID blockID, ChunkInfo chunkInfo)
specifier|public
name|void
name|removeChunk
parameter_list|(
name|BlockID
name|blockID
parameter_list|,
name|ChunkInfo
name|chunkInfo
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|chunkInfo
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|blockID
argument_list|)
expr_stmt|;
name|Optional
operator|.
name|ofNullable
argument_list|(
name|containers
operator|.
name|get
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|blocks
lambda|->
name|blocks
operator|.
name|get
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|keyData
lambda|->
name|keyData
operator|.
name|removeChunk
argument_list|(
name|chunkInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * returns the list of open to the openContainerBlockMap    * @param containerId container id    * @return List of open Keys(blocks)    */
DECL|method|getOpenKeys (long containerId)
specifier|public
name|List
argument_list|<
name|KeyData
argument_list|>
name|getOpenKeys
parameter_list|(
name|long
name|containerId
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|containers
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|KeyDataMap
operator|::
name|getAll
argument_list|)
operator|.
name|orElseGet
argument_list|(
name|Collections
operator|::
name|emptyList
argument_list|)
return|;
block|}
comment|/**    * removes the block from the block map.    * @param blockID    */
DECL|method|removeFromKeyMap (BlockID blockID)
specifier|public
name|void
name|removeFromKeyMap
parameter_list|(
name|BlockID
name|blockID
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|blockID
argument_list|)
expr_stmt|;
name|containers
operator|.
name|computeIfPresent
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|,
operator|(
name|containerId
operator|,
name|blocks
operator|)
operator|->
name|blocks
operator|.
name|removeAndGetSize
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
operator|==
literal|0
condition|?
literal|null
else|:
name|blocks
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getKeyDataMap (long containerId)
name|KeyDataMap
name|getKeyDataMap
parameter_list|(
name|long
name|containerId
parameter_list|)
block|{
return|return
name|containers
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

