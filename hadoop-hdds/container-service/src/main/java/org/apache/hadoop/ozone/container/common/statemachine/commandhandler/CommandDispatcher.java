begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.statemachine.commandhandler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|commandhandler
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCommandProto
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|SCMConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|StateContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
operator|.
name|OzoneContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|SCMCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Dispatches command to the correct handler.  */
end_comment

begin_class
DECL|class|CommandDispatcher
specifier|public
specifier|final
class|class
name|CommandDispatcher
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CommandDispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|StateContext
name|context
decl_stmt|;
DECL|field|handlerMap
specifier|private
specifier|final
name|Map
argument_list|<
name|Type
argument_list|,
name|CommandHandler
argument_list|>
name|handlerMap
decl_stmt|;
DECL|field|container
specifier|private
specifier|final
name|OzoneContainer
name|container
decl_stmt|;
DECL|field|connectionManager
specifier|private
specifier|final
name|SCMConnectionManager
name|connectionManager
decl_stmt|;
comment|/**    * Constructs a command Dispatcher.    * @param context - Context.    */
comment|/**    * Constructs a command dispatcher.    *    * @param container - Ozone Container    * @param context - Context    * @param handlers - Set of handlers.    */
DECL|method|CommandDispatcher (OzoneContainer container, SCMConnectionManager connectionManager, StateContext context, CommandHandler... handlers)
specifier|private
name|CommandDispatcher
parameter_list|(
name|OzoneContainer
name|container
parameter_list|,
name|SCMConnectionManager
name|connectionManager
parameter_list|,
name|StateContext
name|context
parameter_list|,
name|CommandHandler
modifier|...
name|handlers
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|handlers
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|handlers
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|connectionManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|connectionManager
operator|=
name|connectionManager
expr_stmt|;
name|handlerMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|CommandHandler
name|h
range|:
name|handlers
control|)
block|{
if|if
condition|(
name|handlerMap
operator|.
name|containsKey
argument_list|(
name|h
operator|.
name|getCommandType
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Duplicate handler for the same command. Exiting. Handle "
operator|+
literal|"key : { }"
argument_list|,
name|h
operator|.
name|getCommandType
argument_list|()
operator|.
name|getDescriptorForType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Duplicate handler for the same "
operator|+
literal|"command."
argument_list|)
throw|;
block|}
name|handlerMap
operator|.
name|put
argument_list|(
name|h
operator|.
name|getCommandType
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCloseContainerHandler ()
specifier|public
name|CommandHandler
name|getCloseContainerHandler
parameter_list|()
block|{
return|return
name|handlerMap
operator|.
name|get
argument_list|(
name|Type
operator|.
name|closeContainerCommand
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDeleteBlocksCommandHandler ()
specifier|public
name|CommandHandler
name|getDeleteBlocksCommandHandler
parameter_list|()
block|{
return|return
name|handlerMap
operator|.
name|get
argument_list|(
name|Type
operator|.
name|deleteBlocksCommand
argument_list|)
return|;
block|}
comment|/**    * Dispatch the command to the correct handler.    *    * @param command - SCM Command.    */
DECL|method|handle (SCMCommand command)
specifier|public
name|void
name|handle
parameter_list|(
name|SCMCommand
name|command
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|CommandHandler
name|handler
init|=
name|handlerMap
operator|.
name|get
argument_list|(
name|command
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handle
argument_list|(
name|command
argument_list|,
name|container
argument_list|,
name|context
argument_list|,
name|connectionManager
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unknown SCM Command queued. There is no handler for this "
operator|+
literal|"command. Command: {}"
argument_list|,
name|command
operator|.
name|getType
argument_list|()
operator|.
name|getDescriptorForType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newBuilder ()
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**    * Helper class to construct command dispatcher.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|handlerList
specifier|private
specifier|final
name|List
argument_list|<
name|CommandHandler
argument_list|>
name|handlerList
decl_stmt|;
DECL|field|container
specifier|private
name|OzoneContainer
name|container
decl_stmt|;
DECL|field|context
specifier|private
name|StateContext
name|context
decl_stmt|;
DECL|field|connectionManager
specifier|private
name|SCMConnectionManager
name|connectionManager
decl_stmt|;
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{
name|handlerList
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Adds a handler.      *      * @param handler - handler      * @return Builder      */
DECL|method|addHandler (CommandHandler handler)
specifier|public
name|Builder
name|addHandler
parameter_list|(
name|CommandHandler
name|handler
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|handlerList
operator|.
name|add
argument_list|(
name|handler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add the OzoneContainer.      *      * @param ozoneContainer - ozone container.      * @return Builder      */
DECL|method|setContainer (OzoneContainer ozoneContainer)
specifier|public
name|Builder
name|setContainer
parameter_list|(
name|OzoneContainer
name|ozoneContainer
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|ozoneContainer
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|=
name|ozoneContainer
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the Connection Manager.      *      * @param scmConnectionManager      * @return this      */
DECL|method|setConnectionManager (SCMConnectionManager scmConnectionManager)
specifier|public
name|Builder
name|setConnectionManager
parameter_list|(
name|SCMConnectionManager
name|scmConnectionManager
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|scmConnectionManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionManager
operator|=
name|scmConnectionManager
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the Context.      *      * @param stateContext - StateContext      * @return this      */
DECL|method|setContext (StateContext stateContext)
specifier|public
name|Builder
name|setContext
parameter_list|(
name|StateContext
name|stateContext
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|stateContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|stateContext
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Builds a command Dispatcher.      * @return Command Dispatcher.      */
DECL|method|build ()
specifier|public
name|CommandDispatcher
name|build
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|this
operator|.
name|connectionManager
argument_list|,
literal|"Missing connection"
operator|+
literal|" manager."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|this
operator|.
name|container
argument_list|,
literal|"Missing container."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|this
operator|.
name|context
argument_list|,
literal|"Missing context."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|this
operator|.
name|handlerList
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandDispatcher
argument_list|(
name|this
operator|.
name|container
argument_list|,
name|this
operator|.
name|connectionManager
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|handlerList
operator|.
name|toArray
argument_list|(
operator|new
name|CommandHandler
index|[
name|handlerList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

