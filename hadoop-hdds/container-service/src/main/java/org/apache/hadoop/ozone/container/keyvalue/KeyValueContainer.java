begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.keyvalue
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerLifeCycleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerDataYaml
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|VolumeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|HddsVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|VolumeChoosingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|KeyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|KeyValueContainerLocationUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|KeyValueContainerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskOutOfSpaceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|CONTAINER_ALREADY_EXISTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|CONTAINER_METADATA_ERROR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|CONTAINER_INTERNAL_ERROR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|CONTAINER_FILES_CREATE_ERROR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|DISK_OUT_OF_SPACE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|ERROR_IN_COMPACT_DB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|INVALID_CONTAINER_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|UNSUPPORTED_REQUEST
import|;
end_import

begin_comment
comment|/**  * Class to perform KeyValue Container operations.  */
end_comment

begin_class
DECL|class|KeyValueContainer
specifier|public
class|class
name|KeyValueContainer
implements|implements
name|Container
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Use a non-fair RW lock for better throughput, we may revisit this decision
comment|// if this causes fairness issues.
DECL|field|lock
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|containerData
specifier|private
specifier|final
name|KeyValueContainerData
name|containerData
decl_stmt|;
DECL|field|containerMaxSize
specifier|private
name|long
name|containerMaxSize
decl_stmt|;
DECL|field|config
specifier|private
name|Configuration
name|config
decl_stmt|;
DECL|method|KeyValueContainer (KeyValueContainerData containerData, Configuration ozoneConfig)
specifier|public
name|KeyValueContainer
parameter_list|(
name|KeyValueContainerData
name|containerData
parameter_list|,
name|Configuration
name|ozoneConfig
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containerData
argument_list|,
literal|"KeyValueContainerData cannot "
operator|+
literal|"be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|ozoneConfig
argument_list|,
literal|"Ozone configuration cannot "
operator|+
literal|"be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|ozoneConfig
expr_stmt|;
name|this
operator|.
name|containerData
operator|=
name|containerData
expr_stmt|;
name|this
operator|.
name|containerMaxSize
operator|=
operator|(
name|long
operator|)
name|ozoneConfig
operator|.
name|getInt
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_SIZE_GB
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_SIZE_DEFAULT
argument_list|)
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create (VolumeSet volumeSet, VolumeChoosingPolicy volumeChoosingPolicy, String scmId)
specifier|public
name|void
name|create
parameter_list|(
name|VolumeSet
name|volumeSet
parameter_list|,
name|VolumeChoosingPolicy
name|volumeChoosingPolicy
parameter_list|,
name|String
name|scmId
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeChoosingPolicy
argument_list|,
literal|"VolumeChoosingPolicy "
operator|+
literal|"cannot be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeSet
argument_list|,
literal|"VolumeSet cannot be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|scmId
argument_list|,
literal|"scmId cannot be null"
argument_list|)
expr_stmt|;
name|File
name|containerMetaDataPath
init|=
literal|null
decl_stmt|;
comment|//acquiring volumeset lock and container lock
name|volumeSet
operator|.
name|acquireLock
argument_list|()
expr_stmt|;
try|try
block|{
name|HddsVolume
name|containerVolume
init|=
name|volumeChoosingPolicy
operator|.
name|chooseVolume
argument_list|(
name|volumeSet
operator|.
name|getVolumesList
argument_list|()
argument_list|,
name|containerMaxSize
argument_list|)
decl_stmt|;
name|String
name|containerBasePath
init|=
name|containerVolume
operator|.
name|getHddsRootDir
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|containerId
init|=
name|containerData
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|String
name|containerName
init|=
name|Long
operator|.
name|toString
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|containerMetaDataPath
operator|=
name|KeyValueContainerLocationUtil
operator|.
name|getContainerMetaDataPath
argument_list|(
name|containerBasePath
argument_list|,
name|scmId
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|File
name|chunksPath
init|=
name|KeyValueContainerLocationUtil
operator|.
name|getChunksLocationPath
argument_list|(
name|containerBasePath
argument_list|,
name|scmId
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|File
name|containerFile
init|=
name|KeyValueContainerLocationUtil
operator|.
name|getContainerFile
argument_list|(
name|containerMetaDataPath
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
name|File
name|containerCheckSumFile
init|=
name|KeyValueContainerLocationUtil
operator|.
name|getContainerCheckSumFile
argument_list|(
name|containerMetaDataPath
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
name|File
name|dbFile
init|=
name|KeyValueContainerLocationUtil
operator|.
name|getContainerDBFile
argument_list|(
name|containerMetaDataPath
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
comment|// Check if it is new Container.
name|KeyValueContainerUtil
operator|.
name|verifyIsNewContainer
argument_list|(
name|containerMetaDataPath
argument_list|)
expr_stmt|;
comment|//Create Metadata path chunks path and metadata db
name|KeyValueContainerUtil
operator|.
name|createContainerMetaData
argument_list|(
name|containerMetaDataPath
argument_list|,
name|chunksPath
argument_list|,
name|dbFile
argument_list|,
name|containerName
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|String
name|impl
init|=
name|config
operator|.
name|getTrimmed
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_STORE_IMPL
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_STORE_IMPL_DEFAULT
argument_list|)
decl_stmt|;
comment|//Set containerData for the KeyValueContainer.
name|containerData
operator|.
name|setMetadataPath
argument_list|(
name|containerMetaDataPath
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|containerData
operator|.
name|setChunksPath
argument_list|(
name|chunksPath
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|containerData
operator|.
name|setContainerDBType
argument_list|(
name|impl
argument_list|)
expr_stmt|;
name|containerData
operator|.
name|setDbFile
argument_list|(
name|dbFile
argument_list|)
expr_stmt|;
comment|// Create .container file and .chksm file
name|createContainerFile
argument_list|(
name|containerFile
argument_list|,
name|containerCheckSumFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|containerMetaDataPath
operator|!=
literal|null
operator|&&
name|containerMetaDataPath
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|containerMetaDataPath
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|DiskOutOfSpaceException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Container creation failed, due to "
operator|+
literal|"disk out of space"
argument_list|,
name|ex
argument_list|,
name|DISK_OUT_OF_SPACE
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Container creation failed because "
operator|+
literal|"ContainerFile already exists"
argument_list|,
name|ex
argument_list|,
name|CONTAINER_ALREADY_EXISTS
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|containerMetaDataPath
operator|!=
literal|null
operator|&&
name|containerMetaDataPath
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|containerMetaDataPath
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Container creation failed."
argument_list|,
name|ex
argument_list|,
name|CONTAINER_INTERNAL_ERROR
argument_list|)
throw|;
block|}
finally|finally
block|{
name|volumeSet
operator|.
name|releaseLock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Creates .container file and checksum file.    *    * @param containerFile    * @param containerCheckSumFile    * @throws StorageContainerException    */
DECL|method|createContainerFile (File containerFile, File containerCheckSumFile)
specifier|private
name|void
name|createContainerFile
parameter_list|(
name|File
name|containerFile
parameter_list|,
name|File
name|containerCheckSumFile
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|File
name|tempContainerFile
init|=
literal|null
decl_stmt|;
name|File
name|tempCheckSumFile
init|=
literal|null
decl_stmt|;
name|FileOutputStream
name|containerCheckSumStream
init|=
literal|null
decl_stmt|;
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
name|long
name|containerId
init|=
name|containerData
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
try|try
block|{
name|tempContainerFile
operator|=
name|createTempFile
argument_list|(
name|containerFile
argument_list|)
expr_stmt|;
name|tempCheckSumFile
operator|=
name|createTempFile
argument_list|(
name|containerCheckSumFile
argument_list|)
expr_stmt|;
name|ContainerDataYaml
operator|.
name|createContainerFile
argument_list|(
name|ContainerProtos
operator|.
name|ContainerType
operator|.
name|KeyValueContainer
argument_list|,
name|tempContainerFile
argument_list|,
name|containerData
argument_list|)
expr_stmt|;
comment|//Compute Checksum for container file
name|String
name|checksum
init|=
name|KeyValueContainerUtil
operator|.
name|computeCheckSum
argument_list|(
name|containerId
argument_list|,
name|tempContainerFile
argument_list|)
decl_stmt|;
name|containerCheckSumStream
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|tempCheckSumFile
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|OutputStreamWriter
argument_list|(
name|containerCheckSumStream
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|checksum
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|NativeIO
operator|.
name|renameTo
argument_list|(
name|tempContainerFile
argument_list|,
name|containerFile
argument_list|)
expr_stmt|;
name|NativeIO
operator|.
name|renameTo
argument_list|(
name|tempCheckSumFile
argument_list|,
name|containerCheckSumFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Error during creation of "
operator|+
literal|"required files(.container, .chksm) for container. Container Name: "
operator|+
name|containerId
argument_list|,
name|ex
argument_list|,
name|CONTAINER_FILES_CREATE_ERROR
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|containerCheckSumStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|tempContainerFile
operator|!=
literal|null
operator|&&
name|tempContainerFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|tempContainerFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete container temporary file: {}."
argument_list|,
name|tempContainerFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tempCheckSumFile
operator|!=
literal|null
operator|&&
name|tempCheckSumFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|tempCheckSumFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete container temporary checksum file: {}."
argument_list|,
name|tempContainerFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error occurred during closing the writer.  Container "
operator|+
literal|"Name:"
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateContainerFile (File containerFile, File containerCheckSumFile)
specifier|private
name|void
name|updateContainerFile
parameter_list|(
name|File
name|containerFile
parameter_list|,
name|File
name|containerCheckSumFile
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|File
name|containerBkpFile
init|=
literal|null
decl_stmt|;
name|File
name|checkSumBkpFile
init|=
literal|null
decl_stmt|;
name|long
name|containerId
init|=
name|containerData
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|containerFile
operator|.
name|exists
argument_list|()
operator|&&
name|containerCheckSumFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|//Take backup of original files (.container and .chksm files)
name|containerBkpFile
operator|=
operator|new
name|File
argument_list|(
name|containerFile
operator|+
literal|".bkp"
argument_list|)
expr_stmt|;
name|checkSumBkpFile
operator|=
operator|new
name|File
argument_list|(
name|containerCheckSumFile
operator|+
literal|".bkp"
argument_list|)
expr_stmt|;
name|NativeIO
operator|.
name|renameTo
argument_list|(
name|containerFile
argument_list|,
name|containerBkpFile
argument_list|)
expr_stmt|;
name|NativeIO
operator|.
name|renameTo
argument_list|(
name|containerCheckSumFile
argument_list|,
name|checkSumBkpFile
argument_list|)
expr_stmt|;
name|createContainerFile
argument_list|(
name|containerFile
argument_list|,
name|containerCheckSumFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|containerData
operator|.
name|setState
argument_list|(
name|ContainerProtos
operator|.
name|ContainerLifeCycleState
operator|.
name|INVALID
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Container is an Inconsistent "
operator|+
literal|"state, missing required files(.container, .chksm)"
argument_list|,
name|INVALID_CONTAINER_STATE
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// Restore from back up files.
try|try
block|{
if|if
condition|(
name|containerBkpFile
operator|!=
literal|null
operator|&&
name|containerBkpFile
operator|.
name|exists
argument_list|()
operator|&&
name|containerFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"update failed for container Name: {}, restoring container"
operator|+
literal|" file"
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|NativeIO
operator|.
name|renameTo
argument_list|(
name|containerBkpFile
argument_list|,
name|containerFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkSumBkpFile
operator|!=
literal|null
operator|&&
name|checkSumBkpFile
operator|.
name|exists
argument_list|()
operator|&&
name|containerCheckSumFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"update failed for container Name: {}, restoring checksum"
operator|+
literal|" file"
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|NativeIO
operator|.
name|renameTo
argument_list|(
name|checkSumBkpFile
argument_list|,
name|containerCheckSumFile
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Error during updating of "
operator|+
literal|"required files(.container, .chksm) for container. Container Name: "
operator|+
name|containerId
argument_list|,
name|ex
argument_list|,
name|CONTAINER_FILES_CREATE_ERROR
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|containerData
operator|.
name|setState
argument_list|(
name|ContainerProtos
operator|.
name|ContainerLifeCycleState
operator|.
name|INVALID
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"During restore failed for container Name: "
operator|+
name|containerId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Failed to restore container data from the backup. ID: "
operator|+
name|containerId
argument_list|,
name|CONTAINER_FILES_CREATE_ERROR
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|containerBkpFile
operator|!=
literal|null
operator|&&
name|containerBkpFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|containerBkpFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete container backup file: {}"
argument_list|,
name|containerBkpFile
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|checkSumBkpFile
operator|!=
literal|null
operator|&&
name|checkSumBkpFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|checkSumBkpFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete container checksum backup file: {}"
argument_list|,
name|checkSumBkpFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|delete (boolean forceDelete)
specifier|public
name|void
name|delete
parameter_list|(
name|boolean
name|forceDelete
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|long
name|containerId
init|=
name|containerData
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
try|try
block|{
name|KeyValueContainerUtil
operator|.
name|removeContainer
argument_list|(
name|containerData
argument_list|,
name|config
argument_list|,
name|forceDelete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// TODO : An I/O error during delete can leave partial artifacts on the
comment|// disk. We will need the cleaner thread to cleanup this information.
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Failed to cleanup container. ID: %d"
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
name|errMsg
argument_list|,
name|ex
argument_list|,
name|CONTAINER_INTERNAL_ERROR
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|StorageContainerException
block|{
comment|//TODO: writing .container file and compaction can be done
comment|// asynchronously, otherwise rpc call for this will take a lot of time to
comment|// complete this action
try|try
block|{
name|writeLock
argument_list|()
expr_stmt|;
name|long
name|containerId
init|=
name|containerData
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|containerData
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Invalid container data. Container Id: {}"
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Invalid container data. Name : "
operator|+
name|containerId
argument_list|,
name|INVALID_CONTAINER_STATE
argument_list|)
throw|;
block|}
name|containerData
operator|.
name|closeContainer
argument_list|()
expr_stmt|;
name|File
name|containerFile
init|=
name|getContainerFile
argument_list|()
decl_stmt|;
name|File
name|containerCheckSumFile
init|=
name|getContainerCheckSumFile
argument_list|()
decl_stmt|;
comment|// update the new container data to .container File
name|updateContainerFile
argument_list|(
name|containerFile
argument_list|,
name|containerCheckSumFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
comment|// It is ok if this operation takes a bit of time.
comment|// Close container is not expected to be instantaneous.
try|try
block|{
name|MetadataStore
name|db
init|=
name|KeyUtils
operator|.
name|getDB
argument_list|(
name|containerData
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|db
operator|.
name|compactDB
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in DB compaction while closing container"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
name|ex
argument_list|,
name|ERROR_IN_COMPACT_DB
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainerData ()
specifier|public
name|KeyValueContainerData
name|getContainerData
parameter_list|()
block|{
return|return
name|containerData
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerState ()
specifier|public
name|ContainerLifeCycleState
name|getContainerState
parameter_list|()
block|{
return|return
name|containerData
operator|.
name|getState
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerType ()
specifier|public
name|ContainerProtos
operator|.
name|ContainerType
name|getContainerType
parameter_list|()
block|{
return|return
name|ContainerProtos
operator|.
name|ContainerType
operator|.
name|KeyValueContainer
return|;
block|}
annotation|@
name|Override
DECL|method|update (Map<String, String> metadata, boolean forceUpdate)
specifier|public
name|void
name|update
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|,
name|boolean
name|forceUpdate
parameter_list|)
throws|throws
name|StorageContainerException
block|{
comment|// TODO: Now, when writing the updated data to .container file, we are
comment|// holding lock and writing data to disk. We can have async implementation
comment|// to flush the update container data to disk.
name|long
name|containerId
init|=
name|containerData
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|containerData
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Invalid container data. ID: {}"
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Invalid container data. "
operator|+
literal|"Container Name : "
operator|+
name|containerId
argument_list|,
name|INVALID_CONTAINER_STATE
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|forceUpdate
operator|&&
operator|!
name|containerData
operator|.
name|isOpen
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Updating a closed container is not allowed. ID: "
operator|+
name|containerId
argument_list|,
name|UNSUPPORTED_REQUEST
argument_list|)
throw|;
block|}
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|metadata
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|containerData
operator|.
name|addMetadata
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Container Metadata update error"
operator|+
literal|". Container Name:"
operator|+
name|containerId
argument_list|,
name|ex
argument_list|,
name|CONTAINER_METADATA_ERROR
argument_list|)
throw|;
block|}
try|try
block|{
name|writeLock
argument_list|()
expr_stmt|;
name|String
name|containerName
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|File
name|containerFile
init|=
name|getContainerFile
argument_list|()
decl_stmt|;
name|File
name|containerCheckSumFile
init|=
name|getContainerCheckSumFile
argument_list|()
decl_stmt|;
comment|// update the new container data to .container File
name|updateContainerFile
argument_list|(
name|containerFile
argument_list|,
name|containerCheckSumFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Acquire read lock.    */
DECL|method|readLock ()
specifier|public
name|void
name|readLock
parameter_list|()
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Release read lock.    */
DECL|method|readUnlock ()
specifier|public
name|void
name|readUnlock
parameter_list|()
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Check if the current thread holds read lock.    */
DECL|method|hasReadLock ()
specifier|public
name|boolean
name|hasReadLock
parameter_list|()
block|{
return|return
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|tryLock
argument_list|()
return|;
block|}
comment|/**    * Acquire write lock.    */
DECL|method|writeLock ()
specifier|public
name|void
name|writeLock
parameter_list|()
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Release write lock.    */
DECL|method|writeUnlock ()
specifier|public
name|void
name|writeUnlock
parameter_list|()
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Check if the current thread holds write lock.    */
DECL|method|hasWriteLock ()
specifier|public
name|boolean
name|hasWriteLock
parameter_list|()
block|{
return|return
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|isHeldByCurrentThread
argument_list|()
return|;
block|}
comment|/**    * Acquire read lock, unless interrupted while waiting.    * @throws InterruptedException    */
annotation|@
name|Override
DECL|method|readLockInterruptibly ()
specifier|public
name|void
name|readLockInterruptibly
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
block|}
comment|/**    * Acquire write lock, unless interrupted while waiting.    * @throws InterruptedException    */
annotation|@
name|Override
DECL|method|writeLockInterruptibly ()
specifier|public
name|void
name|writeLockInterruptibly
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns containerFile.    * @return .container File name    */
DECL|method|getContainerFile ()
specifier|private
name|File
name|getContainerFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|containerData
operator|.
name|getMetadataPath
argument_list|()
argument_list|,
name|containerData
operator|.
name|getContainerId
argument_list|()
operator|+
name|OzoneConsts
operator|.
name|CONTAINER_EXTENSION
argument_list|)
return|;
block|}
comment|/**    * Returns container checksum file.    * @return container checksum file    */
DECL|method|getContainerCheckSumFile ()
specifier|private
name|File
name|getContainerCheckSumFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|containerData
operator|.
name|getMetadataPath
argument_list|()
argument_list|,
name|containerData
operator|.
name|getContainerId
argument_list|()
operator|+
name|OzoneConsts
operator|.
name|CONTAINER_FILE_CHECKSUM_EXTENSION
argument_list|)
return|;
block|}
comment|/**    * Creates a temporary file.    * @param file    * @return    * @throws IOException    */
DECL|method|createTempFile (File file)
specifier|private
name|File
name|createTempFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|File
operator|.
name|createTempFile
argument_list|(
literal|"tmp_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"_"
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|,
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

