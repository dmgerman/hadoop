begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.keyvalue
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReplicaProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerDataYaml
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerPacker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|VolumeChoosingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|HddsVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|VolumeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|BlockUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|KeyValueContainerLocationUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|KeyValueContainerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskOutOfSpaceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|CONTAINER_ALREADY_EXISTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|CONTAINER_FILES_CREATE_ERROR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|CONTAINER_INTERNAL_ERROR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|DISK_OUT_OF_SPACE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|ERROR_IN_COMPACT_DB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|INVALID_CONTAINER_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|UNSUPPORTED_REQUEST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Class to perform KeyValue Container operations.  */
end_comment

begin_class
DECL|class|KeyValueContainer
specifier|public
class|class
name|KeyValueContainer
implements|implements
name|Container
argument_list|<
name|KeyValueContainerData
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Use a non-fair RW lock for better throughput, we may revisit this decision
comment|// if this causes fairness issues.
DECL|field|lock
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|containerData
specifier|private
specifier|final
name|KeyValueContainerData
name|containerData
decl_stmt|;
DECL|field|config
specifier|private
name|Configuration
name|config
decl_stmt|;
DECL|method|KeyValueContainer (KeyValueContainerData containerData, Configuration ozoneConfig)
specifier|public
name|KeyValueContainer
parameter_list|(
name|KeyValueContainerData
name|containerData
parameter_list|,
name|Configuration
name|ozoneConfig
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containerData
argument_list|,
literal|"KeyValueContainerData cannot "
operator|+
literal|"be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|ozoneConfig
argument_list|,
literal|"Ozone configuration cannot "
operator|+
literal|"be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|ozoneConfig
expr_stmt|;
name|this
operator|.
name|containerData
operator|=
name|containerData
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create (VolumeSet volumeSet, VolumeChoosingPolicy volumeChoosingPolicy, String scmId)
specifier|public
name|void
name|create
parameter_list|(
name|VolumeSet
name|volumeSet
parameter_list|,
name|VolumeChoosingPolicy
name|volumeChoosingPolicy
parameter_list|,
name|String
name|scmId
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeChoosingPolicy
argument_list|,
literal|"VolumeChoosingPolicy "
operator|+
literal|"cannot be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeSet
argument_list|,
literal|"VolumeSet cannot be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|scmId
argument_list|,
literal|"scmId cannot be null"
argument_list|)
expr_stmt|;
name|File
name|containerMetaDataPath
init|=
literal|null
decl_stmt|;
comment|//acquiring volumeset read lock
name|volumeSet
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|long
name|maxSize
init|=
name|containerData
operator|.
name|getMaxSize
argument_list|()
decl_stmt|;
try|try
block|{
name|HddsVolume
name|containerVolume
init|=
name|volumeChoosingPolicy
operator|.
name|chooseVolume
argument_list|(
name|volumeSet
operator|.
name|getVolumesList
argument_list|()
argument_list|,
name|maxSize
argument_list|)
decl_stmt|;
name|String
name|hddsVolumeDir
init|=
name|containerVolume
operator|.
name|getHddsRootDir
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|containerID
init|=
name|containerData
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|containerMetaDataPath
operator|=
name|KeyValueContainerLocationUtil
operator|.
name|getContainerMetaDataPath
argument_list|(
name|hddsVolumeDir
argument_list|,
name|scmId
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
name|containerData
operator|.
name|setMetadataPath
argument_list|(
name|containerMetaDataPath
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|chunksPath
init|=
name|KeyValueContainerLocationUtil
operator|.
name|getChunksLocationPath
argument_list|(
name|hddsVolumeDir
argument_list|,
name|scmId
argument_list|,
name|containerID
argument_list|)
decl_stmt|;
comment|// Check if it is new Container.
name|ContainerUtils
operator|.
name|verifyIsNewContainer
argument_list|(
name|containerMetaDataPath
argument_list|)
expr_stmt|;
comment|//Create Metadata path chunks path and metadata db
name|File
name|dbFile
init|=
name|getContainerDBFile
argument_list|()
decl_stmt|;
name|KeyValueContainerUtil
operator|.
name|createContainerMetaData
argument_list|(
name|containerMetaDataPath
argument_list|,
name|chunksPath
argument_list|,
name|dbFile
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|String
name|impl
init|=
name|config
operator|.
name|getTrimmed
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_STORE_IMPL
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_STORE_IMPL_DEFAULT
argument_list|)
decl_stmt|;
comment|//Set containerData for the KeyValueContainer.
name|containerData
operator|.
name|setChunksPath
argument_list|(
name|chunksPath
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|containerData
operator|.
name|setContainerDBType
argument_list|(
name|impl
argument_list|)
expr_stmt|;
name|containerData
operator|.
name|setDbFile
argument_list|(
name|dbFile
argument_list|)
expr_stmt|;
name|containerData
operator|.
name|setVolume
argument_list|(
name|containerVolume
argument_list|)
expr_stmt|;
comment|// Create .container file
name|File
name|containerFile
init|=
name|getContainerFile
argument_list|()
decl_stmt|;
name|createContainerFile
argument_list|(
name|containerFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|containerMetaDataPath
operator|!=
literal|null
operator|&&
name|containerMetaDataPath
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|containerMetaDataPath
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|DiskOutOfSpaceException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Container creation failed, due to "
operator|+
literal|"disk out of space"
argument_list|,
name|ex
argument_list|,
name|DISK_OUT_OF_SPACE
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Container creation failed because "
operator|+
literal|"ContainerFile already exists"
argument_list|,
name|ex
argument_list|,
name|CONTAINER_ALREADY_EXISTS
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|containerMetaDataPath
operator|!=
literal|null
operator|&&
name|containerMetaDataPath
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|containerMetaDataPath
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Container creation failed."
argument_list|,
name|ex
argument_list|,
name|CONTAINER_INTERNAL_ERROR
argument_list|)
throw|;
block|}
finally|finally
block|{
name|volumeSet
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Set all of the path realted container data fields based on the name    * conventions.    *    * @param scmId    * @param containerVolume    * @param hddsVolumeDir    */
DECL|method|populatePathFields (String scmId, HddsVolume containerVolume, String hddsVolumeDir)
specifier|public
name|void
name|populatePathFields
parameter_list|(
name|String
name|scmId
parameter_list|,
name|HddsVolume
name|containerVolume
parameter_list|,
name|String
name|hddsVolumeDir
parameter_list|)
block|{
name|long
name|containerId
init|=
name|containerData
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|File
name|containerMetaDataPath
init|=
name|KeyValueContainerLocationUtil
operator|.
name|getContainerMetaDataPath
argument_list|(
name|hddsVolumeDir
argument_list|,
name|scmId
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|File
name|chunksPath
init|=
name|KeyValueContainerLocationUtil
operator|.
name|getChunksLocationPath
argument_list|(
name|hddsVolumeDir
argument_list|,
name|scmId
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|File
name|dbFile
init|=
name|KeyValueContainerLocationUtil
operator|.
name|getContainerDBFile
argument_list|(
name|containerMetaDataPath
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
comment|//Set containerData for the KeyValueContainer.
name|containerData
operator|.
name|setMetadataPath
argument_list|(
name|containerMetaDataPath
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|containerData
operator|.
name|setChunksPath
argument_list|(
name|chunksPath
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|containerData
operator|.
name|setDbFile
argument_list|(
name|dbFile
argument_list|)
expr_stmt|;
name|containerData
operator|.
name|setVolume
argument_list|(
name|containerVolume
argument_list|)
expr_stmt|;
block|}
comment|/**    * Writes to .container file.    *    * @param containerFile container file name    * @param isCreate True if creating a new file. False is updating an    *                 existing container file.    * @throws StorageContainerException    */
DECL|method|writeToContainerFile (File containerFile, boolean isCreate)
specifier|private
name|void
name|writeToContainerFile
parameter_list|(
name|File
name|containerFile
parameter_list|,
name|boolean
name|isCreate
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|File
name|tempContainerFile
init|=
literal|null
decl_stmt|;
name|long
name|containerId
init|=
name|containerData
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
try|try
block|{
name|tempContainerFile
operator|=
name|createTempFile
argument_list|(
name|containerFile
argument_list|)
expr_stmt|;
name|ContainerDataYaml
operator|.
name|createContainerFile
argument_list|(
name|ContainerType
operator|.
name|KeyValueContainer
argument_list|,
name|containerData
argument_list|,
name|tempContainerFile
argument_list|)
expr_stmt|;
comment|// NativeIO.renameTo is an atomic function. But it might fail if the
comment|// container file already exists. Hence, we handle the two cases
comment|// separately.
if|if
condition|(
name|isCreate
condition|)
block|{
name|NativeIO
operator|.
name|renameTo
argument_list|(
name|tempContainerFile
argument_list|,
name|containerFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Files
operator|.
name|move
argument_list|(
name|tempContainerFile
operator|.
name|toPath
argument_list|()
argument_list|,
name|containerFile
operator|.
name|toPath
argument_list|()
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Error while creating/ updating "
operator|+
literal|".container file. ContainerID: "
operator|+
name|containerId
argument_list|,
name|ex
argument_list|,
name|CONTAINER_FILES_CREATE_ERROR
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|tempContainerFile
operator|!=
literal|null
operator|&&
name|tempContainerFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|tempContainerFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete container temporary file: {}."
argument_list|,
name|tempContainerFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|createContainerFile (File containerFile)
specifier|private
name|void
name|createContainerFile
parameter_list|(
name|File
name|containerFile
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|writeToContainerFile
argument_list|(
name|containerFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|updateContainerFile (File containerFile)
specifier|private
name|void
name|updateContainerFile
parameter_list|(
name|File
name|containerFile
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|writeToContainerFile
argument_list|(
name|containerFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delete (boolean forceDelete)
specifier|public
name|void
name|delete
parameter_list|(
name|boolean
name|forceDelete
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|long
name|containerId
init|=
name|containerData
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
try|try
block|{
name|KeyValueContainerUtil
operator|.
name|removeContainer
argument_list|(
name|containerData
argument_list|,
name|config
argument_list|,
name|forceDelete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// TODO : An I/O error during delete can leave partial artifacts on the
comment|// disk. We will need the cleaner thread to cleanup this information.
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Failed to cleanup container. ID: %d"
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
name|errMsg
argument_list|,
name|ex
argument_list|,
name|CONTAINER_INTERNAL_ERROR
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|markContainerForClose ()
specifier|public
name|void
name|markContainerForClose
parameter_list|()
throws|throws
name|StorageContainerException
block|{
name|updateContainerData
argument_list|(
parameter_list|()
lambda|->
name|containerData
operator|.
name|setState
argument_list|(
name|ContainerDataProto
operator|.
name|State
operator|.
name|CLOSING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|quasiClose ()
specifier|public
name|void
name|quasiClose
parameter_list|()
throws|throws
name|StorageContainerException
block|{
name|updateContainerData
argument_list|(
name|containerData
operator|::
name|quasiCloseContainer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|StorageContainerException
block|{
name|updateContainerData
argument_list|(
name|containerData
operator|::
name|closeContainer
argument_list|)
expr_stmt|;
comment|// It is ok if this operation takes a bit of time.
comment|// Close container is not expected to be instantaneous.
name|compactDB
argument_list|()
expr_stmt|;
block|}
DECL|method|updateContainerData (Runnable update)
specifier|private
name|void
name|updateContainerData
parameter_list|(
name|Runnable
name|update
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|ContainerDataProto
operator|.
name|State
name|oldState
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writeLock
argument_list|()
expr_stmt|;
name|oldState
operator|=
name|containerData
operator|.
name|getState
argument_list|()
expr_stmt|;
name|update
operator|.
name|run
argument_list|()
expr_stmt|;
name|File
name|containerFile
init|=
name|getContainerFile
argument_list|()
decl_stmt|;
comment|// update the new container data to .container File
name|updateContainerFile
argument_list|(
name|containerFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|oldState
operator|!=
literal|null
condition|)
block|{
comment|// Failed to update .container file. Reset the state to CLOSING
name|containerData
operator|.
name|setState
argument_list|(
name|oldState
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|compactDB ()
specifier|private
name|void
name|compactDB
parameter_list|()
throws|throws
name|StorageContainerException
block|{
try|try
block|{
name|MetadataStore
name|db
init|=
name|BlockUtils
operator|.
name|getDB
argument_list|(
name|containerData
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|db
operator|.
name|compactDB
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in DB compaction while closing container"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
name|ex
argument_list|,
name|ERROR_IN_COMPACT_DB
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainerData ()
specifier|public
name|KeyValueContainerData
name|getContainerData
parameter_list|()
block|{
return|return
name|containerData
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerState ()
specifier|public
name|ContainerProtos
operator|.
name|ContainerDataProto
operator|.
name|State
name|getContainerState
parameter_list|()
block|{
return|return
name|containerData
operator|.
name|getState
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerType ()
specifier|public
name|ContainerType
name|getContainerType
parameter_list|()
block|{
return|return
name|ContainerType
operator|.
name|KeyValueContainer
return|;
block|}
annotation|@
name|Override
DECL|method|update (Map<String, String> metadata, boolean forceUpdate)
specifier|public
name|void
name|update
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|,
name|boolean
name|forceUpdate
parameter_list|)
throws|throws
name|StorageContainerException
block|{
comment|// TODO: Now, when writing the updated data to .container file, we are
comment|// holding lock and writing data to disk. We can have async implementation
comment|// to flush the update container data to disk.
name|long
name|containerId
init|=
name|containerData
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|containerData
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Invalid container data. ContainerID: {}"
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Invalid container data. "
operator|+
literal|"ContainerID: "
operator|+
name|containerId
argument_list|,
name|INVALID_CONTAINER_STATE
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|forceUpdate
operator|&&
operator|!
name|containerData
operator|.
name|isOpen
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Updating a closed container without force option is not allowed. "
operator|+
literal|"ContainerID: "
operator|+
name|containerId
argument_list|,
name|UNSUPPORTED_REQUEST
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|oldMetadata
init|=
name|containerData
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
try|try
block|{
name|writeLock
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|metadata
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|containerData
operator|.
name|addMetadata
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|File
name|containerFile
init|=
name|getContainerFile
argument_list|()
decl_stmt|;
comment|// update the new container data to .container File
name|updateContainerFile
argument_list|(
name|containerFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
name|containerData
operator|.
name|setMetadata
argument_list|(
name|oldMetadata
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateDeleteTransactionId (long deleteTransactionId)
specifier|public
name|void
name|updateDeleteTransactionId
parameter_list|(
name|long
name|deleteTransactionId
parameter_list|)
block|{
name|containerData
operator|.
name|updateDeleteTransactionId
argument_list|(
name|deleteTransactionId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|blockIterator ()
specifier|public
name|KeyValueBlockIterator
name|blockIterator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|KeyValueBlockIterator
argument_list|(
name|containerData
operator|.
name|getContainerID
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
name|containerData
operator|.
name|getContainerPath
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|importContainerData (InputStream input, ContainerPacker<KeyValueContainerData> packer)
specifier|public
name|void
name|importContainerData
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|ContainerPacker
argument_list|<
name|KeyValueContainerData
argument_list|>
name|packer
parameter_list|)
throws|throws
name|IOException
block|{
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|getContainerFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|errorMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Can't import container (cid=%d) data to a specific location"
operator|+
literal|" as the container descriptor (%s) has already been exist."
argument_list|,
name|getContainerData
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|getContainerFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
comment|//copy the values from the input stream to the final destination
comment|// directory.
name|byte
index|[]
name|descriptorContent
init|=
name|packer
operator|.
name|unpackContainerData
argument_list|(
name|this
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|descriptorContent
argument_list|,
literal|"Container descriptor is missing from the container archive: "
operator|+
name|getContainerData
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
comment|//now, we have extracted the container descriptor from the previous
comment|//datanode. We can load it and upload it with the current data
comment|// (original metadata + current filepath fields)
name|KeyValueContainerData
name|originalContainerData
init|=
operator|(
name|KeyValueContainerData
operator|)
name|ContainerDataYaml
operator|.
name|readContainer
argument_list|(
name|descriptorContent
argument_list|)
decl_stmt|;
name|containerData
operator|.
name|setState
argument_list|(
name|originalContainerData
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|containerData
operator|.
name|setContainerDBType
argument_list|(
name|originalContainerData
operator|.
name|getContainerDBType
argument_list|()
argument_list|)
expr_stmt|;
name|containerData
operator|.
name|setBytesUsed
argument_list|(
name|originalContainerData
operator|.
name|getBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
comment|//rewriting the yaml file with new checksum calculation.
name|update
argument_list|(
name|originalContainerData
operator|.
name|getMetadata
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//fill in memory stat counter (keycount, byte usage)
name|KeyValueContainerUtil
operator|.
name|parseKVContainerData
argument_list|(
name|containerData
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//delete all the temporary data in case of any exception.
try|try
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|containerData
operator|.
name|getMetadataPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|containerData
operator|.
name|getChunksPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|getContainerFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|deleteex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can not cleanup destination directories after a container import"
operator|+
literal|" error (cid"
operator|+
name|containerData
operator|.
name|getContainerID
argument_list|()
operator|+
literal|")"
argument_list|,
name|deleteex
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|exportContainerData (OutputStream destination, ContainerPacker<KeyValueContainerData> packer)
specifier|public
name|void
name|exportContainerData
parameter_list|(
name|OutputStream
name|destination
parameter_list|,
name|ContainerPacker
argument_list|<
name|KeyValueContainerData
argument_list|>
name|packer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|getContainerData
argument_list|()
operator|.
name|getState
argument_list|()
operator|!=
name|ContainerProtos
operator|.
name|ContainerDataProto
operator|.
name|State
operator|.
name|CLOSED
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Only closed containers could be exported: ContainerId="
operator|+
name|getContainerData
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
throw|;
block|}
name|packer
operator|.
name|pack
argument_list|(
name|this
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
comment|/**    * Acquire read lock.    */
DECL|method|readLock ()
specifier|public
name|void
name|readLock
parameter_list|()
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Release read lock.    */
DECL|method|readUnlock ()
specifier|public
name|void
name|readUnlock
parameter_list|()
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Check if the current thread holds read lock.    */
DECL|method|hasReadLock ()
specifier|public
name|boolean
name|hasReadLock
parameter_list|()
block|{
return|return
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|tryLock
argument_list|()
return|;
block|}
comment|/**    * Acquire write lock.    */
DECL|method|writeLock ()
specifier|public
name|void
name|writeLock
parameter_list|()
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Release write lock.    */
DECL|method|writeUnlock ()
specifier|public
name|void
name|writeUnlock
parameter_list|()
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Check if the current thread holds write lock.    */
DECL|method|hasWriteLock ()
specifier|public
name|boolean
name|hasWriteLock
parameter_list|()
block|{
return|return
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|isHeldByCurrentThread
argument_list|()
return|;
block|}
comment|/**    * Acquire read lock, unless interrupted while waiting.    * @throws InterruptedException    */
annotation|@
name|Override
DECL|method|readLockInterruptibly ()
specifier|public
name|void
name|readLockInterruptibly
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
block|}
comment|/**    * Acquire write lock, unless interrupted while waiting.    * @throws InterruptedException    */
annotation|@
name|Override
DECL|method|writeLockInterruptibly ()
specifier|public
name|void
name|writeLockInterruptibly
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns containerFile.    * @return .container File name    */
annotation|@
name|Override
DECL|method|getContainerFile ()
specifier|public
name|File
name|getContainerFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|containerData
operator|.
name|getMetadataPath
argument_list|()
argument_list|,
name|containerData
operator|.
name|getContainerID
argument_list|()
operator|+
name|OzoneConsts
operator|.
name|CONTAINER_EXTENSION
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|updateBlockCommitSequenceId (long blockCommitSequenceId)
specifier|public
name|void
name|updateBlockCommitSequenceId
parameter_list|(
name|long
name|blockCommitSequenceId
parameter_list|)
block|{
name|containerData
operator|.
name|updateBlockCommitSequenceId
argument_list|(
name|blockCommitSequenceId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns KeyValueContainerReport for the KeyValueContainer.    */
annotation|@
name|Override
DECL|method|getContainerReport ()
specifier|public
name|ContainerReplicaProto
name|getContainerReport
parameter_list|()
throws|throws
name|StorageContainerException
block|{
name|ContainerReplicaProto
operator|.
name|Builder
name|ciBuilder
init|=
name|ContainerReplicaProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ciBuilder
operator|.
name|setContainerID
argument_list|(
name|containerData
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|setReadCount
argument_list|(
name|containerData
operator|.
name|getReadCount
argument_list|()
argument_list|)
operator|.
name|setWriteCount
argument_list|(
name|containerData
operator|.
name|getWriteCount
argument_list|()
argument_list|)
operator|.
name|setReadBytes
argument_list|(
name|containerData
operator|.
name|getReadBytes
argument_list|()
argument_list|)
operator|.
name|setWriteBytes
argument_list|(
name|containerData
operator|.
name|getWriteBytes
argument_list|()
argument_list|)
operator|.
name|setKeyCount
argument_list|(
name|containerData
operator|.
name|getKeyCount
argument_list|()
argument_list|)
operator|.
name|setUsed
argument_list|(
name|containerData
operator|.
name|getBytesUsed
argument_list|()
argument_list|)
operator|.
name|setState
argument_list|(
name|getHddsState
argument_list|()
argument_list|)
operator|.
name|setDeleteTransactionId
argument_list|(
name|containerData
operator|.
name|getDeleteTransactionId
argument_list|()
argument_list|)
operator|.
name|setBlockCommitSequenceId
argument_list|(
name|containerData
operator|.
name|getBlockCommitSequenceId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ciBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns LifeCycle State of the container.    * @return LifeCycle State of the container in HddsProtos format    * @throws StorageContainerException    */
DECL|method|getHddsState ()
specifier|private
name|ContainerReplicaProto
operator|.
name|State
name|getHddsState
parameter_list|()
throws|throws
name|StorageContainerException
block|{
name|ContainerReplicaProto
operator|.
name|State
name|state
decl_stmt|;
switch|switch
condition|(
name|containerData
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|OPEN
case|:
name|state
operator|=
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|OPEN
expr_stmt|;
break|break;
case|case
name|CLOSING
case|:
name|state
operator|=
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|CLOSING
expr_stmt|;
break|break;
case|case
name|QUASI_CLOSED
case|:
name|state
operator|=
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|QUASI_CLOSED
expr_stmt|;
break|break;
case|case
name|CLOSED
case|:
name|state
operator|=
name|ContainerReplicaProto
operator|.
name|State
operator|.
name|CLOSED
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Invalid Container state found: "
operator|+
name|containerData
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|INVALID_CONTAINER_STATE
argument_list|)
throw|;
block|}
return|return
name|state
return|;
block|}
comment|/**    * Returns container DB file.    * @return    */
DECL|method|getContainerDBFile ()
specifier|public
name|File
name|getContainerDBFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|containerData
operator|.
name|getMetadataPath
argument_list|()
argument_list|,
name|containerData
operator|.
name|getContainerID
argument_list|()
operator|+
name|OzoneConsts
operator|.
name|DN_CONTAINER_DB
argument_list|)
return|;
block|}
comment|/**    * Creates a temporary file.    * @param file    * @return    * @throws IOException    */
DECL|method|createTempFile (File file)
specifier|private
name|File
name|createTempFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|File
operator|.
name|createTempFile
argument_list|(
literal|"tmp_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"_"
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|,
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

