begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.interfaces
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|IncrementalContainerReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|StateContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|server
operator|.
name|ratis
operator|.
name|DispatcherContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|VolumeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|TarContainerPacker
import|;
end_import

begin_comment
comment|/**  * Dispatcher sends ContainerCommandRequests to Handler. Each Container Type  * should have an implementation for Handler.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"visibilitymodifier"
argument_list|)
DECL|class|Handler
specifier|public
specifier|abstract
class|class
name|Handler
block|{
DECL|field|conf
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|containerSet
specifier|protected
specifier|final
name|ContainerSet
name|containerSet
decl_stmt|;
DECL|field|volumeSet
specifier|protected
specifier|final
name|VolumeSet
name|volumeSet
decl_stmt|;
DECL|field|scmID
specifier|protected
name|String
name|scmID
decl_stmt|;
DECL|field|metrics
specifier|protected
specifier|final
name|ContainerMetrics
name|metrics
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|StateContext
name|context
decl_stmt|;
DECL|field|datanodeDetails
specifier|private
specifier|final
name|DatanodeDetails
name|datanodeDetails
decl_stmt|;
DECL|method|Handler (Configuration config, StateContext context, ContainerSet contSet, VolumeSet volumeSet, ContainerMetrics containerMetrics)
specifier|protected
name|Handler
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|StateContext
name|context
parameter_list|,
name|ContainerSet
name|contSet
parameter_list|,
name|VolumeSet
name|volumeSet
parameter_list|,
name|ContainerMetrics
name|containerMetrics
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|containerSet
operator|=
name|contSet
expr_stmt|;
name|this
operator|.
name|volumeSet
operator|=
name|volumeSet
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|containerMetrics
expr_stmt|;
name|this
operator|.
name|datanodeDetails
operator|=
name|context
operator|.
name|getParent
argument_list|()
operator|.
name|getDatanodeDetails
argument_list|()
expr_stmt|;
block|}
DECL|method|getHandlerForContainerType ( final ContainerType containerType, final Configuration config, final StateContext context, final ContainerSet contSet, final VolumeSet volumeSet, final ContainerMetrics metrics)
specifier|public
specifier|static
name|Handler
name|getHandlerForContainerType
parameter_list|(
specifier|final
name|ContainerType
name|containerType
parameter_list|,
specifier|final
name|Configuration
name|config
parameter_list|,
specifier|final
name|StateContext
name|context
parameter_list|,
specifier|final
name|ContainerSet
name|contSet
parameter_list|,
specifier|final
name|VolumeSet
name|volumeSet
parameter_list|,
specifier|final
name|ContainerMetrics
name|metrics
parameter_list|)
block|{
switch|switch
condition|(
name|containerType
condition|)
block|{
case|case
name|KeyValueContainer
case|:
return|return
operator|new
name|KeyValueHandler
argument_list|(
name|config
argument_list|,
name|context
argument_list|,
name|contSet
argument_list|,
name|volumeSet
argument_list|,
name|metrics
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Handler for ContainerType: "
operator|+
name|containerType
operator|+
literal|"doesn't exist."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns the Id of this datanode.    * @return datanode Id    */
DECL|method|getDatanodeDetails ()
specifier|protected
name|DatanodeDetails
name|getDatanodeDetails
parameter_list|()
block|{
return|return
name|datanodeDetails
return|;
block|}
comment|/**    * This should be called whenever there is state change. It will trigger    * an ICR to SCM.    *    * @param container Container for which ICR has to be sent    */
DECL|method|sendICR (final Container container)
specifier|protected
name|void
name|sendICR
parameter_list|(
specifier|final
name|Container
name|container
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|IncrementalContainerReportProto
name|icr
init|=
name|IncrementalContainerReportProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addReport
argument_list|(
name|container
operator|.
name|getContainerReport
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|context
operator|.
name|addReport
argument_list|(
name|icr
argument_list|)
expr_stmt|;
name|context
operator|.
name|getParent
argument_list|()
operator|.
name|triggerHeartbeat
argument_list|()
expr_stmt|;
block|}
DECL|method|handle ( ContainerCommandRequestProto msg, Container container, DispatcherContext dispatcherContext)
specifier|public
specifier|abstract
name|ContainerCommandResponseProto
name|handle
parameter_list|(
name|ContainerCommandRequestProto
name|msg
parameter_list|,
name|Container
name|container
parameter_list|,
name|DispatcherContext
name|dispatcherContext
parameter_list|)
function_decl|;
comment|/**    * Import container data from a raw input stream.    */
DECL|method|importContainer ( long containerID, long maxSize, String originPipelineId, String originNodeId, FileInputStream rawContainerStream, TarContainerPacker packer)
specifier|public
specifier|abstract
name|Container
name|importContainer
parameter_list|(
name|long
name|containerID
parameter_list|,
name|long
name|maxSize
parameter_list|,
name|String
name|originPipelineId
parameter_list|,
name|String
name|originNodeId
parameter_list|,
name|FileInputStream
name|rawContainerStream
parameter_list|,
name|TarContainerPacker
name|packer
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Marks the container for closing. Moves the container to CLOSING state.    *    * @param container container to update    * @throws IOException in case of exception    */
DECL|method|markContainerForClose (Container container)
specifier|public
specifier|abstract
name|void
name|markContainerForClose
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Moves the Container to QUASI_CLOSED state.    *    * @param container container to be quasi closed    * @throws IOException    */
DECL|method|quasiCloseContainer (Container container)
specifier|public
specifier|abstract
name|void
name|quasiCloseContainer
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Moves the Container to CLOSED state.    *    * @param container container to be closed    * @throws IOException    */
DECL|method|closeContainer (Container container)
specifier|public
specifier|abstract
name|void
name|closeContainer
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Deletes the given container.    *    * @param container container to be deleted    * @throws IOException    */
DECL|method|deleteContainer (Container container)
specifier|public
specifier|abstract
name|void
name|deleteContainer
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|setScmID (String scmId)
specifier|public
name|void
name|setScmID
parameter_list|(
name|String
name|scmId
parameter_list|)
block|{
name|this
operator|.
name|scmID
operator|=
name|scmId
expr_stmt|;
block|}
block|}
end_class

end_unit

