begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.interfaces
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|spi
operator|.
name|resource
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|VolumeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueHandler
import|;
end_import

begin_comment
comment|/**  * Dispatcher sends ContainerCommandRequests to Handler. Each Container Type  * should have an implementation for Handler.  */
end_comment

begin_class
DECL|class|Handler
specifier|public
class|class
name|Handler
block|{
DECL|field|conf
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|containerSet
specifier|protected
specifier|final
name|ContainerSet
name|containerSet
decl_stmt|;
DECL|field|volumeSet
specifier|protected
specifier|final
name|VolumeSet
name|volumeSet
decl_stmt|;
DECL|field|scmID
specifier|protected
name|String
name|scmID
decl_stmt|;
DECL|method|Handler (Configuration config, ContainerSet contSet, VolumeSet volumeSet)
specifier|protected
name|Handler
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|ContainerSet
name|contSet
parameter_list|,
name|VolumeSet
name|volumeSet
parameter_list|)
block|{
name|conf
operator|=
name|config
expr_stmt|;
name|containerSet
operator|=
name|contSet
expr_stmt|;
name|this
operator|.
name|volumeSet
operator|=
name|volumeSet
expr_stmt|;
block|}
DECL|method|getHandlerForContainerType (ContainerType containerType, Configuration config, ContainerSet contSet, VolumeSet volumeSet)
specifier|public
specifier|static
name|Handler
name|getHandlerForContainerType
parameter_list|(
name|ContainerType
name|containerType
parameter_list|,
name|Configuration
name|config
parameter_list|,
name|ContainerSet
name|contSet
parameter_list|,
name|VolumeSet
name|volumeSet
parameter_list|)
block|{
switch|switch
condition|(
name|containerType
condition|)
block|{
case|case
name|KeyValueContainer
case|:
return|return
name|KeyValueHandler
operator|.
name|getInstance
argument_list|(
name|config
argument_list|,
name|contSet
argument_list|,
name|volumeSet
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Handler for ContainerType: "
operator|+
name|containerType
operator|+
literal|"doesn't exist."
argument_list|)
throw|;
block|}
block|}
DECL|method|handle ( ContainerCommandRequestProto msg, Container container)
specifier|public
name|ContainerCommandResponseProto
name|handle
parameter_list|(
name|ContainerCommandRequestProto
name|msg
parameter_list|,
name|Container
name|container
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|setScmID (String scmId)
specifier|public
name|void
name|setScmID
parameter_list|(
name|String
name|scmId
parameter_list|)
block|{
name|this
operator|.
name|scmID
operator|=
name|scmId
expr_stmt|;
block|}
block|}
end_class

end_unit

