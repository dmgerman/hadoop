begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.statemachine.commandhandler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|commandhandler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCommandProto
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerDataYaml
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|SCMConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|StateContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|TarContainerPacker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
operator|.
name|OzoneContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|replication
operator|.
name|ContainerDownloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|replication
operator|.
name|SimpleContainerDownloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|ReplicateContainerCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|SCMCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Command handler to copy containers from sources.  */
end_comment

begin_class
DECL|class|ReplicateContainerCommandHandler
specifier|public
class|class
name|ReplicateContainerCommandHandler
implements|implements
name|CommandHandler
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplicateContainerCommandHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|containerDispatcher
specifier|private
name|ContainerDispatcher
name|containerDispatcher
decl_stmt|;
DECL|field|invocationCount
specifier|private
name|int
name|invocationCount
decl_stmt|;
DECL|field|totalTime
specifier|private
name|long
name|totalTime
decl_stmt|;
DECL|field|downloader
specifier|private
name|ContainerDownloader
name|downloader
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|packer
specifier|private
name|TarContainerPacker
name|packer
init|=
operator|new
name|TarContainerPacker
argument_list|()
decl_stmt|;
DECL|field|containerSet
specifier|private
name|ContainerSet
name|containerSet
decl_stmt|;
DECL|field|lock
specifier|private
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|method|ReplicateContainerCommandHandler ( Configuration conf, ContainerSet containerSet, ContainerDispatcher containerDispatcher, ContainerDownloader downloader)
specifier|public
name|ReplicateContainerCommandHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ContainerSet
name|containerSet
parameter_list|,
name|ContainerDispatcher
name|containerDispatcher
parameter_list|,
name|ContainerDownloader
name|downloader
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|containerSet
operator|=
name|containerSet
expr_stmt|;
name|this
operator|.
name|downloader
operator|=
name|downloader
expr_stmt|;
name|this
operator|.
name|containerDispatcher
operator|=
name|containerDispatcher
expr_stmt|;
block|}
DECL|method|ReplicateContainerCommandHandler ( Configuration conf, ContainerSet containerSet, ContainerDispatcher containerDispatcher)
specifier|public
name|ReplicateContainerCommandHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ContainerSet
name|containerSet
parameter_list|,
name|ContainerDispatcher
name|containerDispatcher
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|containerSet
argument_list|,
name|containerDispatcher
argument_list|,
operator|new
name|SimpleContainerDownloader
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (SCMCommand command, OzoneContainer container, StateContext context, SCMConnectionManager connectionManager)
specifier|public
name|void
name|handle
parameter_list|(
name|SCMCommand
name|command
parameter_list|,
name|OzoneContainer
name|container
parameter_list|,
name|StateContext
name|context
parameter_list|,
name|SCMConnectionManager
name|connectionManager
parameter_list|)
block|{
name|ReplicateContainerCommand
name|replicateCommand
init|=
operator|(
name|ReplicateContainerCommand
operator|)
name|command
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|sourceDatanodes
init|=
name|replicateCommand
operator|.
name|getSourceDatanodes
argument_list|()
decl_stmt|;
name|long
name|containerID
init|=
name|replicateCommand
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|sourceDatanodes
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Replication command is received for container %d "
operator|+
literal|"but the size of source datanodes was 0."
argument_list|,
name|containerID
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting replication of container {} from {}"
argument_list|,
name|containerID
argument_list|,
name|sourceDatanodes
argument_list|)
expr_stmt|;
name|CompletableFuture
argument_list|<
name|Path
argument_list|>
name|tempTarFile
init|=
name|downloader
operator|.
name|getContainerDataFromReplicas
argument_list|(
name|containerID
argument_list|,
name|sourceDatanodes
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|result
init|=
name|tempTarFile
operator|.
name|thenAccept
argument_list|(
name|path
lambda|->
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container {} is downloaded, starting to import."
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
name|importContainer
argument_list|(
name|containerID
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|result
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|aVoid
parameter_list|,
name|throwable
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|throwable
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Container replication was unsuccessful ."
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container {} is replicated successfully"
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|updateCommandStatus
argument_list|(
name|context
argument_list|,
name|command
argument_list|,
literal|true
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|importContainer (long containerID, Path tarFilePath)
specifier|protected
name|void
name|importContainer
parameter_list|(
name|long
name|containerID
parameter_list|,
name|Path
name|tarFilePath
parameter_list|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ContainerData
name|originalContainerData
decl_stmt|;
try|try
init|(
name|FileInputStream
name|tempContainerTarStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|tarFilePath
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|byte
index|[]
name|containerDescriptorYaml
init|=
name|packer
operator|.
name|unpackContainerDescriptor
argument_list|(
name|tempContainerTarStream
argument_list|)
decl_stmt|;
name|originalContainerData
operator|=
name|ContainerDataYaml
operator|.
name|readContainer
argument_list|(
name|containerDescriptorYaml
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|FileInputStream
name|tempContainerTarStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|tarFilePath
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|Handler
name|handler
init|=
name|containerDispatcher
operator|.
name|getHandler
argument_list|(
name|originalContainerData
operator|.
name|getContainerType
argument_list|()
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|handler
operator|.
name|importContainer
argument_list|(
name|containerID
argument_list|,
name|originalContainerData
operator|.
name|getMaxSize
argument_list|()
argument_list|,
name|tempContainerTarStream
argument_list|,
name|packer
argument_list|)
decl_stmt|;
name|containerSet
operator|.
name|addContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't import the downloaded container data id="
operator|+
name|containerID
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|delete
argument_list|(
name|tarFilePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Container import is failed and the downloaded file can't be "
operator|+
literal|"deleted: "
operator|+
name|tarFilePath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCommandType ()
specifier|public
name|SCMCommandProto
operator|.
name|Type
name|getCommandType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|replicateContainerCommand
return|;
block|}
annotation|@
name|Override
DECL|method|getInvocationCount ()
specifier|public
name|int
name|getInvocationCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|invocationCount
return|;
block|}
annotation|@
name|Override
DECL|method|getAverageRunTime ()
specifier|public
name|long
name|getAverageRunTime
parameter_list|()
block|{
if|if
condition|(
name|invocationCount
operator|>
literal|0
condition|)
block|{
return|return
name|totalTime
operator|/
name|invocationCount
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

