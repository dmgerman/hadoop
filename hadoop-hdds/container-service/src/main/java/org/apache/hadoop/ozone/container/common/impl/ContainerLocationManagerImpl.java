begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|StorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerLocationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerLocationManagerMXBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A class that tells the ContainerManager where to place the containers.  * Please note : There is *no* one-to-one correlation between metadata  * Locations and data Locations.  *  *  For example : A user could map all container files to a  *  SSD but leave data/metadata on bunch of other disks.  */
end_comment

begin_class
DECL|class|ContainerLocationManagerImpl
specifier|public
class|class
name|ContainerLocationManagerImpl
implements|implements
name|ContainerLocationManager
implements|,
name|ContainerLocationManagerMXBean
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerLocationManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dataLocations
specifier|private
specifier|final
name|List
argument_list|<
name|ContainerStorageLocation
argument_list|>
name|dataLocations
decl_stmt|;
DECL|field|currentIndex
specifier|private
name|int
name|currentIndex
decl_stmt|;
DECL|field|metadataLocations
specifier|private
specifier|final
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|metadataLocations
decl_stmt|;
DECL|field|jmxbean
specifier|private
specifier|final
name|ObjectName
name|jmxbean
decl_stmt|;
comment|/**    * Constructs a Location Manager.    * @param metadataLocations  - Refers to the metadataLocations    * where we store the container metadata.    * @param dataDirs - metadataLocations where we store the actual    * data or chunk files.    * @param conf - configuration.    * @throws IOException    */
DECL|method|ContainerLocationManagerImpl (List<StorageLocation> metadataLocations, List<StorageLocation> dataDirs, Configuration conf)
specifier|public
name|ContainerLocationManagerImpl
parameter_list|(
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|metadataLocations
parameter_list|,
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|dataDirs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|dataLocations
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|StorageLocation
name|dataDir
range|:
name|dataDirs
control|)
block|{
name|dataLocations
operator|.
name|add
argument_list|(
operator|new
name|ContainerStorageLocation
argument_list|(
name|dataDir
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|metadataLocations
operator|=
name|metadataLocations
expr_stmt|;
name|jmxbean
operator|=
name|MBeans
operator|.
name|register
argument_list|(
literal|"OzoneDataNode"
argument_list|,
name|ContainerLocationManager
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the path where the container should be placed from a set of    * metadataLocations.    *    * @return A path where we should place this container and metadata.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getContainerPath ()
specifier|public
name|Path
name|getContainerPath
parameter_list|()
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|metadataLocations
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|currentIndex
operator|%
name|metadataLocations
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|Paths
operator|.
name|get
argument_list|(
name|metadataLocations
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getNormalizedUri
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns the path where the container Data file are stored.    *    * @return  a path where we place the LevelDB and data files of a container.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getDataPath (String containerName)
specifier|public
name|Path
name|getDataPath
parameter_list|(
name|String
name|containerName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|currentPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|dataLocations
operator|.
name|get
argument_list|(
name|currentIndex
operator|++
operator|%
name|dataLocations
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|getNormalizedUri
argument_list|()
argument_list|)
decl_stmt|;
name|currentPath
operator|=
name|currentPath
operator|.
name|resolve
argument_list|(
name|OzoneConsts
operator|.
name|CONTAINER_PREFIX
argument_list|)
expr_stmt|;
return|return
name|currentPath
operator|.
name|resolve
argument_list|(
name|containerName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLocationReport ()
specifier|public
name|StorageLocationReport
index|[]
name|getLocationReport
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|failed
decl_stmt|;
name|StorageLocationReport
index|[]
name|reports
init|=
operator|new
name|StorageLocationReport
index|[
name|dataLocations
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|dataLocations
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|ContainerStorageLocation
name|loc
init|=
name|dataLocations
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|long
name|scmUsed
init|=
literal|0
decl_stmt|;
name|long
name|remaining
init|=
literal|0
decl_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|scmUsed
operator|=
name|loc
operator|.
name|getScmUsed
argument_list|()
expr_stmt|;
name|remaining
operator|=
name|loc
operator|.
name|getAvailable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get scmUsed and remaining for container "
operator|+
literal|"storage location {}"
argument_list|,
name|loc
operator|.
name|getNormalizedUri
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset scmUsed and remaining if df/du failed.
name|scmUsed
operator|=
literal|0
expr_stmt|;
name|remaining
operator|=
literal|0
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|StorageLocationReport
operator|.
name|Builder
name|builder
init|=
name|StorageLocationReport
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setStorageLocation
argument_list|(
name|loc
operator|.
name|getStorageLocation
argument_list|()
argument_list|)
operator|.
name|setId
argument_list|(
name|loc
operator|.
name|getStorageUuId
argument_list|()
argument_list|)
operator|.
name|setFailed
argument_list|(
name|failed
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|loc
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|.
name|setRemaining
argument_list|(
name|remaining
argument_list|)
operator|.
name|setScmUsed
argument_list|(
name|scmUsed
argument_list|)
operator|.
name|setStorageType
argument_list|(
name|loc
operator|.
name|getStorageType
argument_list|()
argument_list|)
expr_stmt|;
name|StorageLocationReport
name|r
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|reports
index|[
name|idx
index|]
operator|=
name|r
expr_stmt|;
block|}
return|return
name|reports
return|;
block|}
comment|/**    * Supports clean shutdown of container location du threads.    *    * @throws IOException    */
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|ContainerStorageLocation
name|loc
range|:
name|dataLocations
control|)
block|{
name|loc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|MBeans
operator|.
name|unregister
argument_list|(
name|jmxbean
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

