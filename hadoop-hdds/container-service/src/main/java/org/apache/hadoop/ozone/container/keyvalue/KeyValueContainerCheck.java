begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.keyvalue
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|BlockData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerDataYaml
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|BlockUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|ChunkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|KeyValueContainerLocationUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_STORE_IMPL_LEVELDB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_STORE_IMPL_ROCKSDB
import|;
end_import

begin_comment
comment|/**  * Class to run integrity checks on Datanode Containers.  * Provide infra for Data Scrubbing  */
end_comment

begin_class
DECL|class|KeyValueContainerCheck
specifier|public
class|class
name|KeyValueContainerCheck
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|containerID
specifier|private
name|long
name|containerID
decl_stmt|;
DECL|field|inMemContainerData
specifier|private
name|KeyValueContainerData
name|inMemContainerData
decl_stmt|;
comment|//from caller, maybe null
DECL|field|onDiskContainerData
specifier|private
name|KeyValueContainerData
name|onDiskContainerData
decl_stmt|;
comment|//loaded from fs/disk
DECL|field|checkConfig
specifier|private
name|Configuration
name|checkConfig
decl_stmt|;
DECL|field|metadataPath
specifier|private
name|String
name|metadataPath
decl_stmt|;
DECL|method|KeyValueContainerCheck (String metadataPath, Configuration conf, long containerID, KeyValueContainerData containerData)
specifier|public
name|KeyValueContainerCheck
parameter_list|(
name|String
name|metadataPath
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|long
name|containerID
parameter_list|,
name|KeyValueContainerData
name|containerData
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|metadataPath
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|checkConfig
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|containerID
operator|=
name|containerID
expr_stmt|;
name|this
operator|.
name|onDiskContainerData
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|inMemContainerData
operator|=
name|containerData
expr_stmt|;
name|this
operator|.
name|metadataPath
operator|=
name|metadataPath
expr_stmt|;
block|}
comment|/**    * fast checks are basic and do not look inside the metadata files.    * Or into the structures on disk. These checks can be done on Open    * containers as well without concurrency implications    * Checks :    * 1. check directory layout    * 2. check container file    *    * @return void    */
DECL|method|fastCheck ()
specifier|public
name|KvCheckError
name|fastCheck
parameter_list|()
block|{
name|KvCheckError
name|error
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Running fast check for container {};"
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
name|error
operator|=
name|loadContainerData
argument_list|()
expr_stmt|;
if|if
condition|(
name|error
operator|!=
name|KvCheckError
operator|.
name|ERROR_NONE
condition|)
block|{
return|return
name|error
return|;
block|}
name|error
operator|=
name|checkLayout
argument_list|()
expr_stmt|;
if|if
condition|(
name|error
operator|!=
name|KvCheckError
operator|.
name|ERROR_NONE
condition|)
block|{
return|return
name|error
return|;
block|}
name|error
operator|=
name|checkContainerFile
argument_list|()
expr_stmt|;
return|return
name|error
return|;
block|}
comment|/**    * full checks comprise scanning all metadata inside the container.    * Including the KV database. These checks are intrusive, consume more    * resources compared to fast checks and should only be done on Closed    * or Quasi-closed Containers. Concurrency being limited to delete    * workflows.    *<p>    * fullCheck is a superset of fastCheck    *    * @return void    */
DECL|method|fullCheck ()
specifier|public
name|KvCheckError
name|fullCheck
parameter_list|()
block|{
comment|/**       */
name|KvCheckError
name|error
decl_stmt|;
name|error
operator|=
name|fastCheck
argument_list|()
expr_stmt|;
if|if
condition|(
name|error
operator|!=
name|KvCheckError
operator|.
name|ERROR_NONE
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"fastCheck failed, aborting full check for Container {}"
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|error
operator|=
name|checkBlockDB
argument_list|()
expr_stmt|;
return|return
name|error
return|;
block|}
comment|/**    * Check the integrity of the directory structure of the container.    *    * @return error code or ERROR_NONE    */
DECL|method|checkLayout ()
specifier|private
name|KvCheckError
name|checkLayout
parameter_list|()
block|{
name|boolean
name|success
decl_stmt|;
name|KvCheckError
name|error
init|=
name|KvCheckError
operator|.
name|ERROR_NONE
decl_stmt|;
comment|// is metadataPath accessible as a directory?
try|try
block|{
name|checkDirPath
argument_list|(
name|metadataPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|error
operator|=
name|KvCheckError
operator|.
name|METADATA_PATH_ACCESS
expr_stmt|;
name|handleCorruption
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|,
name|error
argument_list|,
name|ie
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|String
name|chunksPath
init|=
name|onDiskContainerData
operator|.
name|getChunksPath
argument_list|()
decl_stmt|;
comment|// is chunksPath accessible as a directory?
try|try
block|{
name|checkDirPath
argument_list|(
name|chunksPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|error
operator|=
name|KvCheckError
operator|.
name|CHUNKS_PATH_ACCESS
expr_stmt|;
name|handleCorruption
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|,
name|error
argument_list|,
name|ie
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
return|return
name|error
return|;
block|}
DECL|method|checkDirPath (String path)
specifier|private
name|void
name|checkDirPath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|dirPath
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|errStr
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|true
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|dirPath
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
name|errStr
operator|=
literal|"Not a directory ["
operator|+
name|path
operator|+
literal|"]"
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Security exception checking dir ["
operator|+
name|path
operator|+
literal|"]"
argument_list|,
name|se
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Generic exception checking dir ["
operator|+
name|path
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|String
index|[]
name|ls
init|=
name|dirPath
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|ls
operator|==
literal|null
condition|)
block|{
comment|// null result implies operation failed
name|success
operator|=
literal|false
expr_stmt|;
name|errStr
operator|=
literal|"null listing for directory ["
operator|+
name|path
operator|+
literal|"]"
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception listing dir ["
operator|+
name|path
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|errStr
operator|!=
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errStr
argument_list|)
throw|;
block|}
block|}
DECL|method|checkContainerFile ()
specifier|private
name|KvCheckError
name|checkContainerFile
parameter_list|()
block|{
comment|/**      * compare the values in the container file loaded from disk,      * with the values we are expecting      */
name|KvCheckError
name|error
init|=
name|KvCheckError
operator|.
name|ERROR_NONE
decl_stmt|;
name|String
name|dbType
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|onDiskContainerData
operator|!=
literal|null
argument_list|,
literal|"Container File not loaded"
argument_list|)
expr_stmt|;
name|KvCheckAction
name|next
decl_stmt|;
try|try
block|{
name|ContainerUtils
operator|.
name|verifyChecksum
argument_list|(
name|onDiskContainerData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|error
operator|=
name|KvCheckError
operator|.
name|CONTAINERDATA_CKSUM
expr_stmt|;
name|handleCorruption
argument_list|(
literal|"Container File Checksum mismatch"
argument_list|,
name|error
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
if|if
condition|(
name|onDiskContainerData
operator|.
name|getContainerType
argument_list|()
operator|!=
name|ContainerProtos
operator|.
name|ContainerType
operator|.
name|KeyValueContainer
condition|)
block|{
name|String
name|errStr
init|=
literal|"Bad Container type in Containerdata for "
operator|+
name|containerID
decl_stmt|;
name|error
operator|=
name|KvCheckError
operator|.
name|CONTAINERDATA_TYPE
expr_stmt|;
name|handleCorruption
argument_list|(
name|errStr
argument_list|,
name|error
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|error
return|;
comment|// Abort if we do not know the type of Container
block|}
if|if
condition|(
name|onDiskContainerData
operator|.
name|getContainerID
argument_list|()
operator|!=
name|containerID
condition|)
block|{
name|String
name|errStr
init|=
literal|"Bad ContainerID field in Containerdata for "
operator|+
name|containerID
decl_stmt|;
name|error
operator|=
name|KvCheckError
operator|.
name|CONTAINERDATA_ID
expr_stmt|;
name|next
operator|=
name|handleCorruption
argument_list|(
name|errStr
argument_list|,
name|error
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|==
name|KvCheckAction
operator|.
name|ABORT
condition|)
block|{
return|return
name|error
return|;
block|}
comment|// else continue checking other data elements
block|}
name|dbType
operator|=
name|onDiskContainerData
operator|.
name|getContainerDBType
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dbType
operator|.
name|equals
argument_list|(
name|OZONE_METADATA_STORE_IMPL_ROCKSDB
argument_list|)
operator|&&
operator|!
name|dbType
operator|.
name|equals
argument_list|(
name|OZONE_METADATA_STORE_IMPL_LEVELDB
argument_list|)
condition|)
block|{
name|String
name|errStr
init|=
literal|"Unknown DBType ["
operator|+
name|dbType
operator|+
literal|"] in Container File for  ["
operator|+
name|containerID
operator|+
literal|"]"
decl_stmt|;
name|error
operator|=
name|KvCheckError
operator|.
name|CONTAINERDATA_DBTYPE
expr_stmt|;
name|handleCorruption
argument_list|(
name|errStr
argument_list|,
name|error
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|KeyValueContainerData
name|kvData
init|=
name|onDiskContainerData
decl_stmt|;
if|if
condition|(
operator|!
name|metadataPath
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|kvData
operator|.
name|getMetadataPath
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|errStr
init|=
literal|"Bad metadata path in Containerdata for "
operator|+
name|containerID
operator|+
literal|"Expected ["
operator|+
name|metadataPath
operator|.
name|toString
argument_list|()
operator|+
literal|"] Got ["
operator|+
name|kvData
operator|.
name|getMetadataPath
argument_list|()
operator|+
literal|"]"
decl_stmt|;
name|error
operator|=
name|KvCheckError
operator|.
name|CONTAINERDATA_METADATA_PATH
expr_stmt|;
name|next
operator|=
name|handleCorruption
argument_list|(
name|errStr
argument_list|,
name|error
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|==
name|KvCheckAction
operator|.
name|ABORT
condition|)
block|{
return|return
name|error
return|;
block|}
block|}
return|return
name|error
return|;
block|}
DECL|method|checkBlockDB ()
specifier|private
name|KvCheckError
name|checkBlockDB
parameter_list|()
block|{
comment|/**      * Check the integrity of the DB inside each container.      * In Scope:      * 1. iterate over each key (Block) and locate the chunks for the block      * 2. garbage detection : chunks which exist in the filesystem,      *    but not in the DB. This function is implemented as HDDS-1202      * Not in scope:      * 1. chunk checksum verification. this is left to a separate      * slow chunk scanner      */
name|KvCheckError
name|error
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|onDiskContainerData
operator|!=
literal|null
argument_list|,
literal|"invoke loadContainerData prior to calling this function"
argument_list|)
expr_stmt|;
name|File
name|dbFile
decl_stmt|;
name|File
name|metaDir
init|=
operator|new
name|File
argument_list|(
name|metadataPath
argument_list|)
decl_stmt|;
try|try
block|{
name|dbFile
operator|=
name|KeyValueContainerLocationUtil
operator|.
name|getContainerDBFile
argument_list|(
name|metaDir
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dbFile
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|dbFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|String
name|dbFileErrorMsg
init|=
literal|"Unable to access DB File ["
operator|+
name|dbFile
operator|.
name|toString
argument_list|()
operator|+
literal|"] for Container ["
operator|+
name|containerID
operator|+
literal|"] metadata path ["
operator|+
name|metadataPath
operator|+
literal|"]"
decl_stmt|;
name|error
operator|=
name|KvCheckError
operator|.
name|DB_ACCESS
expr_stmt|;
name|handleCorruption
argument_list|(
name|dbFileErrorMsg
argument_list|,
name|error
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|dbFileErrorMessage
init|=
literal|"Exception when initializing DBFile"
operator|+
literal|"with metadatapath ["
operator|+
name|metadataPath
operator|+
literal|"] for Container ["
operator|+
name|containerID
operator|+
literal|"]"
decl_stmt|;
name|error
operator|=
name|KvCheckError
operator|.
name|DB_ACCESS
expr_stmt|;
name|handleCorruption
argument_list|(
name|dbFileErrorMessage
argument_list|,
name|error
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|onDiskContainerData
operator|.
name|setDbFile
argument_list|(
name|dbFile
argument_list|)
expr_stmt|;
try|try
block|{
name|MetadataStore
name|db
init|=
name|BlockUtils
operator|.
name|getDB
argument_list|(
name|onDiskContainerData
argument_list|,
name|checkConfig
argument_list|)
decl_stmt|;
name|error
operator|=
name|iterateBlockDB
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|error
operator|=
name|KvCheckError
operator|.
name|DB_ITERATOR
expr_stmt|;
name|handleCorruption
argument_list|(
literal|"Block DB Iterator aborted"
argument_list|,
name|error
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
return|return
name|error
return|;
block|}
DECL|method|iterateBlockDB (MetadataStore db)
specifier|private
name|KvCheckError
name|iterateBlockDB
parameter_list|(
name|MetadataStore
name|db
parameter_list|)
throws|throws
name|IOException
block|{
name|KvCheckError
name|error
init|=
name|KvCheckError
operator|.
name|ERROR_NONE
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|db
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// get "normal" keys from the Block DB
name|KeyValueBlockIterator
name|kvIter
init|=
operator|new
name|KeyValueBlockIterator
argument_list|(
name|containerID
argument_list|,
operator|new
name|File
argument_list|(
name|onDiskContainerData
operator|.
name|getContainerPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// ensure there is a chunk file for each key in the DB
while|while
condition|(
name|kvIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BlockData
name|block
init|=
name|kvIter
operator|.
name|nextBlock
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|chunkInfoList
init|=
name|block
operator|.
name|getChunks
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerProtos
operator|.
name|ChunkInfo
name|chunk
range|:
name|chunkInfoList
control|)
block|{
name|File
name|chunkFile
decl_stmt|;
try|try
block|{
name|chunkFile
operator|=
name|ChunkUtils
operator|.
name|getChunkFile
argument_list|(
name|onDiskContainerData
argument_list|,
name|ChunkInfo
operator|.
name|getFromProtoBuf
argument_list|(
name|chunk
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|error
operator|=
name|KvCheckError
operator|.
name|MISSING_CHUNK_FILE
expr_stmt|;
name|handleCorruption
argument_list|(
literal|"Unable to access chunk path"
argument_list|,
name|error
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
if|if
condition|(
operator|!
name|chunkFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|error
operator|=
name|KvCheckError
operator|.
name|MISSING_CHUNK_FILE
expr_stmt|;
comment|// concurrent mutation in Block DB? lookup the block again.
name|byte
index|[]
name|bdata
init|=
name|db
operator|.
name|get
argument_list|(
name|Longs
operator|.
name|toByteArray
argument_list|(
name|block
operator|.
name|getBlockID
argument_list|()
operator|.
name|getLocalID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bdata
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"concurrency with delete, ignoring deleted block"
argument_list|)
expr_stmt|;
name|error
operator|=
name|KvCheckError
operator|.
name|ERROR_NONE
expr_stmt|;
break|break;
comment|// skip to next block from kvIter
block|}
else|else
block|{
name|handleCorruption
argument_list|(
literal|"Missing chunk file"
argument_list|,
name|error
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
block|}
block|}
block|}
return|return
name|error
return|;
block|}
DECL|method|loadContainerData ()
specifier|private
name|KvCheckError
name|loadContainerData
parameter_list|()
block|{
name|KvCheckError
name|error
init|=
name|KvCheckError
operator|.
name|ERROR_NONE
decl_stmt|;
name|File
name|containerFile
init|=
name|KeyValueContainer
operator|.
name|getContainerFile
argument_list|(
name|metadataPath
operator|.
name|toString
argument_list|()
argument_list|,
name|containerID
argument_list|)
decl_stmt|;
try|try
block|{
name|onDiskContainerData
operator|=
operator|(
name|KeyValueContainerData
operator|)
name|ContainerDataYaml
operator|.
name|readContainerFile
argument_list|(
name|containerFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|error
operator|=
name|KvCheckError
operator|.
name|FILE_LOAD
expr_stmt|;
name|handleCorruption
argument_list|(
literal|"Unable to load Container File"
argument_list|,
name|error
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|error
return|;
block|}
DECL|method|handleCorruption (String reason, KvCheckError error, Exception e)
specifier|private
name|KvCheckAction
name|handleCorruption
parameter_list|(
name|String
name|reason
parameter_list|,
name|KvCheckError
name|error
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
comment|// XXX HDDS-1201 need to implement corruption handling/reporting
name|String
name|errStr
init|=
literal|"Corruption detected in container: ["
operator|+
name|containerID
operator|+
literal|"] reason: ["
operator|+
name|reason
operator|+
literal|"] error code: ["
operator|+
name|error
operator|+
literal|"]"
decl_stmt|;
name|String
name|logMessage
init|=
literal|null
decl_stmt|;
name|StackTraceElement
index|[]
name|stackeElems
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
name|String
name|caller
init|=
literal|"Corruption reported from Source File: ["
operator|+
name|stackeElems
index|[
literal|2
index|]
operator|.
name|getFileName
argument_list|()
operator|+
literal|"] Line: ["
operator|+
name|stackeElems
index|[
literal|2
index|]
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"]"
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|logMessage
operator|=
name|errStr
operator|+
literal|" exception: ["
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"]"
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|logMessage
operator|=
name|errStr
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
name|caller
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|logMessage
argument_list|)
expr_stmt|;
return|return
name|KvCheckAction
operator|.
name|ABORT
return|;
block|}
comment|/**    * Pre-defined error codes for Container Metadata check.    */
DECL|enum|KvCheckError
specifier|public
enum|enum
name|KvCheckError
block|{
DECL|enumConstant|ERROR_NONE
name|ERROR_NONE
block|,
DECL|enumConstant|FILE_LOAD
name|FILE_LOAD
block|,
comment|// unable to load container metafile
DECL|enumConstant|METADATA_PATH_ACCESS
name|METADATA_PATH_ACCESS
block|,
comment|// metadata path is not accessible
DECL|enumConstant|CHUNKS_PATH_ACCESS
name|CHUNKS_PATH_ACCESS
block|,
comment|// chunks path is not accessible
DECL|enumConstant|CONTAINERDATA_ID
name|CONTAINERDATA_ID
block|,
comment|// bad Container-ID stored in Container file
DECL|enumConstant|CONTAINERDATA_METADATA_PATH
name|CONTAINERDATA_METADATA_PATH
block|,
comment|// bad metadata path in Container file
DECL|enumConstant|CONTAINERDATA_CHUNKS_PATH
name|CONTAINERDATA_CHUNKS_PATH
block|,
comment|// bad chunks path in Container file
DECL|enumConstant|CONTAINERDATA_CKSUM
name|CONTAINERDATA_CKSUM
block|,
comment|// container file checksum mismatch
DECL|enumConstant|CONTAINERDATA_TYPE
name|CONTAINERDATA_TYPE
block|,
comment|// container file incorrect type of Container
DECL|enumConstant|CONTAINERDATA_DBTYPE
name|CONTAINERDATA_DBTYPE
block|,
comment|// unknown DB Type specified in Container File
DECL|enumConstant|DB_ACCESS
name|DB_ACCESS
block|,
comment|// unable to load Metastore DB
DECL|enumConstant|DB_ITERATOR
name|DB_ITERATOR
block|,
comment|// unable to create block iterator for Metastore DB
DECL|enumConstant|MISSING_CHUNK_FILE
name|MISSING_CHUNK_FILE
comment|// chunk file not found
block|}
DECL|enum|KvCheckAction
specifier|private
enum|enum
name|KvCheckAction
block|{
DECL|enumConstant|CONTINUE
name|CONTINUE
block|,
comment|// Continue with remaining checks on the corrupt Container
DECL|enumConstant|ABORT
name|ABORT
comment|// Abort checks for the container
block|}
block|}
end_class

end_unit

