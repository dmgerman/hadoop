begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|VolumeChoosingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskOutOfSpaceException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Choose volumes in round-robin order.  * Use fine-grained locks to synchronize volume choosing.  */
end_comment

begin_class
DECL|class|RoundRobinVolumeChoosingPolicy
specifier|public
class|class
name|RoundRobinVolumeChoosingPolicy
implements|implements
name|VolumeChoosingPolicy
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RoundRobinVolumeChoosingPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Stores the index of the next volume to be returned.
DECL|field|nextVolumeIndex
specifier|private
name|AtomicInteger
name|nextVolumeIndex
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|chooseVolume (List<VolumeInfo> volumes, long maxContainerSize)
specifier|public
name|VolumeInfo
name|chooseVolume
parameter_list|(
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|volumes
parameter_list|,
name|long
name|maxContainerSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// No volumes available to choose from
if|if
condition|(
name|volumes
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|DiskOutOfSpaceException
argument_list|(
literal|"No more available volumes"
argument_list|)
throw|;
block|}
comment|// since volumes could've been removed because of the failure
comment|// make sure we are not out of bounds
name|int
name|nextIndex
init|=
name|nextVolumeIndex
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|currentVolumeIndex
init|=
name|nextIndex
operator|<
name|volumes
operator|.
name|size
argument_list|()
condition|?
name|nextIndex
else|:
literal|0
decl_stmt|;
name|int
name|startVolumeIndex
init|=
name|currentVolumeIndex
decl_stmt|;
name|long
name|maxAvailable
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|VolumeInfo
name|volume
init|=
name|volumes
operator|.
name|get
argument_list|(
name|currentVolumeIndex
argument_list|)
decl_stmt|;
name|long
name|availableVolumeSize
init|=
name|volume
operator|.
name|getAvailable
argument_list|()
decl_stmt|;
name|currentVolumeIndex
operator|=
operator|(
name|currentVolumeIndex
operator|+
literal|1
operator|)
operator|%
name|volumes
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|availableVolumeSize
operator|>
name|maxContainerSize
condition|)
block|{
name|nextVolumeIndex
operator|.
name|compareAndSet
argument_list|(
name|nextIndex
argument_list|,
name|currentVolumeIndex
argument_list|)
expr_stmt|;
return|return
name|volume
return|;
block|}
if|if
condition|(
name|availableVolumeSize
operator|>
name|maxAvailable
condition|)
block|{
name|maxAvailable
operator|=
name|availableVolumeSize
expr_stmt|;
block|}
if|if
condition|(
name|currentVolumeIndex
operator|==
name|startVolumeIndex
condition|)
block|{
throw|throw
operator|new
name|DiskOutOfSpaceException
argument_list|(
literal|"Out of space: "
operator|+
literal|"The volume with the most available space (="
operator|+
name|maxAvailable
operator|+
literal|" B) is less than the container size (="
operator|+
name|maxContainerSize
operator|+
literal|" B)."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

