begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.protocol.commands
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|DeleteContainerCommandProto
import|;
end_import

begin_comment
comment|/**  * SCM command which tells the datanode to delete a container.  */
end_comment

begin_class
DECL|class|DeleteContainerCommand
specifier|public
class|class
name|DeleteContainerCommand
extends|extends
name|SCMCommand
argument_list|<
name|DeleteContainerCommandProto
argument_list|>
block|{
DECL|field|containerId
specifier|private
specifier|final
name|long
name|containerId
decl_stmt|;
DECL|field|force
specifier|private
specifier|final
name|boolean
name|force
decl_stmt|;
comment|/**    * DeleteContainerCommand, to send a command for datanode to delete a    * container.    * @param containerId    */
DECL|method|DeleteContainerCommand (long containerId)
specifier|public
name|DeleteContainerCommand
parameter_list|(
name|long
name|containerId
parameter_list|)
block|{
name|this
argument_list|(
name|containerId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * DeleteContainerCommand, to send a command for datanode to delete a    * container.    * @param containerId    * @param forceFlag if this is set to true, we delete container without    * checking state of the container.    */
DECL|method|DeleteContainerCommand (long containerId, boolean forceFlag)
specifier|public
name|DeleteContainerCommand
parameter_list|(
name|long
name|containerId
parameter_list|,
name|boolean
name|forceFlag
parameter_list|)
block|{
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|force
operator|=
name|forceFlag
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|SCMCommandProto
operator|.
name|Type
name|getType
parameter_list|()
block|{
return|return
name|SCMCommandProto
operator|.
name|Type
operator|.
name|deleteContainerCommand
return|;
block|}
annotation|@
name|Override
DECL|method|getProto ()
specifier|public
name|DeleteContainerCommandProto
name|getProto
parameter_list|()
block|{
name|DeleteContainerCommandProto
operator|.
name|Builder
name|builder
init|=
name|DeleteContainerCommandProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setCmdId
argument_list|(
name|getId
argument_list|()
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|setForce
argument_list|(
name|force
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getContainerID ()
specifier|public
name|long
name|getContainerID
parameter_list|()
block|{
return|return
name|containerId
return|;
block|}
DECL|method|isForce ()
specifier|public
name|boolean
name|isForce
parameter_list|()
block|{
return|return
name|force
return|;
block|}
DECL|method|getFromProtobuf ( DeleteContainerCommandProto protoMessage)
specifier|public
specifier|static
name|DeleteContainerCommand
name|getFromProtobuf
parameter_list|(
name|DeleteContainerCommandProto
name|protoMessage
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|protoMessage
argument_list|)
expr_stmt|;
return|return
operator|new
name|DeleteContainerCommand
argument_list|(
name|protoMessage
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|protoMessage
operator|.
name|getForce
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

