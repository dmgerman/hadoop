begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.replication
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|replication
operator|.
name|ReplicationTask
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Single point to schedule the downloading tasks based on priorities.  */
end_comment

begin_class
DECL|class|ReplicationSupervisor
specifier|public
class|class
name|ReplicationSupervisor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplicationSupervisor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|Set
argument_list|<
name|Worker
argument_list|>
name|threadPool
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|queue
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|ReplicationTask
argument_list|>
name|queue
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
DECL|field|containerSet
specifier|private
specifier|final
name|ContainerSet
name|containerSet
decl_stmt|;
DECL|field|replicator
specifier|private
specifier|final
name|ContainerReplicator
name|replicator
decl_stmt|;
DECL|field|poolSize
specifier|private
specifier|final
name|int
name|poolSize
decl_stmt|;
DECL|method|ReplicationSupervisor ( ContainerSet containerSet, ContainerReplicator replicator, int poolSize)
specifier|public
name|ReplicationSupervisor
parameter_list|(
name|ContainerSet
name|containerSet
parameter_list|,
name|ContainerReplicator
name|replicator
parameter_list|,
name|int
name|poolSize
parameter_list|)
block|{
name|this
operator|.
name|containerSet
operator|=
name|containerSet
expr_stmt|;
name|this
operator|.
name|replicator
operator|=
name|replicator
expr_stmt|;
name|this
operator|.
name|poolSize
operator|=
name|poolSize
expr_stmt|;
block|}
DECL|method|addTask (ReplicationTask task)
specifier|public
specifier|synchronized
name|void
name|addTask
parameter_list|(
name|ReplicationTask
name|task
parameter_list|)
block|{
name|queue
operator|.
name|putIfAbsent
argument_list|(
name|task
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|task
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|threadPool
init|)
block|{
name|threadPool
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|poolSize
condition|;
name|i
operator|++
control|)
block|{
name|Worker
name|worker
init|=
operator|new
name|Worker
argument_list|()
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|worker
argument_list|,
literal|"ContainerReplication-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|threadPool
operator|.
name|add
argument_list|(
name|worker
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|selectTask ()
specifier|public
specifier|synchronized
name|ReplicationTask
name|selectTask
parameter_list|()
block|{
for|for
control|(
name|ReplicationTask
name|task
range|:
name|queue
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|task
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|QUEUED
condition|)
block|{
if|if
condition|(
name|containerSet
operator|.
name|getContainer
argument_list|(
name|task
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|task
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|DOWNLOADING
argument_list|)
expr_stmt|;
return|return
name|task
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Container {} has already been downloaded."
argument_list|,
name|task
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|remove
argument_list|(
name|task
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|task
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|FAILED
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Container {} can't be downloaded from any of the datanodes."
argument_list|,
name|task
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|remove
argument_list|(
name|task
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|task
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|DONE
condition|)
block|{
name|queue
operator|.
name|remove
argument_list|(
name|task
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Container {} is replicated."
argument_list|,
name|task
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//no available task.
return|return
literal|null
return|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
for|for
control|(
name|Worker
name|worker
range|:
name|threadPool
control|)
block|{
name|worker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getQueueSize ()
specifier|public
name|int
name|getQueueSize
parameter_list|()
block|{
return|return
name|queue
operator|.
name|size
argument_list|()
return|;
block|}
DECL|class|Worker
specifier|private
class|class
name|Worker
implements|implements
name|Runnable
block|{
DECL|field|running
specifier|private
name|boolean
name|running
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|running
condition|)
block|{
name|ReplicationTask
name|task
init|=
name|selectTask
argument_list|()
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|threadPool
init|)
block|{
name|threadPool
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|replicator
operator|.
name|replicate
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error on doing replication"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error on waiting after failed replication task"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|running
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

