begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.statemachine
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|PipelineReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|CommandStatusReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|NodeReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|client
operator|.
name|CertificateClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|report
operator|.
name|ReportManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|commandhandler
operator|.
name|CloseContainerCommandHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|commandhandler
operator|.
name|CommandDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|commandhandler
operator|.
name|DeleteBlocksCommandHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|commandhandler
operator|.
name|DeleteContainerCommandHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|commandhandler
operator|.
name|ReplicateContainerCommandHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|TarContainerPacker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
operator|.
name|OzoneContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|replication
operator|.
name|ContainerReplicator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|replication
operator|.
name|DownloadAndImportReplicator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|replication
operator|.
name|ReplicationSupervisor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|replication
operator|.
name|SimpleContainerDownloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|SCMCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|JvmPauseMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|concurrent
operator|.
name|HadoopExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * State Machine Class.  */
end_comment

begin_class
DECL|class|DatanodeStateMachine
specifier|public
class|class
name|DatanodeStateMachine
implements|implements
name|Closeable
block|{
annotation|@
name|VisibleForTesting
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DatanodeStateMachine
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|executorService
specifier|private
specifier|final
name|ExecutorService
name|executorService
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|connectionManager
specifier|private
specifier|final
name|SCMConnectionManager
name|connectionManager
decl_stmt|;
DECL|field|context
specifier|private
name|StateContext
name|context
decl_stmt|;
DECL|field|container
specifier|private
specifier|final
name|OzoneContainer
name|container
decl_stmt|;
DECL|field|datanodeDetails
specifier|private
name|DatanodeDetails
name|datanodeDetails
decl_stmt|;
DECL|field|commandDispatcher
specifier|private
specifier|final
name|CommandDispatcher
name|commandDispatcher
decl_stmt|;
DECL|field|reportManager
specifier|private
specifier|final
name|ReportManager
name|reportManager
decl_stmt|;
DECL|field|commandsHandled
specifier|private
name|long
name|commandsHandled
decl_stmt|;
DECL|field|nextHB
specifier|private
name|AtomicLong
name|nextHB
decl_stmt|;
DECL|field|stateMachineThread
specifier|private
name|Thread
name|stateMachineThread
init|=
literal|null
decl_stmt|;
DECL|field|cmdProcessThread
specifier|private
name|Thread
name|cmdProcessThread
init|=
literal|null
decl_stmt|;
DECL|field|supervisor
specifier|private
specifier|final
name|ReplicationSupervisor
name|supervisor
decl_stmt|;
DECL|field|jvmPauseMonitor
specifier|private
name|JvmPauseMonitor
name|jvmPauseMonitor
decl_stmt|;
DECL|field|dnCertClient
specifier|private
name|CertificateClient
name|dnCertClient
decl_stmt|;
comment|/**    * Constructs a a datanode state machine.    *  @param datanodeDetails - DatanodeDetails used to identify a datanode    * @param conf - Configuration.    * @param certClient - Datanode Certificate client, required if security is    *                     enabled    */
DECL|method|DatanodeStateMachine (DatanodeDetails datanodeDetails, Configuration conf, CertificateClient certClient)
specifier|public
name|DatanodeStateMachine
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CertificateClient
name|certClient
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|datanodeDetails
operator|=
name|datanodeDetails
expr_stmt|;
name|executorService
operator|=
name|HadoopExecutors
operator|.
name|newCachedThreadPool
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"Datanode State Machine Thread - %d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|connectionManager
operator|=
operator|new
name|SCMConnectionManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StateContext
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|DatanodeStates
operator|.
name|getInitState
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|container
operator|=
operator|new
name|OzoneContainer
argument_list|(
name|this
operator|.
name|datanodeDetails
argument_list|,
operator|new
name|OzoneConfiguration
argument_list|(
name|conf
argument_list|)
argument_list|,
name|context
argument_list|,
name|certClient
argument_list|)
expr_stmt|;
name|dnCertClient
operator|=
name|certClient
expr_stmt|;
name|nextHB
operator|=
operator|new
name|AtomicLong
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerReplicator
name|replicator
init|=
operator|new
name|DownloadAndImportReplicator
argument_list|(
name|container
operator|.
name|getContainerSet
argument_list|()
argument_list|,
name|container
operator|.
name|getController
argument_list|()
argument_list|,
operator|new
name|SimpleContainerDownloader
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|TarContainerPacker
argument_list|()
argument_list|)
decl_stmt|;
name|supervisor
operator|=
operator|new
name|ReplicationSupervisor
argument_list|(
name|container
operator|.
name|getContainerSet
argument_list|()
argument_list|,
name|replicator
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// When we add new handlers just adding a new handler here should do the
comment|// trick.
name|commandDispatcher
operator|=
name|CommandDispatcher
operator|.
name|newBuilder
argument_list|()
operator|.
name|addHandler
argument_list|(
operator|new
name|CloseContainerCommandHandler
argument_list|()
argument_list|)
operator|.
name|addHandler
argument_list|(
operator|new
name|DeleteBlocksCommandHandler
argument_list|(
name|container
operator|.
name|getContainerSet
argument_list|()
argument_list|,
name|conf
argument_list|)
argument_list|)
operator|.
name|addHandler
argument_list|(
operator|new
name|ReplicateContainerCommandHandler
argument_list|(
name|conf
argument_list|,
name|supervisor
argument_list|)
argument_list|)
operator|.
name|addHandler
argument_list|(
operator|new
name|DeleteContainerCommandHandler
argument_list|()
argument_list|)
operator|.
name|setConnectionManager
argument_list|(
name|connectionManager
argument_list|)
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|reportManager
operator|=
name|ReportManager
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setStateContext
argument_list|(
name|context
argument_list|)
operator|.
name|addPublisherFor
argument_list|(
name|NodeReportProto
operator|.
name|class
argument_list|)
operator|.
name|addPublisherFor
argument_list|(
name|ContainerReportsProto
operator|.
name|class
argument_list|)
operator|.
name|addPublisherFor
argument_list|(
name|CommandStatusReportsProto
operator|.
name|class
argument_list|)
operator|.
name|addPublisherFor
argument_list|(
name|PipelineReportsProto
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|/**    *    * Return DatanodeDetails if set, return null otherwise.    *    * @return DatanodeDetails    */
DECL|method|getDatanodeDetails ()
specifier|public
name|DatanodeDetails
name|getDatanodeDetails
parameter_list|()
block|{
return|return
name|datanodeDetails
return|;
block|}
comment|/**    * Returns the Connection manager for this state machine.    *    * @return - SCMConnectionManager.    */
DECL|method|getConnectionManager ()
specifier|public
name|SCMConnectionManager
name|getConnectionManager
parameter_list|()
block|{
return|return
name|connectionManager
return|;
block|}
DECL|method|getContainer ()
specifier|public
name|OzoneContainer
name|getContainer
parameter_list|()
block|{
return|return
name|this
operator|.
name|container
return|;
block|}
comment|/**    * Runs the state machine at a fixed frequency.    */
DECL|method|start ()
specifier|private
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|now
init|=
literal|0
decl_stmt|;
name|reportManager
operator|.
name|init
argument_list|()
expr_stmt|;
name|initCommandHandlerThread
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Start jvm monitor
name|jvmPauseMonitor
operator|=
operator|new
name|JvmPauseMonitor
argument_list|()
expr_stmt|;
name|jvmPauseMonitor
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|jvmPauseMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|context
operator|.
name|getState
argument_list|()
operator|!=
name|DatanodeStates
operator|.
name|SHUTDOWN
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing cycle Number : {}"
argument_list|,
name|context
operator|.
name|getExecutionCount
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|heartbeatFrequency
init|=
name|context
operator|.
name|getHeartbeatFrequency
argument_list|()
decl_stmt|;
name|nextHB
operator|.
name|set
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|+
name|heartbeatFrequency
argument_list|)
expr_stmt|;
name|context
operator|.
name|execute
argument_list|(
name|executorService
argument_list|,
name|heartbeatFrequency
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|now
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
if|if
condition|(
name|now
operator|<
name|nextHB
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|nextHB
operator|.
name|get
argument_list|()
operator|-
name|now
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Some one has sent interrupt signal, this could be because
comment|// 1. Trigger heartbeat immediately
comment|// 2. Shutdown has be initiated.
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to finish the execution."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Gets the current context.    *    * @return StateContext    */
DECL|method|getContext ()
specifier|public
name|StateContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
comment|/**    * Sets the current context.    *    * @param context - Context    */
DECL|method|setContext (StateContext context)
specifier|public
name|void
name|setContext
parameter_list|(
name|StateContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
comment|/**    * Closes this stream and releases any system resources associated with it. If    * the stream is already closed then invoking this method has no effect.    *<p>    *<p> As noted in {@link AutoCloseable#close()}, cases where the close may    * fail require careful attention. It is strongly advised to relinquish the    * underlying resources and to internally<em>mark</em> the {@code Closeable}    * as closed, prior to throwing the {@code IOException}.    *    * @throws IOException if an I/O error occurs    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|stateMachineThread
operator|!=
literal|null
condition|)
block|{
name|stateMachineThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cmdProcessThread
operator|!=
literal|null
condition|)
block|{
name|cmdProcessThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|context
operator|.
name|setState
argument_list|(
name|DatanodeStates
operator|.
name|getLastState
argument_list|()
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to shutdown state machine properly."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error attempting to shutdown."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connectionManager
operator|!=
literal|null
condition|)
block|{
name|connectionManager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jvmPauseMonitor
operator|!=
literal|null
condition|)
block|{
name|jvmPauseMonitor
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * States that a datanode  can be in. GetNextState will move this enum from    * getInitState to getLastState.    */
DECL|enum|DatanodeStates
specifier|public
enum|enum
name|DatanodeStates
block|{
DECL|enumConstant|INIT
name|INIT
argument_list|(
literal|1
argument_list|)
block|,
DECL|enumConstant|RUNNING
name|RUNNING
argument_list|(
literal|2
argument_list|)
block|,
DECL|enumConstant|SHUTDOWN
name|SHUTDOWN
argument_list|(
literal|3
argument_list|)
block|;
DECL|field|value
specifier|private
specifier|final
name|int
name|value
decl_stmt|;
comment|/**      * Constructs states.      *      * @param value  Enum Value      */
DECL|method|DatanodeStates (int value)
name|DatanodeStates
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Returns the first State.      *      * @return First State.      */
DECL|method|getInitState ()
specifier|public
specifier|static
name|DatanodeStates
name|getInitState
parameter_list|()
block|{
return|return
name|INIT
return|;
block|}
comment|/**      * The last state of endpoint states.      *      * @return last state.      */
DECL|method|getLastState ()
specifier|public
specifier|static
name|DatanodeStates
name|getLastState
parameter_list|()
block|{
return|return
name|SHUTDOWN
return|;
block|}
comment|/**      * returns the numeric value associated with the endPoint.      *      * @return int.      */
DECL|method|getValue ()
specifier|public
name|int
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**      * Returns the next logical state that endPoint should move to. This      * function assumes the States are sequentially numbered.      *      * @return NextState.      */
DECL|method|getNextState ()
specifier|public
name|DatanodeStates
name|getNextState
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|value
operator|<
name|getLastState
argument_list|()
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|int
name|stateValue
init|=
name|this
operator|.
name|getValue
argument_list|()
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|DatanodeStates
name|iter
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|stateValue
operator|==
name|iter
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
name|iter
return|;
block|}
block|}
block|}
return|return
name|getLastState
argument_list|()
return|;
block|}
block|}
comment|/**    * Start datanode state machine as a single thread daemon.    */
DECL|method|startDaemon ()
specifier|public
name|void
name|startDaemon
parameter_list|()
block|{
name|Runnable
name|startStateMachineTask
init|=
parameter_list|()
lambda|->
block|{
try|try
block|{
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Ozone container server started."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to start the DatanodeState Machine"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|stateMachineThread
operator|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"Datanode State Machine Thread - %d"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|newThread
argument_list|(
name|startStateMachineTask
argument_list|)
expr_stmt|;
name|stateMachineThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Calling this will immediately trigger a heartbeat to the SCMs.    * This heartbeat will also include all the reports which are ready to    * be sent by datanode.    */
DECL|method|triggerHeartbeat ()
specifier|public
name|void
name|triggerHeartbeat
parameter_list|()
block|{
name|stateMachineThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
comment|/**    * Waits for DatanodeStateMachine to exit.    *    * @throws InterruptedException    */
DECL|method|join ()
specifier|public
name|void
name|join
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|stateMachineThread
operator|!=
literal|null
condition|)
block|{
name|stateMachineThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cmdProcessThread
operator|!=
literal|null
condition|)
block|{
name|cmdProcessThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Stop the daemon thread of the datanode state machine.    */
DECL|method|stopDaemon ()
specifier|public
specifier|synchronized
name|void
name|stopDaemon
parameter_list|()
block|{
try|try
block|{
name|supervisor
operator|.
name|stop
argument_list|()
expr_stmt|;
name|context
operator|.
name|setState
argument_list|(
name|DatanodeStates
operator|.
name|SHUTDOWN
argument_list|)
expr_stmt|;
name|reportManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|this
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Ozone container server stopped."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Stop ozone container server failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *    * Check if the datanode state machine daemon is stopped.    *    * @return True if datanode state machine daemon is stopped    * and false otherwise.    */
annotation|@
name|VisibleForTesting
DECL|method|isDaemonStopped ()
specifier|public
name|boolean
name|isDaemonStopped
parameter_list|()
block|{
return|return
name|this
operator|.
name|executorService
operator|.
name|isShutdown
argument_list|()
operator|&&
name|this
operator|.
name|getContext
argument_list|()
operator|.
name|getState
argument_list|()
operator|==
name|DatanodeStates
operator|.
name|SHUTDOWN
return|;
block|}
comment|/**    * Create a command handler thread.    *    * @param config    */
DECL|method|initCommandHandlerThread (Configuration config)
specifier|private
name|void
name|initCommandHandlerThread
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
comment|/**      * Task that periodically checks if we have any outstanding commands.      * It is assumed that commands can be processed slowly and in order.      * This assumption might change in future. Right now due to this assumption      * we have single command  queue process thread.      */
name|Runnable
name|processCommandQueue
init|=
parameter_list|()
lambda|->
block|{
name|long
name|now
decl_stmt|;
while|while
condition|(
name|getContext
argument_list|()
operator|.
name|getState
argument_list|()
operator|!=
name|DatanodeStates
operator|.
name|SHUTDOWN
condition|)
block|{
name|SCMCommand
name|command
init|=
name|getContext
argument_list|()
operator|.
name|getNextCommand
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|!=
literal|null
condition|)
block|{
name|commandDispatcher
operator|.
name|handle
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|commandsHandled
operator|++
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
comment|// Sleep till the next HB + 1 second.
name|now
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextHB
operator|.
name|get
argument_list|()
operator|>
name|now
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|nextHB
operator|.
name|get
argument_list|()
operator|-
name|now
operator|)
operator|+
literal|1000L
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Ignore this exception.
block|}
block|}
block|}
block|}
decl_stmt|;
comment|// We will have only one thread for command processing in a datanode.
name|cmdProcessThread
operator|=
name|getCommandHandlerThread
argument_list|(
name|processCommandQueue
argument_list|)
expr_stmt|;
name|cmdProcessThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|getCommandHandlerThread (Runnable processCommandQueue)
specifier|private
name|Thread
name|getCommandHandlerThread
parameter_list|(
name|Runnable
name|processCommandQueue
parameter_list|)
block|{
name|Thread
name|handlerThread
init|=
operator|new
name|Thread
argument_list|(
name|processCommandQueue
argument_list|)
decl_stmt|;
name|handlerThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|handlerThread
operator|.
name|setName
argument_list|(
literal|"Command processor thread"
argument_list|)
expr_stmt|;
name|handlerThread
operator|.
name|setUncaughtExceptionHandler
argument_list|(
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
lambda|->
block|{
comment|// Let us just restart this thread after logging a critical error.
comment|// if this thread is not running we cannot handle commands from SCM.
name|LOG
operator|.
name|error
argument_list|(
literal|"Critical Error : Command processor thread encountered an "
operator|+
literal|"error. Thread: {}"
argument_list|,
name|t
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|getCommandHandlerThread
argument_list|(
name|processCommandQueue
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|handlerThread
return|;
block|}
comment|/**    * Returns the number of commands handled  by the datanode.    * @return  count    */
annotation|@
name|VisibleForTesting
DECL|method|getCommandHandled ()
specifier|public
name|long
name|getCommandHandled
parameter_list|()
block|{
return|return
name|commandsHandled
return|;
block|}
comment|/**    * returns the Command Dispatcher.    * @return CommandDispatcher    */
annotation|@
name|VisibleForTesting
DECL|method|getCommandDispatcher ()
specifier|public
name|CommandDispatcher
name|getCommandDispatcher
parameter_list|()
block|{
return|return
name|commandDispatcher
return|;
block|}
block|}
end_class

end_unit

