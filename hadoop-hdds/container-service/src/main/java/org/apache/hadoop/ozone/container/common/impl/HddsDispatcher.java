begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|VolumeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Ozone Container dispatcher takes a call from the netty server and routes it  * to the right handler function.  */
end_comment

begin_class
DECL|class|HddsDispatcher
specifier|public
class|class
name|HddsDispatcher
implements|implements
name|ContainerDispatcher
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HddsDispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|handlers
specifier|private
specifier|final
name|Map
argument_list|<
name|ContainerType
argument_list|,
name|Handler
argument_list|>
name|handlers
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|containerSet
specifier|private
specifier|final
name|ContainerSet
name|containerSet
decl_stmt|;
DECL|field|volumeSet
specifier|private
specifier|final
name|VolumeSet
name|volumeSet
decl_stmt|;
DECL|field|scmID
specifier|private
name|String
name|scmID
decl_stmt|;
comment|/**    * Constructs an OzoneContainer that receives calls from    * XceiverServerHandler.    */
DECL|method|HddsDispatcher (Configuration config, ContainerSet contSet, VolumeSet volumes)
specifier|public
name|HddsDispatcher
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|ContainerSet
name|contSet
parameter_list|,
name|VolumeSet
name|volumes
parameter_list|)
block|{
comment|//TODO: initialize metrics
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|containerSet
operator|=
name|contSet
expr_stmt|;
name|this
operator|.
name|volumeSet
operator|=
name|volumes
expr_stmt|;
name|this
operator|.
name|handlers
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|ContainerType
name|containerType
range|:
name|ContainerType
operator|.
name|values
argument_list|()
control|)
block|{
name|handlers
operator|.
name|put
argument_list|(
name|containerType
argument_list|,
name|Handler
operator|.
name|getHandlerForContainerType
argument_list|(
name|containerType
argument_list|,
name|conf
argument_list|,
name|containerSet
argument_list|,
name|volumeSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|dispatch ( ContainerCommandRequestProto msg)
specifier|public
name|ContainerCommandResponseProto
name|dispatch
parameter_list|(
name|ContainerCommandRequestProto
name|msg
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Command {}, trace ID: {} "
argument_list|,
name|msg
operator|.
name|getCmdType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|msg
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
literal|null
decl_stmt|;
name|ContainerType
name|containerType
init|=
literal|null
decl_stmt|;
try|try
block|{
name|long
name|containerID
init|=
name|getContainerID
argument_list|(
name|msg
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|getCmdType
argument_list|()
operator|!=
name|ContainerProtos
operator|.
name|Type
operator|.
name|CreateContainer
condition|)
block|{
name|container
operator|=
name|getContainer
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|containerType
operator|=
name|getContainerType
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|containerType
operator|=
name|msg
operator|.
name|getCreateContainer
argument_list|()
operator|.
name|getContainerType
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
name|ex
argument_list|,
name|msg
argument_list|)
return|;
block|}
name|Handler
name|handler
init|=
name|getHandler
argument_list|(
name|containerType
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
name|StorageContainerException
name|ex
init|=
operator|new
name|StorageContainerException
argument_list|(
literal|"Invalid "
operator|+
literal|"ContainerType "
operator|+
name|containerType
argument_list|,
name|ContainerProtos
operator|.
name|Result
operator|.
name|CONTAINER_INTERNAL_ERROR
argument_list|)
decl_stmt|;
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
name|ex
argument_list|,
name|msg
argument_list|)
return|;
block|}
return|return
name|handler
operator|.
name|handle
argument_list|(
name|msg
argument_list|,
name|container
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getHandler (ContainerProtos.ContainerType containerType)
specifier|public
name|Handler
name|getHandler
parameter_list|(
name|ContainerProtos
operator|.
name|ContainerType
name|containerType
parameter_list|)
block|{
return|return
name|handlers
operator|.
name|get
argument_list|(
name|containerType
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setScmId (String scmId)
specifier|public
name|void
name|setScmId
parameter_list|(
name|String
name|scmId
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|scmId
argument_list|,
literal|"scmId Cannot be null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|scmID
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|scmID
operator|=
name|scmId
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ContainerType
argument_list|,
name|Handler
argument_list|>
name|handlerMap
range|:
name|handlers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|handlerMap
operator|.
name|getValue
argument_list|()
operator|.
name|setScmID
argument_list|(
name|scmID
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getContainerID (ContainerCommandRequestProto request)
specifier|private
name|long
name|getContainerID
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|ContainerProtos
operator|.
name|Type
name|cmdType
init|=
name|request
operator|.
name|getCmdType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|cmdType
condition|)
block|{
case|case
name|CreateContainer
case|:
return|return
name|request
operator|.
name|getCreateContainer
argument_list|()
operator|.
name|getContainerID
argument_list|()
return|;
case|case
name|ReadContainer
case|:
return|return
name|request
operator|.
name|getReadContainer
argument_list|()
operator|.
name|getContainerID
argument_list|()
return|;
case|case
name|UpdateContainer
case|:
return|return
name|request
operator|.
name|getUpdateContainer
argument_list|()
operator|.
name|getContainerID
argument_list|()
return|;
case|case
name|DeleteContainer
case|:
return|return
name|request
operator|.
name|getDeleteContainer
argument_list|()
operator|.
name|getContainerID
argument_list|()
return|;
case|case
name|ListContainer
case|:
return|return
name|request
operator|.
name|getListContainer
argument_list|()
operator|.
name|getStartContainerID
argument_list|()
return|;
case|case
name|CloseContainer
case|:
return|return
name|request
operator|.
name|getCloseContainer
argument_list|()
operator|.
name|getContainerID
argument_list|()
return|;
case|case
name|PutKey
case|:
return|return
name|request
operator|.
name|getPutKey
argument_list|()
operator|.
name|getKeyData
argument_list|()
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
return|;
case|case
name|GetKey
case|:
return|return
name|request
operator|.
name|getGetKey
argument_list|()
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
return|;
case|case
name|DeleteKey
case|:
return|return
name|request
operator|.
name|getDeleteKey
argument_list|()
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
return|;
case|case
name|ListKey
case|:
return|return
name|request
operator|.
name|getListKey
argument_list|()
operator|.
name|getContainerID
argument_list|()
return|;
case|case
name|ReadChunk
case|:
return|return
name|request
operator|.
name|getReadChunk
argument_list|()
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
return|;
case|case
name|DeleteChunk
case|:
return|return
name|request
operator|.
name|getDeleteChunk
argument_list|()
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
return|;
case|case
name|WriteChunk
case|:
return|return
name|request
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
return|;
case|case
name|ListChunk
case|:
return|return
name|request
operator|.
name|getListChunk
argument_list|()
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
return|;
case|case
name|PutSmallFile
case|:
return|return
name|request
operator|.
name|getPutSmallFile
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|getKeyData
argument_list|()
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
return|;
case|case
name|GetSmallFile
case|:
return|return
name|request
operator|.
name|getGetSmallFile
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
return|;
block|}
throw|throw
operator|new
name|StorageContainerException
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|UNSUPPORTED_REQUEST
argument_list|)
throw|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getContainer (long containerID)
specifier|public
name|Container
name|getContainer
parameter_list|(
name|long
name|containerID
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|Container
name|container
init|=
name|containerSet
operator|.
name|getContainer
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"ContainerID "
operator|+
name|containerID
operator|+
literal|" does not exist"
argument_list|,
name|ContainerProtos
operator|.
name|Result
operator|.
name|CONTAINER_NOT_FOUND
argument_list|)
throw|;
block|}
return|return
name|container
return|;
block|}
DECL|method|getContainerType (Container container)
specifier|private
name|ContainerType
name|getContainerType
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
return|return
name|container
operator|.
name|getContainerType
argument_list|()
return|;
block|}
block|}
end_class

end_unit

