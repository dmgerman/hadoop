begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|StateContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|VolumeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerLifeCycleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_comment
comment|/**  * Ozone Container dispatcher takes a call from the netty server and routes it  * to the right handler function.  */
end_comment

begin_class
DECL|class|HddsDispatcher
specifier|public
class|class
name|HddsDispatcher
implements|implements
name|ContainerDispatcher
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HddsDispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|handlers
specifier|private
specifier|final
name|Map
argument_list|<
name|ContainerType
argument_list|,
name|Handler
argument_list|>
name|handlers
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|containerSet
specifier|private
specifier|final
name|ContainerSet
name|containerSet
decl_stmt|;
DECL|field|volumeSet
specifier|private
specifier|final
name|VolumeSet
name|volumeSet
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|StateContext
name|context
decl_stmt|;
DECL|field|containerCloseThreshold
specifier|private
specifier|final
name|float
name|containerCloseThreshold
decl_stmt|;
DECL|field|scmID
specifier|private
name|String
name|scmID
decl_stmt|;
DECL|field|metrics
specifier|private
name|ContainerMetrics
name|metrics
decl_stmt|;
comment|/**    * Constructs an OzoneContainer that receives calls from    * XceiverServerHandler.    */
DECL|method|HddsDispatcher (Configuration config, ContainerSet contSet, VolumeSet volumes, StateContext context)
specifier|public
name|HddsDispatcher
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|ContainerSet
name|contSet
parameter_list|,
name|VolumeSet
name|volumes
parameter_list|,
name|StateContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|containerSet
operator|=
name|contSet
expr_stmt|;
name|this
operator|.
name|volumeSet
operator|=
name|volumes
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|handlers
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|ContainerMetrics
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerType
name|containerType
range|:
name|ContainerType
operator|.
name|values
argument_list|()
control|)
block|{
name|handlers
operator|.
name|put
argument_list|(
name|containerType
argument_list|,
name|Handler
operator|.
name|getHandlerForContainerType
argument_list|(
name|containerType
argument_list|,
name|conf
argument_list|,
name|containerSet
argument_list|,
name|volumeSet
argument_list|,
name|metrics
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|containerCloseThreshold
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|HddsConfigKeys
operator|.
name|HDDS_CONTAINER_CLOSE_THRESHOLD
argument_list|,
name|HddsConfigKeys
operator|.
name|HDDS_CONTAINER_CLOSE_THRESHOLD_DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
comment|// Shutdown the volumes
name|volumeSet
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|dispatch ( ContainerCommandRequestProto msg)
specifier|public
name|ContainerCommandResponseProto
name|dispatch
parameter_list|(
name|ContainerCommandRequestProto
name|msg
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Command {}, trace ID: {} "
argument_list|,
name|msg
operator|.
name|getCmdType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|msg
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
literal|null
decl_stmt|;
name|ContainerType
name|containerType
init|=
literal|null
decl_stmt|;
name|ContainerCommandResponseProto
name|responseProto
init|=
literal|null
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|ContainerProtos
operator|.
name|Type
name|cmdType
init|=
name|msg
operator|.
name|getCmdType
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|containerID
init|=
name|msg
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|incContainerOpsMetrics
argument_list|(
name|cmdType
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmdType
operator|!=
name|ContainerProtos
operator|.
name|Type
operator|.
name|CreateContainer
condition|)
block|{
name|container
operator|=
name|getContainer
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|containerType
operator|=
name|getContainerType
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|msg
operator|.
name|hasCreateContainer
argument_list|()
condition|)
block|{
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|msg
argument_list|)
return|;
block|}
name|containerType
operator|=
name|msg
operator|.
name|getCreateContainer
argument_list|()
operator|.
name|getContainerType
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
name|ex
argument_list|,
name|msg
argument_list|)
return|;
block|}
comment|// Small performance optimization. We check if the operation is of type
comment|// write before trying to send CloseContainerAction.
if|if
condition|(
operator|!
name|HddsUtils
operator|.
name|isReadOnly
argument_list|(
name|msg
argument_list|)
condition|)
block|{
name|sendCloseContainerActionIfNeeded
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
name|Handler
name|handler
init|=
name|getHandler
argument_list|(
name|containerType
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
name|StorageContainerException
name|ex
init|=
operator|new
name|StorageContainerException
argument_list|(
literal|"Invalid "
operator|+
literal|"ContainerType "
operator|+
name|containerType
argument_list|,
name|ContainerProtos
operator|.
name|Result
operator|.
name|CONTAINER_INTERNAL_ERROR
argument_list|)
decl_stmt|;
return|return
name|ContainerUtils
operator|.
name|logAndReturnError
argument_list|(
name|LOG
argument_list|,
name|ex
argument_list|,
name|msg
argument_list|)
return|;
block|}
name|responseProto
operator|=
name|handler
operator|.
name|handle
argument_list|(
name|msg
argument_list|,
name|container
argument_list|)
expr_stmt|;
if|if
condition|(
name|responseProto
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|incContainerOpsLatencies
argument_list|(
name|cmdType
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
comment|// If the request is of Write Type and the container operation
comment|// is unsuccessful, it implies the applyTransaction on the container
comment|// failed. All subsequent transactions on the container should fail and
comment|// hence replica will be marked unhealthy here. In this case, a close
comment|// container action will be sent to SCM to close the container.
if|if
condition|(
operator|!
name|HddsUtils
operator|.
name|isReadOnly
argument_list|(
name|msg
argument_list|)
operator|&&
name|responseProto
operator|.
name|getResult
argument_list|()
operator|!=
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
condition|)
block|{
comment|// If the container is open and the container operation has failed,
comment|// it should be first marked unhealthy and the initiate the close
comment|// container action. This also implies this is the first transaction
comment|// which has failed, so the container is marked unhealthy right here.
comment|// Once container is marked unhealthy, all the subsequent write
comment|// transactions will fail with UNHEALTHY_CONTAINER exception.
if|if
condition|(
name|container
operator|.
name|getContainerState
argument_list|()
operator|==
name|ContainerLifeCycleState
operator|.
name|OPEN
condition|)
block|{
name|container
operator|.
name|getContainerData
argument_list|()
operator|.
name|setState
argument_list|(
name|ContainerLifeCycleState
operator|.
name|UNHEALTHY
argument_list|)
expr_stmt|;
name|sendCloseContainerActionIfNeeded
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|responseProto
return|;
block|}
else|else
block|{
return|return
name|ContainerUtils
operator|.
name|unsupportedRequest
argument_list|(
name|msg
argument_list|)
return|;
block|}
block|}
comment|/**    * If the container usage reaches the close threshold or the container is    * marked unhealthy we send Close ContainerAction to SCM.    * @param container current state of container    */
DECL|method|sendCloseContainerActionIfNeeded (Container container)
specifier|private
name|void
name|sendCloseContainerActionIfNeeded
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
comment|// We have to find a more efficient way to close a container.
name|boolean
name|isSpaceFull
init|=
name|isContainerFull
argument_list|(
name|container
argument_list|)
decl_stmt|;
name|boolean
name|shouldClose
init|=
name|isSpaceFull
operator|||
name|isContainerUnhealthy
argument_list|(
name|container
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldClose
condition|)
block|{
name|ContainerData
name|containerData
init|=
name|container
operator|.
name|getContainerData
argument_list|()
decl_stmt|;
name|ContainerAction
operator|.
name|Reason
name|reason
init|=
name|isSpaceFull
condition|?
name|ContainerAction
operator|.
name|Reason
operator|.
name|CONTAINER_FULL
else|:
name|ContainerAction
operator|.
name|Reason
operator|.
name|CONTAINER_UNHEALTHY
decl_stmt|;
name|ContainerAction
name|action
init|=
name|ContainerAction
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerID
argument_list|(
name|containerData
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|setAction
argument_list|(
name|ContainerAction
operator|.
name|Action
operator|.
name|CLOSE
argument_list|)
operator|.
name|setReason
argument_list|(
name|reason
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|context
operator|.
name|addContainerActionIfAbsent
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isContainerFull (Container container)
specifier|private
name|boolean
name|isContainerFull
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|boolean
name|isOpen
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|container
argument_list|)
operator|.
name|map
argument_list|(
name|cont
lambda|->
name|cont
operator|.
name|getContainerState
argument_list|()
operator|==
name|ContainerLifeCycleState
operator|.
name|OPEN
argument_list|)
operator|.
name|orElse
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
decl_stmt|;
if|if
condition|(
name|isOpen
condition|)
block|{
name|ContainerData
name|containerData
init|=
name|container
operator|.
name|getContainerData
argument_list|()
decl_stmt|;
name|double
name|containerUsedPercentage
init|=
literal|1.0f
operator|*
name|containerData
operator|.
name|getBytesUsed
argument_list|()
operator|/
name|containerData
operator|.
name|getMaxSize
argument_list|()
decl_stmt|;
return|return
name|containerUsedPercentage
operator|>=
name|containerCloseThreshold
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|isContainerUnhealthy (Container container)
specifier|private
name|boolean
name|isContainerUnhealthy
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|container
argument_list|)
operator|.
name|map
argument_list|(
name|cont
lambda|->
operator|(
name|cont
operator|.
name|getContainerState
argument_list|()
operator|==
name|ContainerLifeCycleState
operator|.
name|UNHEALTHY
operator|)
argument_list|)
operator|.
name|orElse
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getHandler (ContainerProtos.ContainerType containerType)
specifier|public
name|Handler
name|getHandler
parameter_list|(
name|ContainerProtos
operator|.
name|ContainerType
name|containerType
parameter_list|)
block|{
return|return
name|handlers
operator|.
name|get
argument_list|(
name|containerType
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setScmId (String scmId)
specifier|public
name|void
name|setScmId
parameter_list|(
name|String
name|scmId
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|scmId
argument_list|,
literal|"scmId Cannot be null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|scmID
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|scmID
operator|=
name|scmId
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ContainerType
argument_list|,
name|Handler
argument_list|>
name|handlerMap
range|:
name|handlers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|handlerMap
operator|.
name|getValue
argument_list|()
operator|.
name|setScmID
argument_list|(
name|scmID
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getContainer (long containerID)
specifier|public
name|Container
name|getContainer
parameter_list|(
name|long
name|containerID
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|Container
name|container
init|=
name|containerSet
operator|.
name|getContainer
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"ContainerID "
operator|+
name|containerID
operator|+
literal|" does not exist"
argument_list|,
name|ContainerProtos
operator|.
name|Result
operator|.
name|CONTAINER_NOT_FOUND
argument_list|)
throw|;
block|}
return|return
name|container
return|;
block|}
DECL|method|getContainerType (Container container)
specifier|private
name|ContainerType
name|getContainerType
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
return|return
name|container
operator|.
name|getContainerType
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setMetricsForTesting (ContainerMetrics containerMetrics)
specifier|public
name|void
name|setMetricsForTesting
parameter_list|(
name|ContainerMetrics
name|containerMetrics
parameter_list|)
block|{
name|this
operator|.
name|metrics
operator|=
name|containerMetrics
expr_stmt|;
block|}
block|}
end_class

end_unit

