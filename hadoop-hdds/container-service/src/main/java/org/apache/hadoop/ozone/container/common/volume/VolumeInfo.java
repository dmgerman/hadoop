begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.volume
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|GetSpaceUsed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Stores information about a disk/volume.  */
end_comment

begin_class
DECL|class|VolumeInfo
specifier|public
class|class
name|VolumeInfo
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VolumeInfo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rootDir
specifier|private
specifier|final
name|String
name|rootDir
decl_stmt|;
DECL|field|storageType
specifier|private
specifier|final
name|StorageType
name|storageType
decl_stmt|;
comment|// Space usage calculator
DECL|field|usage
specifier|private
name|VolumeUsage
name|usage
decl_stmt|;
comment|// Capacity configured. This is useful when we want to
comment|// limit the visible capacity for tests. If negative, then we just
comment|// query from the filesystem.
DECL|field|configuredCapacity
specifier|private
name|long
name|configuredCapacity
decl_stmt|;
comment|/**    * Builder for VolumeInfo.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|rootDir
specifier|private
specifier|final
name|String
name|rootDir
decl_stmt|;
DECL|field|storageType
specifier|private
name|StorageType
name|storageType
decl_stmt|;
DECL|field|configuredCapacity
specifier|private
name|long
name|configuredCapacity
decl_stmt|;
DECL|method|Builder (String root, Configuration config)
specifier|public
name|Builder
parameter_list|(
name|String
name|root
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|rootDir
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
block|}
DECL|method|storageType (StorageType st)
specifier|public
name|Builder
name|storageType
parameter_list|(
name|StorageType
name|st
parameter_list|)
block|{
name|this
operator|.
name|storageType
operator|=
name|st
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|configuredCapacity (long capacity)
specifier|public
name|Builder
name|configuredCapacity
parameter_list|(
name|long
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|configuredCapacity
operator|=
name|capacity
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|VolumeInfo
name|build
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|VolumeInfo
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|VolumeInfo (Builder b)
specifier|private
name|VolumeInfo
parameter_list|(
name|Builder
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|rootDir
operator|=
name|b
operator|.
name|rootDir
expr_stmt|;
name|File
name|root
init|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|rootDir
argument_list|)
decl_stmt|;
name|Boolean
name|succeeded
init|=
name|root
operator|.
name|isDirectory
argument_list|()
operator|||
name|root
operator|.
name|mkdirs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|succeeded
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create the volume root dir at : {}"
argument_list|,
name|root
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to create the volume root dir at "
operator|+
name|root
argument_list|)
throw|;
block|}
name|this
operator|.
name|storageType
operator|=
operator|(
name|b
operator|.
name|storageType
operator|!=
literal|null
condition|?
name|b
operator|.
name|storageType
else|:
name|StorageType
operator|.
name|DEFAULT
operator|)
expr_stmt|;
name|this
operator|.
name|configuredCapacity
operator|=
operator|(
name|b
operator|.
name|configuredCapacity
operator|!=
literal|0
condition|?
name|b
operator|.
name|configuredCapacity
else|:
operator|-
literal|1
operator|)
expr_stmt|;
name|this
operator|.
name|usage
operator|=
operator|new
name|VolumeUsage
argument_list|(
name|root
argument_list|,
name|b
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getCapacity ()
specifier|public
name|long
name|getCapacity
parameter_list|()
block|{
return|return
name|configuredCapacity
operator|<
literal|0
condition|?
name|usage
operator|.
name|getCapacity
argument_list|()
else|:
name|configuredCapacity
return|;
block|}
DECL|method|getAvailable ()
specifier|public
name|long
name|getAvailable
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|usage
operator|.
name|getAvailable
argument_list|()
return|;
block|}
DECL|method|getScmUsed ()
specifier|public
name|long
name|getScmUsed
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|usage
operator|.
name|getScmUsed
argument_list|()
return|;
block|}
DECL|method|shutdownUsageThread ()
specifier|protected
name|void
name|shutdownUsageThread
parameter_list|()
block|{
if|if
condition|(
name|usage
operator|!=
literal|null
condition|)
block|{
name|usage
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|usage
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getRootDir ()
specifier|public
name|String
name|getRootDir
parameter_list|()
block|{
return|return
name|this
operator|.
name|rootDir
return|;
block|}
DECL|method|getStorageType ()
specifier|public
name|StorageType
name|getStorageType
parameter_list|()
block|{
return|return
name|this
operator|.
name|storageType
return|;
block|}
comment|/**    * Only for testing. Do not use otherwise.    */
annotation|@
name|VisibleForTesting
DECL|method|setScmUsageForTesting (GetSpaceUsed scmUsageForTest)
specifier|public
name|void
name|setScmUsageForTesting
parameter_list|(
name|GetSpaceUsed
name|scmUsageForTest
parameter_list|)
block|{
name|usage
operator|.
name|setScmUsageForTesting
argument_list|(
name|scmUsageForTest
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

