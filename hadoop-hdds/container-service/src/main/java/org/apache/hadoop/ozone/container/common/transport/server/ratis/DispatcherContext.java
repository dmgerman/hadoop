begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.transport.server.ratis
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|server
operator|.
name|ratis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * DispatcherContext class holds transport protocol specific context info  * required for execution of container commands over the container dispatcher.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DispatcherContext
specifier|public
specifier|final
class|class
name|DispatcherContext
block|{
comment|/**    * Determines which stage of writeChunk a write chunk request is for.    */
DECL|enum|WriteChunkStage
specifier|public
enum|enum
name|WriteChunkStage
block|{
DECL|enumConstant|WRITE_DATA
DECL|enumConstant|COMMIT_DATA
DECL|enumConstant|COMBINED
name|WRITE_DATA
block|,
name|COMMIT_DATA
block|,
name|COMBINED
block|}
comment|// whether the chunk data needs to be written or committed or both
DECL|field|stage
specifier|private
specifier|final
name|WriteChunkStage
name|stage
decl_stmt|;
comment|// indicates whether the read from tmp chunk files is allowed
DECL|field|readFromTmpFile
specifier|private
specifier|final
name|boolean
name|readFromTmpFile
decl_stmt|;
comment|// which term the request is being served in Ratis
DECL|field|term
specifier|private
specifier|final
name|long
name|term
decl_stmt|;
comment|// the log index in Ratis log to which the request belongs to
DECL|field|logIndex
specifier|private
specifier|final
name|long
name|logIndex
decl_stmt|;
DECL|field|container2BCSIDMap
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|container2BCSIDMap
decl_stmt|;
DECL|method|DispatcherContext (long term, long index, WriteChunkStage stage, boolean readFromTmpFile, Map<Long, Long> container2BCSIDMap)
specifier|private
name|DispatcherContext
parameter_list|(
name|long
name|term
parameter_list|,
name|long
name|index
parameter_list|,
name|WriteChunkStage
name|stage
parameter_list|,
name|boolean
name|readFromTmpFile
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|container2BCSIDMap
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
name|this
operator|.
name|logIndex
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|stage
operator|=
name|stage
expr_stmt|;
name|this
operator|.
name|readFromTmpFile
operator|=
name|readFromTmpFile
expr_stmt|;
name|this
operator|.
name|container2BCSIDMap
operator|=
name|container2BCSIDMap
expr_stmt|;
block|}
DECL|method|getLogIndex ()
specifier|public
name|long
name|getLogIndex
parameter_list|()
block|{
return|return
name|logIndex
return|;
block|}
DECL|method|isReadFromTmpFile ()
specifier|public
name|boolean
name|isReadFromTmpFile
parameter_list|()
block|{
return|return
name|readFromTmpFile
return|;
block|}
DECL|method|getTerm ()
specifier|public
name|long
name|getTerm
parameter_list|()
block|{
return|return
name|term
return|;
block|}
DECL|method|getStage ()
specifier|public
name|WriteChunkStage
name|getStage
parameter_list|()
block|{
return|return
name|stage
return|;
block|}
DECL|method|getContainer2BCSIDMap ()
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|getContainer2BCSIDMap
parameter_list|()
block|{
return|return
name|container2BCSIDMap
return|;
block|}
comment|/**    * Builder class for building DispatcherContext.    */
DECL|class|Builder
specifier|public
specifier|static
specifier|final
class|class
name|Builder
block|{
DECL|field|stage
specifier|private
name|WriteChunkStage
name|stage
init|=
name|WriteChunkStage
operator|.
name|COMBINED
decl_stmt|;
DECL|field|readFromTmpFile
specifier|private
name|boolean
name|readFromTmpFile
init|=
literal|false
decl_stmt|;
DECL|field|term
specifier|private
name|long
name|term
decl_stmt|;
DECL|field|logIndex
specifier|private
name|long
name|logIndex
decl_stmt|;
DECL|field|container2BCSIDMap
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|container2BCSIDMap
decl_stmt|;
comment|/**      * Sets the WriteChunkStage.      *      * @param writeChunkStage WriteChunk Stage      * @return DispatcherContext.Builder      */
DECL|method|setStage (WriteChunkStage writeChunkStage)
specifier|public
name|Builder
name|setStage
parameter_list|(
name|WriteChunkStage
name|writeChunkStage
parameter_list|)
block|{
name|this
operator|.
name|stage
operator|=
name|writeChunkStage
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the flag for reading from tmp chunk files.      *      * @param setReadFromTmpFile whether to read from tmp chunk file or not      * @return DispatcherContext.Builder      */
DECL|method|setReadFromTmpFile (boolean setReadFromTmpFile)
specifier|public
name|Builder
name|setReadFromTmpFile
parameter_list|(
name|boolean
name|setReadFromTmpFile
parameter_list|)
block|{
name|this
operator|.
name|readFromTmpFile
operator|=
name|setReadFromTmpFile
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the current term for the container request from Ratis.      *      * @param currentTerm current term      * @return DispatcherContext.Builder      */
DECL|method|setTerm (long currentTerm)
specifier|public
name|Builder
name|setTerm
parameter_list|(
name|long
name|currentTerm
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|currentTerm
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the logIndex for the container request from Ratis.      *      * @param index log index      * @return DispatcherContext.Builder      */
DECL|method|setLogIndex (long index)
specifier|public
name|Builder
name|setLogIndex
parameter_list|(
name|long
name|index
parameter_list|)
block|{
name|this
operator|.
name|logIndex
operator|=
name|index
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the container2BCSIDMap to contain all the containerIds per      * RaftGroup.      * @param map container2BCSIDMap      * @return Builder      */
DECL|method|setContainer2BCSIDMap (Map<Long, Long> map)
specifier|public
name|Builder
name|setContainer2BCSIDMap
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|container2BCSIDMap
operator|=
name|map
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Builds and returns DispatcherContext instance.      *      * @return DispatcherContext      */
DECL|method|build ()
specifier|public
name|DispatcherContext
name|build
parameter_list|()
block|{
return|return
operator|new
name|DispatcherContext
argument_list|(
name|term
argument_list|,
name|logIndex
argument_list|,
name|stage
argument_list|,
name|readFromTmpFile
argument_list|,
name|container2BCSIDMap
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

