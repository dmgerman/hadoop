begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.keyvalue
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerPacker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|ArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|ArchiveOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|CompressorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|CompressorInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|CompressorOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|CompressorStreamFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * Compress/uncompress KeyValueContainer data to a tar.gz archive.  */
end_comment

begin_class
DECL|class|TarContainerPacker
specifier|public
class|class
name|TarContainerPacker
implements|implements
name|ContainerPacker
argument_list|<
name|KeyValueContainerData
argument_list|>
block|{
DECL|field|CHUNKS_DIR_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CHUNKS_DIR_NAME
init|=
name|OzoneConsts
operator|.
name|STORAGE_DIR_CHUNKS
decl_stmt|;
DECL|field|DB_DIR_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DB_DIR_NAME
init|=
literal|"db"
decl_stmt|;
DECL|field|CONTAINER_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_FILE_NAME
init|=
literal|"container.yaml"
decl_stmt|;
comment|/**    * Given an input stream (tar file) extract the data to the specified    * directories.    *    * @param container container which defines the destination structure.    * @param inputStream the input stream.    * @throws IOException    */
annotation|@
name|Override
DECL|method|unpackContainerData (Container<KeyValueContainerData> container, InputStream inputStream)
specifier|public
name|byte
index|[]
name|unpackContainerData
parameter_list|(
name|Container
argument_list|<
name|KeyValueContainerData
argument_list|>
name|container
parameter_list|,
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|descriptorFileContent
init|=
literal|null
decl_stmt|;
try|try
block|{
name|KeyValueContainerData
name|containerData
init|=
name|container
operator|.
name|getContainerData
argument_list|()
decl_stmt|;
name|CompressorInputStream
name|compressorInputStream
init|=
operator|new
name|CompressorStreamFactory
argument_list|()
operator|.
name|createCompressorInputStream
argument_list|(
name|CompressorStreamFactory
operator|.
name|GZIP
argument_list|,
name|inputStream
argument_list|)
decl_stmt|;
name|TarArchiveInputStream
name|tarInput
init|=
operator|new
name|TarArchiveInputStream
argument_list|(
name|compressorInputStream
argument_list|)
decl_stmt|;
name|TarArchiveEntry
name|entry
init|=
name|tarInput
operator|.
name|getNextTarEntry
argument_list|()
decl_stmt|;
while|while
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|DB_DIR_NAME
operator|+
literal|"/"
argument_list|)
condition|)
block|{
name|Path
name|destinationPath
init|=
name|containerData
operator|.
name|getDbFile
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|DB_DIR_NAME
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|extractEntry
argument_list|(
name|tarInput
argument_list|,
name|entry
operator|.
name|getSize
argument_list|()
argument_list|,
name|destinationPath
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|CHUNKS_DIR_NAME
operator|+
literal|"/"
argument_list|)
condition|)
block|{
name|Path
name|destinationPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|containerData
operator|.
name|getChunksPath
argument_list|()
argument_list|)
operator|.
name|resolve
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|CHUNKS_DIR_NAME
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|extractEntry
argument_list|(
name|tarInput
argument_list|,
name|entry
operator|.
name|getSize
argument_list|()
argument_list|,
name|destinationPath
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|CONTAINER_FILE_NAME
argument_list|)
condition|)
block|{
comment|//Don't do anything. Container file should be unpacked in a
comment|//separated step by unpackContainerDescriptor call.
name|descriptorFileContent
operator|=
name|readEntry
argument_list|(
name|tarInput
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown entry in the tar file: "
operator|+
literal|""
operator|+
name|name
argument_list|)
throw|;
block|}
name|entry
operator|=
name|tarInput
operator|.
name|getNextTarEntry
argument_list|()
expr_stmt|;
block|}
return|return
name|descriptorFileContent
return|;
block|}
catch|catch
parameter_list|(
name|CompressorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't uncompress the given container: "
operator|+
name|container
operator|.
name|getContainerData
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|extractEntry (TarArchiveInputStream tarInput, long size, Path path)
specifier|private
name|void
name|extractEntry
parameter_list|(
name|TarArchiveInputStream
name|tarInput
parameter_list|,
name|long
name|size
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|path
argument_list|,
literal|"Path element should not be null"
argument_list|)
expr_stmt|;
name|Path
name|parent
init|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"Path element should have a parent directory"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|parent
argument_list|)
expr_stmt|;
try|try
init|(
name|BufferedOutputStream
name|bos
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|path
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|int
name|bufferSize
init|=
literal|1024
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|bufferSize
operator|+
literal|1
index|]
decl_stmt|;
name|long
name|remaining
init|=
name|size
decl_stmt|;
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
name|int
name|read
init|=
name|tarInput
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|remaining
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|>=
literal|0
condition|)
block|{
name|remaining
operator|-=
name|read
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|remaining
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Given a containerData include all the required container data/metadata    * in a tar file.    *    * @param container Container to archive (data + metadata).    * @param destination   Destination tar file/stream.    * @throws IOException    */
annotation|@
name|Override
DECL|method|pack (Container<KeyValueContainerData> container, OutputStream destination)
specifier|public
name|void
name|pack
parameter_list|(
name|Container
argument_list|<
name|KeyValueContainerData
argument_list|>
name|container
parameter_list|,
name|OutputStream
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyValueContainerData
name|containerData
init|=
name|container
operator|.
name|getContainerData
argument_list|()
decl_stmt|;
try|try
init|(
name|CompressorOutputStream
name|gzippedOut
init|=
operator|new
name|CompressorStreamFactory
argument_list|()
operator|.
name|createCompressorOutputStream
argument_list|(
name|CompressorStreamFactory
operator|.
name|GZIP
argument_list|,
name|destination
argument_list|)
init|)
block|{
try|try
init|(
name|ArchiveOutputStream
name|archiveOutputStream
init|=
operator|new
name|TarArchiveOutputStream
argument_list|(
name|gzippedOut
argument_list|)
init|)
block|{
name|includePath
argument_list|(
name|containerData
operator|.
name|getDbFile
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|DB_DIR_NAME
argument_list|,
name|archiveOutputStream
argument_list|)
expr_stmt|;
name|includePath
argument_list|(
name|containerData
operator|.
name|getChunksPath
argument_list|()
argument_list|,
name|CHUNKS_DIR_NAME
argument_list|,
name|archiveOutputStream
argument_list|)
expr_stmt|;
name|includeFile
argument_list|(
name|container
operator|.
name|getContainerFile
argument_list|()
argument_list|,
name|CONTAINER_FILE_NAME
argument_list|,
name|archiveOutputStream
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CompressorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't compress the container: "
operator|+
name|containerData
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|unpackContainerDescriptor (InputStream inputStream)
specifier|public
name|byte
index|[]
name|unpackContainerDescriptor
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|CompressorInputStream
name|compressorInputStream
init|=
operator|new
name|CompressorStreamFactory
argument_list|()
operator|.
name|createCompressorInputStream
argument_list|(
name|CompressorStreamFactory
operator|.
name|GZIP
argument_list|,
name|inputStream
argument_list|)
decl_stmt|;
name|TarArchiveInputStream
name|tarInput
init|=
operator|new
name|TarArchiveInputStream
argument_list|(
name|compressorInputStream
argument_list|)
decl_stmt|;
name|TarArchiveEntry
name|entry
init|=
name|tarInput
operator|.
name|getNextTarEntry
argument_list|()
decl_stmt|;
while|while
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|CONTAINER_FILE_NAME
argument_list|)
condition|)
block|{
return|return
name|readEntry
argument_list|(
name|tarInput
argument_list|,
name|entry
argument_list|)
return|;
block|}
name|entry
operator|=
name|tarInput
operator|.
name|getNextTarEntry
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CompressorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't read the container descriptor from the container archive"
argument_list|,
name|e
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Container descriptor is missing from the container archive."
argument_list|)
throw|;
block|}
DECL|method|readEntry (TarArchiveInputStream tarInput, TarArchiveEntry entry)
specifier|private
name|byte
index|[]
name|readEntry
parameter_list|(
name|TarArchiveInputStream
name|tarInput
parameter_list|,
name|TarArchiveEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|bufferSize
init|=
literal|1024
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|bufferSize
operator|+
literal|1
index|]
decl_stmt|;
name|long
name|remaining
init|=
name|entry
operator|.
name|getSize
argument_list|()
decl_stmt|;
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
name|int
name|read
init|=
name|tarInput
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|remaining
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
decl_stmt|;
name|remaining
operator|-=
name|read
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|includePath (String containerPath, String subdir, ArchiveOutputStream archiveOutputStream)
specifier|private
name|void
name|includePath
parameter_list|(
name|String
name|containerPath
parameter_list|,
name|String
name|subdir
parameter_list|,
name|ArchiveOutputStream
name|archiveOutputStream
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Path
name|path
range|:
name|Files
operator|.
name|list
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|containerPath
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
control|)
block|{
name|includeFile
argument_list|(
name|path
operator|.
name|toFile
argument_list|()
argument_list|,
name|subdir
operator|+
literal|"/"
operator|+
name|path
operator|.
name|getFileName
argument_list|()
argument_list|,
name|archiveOutputStream
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|includeFile (File file, String entryName, ArchiveOutputStream archiveOutputStream)
specifier|private
name|void
name|includeFile
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|entryName
parameter_list|,
name|ArchiveOutputStream
name|archiveOutputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|ArchiveEntry
name|archiveEntry
init|=
name|archiveOutputStream
operator|.
name|createArchiveEntry
argument_list|(
name|file
argument_list|,
name|entryName
argument_list|)
decl_stmt|;
name|archiveOutputStream
operator|.
name|putArchiveEntry
argument_list|(
name|archiveEntry
argument_list|)
expr_stmt|;
try|try
init|(
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|fis
argument_list|,
name|archiveOutputStream
argument_list|)
expr_stmt|;
block|}
name|archiveOutputStream
operator|.
name|closeArchiveEntry
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

