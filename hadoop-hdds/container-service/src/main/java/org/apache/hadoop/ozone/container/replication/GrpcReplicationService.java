begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.replication
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|CopyContainerRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|CopyContainerResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|IntraDatanodeProtocolServiceGrpc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|shaded
operator|.
name|io
operator|.
name|grpc
operator|.
name|stub
operator|.
name|StreamObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Service to make containers available for replication.  */
end_comment

begin_class
DECL|class|GrpcReplicationService
specifier|public
class|class
name|GrpcReplicationService
extends|extends
name|IntraDatanodeProtocolServiceGrpc
operator|.
name|IntraDatanodeProtocolServiceImplBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GrpcReplicationService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|containerReplicationSource
specifier|private
specifier|final
name|ContainerReplicationSource
name|containerReplicationSource
decl_stmt|;
DECL|method|GrpcReplicationService ( ContainerReplicationSource containerReplicationSource)
specifier|public
name|GrpcReplicationService
parameter_list|(
name|ContainerReplicationSource
name|containerReplicationSource
parameter_list|)
block|{
name|this
operator|.
name|containerReplicationSource
operator|=
name|containerReplicationSource
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|download (CopyContainerRequestProto request, StreamObserver<CopyContainerResponseProto> responseObserver)
specifier|public
name|void
name|download
parameter_list|(
name|CopyContainerRequestProto
name|request
parameter_list|,
name|StreamObserver
argument_list|<
name|CopyContainerResponseProto
argument_list|>
name|responseObserver
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Streaming container data ({}) to other datanode"
argument_list|,
name|request
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|GrpcOutputStream
name|outputStream
init|=
operator|new
name|GrpcOutputStream
argument_list|(
name|responseObserver
argument_list|,
name|request
operator|.
name|getContainerID
argument_list|()
argument_list|)
decl_stmt|;
name|containerReplicationSource
operator|.
name|copyData
argument_list|(
name|request
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't stream the container data"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseObserver
operator|.
name|onError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|GrpcOutputStream
specifier|private
specifier|static
class|class
name|GrpcOutputStream
extends|extends
name|OutputStream
implements|implements
name|Closeable
block|{
DECL|field|BUFFER_SIZE_IN_BYTES
specifier|private
specifier|static
specifier|final
name|int
name|BUFFER_SIZE_IN_BYTES
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|responseObserver
specifier|private
specifier|final
name|StreamObserver
argument_list|<
name|CopyContainerResponseProto
argument_list|>
name|responseObserver
decl_stmt|;
DECL|field|buffer
specifier|private
specifier|final
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|containerId
specifier|private
name|long
name|containerId
decl_stmt|;
DECL|field|readOffset
specifier|private
name|int
name|readOffset
init|=
literal|0
decl_stmt|;
DECL|field|writtenBytes
specifier|private
name|int
name|writtenBytes
decl_stmt|;
DECL|method|GrpcOutputStream ( StreamObserver<CopyContainerResponseProto> responseObserver, long containerId)
name|GrpcOutputStream
parameter_list|(
name|StreamObserver
argument_list|<
name|CopyContainerResponseProto
argument_list|>
name|responseObserver
parameter_list|,
name|long
name|containerId
parameter_list|)
block|{
name|this
operator|.
name|responseObserver
operator|=
name|responseObserver
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|buffer
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|size
argument_list|()
operator|>
name|BUFFER_SIZE_IN_BYTES
condition|)
block|{
name|flushBuffer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|responseObserver
operator|.
name|onError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|flushBuffer (boolean eof)
specifier|private
name|void
name|flushBuffer
parameter_list|(
name|boolean
name|eof
parameter_list|)
block|{
if|if
condition|(
name|buffer
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|CopyContainerResponseProto
name|response
init|=
name|CopyContainerResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerID
argument_list|(
name|containerId
argument_list|)
operator|.
name|setData
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|buffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setEof
argument_list|(
name|eof
argument_list|)
operator|.
name|setReadOffset
argument_list|(
name|readOffset
argument_list|)
operator|.
name|setLen
argument_list|(
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|responseObserver
operator|.
name|onNext
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|readOffset
operator|+=
name|buffer
operator|.
name|size
argument_list|()
expr_stmt|;
name|writtenBytes
operator|+=
name|buffer
operator|.
name|size
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|flushBuffer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} bytes written to the rpc stream from container {}"
argument_list|,
name|writtenBytes
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|responseObserver
operator|.
name|onCompleted
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

