begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ChunkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ChunkManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|CONTAINER_INTERNAL_ERROR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|UNSUPPORTED_REQUEST
import|;
end_import

begin_comment
comment|/**  * An implementation of ChunkManager that is used by default in ozone.  */
end_comment

begin_class
DECL|class|ChunkManagerImpl
specifier|public
class|class
name|ChunkManagerImpl
implements|implements
name|ChunkManager
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChunkManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|containerManager
specifier|private
specifier|final
name|ContainerManager
name|containerManager
decl_stmt|;
comment|/**    * Constructs a ChunkManager.    *    * @param manager - ContainerManager.    */
DECL|method|ChunkManagerImpl (ContainerManager manager)
specifier|public
name|ChunkManagerImpl
parameter_list|(
name|ContainerManager
name|manager
parameter_list|)
block|{
name|this
operator|.
name|containerManager
operator|=
name|manager
expr_stmt|;
block|}
comment|/**    * writes a given chunk.    *    * @param blockID - ID of the block.    * @param info - ChunkInfo.    * @throws StorageContainerException    */
annotation|@
name|Override
DECL|method|writeChunk (BlockID blockID, ChunkInfo info, byte[] data, ContainerProtos.Stage stage)
specifier|public
name|void
name|writeChunk
parameter_list|(
name|BlockID
name|blockID
parameter_list|,
name|ChunkInfo
name|info
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|ContainerProtos
operator|.
name|Stage
name|stage
parameter_list|)
throws|throws
name|StorageContainerException
block|{
comment|// we don't want container manager to go away while we are writing chunks.
name|containerManager
operator|.
name|readLock
argument_list|()
expr_stmt|;
comment|// TODO : Take keyManager Write lock here.
try|try
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|blockID
argument_list|,
literal|"Block ID cannot be null."
argument_list|)
expr_stmt|;
name|long
name|containerID
init|=
name|blockID
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|containerID
operator|>=
literal|0
argument_list|,
literal|"Container ID cannot be negative"
argument_list|)
expr_stmt|;
name|ContainerData
name|container
init|=
name|containerManager
operator|.
name|readContainer
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
name|File
name|chunkFile
init|=
name|ChunkUtils
operator|.
name|validateChunk
argument_list|(
name|container
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|File
name|tmpChunkFile
init|=
name|getTmpChunkFile
argument_list|(
name|chunkFile
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"writing chunk:{} chunk stage:{} chunk file:{} tmp chunk file"
argument_list|,
name|info
operator|.
name|getChunkName
argument_list|()
argument_list|,
name|stage
argument_list|,
name|chunkFile
argument_list|,
name|tmpChunkFile
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|stage
condition|)
block|{
case|case
name|WRITE_DATA
case|:
name|ChunkUtils
operator|.
name|writeData
argument_list|(
name|tmpChunkFile
argument_list|,
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|COMMIT_DATA
case|:
name|commitChunk
argument_list|(
name|tmpChunkFile
argument_list|,
name|chunkFile
argument_list|,
name|containerID
argument_list|,
name|info
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|COMBINED
case|:
comment|// directly write to the chunk file
name|long
name|oldSize
init|=
name|chunkFile
operator|.
name|length
argument_list|()
decl_stmt|;
name|ChunkUtils
operator|.
name|writeData
argument_list|(
name|chunkFile
argument_list|,
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|long
name|newSize
init|=
name|chunkFile
operator|.
name|length
argument_list|()
decl_stmt|;
name|containerManager
operator|.
name|incrBytesUsed
argument_list|(
name|containerID
argument_list|,
name|newSize
operator|-
name|oldSize
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|incrWriteCount
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|incrWriteBytes
argument_list|(
name|containerID
argument_list|,
name|info
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not identify write operation."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
decl||
name|NoSuchAlgorithmException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"write data failed. error: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Internal error: "
argument_list|,
name|e
argument_list|,
name|CONTAINER_INTERNAL_ERROR
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"write data failed. error: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Internal error: "
argument_list|,
name|e
argument_list|,
name|CONTAINER_INTERNAL_ERROR
argument_list|)
throw|;
block|}
finally|finally
block|{
name|containerManager
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Create a temporary file in the same container directory
comment|// in the format "<chunkname>.tmp"
DECL|method|getTmpChunkFile (File chunkFile, ChunkInfo info)
specifier|private
specifier|static
name|File
name|getTmpChunkFile
parameter_list|(
name|File
name|chunkFile
parameter_list|,
name|ChunkInfo
name|info
parameter_list|)
throws|throws
name|StorageContainerException
block|{
return|return
operator|new
name|File
argument_list|(
name|chunkFile
operator|.
name|getParent
argument_list|()
argument_list|,
name|chunkFile
operator|.
name|getName
argument_list|()
operator|+
name|OzoneConsts
operator|.
name|CONTAINER_CHUNK_NAME_DELIMITER
operator|+
name|OzoneConsts
operator|.
name|CONTAINER_TEMPORARY_CHUNK_PREFIX
argument_list|)
return|;
block|}
comment|// Commit the chunk by renaming the temporary chunk file to chunk file
DECL|method|commitChunk (File tmpChunkFile, File chunkFile, long containerID, long chunkLen)
specifier|private
name|void
name|commitChunk
parameter_list|(
name|File
name|tmpChunkFile
parameter_list|,
name|File
name|chunkFile
parameter_list|,
name|long
name|containerID
parameter_list|,
name|long
name|chunkLen
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|sizeDiff
init|=
name|tmpChunkFile
operator|.
name|length
argument_list|()
operator|-
name|chunkFile
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// It is safe to replace here as the earlier chunk if existing should be
comment|// caught as part of validateChunk
name|Files
operator|.
name|move
argument_list|(
name|tmpChunkFile
operator|.
name|toPath
argument_list|()
argument_list|,
name|chunkFile
operator|.
name|toPath
argument_list|()
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|incrBytesUsed
argument_list|(
name|containerID
argument_list|,
name|sizeDiff
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|incrWriteCount
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|incrWriteBytes
argument_list|(
name|containerID
argument_list|,
name|chunkLen
argument_list|)
expr_stmt|;
block|}
comment|/**    * reads the data defined by a chunk.    *    * @param blockID - ID of the block.    * @param info - ChunkInfo.    * @return byte array    * @throws StorageContainerException    * TODO: Right now we do not support partial reads and writes of chunks.    * TODO: Explore if we need to do that for ozone.    */
annotation|@
name|Override
DECL|method|readChunk (BlockID blockID, ChunkInfo info)
specifier|public
name|byte
index|[]
name|readChunk
parameter_list|(
name|BlockID
name|blockID
parameter_list|,
name|ChunkInfo
name|info
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|containerManager
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|blockID
argument_list|,
literal|"Block ID cannot be null."
argument_list|)
expr_stmt|;
name|long
name|containerID
init|=
name|blockID
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|containerID
operator|>=
literal|0
argument_list|,
literal|"Container ID cannot be negative"
argument_list|)
expr_stmt|;
name|ContainerData
name|container
init|=
name|containerManager
operator|.
name|readContainer
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
name|File
name|chunkFile
init|=
name|ChunkUtils
operator|.
name|getChunkFile
argument_list|(
name|container
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|ByteBuffer
name|data
init|=
name|ChunkUtils
operator|.
name|readData
argument_list|(
name|chunkFile
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|incrReadCount
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|incrReadBytes
argument_list|(
name|containerID
argument_list|,
name|chunkFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|data
operator|.
name|array
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
decl||
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"read data failed. error: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Internal error: "
argument_list|,
name|e
argument_list|,
name|CONTAINER_INTERNAL_ERROR
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"read data failed. error: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Internal error: "
argument_list|,
name|e
argument_list|,
name|CONTAINER_INTERNAL_ERROR
argument_list|)
throw|;
block|}
finally|finally
block|{
name|containerManager
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Deletes a given chunk.    *    * @param blockID - ID of the block.    * @param info - Chunk Info    * @throws StorageContainerException    */
annotation|@
name|Override
DECL|method|deleteChunk (BlockID blockID, ChunkInfo info)
specifier|public
name|void
name|deleteChunk
parameter_list|(
name|BlockID
name|blockID
parameter_list|,
name|ChunkInfo
name|info
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|containerManager
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|blockID
argument_list|,
literal|"Block ID cannot be null."
argument_list|)
expr_stmt|;
name|long
name|containerID
init|=
name|blockID
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|containerID
operator|>=
literal|0
argument_list|,
literal|"Container ID cannot be negative"
argument_list|)
expr_stmt|;
name|File
name|chunkFile
init|=
name|ChunkUtils
operator|.
name|getChunkFile
argument_list|(
name|containerManager
operator|.
name|readContainer
argument_list|(
name|containerID
argument_list|)
argument_list|,
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|info
operator|.
name|getOffset
argument_list|()
operator|==
literal|0
operator|)
operator|&&
operator|(
name|info
operator|.
name|getLen
argument_list|()
operator|==
name|chunkFile
operator|.
name|length
argument_list|()
operator|)
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|chunkFile
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|decrBytesUsed
argument_list|(
name|containerID
argument_list|,
name|chunkFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Not Supported Operation. Trying to delete a "
operator|+
literal|"chunk that is in shared file. chunk info : "
operator|+
name|info
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageContainerException
argument_list|(
literal|"Not Supported Operation. "
operator|+
literal|"Trying to delete a chunk that is in shared file. chunk info : "
operator|+
name|info
operator|.
name|toString
argument_list|()
argument_list|,
name|UNSUPPORTED_REQUEST
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|containerManager
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Shutdown the chunkManager.    *    * In the chunkManager we haven't acquired any resources, so nothing to do    * here. This call is made with containerManager Writelock held.    */
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|this
operator|.
name|containerManager
operator|.
name|hasWriteLock
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

