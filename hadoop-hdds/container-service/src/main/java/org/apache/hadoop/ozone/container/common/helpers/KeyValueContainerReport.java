begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|max
import|;
end_import

begin_comment
comment|/**  * KeyValueContainer Report iterates the closed containers and sends a  * container report to SCM.  */
end_comment

begin_class
DECL|class|KeyValueContainerReport
specifier|public
class|class
name|KeyValueContainerReport
extends|extends
name|ContainerReport
block|{
DECL|field|deleteTransactionId
specifier|private
name|long
name|deleteTransactionId
decl_stmt|;
comment|/**    * Constructs the KeyValueContainerReport.    *    * @param containerID - Container ID.    * @param finalhash - Final Hash.    */
DECL|method|KeyValueContainerReport (long containerID, String finalhash)
specifier|public
name|KeyValueContainerReport
parameter_list|(
name|long
name|containerID
parameter_list|,
name|String
name|finalhash
parameter_list|)
block|{
name|super
argument_list|(
name|containerID
argument_list|,
name|finalhash
argument_list|)
expr_stmt|;
name|this
operator|.
name|deleteTransactionId
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Sets the deleteTransactionId if it is greater than existing.    * @param transactionId - deleteTransactionId    */
DECL|method|updateDeleteTransactionId (long transactionId)
specifier|public
name|void
name|updateDeleteTransactionId
parameter_list|(
name|long
name|transactionId
parameter_list|)
block|{
name|this
operator|.
name|deleteTransactionId
operator|=
name|max
argument_list|(
name|transactionId
argument_list|,
name|deleteTransactionId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets the deleteTransactionId.    * @return - deleteTransactionId.    */
DECL|method|getDeleteTransactionId ()
specifier|public
name|long
name|getDeleteTransactionId
parameter_list|()
block|{
return|return
name|this
operator|.
name|deleteTransactionId
return|;
block|}
comment|/**    * Gets a containerReport from protobuf class.    *    * @param info - ContainerInfo.    * @return - ContainerReport.    */
DECL|method|getFromProtoBuf (ContainerInfo info)
specifier|public
specifier|static
name|KeyValueContainerReport
name|getFromProtoBuf
parameter_list|(
name|ContainerInfo
name|info
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|KeyValueContainerReport
name|report
init|=
operator|new
name|KeyValueContainerReport
argument_list|(
name|info
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|info
operator|.
name|getFinalhash
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|hasSize
argument_list|()
condition|)
block|{
name|report
operator|.
name|setSize
argument_list|(
name|info
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|hasKeyCount
argument_list|()
condition|)
block|{
name|report
operator|.
name|setKeyCount
argument_list|(
name|info
operator|.
name|getKeyCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|hasUsed
argument_list|()
condition|)
block|{
name|report
operator|.
name|setBytesUsed
argument_list|(
name|info
operator|.
name|getUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|hasReadCount
argument_list|()
condition|)
block|{
name|report
operator|.
name|setReadCount
argument_list|(
name|info
operator|.
name|getReadCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|hasReadBytes
argument_list|()
condition|)
block|{
name|report
operator|.
name|setReadBytes
argument_list|(
name|info
operator|.
name|getReadBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|hasWriteCount
argument_list|()
condition|)
block|{
name|report
operator|.
name|setWriteCount
argument_list|(
name|info
operator|.
name|getWriteCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|hasWriteBytes
argument_list|()
condition|)
block|{
name|report
operator|.
name|setWriteBytes
argument_list|(
name|info
operator|.
name|getWriteBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|hasDeleteTransactionId
argument_list|()
condition|)
block|{
name|report
operator|.
name|updateDeleteTransactionId
argument_list|(
name|info
operator|.
name|getDeleteTransactionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|report
operator|.
name|setContainerID
argument_list|(
name|info
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
comment|/**    * Gets a containerInfo protobuf message from ContainerReports.    *    * @return ContainerInfo    */
annotation|@
name|Override
DECL|method|getProtoBufMessage ()
specifier|public
name|ContainerInfo
name|getProtoBufMessage
parameter_list|()
block|{
return|return
name|ContainerInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKeyCount
argument_list|(
name|this
operator|.
name|getKeyCount
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
name|this
operator|.
name|getSize
argument_list|()
argument_list|)
operator|.
name|setUsed
argument_list|(
name|this
operator|.
name|getBytesUsed
argument_list|()
argument_list|)
operator|.
name|setReadCount
argument_list|(
name|this
operator|.
name|getReadCount
argument_list|()
argument_list|)
operator|.
name|setReadBytes
argument_list|(
name|this
operator|.
name|getReadBytes
argument_list|()
argument_list|)
operator|.
name|setWriteCount
argument_list|(
name|this
operator|.
name|getWriteCount
argument_list|()
argument_list|)
operator|.
name|setWriteBytes
argument_list|(
name|this
operator|.
name|getWriteBytes
argument_list|()
argument_list|)
operator|.
name|setFinalhash
argument_list|(
name|this
operator|.
name|getFinalhash
argument_list|()
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|this
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|setDeleteTransactionId
argument_list|(
name|this
operator|.
name|getDeleteTransactionId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

