begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|NodeReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|PipelineReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMDatanodeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMDatanodeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMRegisterRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMRegisteredResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|OzoneProtocolMessageDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|StorageContainerDatanodeProtocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class is the server-side translator that forwards requests received on  * {@link StorageContainerDatanodeProtocolPB} to the {@link  * StorageContainerDatanodeProtocol} server implementation.  */
end_comment

begin_class
DECL|class|StorageContainerDatanodeProtocolServerSideTranslatorPB
specifier|public
class|class
name|StorageContainerDatanodeProtocolServerSideTranslatorPB
implements|implements
name|StorageContainerDatanodeProtocolPB
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StorageContainerDatanodeProtocolServerSideTranslatorPB
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|impl
specifier|private
specifier|final
name|StorageContainerDatanodeProtocol
name|impl
decl_stmt|;
specifier|private
specifier|final
name|OzoneProtocolMessageDispatcher
argument_list|<
name|SCMDatanodeRequest
argument_list|,
DECL|field|dispatcher
name|SCMDatanodeResponse
argument_list|>
name|dispatcher
decl_stmt|;
DECL|method|StorageContainerDatanodeProtocolServerSideTranslatorPB ( StorageContainerDatanodeProtocol impl, ProtocolMessageMetrics protocolMessageMetrics)
specifier|public
name|StorageContainerDatanodeProtocolServerSideTranslatorPB
parameter_list|(
name|StorageContainerDatanodeProtocol
name|impl
parameter_list|,
name|ProtocolMessageMetrics
name|protocolMessageMetrics
parameter_list|)
block|{
name|this
operator|.
name|impl
operator|=
name|impl
expr_stmt|;
name|dispatcher
operator|=
operator|new
name|OzoneProtocolMessageDispatcher
argument_list|<>
argument_list|(
literal|"SCMDatanodeProtocol"
argument_list|,
name|protocolMessageMetrics
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
DECL|method|register ( SCMRegisterRequestProto request)
specifier|public
name|SCMRegisteredResponseProto
name|register
parameter_list|(
name|SCMRegisterRequestProto
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerReportsProto
name|containerRequestProto
init|=
name|request
operator|.
name|getContainerReport
argument_list|()
decl_stmt|;
name|NodeReportProto
name|dnNodeReport
init|=
name|request
operator|.
name|getNodeReport
argument_list|()
decl_stmt|;
name|PipelineReportsProto
name|pipelineReport
init|=
name|request
operator|.
name|getPipelineReports
argument_list|()
decl_stmt|;
return|return
name|impl
operator|.
name|register
argument_list|(
name|request
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|,
name|dnNodeReport
argument_list|,
name|containerRequestProto
argument_list|,
name|pipelineReport
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|submitRequest (RpcController controller, SCMDatanodeRequest request)
specifier|public
name|SCMDatanodeResponse
name|submitRequest
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SCMDatanodeRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|dispatcher
operator|.
name|processRequest
argument_list|(
name|request
argument_list|,
name|this
operator|::
name|processMessage
argument_list|,
name|request
operator|.
name|getCmdType
argument_list|()
argument_list|,
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
return|;
block|}
DECL|method|processMessage (SCMDatanodeRequest request)
specifier|public
name|SCMDatanodeResponse
name|processMessage
parameter_list|(
name|SCMDatanodeRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|Type
name|cmdType
init|=
name|request
operator|.
name|getCmdType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|cmdType
condition|)
block|{
case|case
name|GetVersion
case|:
return|return
name|SCMDatanodeResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|cmdType
argument_list|)
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|setGetVersionResponse
argument_list|(
name|impl
operator|.
name|getVersion
argument_list|(
name|request
operator|.
name|getGetVersionRequest
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
case|case
name|SendHeartbeat
case|:
return|return
name|SCMDatanodeResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|cmdType
argument_list|)
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|setSendHeartbeatResponse
argument_list|(
name|impl
operator|.
name|sendHeartbeat
argument_list|(
name|request
operator|.
name|getSendHeartbeatRequest
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
case|case
name|Register
case|:
return|return
name|SCMDatanodeResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|cmdType
argument_list|)
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|setRegisterResponse
argument_list|(
name|register
argument_list|(
name|request
operator|.
name|getRegisterRequest
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Unknown command type: "
operator|+
name|cmdType
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

