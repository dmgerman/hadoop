begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|DatanodeStateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ServicePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|HDDS_DATANODE_PLUGINS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
operator|.
name|terminate
import|;
end_import

begin_comment
comment|/**  * Datanode service plugin to start the HDDS container services.  */
end_comment

begin_class
DECL|class|HddsDatanodeService
specifier|public
class|class
name|HddsDatanodeService
implements|implements
name|ServicePlugin
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HddsDatanodeService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|datanodeDetails
specifier|private
name|DatanodeDetails
name|datanodeDetails
decl_stmt|;
DECL|field|datanodeStateMachine
specifier|private
name|DatanodeStateMachine
name|datanodeStateMachine
decl_stmt|;
DECL|field|plugins
specifier|private
name|List
argument_list|<
name|ServicePlugin
argument_list|>
name|plugins
decl_stmt|;
comment|/**    * Default constructor.    */
DECL|method|HddsDatanodeService ()
specifier|public
name|HddsDatanodeService
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs {@link HddsDatanodeService} using the provided {@code conf}    * value.    *    * @param conf OzoneConfiguration    */
DECL|method|HddsDatanodeService (Configuration conf)
specifier|public
name|HddsDatanodeService
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Starts HddsDatanode services.    *    * @param service The service instance invoking this method    */
annotation|@
name|Override
DECL|method|start (Object service)
specifier|public
name|void
name|start
parameter_list|(
name|Object
name|service
parameter_list|)
block|{
name|OzoneConfiguration
operator|.
name|activate
argument_list|()
expr_stmt|;
if|if
condition|(
name|service
operator|instanceof
name|Configurable
condition|)
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|(
operator|(
operator|(
name|Configurable
operator|)
name|service
operator|)
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|HddsUtils
operator|.
name|isHddsEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|hostname
init|=
name|HddsUtils
operator|.
name|getHostName
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|ip
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|hostname
argument_list|)
operator|.
name|getHostAddress
argument_list|()
decl_stmt|;
name|datanodeDetails
operator|=
name|initializeDatanodeDetails
argument_list|()
expr_stmt|;
name|datanodeDetails
operator|.
name|setHostName
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
name|datanodeDetails
operator|.
name|setIpAddress
argument_list|(
name|ip
argument_list|)
expr_stmt|;
name|datanodeStateMachine
operator|=
operator|new
name|DatanodeStateMachine
argument_list|(
name|datanodeDetails
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|startPlugins
argument_list|()
expr_stmt|;
comment|// Starting HDDS Daemons
name|datanodeStateMachine
operator|.
name|startDaemon
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't start the HDDS datanode plugin"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Returns DatanodeDetails or null in case of Error.    *    * @return DatanodeDetails    */
DECL|method|initializeDatanodeDetails ()
specifier|private
name|DatanodeDetails
name|initializeDatanodeDetails
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|idFilePath
init|=
name|HddsUtils
operator|.
name|getDatanodeIdFilePath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|idFilePath
operator|==
literal|null
operator|||
name|idFilePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"A valid file path is needed for config setting {}"
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ID
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ID
operator|+
literal|" must be defined. See"
operator|+
literal|" https://wiki.apache.org/hadoop/Ozone#Configuration"
operator|+
literal|" for details on configuring Ozone."
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|idFilePath
argument_list|)
expr_stmt|;
name|File
name|idFile
init|=
operator|new
name|File
argument_list|(
name|idFilePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|idFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|ContainerUtils
operator|.
name|readDatanodeDetailsFrom
argument_list|(
name|idFile
argument_list|)
return|;
block|}
else|else
block|{
comment|// There is no datanode.id file, this might be the first time datanode
comment|// is started.
name|String
name|datanodeUuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|DatanodeDetails
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUuid
argument_list|(
name|datanodeUuid
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**    * Starts all the service plugins which are configured using    * OzoneConfigKeys.HDDS_DATANODE_PLUGINS_KEY.    */
DECL|method|startPlugins ()
specifier|private
name|void
name|startPlugins
parameter_list|()
block|{
try|try
block|{
name|plugins
operator|=
name|conf
operator|.
name|getInstances
argument_list|(
name|HDDS_DATANODE_PLUGINS_KEY
argument_list|,
name|ServicePlugin
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|String
name|pluginsValue
init|=
name|conf
operator|.
name|get
argument_list|(
name|HDDS_DATANODE_PLUGINS_KEY
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to load HDDS DataNode plugins. "
operator|+
literal|"Specified list of plugins: {}"
argument_list|,
name|pluginsValue
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
for|for
control|(
name|ServicePlugin
name|plugin
range|:
name|plugins
control|)
block|{
try|try
block|{
name|plugin
operator|.
name|start
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started plug-in {}"
argument_list|,
name|plugin
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ServicePlugin {} could not be started"
argument_list|,
name|plugin
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns the OzoneConfiguration used by this HddsDatanodeService.    *    * @return OzoneConfiguration    */
DECL|method|getConf ()
specifier|public
name|OzoneConfiguration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|/**    *    * Return DatanodeDetails if set, return null otherwise.    *    * @return DatanodeDetails    */
annotation|@
name|VisibleForTesting
DECL|method|getDatanodeDetails ()
specifier|public
name|DatanodeDetails
name|getDatanodeDetails
parameter_list|()
block|{
return|return
name|datanodeDetails
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDatanodeStateMachine ()
specifier|public
name|DatanodeStateMachine
name|getDatanodeStateMachine
parameter_list|()
block|{
return|return
name|datanodeStateMachine
return|;
block|}
DECL|method|join ()
specifier|public
name|void
name|join
parameter_list|()
block|{
try|try
block|{
name|datanodeStateMachine
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted during StorageContainerManager join."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|plugins
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServicePlugin
name|plugin
range|:
name|plugins
control|)
block|{
try|try
block|{
name|plugin
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopped plug-in {}"
argument_list|,
name|plugin
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ServicePlugin {} could not be stopped"
argument_list|,
name|plugin
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|datanodeStateMachine
operator|!=
literal|null
condition|)
block|{
name|datanodeStateMachine
operator|.
name|stopDaemon
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|plugins
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServicePlugin
name|plugin
range|:
name|plugins
control|)
block|{
try|try
block|{
name|plugin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ServicePlugin {} could not be closed"
argument_list|,
name|plugin
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|createHddsDatanodeService ( Configuration conf)
specifier|public
specifier|static
name|HddsDatanodeService
name|createHddsDatanodeService
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|HddsDatanodeService
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|main (String args[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
try|try
block|{
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|HddsDatanodeService
operator|.
name|class
argument_list|,
name|args
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|HddsDatanodeService
name|hddsDatanodeService
init|=
name|createHddsDatanodeService
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|hddsDatanodeService
operator|.
name|start
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hddsDatanodeService
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in HddsDatanodeService."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
literal|1
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

