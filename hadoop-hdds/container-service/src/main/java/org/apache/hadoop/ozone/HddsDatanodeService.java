begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|cli
operator|.
name|GenericCli
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|cli
operator|.
name|HddsVersionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|discovery
operator|.
name|DiscoveryUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|SCMSecurityProtocolProtos
operator|.
name|SCMGetCertResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocolPB
operator|.
name|SCMSecurityProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|HddsServerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|SecurityConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|client
operator|.
name|CertificateClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|client
operator|.
name|DNCertificateClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificates
operator|.
name|utils
operator|.
name|CertificateSignRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|tracing
operator|.
name|TracingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|DatanodeStateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ServicePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|pkcs
operator|.
name|PKCS10CertificationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|utils
operator|.
name|CertificateCodec
operator|.
name|getX509Certificate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificates
operator|.
name|utils
operator|.
name|CertificateSignRequest
operator|.
name|getEncodedString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|HDDS_DATANODE_PLUGINS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
operator|.
name|terminate
import|;
end_import

begin_comment
comment|/**  * Datanode service plugin to start the HDDS container services.  */
end_comment

begin_class
annotation|@
name|Command
argument_list|(
name|name
operator|=
literal|"ozone datanode"
argument_list|,
name|hidden
operator|=
literal|true
argument_list|,
name|description
operator|=
literal|"Start the datanode for ozone"
argument_list|,
name|versionProvider
operator|=
name|HddsVersionProvider
operator|.
name|class
argument_list|,
name|mixinStandardHelpOptions
operator|=
literal|true
argument_list|)
DECL|class|HddsDatanodeService
specifier|public
class|class
name|HddsDatanodeService
extends|extends
name|GenericCli
implements|implements
name|ServicePlugin
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HddsDatanodeService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|datanodeDetails
specifier|private
name|DatanodeDetails
name|datanodeDetails
decl_stmt|;
DECL|field|datanodeStateMachine
specifier|private
name|DatanodeStateMachine
name|datanodeStateMachine
decl_stmt|;
DECL|field|plugins
specifier|private
name|List
argument_list|<
name|ServicePlugin
argument_list|>
name|plugins
decl_stmt|;
DECL|field|dnCertClient
specifier|private
name|CertificateClient
name|dnCertClient
decl_stmt|;
DECL|field|component
specifier|private
name|String
name|component
decl_stmt|;
DECL|field|httpServer
specifier|private
name|HddsDatanodeHttpServer
name|httpServer
decl_stmt|;
DECL|field|printBanner
specifier|private
name|boolean
name|printBanner
decl_stmt|;
DECL|field|args
specifier|private
name|String
index|[]
name|args
decl_stmt|;
DECL|field|isStopped
specifier|private
specifier|volatile
name|AtomicBoolean
name|isStopped
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|HddsDatanodeService (boolean printBanner, String[] args)
specifier|public
name|HddsDatanodeService
parameter_list|(
name|boolean
name|printBanner
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
name|this
operator|.
name|printBanner
operator|=
name|printBanner
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
operator|!=
literal|null
condition|?
name|Arrays
operator|.
name|copyOf
argument_list|(
name|args
argument_list|,
name|args
operator|.
name|length
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
comment|/**    * Create an Datanode instance based on the supplied command-line arguments.    *<p>    * This method is intended for unit tests only. It suppresses the    * startup/shutdown message and skips registering Unix signal handlers.    *    * @param args      command line arguments.    * @return Datanode instance    */
annotation|@
name|VisibleForTesting
DECL|method|createHddsDatanodeService ( String[] args)
specifier|public
specifier|static
name|HddsDatanodeService
name|createHddsDatanodeService
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
return|return
name|createHddsDatanodeService
argument_list|(
name|args
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Create an Datanode instance based on the supplied command-line arguments.    *    * @param args        command line arguments.    * @param printBanner if true, then log a verbose startup message.    * @return Datanode instance    */
DECL|method|createHddsDatanodeService ( String[] args, boolean printBanner)
specifier|private
specifier|static
name|HddsDatanodeService
name|createHddsDatanodeService
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|boolean
name|printBanner
parameter_list|)
block|{
return|return
operator|new
name|HddsDatanodeService
argument_list|(
name|printBanner
argument_list|,
name|args
argument_list|)
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|HddsDatanodeService
name|hddsDatanodeService
init|=
name|createHddsDatanodeService
argument_list|(
name|args
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|hddsDatanodeService
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in HddsDatanodeService."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
literal|1
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getLogger ()
specifier|public
specifier|static
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|printBanner
condition|)
block|{
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|HddsDatanodeService
operator|.
name|class
argument_list|,
name|args
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
name|OzoneConfiguration
name|ozoneConfiguration
init|=
name|createOzoneConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|DiscoveryUtil
operator|.
name|loadGlobalConfig
argument_list|(
name|ozoneConfiguration
argument_list|)
condition|)
block|{
comment|//reload the configuration with the downloaded new configs.
name|ozoneConfiguration
operator|=
name|createOzoneConfiguration
argument_list|()
expr_stmt|;
block|}
name|start
argument_list|(
name|ozoneConfiguration
argument_list|)
expr_stmt|;
name|join
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|setConfiguration (OzoneConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|OzoneConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|configuration
expr_stmt|;
block|}
comment|/**    * Starts HddsDatanode services.    *    * @param service The service instance invoking this method    */
annotation|@
name|Override
DECL|method|start (Object service)
specifier|public
name|void
name|start
parameter_list|(
name|Object
name|service
parameter_list|)
block|{
if|if
condition|(
name|service
operator|instanceof
name|Configurable
condition|)
block|{
name|start
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|(
operator|(
operator|(
name|Configurable
operator|)
name|service
operator|)
operator|.
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|start
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|start (OzoneConfiguration configuration)
specifier|public
name|void
name|start
parameter_list|(
name|OzoneConfiguration
name|configuration
parameter_list|)
block|{
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|OzoneConfiguration
operator|.
name|activate
argument_list|()
expr_stmt|;
name|HddsUtils
operator|.
name|initializeMetrics
argument_list|(
name|conf
argument_list|,
literal|"HddsDatanode"
argument_list|)
expr_stmt|;
if|if
condition|(
name|HddsUtils
operator|.
name|isHddsEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|hostname
init|=
name|HddsUtils
operator|.
name|getHostName
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|ip
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|hostname
argument_list|)
operator|.
name|getHostAddress
argument_list|()
decl_stmt|;
name|datanodeDetails
operator|=
name|initializeDatanodeDetails
argument_list|()
expr_stmt|;
name|datanodeDetails
operator|.
name|setHostName
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
name|datanodeDetails
operator|.
name|setIpAddress
argument_list|(
name|ip
argument_list|)
expr_stmt|;
name|TracingUtil
operator|.
name|initTracing
argument_list|(
literal|"HddsDatanodeService."
operator|+
name|datanodeDetails
operator|.
name|getUuidString
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"HddsDatanodeService host:{} ip:{}"
argument_list|,
name|hostname
argument_list|,
name|ip
argument_list|)
expr_stmt|;
comment|// Authenticate Hdds Datanode service if security is enabled
if|if
condition|(
name|OzoneSecurityUtil
operator|.
name|isSecurityEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|component
operator|=
literal|"dn-"
operator|+
name|datanodeDetails
operator|.
name|getUuidString
argument_list|()
expr_stmt|;
name|dnCertClient
operator|=
operator|new
name|DNCertificateClient
argument_list|(
operator|new
name|SecurityConfig
argument_list|(
name|conf
argument_list|)
argument_list|,
name|datanodeDetails
operator|.
name|getCertSerialId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|SecurityUtil
operator|.
name|getAuthenticationMethod
argument_list|(
name|conf
argument_list|)
operator|.
name|equals
argument_list|(
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ozone security is enabled. Attempting login for Hdds "
operator|+
literal|"Datanode user. Principal: {},keytab: {}"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_KERBEROS_PRINCIPAL_KEY
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_KEYTAB_FILE_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|login
argument_list|(
name|conf
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_KEYTAB_FILE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|SecurityUtil
operator|.
name|getAuthenticationMethod
argument_list|(
name|conf
argument_list|)
operator|+
literal|" authentication method not "
operator|+
literal|"supported. Datanode user"
operator|+
literal|" login "
operator|+
literal|"failed."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Hdds Datanode login successful."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|OzoneSecurityUtil
operator|.
name|isSecurityEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|initializeCertificateClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|datanodeStateMachine
operator|=
operator|new
name|DatanodeStateMachine
argument_list|(
name|datanodeDetails
argument_list|,
name|conf
argument_list|,
name|dnCertClient
argument_list|,
name|this
operator|::
name|terminateDatanode
argument_list|)
expr_stmt|;
try|try
block|{
name|httpServer
operator|=
operator|new
name|HddsDatanodeHttpServer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"HttpServer failed to start."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|startPlugins
argument_list|()
expr_stmt|;
comment|// Starting HDDS Daemons
name|datanodeStateMachine
operator|.
name|startDaemon
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't start the HDDS datanode plugin"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Fail to authentication when starting"
operator|+
literal|" HDDS datanode plugin"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Initializes secure Datanode.    * */
annotation|@
name|VisibleForTesting
DECL|method|initializeCertificateClient (OzoneConfiguration config)
specifier|public
name|void
name|initializeCertificateClient
parameter_list|(
name|OzoneConfiguration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing secure Datanode."
argument_list|)
expr_stmt|;
name|CertificateClient
operator|.
name|InitResponse
name|response
init|=
name|dnCertClient
operator|.
name|init
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Init response: {}"
argument_list|,
name|response
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|response
condition|)
block|{
case|case
name|SUCCESS
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialization successful, case:{}."
argument_list|,
name|response
argument_list|)
expr_stmt|;
break|break;
case|case
name|GETCERT
case|:
name|getSCMSignedCert
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully stored SCM signed certificate, case:{}."
argument_list|,
name|response
argument_list|)
expr_stmt|;
break|break;
case|case
name|FAILURE
case|:
name|LOG
operator|.
name|error
argument_list|(
literal|"DN security initialization failed, case:{}."
argument_list|,
name|response
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"DN security initialization failed."
argument_list|)
throw|;
case|case
name|RECOVER
case|:
name|LOG
operator|.
name|error
argument_list|(
literal|"DN security initialization failed, case:{}. OM certificate "
operator|+
literal|"is missing."
argument_list|,
name|response
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"DN security initialization failed."
argument_list|)
throw|;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"DN security initialization failed. Init response: {}"
argument_list|,
name|response
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"DN security initialization failed."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get SCM signed certificate and store it using certificate client.    * @param config    * */
DECL|method|getSCMSignedCert (OzoneConfiguration config)
specifier|private
name|void
name|getSCMSignedCert
parameter_list|(
name|OzoneConfiguration
name|config
parameter_list|)
block|{
try|try
block|{
name|PKCS10CertificationRequest
name|csr
init|=
name|getCSR
argument_list|(
name|config
argument_list|)
decl_stmt|;
comment|// TODO: For SCM CA we should fetch certificate from multiple SCMs.
name|SCMSecurityProtocolClientSideTranslatorPB
name|secureScmClient
init|=
name|HddsUtils
operator|.
name|getScmSecurityClient
argument_list|(
name|config
argument_list|,
name|HddsUtils
operator|.
name|getScmAddressForSecurityProtocol
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|SCMGetCertResponseProto
name|response
init|=
name|secureScmClient
operator|.
name|getDataNodeCertificateChain
argument_list|(
name|datanodeDetails
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|,
name|getEncodedString
argument_list|(
name|csr
argument_list|)
argument_list|)
decl_stmt|;
comment|// Persist certificates.
if|if
condition|(
name|response
operator|.
name|hasX509CACertificate
argument_list|()
condition|)
block|{
name|String
name|pemEncodedCert
init|=
name|response
operator|.
name|getX509Certificate
argument_list|()
decl_stmt|;
name|dnCertClient
operator|.
name|storeCertificate
argument_list|(
name|pemEncodedCert
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dnCertClient
operator|.
name|storeCertificate
argument_list|(
name|response
operator|.
name|getX509CACertificate
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|datanodeDetails
operator|.
name|setCertSerialId
argument_list|(
name|getX509Certificate
argument_list|(
name|pemEncodedCert
argument_list|)
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|persistDatanodeDetails
argument_list|(
name|datanodeDetails
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to retrieve datanode certificate "
operator|+
literal|"chain"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|CertificateException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while storing SCM signed certificate."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates CSR for DN.    * @param config    * */
annotation|@
name|VisibleForTesting
DECL|method|getCSR (Configuration config)
specifier|public
name|PKCS10CertificationRequest
name|getCSR
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|CertificateSignRequest
operator|.
name|Builder
name|builder
init|=
name|dnCertClient
operator|.
name|getCSRBuilder
argument_list|()
decl_stmt|;
name|KeyPair
name|keyPair
init|=
operator|new
name|KeyPair
argument_list|(
name|dnCertClient
operator|.
name|getPublicKey
argument_list|()
argument_list|,
name|dnCertClient
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|hostname
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
decl_stmt|;
name|String
name|subject
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"@"
operator|+
name|hostname
decl_stmt|;
name|builder
operator|.
name|setCA
argument_list|(
literal|false
argument_list|)
operator|.
name|setKey
argument_list|(
name|keyPair
argument_list|)
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
operator|.
name|setSubject
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating csr for DN-> subject:{}"
argument_list|,
name|subject
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns DatanodeDetails or null in case of Error.    *    * @return DatanodeDetails    */
DECL|method|initializeDatanodeDetails ()
specifier|private
name|DatanodeDetails
name|initializeDatanodeDetails
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|idFilePath
init|=
name|HddsServerUtil
operator|.
name|getDatanodeIdFilePath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|idFilePath
operator|==
literal|null
operator|||
name|idFilePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"A valid path is needed for config setting {}"
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ID_DIR
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ID_DIR
operator|+
literal|" must be defined. See"
operator|+
literal|" https://wiki.apache.org/hadoop/Ozone#Configuration"
operator|+
literal|" for details on configuring Ozone."
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|idFilePath
argument_list|)
expr_stmt|;
name|File
name|idFile
init|=
operator|new
name|File
argument_list|(
name|idFilePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|idFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|ContainerUtils
operator|.
name|readDatanodeDetailsFrom
argument_list|(
name|idFile
argument_list|)
return|;
block|}
else|else
block|{
comment|// There is no datanode.id file, this might be the first time datanode
comment|// is started.
name|String
name|datanodeUuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|DatanodeDetails
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUuid
argument_list|(
name|datanodeUuid
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**    * Persist DatanodeDetails to file system.    * @param dnDetails    *    * @return DatanodeDetails    */
DECL|method|persistDatanodeDetails (DatanodeDetails dnDetails)
specifier|private
name|void
name|persistDatanodeDetails
parameter_list|(
name|DatanodeDetails
name|dnDetails
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|idFilePath
init|=
name|HddsServerUtil
operator|.
name|getDatanodeIdFilePath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|idFilePath
operator|==
literal|null
operator|||
name|idFilePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"A valid path is needed for config setting {}"
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ID_DIR
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ID_DIR
operator|+
literal|" must be defined. See"
operator|+
literal|" https://wiki.apache.org/hadoop/Ozone#Configuration"
operator|+
literal|" for details on configuring Ozone."
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|idFilePath
argument_list|)
expr_stmt|;
name|File
name|idFile
init|=
operator|new
name|File
argument_list|(
name|idFilePath
argument_list|)
decl_stmt|;
name|ContainerUtils
operator|.
name|writeDatanodeDetailsTo
argument_list|(
name|dnDetails
argument_list|,
name|idFile
argument_list|)
expr_stmt|;
block|}
comment|/**    * Starts all the service plugins which are configured using    * OzoneConfigKeys.HDDS_DATANODE_PLUGINS_KEY.    */
DECL|method|startPlugins ()
specifier|private
name|void
name|startPlugins
parameter_list|()
block|{
try|try
block|{
name|plugins
operator|=
name|conf
operator|.
name|getInstances
argument_list|(
name|HDDS_DATANODE_PLUGINS_KEY
argument_list|,
name|ServicePlugin
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|String
name|pluginsValue
init|=
name|conf
operator|.
name|get
argument_list|(
name|HDDS_DATANODE_PLUGINS_KEY
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to load HDDS DataNode plugins. "
operator|+
literal|"Specified list of plugins: {}"
argument_list|,
name|pluginsValue
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
for|for
control|(
name|ServicePlugin
name|plugin
range|:
name|plugins
control|)
block|{
try|try
block|{
name|plugin
operator|.
name|start
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started plug-in {}"
argument_list|,
name|plugin
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ServicePlugin {} could not be started"
argument_list|,
name|plugin
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns the OzoneConfiguration used by this HddsDatanodeService.    *    * @return OzoneConfiguration    */
DECL|method|getConf ()
specifier|public
name|OzoneConfiguration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|/**    * Return DatanodeDetails if set, return null otherwise.    *    * @return DatanodeDetails    */
annotation|@
name|VisibleForTesting
DECL|method|getDatanodeDetails ()
specifier|public
name|DatanodeDetails
name|getDatanodeDetails
parameter_list|()
block|{
return|return
name|datanodeDetails
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDatanodeStateMachine ()
specifier|public
name|DatanodeStateMachine
name|getDatanodeStateMachine
parameter_list|()
block|{
return|return
name|datanodeStateMachine
return|;
block|}
DECL|method|join ()
specifier|public
name|void
name|join
parameter_list|()
block|{
if|if
condition|(
name|datanodeStateMachine
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|datanodeStateMachine
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted during StorageContainerManager join."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|terminateDatanode ()
specifier|public
name|void
name|terminateDatanode
parameter_list|()
block|{
name|stop
argument_list|()
expr_stmt|;
name|terminate
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isStopped
operator|.
name|get
argument_list|()
condition|)
block|{
name|isStopped
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|plugins
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServicePlugin
name|plugin
range|:
name|plugins
control|)
block|{
try|try
block|{
name|plugin
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopped plug-in {}"
argument_list|,
name|plugin
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ServicePlugin {} could not be stopped"
argument_list|,
name|plugin
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|datanodeStateMachine
operator|!=
literal|null
condition|)
block|{
name|datanodeStateMachine
operator|.
name|stopDaemon
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|httpServer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|httpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Stopping HttpServer is failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|plugins
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServicePlugin
name|plugin
range|:
name|plugins
control|)
block|{
try|try
block|{
name|plugin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ServicePlugin {} could not be closed"
argument_list|,
name|plugin
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getComponent ()
specifier|public
name|String
name|getComponent
parameter_list|()
block|{
return|return
name|component
return|;
block|}
DECL|method|getCertificateClient ()
specifier|public
name|CertificateClient
name|getCertificateClient
parameter_list|()
block|{
return|return
name|dnCertClient
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setCertificateClient (CertificateClient client)
specifier|public
name|void
name|setCertificateClient
parameter_list|(
name|CertificateClient
name|client
parameter_list|)
block|{
name|dnCertClient
operator|=
name|client
expr_stmt|;
block|}
block|}
end_class

end_unit

