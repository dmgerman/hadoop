begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.ozoneimpl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|PipelineReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|HddsDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|StateContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|server
operator|.
name|XceiverServerGrpc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|server
operator|.
name|XceiverServerSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|server
operator|.
name|ratis
operator|.
name|XceiverServerRatis
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|HddsVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|VolumeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|replication
operator|.
name|GrpcReplicationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|replication
operator|.
name|OnDemandContainerReplicationSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskOutOfSpaceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Ozone main class sets up the network servers and initializes the container  * layer.  */
end_comment

begin_class
DECL|class|OzoneContainer
specifier|public
class|class
name|OzoneContainer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneContainer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|hddsDispatcher
specifier|private
specifier|final
name|HddsDispatcher
name|hddsDispatcher
decl_stmt|;
DECL|field|handlers
specifier|private
specifier|final
name|Map
argument_list|<
name|ContainerType
argument_list|,
name|Handler
argument_list|>
name|handlers
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|OzoneConfiguration
name|config
decl_stmt|;
DECL|field|volumeSet
specifier|private
specifier|final
name|VolumeSet
name|volumeSet
decl_stmt|;
DECL|field|containerSet
specifier|private
specifier|final
name|ContainerSet
name|containerSet
decl_stmt|;
DECL|field|writeChannel
specifier|private
specifier|final
name|XceiverServerSpi
name|writeChannel
decl_stmt|;
DECL|field|readChannel
specifier|private
specifier|final
name|XceiverServerSpi
name|readChannel
decl_stmt|;
DECL|field|controller
specifier|private
specifier|final
name|ContainerController
name|controller
decl_stmt|;
comment|/**    * Construct OzoneContainer object.    * @param datanodeDetails    * @param conf    * @throws DiskOutOfSpaceException    * @throws IOException    */
DECL|method|OzoneContainer (DatanodeDetails datanodeDetails, OzoneConfiguration conf, StateContext context)
specifier|public
name|OzoneContainer
parameter_list|(
name|DatanodeDetails
name|datanodeDetails
parameter_list|,
name|OzoneConfiguration
name|conf
parameter_list|,
name|StateContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|config
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|volumeSet
operator|=
operator|new
name|VolumeSet
argument_list|(
name|datanodeDetails
operator|.
name|getUuidString
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerSet
operator|=
operator|new
name|ContainerSet
argument_list|()
expr_stmt|;
name|buildContainerSet
argument_list|()
expr_stmt|;
specifier|final
name|ContainerMetrics
name|metrics
init|=
name|ContainerMetrics
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|handlers
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|ContainerType
name|containerType
range|:
name|ContainerType
operator|.
name|values
argument_list|()
control|)
block|{
name|handlers
operator|.
name|put
argument_list|(
name|containerType
argument_list|,
name|Handler
operator|.
name|getHandlerForContainerType
argument_list|(
name|containerType
argument_list|,
name|conf
argument_list|,
name|context
argument_list|,
name|containerSet
argument_list|,
name|volumeSet
argument_list|,
name|metrics
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|hddsDispatcher
operator|=
operator|new
name|HddsDispatcher
argument_list|(
name|config
argument_list|,
name|containerSet
argument_list|,
name|volumeSet
argument_list|,
name|handlers
argument_list|,
name|context
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
comment|/*      * ContainerController is the control plane      * XceiverServerRatis is the write channel      * XceiverServerGrpc is the read channel      */
name|this
operator|.
name|controller
operator|=
operator|new
name|ContainerController
argument_list|(
name|containerSet
argument_list|,
name|handlers
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeChannel
operator|=
name|XceiverServerRatis
operator|.
name|newXceiverServerRatis
argument_list|(
name|datanodeDetails
argument_list|,
name|config
argument_list|,
name|hddsDispatcher
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|readChannel
operator|=
operator|new
name|XceiverServerGrpc
argument_list|(
name|datanodeDetails
argument_list|,
name|config
argument_list|,
name|hddsDispatcher
argument_list|,
name|createReplicationService
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createReplicationService ()
specifier|private
name|GrpcReplicationService
name|createReplicationService
parameter_list|()
block|{
return|return
operator|new
name|GrpcReplicationService
argument_list|(
operator|new
name|OnDemandContainerReplicationSource
argument_list|(
name|controller
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Build's container map.    */
DECL|method|buildContainerSet ()
specifier|private
name|void
name|buildContainerSet
parameter_list|()
block|{
name|Iterator
argument_list|<
name|HddsVolume
argument_list|>
name|volumeSetIterator
init|=
name|volumeSet
operator|.
name|getVolumesList
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Thread
argument_list|>
name|volumeThreads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
comment|//TODO: diskchecker should be run before this, to see how disks are.
comment|// And also handle disk failure tolerance need to be added
while|while
condition|(
name|volumeSetIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HddsVolume
name|volume
init|=
name|volumeSetIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|ContainerReader
argument_list|(
name|volumeSet
argument_list|,
name|volume
argument_list|,
name|containerSet
argument_list|,
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|volumeThreads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|volumeThreads
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|volumeThreads
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Volume Threads Interrupted exception"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Starts serving requests to ozone container.    *    * @throws IOException    */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to start container services."
argument_list|)
expr_stmt|;
name|writeChannel
operator|.
name|start
argument_list|()
expr_stmt|;
name|readChannel
operator|.
name|start
argument_list|()
expr_stmt|;
name|hddsDispatcher
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
comment|/**    * Stop Container Service on the datanode.    */
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
comment|//TODO: at end of container IO integration work.
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to stop container services."
argument_list|)
expr_stmt|;
name|writeChannel
operator|.
name|stop
argument_list|()
expr_stmt|;
name|readChannel
operator|.
name|stop
argument_list|()
expr_stmt|;
name|hddsDispatcher
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getContainerSet ()
specifier|public
name|ContainerSet
name|getContainerSet
parameter_list|()
block|{
return|return
name|containerSet
return|;
block|}
comment|/**    * Returns container report.    * @return - container report.    * @throws IOException    */
DECL|method|getPipelineReport ()
specifier|public
name|PipelineReportsProto
name|getPipelineReport
parameter_list|()
block|{
name|PipelineReportsProto
operator|.
name|Builder
name|pipelineReportsProto
init|=
name|PipelineReportsProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|pipelineReportsProto
operator|.
name|addAllPipelineReport
argument_list|(
name|writeChannel
operator|.
name|getPipelineReport
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pipelineReportsProto
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getWriteChannel ()
specifier|public
name|XceiverServerSpi
name|getWriteChannel
parameter_list|()
block|{
return|return
name|writeChannel
return|;
block|}
DECL|method|getReadChannel ()
specifier|public
name|XceiverServerSpi
name|getReadChannel
parameter_list|()
block|{
return|return
name|readChannel
return|;
block|}
DECL|method|getController ()
specifier|public
name|ContainerController
name|getController
parameter_list|()
block|{
return|return
name|controller
return|;
block|}
comment|/**    * Returns node report of container storage usage.    */
DECL|method|getNodeReport ()
specifier|public
name|StorageContainerDatanodeProtocolProtos
operator|.
name|NodeReportProto
name|getNodeReport
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|volumeSet
operator|.
name|getNodeReport
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDispatcher ()
specifier|public
name|ContainerDispatcher
name|getDispatcher
parameter_list|()
block|{
return|return
name|this
operator|.
name|hddsDispatcher
return|;
block|}
DECL|method|getVolumeSet ()
specifier|public
name|VolumeSet
name|getVolumeSet
parameter_list|()
block|{
return|return
name|volumeSet
return|;
block|}
block|}
end_class

end_unit

