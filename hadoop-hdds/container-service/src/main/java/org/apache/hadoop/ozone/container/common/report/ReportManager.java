begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.report
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|report
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|StateContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|concurrent
operator|.
name|HadoopExecutors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_comment
comment|/**  * ReportManager is responsible for managing all the {@link ReportPublisher}  * and also provides {@link ScheduledExecutorService} to ReportPublisher  * which should be used for scheduling the reports.  */
end_comment

begin_class
DECL|class|ReportManager
specifier|public
specifier|final
class|class
name|ReportManager
block|{
DECL|field|context
specifier|private
specifier|final
name|StateContext
name|context
decl_stmt|;
DECL|field|publishers
specifier|private
specifier|final
name|List
argument_list|<
name|ReportPublisher
argument_list|>
name|publishers
decl_stmt|;
DECL|field|executorService
specifier|private
specifier|final
name|ScheduledExecutorService
name|executorService
decl_stmt|;
comment|/**    * Construction of {@link ReportManager} should be done via    * {@link ReportManager.Builder}.    *    * @param context StateContext which holds the report    * @param publishers List of publishers which generates report    */
DECL|method|ReportManager (StateContext context, List<ReportPublisher> publishers)
specifier|private
name|ReportManager
parameter_list|(
name|StateContext
name|context
parameter_list|,
name|List
argument_list|<
name|ReportPublisher
argument_list|>
name|publishers
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|publishers
operator|=
name|publishers
expr_stmt|;
name|this
operator|.
name|executorService
operator|=
name|HadoopExecutors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"Datanode ReportManager Thread - %d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initializes ReportManager, also initializes all the configured    * report publishers.    */
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
for|for
control|(
name|ReportPublisher
name|publisher
range|:
name|publishers
control|)
block|{
name|publisher
operator|.
name|init
argument_list|(
name|context
argument_list|,
name|executorService
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Shutdown the ReportManager.    */
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns new {@link ReportManager.Builder} which can be used to construct.    * {@link ReportManager}    * @param conf  - Conf    * @return builder - Builder.    */
DECL|method|newBuilder (Configuration conf)
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * Builder to construct {@link ReportManager}.    */
DECL|class|Builder
specifier|public
specifier|static
specifier|final
class|class
name|Builder
block|{
DECL|field|stateContext
specifier|private
name|StateContext
name|stateContext
decl_stmt|;
DECL|field|reportPublishers
specifier|private
name|List
argument_list|<
name|ReportPublisher
argument_list|>
name|reportPublishers
decl_stmt|;
DECL|field|publisherFactory
specifier|private
name|ReportPublisherFactory
name|publisherFactory
decl_stmt|;
DECL|method|Builder (Configuration conf)
specifier|private
name|Builder
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|reportPublishers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|publisherFactory
operator|=
operator|new
name|ReportPublisherFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the {@link StateContext}.      *      * @param context StateContext       * @return ReportManager.Builder      */
DECL|method|setStateContext (StateContext context)
specifier|public
name|Builder
name|setStateContext
parameter_list|(
name|StateContext
name|context
parameter_list|)
block|{
name|stateContext
operator|=
name|context
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds publisher for the corresponding report.      *      * @param report report for which publisher needs to be added      *      * @return ReportManager.Builder      */
DECL|method|addPublisherFor (Class<? extends GeneratedMessage> report)
specifier|public
name|Builder
name|addPublisherFor
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|GeneratedMessage
argument_list|>
name|report
parameter_list|)
block|{
name|reportPublishers
operator|.
name|add
argument_list|(
name|publisherFactory
operator|.
name|getPublisherFor
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds new ReportPublisher to the ReportManager.      *      * @param publisher ReportPublisher      *      * @return ReportManager.Builder      */
DECL|method|addPublisher (ReportPublisher publisher)
specifier|public
name|Builder
name|addPublisher
parameter_list|(
name|ReportPublisher
name|publisher
parameter_list|)
block|{
name|reportPublishers
operator|.
name|add
argument_list|(
name|publisher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Build and returns ReportManager.      *      * @return {@link ReportManager}      */
DECL|method|build ()
specifier|public
name|ReportManager
name|build
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|stateContext
argument_list|)
expr_stmt|;
return|return
operator|new
name|ReportManager
argument_list|(
name|stateContext
argument_list|,
name|reportPublishers
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

