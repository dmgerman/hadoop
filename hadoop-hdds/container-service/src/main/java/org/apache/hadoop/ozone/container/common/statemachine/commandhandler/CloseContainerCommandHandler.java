begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.statemachine.commandhandler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|commandhandler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|CloseContainerCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|SCMConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|StateContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
operator|.
name|OzoneContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|SCMCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|NotLeaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * Handler for close container command received from SCM.  */
end_comment

begin_class
DECL|class|CloseContainerCommandHandler
specifier|public
class|class
name|CloseContainerCommandHandler
implements|implements
name|CommandHandler
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CloseContainerCommandHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|invocationCount
specifier|private
name|int
name|invocationCount
decl_stmt|;
DECL|field|totalTime
specifier|private
name|long
name|totalTime
decl_stmt|;
DECL|field|cmdExecuted
specifier|private
name|boolean
name|cmdExecuted
decl_stmt|;
comment|/**    * Constructs a ContainerReport handler.    */
DECL|method|CloseContainerCommandHandler ()
specifier|public
name|CloseContainerCommandHandler
parameter_list|()
block|{   }
comment|/**    * Handles a given SCM command.    *    * @param command           - SCM Command    * @param container         - Ozone Container.    * @param context           - Current Context.    * @param connectionManager - The SCMs that we are talking to.    */
annotation|@
name|Override
DECL|method|handle (SCMCommand command, OzoneContainer container, StateContext context, SCMConnectionManager connectionManager)
specifier|public
name|void
name|handle
parameter_list|(
name|SCMCommand
name|command
parameter_list|,
name|OzoneContainer
name|container
parameter_list|,
name|StateContext
name|context
parameter_list|,
name|SCMConnectionManager
name|connectionManager
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing Close Container command."
argument_list|)
expr_stmt|;
name|invocationCount
operator|++
expr_stmt|;
name|cmdExecuted
operator|=
literal|false
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
comment|// TODO: define this as INVALID_CONTAINER_ID in HddsConsts.java (TBA)
name|long
name|containerID
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|CloseContainerCommandProto
name|closeContainerProto
init|=
name|CloseContainerCommandProto
operator|.
name|parseFrom
argument_list|(
name|command
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
decl_stmt|;
name|containerID
operator|=
name|closeContainerProto
operator|.
name|getContainerID
argument_list|()
expr_stmt|;
if|if
condition|(
name|container
operator|.
name|getContainerSet
argument_list|()
operator|.
name|getContainer
argument_list|(
name|containerID
argument_list|)
operator|.
name|getContainerData
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Container {} is already closed"
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
comment|// It might happen that the where the first attempt of closing the
comment|// container failed with NOT_LEADER_EXCEPTION. In such cases, SCM will
comment|// retry to check the container got really closed via Ratis.
comment|// In such cases of the retry attempt, if the container is already
comment|// closed via Ratis, we should just return.
name|cmdExecuted
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|HddsProtos
operator|.
name|PipelineID
name|pipelineID
init|=
name|closeContainerProto
operator|.
name|getPipelineID
argument_list|()
decl_stmt|;
name|HddsProtos
operator|.
name|ReplicationType
name|replicationType
init|=
name|closeContainerProto
operator|.
name|getReplicationType
argument_list|()
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|CloseContainer
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCloseContainer
argument_list|(
name|ContainerProtos
operator|.
name|CloseContainerRequestProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTraceID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|context
operator|.
name|getParent
argument_list|()
operator|.
name|getDatanodeDetails
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
comment|// submit the close container request for the XceiverServer to handle
name|container
operator|.
name|submitContainerRequest
argument_list|(
name|request
operator|.
name|build
argument_list|()
argument_list|,
name|replicationType
argument_list|,
name|pipelineID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|NotLeaderException
condition|)
block|{
comment|// If the particular datanode is not the Ratis leader, the close
comment|// container command will not be executed by the follower but will be
comment|// executed by Ratis stateMachine transactions via leader to follower.
comment|// There can also be case where the datanode is in candidate state.
comment|// In these situations, NotLeaderException is thrown. Remove the status
comment|// from cmdStatus Map here so that it will be retried only by SCM if the
comment|// leader could not not close the container after a certain time.
name|context
operator|.
name|removeCommandStatus
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't close container "
operator|+
name|containerID
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|cmdExecuted
operator|=
literal|false
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|updateCommandStatus
argument_list|(
name|context
argument_list|,
name|command
argument_list|,
name|cmdExecuted
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|totalTime
operator|+=
name|endTime
operator|-
name|startTime
expr_stmt|;
block|}
block|}
comment|/**    * Returns the command type that this command handler handles.    *    * @return Type    */
annotation|@
name|Override
DECL|method|getCommandType ()
specifier|public
name|SCMCommandProto
operator|.
name|Type
name|getCommandType
parameter_list|()
block|{
return|return
name|SCMCommandProto
operator|.
name|Type
operator|.
name|closeContainerCommand
return|;
block|}
comment|/**    * Returns number of times this handler has been invoked.    *    * @return int    */
annotation|@
name|Override
DECL|method|getInvocationCount ()
specifier|public
name|int
name|getInvocationCount
parameter_list|()
block|{
return|return
name|invocationCount
return|;
block|}
comment|/**    * Returns the average time this function takes to run.    *    * @return long    */
annotation|@
name|Override
DECL|method|getAverageRunTime ()
specifier|public
name|long
name|getAverageRunTime
parameter_list|()
block|{
if|if
condition|(
name|invocationCount
operator|>
literal|0
condition|)
block|{
return|return
name|totalTime
operator|/
name|invocationCount
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

