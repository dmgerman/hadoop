begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  *<p>  * A collection of tests for the contract of the {@link FileSystem}.  * This test should be used for general-purpose implementations of  * {@link FileSystem}, that is, implementations that provide implementations   * of all of the functionality of {@link FileSystem}.  *</p>  *<p>  * To test a given {@link FileSystem} implementation create a subclass of this  * test and override {@link #setUp()} to initialize the<code>fs</code>   * {@link FileSystem} instance variable.  *</p>  */
end_comment

begin_class
DECL|class|FileSystemContractBaseTest
specifier|public
specifier|abstract
class|class
name|FileSystemContractBaseTest
extends|extends
name|TestCase
block|{
DECL|field|fs
specifier|protected
name|FileSystem
name|fs
decl_stmt|;
DECL|field|data
specifier|private
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|getBlockSize
argument_list|()
operator|*
literal|2
index|]
decl_stmt|;
comment|// two blocks of data
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|%
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|(
literal|"/test"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getBlockSize ()
specifier|protected
name|int
name|getBlockSize
parameter_list|()
block|{
return|return
literal|1024
return|;
block|}
DECL|method|getDefaultWorkingDirectory ()
specifier|protected
name|String
name|getDefaultWorkingDirectory
parameter_list|()
block|{
return|return
literal|"/user/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
return|;
block|}
DECL|method|renameSupported ()
specifier|protected
name|boolean
name|renameSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|testFsStatus ()
specifier|public
name|void
name|testFsStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|FsStatus
name|fsStatus
init|=
name|fs
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|fsStatus
argument_list|)
expr_stmt|;
comment|//used, free and capacity are non-negative longs
name|assertTrue
argument_list|(
name|fsStatus
operator|.
name|getUsed
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fsStatus
operator|.
name|getRemaining
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fsStatus
operator|.
name|getCapacity
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testWorkingDirectory ()
specifier|public
name|void
name|testWorkingDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|workDir
init|=
name|path
argument_list|(
name|getDefaultWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|workDir
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setWorkingDirectory
argument_list|(
name|path
argument_list|(
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|workDir
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setWorkingDirectory
argument_list|(
name|path
argument_list|(
literal|".."
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|workDir
operator|.
name|getParent
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|relativeDir
init|=
name|path
argument_list|(
literal|"hadoop"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setWorkingDirectory
argument_list|(
name|relativeDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|relativeDir
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|absoluteDir
init|=
name|path
argument_list|(
literal|"/test/hadoop"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setWorkingDirectory
argument_list|(
name|absoluteDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|absoluteDir
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMkdirs ()
specifier|public
name|void
name|testMkdirs
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testDir
init|=
name|path
argument_list|(
literal|"/test/hadoop"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|isFile
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|isFile
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|isFile
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|parentDir
init|=
name|testDir
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|parentDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|isFile
argument_list|(
name|parentDir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|grandparentDir
init|=
name|parentDir
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|grandparentDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|isFile
argument_list|(
name|grandparentDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMkdirsFailsForSubdirectoryOfExistingFile ()
specifier|public
name|void
name|testMkdirsFailsForSubdirectoryOfExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testDir
init|=
name|path
argument_list|(
literal|"/test/hadoop"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/file"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|testSubDir
init|=
name|path
argument_list|(
literal|"/test/hadoop/file/subdir"
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|testSubDir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw IOException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testSubDir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|testDeepSubDir
init|=
name|path
argument_list|(
literal|"/test/hadoop/file/deep/sub/dir"
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|testDeepSubDir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw IOException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testDeepSubDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetFileStatusThrowsExceptionForNonExistentFile ()
specifier|public
name|void
name|testGetFileStatusThrowsExceptionForNonExistentFile
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/file"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testListStatusThrowsExceptionForNonExistentFile ()
specifier|public
name|void
name|testListStatusThrowsExceptionForNonExistentFile
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/file"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testListStatus ()
specifier|public
name|void
name|testListStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
index|[]
name|testDirs
init|=
block|{
name|path
argument_list|(
literal|"/test/hadoop/a"
argument_list|)
block|,
name|path
argument_list|(
literal|"/test/hadoop/b"
argument_list|)
block|,
name|path
argument_list|(
literal|"/test/hadoop/c/1"
argument_list|)
block|, }
decl_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testDirs
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|testDirs
control|)
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FileStatus
index|[]
name|paths
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop"
argument_list|)
argument_list|,
name|paths
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|paths
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/a"
argument_list|)
argument_list|,
name|paths
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/b"
argument_list|)
argument_list|,
name|paths
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/c"
argument_list|)
argument_list|,
name|paths
index|[
literal|2
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|paths
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteReadAndDeleteEmptyFile ()
specifier|public
name|void
name|testWriteReadAndDeleteEmptyFile
parameter_list|()
throws|throws
name|Exception
block|{
name|writeReadAndDelete
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteReadAndDeleteHalfABlock ()
specifier|public
name|void
name|testWriteReadAndDeleteHalfABlock
parameter_list|()
throws|throws
name|Exception
block|{
name|writeReadAndDelete
argument_list|(
name|getBlockSize
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteReadAndDeleteOneBlock ()
specifier|public
name|void
name|testWriteReadAndDeleteOneBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|writeReadAndDelete
argument_list|(
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteReadAndDeleteOneAndAHalfBlocks ()
specifier|public
name|void
name|testWriteReadAndDeleteOneAndAHalfBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|writeReadAndDelete
argument_list|(
name|getBlockSize
argument_list|()
operator|+
operator|(
name|getBlockSize
argument_list|()
operator|/
literal|2
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteReadAndDeleteTwoBlocks ()
specifier|public
name|void
name|testWriteReadAndDeleteTwoBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|writeReadAndDelete
argument_list|(
name|getBlockSize
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|writeReadAndDelete (int len)
specifier|private
name|void
name|writeReadAndDelete
parameter_list|(
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|path
argument_list|(
literal|"/test/hadoop/file"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|getBlockSize
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Length"
argument_list|,
name|len
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
literal|0
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|len
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Position "
operator|+
name|i
argument_list|,
name|data
index|[
name|i
index|]
argument_list|,
name|buf
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Deleted"
argument_list|,
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"No longer exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverwrite ()
specifier|public
name|void
name|testOverwrite
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|path
argument_list|(
literal|"/test/hadoop/file"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Length"
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw IOException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Length"
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteInNonExistentDirectory ()
specifier|public
name|void
name|testWriteInNonExistentDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|path
argument_list|(
literal|"/test/hadoop/file"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Parent doesn't exist"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Length"
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Parent exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteNonExistentFile ()
specifier|public
name|void
name|testDeleteNonExistentFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|path
argument_list|(
literal|"/test/hadoop/file"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Doesn't exist"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"No deletion"
argument_list|,
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteRecursively ()
specifier|public
name|void
name|testDeleteRecursively
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
name|path
argument_list|(
literal|"/test/hadoop"
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
name|path
argument_list|(
literal|"/test/hadoop/file"
argument_list|)
decl_stmt|;
name|Path
name|subdir
init|=
name|path
argument_list|(
literal|"/test/hadoop/subdir"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Created subdir"
argument_list|,
name|fs
operator|.
name|mkdirs
argument_list|(
name|subdir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Dir exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Subdir exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|subdir
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw IOException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|assertTrue
argument_list|(
literal|"File still exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Dir still exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Subdir still exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|subdir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Deleted"
argument_list|,
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"File doesn't exist"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Dir doesn't exist"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Subdir doesn't exist"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|subdir
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteEmptyDirectory ()
specifier|public
name|void
name|testDeleteEmptyDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
name|path
argument_list|(
literal|"/test/hadoop"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Dir exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Deleted"
argument_list|,
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Dir doesn't exist"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRenameNonExistentPath ()
specifier|public
name|void
name|testRenameNonExistentPath
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|path
argument_list|(
literal|"/test/hadoop/path"
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
name|path
argument_list|(
literal|"/test/new/newpath"
argument_list|)
decl_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testRenameFileMoveToNonExistentDirectory ()
specifier|public
name|void
name|testRenameFileMoveToNonExistentDirectory
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|path
argument_list|(
literal|"/test/hadoop/file"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|path
argument_list|(
literal|"/test/new/newfile"
argument_list|)
decl_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testRenameFileMoveToExistingDirectory ()
specifier|public
name|void
name|testRenameFileMoveToExistingDirectory
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|path
argument_list|(
literal|"/test/hadoop/file"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|path
argument_list|(
literal|"/test/new/newfile"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dst
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testRenameFileAsExistingFile ()
specifier|public
name|void
name|testRenameFileAsExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|path
argument_list|(
literal|"/test/hadoop/file"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|path
argument_list|(
literal|"/test/new/newfile"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testRenameFileAsExistingDirectory ()
specifier|public
name|void
name|testRenameFileAsExistingDirectory
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|path
argument_list|(
literal|"/test/hadoop/file"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|path
argument_list|(
literal|"/test/new/newdir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Destination changed"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/test/new/newdir/file"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRenameDirectoryMoveToNonExistentDirectory ()
specifier|public
name|void
name|testRenameDirectoryMoveToNonExistentDirectory
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|path
argument_list|(
literal|"/test/hadoop/dir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|path
argument_list|(
literal|"/test/new/newdir"
argument_list|)
decl_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testRenameDirectoryMoveToExistingDirectory ()
specifier|public
name|void
name|testRenameDirectoryMoveToExistingDirectory
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|path
argument_list|(
literal|"/test/hadoop/dir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/dir/file1"
argument_list|)
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/dir/subdir/file2"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|path
argument_list|(
literal|"/test/new/newdir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dst
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Nested file1 exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/dir/file1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Nested file2 exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/dir/subdir/file2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Renamed nested file1 exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/test/new/newdir/file1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Renamed nested exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/test/new/newdir/subdir/file2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRenameDirectoryAsExistingFile ()
specifier|public
name|void
name|testRenameDirectoryAsExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|path
argument_list|(
literal|"/test/hadoop/dir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|path
argument_list|(
literal|"/test/new/newfile"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testRenameDirectoryAsExistingDirectory ()
specifier|public
name|void
name|testRenameDirectoryAsExistingDirectory
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|path
argument_list|(
literal|"/test/hadoop/dir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/dir/file1"
argument_list|)
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/dir/subdir/file2"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|path
argument_list|(
literal|"/test/new/newdir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Destination changed"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/test/new/newdir/dir"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Nested file1 exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/dir/file1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Nested file2 exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/test/hadoop/dir/subdir/file2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Renamed nested file1 exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/test/new/newdir/dir/file1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Renamed nested exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|(
literal|"/test/new/newdir/dir/subdir/file2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInputStreamClosedTwice ()
specifier|public
name|void
name|testInputStreamClosedTwice
parameter_list|()
throws|throws
name|IOException
block|{
comment|//HADOOP-4760 according to Closeable#close() closing already-closed
comment|//streams should have no effect.
name|Path
name|src
init|=
name|path
argument_list|(
literal|"/test/hadoop/file"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testOutputStreamClosedTwice ()
specifier|public
name|void
name|testOutputStreamClosedTwice
parameter_list|()
throws|throws
name|IOException
block|{
comment|//HADOOP-4760 according to Closeable#close() closing already-closed
comment|//streams should have no effect.
name|Path
name|src
init|=
name|path
argument_list|(
literal|"/test/hadoop/file"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeChar
argument_list|(
literal|'H'
argument_list|)
expr_stmt|;
comment|//write some data
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|path (String pathString)
specifier|protected
name|Path
name|path
parameter_list|(
name|String
name|pathString
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
return|;
block|}
DECL|method|createFile (Path path)
specifier|protected
name|void
name|createFile
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|rename (Path src, Path dst, boolean renameSucceeded, boolean srcExists, boolean dstExists)
specifier|private
name|void
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|renameSucceeded
parameter_list|,
name|boolean
name|srcExists
parameter_list|,
name|boolean
name|dstExists
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"Rename result"
argument_list|,
name|renameSucceeded
argument_list|,
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Source exists"
argument_list|,
name|srcExists
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Destination exists"
argument_list|,
name|dstExists
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

