begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.test
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Helper class to create one-liner stubs, so that instead of:<pre>  * SomeType someDescriptiveMock = mock(SomeType.class);  * when(someDescriptiveMock.someMethod()).thenReturn(someValue);</pre>  *<p>You can now do:<pre>  * SomeType someDescriptiveMock = make(stub(SomeType.class)  *     .returning(someValue).from.someMethod());</pre>  */
end_comment

begin_class
DECL|class|MockitoMaker
specifier|public
class|class
name|MockitoMaker
block|{
comment|/**    * Create a mock object from a mocked method call.    *    * @param<T> type of mocked object    * @param methodCall  for mocked object    * @return mocked object    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|make (Object methodCall)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|make
parameter_list|(
name|Object
name|methodCall
parameter_list|)
block|{
name|StubBuilder
argument_list|<
name|T
argument_list|>
name|sb
init|=
name|StubBuilder
operator|.
name|current
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|methodCall
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sb
operator|.
name|firstReturn
argument_list|,
name|sb
operator|.
name|laterReturns
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|StubBuilder
operator|.
name|current
argument_list|()
operator|.
name|from
return|;
block|}
comment|/**    * Create a stub builder of a mocked object.    *    * @param<T>     type of the target object to be mocked    * @param target  class of the target object to be mocked    * @return the stub builder of the mocked object    */
DECL|method|stub (Class<T> target)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|StubBuilder
argument_list|<
name|T
argument_list|>
name|stub
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|target
parameter_list|)
block|{
return|return
operator|new
name|StubBuilder
argument_list|<
name|T
argument_list|>
argument_list|(
name|mock
argument_list|(
name|target
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Builder class for stubs    * @param<T> type of the object to be mocked    */
DECL|class|StubBuilder
specifier|public
specifier|static
class|class
name|StubBuilder
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**      * The target mock object      */
DECL|field|from
specifier|public
specifier|final
name|T
name|from
decl_stmt|;
comment|// We want to be able to use this even when the tests are run in parallel.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|field|tls
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|StubBuilder
argument_list|>
name|tls
init|=
operator|new
name|ThreadLocal
argument_list|<
name|StubBuilder
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|StubBuilder
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|StubBuilder
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|firstReturn
specifier|private
name|Object
name|firstReturn
init|=
literal|null
decl_stmt|;
DECL|field|laterReturns
specifier|private
name|Object
index|[]
name|laterReturns
init|=
block|{}
decl_stmt|;
comment|/**      * Default constructor for the initial stub builder      */
DECL|method|StubBuilder ()
specifier|public
name|StubBuilder
parameter_list|()
block|{
name|this
operator|.
name|from
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Construct a stub builder with a mock instance      *      * @param mockInstance  the mock object      */
DECL|method|StubBuilder (T mockInstance)
specifier|public
name|StubBuilder
parameter_list|(
name|T
name|mockInstance
parameter_list|)
block|{
name|tls
operator|.
name|set
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|from
operator|=
name|mockInstance
expr_stmt|;
block|}
comment|/**      * Get the current stub builder from thread local      *      * @param<T>      * @return the stub builder of the mocked object      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|current ()
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|StubBuilder
argument_list|<
name|T
argument_list|>
name|current
parameter_list|()
block|{
return|return
name|tls
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Set the return value for the current stub builder      *      * @param value the return value      * @return the stub builder      */
DECL|method|returning (Object value)
specifier|public
name|StubBuilder
argument_list|<
name|T
argument_list|>
name|returning
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|firstReturn
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the return values for the current stub builder      *      * @param value   the first return value      * @param values  the return values for later invocations      * @return the stub builder      */
DECL|method|returning (Object value, Object... values)
specifier|public
name|StubBuilder
argument_list|<
name|T
argument_list|>
name|returning
parameter_list|(
name|Object
name|value
parameter_list|,
name|Object
modifier|...
name|values
parameter_list|)
block|{
name|this
operator|.
name|firstReturn
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|laterReturns
operator|=
name|values
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

