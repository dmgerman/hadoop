begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/** Unit tests for VersionedWritable. */
end_comment

begin_class
DECL|class|TestVersionedWritable
specifier|public
class|class
name|TestVersionedWritable
extends|extends
name|TestCase
block|{
DECL|method|TestVersionedWritable (String name)
specifier|public
name|TestVersionedWritable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/** Example class used in test cases below. */
DECL|class|SimpleVersionedWritable
specifier|public
specifier|static
class|class
name|SimpleVersionedWritable
extends|extends
name|VersionedWritable
block|{
DECL|field|RANDOM
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|state
name|int
name|state
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|()
decl_stmt|;
DECL|field|VERSION
specifier|private
specifier|static
name|byte
name|VERSION
init|=
literal|1
decl_stmt|;
DECL|method|getVersion ()
specifier|public
name|byte
name|getVersion
parameter_list|()
block|{
return|return
name|VERSION
return|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// version.
name|out
operator|.
name|writeInt
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// version
name|this
operator|.
name|state
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
DECL|method|read (DataInput in)
specifier|public
specifier|static
name|SimpleVersionedWritable
name|read
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleVersionedWritable
name|result
init|=
operator|new
name|SimpleVersionedWritable
argument_list|()
decl_stmt|;
name|result
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/** Required by test code, below. */
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|SimpleVersionedWritable
operator|)
condition|)
return|return
literal|false
return|;
name|SimpleVersionedWritable
name|other
init|=
operator|(
name|SimpleVersionedWritable
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|state
operator|==
name|other
operator|.
name|state
return|;
block|}
block|}
DECL|class|AdvancedVersionedWritable
specifier|public
specifier|static
class|class
name|AdvancedVersionedWritable
extends|extends
name|SimpleVersionedWritable
block|{
DECL|field|shortTestString
name|String
name|shortTestString
init|=
literal|"Now is the time for all good men to come to the aid of the Party"
decl_stmt|;
DECL|field|longTestString
name|String
name|longTestString
init|=
literal|"Four score and twenty years ago. Blah. Blah. Blah. Blah. Blah. Blah. Blah. Blah."
decl_stmt|;
DECL|field|compressableTestString
name|String
name|compressableTestString
init|=
literal|"Blah. Blah. Blah. Blah. Blah. Blah. Blah. Blah. Blah. Blah. Blah. Blah. "
operator|+
literal|"Blah. Blah. Blah. Blah. Blah. Blah. Blah. Blah. Blah. Blah. Blah. Blah. "
operator|+
literal|"Blah. Blah. Blah. Blah. Blah. Blah. Blah. Blah. Blah. Blah. Blah. Blah. "
decl_stmt|;
DECL|field|containedObject
name|SimpleVersionedWritable
name|containedObject
init|=
operator|new
name|SimpleVersionedWritable
argument_list|()
decl_stmt|;
DECL|field|testStringArray
name|String
index|[]
name|testStringArray
init|=
block|{
literal|"The"
block|,
literal|"Quick"
block|,
literal|"Brown"
block|,
literal|"Fox"
block|,
literal|"Jumped"
block|,
literal|"Over"
block|,
literal|"The"
block|,
literal|"Lazy"
block|,
literal|"Dog"
block|}
decl_stmt|;
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|shortTestString
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|longTestString
argument_list|)
expr_stmt|;
name|int
name|comp
init|=
name|WritableUtils
operator|.
name|writeCompressedString
argument_list|(
name|out
argument_list|,
name|compressableTestString
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Compression is "
operator|+
name|comp
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|containedObject
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// Warning if this is a recursive call, you need a null value.
name|WritableUtils
operator|.
name|writeStringArray
argument_list|(
name|out
argument_list|,
name|testStringArray
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|shortTestString
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|longTestString
operator|=
name|WritableUtils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|compressableTestString
operator|=
name|WritableUtils
operator|.
name|readCompressedString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|containedObject
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// Warning if this is a recursive call, you need a null value.
name|testStringArray
operator|=
name|WritableUtils
operator|.
name|readStringArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shortTestString
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|AdvancedVersionedWritable
operator|)
name|o
operator|)
operator|.
name|shortTestString
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|longTestString
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|AdvancedVersionedWritable
operator|)
name|o
operator|)
operator|.
name|longTestString
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|compressableTestString
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|AdvancedVersionedWritable
operator|)
name|o
operator|)
operator|.
name|compressableTestString
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|testStringArray
operator|.
name|length
operator|!=
operator|(
operator|(
name|AdvancedVersionedWritable
operator|)
name|o
operator|)
operator|.
name|testStringArray
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testStringArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|testStringArray
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|AdvancedVersionedWritable
operator|)
name|o
operator|)
operator|.
name|testStringArray
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
operator|!
name|containedObject
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|AdvancedVersionedWritable
operator|)
name|o
operator|)
operator|.
name|containedObject
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/* This one checks that version mismatch is thrown... */
DECL|class|SimpleVersionedWritableV2
specifier|public
specifier|static
class|class
name|SimpleVersionedWritableV2
extends|extends
name|SimpleVersionedWritable
block|{
DECL|field|VERSION
specifier|static
name|byte
name|VERSION
init|=
literal|2
decl_stmt|;
DECL|method|getVersion ()
specifier|public
name|byte
name|getVersion
parameter_list|()
block|{
return|return
name|VERSION
return|;
block|}
block|}
comment|/** Test 1: Check that SimpleVersionedWritable. */
DECL|method|testSimpleVersionedWritable ()
specifier|public
name|void
name|testSimpleVersionedWritable
parameter_list|()
throws|throws
name|Exception
block|{
name|TestWritable
operator|.
name|testWritable
argument_list|(
operator|new
name|SimpleVersionedWritable
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Test 2: Check that AdvancedVersionedWritable Works (well, why wouldn't it!). */
DECL|method|testAdvancedVersionedWritable ()
specifier|public
name|void
name|testAdvancedVersionedWritable
parameter_list|()
throws|throws
name|Exception
block|{
name|TestWritable
operator|.
name|testWritable
argument_list|(
operator|new
name|AdvancedVersionedWritable
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Test 3: Check that SimpleVersionedWritable throws an Exception. */
DECL|method|testSimpleVersionedWritableMismatch ()
specifier|public
name|void
name|testSimpleVersionedWritableMismatch
parameter_list|()
throws|throws
name|Exception
block|{
name|TestVersionedWritable
operator|.
name|testVersionedWritable
argument_list|(
operator|new
name|SimpleVersionedWritable
argument_list|()
argument_list|,
operator|new
name|SimpleVersionedWritableV2
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Utility method for testing VersionedWritables. */
DECL|method|testVersionedWritable (Writable before, Writable after)
specifier|public
specifier|static
name|void
name|testVersionedWritable
parameter_list|(
name|Writable
name|before
parameter_list|,
name|Writable
name|after
parameter_list|)
throws|throws
name|Exception
block|{
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|before
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|after
operator|.
name|readFields
argument_list|(
name|dib
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionMismatchException
name|vmme
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Good, we expected this:"
operator|+
name|vmme
argument_list|)
expr_stmt|;
return|return;
block|}
throw|throw
operator|new
name|Exception
argument_list|(
literal|"A Version Mismatch Didn't Happen!"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

