begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * Test case for the use of Protocol Buffers within ObjectWritable.  */
end_comment

begin_class
DECL|class|TestObjectWritableProtos
specifier|public
class|class
name|TestObjectWritableProtos
block|{
annotation|@
name|Test
DECL|method|testProtoBufs ()
specifier|public
name|void
name|testProtoBufs
parameter_list|()
throws|throws
name|IOException
block|{
name|doTest
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProtoBufs2 ()
specifier|public
name|void
name|testProtoBufs2
parameter_list|()
throws|throws
name|IOException
block|{
name|doTest
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProtoBufs3 ()
specifier|public
name|void
name|testProtoBufs3
parameter_list|()
throws|throws
name|IOException
block|{
name|doTest
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write a protobuf to a buffer 'numProtos' times, and then    * read them back, making sure all data comes through correctly.    */
DECL|method|doTest (int numProtos)
specifier|private
name|void
name|doTest
parameter_list|(
name|int
name|numProtos
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
comment|// Write numProtos protobufs to the buffer
name|Message
index|[]
name|sent
init|=
operator|new
name|Message
index|[
name|numProtos
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numProtos
condition|;
name|i
operator|++
control|)
block|{
comment|// Construct a test protocol buffer using one of the
comment|// protos that ships with the protobuf library
name|Message
name|testProto
init|=
name|DescriptorProtos
operator|.
name|EnumValueDescriptorProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
operator|.
name|setNumber
argument_list|(
name|i
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ObjectWritable
operator|.
name|writeObject
argument_list|(
name|out
argument_list|,
name|testProto
argument_list|,
name|DescriptorProtos
operator|.
name|EnumValueDescriptorProto
operator|.
name|class
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|sent
index|[
name|i
index|]
operator|=
name|testProto
expr_stmt|;
block|}
comment|// Read back the data
name|DataInputBuffer
name|in
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numProtos
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|received
init|=
operator|(
name|Message
operator|)
name|ObjectWritable
operator|.
name|readObject
argument_list|(
name|in
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sent
index|[
name|i
index|]
argument_list|,
name|received
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

