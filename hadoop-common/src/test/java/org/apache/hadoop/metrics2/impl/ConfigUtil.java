begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|configuration
operator|.
name|PropertiesConfiguration
import|;
end_import

begin_comment
comment|/**  * Helpers for config tests and debugging  */
end_comment

begin_class
DECL|class|ConfigUtil
class|class
name|ConfigUtil
block|{
DECL|method|dump (Configuration c)
specifier|static
name|void
name|dump
parameter_list|(
name|Configuration
name|c
parameter_list|)
block|{
name|dump
argument_list|(
literal|null
argument_list|,
name|c
argument_list|,
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|dump (String header, Configuration c)
specifier|static
name|void
name|dump
parameter_list|(
name|String
name|header
parameter_list|,
name|Configuration
name|c
parameter_list|)
block|{
name|dump
argument_list|(
name|header
argument_list|,
name|c
argument_list|,
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|dump (String header, Configuration c, PrintStream out)
specifier|static
name|void
name|dump
parameter_list|(
name|String
name|header
parameter_list|,
name|Configuration
name|c
parameter_list|,
name|PrintStream
name|out
parameter_list|)
block|{
name|PropertiesConfiguration
name|p
init|=
operator|new
name|PropertiesConfiguration
argument_list|()
decl_stmt|;
name|p
operator|.
name|copy
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|p
operator|.
name|save
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error saving config"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|assertEq (Configuration expected, Configuration actual)
specifier|static
name|void
name|assertEq
parameter_list|(
name|Configuration
name|expected
parameter_list|,
name|Configuration
name|actual
parameter_list|)
block|{
comment|// Check that the actual config contains all the properties of the expected
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|expected
operator|.
name|getKeys
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"actual should contain "
operator|+
name|key
argument_list|,
name|actual
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value of "
operator|+
name|key
argument_list|,
name|expected
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|,
name|actual
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check that the actual config has no extra properties
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|actual
operator|.
name|getKeys
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected should contain "
operator|+
name|key
argument_list|,
name|expected
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

