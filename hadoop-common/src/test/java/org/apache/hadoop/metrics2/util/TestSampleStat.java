begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test the running sample stat computation  */
end_comment

begin_class
DECL|class|TestSampleStat
specifier|public
class|class
name|TestSampleStat
block|{
DECL|field|EPSILON
specifier|private
specifier|static
specifier|final
name|double
name|EPSILON
init|=
literal|1e-42
decl_stmt|;
comment|/**    * Some simple use cases    */
DECL|method|testSimple ()
annotation|@
name|Test
specifier|public
name|void
name|testSimple
parameter_list|()
block|{
name|SampleStat
name|stat
init|=
operator|new
name|SampleStat
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"num samples"
argument_list|,
literal|0
argument_list|,
name|stat
operator|.
name|numSamples
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mean"
argument_list|,
literal|0.0
argument_list|,
name|stat
operator|.
name|mean
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"variance"
argument_list|,
literal|0.0
argument_list|,
name|stat
operator|.
name|variance
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"stddev"
argument_list|,
literal|0.0
argument_list|,
name|stat
operator|.
name|stddev
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"min"
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|,
name|stat
operator|.
name|min
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max"
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|,
name|stat
operator|.
name|max
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|stat
operator|.
name|add
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"num samples"
argument_list|,
literal|1L
argument_list|,
name|stat
operator|.
name|numSamples
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mean"
argument_list|,
literal|3.0
argument_list|,
name|stat
operator|.
name|mean
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"variance"
argument_list|,
literal|0.0
argument_list|,
name|stat
operator|.
name|variance
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"stddev"
argument_list|,
literal|0.0
argument_list|,
name|stat
operator|.
name|stddev
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"min"
argument_list|,
literal|3.0
argument_list|,
name|stat
operator|.
name|min
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max"
argument_list|,
literal|3.0
argument_list|,
name|stat
operator|.
name|max
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|stat
operator|.
name|add
argument_list|(
literal|2
argument_list|)
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"num samples"
argument_list|,
literal|3L
argument_list|,
name|stat
operator|.
name|numSamples
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mean"
argument_list|,
literal|2.0
argument_list|,
name|stat
operator|.
name|mean
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"variance"
argument_list|,
literal|1.0
argument_list|,
name|stat
operator|.
name|variance
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"stddev"
argument_list|,
literal|1.0
argument_list|,
name|stat
operator|.
name|stddev
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"min"
argument_list|,
literal|1.0
argument_list|,
name|stat
operator|.
name|min
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max"
argument_list|,
literal|3.0
argument_list|,
name|stat
operator|.
name|max
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|stat
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"num samples"
argument_list|,
literal|0
argument_list|,
name|stat
operator|.
name|numSamples
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mean"
argument_list|,
literal|0.0
argument_list|,
name|stat
operator|.
name|mean
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"variance"
argument_list|,
literal|0.0
argument_list|,
name|stat
operator|.
name|variance
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"stddev"
argument_list|,
literal|0.0
argument_list|,
name|stat
operator|.
name|stddev
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"min"
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|,
name|stat
operator|.
name|min
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max"
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|,
name|stat
operator|.
name|max
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

