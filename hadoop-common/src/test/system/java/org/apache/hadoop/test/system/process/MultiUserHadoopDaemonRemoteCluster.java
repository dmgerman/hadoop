begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version  * 2.0 (the "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or  * implied. See the License for the specific language governing  * permissions and limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.test.system.process
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|process
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|process
operator|.
name|HadoopDaemonRemoteCluster
operator|.
name|HadoopDaemonInfo
import|;
end_import

begin_class
DECL|class|MultiUserHadoopDaemonRemoteCluster
specifier|public
specifier|abstract
class|class
name|MultiUserHadoopDaemonRemoteCluster
extends|extends
name|HadoopDaemonRemoteCluster
block|{
DECL|method|MultiUserHadoopDaemonRemoteCluster (List<HadoopDaemonInfo> daemonInfos)
specifier|public
name|MultiUserHadoopDaemonRemoteCluster
parameter_list|(
name|List
argument_list|<
name|HadoopDaemonInfo
argument_list|>
name|daemonInfos
parameter_list|)
block|{
name|super
argument_list|(
name|daemonInfos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProcessManager ( HadoopDaemonInfo info, String hostName)
specifier|protected
name|RemoteProcess
name|getProcessManager
parameter_list|(
name|HadoopDaemonInfo
name|info
parameter_list|,
name|String
name|hostName
parameter_list|)
block|{
return|return
operator|new
name|MultiUserScriptDaemon
argument_list|(
name|info
operator|.
name|cmd
argument_list|,
name|hostName
argument_list|,
name|info
operator|.
name|role
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isMultiUserSupported ()
specifier|public
name|boolean
name|isMultiUserSupported
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
DECL|class|MultiUserScriptDaemon
class|class
name|MultiUserScriptDaemon
extends|extends
name|ScriptDaemon
block|{
DECL|field|MULTI_USER_BINARY_PATH_KEY
specifier|private
specifier|static
specifier|final
name|String
name|MULTI_USER_BINARY_PATH_KEY
init|=
literal|"test.system.hdrc.multi-user.binary.path"
decl_stmt|;
DECL|field|MULTI_USER_MANAGING_USER
specifier|private
specifier|static
specifier|final
name|String
name|MULTI_USER_MANAGING_USER
init|=
literal|"test.system.hdrc.multi-user.managinguser."
decl_stmt|;
DECL|field|binaryPath
specifier|private
name|String
name|binaryPath
decl_stmt|;
comment|/**      * Manging user for a particular daemon is gotten by      * MULTI_USER_MANAGING_USER + daemonname      */
DECL|field|mangingUser
specifier|private
name|String
name|mangingUser
decl_stmt|;
DECL|method|MultiUserScriptDaemon ( String daemonName, String hostName, Enum<?> role)
specifier|public
name|MultiUserScriptDaemon
parameter_list|(
name|String
name|daemonName
parameter_list|,
name|String
name|hostName
parameter_list|,
name|Enum
argument_list|<
name|?
argument_list|>
name|role
parameter_list|)
block|{
name|super
argument_list|(
name|daemonName
argument_list|,
name|hostName
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|initialize
argument_list|(
name|daemonName
argument_list|)
expr_stmt|;
block|}
DECL|method|initialize (String daemonName)
specifier|private
name|void
name|initialize
parameter_list|(
name|String
name|daemonName
parameter_list|)
block|{
name|binaryPath
operator|=
name|conf
operator|.
name|get
argument_list|(
name|MULTI_USER_BINARY_PATH_KEY
argument_list|)
expr_stmt|;
if|if
condition|(
name|binaryPath
operator|==
literal|null
operator|||
name|binaryPath
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Binary path for multi-user path is not present. Please set "
operator|+
name|MULTI_USER_BINARY_PATH_KEY
operator|+
literal|" correctly"
argument_list|)
throw|;
block|}
name|File
name|binaryFile
init|=
operator|new
name|File
argument_list|(
name|binaryPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|binaryFile
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|binaryFile
operator|.
name|canExecute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Binary file path is not configured correctly. Please set "
operator|+
name|MULTI_USER_BINARY_PATH_KEY
operator|+
literal|" to properly configured binary file."
argument_list|)
throw|;
block|}
name|mangingUser
operator|=
name|conf
operator|.
name|get
argument_list|(
name|MULTI_USER_MANAGING_USER
operator|+
name|daemonName
argument_list|)
expr_stmt|;
if|if
condition|(
name|mangingUser
operator|==
literal|null
operator|||
name|mangingUser
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Manging user for daemon not present please set : "
operator|+
name|MULTI_USER_MANAGING_USER
operator|+
name|daemonName
operator|+
literal|" to correct value."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCommand (String command,String confDir)
specifier|protected
name|String
index|[]
name|getCommand
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|confDir
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|commandList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|commandList
operator|.
name|add
argument_list|(
name|binaryPath
argument_list|)
expr_stmt|;
name|commandList
operator|.
name|add
argument_list|(
name|mangingUser
argument_list|)
expr_stmt|;
name|commandList
operator|.
name|add
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
name|commandList
operator|.
name|add
argument_list|(
literal|"--config "
operator|+
name|confDir
operator|+
literal|" "
operator|+
name|command
operator|+
literal|" "
operator|+
name|daemonName
argument_list|)
expr_stmt|;
return|return
operator|(
name|String
index|[]
operator|)
name|commandList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|commandList
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

