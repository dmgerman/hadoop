begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * This is a wrapper class.  It wraps a Writable implementation around  * an array of primitives (e.g., int[], long[], etc.), with optimized   * wire format, and without creating new objects per element.  *   * This is a wrapper class only; it does not make a copy of the   * underlying array.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|ArrayPrimitiveWritable
specifier|public
class|class
name|ArrayPrimitiveWritable
implements|implements
name|Writable
block|{
comment|//componentType is determined from the component type of the value array
comment|//during a "set" operation.  It must be primitive.
DECL|field|componentType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|componentType
init|=
literal|null
decl_stmt|;
comment|//declaredComponentType need not be declared, but if you do (by using the
comment|//ArrayPrimitiveWritable(Class<?>) constructor), it will provide typechecking
comment|//for all "set" operations.
DECL|field|declaredComponentType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|declaredComponentType
init|=
literal|null
decl_stmt|;
DECL|field|length
specifier|private
name|int
name|length
decl_stmt|;
DECL|field|value
specifier|private
name|Object
name|value
decl_stmt|;
comment|//must be an array of<componentType>[length]
DECL|field|PRIMITIVE_NAMES
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|PRIMITIVE_NAMES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
literal|16
argument_list|)
decl_stmt|;
static|static
block|{
name|PRIMITIVE_NAMES
operator|.
name|put
argument_list|(
name|boolean
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_NAMES
operator|.
name|put
argument_list|(
name|byte
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_NAMES
operator|.
name|put
argument_list|(
name|char
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|char
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_NAMES
operator|.
name|put
argument_list|(
name|short
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|short
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_NAMES
operator|.
name|put
argument_list|(
name|int
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_NAMES
operator|.
name|put
argument_list|(
name|long
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_NAMES
operator|.
name|put
argument_list|(
name|float
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|float
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_NAMES
operator|.
name|put
argument_list|(
name|double
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|double
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|getPrimitiveClass (String className)
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getPrimitiveClass
parameter_list|(
name|String
name|className
parameter_list|)
block|{
return|return
name|PRIMITIVE_NAMES
operator|.
name|get
argument_list|(
name|className
argument_list|)
return|;
block|}
DECL|method|checkPrimitive (Class<?> componentType)
specifier|private
specifier|static
name|void
name|checkPrimitive
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|componentType
parameter_list|)
block|{
if|if
condition|(
name|componentType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"null component type not allowed"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|PRIMITIVE_NAMES
operator|.
name|containsKey
argument_list|(
name|componentType
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"input array component type "
operator|+
name|componentType
operator|.
name|getName
argument_list|()
operator|+
literal|" is not a candidate primitive type"
argument_list|)
throw|;
block|}
block|}
DECL|method|checkDeclaredComponentType (Class<?> componentType)
specifier|private
name|void
name|checkDeclaredComponentType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|componentType
parameter_list|)
block|{
if|if
condition|(
operator|(
name|declaredComponentType
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|componentType
operator|!=
name|declaredComponentType
operator|)
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"input array component type "
operator|+
name|componentType
operator|.
name|getName
argument_list|()
operator|+
literal|" does not match declared type "
operator|+
name|declaredComponentType
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|checkArray (Object value)
specifier|private
specifier|static
name|void
name|checkArray
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"null value not allowed"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"non-array value of class "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|+
literal|" not allowed"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Construct an empty instance, for use during Writable read    */
DECL|method|ArrayPrimitiveWritable ()
specifier|public
name|ArrayPrimitiveWritable
parameter_list|()
block|{
comment|//empty constructor
block|}
comment|/**    * Construct an instance of known type but no value yet    * for use with type-specific wrapper classes    */
DECL|method|ArrayPrimitiveWritable (Class<?> componentType)
specifier|public
name|ArrayPrimitiveWritable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|componentType
parameter_list|)
block|{
name|checkPrimitive
argument_list|(
name|componentType
argument_list|)
expr_stmt|;
name|this
operator|.
name|declaredComponentType
operator|=
name|componentType
expr_stmt|;
block|}
comment|/**    * Wrap an existing array of primitives    * @param value - array of primitives    */
DECL|method|ArrayPrimitiveWritable (Object value)
specifier|public
name|ArrayPrimitiveWritable
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the original array.      * Client must cast it back to type componentType[]    * (or may use type-specific wrapper classes).    * @return - original array as Object    */
DECL|method|get ()
specifier|public
name|Object
name|get
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|getComponentType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getComponentType
parameter_list|()
block|{
return|return
name|componentType
return|;
block|}
DECL|method|getDeclaredComponentType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getDeclaredComponentType
parameter_list|()
block|{
return|return
name|declaredComponentType
return|;
block|}
DECL|method|isDeclaredComponentType (Class<?> componentType)
specifier|public
name|boolean
name|isDeclaredComponentType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|componentType
parameter_list|)
block|{
return|return
name|componentType
operator|==
name|declaredComponentType
return|;
block|}
DECL|method|set (Object value)
specifier|public
name|void
name|set
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|checkArray
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|componentType
init|=
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
name|checkPrimitive
argument_list|(
name|componentType
argument_list|)
expr_stmt|;
name|checkDeclaredComponentType
argument_list|(
name|componentType
argument_list|)
expr_stmt|;
name|this
operator|.
name|componentType
operator|=
name|componentType
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|Array
operator|.
name|getLength
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Do not use this class.    * This is an internal class, purely for ObjectWritable to use as    * a label class for transparent conversions of arrays of primitives    * during wire protocol reads and writes.    */
DECL|class|Internal
specifier|static
class|class
name|Internal
extends|extends
name|ArrayPrimitiveWritable
block|{
DECL|method|Internal ()
name|Internal
parameter_list|()
block|{
comment|//use for reads
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|Internal (Object value)
name|Internal
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
comment|//use for writes
name|super
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|//end Internal subclass declaration
comment|/*     * @see org.apache.hadoop.io.Writable#write(java.io.DataOutput)    */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// write componentType
name|UTF8
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|componentType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// write length
name|out
operator|.
name|writeInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
comment|// do the inner loop.  Walk the decision tree only once.
if|if
condition|(
name|componentType
operator|==
name|Boolean
operator|.
name|TYPE
condition|)
block|{
comment|// boolean
name|writeBooleanArray
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|componentType
operator|==
name|Character
operator|.
name|TYPE
condition|)
block|{
comment|// char
name|writeCharArray
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|componentType
operator|==
name|Byte
operator|.
name|TYPE
condition|)
block|{
comment|// byte
name|writeByteArray
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|componentType
operator|==
name|Short
operator|.
name|TYPE
condition|)
block|{
comment|// short
name|writeShortArray
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|componentType
operator|==
name|Integer
operator|.
name|TYPE
condition|)
block|{
comment|// int
name|writeIntArray
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|componentType
operator|==
name|Long
operator|.
name|TYPE
condition|)
block|{
comment|// long
name|writeLongArray
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|componentType
operator|==
name|Float
operator|.
name|TYPE
condition|)
block|{
comment|// float
name|writeFloatArray
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|componentType
operator|==
name|Double
operator|.
name|TYPE
condition|)
block|{
comment|// double
name|writeDoubleArray
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Component type "
operator|+
name|componentType
operator|.
name|toString
argument_list|()
operator|+
literal|" is set as the output type, but no encoding is implemented for this type."
argument_list|)
throw|;
block|}
block|}
comment|/*     * @see org.apache.hadoop.io.Writable#readFields(java.io.DataInput)    */
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// read and set the component type of the array
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|String
name|className
init|=
name|UTF8
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|componentType
init|=
name|getPrimitiveClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|componentType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"encoded array component type "
operator|+
name|className
operator|+
literal|" is not a candidate primitive type"
argument_list|)
throw|;
block|}
name|checkDeclaredComponentType
argument_list|(
name|componentType
argument_list|)
expr_stmt|;
name|this
operator|.
name|componentType
operator|=
name|componentType
expr_stmt|;
comment|// read and set the length of the array
name|int
name|length
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"encoded array length is negative "
operator|+
name|length
argument_list|)
throw|;
block|}
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
comment|// construct and read in the array
name|value
operator|=
name|Array
operator|.
name|newInstance
argument_list|(
name|componentType
argument_list|,
name|length
argument_list|)
expr_stmt|;
comment|// do the inner loop.  Walk the decision tree only once.
if|if
condition|(
name|componentType
operator|==
name|Boolean
operator|.
name|TYPE
condition|)
block|{
comment|// boolean
name|readBooleanArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|componentType
operator|==
name|Character
operator|.
name|TYPE
condition|)
block|{
comment|// char
name|readCharArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|componentType
operator|==
name|Byte
operator|.
name|TYPE
condition|)
block|{
comment|// byte
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|componentType
operator|==
name|Short
operator|.
name|TYPE
condition|)
block|{
comment|// short
name|readShortArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|componentType
operator|==
name|Integer
operator|.
name|TYPE
condition|)
block|{
comment|// int
name|readIntArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|componentType
operator|==
name|Long
operator|.
name|TYPE
condition|)
block|{
comment|// long
name|readLongArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|componentType
operator|==
name|Float
operator|.
name|TYPE
condition|)
block|{
comment|// float
name|readFloatArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|componentType
operator|==
name|Double
operator|.
name|TYPE
condition|)
block|{
comment|// double
name|readDoubleArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Encoded type "
operator|+
name|className
operator|+
literal|" converted to valid component type "
operator|+
name|componentType
operator|.
name|toString
argument_list|()
operator|+
literal|" but no encoding is implemented for this type."
argument_list|)
throw|;
block|}
block|}
comment|//For efficient implementation, there's no way around
comment|//the following massive code duplication.
DECL|method|writeBooleanArray (DataOutput out)
specifier|private
name|void
name|writeBooleanArray
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
index|[]
name|v
init|=
operator|(
name|boolean
index|[]
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|out
operator|.
name|writeBoolean
argument_list|(
name|v
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|writeCharArray (DataOutput out)
specifier|private
name|void
name|writeCharArray
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|char
index|[]
name|v
init|=
operator|(
name|char
index|[]
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|out
operator|.
name|writeChar
argument_list|(
name|v
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|writeByteArray (DataOutput out)
specifier|private
name|void
name|writeByteArray
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|value
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|writeShortArray (DataOutput out)
specifier|private
name|void
name|writeShortArray
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|short
index|[]
name|v
init|=
operator|(
name|short
index|[]
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|out
operator|.
name|writeShort
argument_list|(
name|v
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|writeIntArray (DataOutput out)
specifier|private
name|void
name|writeIntArray
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|int
index|[]
name|v
init|=
operator|(
name|int
index|[]
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|out
operator|.
name|writeInt
argument_list|(
name|v
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|writeLongArray (DataOutput out)
specifier|private
name|void
name|writeLongArray
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|long
index|[]
name|v
init|=
operator|(
name|long
index|[]
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|out
operator|.
name|writeLong
argument_list|(
name|v
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFloatArray (DataOutput out)
specifier|private
name|void
name|writeFloatArray
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|float
index|[]
name|v
init|=
operator|(
name|float
index|[]
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|out
operator|.
name|writeFloat
argument_list|(
name|v
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|writeDoubleArray (DataOutput out)
specifier|private
name|void
name|writeDoubleArray
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|double
index|[]
name|v
init|=
operator|(
name|double
index|[]
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|out
operator|.
name|writeDouble
argument_list|(
name|v
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|readBooleanArray (DataInput in)
specifier|private
name|void
name|readBooleanArray
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
index|[]
name|v
init|=
operator|(
name|boolean
index|[]
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|v
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
DECL|method|readCharArray (DataInput in)
specifier|private
name|void
name|readCharArray
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|char
index|[]
name|v
init|=
operator|(
name|char
index|[]
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|v
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
DECL|method|readByteArray (DataInput in)
specifier|private
name|void
name|readByteArray
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|readFully
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|value
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|readShortArray (DataInput in)
specifier|private
name|void
name|readShortArray
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|short
index|[]
name|v
init|=
operator|(
name|short
index|[]
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|v
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readShort
argument_list|()
expr_stmt|;
block|}
DECL|method|readIntArray (DataInput in)
specifier|private
name|void
name|readIntArray
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
index|[]
name|v
init|=
operator|(
name|int
index|[]
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|v
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
DECL|method|readLongArray (DataInput in)
specifier|private
name|void
name|readLongArray
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|long
index|[]
name|v
init|=
operator|(
name|long
index|[]
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|v
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
DECL|method|readFloatArray (DataInput in)
specifier|private
name|void
name|readFloatArray
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|float
index|[]
name|v
init|=
operator|(
name|float
index|[]
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|v
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
block|}
DECL|method|readDoubleArray (DataInput in)
specifier|private
name|void
name|readDoubleArray
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|double
index|[]
name|v
init|=
operator|(
name|double
index|[]
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|v
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readDouble
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

