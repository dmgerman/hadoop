begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MsInfo
import|;
end_import

begin_comment
comment|/**  * An optional metrics registry class for creating and maintaining a  * collection of MetricsMutables, making writing metrics source easier.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|MetricsRegistry
specifier|public
class|class
name|MetricsRegistry
block|{
DECL|field|metricsMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MutableMetric
argument_list|>
name|metricsMap
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
DECL|field|tagsMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MetricsTag
argument_list|>
name|tagsMap
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
DECL|field|metricsInfo
specifier|private
specifier|final
name|MetricsInfo
name|metricsInfo
decl_stmt|;
comment|/**    * Construct the registry with a record name    * @param name  of the record of the metrics    */
DECL|method|MetricsRegistry (String name)
specifier|public
name|MetricsRegistry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|metricsInfo
operator|=
name|Interns
operator|.
name|info
argument_list|(
name|name
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct the registry with a metadata object    * @param info  the info object for the metrics record/group    */
DECL|method|MetricsRegistry (MetricsInfo info)
specifier|public
name|MetricsRegistry
parameter_list|(
name|MetricsInfo
name|info
parameter_list|)
block|{
name|metricsInfo
operator|=
name|info
expr_stmt|;
block|}
comment|/**    * @return the info object of the metrics registry    */
DECL|method|info ()
specifier|public
name|MetricsInfo
name|info
parameter_list|()
block|{
return|return
name|metricsInfo
return|;
block|}
comment|/**    * Get a metric by name    * @param name  of the metric    * @return the metric object    */
DECL|method|get (String name)
specifier|public
specifier|synchronized
name|MutableMetric
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|metricsMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Get a tag by name    * @param name  of the tag    * @return the tag object    */
DECL|method|getTag (String name)
specifier|public
specifier|synchronized
name|MetricsTag
name|getTag
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|tagsMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Create a mutable integer counter    * @param name  of the metric    * @param desc  metric description    * @param iVal  initial value    * @return a new counter object    */
DECL|method|newCounter (String name, String desc, int iVal)
specifier|public
name|MutableCounterInt
name|newCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|int
name|iVal
parameter_list|)
block|{
return|return
name|newCounter
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
argument_list|,
name|iVal
argument_list|)
return|;
block|}
comment|/**    * Create a mutable integer counter    * @param info  metadata of the metric    * @param iVal  initial value    * @return a new counter object    */
DECL|method|newCounter (MetricsInfo info, int iVal)
specifier|public
specifier|synchronized
name|MutableCounterInt
name|newCounter
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|int
name|iVal
parameter_list|)
block|{
name|checkMetricName
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|MutableCounterInt
name|ret
init|=
operator|new
name|MutableCounterInt
argument_list|(
name|info
argument_list|,
name|iVal
argument_list|)
decl_stmt|;
name|metricsMap
operator|.
name|put
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Create a mutable long integer counter    * @param name  of the metric    * @param desc  metric description    * @param iVal  initial value    * @return a new counter object    */
DECL|method|newCounter (String name, String desc, long iVal)
specifier|public
name|MutableCounterLong
name|newCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|long
name|iVal
parameter_list|)
block|{
return|return
name|newCounter
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
argument_list|,
name|iVal
argument_list|)
return|;
block|}
comment|/**    * Create a mutable long integer counter    * @param info  metadata of the metric    * @param iVal  initial value    * @return a new counter object    */
specifier|public
specifier|synchronized
DECL|method|newCounter (MetricsInfo info, long iVal)
name|MutableCounterLong
name|newCounter
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|long
name|iVal
parameter_list|)
block|{
name|checkMetricName
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|MutableCounterLong
name|ret
init|=
operator|new
name|MutableCounterLong
argument_list|(
name|info
argument_list|,
name|iVal
argument_list|)
decl_stmt|;
name|metricsMap
operator|.
name|put
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Create a mutable integer gauge    * @param name  of the metric    * @param desc  metric description    * @param iVal  initial value    * @return a new gauge object    */
DECL|method|newGauge (String name, String desc, int iVal)
specifier|public
name|MutableGaugeInt
name|newGauge
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|int
name|iVal
parameter_list|)
block|{
return|return
name|newGauge
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
argument_list|,
name|iVal
argument_list|)
return|;
block|}
comment|/**    * Create a mutable integer gauge    * @param info  metadata of the metric    * @param iVal  initial value    * @return a new gauge object    */
DECL|method|newGauge (MetricsInfo info, int iVal)
specifier|public
specifier|synchronized
name|MutableGaugeInt
name|newGauge
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|int
name|iVal
parameter_list|)
block|{
name|checkMetricName
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|MutableGaugeInt
name|ret
init|=
operator|new
name|MutableGaugeInt
argument_list|(
name|info
argument_list|,
name|iVal
argument_list|)
decl_stmt|;
name|metricsMap
operator|.
name|put
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Create a mutable long integer gauge    * @param name  of the metric    * @param desc  metric description    * @param iVal  initial value    * @return a new gauge object    */
DECL|method|newGauge (String name, String desc, long iVal)
specifier|public
name|MutableGaugeLong
name|newGauge
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|long
name|iVal
parameter_list|)
block|{
return|return
name|newGauge
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
argument_list|,
name|iVal
argument_list|)
return|;
block|}
comment|/**    * Create a mutable long integer gauge    * @param info  metadata of the metric    * @param iVal  initial value    * @return a new gauge object    */
DECL|method|newGauge (MetricsInfo info, long iVal)
specifier|public
specifier|synchronized
name|MutableGaugeLong
name|newGauge
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|long
name|iVal
parameter_list|)
block|{
name|checkMetricName
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|MutableGaugeLong
name|ret
init|=
operator|new
name|MutableGaugeLong
argument_list|(
name|info
argument_list|,
name|iVal
argument_list|)
decl_stmt|;
name|metricsMap
operator|.
name|put
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Create a mutable metric with stats    * @param name  of the metric    * @param desc  metric description    * @param sampleName  of the metric (e.g., "Ops")    * @param valueName   of the metric (e.g., "Time" or "Latency")    * @param extended    produce extended stat (stdev, min/max etc.) if true.    * @return a new mutable stat metric object    */
DECL|method|newStat (String name, String desc, String sampleName, String valueName, boolean extended)
specifier|public
specifier|synchronized
name|MutableStat
name|newStat
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|String
name|sampleName
parameter_list|,
name|String
name|valueName
parameter_list|,
name|boolean
name|extended
parameter_list|)
block|{
name|checkMetricName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|MutableStat
name|ret
init|=
operator|new
name|MutableStat
argument_list|(
name|name
argument_list|,
name|desc
argument_list|,
name|sampleName
argument_list|,
name|valueName
argument_list|,
name|extended
argument_list|)
decl_stmt|;
name|metricsMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Create a mutable metric with stats    * @param name  of the metric    * @param desc  metric description    * @param sampleName  of the metric (e.g., "Ops")    * @param valueName   of the metric (e.g., "Time" or "Latency")    * @return a new mutable metric object    */
DECL|method|newStat (String name, String desc, String sampleName, String valueName)
specifier|public
name|MutableStat
name|newStat
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|String
name|sampleName
parameter_list|,
name|String
name|valueName
parameter_list|)
block|{
return|return
name|newStat
argument_list|(
name|name
argument_list|,
name|desc
argument_list|,
name|sampleName
argument_list|,
name|valueName
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Create a mutable rate metric    * @param name  of the metric    * @return a new mutable metric object    */
DECL|method|newRate (String name)
specifier|public
name|MutableRate
name|newRate
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|newRate
argument_list|(
name|name
argument_list|,
name|name
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Create a mutable rate metric    * @param name  of the metric    * @param description of the metric    * @return a new mutable rate metric object    */
DECL|method|newRate (String name, String description)
specifier|public
name|MutableRate
name|newRate
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
block|{
return|return
name|newRate
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Create a mutable rate metric (for throughput measurement)    * @param name  of the metric    * @param desc  description    * @param extended  produce extended stat (stdev/min/max etc.) if true    * @return a new mutable rate metric object    */
DECL|method|newRate (String name, String desc, boolean extended)
specifier|public
name|MutableRate
name|newRate
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|boolean
name|extended
parameter_list|)
block|{
return|return
name|newRate
argument_list|(
name|name
argument_list|,
name|desc
argument_list|,
name|extended
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|newRate (String name, String desc, boolean extended, boolean returnExisting)
specifier|public
specifier|synchronized
name|MutableRate
name|newRate
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|boolean
name|extended
parameter_list|,
name|boolean
name|returnExisting
parameter_list|)
block|{
if|if
condition|(
name|returnExisting
condition|)
block|{
name|MutableMetric
name|rate
init|=
name|metricsMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|rate
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rate
operator|instanceof
name|MutableRate
condition|)
return|return
operator|(
name|MutableRate
operator|)
name|rate
return|;
throw|throw
operator|new
name|MetricsException
argument_list|(
literal|"Unexpected metrics type "
operator|+
name|rate
operator|.
name|getClass
argument_list|()
operator|+
literal|" for "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
name|checkMetricName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|MutableRate
name|ret
init|=
operator|new
name|MutableRate
argument_list|(
name|name
argument_list|,
name|desc
argument_list|,
name|extended
argument_list|)
decl_stmt|;
name|metricsMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|add (String name, MutableMetric metric)
specifier|synchronized
name|void
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|MutableMetric
name|metric
parameter_list|)
block|{
name|checkMetricName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|metricsMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|metric
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add sample to a stat metric by name.    * @param name  of the metric    * @param value of the snapshot to add    */
DECL|method|add (String name, long value)
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|MutableMetric
name|m
init|=
name|metricsMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|m
operator|instanceof
name|MutableStat
condition|)
block|{
operator|(
operator|(
name|MutableStat
operator|)
name|m
operator|)
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetricsException
argument_list|(
literal|"Unsupported add(value) for metric "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|metricsMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|newRate
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
comment|// default is a rate metric
name|add
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set the metrics context tag    * @param name of the context    * @return the registry itself as a convenience    */
DECL|method|setContext (String name)
specifier|public
name|MetricsRegistry
name|setContext
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|tag
argument_list|(
name|MsInfo
operator|.
name|Context
argument_list|,
name|name
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Add a tag to the metrics    * @param name  of the tag    * @param description of the tag    * @param value of the tag    * @return the registry (for keep adding tags)    */
DECL|method|tag (String name, String description, String value)
specifier|public
name|MetricsRegistry
name|tag
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|tag
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Add a tag to the metrics    * @param name  of the tag    * @param description of the tag    * @param value of the tag    * @param override  existing tag if true    * @return the registry (for keep adding tags)    */
DECL|method|tag (String name, String description, String value, boolean override)
specifier|public
name|MetricsRegistry
name|tag
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|override
parameter_list|)
block|{
return|return
name|tag
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
name|name
argument_list|,
name|description
argument_list|)
argument_list|,
name|value
argument_list|,
name|override
argument_list|)
return|;
block|}
comment|/**    * Add a tag to the metrics    * @param info  metadata of the tag    * @param value of the tag    * @param override existing tag if true    * @return the registry (for keep adding tags etc.)    */
specifier|public
specifier|synchronized
DECL|method|tag (MetricsInfo info, String value, boolean override)
name|MetricsRegistry
name|tag
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|override
parameter_list|)
block|{
if|if
condition|(
operator|!
name|override
condition|)
name|checkTagName
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|tagsMap
operator|.
name|put
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|,
name|Interns
operator|.
name|tag
argument_list|(
name|info
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|tag (MetricsInfo info, String value)
specifier|public
name|MetricsRegistry
name|tag
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|tag
argument_list|(
name|info
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|tags ()
name|Collection
argument_list|<
name|MetricsTag
argument_list|>
name|tags
parameter_list|()
block|{
return|return
name|tagsMap
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|metrics ()
name|Collection
argument_list|<
name|MutableMetric
argument_list|>
name|metrics
parameter_list|()
block|{
return|return
name|metricsMap
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|checkMetricName (String name)
specifier|private
name|void
name|checkMetricName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|metricsMap
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetricsException
argument_list|(
literal|"Metric name "
operator|+
name|name
operator|+
literal|" already exists!"
argument_list|)
throw|;
block|}
block|}
DECL|method|checkTagName (String name)
specifier|private
name|void
name|checkTagName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|tagsMap
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetricsException
argument_list|(
literal|"Tag "
operator|+
name|name
operator|+
literal|" already exists!"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sample all the mutable metrics and put the snapshot in the builder    * @param builder to contain the metrics snapshot    * @param all get all the metrics even if the values are not changed.    */
DECL|method|snapshot (MetricsRecordBuilder builder, boolean all)
specifier|public
specifier|synchronized
name|void
name|snapshot
parameter_list|(
name|MetricsRecordBuilder
name|builder
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
for|for
control|(
name|MetricsTag
name|tag
range|:
name|tags
argument_list|()
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MutableMetric
name|metric
range|:
name|metrics
argument_list|()
control|)
block|{
name|metric
operator|.
name|snapshot
argument_list|(
name|builder
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|toStringHelper
argument_list|(
name|this
argument_list|)
operator|.
name|add
argument_list|(
literal|"info"
argument_list|,
name|metricsInfo
argument_list|)
operator|.
name|add
argument_list|(
literal|"tags"
argument_list|,
name|tags
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"metrics"
argument_list|,
name|metrics
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

