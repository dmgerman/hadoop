begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.scm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableRate
import|;
end_import

begin_comment
comment|/**  * The client metrics for the Storage Container protocol.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Metrics
argument_list|(
name|about
operator|=
literal|"Storage Container Client Metrics"
argument_list|,
name|context
operator|=
literal|"dfs"
argument_list|)
DECL|class|XceiverClientMetrics
specifier|public
class|class
name|XceiverClientMetrics
block|{
DECL|field|SOURCE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SOURCE_NAME
init|=
name|XceiverClientMetrics
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
DECL|field|pendingOps
specifier|private
annotation|@
name|Metric
name|MutableCounterLong
name|pendingOps
decl_stmt|;
DECL|field|pendingOpsArray
specifier|private
name|MutableCounterLong
index|[]
name|pendingOpsArray
decl_stmt|;
DECL|field|containerOpsLatency
specifier|private
name|MutableRate
index|[]
name|containerOpsLatency
decl_stmt|;
DECL|field|registry
specifier|private
name|MetricsRegistry
name|registry
decl_stmt|;
DECL|method|XceiverClientMetrics ()
specifier|public
name|XceiverClientMetrics
parameter_list|()
block|{
name|int
name|numEnumEntries
init|=
name|ContainerProtos
operator|.
name|Type
operator|.
name|values
argument_list|()
operator|.
name|length
decl_stmt|;
name|this
operator|.
name|registry
operator|=
operator|new
name|MetricsRegistry
argument_list|(
name|SOURCE_NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|pendingOpsArray
operator|=
operator|new
name|MutableCounterLong
index|[
name|numEnumEntries
index|]
expr_stmt|;
name|this
operator|.
name|containerOpsLatency
operator|=
operator|new
name|MutableRate
index|[
name|numEnumEntries
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEnumEntries
condition|;
name|i
operator|++
control|)
block|{
name|pendingOpsArray
index|[
name|i
index|]
operator|=
name|registry
operator|.
name|newCounter
argument_list|(
literal|"numPending"
operator|+
name|ContainerProtos
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
literal|"number of pending"
operator|+
name|ContainerProtos
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|+
literal|" ops"
argument_list|,
operator|(
name|long
operator|)
literal|0
argument_list|)
expr_stmt|;
name|containerOpsLatency
index|[
name|i
index|]
operator|=
name|registry
operator|.
name|newRate
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|+
literal|"Latency"
argument_list|,
literal|"latency of "
operator|+
name|ContainerProtos
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|+
literal|" ops"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|create ()
specifier|public
specifier|static
name|XceiverClientMetrics
name|create
parameter_list|()
block|{
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
return|return
name|ms
operator|.
name|register
argument_list|(
name|SOURCE_NAME
argument_list|,
literal|"Storage Container Client Metrics"
argument_list|,
operator|new
name|XceiverClientMetrics
argument_list|()
argument_list|)
return|;
block|}
DECL|method|incrPendingContainerOpsMetrics (ContainerProtos.Type type)
specifier|public
name|void
name|incrPendingContainerOpsMetrics
parameter_list|(
name|ContainerProtos
operator|.
name|Type
name|type
parameter_list|)
block|{
name|pendingOps
operator|.
name|incr
argument_list|()
expr_stmt|;
name|pendingOpsArray
index|[
name|type
operator|.
name|ordinal
argument_list|()
index|]
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
DECL|method|decrPendingContainerOpsMetrics (ContainerProtos.Type type)
specifier|public
name|void
name|decrPendingContainerOpsMetrics
parameter_list|(
name|ContainerProtos
operator|.
name|Type
name|type
parameter_list|)
block|{
name|pendingOps
operator|.
name|incr
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|pendingOpsArray
index|[
name|type
operator|.
name|ordinal
argument_list|()
index|]
operator|.
name|incr
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|addContainerOpsLatency (ContainerProtos.Type type, long latencyNanos)
specifier|public
name|void
name|addContainerOpsLatency
parameter_list|(
name|ContainerProtos
operator|.
name|Type
name|type
parameter_list|,
name|long
name|latencyNanos
parameter_list|)
block|{
name|containerOpsLatency
index|[
name|type
operator|.
name|ordinal
argument_list|()
index|]
operator|.
name|add
argument_list|(
name|latencyNanos
argument_list|)
expr_stmt|;
block|}
DECL|method|getContainerOpsMetrics (ContainerProtos.Type type)
specifier|public
name|long
name|getContainerOpsMetrics
parameter_list|(
name|ContainerProtos
operator|.
name|Type
name|type
parameter_list|)
block|{
return|return
name|pendingOpsArray
index|[
name|type
operator|.
name|ordinal
argument_list|()
index|]
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|unRegister ()
specifier|public
name|void
name|unRegister
parameter_list|()
block|{
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
name|ms
operator|.
name|unregisterSource
argument_list|(
name|SOURCE_NAME
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

