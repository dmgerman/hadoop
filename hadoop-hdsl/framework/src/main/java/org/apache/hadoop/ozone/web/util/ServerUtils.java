begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpRequestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Generic utilities for all HDSL/Ozone servers.  */
end_comment

begin_class
DECL|class|ServerUtils
specifier|public
class|class
name|ServerUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ServerUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ServerUtils ()
specifier|private
name|ServerUtils
parameter_list|()
block|{   }
comment|/**    * Checks that a given value is with a range.    *    * For example, sanitizeUserArgs(17, 3, 5, 10)    * ensures that 17 is greater/equal than 3 * 5 and less/equal to 3 * 10.    *    * @param valueTocheck  - value to check    * @param baseValue     - the base value that is being used.    * @param minFactor     - range min - a 2 here makes us ensure that value    *                        valueTocheck is at least twice the baseValue.    * @param maxFactor     - range max    * @return long    */
DECL|method|sanitizeUserArgs (long valueTocheck, long baseValue, long minFactor, long maxFactor)
specifier|public
specifier|static
name|long
name|sanitizeUserArgs
parameter_list|(
name|long
name|valueTocheck
parameter_list|,
name|long
name|baseValue
parameter_list|,
name|long
name|minFactor
parameter_list|,
name|long
name|maxFactor
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|(
name|valueTocheck
operator|>=
operator|(
name|baseValue
operator|*
name|minFactor
operator|)
operator|)
operator|&&
operator|(
name|valueTocheck
operator|<=
operator|(
name|baseValue
operator|*
name|maxFactor
operator|)
operator|)
condition|)
block|{
return|return
name|valueTocheck
return|;
block|}
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%d is not within min = %d or max = "
operator|+
literal|"%d"
argument_list|,
name|valueTocheck
argument_list|,
name|baseValue
operator|*
name|minFactor
argument_list|,
name|baseValue
operator|*
name|maxFactor
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
comment|/**    * After starting an RPC server, updates configuration with the actual    * listening address of that server. The listening address may be different    * from the configured address if, for example, the configured address uses    * port 0 to request use of an ephemeral port.    *    * @param conf configuration to update    * @param rpcAddressKey configuration key for RPC server address    * @param addr configured address    * @param rpcServer started RPC server.    */
DECL|method|updateRPCListenAddress ( OzoneConfiguration conf, String rpcAddressKey, InetSocketAddress addr, RPC.Server rpcServer)
specifier|public
specifier|static
name|InetSocketAddress
name|updateRPCListenAddress
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|String
name|rpcAddressKey
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|RPC
operator|.
name|Server
name|rpcServer
parameter_list|)
block|{
return|return
name|updateListenAddress
argument_list|(
name|conf
argument_list|,
name|rpcAddressKey
argument_list|,
name|addr
argument_list|,
name|rpcServer
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * After starting an server, updates configuration with the actual    * listening address of that server. The listening address may be different    * from the configured address if, for example, the configured address uses    * port 0 to request use of an ephemeral port.    *    * @param conf       configuration to update    * @param addressKey configuration key for RPC server address    * @param addr       configured address    * @param listenAddr the real listening address.    */
DECL|method|updateListenAddress (OzoneConfiguration conf, String addressKey, InetSocketAddress addr, InetSocketAddress listenAddr)
specifier|public
specifier|static
name|InetSocketAddress
name|updateListenAddress
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|String
name|addressKey
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|InetSocketAddress
name|listenAddr
parameter_list|)
block|{
name|InetSocketAddress
name|updatedAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|listenAddr
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|addressKey
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
operator|+
literal|":"
operator|+
name|listenAddr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|updatedAddr
return|;
block|}
comment|/**    * Releases a http connection if the request is not null.    * @param request    */
DECL|method|releaseConnection (HttpRequestBase request)
specifier|public
specifier|static
name|void
name|releaseConnection
parameter_list|(
name|HttpRequestBase
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Checks and creates Ozone Metadir Path if it does not exist.    *    * @param conf - Configuration    *    * @return File MetaDir    */
DECL|method|getOzoneMetaDirPath (Configuration conf)
specifier|public
specifier|static
name|File
name|getOzoneMetaDirPath
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|metaDirPath
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|metaDirPath
argument_list|)
expr_stmt|;
name|File
name|dirPath
init|=
operator|new
name|File
argument_list|(
name|metaDirPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dirPath
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|dirPath
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to create paths. Path: "
operator|+
name|dirPath
argument_list|)
throw|;
block|}
return|return
name|dirPath
return|;
block|}
block|}
end_class

end_unit

