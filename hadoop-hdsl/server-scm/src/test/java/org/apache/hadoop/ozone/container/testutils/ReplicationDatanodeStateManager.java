begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.testutils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|testutils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReportsRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|node
operator|.
name|NodePoolManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdslProtos
operator|.
name|NodeState
operator|.
name|HEALTHY
import|;
end_import

begin_comment
comment|/**  * This class  manages the state of datanode  * in conjunction with the node pool and node managers.  */
end_comment

begin_class
DECL|class|ReplicationDatanodeStateManager
specifier|public
class|class
name|ReplicationDatanodeStateManager
block|{
DECL|field|nodeManager
specifier|private
specifier|final
name|NodeManager
name|nodeManager
decl_stmt|;
DECL|field|poolManager
specifier|private
specifier|final
name|NodePoolManager
name|poolManager
decl_stmt|;
DECL|field|r
specifier|private
specifier|final
name|Random
name|r
decl_stmt|;
comment|/**    * The datanode state Manager.    *    * @param nodeManager    * @param poolManager    */
DECL|method|ReplicationDatanodeStateManager (NodeManager nodeManager, NodePoolManager poolManager)
specifier|public
name|ReplicationDatanodeStateManager
parameter_list|(
name|NodeManager
name|nodeManager
parameter_list|,
name|NodePoolManager
name|poolManager
parameter_list|)
block|{
name|this
operator|.
name|nodeManager
operator|=
name|nodeManager
expr_stmt|;
name|this
operator|.
name|poolManager
operator|=
name|poolManager
expr_stmt|;
name|r
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get Container Report as if it is from a datanode in the cluster.    * @param containerName - Container Name.    * @param poolName - Pool Name.    * @param dataNodeCount - Datanode Count.    * @return List of Container Reports.    */
DECL|method|getContainerReport ( String containerName, String poolName, int dataNodeCount)
specifier|public
name|List
argument_list|<
name|ContainerReportsRequestProto
argument_list|>
name|getContainerReport
parameter_list|(
name|String
name|containerName
parameter_list|,
name|String
name|poolName
parameter_list|,
name|int
name|dataNodeCount
parameter_list|)
block|{
name|List
argument_list|<
name|ContainerReportsRequestProto
argument_list|>
name|containerList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|nodesInPool
init|=
name|poolManager
operator|.
name|getNodes
argument_list|(
name|poolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodesInPool
operator|==
literal|null
condition|)
block|{
return|return
name|containerList
return|;
block|}
if|if
condition|(
name|nodesInPool
operator|.
name|size
argument_list|()
operator|<
name|dataNodeCount
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Not enough datanodes to create "
operator|+
literal|"required container reports"
argument_list|)
throw|;
block|}
name|int
name|containerID
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|containerList
operator|.
name|size
argument_list|()
operator|<
name|dataNodeCount
operator|&&
name|nodesInPool
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DatanodeID
name|id
init|=
name|nodesInPool
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|nodesInPool
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|nodesInPool
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|containerID
operator|++
expr_stmt|;
comment|// We return container reports only for nodes that are healthy.
if|if
condition|(
name|nodeManager
operator|.
name|getNodeState
argument_list|(
name|id
argument_list|)
operator|==
name|HEALTHY
condition|)
block|{
name|ContainerInfo
name|info
init|=
name|ContainerInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|containerName
argument_list|)
operator|.
name|setFinalhash
argument_list|(
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|containerName
argument_list|)
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|containerID
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ContainerReportsRequestProto
name|containerReport
init|=
name|ContainerReportsRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addReports
argument_list|(
name|info
argument_list|)
operator|.
name|setDatanodeID
argument_list|(
name|id
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|ContainerReportsRequestProto
operator|.
name|reportType
operator|.
name|fullReport
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|containerList
operator|.
name|add
argument_list|(
name|containerReport
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|containerList
return|;
block|}
block|}
end_class

end_unit

