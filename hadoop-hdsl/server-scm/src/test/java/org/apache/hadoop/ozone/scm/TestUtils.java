begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|node
operator|.
name|SCMNodeManager
import|;
end_import

begin_comment
comment|/**  * Stateless helper functions to handler scm/datanode connection.  */
end_comment

begin_class
DECL|class|TestUtils
specifier|public
class|class
name|TestUtils
block|{
DECL|method|TestUtils ()
specifier|private
name|TestUtils
parameter_list|()
block|{   }
DECL|method|getDatanodeDetails (SCMNodeManager nodeManager)
specifier|public
specifier|static
name|DatanodeDetails
name|getDatanodeDetails
parameter_list|(
name|SCMNodeManager
name|nodeManager
parameter_list|)
block|{
return|return
name|getDatanodeDetails
argument_list|(
name|nodeManager
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create a new DatanodeDetails with NodeID set to the string.    *    * @param uuid - node ID, it is generally UUID.    * @return DatanodeID.    */
DECL|method|getDatanodeDetails (SCMNodeManager nodeManager, String uuid)
specifier|public
specifier|static
name|DatanodeDetails
name|getDatanodeDetails
parameter_list|(
name|SCMNodeManager
name|nodeManager
parameter_list|,
name|String
name|uuid
parameter_list|)
block|{
name|DatanodeDetails
name|datanodeDetails
init|=
name|getDatanodeDetails
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
name|nodeManager
operator|.
name|register
argument_list|(
name|datanodeDetails
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|datanodeDetails
return|;
block|}
comment|/**    * Get specified number of DatanodeDetails and registered them with node    * manager.    *    * @param nodeManager - node manager to register the datanode ids.    * @param count       - number of DatanodeDetails needed.    * @return    */
DECL|method|getListOfRegisteredDatanodeDetails ( SCMNodeManager nodeManager, int count)
specifier|public
specifier|static
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|getListOfRegisteredDatanodeDetails
parameter_list|(
name|SCMNodeManager
name|nodeManager
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|datanodes
operator|.
name|add
argument_list|(
name|getDatanodeDetails
argument_list|(
name|nodeManager
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|datanodes
return|;
block|}
comment|/**    * Get a datanode details.    *    * @return DatanodeDetails    */
DECL|method|getDatanodeDetails ()
specifier|public
specifier|static
name|DatanodeDetails
name|getDatanodeDetails
parameter_list|()
block|{
return|return
name|getDatanodeDetails
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getDatanodeDetails (String uuid)
specifier|private
specifier|static
name|DatanodeDetails
name|getDatanodeDetails
parameter_list|(
name|String
name|uuid
parameter_list|)
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|String
name|ipAddress
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
operator|+
literal|"."
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
operator|+
literal|"."
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
operator|+
literal|"."
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|String
name|hostName
init|=
name|uuid
decl_stmt|;
name|DatanodeDetails
operator|.
name|Builder
name|builder
init|=
name|DatanodeDetails
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setUuid
argument_list|(
name|uuid
argument_list|)
operator|.
name|setHostName
argument_list|(
literal|"localhost"
argument_list|)
operator|.
name|setIpAddress
argument_list|(
name|ipAddress
argument_list|)
operator|.
name|setInfoPort
argument_list|(
literal|0
argument_list|)
operator|.
name|setInfoSecurePort
argument_list|(
literal|0
argument_list|)
operator|.
name|setContainerPort
argument_list|(
literal|0
argument_list|)
operator|.
name|setRatisPort
argument_list|(
literal|0
argument_list|)
operator|.
name|setOzoneRestPort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Get specified number of list of DatanodeDetails.    *    * @param count - number of datanode IDs needed.    * @return    */
DECL|method|getListOfDatanodeDetails (int count)
specifier|public
specifier|static
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|getListOfDatanodeDetails
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|datanodes
operator|.
name|add
argument_list|(
name|getDatanodeDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|datanodes
return|;
block|}
block|}
end_class

end_unit

