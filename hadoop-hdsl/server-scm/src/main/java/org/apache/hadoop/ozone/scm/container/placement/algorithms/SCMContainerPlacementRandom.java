begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm.container.placement.algorithms
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Container placement policy that randomly chooses healthy datanodes.  * This is very similar to current HDFS placement. That is we  * just randomly place containers without any considerations of utilization.  *<p>  * That means we rely on balancer to achieve even distribution of data.  * Balancer will need to support containers as a feature before this class  * can be practically used.  */
end_comment

begin_class
DECL|class|SCMContainerPlacementRandom
specifier|public
specifier|final
class|class
name|SCMContainerPlacementRandom
extends|extends
name|SCMCommonPolicy
implements|implements
name|ContainerPlacementPolicy
block|{
annotation|@
name|VisibleForTesting
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SCMContainerPlacementRandom
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Construct a random Block Placement policy.    *    * @param nodeManager nodeManager    * @param conf Config    */
DECL|method|SCMContainerPlacementRandom (final NodeManager nodeManager, final Configuration conf)
specifier|public
name|SCMContainerPlacementRandom
parameter_list|(
specifier|final
name|NodeManager
name|nodeManager
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|nodeManager
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Choose datanodes called by the SCM to choose the datanode.    *    * @param nodesRequired - number of datanodes required.    * @param sizeRequired - size required for the container or block.    * @return List of Datanodes.    * @throws SCMException  SCMException    */
annotation|@
name|Override
DECL|method|chooseDatanodes ( final int nodesRequired, final long sizeRequired)
specifier|public
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|chooseDatanodes
parameter_list|(
specifier|final
name|int
name|nodesRequired
parameter_list|,
specifier|final
name|long
name|sizeRequired
parameter_list|)
throws|throws
name|SCMException
block|{
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|healthyNodes
init|=
name|super
operator|.
name|chooseDatanodes
argument_list|(
name|nodesRequired
argument_list|,
name|sizeRequired
argument_list|)
decl_stmt|;
if|if
condition|(
name|healthyNodes
operator|.
name|size
argument_list|()
operator|==
name|nodesRequired
condition|)
block|{
return|return
name|healthyNodes
return|;
block|}
return|return
name|getResultSet
argument_list|(
name|nodesRequired
argument_list|,
name|healthyNodes
argument_list|)
return|;
block|}
comment|/**    * Just chose a node randomly and remove it from the set of nodes we can    * chose from.    *    * @param healthyNodes - all healthy datanodes.    * @return one randomly chosen datanode that from two randomly chosen datanode    */
DECL|method|chooseNode (final List<DatanodeDetails> healthyNodes)
specifier|public
name|DatanodeDetails
name|chooseNode
parameter_list|(
specifier|final
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|healthyNodes
parameter_list|)
block|{
name|DatanodeDetails
name|selectedNode
init|=
name|healthyNodes
operator|.
name|get
argument_list|(
name|getRand
argument_list|()
operator|.
name|nextInt
argument_list|(
name|healthyNodes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|healthyNodes
operator|.
name|remove
argument_list|(
name|selectedNode
argument_list|)
expr_stmt|;
return|return
name|selectedNode
return|;
block|}
block|}
end_class

end_unit

