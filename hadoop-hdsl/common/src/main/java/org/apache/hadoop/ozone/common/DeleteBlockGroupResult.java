begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ScmBlockLocationProtocolProtos
operator|.
name|DeleteScmBlockResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ScmBlockLocationProtocolProtos
operator|.
name|DeleteScmBlockResult
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|DeleteBlockResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Result to delete a group of blocks.  */
end_comment

begin_class
DECL|class|DeleteBlockGroupResult
specifier|public
class|class
name|DeleteBlockGroupResult
block|{
DECL|field|objectKey
specifier|private
name|String
name|objectKey
decl_stmt|;
DECL|field|blockResultList
specifier|private
name|List
argument_list|<
name|DeleteBlockResult
argument_list|>
name|blockResultList
decl_stmt|;
DECL|method|DeleteBlockGroupResult (String objectKey, List<DeleteBlockResult> blockResultList)
specifier|public
name|DeleteBlockGroupResult
parameter_list|(
name|String
name|objectKey
parameter_list|,
name|List
argument_list|<
name|DeleteBlockResult
argument_list|>
name|blockResultList
parameter_list|)
block|{
name|this
operator|.
name|objectKey
operator|=
name|objectKey
expr_stmt|;
name|this
operator|.
name|blockResultList
operator|=
name|blockResultList
expr_stmt|;
block|}
DECL|method|getObjectKey ()
specifier|public
name|String
name|getObjectKey
parameter_list|()
block|{
return|return
name|objectKey
return|;
block|}
DECL|method|getBlockResultList ()
specifier|public
name|List
argument_list|<
name|DeleteBlockResult
argument_list|>
name|getBlockResultList
parameter_list|()
block|{
return|return
name|blockResultList
return|;
block|}
DECL|method|getBlockResultProtoList ()
specifier|public
name|List
argument_list|<
name|DeleteScmBlockResult
argument_list|>
name|getBlockResultProtoList
parameter_list|()
block|{
name|List
argument_list|<
name|DeleteScmBlockResult
argument_list|>
name|resultProtoList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|blockResultList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DeleteBlockResult
name|result
range|:
name|blockResultList
control|)
block|{
name|DeleteScmBlockResult
name|proto
init|=
name|DeleteScmBlockResult
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|result
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setResult
argument_list|(
name|result
operator|.
name|getResult
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|resultProtoList
operator|.
name|add
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
return|return
name|resultProtoList
return|;
block|}
DECL|method|convertBlockResultProto ( List<DeleteScmBlockResult> results)
specifier|public
specifier|static
name|List
argument_list|<
name|DeleteBlockResult
argument_list|>
name|convertBlockResultProto
parameter_list|(
name|List
argument_list|<
name|DeleteScmBlockResult
argument_list|>
name|results
parameter_list|)
block|{
name|List
argument_list|<
name|DeleteBlockResult
argument_list|>
name|protoResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DeleteScmBlockResult
name|result
range|:
name|results
control|)
block|{
name|protoResults
operator|.
name|add
argument_list|(
operator|new
name|DeleteBlockResult
argument_list|(
name|result
operator|.
name|getKey
argument_list|()
argument_list|,
name|result
operator|.
name|getResult
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|protoResults
return|;
block|}
comment|/**    * Only if all blocks are successfully deleted, this group is considered    * to be successfully executed.    *    * @return true if all blocks are successfully deleted, false otherwise.    */
DECL|method|isSuccess ()
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
for|for
control|(
name|DeleteBlockResult
name|result
range|:
name|blockResultList
control|)
block|{
if|if
condition|(
name|result
operator|.
name|getResult
argument_list|()
operator|!=
name|Result
operator|.
name|success
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * @return A list of deletion failed block IDs.    */
DECL|method|getFailedBlocks ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFailedBlocks
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|failedBlocks
init|=
name|blockResultList
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|result
lambda|->
name|result
operator|.
name|getResult
argument_list|()
operator|!=
name|Result
operator|.
name|success
argument_list|)
operator|.
name|map
argument_list|(
name|DeleteBlockResult
operator|::
name|getKey
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|failedBlocks
return|;
block|}
block|}
end_class

end_unit

