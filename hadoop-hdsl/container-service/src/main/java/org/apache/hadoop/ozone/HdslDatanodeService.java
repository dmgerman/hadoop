begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeServicePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|HdslUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|DatanodeStateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Datanode service plugin to start the HDSL container services.  */
end_comment

begin_class
DECL|class|HdslDatanodeService
specifier|public
class|class
name|HdslDatanodeService
implements|implements
name|DataNodeServicePlugin
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HdslDatanodeService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|isOzoneEnabled
specifier|private
specifier|final
name|boolean
name|isOzoneEnabled
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|datanodeDetails
specifier|private
name|DatanodeDetails
name|datanodeDetails
decl_stmt|;
DECL|field|datanodeStateMachine
specifier|private
name|DatanodeStateMachine
name|datanodeStateMachine
decl_stmt|;
DECL|method|HdslDatanodeService ()
specifier|public
name|HdslDatanodeService
parameter_list|()
block|{
try|try
block|{
name|OzoneConfiguration
operator|.
name|activate
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|isOzoneEnabled
operator|=
name|HdslUtils
operator|.
name|isHdslEnabled
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOzoneEnabled
condition|)
block|{
name|this
operator|.
name|datanodeDetails
operator|=
name|getDatanodeDetails
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|hostname
init|=
name|DataNode
operator|.
name|getHostName
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|ip
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|hostname
argument_list|)
operator|.
name|getHostAddress
argument_list|()
decl_stmt|;
name|this
operator|.
name|datanodeDetails
operator|.
name|setHostName
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
name|this
operator|.
name|datanodeDetails
operator|.
name|setIpAddress
argument_list|(
name|ip
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't start the HDSL datanode plugin"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|start (Object service)
specifier|public
name|void
name|start
parameter_list|(
name|Object
name|service
parameter_list|)
block|{
if|if
condition|(
name|isOzoneEnabled
condition|)
block|{
try|try
block|{
name|DataNode
name|dataNode
init|=
operator|(
name|DataNode
operator|)
name|service
decl_stmt|;
name|datanodeDetails
operator|.
name|setInfoPort
argument_list|(
name|dataNode
operator|.
name|getInfoPort
argument_list|()
argument_list|)
expr_stmt|;
name|datanodeDetails
operator|.
name|setInfoSecurePort
argument_list|(
name|dataNode
operator|.
name|getInfoSecurePort
argument_list|()
argument_list|)
expr_stmt|;
name|datanodeStateMachine
operator|=
operator|new
name|DatanodeStateMachine
argument_list|(
name|datanodeDetails
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|datanodeStateMachine
operator|.
name|startDaemon
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't start the HDSL datanode plugin"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Returns ContainerNodeIDProto or null in case of Error.    *    * @return ContainerNodeIDProto    */
DECL|method|getDatanodeDetails (Configuration conf)
specifier|private
specifier|static
name|DatanodeDetails
name|getDatanodeDetails
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|idFilePath
init|=
name|HdslUtils
operator|.
name|getDatanodeIdFilePath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|idFilePath
operator|==
literal|null
operator|||
name|idFilePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"A valid file path is needed for config setting {}"
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ID
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ID
operator|+
literal|" must be defined. See"
operator|+
literal|" https://wiki.apache.org/hadoop/Ozone#Configuration"
operator|+
literal|" for details on configuring Ozone."
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|idFilePath
argument_list|)
expr_stmt|;
name|File
name|idFile
init|=
operator|new
name|File
argument_list|(
name|idFilePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|idFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|ContainerUtils
operator|.
name|readDatanodeDetailsFrom
argument_list|(
name|idFile
argument_list|)
return|;
block|}
else|else
block|{
comment|// There is no datanode.id file, this might be the first time datanode
comment|// is started.
name|String
name|datanodeUuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|DatanodeDetails
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUuid
argument_list|(
name|datanodeUuid
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**    *    * Return DatanodeDetails if set, return null otherwise.    *    * @return DatanodeDetails    */
DECL|method|getDatanodeDetails ()
specifier|public
name|DatanodeDetails
name|getDatanodeDetails
parameter_list|()
block|{
return|return
name|datanodeDetails
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|getDatanodeStateMachine ()
specifier|public
name|DatanodeStateMachine
name|getDatanodeStateMachine
parameter_list|()
block|{
return|return
name|datanodeStateMachine
return|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|datanodeStateMachine
operator|!=
literal|null
condition|)
block|{
name|datanodeStateMachine
operator|.
name|stopDaemon
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{   }
block|}
end_class

end_unit

