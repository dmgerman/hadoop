begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.protocol.commands
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCloseContainerCmdResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCmdType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCmdType
operator|.
name|closeContainerCommand
import|;
end_import

begin_comment
comment|/**  * Asks datanode to close a container.  */
end_comment

begin_class
DECL|class|CloseContainerCommand
specifier|public
class|class
name|CloseContainerCommand
extends|extends
name|SCMCommand
argument_list|<
name|SCMCloseContainerCmdResponseProto
argument_list|>
block|{
DECL|field|containerName
specifier|private
name|String
name|containerName
decl_stmt|;
DECL|method|CloseContainerCommand (String containerName)
specifier|public
name|CloseContainerCommand
parameter_list|(
name|String
name|containerName
parameter_list|)
block|{
name|this
operator|.
name|containerName
operator|=
name|containerName
expr_stmt|;
block|}
comment|/**    * Returns the type of this command.    *    * @return Type    */
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|SCMCmdType
name|getType
parameter_list|()
block|{
return|return
name|closeContainerCommand
return|;
block|}
comment|/**    * Gets the protobuf message of this object.    *    * @return A protobuf message.    */
annotation|@
name|Override
DECL|method|getProtoBufMessage ()
specifier|public
name|byte
index|[]
name|getProtoBufMessage
parameter_list|()
block|{
return|return
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|getProto ()
specifier|public
name|SCMCloseContainerCmdResponseProto
name|getProto
parameter_list|()
block|{
return|return
name|SCMCloseContainerCmdResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|containerName
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getFromProtobuf ( SCMCloseContainerCmdResponseProto closeContainerProto)
specifier|public
specifier|static
name|CloseContainerCommand
name|getFromProtobuf
parameter_list|(
name|SCMCloseContainerCmdResponseProto
name|closeContainerProto
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|closeContainerProto
argument_list|)
expr_stmt|;
return|return
operator|new
name|CloseContainerCommand
argument_list|(
name|closeContainerProto
operator|.
name|getContainerName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getContainerName ()
specifier|public
name|String
name|getContainerName
parameter_list|()
block|{
return|return
name|containerName
return|;
block|}
block|}
end_class

end_unit

