begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeServicePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|HdslUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|DatanodeStateMachine
import|;
end_import

begin_comment
comment|/**  * Datanode service plugin to start the HDSL container services.  */
end_comment

begin_class
DECL|class|HdslServerPlugin
specifier|public
class|class
name|HdslServerPlugin
implements|implements
name|DataNodeServicePlugin
block|{
DECL|field|datanodeStateMachine
specifier|private
name|DatanodeStateMachine
name|datanodeStateMachine
decl_stmt|;
DECL|field|dataNode
specifier|private
name|DataNode
name|dataNode
decl_stmt|;
DECL|method|HdslServerPlugin ()
specifier|public
name|HdslServerPlugin
parameter_list|()
block|{
name|OzoneConfiguration
operator|.
name|activate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start (Object service)
specifier|public
name|void
name|start
parameter_list|(
name|Object
name|service
parameter_list|)
block|{
name|dataNode
operator|=
operator|(
name|DataNode
operator|)
name|service
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onDatanodeSuccessfulNamenodeRegisration ( DatanodeRegistration dataNodeId)
specifier|public
specifier|synchronized
name|void
name|onDatanodeSuccessfulNamenodeRegisration
parameter_list|(
name|DatanodeRegistration
name|dataNodeId
parameter_list|)
block|{
if|if
condition|(
name|HdslUtils
operator|.
name|isHdslEnabled
argument_list|(
name|dataNode
operator|.
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|datanodeStateMachine
operator|==
literal|null
condition|)
block|{
name|datanodeStateMachine
operator|=
operator|new
name|DatanodeStateMachine
argument_list|(
name|dataNodeId
argument_list|,
name|dataNode
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|datanodeStateMachine
operator|.
name|startDaemon
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't start the HDSL server plugin"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|datanodeStateMachine
operator|!=
literal|null
condition|)
block|{
name|datanodeStateMachine
operator|.
name|stopDaemon
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|getDatanodeStateMachine ()
specifier|public
name|DatanodeStateMachine
name|getDatanodeStateMachine
parameter_list|()
block|{
return|return
name|datanodeStateMachine
return|;
block|}
block|}
end_class

end_unit

