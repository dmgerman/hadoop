begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|HdslUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|server
operator|.
name|ServerUtils
operator|.
name|sanitizeUserArgs
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Hdsl stateless helper functions for server side components.  */
end_comment

begin_class
DECL|class|HdslServerUtil
specifier|public
class|class
name|HdslServerUtil
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HdslServerUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Retrieve the socket address that should be used by DataNodes to connect    * to the SCM.    *    * @param conf    * @return Target InetSocketAddress for the SCM service endpoint.    */
DECL|method|getScmAddressForDataNodes ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getScmAddressForDataNodes
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// We try the following settings in decreasing priority to retrieve the
comment|// target host.
comment|// - OZONE_SCM_DATANODE_ADDRESS_KEY
comment|// - OZONE_SCM_CLIENT_ADDRESS_KEY
comment|//
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ADDRESS_KEY
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|host
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
operator|+
literal|" must be defined. See"
operator|+
literal|" https://wiki.apache.org/hadoop/Ozone#Configuration "
operator|+
literal|"for details on configuring Ozone."
argument_list|)
throw|;
block|}
comment|// If no port number is specified then we'll just try the defaultBindPort.
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ADDRESS_KEY
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|get
argument_list|()
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_PORT_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|addr
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by clients to connect    * to the SCM.    *    * @param conf    * @return Target InetSocketAddress for the SCM client endpoint.    */
DECL|method|getScmClientBindAddress ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getScmClientBindAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_BIND_HOST_KEY
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_BIND_HOST_DEFAULT
argument_list|)
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by clients to connect    * to the SCM Block service.    *    * @param conf    * @return Target InetSocketAddress for the SCM block client endpoint.    */
DECL|method|getScmBlockClientBindAddress ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getScmBlockClientBindAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_BLOCK_CLIENT_BIND_HOST_KEY
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_BLOCK_CLIENT_BIND_HOST_DEFAULT
argument_list|)
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_BLOCK_CLIENT_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by DataNodes to connect    * to the SCM.    *    * @param conf    * @return Target InetSocketAddress for the SCM service endpoint.    */
DECL|method|getScmDataNodeBindAddress ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getScmDataNodeBindAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_BIND_HOST_KEY
argument_list|)
decl_stmt|;
comment|// If no port number is specified then we'll just try the defaultBindPort.
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_BIND_HOST_DEFAULT
argument_list|)
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns the interval in which the heartbeat processor thread runs.    *    * @param conf - Configuration    * @return long in Milliseconds.    */
DECL|method|getScmheartbeatCheckerInterval (Configuration conf)
specifier|public
specifier|static
name|long
name|getScmheartbeatCheckerInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
comment|/**    * Heartbeat Interval - Defines the heartbeat frequency from a datanode to    * SCM.    *    * @param conf - Ozone Config    * @return - HB interval in seconds.    */
DECL|method|getScmHeartbeatInterval (Configuration conf)
specifier|public
specifier|static
name|long
name|getScmHeartbeatInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_SCM_HEARTBEAT_INTERVAL
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARBEAT_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
comment|/**    * Get the Stale Node interval, which is used by SCM to flag a datanode as    * stale, if the heartbeat from that node has been missing for this duration.    *    * @param conf - Configuration.    * @return - Long, Milliseconds to wait before flagging a node as stale.    */
DECL|method|getStaleNodeInterval (Configuration conf)
specifier|public
specifier|static
name|long
name|getStaleNodeInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|staleNodeIntervalMs
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_SCM_STALENODE_INTERVAL
argument_list|,
name|OZONE_SCM_STALENODE_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|long
name|heartbeatThreadFrequencyMs
init|=
name|getScmheartbeatCheckerInterval
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|heartbeatIntervalMs
init|=
name|getScmHeartbeatInterval
argument_list|(
name|conf
argument_list|)
operator|*
literal|1000
decl_stmt|;
comment|// Make sure that StaleNodeInterval is configured way above the frequency
comment|// at which we run the heartbeat thread.
comment|//
comment|// Here we check that staleNodeInterval is at least five times more than the
comment|// frequency at which the accounting thread is going to run.
try|try
block|{
name|sanitizeUserArgs
argument_list|(
name|staleNodeIntervalMs
argument_list|,
name|heartbeatThreadFrequencyMs
argument_list|,
literal|5
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Stale Node Interval is cannot be honored due to "
operator|+
literal|"mis-configured {}. ex:  {}"
argument_list|,
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
comment|// Make sure that stale node value is greater than configured value that
comment|// datanodes are going to send HBs.
try|try
block|{
name|sanitizeUserArgs
argument_list|(
name|staleNodeIntervalMs
argument_list|,
name|heartbeatIntervalMs
argument_list|,
literal|3
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Stale Node Interval MS is cannot be honored due to "
operator|+
literal|"mis-configured {}. ex:  {}"
argument_list|,
name|OZONE_SCM_HEARTBEAT_INTERVAL
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
return|return
name|staleNodeIntervalMs
return|;
block|}
comment|/**    * Gets the interval for dead node flagging. This has to be a value that is    * greater than stale node value,  and by transitive relation we also know    * that this value is greater than heartbeat interval and heartbeatProcess    * Interval.    *    * @param conf - Configuration.    * @return - the interval for dead node flagging.    */
DECL|method|getDeadNodeInterval (Configuration conf)
specifier|public
specifier|static
name|long
name|getDeadNodeInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|staleNodeIntervalMs
init|=
name|getStaleNodeInterval
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|deadNodeIntervalMs
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_SCM_DEADNODE_INTERVAL
argument_list|,
name|OZONE_SCM_DEADNODE_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Make sure that dead nodes Ms is at least twice the time for staleNodes
comment|// with a max of 1000 times the staleNodes.
name|sanitizeUserArgs
argument_list|(
name|deadNodeIntervalMs
argument_list|,
name|staleNodeIntervalMs
argument_list|,
literal|2
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Dead Node Interval MS is cannot be honored due to "
operator|+
literal|"mis-configured {}. ex:  {}"
argument_list|,
name|OZONE_SCM_STALENODE_INTERVAL
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
return|return
name|deadNodeIntervalMs
return|;
block|}
comment|/**    * Returns the maximum number of heartbeat to process per loop of the process    * thread.    * @param conf Configuration    * @return - int -- Number of HBs to process    */
DECL|method|getMaxHBToProcessPerLoop (Configuration conf)
specifier|public
specifier|static
name|int
name|getMaxHBToProcessPerLoop
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_MAX_HB_COUNT_TO_PROCESS
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_MAX_HB_COUNT_TO_PROCESS_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Timeout value for the RPC from Datanode to SCM, primarily used for    * Heartbeats and container reports.    *    * @param conf - Ozone Config    * @return - Rpc timeout in Milliseconds.    */
DECL|method|getScmRpcTimeOutInMilliseconds (Configuration conf)
specifier|public
specifier|static
name|long
name|getScmRpcTimeOutInMilliseconds
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_SCM_HEARTBEAT_RPC_TIMEOUT
argument_list|,
name|OZONE_SCM_HEARTBEAT_RPC_TIMEOUT_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
comment|/**    * Log Warn interval.    *    * @param conf - Ozone Config    * @return - Log warn interval.    */
DECL|method|getLogWarnInterval (Configuration conf)
specifier|public
specifier|static
name|int
name|getLogWarnInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_SCM_HEARTBEAT_LOG_WARN_INTERVAL_COUNT
argument_list|,
name|OZONE_SCM_HEARTBEAT_LOG_WARN_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * returns the Container port.    * @param conf - Conf    * @return port number.    */
DECL|method|getContainerPort (Configuration conf)
specifier|public
specifier|static
name|int
name|getContainerPort
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_IPC_PORT
argument_list|,
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_IPC_PORT_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Return the list of service addresses for the Ozone SCM. This method is used    * by the DataNodes to determine the service instances to connect to.    *    * @param conf    * @return list of SCM service addresses.    */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
DECL|method|getScmServiceRpcAddresses (Configuration conf)
name|getScmServiceRpcAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
name|serviceInstances
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|serviceInstances
operator|.
name|put
argument_list|(
name|OZONE_SCM_SERVICE_INSTANCE_ID
argument_list|,
name|getScmAddressForDataNodes
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|services
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|services
operator|.
name|put
argument_list|(
name|OZONE_SCM_SERVICE_ID
argument_list|,
name|serviceInstances
argument_list|)
expr_stmt|;
return|return
name|services
return|;
block|}
block|}
end_class

end_unit

