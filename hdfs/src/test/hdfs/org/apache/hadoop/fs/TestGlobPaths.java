begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestGlobPaths
specifier|public
class|class
name|TestGlobPaths
extends|extends
name|TestCase
block|{
DECL|class|RegexPathFilter
specifier|static
class|class
name|RegexPathFilter
implements|implements
name|PathFilter
block|{
DECL|field|regex
specifier|private
specifier|final
name|String
name|regex
decl_stmt|;
DECL|method|RegexPathFilter (String regex)
specifier|public
name|RegexPathFilter
parameter_list|(
name|String
name|regex
parameter_list|)
block|{
name|this
operator|.
name|regex
operator|=
name|regex
expr_stmt|;
block|}
DECL|method|accept (Path path)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|toString
argument_list|()
operator|.
name|matches
argument_list|(
name|regex
argument_list|)
return|;
block|}
block|}
DECL|field|dfsCluster
specifier|static
specifier|private
name|MiniDFSCluster
name|dfsCluster
decl_stmt|;
DECL|field|fs
specifier|static
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|NUM_OF_PATHS
specifier|static
specifier|final
specifier|private
name|int
name|NUM_OF_PATHS
init|=
literal|4
decl_stmt|;
DECL|field|USER_DIR
specifier|static
specifier|final
name|String
name|USER_DIR
init|=
literal|"/user/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
DECL|field|path
specifier|private
name|Path
index|[]
name|path
init|=
operator|new
name|Path
index|[
name|NUM_OF_PATHS
index|]
decl_stmt|;
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|dfsCluster
operator|!=
literal|null
condition|)
block|{
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testPathFilter ()
specifier|public
name|void
name|testPathFilter
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a"
block|,
name|USER_DIR
operator|+
literal|"/a/b"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/*/*"
argument_list|,
name|files
argument_list|,
operator|new
name|RegexPathFilter
argument_list|(
literal|"^.*"
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|USER_DIR
argument_list|)
operator|+
literal|"/a/b"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testPathFilterWithFixedLastComponent ()
specifier|public
name|void
name|testPathFilterWithFixedLastComponent
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a"
block|,
name|USER_DIR
operator|+
literal|"/a/b"
block|,
name|USER_DIR
operator|+
literal|"/c"
block|,
name|USER_DIR
operator|+
literal|"/c/b"
block|, }
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/*/b"
argument_list|,
name|files
argument_list|,
operator|new
name|RegexPathFilter
argument_list|(
literal|"^.*"
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|USER_DIR
argument_list|)
operator|+
literal|"/a/b"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testGlob ()
specifier|public
name|void
name|testGlob
parameter_list|()
throws|throws
name|Exception
block|{
comment|//pTestEscape(); // need to wait until HADOOP-1995 is fixed
name|pTestJavaRegexSpecialChars
argument_list|()
expr_stmt|;
name|pTestCurlyBracket
argument_list|()
expr_stmt|;
name|pTestLiteral
argument_list|()
expr_stmt|;
name|pTestAny
argument_list|()
expr_stmt|;
name|pTestClosure
argument_list|()
expr_stmt|;
name|pTestSet
argument_list|()
expr_stmt|;
name|pTestRange
argument_list|()
expr_stmt|;
name|pTestSetExcl
argument_list|()
expr_stmt|;
name|pTestCombination
argument_list|()
expr_stmt|;
name|pTestRelativePath
argument_list|()
expr_stmt|;
block|}
DECL|method|pTestLiteral ()
specifier|private
name|void
name|pTestLiteral
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a2c"
block|,
name|USER_DIR
operator|+
literal|"/abc.d"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/abc.d"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|pTestEscape ()
specifier|private
name|void
name|pTestEscape
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/ab\\[c.d"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/ab\\[c.d"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|pTestAny ()
specifier|private
name|void
name|pTestAny
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/abc"
block|,
name|USER_DIR
operator|+
literal|"/a2c"
block|,
name|USER_DIR
operator|+
literal|"/a.c"
block|,
name|USER_DIR
operator|+
literal|"/abcd"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/a?c"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|2
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|pTestClosure ()
specifier|private
name|void
name|pTestClosure
parameter_list|()
throws|throws
name|IOException
block|{
name|pTestClosure1
argument_list|()
expr_stmt|;
name|pTestClosure2
argument_list|()
expr_stmt|;
name|pTestClosure3
argument_list|()
expr_stmt|;
name|pTestClosure4
argument_list|()
expr_stmt|;
name|pTestClosure5
argument_list|()
expr_stmt|;
block|}
DECL|method|pTestClosure1 ()
specifier|private
name|void
name|pTestClosure1
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a"
block|,
name|USER_DIR
operator|+
literal|"/abc"
block|,
name|USER_DIR
operator|+
literal|"/abc.p"
block|,
name|USER_DIR
operator|+
literal|"/bacd"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/a*"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|2
index|]
argument_list|,
name|path
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|pTestClosure2 ()
specifier|private
name|void
name|pTestClosure2
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a."
block|,
name|USER_DIR
operator|+
literal|"/a.txt"
block|,
name|USER_DIR
operator|+
literal|"/a.old.java"
block|,
name|USER_DIR
operator|+
literal|"/.java"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/a.*"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|2
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|pTestClosure3 ()
specifier|private
name|void
name|pTestClosure3
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a.txt.x"
block|,
name|USER_DIR
operator|+
literal|"/ax"
block|,
name|USER_DIR
operator|+
literal|"/ab37x"
block|,
name|USER_DIR
operator|+
literal|"/bacd"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/a*x"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|2
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|pTestClosure4 ()
specifier|private
name|void
name|pTestClosure4
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/dir1/file1"
block|,
name|USER_DIR
operator|+
literal|"/dir2/file2"
block|,
name|USER_DIR
operator|+
literal|"/dir3/file1"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/*/file1"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|pTestClosure5 ()
specifier|private
name|void
name|pTestClosure5
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/dir1/file1"
block|,
name|USER_DIR
operator|+
literal|"/file1"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/*/file1"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|pTestSet ()
specifier|private
name|void
name|pTestSet
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a.c"
block|,
name|USER_DIR
operator|+
literal|"/a.cpp"
block|,
name|USER_DIR
operator|+
literal|"/a.hlp"
block|,
name|USER_DIR
operator|+
literal|"/a.hxy"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/a.[ch]??"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|2
index|]
argument_list|,
name|path
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|pTestRange ()
specifier|private
name|void
name|pTestRange
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a.d"
block|,
name|USER_DIR
operator|+
literal|"/a.e"
block|,
name|USER_DIR
operator|+
literal|"/a.f"
block|,
name|USER_DIR
operator|+
literal|"/a.h"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/a.[d-fm]"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|2
index|]
argument_list|,
name|path
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|pTestSetExcl ()
specifier|private
name|void
name|pTestSetExcl
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a.d"
block|,
name|USER_DIR
operator|+
literal|"/a.e"
block|,
name|USER_DIR
operator|+
literal|"/a.0"
block|,
name|USER_DIR
operator|+
literal|"/a.h"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/a.[^a-cg-z0-9]"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|pTestCombination ()
specifier|private
name|void
name|pTestCombination
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
literal|"/user/aa/a.c"
block|,
literal|"/user/bb/a.cpp"
block|,
literal|"/user1/cc/b.hlp"
block|,
literal|"/user/dd/a.hxy"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
literal|"/use?/*/a.[ch]{lp,xy}"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|pTestRelativePath ()
specifier|private
name|void
name|pTestRelativePath
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"abc"
block|,
literal|"abc.p"
block|,
literal|"bacd"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
literal|"a*"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|2
index|]
argument_list|,
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
name|path
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* Test {xx,yy} */
DECL|method|pTestCurlyBracket ()
specifier|private
name|void
name|pTestCurlyBracket
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
index|[]
name|matchedPath
decl_stmt|;
name|String
index|[]
name|files
decl_stmt|;
try|try
block|{
name|files
operator|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a.abcxx"
block|,
name|USER_DIR
operator|+
literal|"/a.abxy"
block|,
name|USER_DIR
operator|+
literal|"/a.hlp"
block|,
name|USER_DIR
operator|+
literal|"/a.jhyy"
block|}
expr_stmt|;
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/a.{abc,jh}??"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
comment|// nested curlies
try|try
block|{
name|files
operator|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a.abcxx"
block|,
name|USER_DIR
operator|+
literal|"/a.abdxy"
block|,
name|USER_DIR
operator|+
literal|"/a.hlp"
block|,
name|USER_DIR
operator|+
literal|"/a.jhyy"
block|}
expr_stmt|;
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/a.{ab{c,d},jh}??"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|2
index|]
argument_list|,
name|path
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
comment|// cross-component curlies
try|try
block|{
name|files
operator|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a/b"
block|,
name|USER_DIR
operator|+
literal|"/a/d"
block|,
name|USER_DIR
operator|+
literal|"/c/b"
block|,
name|USER_DIR
operator|+
literal|"/c/d"
block|}
expr_stmt|;
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/{a/b,c/d}"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
comment|// cross-component absolute curlies
try|try
block|{
name|files
operator|=
operator|new
name|String
index|[]
block|{
literal|"/a/b"
block|,
literal|"/a/d"
block|,
literal|"/c/b"
block|,
literal|"/c/d"
block|}
expr_stmt|;
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
literal|"{/a/b,/c/d}"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
try|try
block|{
comment|// test standalone }
name|files
operator|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/}bc"
block|,
name|USER_DIR
operator|+
literal|"/}c"
block|}
expr_stmt|;
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/}{a,b}c"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test {b}
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/}{b}c"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test {}
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/}{}bc"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test {,}
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/}{,}bc"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test {b,}
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/}{b,}c"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// test {,b}
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/}{,b}c"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// test a combination of {} and ?
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/}{ac,?}"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// test ill-formed curly
name|boolean
name|hasException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"}{bc"
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Illegal file pattern:"
argument_list|)
argument_list|)
expr_stmt|;
name|hasException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hasException
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* test that a path name can contain Java regex special characters */
DECL|method|pTestJavaRegexSpecialChars ()
specifier|private
name|void
name|pTestJavaRegexSpecialChars
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/($.|+)bc"
block|,
name|USER_DIR
operator|+
literal|"/abc"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/($.|+)*"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|prepareTesting (String pattern, String[] files)
specifier|private
name|Path
index|[]
name|prepareTesting
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
index|[]
name|files
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|NUM_OF_PATHS
argument_list|,
name|files
operator|.
name|length
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|path
index|[
name|i
index|]
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
index|[
name|i
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|path
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|Path
name|patternPath
init|=
operator|new
name|Path
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|Path
index|[]
name|globResults
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|fs
operator|.
name|globStatus
argument_list|(
name|patternPath
argument_list|)
argument_list|,
name|patternPath
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|globResults
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|globResults
index|[
name|i
index|]
operator|=
name|globResults
index|[
name|i
index|]
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|globResults
return|;
block|}
DECL|method|prepareTesting (String pattern, String[] files, PathFilter filter)
specifier|private
name|Path
index|[]
name|prepareTesting
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
index|[]
name|files
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|NUM_OF_PATHS
argument_list|,
name|files
operator|.
name|length
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|path
index|[
name|i
index|]
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
index|[
name|i
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|path
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|Path
name|patternPath
init|=
operator|new
name|Path
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|Path
index|[]
name|globResults
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|fs
operator|.
name|globStatus
argument_list|(
name|patternPath
argument_list|,
name|filter
argument_list|)
argument_list|,
name|patternPath
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|globResults
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|globResults
index|[
name|i
index|]
operator|=
name|globResults
index|[
name|i
index|]
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|globResults
return|;
block|}
DECL|method|cleanupDFS ()
specifier|private
name|void
name|cleanupDFS
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

