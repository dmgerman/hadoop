begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|NSQuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DSQuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/** A class for testing quota-related commands */
end_comment

begin_class
DECL|class|TestQuota
specifier|public
class|class
name|TestQuota
block|{
DECL|method|runCommand (DFSAdmin admin, boolean expectError, String... args)
specifier|private
name|void
name|runCommand
parameter_list|(
name|DFSAdmin
name|admin
parameter_list|,
name|boolean
name|expectError
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|runCommand
argument_list|(
name|admin
argument_list|,
name|args
argument_list|,
name|expectError
argument_list|)
expr_stmt|;
block|}
DECL|method|runCommand (DFSAdmin admin, String args[], boolean expectEror)
specifier|private
name|void
name|runCommand
parameter_list|(
name|DFSAdmin
name|admin
parameter_list|,
name|String
name|args
index|[]
parameter_list|,
name|boolean
name|expectEror
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|val
init|=
name|admin
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectEror
condition|)
block|{
name|assertEquals
argument_list|(
name|val
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|val
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests to make sure we're getting human readable Quota exception messages    * Test for @link{ NSQuotaExceededException, DSQuotaExceededException}    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDSQuotaExceededExceptionIsHumanReadable ()
specifier|public
name|void
name|testDSQuotaExceededExceptionIsHumanReadable
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|bytes
init|=
literal|1024
decl_stmt|;
try|try
block|{
throw|throw
operator|new
name|DSQuotaExceededException
argument_list|(
name|bytes
argument_list|,
name|bytes
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|DSQuotaExceededException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"The DiskSpace quota is exceeded: quota=1.0k "
operator|+
literal|"diskspace consumed=1.0k"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Test quota related commands:     *    setQuota, clrQuota, setSpaceQuota, clrSpaceQuota, and count     */
annotation|@
name|Test
DECL|method|testQuotaCommands ()
specifier|public
name|void
name|testQuotaCommands
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|// set a smaller block size so that we can test with smaller
comment|// Space quotas
specifier|final
name|int
name|DEFAULT_BLOCK_SIZE
init|=
literal|512
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.support.append"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Not a HDFS: "
operator|+
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|instanceof
name|DistributedFileSystem
argument_list|)
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
name|DFSAdmin
name|admin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|int
name|fileLen
init|=
literal|1024
decl_stmt|;
specifier|final
name|short
name|replication
init|=
literal|5
decl_stmt|;
specifier|final
name|long
name|spaceQuota
init|=
name|fileLen
operator|*
name|replication
operator|*
literal|15
operator|/
literal|8
decl_stmt|;
comment|// 1: create a directory /test and set its quota to be 3
specifier|final
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-setQuota"
block|,
literal|"3"
block|,
name|parent
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
name|args
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//try setting space quota with a 'binary prefix'
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|false
argument_list|,
literal|"-setSpaceQuota"
argument_list|,
literal|"2t"
argument_list|,
name|parent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
operator|<<
literal|40
argument_list|,
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
comment|// set diskspace quota to 10000
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|false
argument_list|,
literal|"-setSpaceQuota"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|spaceQuota
argument_list|)
argument_list|,
name|parent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2: create directory /test/data0
specifier|final
name|Path
name|childDir0
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"data0"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|childDir0
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3: create a file /test/datafile0
specifier|final
name|Path
name|childFile0
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"datafile0"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|childFile0
argument_list|,
name|fileLen
argument_list|,
name|replication
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// 4: count -q /test
name|ContentSummary
name|c
init|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getFileCount
argument_list|()
operator|+
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|fileLen
operator|*
name|replication
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceQuota
argument_list|()
argument_list|,
name|spaceQuota
argument_list|)
expr_stmt|;
comment|// 5: count -q /test/data0
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|childDir0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getFileCount
argument_list|()
operator|+
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// check disk space consumed
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|fileLen
operator|*
name|replication
argument_list|)
expr_stmt|;
comment|// 6: create a directory /test/data1
specifier|final
name|Path
name|childDir1
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"data1"
argument_list|)
decl_stmt|;
name|boolean
name|hasException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|childDir1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QuotaExceededException
name|e
parameter_list|)
block|{
name|hasException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hasException
argument_list|)
expr_stmt|;
name|OutputStream
name|fout
decl_stmt|;
comment|// 7: create a file /test/datafile1
specifier|final
name|Path
name|childFile1
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"datafile1"
argument_list|)
decl_stmt|;
name|hasException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|fout
operator|=
name|dfs
operator|.
name|create
argument_list|(
name|childFile1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QuotaExceededException
name|e
parameter_list|)
block|{
name|hasException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hasException
argument_list|)
expr_stmt|;
comment|// 8: clear quota /test
name|runCommand
argument_list|(
name|admin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-clrQuota"
block|,
name|parent
operator|.
name|toString
argument_list|()
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceQuota
argument_list|()
argument_list|,
name|spaceQuota
argument_list|)
expr_stmt|;
comment|// 9: clear quota /test/data0
name|runCommand
argument_list|(
name|admin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-clrQuota"
block|,
name|childDir0
operator|.
name|toString
argument_list|()
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|childDir0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// 10: create a file /test/datafile1
name|fout
operator|=
name|dfs
operator|.
name|create
argument_list|(
name|childFile1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
comment|// 10.s: but writing fileLen bytes should result in an quota exception
name|hasException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|fout
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
name|fileLen
index|]
argument_list|)
expr_stmt|;
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QuotaExceededException
name|e
parameter_list|)
block|{
name|hasException
operator|=
literal|true
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fout
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hasException
argument_list|)
expr_stmt|;
comment|//delete the file
name|dfs
operator|.
name|delete
argument_list|(
name|childFile1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// 9.s: clear diskspace quota
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|false
argument_list|,
literal|"-clrSpaceQuota"
argument_list|,
name|parent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceQuota
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// now creating childFile1 should succeed
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|childFile1
argument_list|,
name|fileLen
argument_list|,
name|replication
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// 11: set the quota of /test to be 1
comment|// HADOOP-5872 - we can set quota even if it is immediately violated
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-setQuota"
block|,
literal|"1"
block|,
name|parent
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
name|args
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|false
argument_list|,
literal|"-setSpaceQuota"
argument_list|,
comment|// for space quota
name|Integer
operator|.
name|toString
argument_list|(
name|fileLen
argument_list|)
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// 12: set the quota of /test/data0 to be 1
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-setQuota"
block|,
literal|"1"
block|,
name|childDir0
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
name|args
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// 13: not able create a directory under data0
name|hasException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|childDir0
argument_list|,
literal|"in"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QuotaExceededException
name|e
parameter_list|)
block|{
name|hasException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hasException
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|childDir0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
operator|+
name|c
operator|.
name|getFileCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// 14a: set quota on a non-existent directory
name|Path
name|nonExistentPath
init|=
operator|new
name|Path
argument_list|(
literal|"/test1"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|nonExistentPath
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-setQuota"
block|,
literal|"1"
block|,
name|nonExistentPath
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
name|args
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|true
argument_list|,
literal|"-setSpaceQuota"
argument_list|,
literal|"1g"
argument_list|,
comment|// for space quota
name|nonExistentPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// 14b: set quota on a file
name|assertTrue
argument_list|(
name|dfs
operator|.
name|isFile
argument_list|(
name|childFile0
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|childFile0
operator|.
name|toString
argument_list|()
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
name|args
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// same for space quota
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|true
argument_list|,
literal|"-setSpaceQuota"
argument_list|,
literal|"1t"
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// 15a: clear quota on a file
name|args
index|[
literal|0
index|]
operator|=
literal|"-clrQuota"
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
name|args
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|true
argument_list|,
literal|"-clrSpaceQuota"
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// 15b: clear quota on a non-existent directory
name|args
index|[
literal|1
index|]
operator|=
name|nonExistentPath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
name|args
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|true
argument_list|,
literal|"-clrSpaceQuota"
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// 16a: set the quota of /test to be 0
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-setQuota"
block|,
literal|"0"
block|,
name|parent
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
name|args
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|true
argument_list|,
literal|"-setSpaceQuota"
argument_list|,
literal|"0"
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// 16b: set the quota of /test to be -1
name|args
index|[
literal|1
index|]
operator|=
literal|"-1"
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
name|args
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|true
argument_list|,
literal|"-setSpaceQuota"
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// 16c: set the quota of /test to be Long.MAX_VALUE+1
name|args
index|[
literal|1
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
operator|+
literal|1L
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
name|args
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|true
argument_list|,
literal|"-setSpaceQuota"
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// 16d: set the quota of /test to be a non integer
name|args
index|[
literal|1
index|]
operator|=
literal|"33aa1.5"
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
name|args
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|true
argument_list|,
literal|"-setSpaceQuota"
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// 16e: set space quota with a value larger than Long.MAX_VALUE
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|true
argument_list|,
literal|"-setSpaceQuota"
argument_list|,
operator|(
name|Long
operator|.
name|MAX_VALUE
operator|/
literal|1024
operator|/
literal|1024
operator|+
literal|1024
operator|)
operator|+
literal|"m"
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// 17:  setQuota by a non-administrator
specifier|final
name|String
name|username
init|=
literal|"userxx"
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|username
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"groupyy"
block|}
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|args2
init|=
name|args
operator|.
name|clone
argument_list|()
decl_stmt|;
comment|// need final ref for doAs block
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"Not running as new user"
argument_list|,
name|username
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|DFSAdmin
name|userAdmin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|args2
index|[
literal|1
index|]
operator|=
literal|"100"
expr_stmt|;
name|runCommand
argument_list|(
name|userAdmin
argument_list|,
name|args2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|userAdmin
argument_list|,
literal|true
argument_list|,
literal|"-setSpaceQuota"
argument_list|,
literal|"1g"
argument_list|,
name|args2
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// 18: clrQuota by a non-administrator
name|String
index|[]
name|args3
init|=
operator|new
name|String
index|[]
block|{
literal|"-clrQuota"
block|,
name|parent
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|runCommand
argument_list|(
name|userAdmin
argument_list|,
name|args3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|userAdmin
argument_list|,
literal|true
argument_list|,
literal|"-clrSpaceQuota"
argument_list|,
name|args3
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// 19: clrQuota on the root directory ("/") should fail
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|true
argument_list|,
literal|"-clrQuota"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
comment|// 20: setQuota on the root directory ("/") should succeed
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|false
argument_list|,
literal|"-setQuota"
argument_list|,
literal|"1000000"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|true
argument_list|,
literal|"-clrQuota"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|false
argument_list|,
literal|"-clrSpaceQuota"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-clrQuota"
block|,
name|parent
operator|.
name|toString
argument_list|()
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|false
argument_list|,
literal|"-clrSpaceQuota"
argument_list|,
name|parent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2: create directory /test/data2
specifier|final
name|Path
name|childDir2
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"data2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|childDir2
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|childFile2
init|=
operator|new
name|Path
argument_list|(
name|childDir2
argument_list|,
literal|"datafile2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|childFile3
init|=
operator|new
name|Path
argument_list|(
name|childDir2
argument_list|,
literal|"datafile3"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|spaceQuota2
init|=
name|DEFAULT_BLOCK_SIZE
operator|*
name|replication
decl_stmt|;
specifier|final
name|long
name|fileLen2
init|=
name|DEFAULT_BLOCK_SIZE
decl_stmt|;
comment|// set space quota to a real low value
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|false
argument_list|,
literal|"-setSpaceQuota"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|spaceQuota2
argument_list|)
argument_list|,
name|childDir2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// clear space quota
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|false
argument_list|,
literal|"-clrSpaceQuota"
argument_list|,
name|childDir2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a file that is greater than the size of space quota
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|childFile2
argument_list|,
name|fileLen2
argument_list|,
name|replication
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// now set space quota again. This should succeed
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|false
argument_list|,
literal|"-setSpaceQuota"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|spaceQuota2
argument_list|)
argument_list|,
name|childDir2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hasException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|childFile3
argument_list|,
name|fileLen2
argument_list|,
name|replication
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DSQuotaExceededException
name|e
parameter_list|)
block|{
name|hasException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hasException
argument_list|)
expr_stmt|;
comment|// now test the same for root
specifier|final
name|Path
name|childFile4
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|,
literal|"datafile2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|childFile5
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|,
literal|"datafile3"
argument_list|)
decl_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|true
argument_list|,
literal|"-clrQuota"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|false
argument_list|,
literal|"-clrSpaceQuota"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
comment|// set space quota to a real low value
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|false
argument_list|,
literal|"-setSpaceQuota"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|spaceQuota2
argument_list|)
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|false
argument_list|,
literal|"-clrSpaceQuota"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|childFile4
argument_list|,
name|fileLen2
argument_list|,
name|replication
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|false
argument_list|,
literal|"-setSpaceQuota"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|spaceQuota2
argument_list|)
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|hasException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|childFile5
argument_list|,
name|fileLen2
argument_list|,
name|replication
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DSQuotaExceededException
name|e
parameter_list|)
block|{
name|hasException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hasException
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Test commands that change the size of the name space:    *  mkdirs, rename, and delete */
annotation|@
name|Test
DECL|method|testNamespaceCommands ()
specifier|public
name|void
name|testNamespaceCommands
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Not a HDFS: "
operator|+
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|instanceof
name|DistributedFileSystem
argument_list|)
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
try|try
block|{
comment|// 1: create directory /nqdir0/qdir1/qdir20/nqdir30
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/nqdir0/qdir1/qdir20/nqdir30"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2: set the quota of /nqdir0/qdir1 to be 6
specifier|final
name|Path
name|quotaDir1
init|=
operator|new
name|Path
argument_list|(
literal|"/nqdir0/qdir1"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|setQuota
argument_list|(
name|quotaDir1
argument_list|,
literal|6
argument_list|,
name|FSConstants
operator|.
name|QUOTA_DONT_SET
argument_list|)
expr_stmt|;
name|ContentSummary
name|c
init|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// 3: set the quota of /nqdir0/qdir1/qdir20 to be 7
specifier|final
name|Path
name|quotaDir2
init|=
operator|new
name|Path
argument_list|(
literal|"/nqdir0/qdir1/qdir20"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|setQuota
argument_list|(
name|quotaDir2
argument_list|,
literal|7
argument_list|,
name|FSConstants
operator|.
name|QUOTA_DONT_SET
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// 4: Create directory /nqdir0/qdir1/qdir21 and set its quota to 2
specifier|final
name|Path
name|quotaDir3
init|=
operator|new
name|Path
argument_list|(
literal|"/nqdir0/qdir1/qdir21"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|quotaDir3
argument_list|)
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuota
argument_list|(
name|quotaDir3
argument_list|,
literal|2
argument_list|,
name|FSConstants
operator|.
name|QUOTA_DONT_SET
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// 5: Create directory /nqdir0/qdir1/qdir21/nqdir32
name|Path
name|tempPath
init|=
operator|new
name|Path
argument_list|(
name|quotaDir3
argument_list|,
literal|"nqdir32"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|tempPath
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// 6: Create directory /nqdir0/qdir1/qdir21/nqdir33
name|tempPath
operator|=
operator|new
name|Path
argument_list|(
name|quotaDir3
argument_list|,
literal|"nqdir33"
argument_list|)
expr_stmt|;
name|boolean
name|hasException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|tempPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NSQuotaExceededException
name|e
parameter_list|)
block|{
name|hasException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hasException
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// 7: Create directory /nqdir0/qdir1/qdir20/nqdir31
name|tempPath
operator|=
operator|new
name|Path
argument_list|(
name|quotaDir2
argument_list|,
literal|"nqdir31"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|tempPath
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// 8: Create directory /nqdir0/qdir1/qdir20/nqdir33
name|tempPath
operator|=
operator|new
name|Path
argument_list|(
name|quotaDir2
argument_list|,
literal|"nqdir33"
argument_list|)
expr_stmt|;
name|hasException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|tempPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NSQuotaExceededException
name|e
parameter_list|)
block|{
name|hasException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hasException
argument_list|)
expr_stmt|;
comment|// 9: Move /nqdir0/qdir1/qdir21/nqdir32 /nqdir0/qdir1/qdir20/nqdir30
name|tempPath
operator|=
operator|new
name|Path
argument_list|(
name|quotaDir2
argument_list|,
literal|"nqdir30"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|quotaDir3
argument_list|,
literal|"nqdir32"
argument_list|)
argument_list|,
name|tempPath
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// 10: Move /nqdir0/qdir1/qdir20/nqdir30 to /nqdir0/qdir1/qdir21
name|hasException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|dfs
operator|.
name|rename
argument_list|(
name|tempPath
argument_list|,
name|quotaDir3
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NSQuotaExceededException
name|e
parameter_list|)
block|{
name|hasException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hasException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|tempPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|quotaDir3
argument_list|,
literal|"nqdir30"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 10.a: Rename /nqdir0/qdir1/qdir20/nqdir30 to /nqdir0/qdir1/qdir21/nqdir32
name|hasException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|dfs
operator|.
name|rename
argument_list|(
name|tempPath
argument_list|,
operator|new
name|Path
argument_list|(
name|quotaDir3
argument_list|,
literal|"nqdir32"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QuotaExceededException
name|e
parameter_list|)
block|{
name|hasException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hasException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|tempPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|quotaDir3
argument_list|,
literal|"nqdir32"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 11: Move /nqdir0/qdir1/qdir20/nqdir30 to /nqdir0
name|assertTrue
argument_list|(
name|dfs
operator|.
name|rename
argument_list|(
name|tempPath
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/nqdir0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// 12: Create directory /nqdir0/nqdir30/nqdir33
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/nqdir0/nqdir30/nqdir33"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 13: Move /nqdir0/nqdir30 /nqdir0/qdir1/qdir20/qdir30
name|hasException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|dfs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/nqdir0/nqdir30"
argument_list|)
argument_list|,
name|tempPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NSQuotaExceededException
name|e
parameter_list|)
block|{
name|hasException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hasException
argument_list|)
expr_stmt|;
comment|// 14: Move /nqdir0/qdir1/qdir21 /nqdir0/qdir1/qdir20
name|assertTrue
argument_list|(
name|dfs
operator|.
name|rename
argument_list|(
name|quotaDir3
argument_list|,
name|quotaDir2
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|tempPath
operator|=
operator|new
name|Path
argument_list|(
name|quotaDir2
argument_list|,
literal|"qdir21"
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|tempPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// 15: Delete /nqdir0/qdir1/qdir20/qdir21
name|dfs
operator|.
name|delete
argument_list|(
name|tempPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// 16: Move /nqdir0/qdir30 /nqdir0/qdir1/qdir20
name|assertTrue
argument_list|(
name|dfs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/nqdir0/nqdir30"
argument_list|)
argument_list|,
name|quotaDir2
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getQuota
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test HDFS operations that change disk space consumed by a directory tree.    * namely create, rename, delete, append, and setReplication.    *     * This is based on testNamespaceCommands() above.    */
annotation|@
name|Test
DECL|method|testSpaceCommands ()
specifier|public
name|void
name|testSpaceCommands
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|// set a smaller block size so that we can test with smaller
comment|// diskspace quotas
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|"512"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.support.append"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Not a HDFS: "
operator|+
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|instanceof
name|DistributedFileSystem
argument_list|)
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
try|try
block|{
name|int
name|fileLen
init|=
literal|1024
decl_stmt|;
name|short
name|replication
init|=
literal|3
decl_stmt|;
name|int
name|fileSpace
init|=
name|fileLen
operator|*
name|replication
decl_stmt|;
comment|// create directory /nqdir0/qdir1/qdir20/nqdir30
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/nqdir0/qdir1/qdir20/nqdir30"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// set the quota of /nqdir0/qdir1 to 4 * fileSpace
specifier|final
name|Path
name|quotaDir1
init|=
operator|new
name|Path
argument_list|(
literal|"/nqdir0/qdir1"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|setQuota
argument_list|(
name|quotaDir1
argument_list|,
name|FSConstants
operator|.
name|QUOTA_DONT_SET
argument_list|,
literal|4
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
name|ContentSummary
name|c
init|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceQuota
argument_list|()
argument_list|,
literal|4
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
comment|// set the quota of /nqdir0/qdir1/qdir20 to 6 * fileSpace
specifier|final
name|Path
name|quotaDir20
init|=
operator|new
name|Path
argument_list|(
literal|"/nqdir0/qdir1/qdir20"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|setQuota
argument_list|(
name|quotaDir20
argument_list|,
name|FSConstants
operator|.
name|QUOTA_DONT_SET
argument_list|,
literal|6
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceQuota
argument_list|()
argument_list|,
literal|6
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
comment|// Create /nqdir0/qdir1/qdir21 and set its space quota to 2 * fileSpace
specifier|final
name|Path
name|quotaDir21
init|=
operator|new
name|Path
argument_list|(
literal|"/nqdir0/qdir1/qdir21"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|quotaDir21
argument_list|)
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuota
argument_list|(
name|quotaDir21
argument_list|,
name|FSConstants
operator|.
name|QUOTA_DONT_SET
argument_list|,
literal|2
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir21
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceQuota
argument_list|()
argument_list|,
literal|2
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
comment|// 5: Create directory /nqdir0/qdir1/qdir21/nqdir32
name|Path
name|tempPath
init|=
operator|new
name|Path
argument_list|(
name|quotaDir21
argument_list|,
literal|"nqdir32"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|tempPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a file under nqdir32/fileDir
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|tempPath
argument_list|,
literal|"fileDir/file1"
argument_list|)
argument_list|,
name|fileLen
argument_list|,
name|replication
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir21
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|fileSpace
argument_list|)
expr_stmt|;
comment|// Create a larger file /nqdir0/qdir1/qdir21/nqdir33/
name|boolean
name|hasException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|quotaDir21
argument_list|,
literal|"nqdir33/file2"
argument_list|)
argument_list|,
literal|2
operator|*
name|fileLen
argument_list|,
name|replication
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DSQuotaExceededException
name|e
parameter_list|)
block|{
name|hasException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hasException
argument_list|)
expr_stmt|;
comment|// delete nqdir33
name|assertTrue
argument_list|(
name|dfs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|quotaDir21
argument_list|,
literal|"nqdir33"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir21
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|fileSpace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceQuota
argument_list|()
argument_list|,
literal|2
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
comment|// Verify space before the move:
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Move /nqdir0/qdir1/qdir21/nqdir32 /nqdir0/qdir1/qdir20/nqdir30
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|quotaDir20
argument_list|,
literal|"nqdir30"
argument_list|)
decl_stmt|;
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|quotaDir21
argument_list|,
literal|"nqdir32"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|rename
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify space after the move
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|fileSpace
argument_list|)
expr_stmt|;
comment|// verify space for its parent
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|fileSpace
argument_list|)
expr_stmt|;
comment|// verify space for source for the move
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir21
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|dstPath
argument_list|,
literal|"fileDir/file2"
argument_list|)
decl_stmt|;
name|int
name|file2Len
init|=
literal|2
operator|*
name|fileLen
decl_stmt|;
comment|// create a larger file under /nqdir0/qdir1/qdir20/nqdir30
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|file2
argument_list|,
name|file2Len
argument_list|,
name|replication
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
literal|3
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir21
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Reverse: Move /nqdir0/qdir1/qdir20/nqdir30 to /nqdir0/qdir1/qdir21/
name|hasException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|dfs
operator|.
name|rename
argument_list|(
name|dstPath
argument_list|,
name|srcPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DSQuotaExceededException
name|e
parameter_list|)
block|{
name|hasException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hasException
argument_list|)
expr_stmt|;
comment|// make sure no intermediate directories left by failed rename
name|assertFalse
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|srcPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// directory should exist
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|dstPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify space after the failed move
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
literal|3
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir21
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test Append :
comment|// verify space quota
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceQuota
argument_list|()
argument_list|,
literal|4
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
comment|// verify space before append;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|dstPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
literal|3
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
name|dfs
operator|.
name|append
argument_list|(
name|file2
argument_list|)
decl_stmt|;
comment|// appending 1 fileLen should succeed
name|out
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
name|fileLen
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|file2Len
operator|+=
name|fileLen
expr_stmt|;
comment|// after append
comment|// verify space after append;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|dstPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
literal|4
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
comment|// now increase the quota for quotaDir1
name|dfs
operator|.
name|setQuota
argument_list|(
name|quotaDir1
argument_list|,
name|FSConstants
operator|.
name|QUOTA_DONT_SET
argument_list|,
literal|5
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
comment|// Now, appending more than 1 fileLen should result in an error
name|out
operator|=
name|dfs
operator|.
name|append
argument_list|(
name|file2
argument_list|)
expr_stmt|;
name|hasException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
name|fileLen
operator|+
literal|1024
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DSQuotaExceededException
name|e
parameter_list|)
block|{
name|hasException
operator|=
literal|true
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hasException
argument_list|)
expr_stmt|;
name|file2Len
operator|+=
name|fileLen
expr_stmt|;
comment|// after partial append
comment|// verify space after partial append
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|dstPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
literal|5
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
comment|// Test set replication :
comment|// first reduce the replication
name|dfs
operator|.
name|setReplication
argument_list|(
name|file2
argument_list|,
call|(
name|short
call|)
argument_list|(
name|replication
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that space is reduced by file2Len
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|dstPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
literal|5
operator|*
name|fileSpace
operator|-
name|file2Len
argument_list|)
expr_stmt|;
comment|// now try to increase the replication and and expect an error.
name|hasException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|dfs
operator|.
name|setReplication
argument_list|(
name|file2
argument_list|,
call|(
name|short
call|)
argument_list|(
name|replication
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DSQuotaExceededException
name|e
parameter_list|)
block|{
name|hasException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hasException
argument_list|)
expr_stmt|;
comment|// verify space consumed remains unchanged.
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|dstPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
literal|5
operator|*
name|fileSpace
operator|-
name|file2Len
argument_list|)
expr_stmt|;
comment|// now increase the quota for quotaDir1 and quotaDir20
name|dfs
operator|.
name|setQuota
argument_list|(
name|quotaDir1
argument_list|,
name|FSConstants
operator|.
name|QUOTA_DONT_SET
argument_list|,
literal|10
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuota
argument_list|(
name|quotaDir20
argument_list|,
name|FSConstants
operator|.
name|QUOTA_DONT_SET
argument_list|,
literal|10
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
comment|// then increasing replication should be ok.
name|dfs
operator|.
name|setReplication
argument_list|(
name|file2
argument_list|,
call|(
name|short
call|)
argument_list|(
name|replication
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify increase in space
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|dstPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
literal|5
operator|*
name|fileSpace
operator|+
name|file2Len
argument_list|)
expr_stmt|;
comment|// Test HDFS-2053 :
comment|// Create directory /hdfs-2053
specifier|final
name|Path
name|quotaDir2053
init|=
operator|new
name|Path
argument_list|(
literal|"/hdfs-2053"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|quotaDir2053
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create subdirectories /hdfs-2053/{A,B,C}
specifier|final
name|Path
name|quotaDir2053_A
init|=
operator|new
name|Path
argument_list|(
name|quotaDir2053
argument_list|,
literal|"A"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|quotaDir2053_A
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|quotaDir2053_B
init|=
operator|new
name|Path
argument_list|(
name|quotaDir2053
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|quotaDir2053_B
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|quotaDir2053_C
init|=
operator|new
name|Path
argument_list|(
name|quotaDir2053
argument_list|,
literal|"C"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|quotaDir2053_C
argument_list|)
argument_list|)
expr_stmt|;
comment|// Factors to vary the sizes of test files created in each subdir.
comment|// The actual factors are not really important but they allow us to create
comment|// identifiable file sizes per subdir, which helps during debugging.
name|int
name|sizeFactorA
init|=
literal|1
decl_stmt|;
name|int
name|sizeFactorB
init|=
literal|2
decl_stmt|;
name|int
name|sizeFactorC
init|=
literal|4
decl_stmt|;
comment|// Set space quota for subdirectory C
name|dfs
operator|.
name|setQuota
argument_list|(
name|quotaDir2053_C
argument_list|,
name|FSConstants
operator|.
name|QUOTA_DONT_SET
argument_list|,
operator|(
name|sizeFactorC
operator|+
literal|1
operator|)
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir2053_C
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceQuota
argument_list|()
argument_list|,
operator|(
name|sizeFactorC
operator|+
literal|1
operator|)
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
comment|// Create a file under subdirectory A
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|quotaDir2053_A
argument_list|,
literal|"fileA"
argument_list|)
argument_list|,
name|sizeFactorA
operator|*
name|fileLen
argument_list|,
name|replication
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir2053_A
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|sizeFactorA
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
comment|// Create a file under subdirectory B
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|quotaDir2053_B
argument_list|,
literal|"fileB"
argument_list|)
argument_list|,
name|sizeFactorB
operator|*
name|fileLen
argument_list|,
name|replication
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir2053_B
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|sizeFactorB
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
comment|// Create a file under subdirectory C (which has a space quota)
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|quotaDir2053_C
argument_list|,
literal|"fileC"
argument_list|)
argument_list|,
name|sizeFactorC
operator|*
name|fileLen
argument_list|,
name|replication
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir2053_C
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|sizeFactorC
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
comment|// Check space consumed for /hdfs-2053
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|quotaDir2053
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
operator|(
name|sizeFactorA
operator|+
name|sizeFactorB
operator|+
name|sizeFactorC
operator|)
operator|*
name|fileSpace
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Violate a space quota using files of size< 1 block. Test that block    * allocation conservatively assumes that for quota checking the entire    * space of the block is used.    */
annotation|@
name|Test
DECL|method|testBlockAllocationAdjustsUsageConservatively ()
specifier|public
name|void
name|testBlockAllocationAdjustsUsageConservatively
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|6
operator|*
literal|1024
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|DFSAdmin
name|admin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/test/test1"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
literal|"/test/test2"
argument_list|)
decl_stmt|;
name|boolean
name|exceededQuota
init|=
literal|false
decl_stmt|;
specifier|final
name|int
name|QUOTA_SIZE
init|=
literal|3
operator|*
name|BLOCK_SIZE
decl_stmt|;
comment|// total space usage including
comment|// repl.
specifier|final
name|int
name|FILE_SIZE
init|=
name|BLOCK_SIZE
operator|/
literal|2
decl_stmt|;
name|ContentSummary
name|c
decl_stmt|;
comment|// Create the directory and set the quota
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|false
argument_list|,
literal|"-setSpaceQuota"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|QUOTA_SIZE
argument_list|)
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Creating a file should use half the quota
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
name|FILE_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|c
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Quota is half consumed"
argument_list|,
name|QUOTA_SIZE
operator|/
literal|2
argument_list|,
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
comment|// We can not create the 2nd file because even though the total spaced
comment|// used by two files (2 * 3 * 512/2) would fit within the quota (3 * 512)
comment|// when a block for a file is created the space used is adjusted
comment|// conservatively (3 * block size, ie assumes a full block is written)
comment|// which will violate the quota (3 * block size) since we've already
comment|// used half the quota for the first file.
try|try
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file2
argument_list|,
name|FILE_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QuotaExceededException
name|e
parameter_list|)
block|{
name|exceededQuota
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Quota not exceeded"
argument_list|,
name|exceededQuota
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**   * Like the previous test but create many files. This covers bugs where   * the quota adjustment is incorrect but it takes many files to accrue    * a big enough accounting error to violate the quota.   */
annotation|@
name|Test
DECL|method|testMultipleFilesSmallerThanOneBlock ()
specifier|public
name|void
name|testMultipleFilesSmallerThanOneBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|6
operator|*
literal|1024
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|DFSAdmin
name|admin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|boolean
name|exceededQuota
init|=
literal|false
decl_stmt|;
name|ContentSummary
name|c
decl_stmt|;
comment|// 1kb file
comment|// 6kb block
comment|// 192kb quota
specifier|final
name|int
name|FILE_SIZE
init|=
literal|1024
decl_stmt|;
specifier|final
name|int
name|QUOTA_SIZE
init|=
literal|32
operator|*
operator|(
name|int
operator|)
name|fs
operator|.
name|getDefaultBlockSize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
name|fs
operator|.
name|getDefaultBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|192
operator|*
literal|1024
argument_list|,
name|QUOTA_SIZE
argument_list|)
expr_stmt|;
comment|// Create the dir and set the quota. We need to enable the quota before
comment|// writing the files as setting the quota afterwards will over-write
comment|// the cached disk space used for quota verification with the actual
comment|// amount used as calculated by INode#spaceConsumedInTree.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|runCommand
argument_list|(
name|admin
argument_list|,
literal|false
argument_list|,
literal|"-setSpaceQuota"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|QUOTA_SIZE
argument_list|)
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// We can create at most 59 files because block allocation is
comment|// conservative and initially assumes a full block is used, so we
comment|// need to leave at least 3 * BLOCK_SIZE free space when allocating
comment|// the last block: (58 * 3 * 1024) (3 * 6 * 1024) = 192kb
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|59
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/test/test"
operator|+
name|i
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|FILE_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
block|}
comment|// Should account for all 59 files (almost QUOTA_SIZE)
name|c
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid space consumed"
argument_list|,
literal|59
operator|*
name|FILE_SIZE
operator|*
literal|3
argument_list|,
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid space consumed"
argument_list|,
name|QUOTA_SIZE
operator|-
operator|(
literal|59
operator|*
name|FILE_SIZE
operator|*
literal|3
operator|)
argument_list|,
literal|3
operator|*
operator|(
name|fs
operator|.
name|getDefaultBlockSize
argument_list|()
operator|-
name|FILE_SIZE
operator|)
argument_list|)
expr_stmt|;
comment|// Now check that trying to create another file violates the quota
try|try
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/test/test59"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|FILE_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QuotaExceededException
name|e
parameter_list|)
block|{
name|exceededQuota
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Quota not exceeded"
argument_list|,
name|exceededQuota
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

