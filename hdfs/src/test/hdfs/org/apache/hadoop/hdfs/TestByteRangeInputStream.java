begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ByteRangeInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ByteRangeInputStream
operator|.
name|URLOpener
import|;
end_import

begin_class
DECL|class|MockHttpURLConnection
class|class
name|MockHttpURLConnection
extends|extends
name|HttpURLConnection
block|{
DECL|field|m
name|MockURL
name|m
decl_stmt|;
DECL|method|MockHttpURLConnection (URL u, MockURL m)
specifier|public
name|MockHttpURLConnection
parameter_list|(
name|URL
name|u
parameter_list|,
name|MockURL
name|m
parameter_list|)
block|{
name|super
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|this
operator|.
name|m
operator|=
name|m
expr_stmt|;
block|}
DECL|method|usingProxy ()
specifier|public
name|boolean
name|usingProxy
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|disconnect ()
specifier|public
name|void
name|disconnect
parameter_list|()
block|{   }
DECL|method|connect ()
specifier|public
name|void
name|connect
parameter_list|()
throws|throws
name|IOException
block|{
name|m
operator|.
name|setMsg
argument_list|(
literal|"Connect: "
operator|+
name|url
operator|+
literal|", Range: "
operator|+
name|getRequestProperty
argument_list|(
literal|"Range"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getInputStream ()
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"asdf"
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getURL ()
specifier|public
name|URL
name|getURL
parameter_list|()
block|{
name|URL
name|u
init|=
literal|null
decl_stmt|;
try|try
block|{
name|u
operator|=
operator|new
name|URL
argument_list|(
literal|"http://resolvedurl/"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|u
return|;
block|}
DECL|method|getResponseCode ()
specifier|public
name|int
name|getResponseCode
parameter_list|()
block|{
if|if
condition|(
name|m
operator|.
name|responseCode
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|m
operator|.
name|responseCode
return|;
block|}
else|else
block|{
if|if
condition|(
name|getRequestProperty
argument_list|(
literal|"Range"
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|200
return|;
block|}
else|else
block|{
return|return
literal|206
return|;
block|}
block|}
block|}
block|}
end_class

begin_class
DECL|class|MockURL
class|class
name|MockURL
extends|extends
name|URLOpener
block|{
DECL|field|msg
name|String
name|msg
decl_stmt|;
DECL|field|responseCode
specifier|public
name|int
name|responseCode
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|MockURL (URL u)
specifier|public
name|MockURL
parameter_list|(
name|URL
name|u
parameter_list|)
block|{
name|super
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
DECL|method|MockURL (String s)
specifier|public
name|MockURL
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|this
argument_list|(
operator|new
name|URL
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|openConnection ()
specifier|public
name|HttpURLConnection
name|openConnection
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|MockHttpURLConnection
argument_list|(
name|url
argument_list|,
name|this
argument_list|)
return|;
block|}
DECL|method|setMsg (String s)
specifier|public
name|void
name|setMsg
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|msg
operator|=
name|s
expr_stmt|;
block|}
DECL|method|getMsg ()
specifier|public
name|String
name|getMsg
parameter_list|()
block|{
return|return
name|msg
return|;
block|}
block|}
end_class

begin_class
DECL|class|TestByteRangeInputStream
specifier|public
class|class
name|TestByteRangeInputStream
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestByteRangeInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|testByteRange ()
specifier|public
name|void
name|testByteRange
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|MockURL
name|o
init|=
operator|new
name|MockURL
argument_list|(
literal|"http://test/"
argument_list|)
decl_stmt|;
name|MockURL
name|r
init|=
operator|new
name|MockURL
argument_list|(
operator|(
name|URL
operator|)
literal|null
argument_list|)
decl_stmt|;
name|ByteRangeInputStream
name|is
init|=
operator|new
name|ByteRangeInputStream
argument_list|(
name|o
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getPos wrong"
argument_list|,
literal|0
argument_list|,
name|is
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Initial call made incorrectly"
argument_list|,
literal|"Connect: http://test/, Range: null"
argument_list|,
name|o
operator|.
name|getMsg
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPos should be 1 after reading one byte"
argument_list|,
literal|1
argument_list|,
name|is
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|.
name|setMsg
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPos should be 2 after reading two bytes"
argument_list|,
literal|2
argument_list|,
name|is
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"No additional connections should have been made (no seek)"
argument_list|,
name|o
operator|.
name|getMsg
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setMsg
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|r
operator|.
name|setURL
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://resolvedurl/"
argument_list|)
argument_list|)
expr_stmt|;
name|is
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Seek to 100 bytes made incorrectly"
argument_list|,
literal|"Connect: http://resolvedurl/, Range: bytes=100-"
argument_list|,
name|r
operator|.
name|getMsg
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPos should be 101 after reading one byte"
argument_list|,
literal|101
argument_list|,
name|is
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setMsg
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|is
operator|.
name|seek
argument_list|(
literal|101
argument_list|)
expr_stmt|;
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"Seek to 101 should not result in another request"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|r
operator|.
name|setMsg
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|is
operator|.
name|seek
argument_list|(
literal|2500
argument_list|)
expr_stmt|;
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Seek to 2500 bytes made incorrectly"
argument_list|,
literal|"Connect: http://resolvedurl/, Range: bytes=2500-"
argument_list|,
name|r
operator|.
name|getMsg
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|responseCode
operator|=
literal|200
expr_stmt|;
name|is
operator|.
name|seek
argument_list|(
literal|500
argument_list|)
expr_stmt|;
try|try
block|{
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should be thrown when 200 response is given "
operator|+
literal|"but 206 is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Should fail because incorrect response code was sent"
argument_list|,
literal|"206 expected, but received 200"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|responseCode
operator|=
literal|206
expr_stmt|;
name|is
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should be thrown when 206 response is given "
operator|+
literal|"but 200 is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Should fail because incorrect response code was sent"
argument_list|,
literal|"200 expected, but received 206"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

