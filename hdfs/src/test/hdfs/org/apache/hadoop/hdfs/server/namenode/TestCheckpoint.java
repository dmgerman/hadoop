begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
operator|.
name|ErrorSimulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeDirType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_comment
comment|/**  * This class tests the creation and validation of a checkpoint.  */
end_comment

begin_class
DECL|class|TestCheckpoint
specifier|public
class|class
name|TestCheckpoint
extends|extends
name|TestCase
block|{
DECL|field|seed
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0xDEADBEEFL
decl_stmt|;
DECL|field|blockSize
specifier|static
specifier|final
name|int
name|blockSize
init|=
literal|4096
decl_stmt|;
DECL|field|fileSize
specifier|static
specifier|final
name|int
name|fileSize
init|=
literal|8192
decl_stmt|;
DECL|field|numDatanodes
specifier|static
specifier|final
name|int
name|numDatanodes
init|=
literal|3
decl_stmt|;
DECL|field|replication
name|short
name|replication
init|=
literal|3
decl_stmt|;
DECL|method|writeFile (FileSystem fileSys, Path name, int repl)
specifier|static
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|stm
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|repl
argument_list|,
operator|(
name|long
operator|)
name|blockSize
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|TestCheckpoint
operator|.
name|fileSize
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|TestCheckpoint
operator|.
name|seed
argument_list|)
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|checkFile (FileSystem fileSys, Path name, int repl)
specifier|static
name|void
name|checkFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|replication
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|name
argument_list|)
operator|.
name|getReplication
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"replication for "
operator|+
name|name
argument_list|,
name|repl
argument_list|,
name|replication
argument_list|)
expr_stmt|;
comment|//We should probably test for more of the file properties.
block|}
DECL|method|cleanupFile (FileSystem fileSys, Path name)
specifier|static
name|void
name|cleanupFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * put back the old namedir    */
DECL|method|resurrectNameDir (File namedir)
specifier|private
name|void
name|resurrectNameDir
parameter_list|(
name|File
name|namedir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|parentdir
init|=
name|namedir
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|namedir
operator|.
name|getName
argument_list|()
decl_stmt|;
name|File
name|oldname
init|=
operator|new
name|File
argument_list|(
name|parentdir
argument_list|,
name|name
operator|+
literal|".old"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldname
operator|.
name|renameTo
argument_list|(
name|namedir
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * remove one namedir    */
DECL|method|removeOneNameDir (File namedir)
specifier|private
name|void
name|removeOneNameDir
parameter_list|(
name|File
name|namedir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|parentdir
init|=
name|namedir
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|namedir
operator|.
name|getName
argument_list|()
decl_stmt|;
name|File
name|newname
init|=
operator|new
name|File
argument_list|(
name|parentdir
argument_list|,
name|name
operator|+
literal|".old"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|namedir
operator|.
name|renameTo
argument_list|(
name|newname
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Verify that namenode does not startup if one namedir is bad.    */
DECL|method|testNamedirError (Configuration conf, Collection<URI> namedirs)
specifier|private
name|void
name|testNamedirError
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Collection
argument_list|<
name|URI
argument_list|>
name|namedirs
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting testNamedirError"
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|namedirs
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
return|return;
block|}
comment|//
comment|// Remove one namedir& Restart cluster. This should fail.
comment|//
name|File
name|first
init|=
operator|new
name|File
argument_list|(
name|namedirs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|removeOneNameDir
argument_list|(
name|first
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// no nothing
block|}
name|resurrectNameDir
argument_list|(
name|first
argument_list|)
expr_stmt|;
comment|// put back namedir
block|}
comment|/**    * Tests EditLogFileOutputStream doesn't throw NullPointerException on being    * closed twice.    * See https://issues.apache.org/jira/browse/HDFS-2011    */
DECL|method|testEditLogFileOutputStreamCloses ()
specifier|public
name|void
name|testEditLogFileOutputStreamCloses
parameter_list|()
throws|throws
name|IOException
throws|,
name|NullPointerException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing EditLogFileOutputStream doesn't throw "
operator|+
literal|"NullPointerException on being closed twice"
argument_list|)
expr_stmt|;
name|File
name|editLogStreamFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|editLogStreamFile
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"editLogStream.dat"
argument_list|)
expr_stmt|;
name|EditLogFileOutputStream
name|editLogStream
init|=
operator|new
name|EditLogFileOutputStream
argument_list|(
name|editLogStreamFile
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|editLogStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//Closing an twice should not throw a NullPointerException
name|editLogStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|editLogStreamFile
operator|!=
literal|null
condition|)
comment|// Cleanup the editLogStream.dat file we created
name|editLogStreamFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully tested EditLogFileOutputStream doesn't "
operator|+
literal|"throw NullPointerException on being closed twice"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks that an IOException in NNStorage.setCheckpointTimeInStorage is handled    * correctly (by removing the storage directory)    * See https://issues.apache.org/jira/browse/HDFS-2011    */
DECL|method|testSetCheckpointTimeInStorageHandlesIOException ()
specifier|public
name|void
name|testSetCheckpointTimeInStorageHandlesIOException
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Check IOException handled correctly by setCheckpointTimeInStorage"
argument_list|)
expr_stmt|;
name|NNStorage
name|nnStorage
init|=
operator|new
name|NNStorage
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|URI
argument_list|>
name|fsImageDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|URI
argument_list|>
name|editsDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|File
name|filePath
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"storageDirToCheck"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Couldn't create directory storageDirToCheck"
argument_list|,
name|filePath
operator|.
name|exists
argument_list|()
operator|||
name|filePath
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|fsImageDirs
operator|.
name|add
argument_list|(
name|filePath
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|editsDirs
operator|.
name|add
argument_list|(
name|filePath
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
comment|// Initialize NNStorage
name|nnStorage
operator|.
name|setStorageDirectories
argument_list|(
name|fsImageDirs
argument_list|,
name|editsDirs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List of storage directories didn't have storageDirToCheck."
argument_list|,
name|nnStorage
operator|.
name|getEditsDirectories
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"storageDirToCheck"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List of removed storage directories wasn't empty"
argument_list|,
name|nnStorage
operator|.
name|getRemovedStorageDirs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Delete storage directory to cause IOException in setCheckpointTimeInStorage
name|assertTrue
argument_list|(
literal|"Couldn't remove directory "
operator|+
name|filePath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|filePath
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Just call setCheckpointTimeInStorage using any random number
name|nnStorage
operator|.
name|setCheckpointTimeInStorage
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StorageDirectory
argument_list|>
name|listRsd
init|=
name|nnStorage
operator|.
name|getRemovedStorageDirs
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Removed directory wasn't what was expected"
argument_list|,
name|listRsd
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|listRsd
operator|.
name|get
argument_list|(
name|listRsd
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getRoot
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"storageDirToCheck"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully checked IOException is handled correctly "
operator|+
literal|"by setCheckpointTimeInStorage"
argument_list|)
expr_stmt|;
block|}
comment|/*    * Simulate namenode crashing after rolling edit log.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testSecondaryNamenodeError1 (Configuration conf)
specifier|private
name|void
name|testSecondaryNamenodeError1
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting testSecondaryNamenodeError 1"
argument_list|)
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"checkpointxx.dat"
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// Make the checkpoint fail after rolling the edits log.
comment|//
name|SecondaryNameNode
name|secondary
init|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ErrorSimulator
operator|.
name|setErrorSimulation
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
comment|// this should fail
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{       }
name|ErrorSimulator
operator|.
name|clearErrorSimulation
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|//
comment|// Create a new file
comment|//
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// Restart cluster and verify that file exists.
comment|// Then take another checkpoint to verify that the
comment|// namenode restart accounted for the rolled edit logs.
comment|//
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting testSecondaryNamenodeError 2"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Also check that the edits file is empty here
comment|// and that temporary checkpoint files are gone.
name|FSImage
name|image
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|it
init|=
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterator
argument_list|(
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StorageDirectory
name|sd
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageFile
argument_list|(
name|sd
argument_list|,
name|NameNodeFile
operator|.
name|IMAGE_NEW
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|it
init|=
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterator
argument_list|(
name|NameNodeDirType
operator|.
name|EDITS
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StorageDirectory
name|sd
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|getEditNewFile
argument_list|(
name|sd
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|edits
init|=
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|getEditFile
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|edits
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// edits should exist and be empty
name|long
name|editsLen
init|=
name|edits
operator|.
name|length
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|editsLen
operator|==
name|Integer
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
argument_list|)
expr_stmt|;
block|}
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
try|try
block|{
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|SecondaryNameNode
name|secondary
init|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * Simulate a namenode crash after uploading new image    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testSecondaryNamenodeError2 (Configuration conf)
specifier|private
name|void
name|testSecondaryNamenodeError2
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting testSecondaryNamenodeError 21"
argument_list|)
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"checkpointyy.dat"
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// Make the checkpoint fail after uploading the new fsimage.
comment|//
name|SecondaryNameNode
name|secondary
init|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ErrorSimulator
operator|.
name|setErrorSimulation
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
comment|// this should fail
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{       }
name|ErrorSimulator
operator|.
name|clearErrorSimulation
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|//
comment|// Create a new file
comment|//
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// Restart cluster and verify that file exists.
comment|// Then take another checkpoint to verify that the
comment|// namenode restart accounted for the rolled edit logs.
comment|//
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting testSecondaryNamenodeError 22"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
try|try
block|{
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|SecondaryNameNode
name|secondary
init|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * Simulate a secondary namenode crash after rolling the edit log.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testSecondaryNamenodeError3 (Configuration conf)
specifier|private
name|void
name|testSecondaryNamenodeError3
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting testSecondaryNamenodeError 31"
argument_list|)
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"checkpointzz.dat"
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// Make the checkpoint fail after rolling the edit log.
comment|//
name|SecondaryNameNode
name|secondary
init|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ErrorSimulator
operator|.
name|setErrorSimulation
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
comment|// this should fail
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{       }
name|ErrorSimulator
operator|.
name|clearErrorSimulation
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// secondary namenode crash!
comment|// start new instance of secondary and verify that
comment|// a new rollEditLog suceedes inspite of the fact that
comment|// edits.new already exists.
comment|//
name|secondary
operator|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
comment|// this should work correctly
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|//
comment|// Create a new file
comment|//
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// Restart cluster and verify that file exists.
comment|// Then take another checkpoint to verify that the
comment|// namenode restart accounted for the twice-rolled edit logs.
comment|//
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting testSecondaryNamenodeError 32"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
try|try
block|{
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|SecondaryNameNode
name|secondary
init|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Simulate a secondary node failure to transfer image    * back to the name-node.    * Used to truncate primary fsimage file.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testSecondaryFailsToReturnImage (Configuration conf)
name|void
name|testSecondaryFailsToReturnImage
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting testSecondaryFailsToReturnImage"
argument_list|)
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"checkpointRI.dat"
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FSImage
name|image
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|StorageDirectory
name|sd
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|it
init|=
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterator
argument_list|(
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|sd
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|sd
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|long
name|fsimageLength
init|=
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageFile
argument_list|(
name|sd
argument_list|,
name|NameNodeFile
operator|.
name|IMAGE
argument_list|)
operator|.
name|length
argument_list|()
decl_stmt|;
comment|//
comment|// Make the checkpoint
comment|//
name|SecondaryNameNode
name|secondary
init|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ErrorSimulator
operator|.
name|setErrorSimulation
argument_list|(
literal|2
argument_list|)
expr_stmt|;
try|try
block|{
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
comment|// this should fail
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testSecondaryFailsToReturnImage: doCheckpoint() "
operator|+
literal|"failed predictably - "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|ErrorSimulator
operator|.
name|clearErrorSimulation
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Verify that image file sizes did not change.
for|for
control|(
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|it
init|=
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterator
argument_list|(
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|assertTrue
argument_list|(
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageFile
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|NameNodeFile
operator|.
name|IMAGE
argument_list|)
operator|.
name|length
argument_list|()
operator|==
name|fsimageLength
argument_list|)
expr_stmt|;
block|}
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Simulate namenode failing to send the whole file    * secondary namenode sometimes assumed it received all of it    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testNameNodeImageSendFail (Configuration conf)
name|void
name|testNameNodeImageSendFail
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting testNameNodeImageSendFail"
argument_list|)
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"checkpointww.dat"
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// Make the checkpoint fail after rolling the edit log.
comment|//
name|SecondaryNameNode
name|secondary
init|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ErrorSimulator
operator|.
name|setErrorSimulation
argument_list|(
literal|3
argument_list|)
expr_stmt|;
try|try
block|{
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
comment|// this should fail
name|fail
argument_list|(
literal|"Did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We only sent part of the image. Have to trigger this exception
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"is not of the advertised size"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ErrorSimulator
operator|.
name|clearErrorSimulation
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// secondary namenode crash!
comment|// start new instance of secondary and verify that
comment|// a new rollEditLog suceedes inspite of the fact that
comment|// edits.new already exists.
comment|//
name|secondary
operator|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
comment|// this should work correctly
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|//
comment|// Create a new file
comment|//
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test different startup scenarios.    *<p><ol>    *<li> Start of primary name-node in secondary directory must succeed.     *<li> Start of secondary node when the primary is already running in     *      this directory must fail.    *<li> Start of primary name-node if secondary node is already running in     *      this directory must fail.    *<li> Start of two secondary nodes in the same directory must fail.    *<li> Import of a checkpoint must fail if primary     * directory contains a valid image.    *<li> Import of the secondary image directory must succeed if primary     * directory does not exist.    *<li> Recover failed checkpoint for secondary node.    *<li> Complete failed checkpoint for secondary node.    *</ol>    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testStartup (Configuration conf)
name|void
name|testStartup
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Startup of the name-node in the checkpoint directory."
argument_list|)
expr_stmt|;
name|String
name|primaryDirs
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|)
decl_stmt|;
name|String
name|primaryEditsDirs
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|)
decl_stmt|;
name|String
name|checkpointDirs
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|)
decl_stmt|;
name|String
name|checkpointEditsDirs
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY
argument_list|)
decl_stmt|;
name|NameNode
name|nn
init|=
name|startNameNode
argument_list|(
name|conf
argument_list|,
name|checkpointDirs
argument_list|,
name|checkpointEditsDirs
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|)
decl_stmt|;
comment|// Starting secondary node in the same directory as the primary
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Startup of secondary in the same dir as the primary."
argument_list|)
expr_stmt|;
name|SecondaryNameNode
name|secondary
init|=
literal|null
decl_stmt|;
try|try
block|{
name|secondary
operator|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secondary
operator|.
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|isLockSupported
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected to fail
name|assertTrue
argument_list|(
name|secondary
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
name|nn
operator|.
name|stop
argument_list|()
expr_stmt|;
name|nn
operator|=
literal|null
expr_stmt|;
comment|// Starting primary node in the same directory as the secondary
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Startup of primary in the same dir as the secondary."
argument_list|)
expr_stmt|;
comment|// secondary won't start without primary
name|nn
operator|=
name|startNameNode
argument_list|(
name|conf
argument_list|,
name|primaryDirs
argument_list|,
name|primaryEditsDirs
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|)
expr_stmt|;
name|boolean
name|succeed
init|=
literal|false
decl_stmt|;
do|do
block|{
try|try
block|{
name|secondary
operator|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|succeed
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
comment|// keep trying
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Try again: "
operator|+
name|ie
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|succeed
condition|)
do|;
name|nn
operator|.
name|stop
argument_list|()
expr_stmt|;
name|nn
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|nn
operator|=
name|startNameNode
argument_list|(
name|conf
argument_list|,
name|checkpointDirs
argument_list|,
name|checkpointEditsDirs
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nn
operator|.
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|isLockSupported
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|nn
operator|.
name|stop
argument_list|()
expr_stmt|;
name|nn
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected to fail
name|assertTrue
argument_list|(
name|nn
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Try another secondary in the same directory
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Startup of two secondaries in the same dir."
argument_list|)
expr_stmt|;
comment|// secondary won't start without primary
name|nn
operator|=
name|startNameNode
argument_list|(
name|conf
argument_list|,
name|primaryDirs
argument_list|,
name|primaryEditsDirs
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|)
expr_stmt|;
name|SecondaryNameNode
name|secondary2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|secondary2
operator|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secondary2
operator|.
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|isLockSupported
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|secondary2
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected to fail
name|assertTrue
argument_list|(
name|secondary2
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
name|nn
operator|.
name|stop
argument_list|()
expr_stmt|;
name|nn
operator|=
literal|null
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Import a checkpoint with existing primary image.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Import a checkpoint with existing primary image."
argument_list|)
expr_stmt|;
try|try
block|{
name|nn
operator|=
name|startNameNode
argument_list|(
name|conf
argument_list|,
name|primaryDirs
argument_list|,
name|primaryEditsDirs
argument_list|,
name|StartupOption
operator|.
name|IMPORT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected to fail
name|assertTrue
argument_list|(
name|nn
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Remove current image and import a checkpoint.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Import a checkpoint with existing primary image."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|nameDirs
init|=
operator|(
name|List
argument_list|<
name|URI
argument_list|>
operator|)
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|nameEditsDirs
init|=
operator|(
name|List
argument_list|<
name|URI
argument_list|>
operator|)
name|FSNamesystem
operator|.
name|getNamespaceEditsDirs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|fsimageLength
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|nameDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"current"
argument_list|)
argument_list|,
name|NameNodeFile
operator|.
name|IMAGE
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|URI
name|uri
range|:
name|nameDirs
control|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
condition|)
if|if
condition|(
operator|!
operator|(
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dir
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot remove directory: "
operator|+
name|dir
argument_list|)
throw|;
if|if
condition|(
operator|!
name|dir
operator|.
name|mkdirs
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create directory "
operator|+
name|dir
argument_list|)
throw|;
block|}
for|for
control|(
name|URI
name|uri
range|:
name|nameEditsDirs
control|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
condition|)
if|if
condition|(
operator|!
operator|(
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dir
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot remove directory: "
operator|+
name|dir
argument_list|)
throw|;
if|if
condition|(
operator|!
name|dir
operator|.
name|mkdirs
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create directory "
operator|+
name|dir
argument_list|)
throw|;
block|}
name|nn
operator|=
name|startNameNode
argument_list|(
name|conf
argument_list|,
name|primaryDirs
argument_list|,
name|primaryEditsDirs
argument_list|,
name|StartupOption
operator|.
name|IMPORT
argument_list|)
expr_stmt|;
comment|// Verify that image file sizes did not change.
name|FSImage
name|image
init|=
name|nn
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|it
init|=
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterator
argument_list|(
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|assertTrue
argument_list|(
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageFile
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|NameNodeFile
operator|.
name|IMAGE
argument_list|)
operator|.
name|length
argument_list|()
operator|==
name|fsimageLength
argument_list|)
expr_stmt|;
block|}
name|nn
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// recover failed checkpoint
name|nn
operator|=
name|startNameNode
argument_list|(
name|conf
argument_list|,
name|primaryDirs
argument_list|,
name|primaryEditsDirs
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|secondaryDirs
init|=
name|FSImage
operator|.
name|getCheckpointDirs
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|URI
name|uri
range|:
name|secondaryDirs
control|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Storage
operator|.
name|rename
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"current"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"lastcheckpoint.tmp"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|secondary
operator|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
for|for
control|(
name|URI
name|uri
range|:
name|secondaryDirs
control|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"current"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"lastcheckpoint.tmp"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// complete failed checkpoint
for|for
control|(
name|URI
name|uri
range|:
name|secondaryDirs
control|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Storage
operator|.
name|rename
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"previous.checkpoint"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"lastcheckpoint.tmp"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|secondary
operator|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
for|for
control|(
name|URI
name|uri
range|:
name|secondaryDirs
control|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"current"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"previous.checkpoint"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"lastcheckpoint.tmp"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|nn
operator|.
name|stop
argument_list|()
expr_stmt|;
name|nn
operator|=
literal|null
expr_stmt|;
comment|// Check that everything starts ok now.
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|startNameNode ( Configuration conf, String imageDirs, String editsDirs, StartupOption start)
name|NameNode
name|startNameNode
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|imageDirs
parameter_list|,
name|String
name|editsDirs
parameter_list|,
name|StartupOption
name|start
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|imageDirs
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|editsDirs
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
name|start
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
name|NameNode
name|nn
init|=
name|NameNode
operator|.
name|createNameNode
argument_list|(
name|args
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|nn
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|nn
return|;
block|}
comment|// This deprecation suppress warning does not work due to known Java bug:
comment|// http://bugs.sun.com/view_bug.do?bug_id=6460147
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|startSecondaryNameNode (Configuration conf )
name|SecondaryNameNode
name|startSecondaryNameNode
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
return|return
operator|new
name|SecondaryNameNode
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * Tests checkpoint in HDFS.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testCheckpoint ()
specifier|public
name|void
name|testCheckpoint
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"checkpoint.dat"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
literal|"checkpoint2.dat"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|namedirs
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|replication
operator|=
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
comment|//
comment|// verify that 'format' really blew away all pre-existing files
comment|//
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|file2
argument_list|)
argument_list|)
expr_stmt|;
name|namedirs
operator|=
name|cluster
operator|.
name|getNameDirs
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//
comment|// Create file1
comment|//
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
comment|//
comment|// Take a checkpoint
comment|//
name|SecondaryNameNode
name|secondary
init|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ErrorSimulator
operator|.
name|initializeErrorSimulationEvent
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// Restart cluster and verify that file1 still exist.
comment|//
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|Path
name|tmpDir
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp_tmp"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// check that file1 still exists
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
comment|// create new file file2
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|,
name|replication
argument_list|)
expr_stmt|;
comment|//
comment|// Take a checkpoint
comment|//
name|SecondaryNameNode
name|secondary
init|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|tmpDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|mkdirs
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// Restart cluster and verify that file2 exists and
comment|// file1 does not exist.
comment|//
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|tmpDir
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// verify that file2 exists
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// file2 is left behind.
name|testNameNodeImageSendFail
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testSecondaryNamenodeError1
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testSecondaryNamenodeError2
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testSecondaryNamenodeError3
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testNamedirError
argument_list|(
name|conf
argument_list|,
name|namedirs
argument_list|)
expr_stmt|;
name|testSecondaryFailsToReturnImage
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testStartup
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests save namepsace.    */
DECL|method|testSaveNamespace ()
specifier|public
name|void
name|testSaveNamespace
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|FileContext
name|fc
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
call|(
name|DistributedFileSystem
call|)
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Saving image without safe mode should fail
name|DFSAdmin
name|admin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-saveNamespace"
block|}
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|eIO
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|eIO
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Safe mode should be turned ON"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// create new file
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"namespace.dat"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|replication
argument_list|)
expr_stmt|;
comment|// create new link
name|Path
name|symlink
init|=
operator|new
name|Path
argument_list|(
literal|"file.link"
argument_list|)
decl_stmt|;
name|fc
operator|.
name|createSymlink
argument_list|(
name|file
argument_list|,
name|symlink
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fc
operator|.
name|getFileLinkStatus
argument_list|(
name|symlink
argument_list|)
operator|.
name|isSymlink
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the edits file is NOT empty
name|Collection
argument_list|<
name|URI
argument_list|>
name|editsDirs
init|=
name|cluster
operator|.
name|getNameEditsDirs
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|URI
name|uri
range|:
name|editsDirs
control|)
block|{
name|File
name|ed
init|=
operator|new
name|File
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|ed
argument_list|,
literal|"current/edits"
argument_list|)
operator|.
name|length
argument_list|()
operator|>
name|Integer
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
argument_list|)
expr_stmt|;
block|}
comment|// Saving image in safe mode should succeed
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// verify that the edits file is empty
for|for
control|(
name|URI
name|uri
range|:
name|editsDirs
control|)
block|{
name|File
name|ed
init|=
operator|new
name|File
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|ed
argument_list|,
literal|"current/edits"
argument_list|)
operator|.
name|length
argument_list|()
operator|==
name|Integer
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
argument_list|)
expr_stmt|;
block|}
comment|// restart cluster and verify file exists
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
call|(
name|DistributedFileSystem
call|)
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fc
operator|.
name|getFileLinkStatus
argument_list|(
name|symlink
argument_list|)
operator|.
name|isSymlink
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* Test case to test CheckpointSignature */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testCheckpointSignature ()
specifier|public
name|void
name|testCheckpointSignature
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|SecondaryNameNode
name|secondary
init|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// prepare checkpoint image
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
name|CheckpointSignature
name|sig
init|=
name|nn
operator|.
name|rollEditLog
argument_list|()
decl_stmt|;
comment|// manipulate the CheckpointSignature fields
name|sig
operator|.
name|setBlockpoolID
argument_list|(
literal|"somerandomebpid"
argument_list|)
expr_stmt|;
name|sig
operator|.
name|clusterID
operator|=
literal|"somerandomcid"
expr_stmt|;
try|try
block|{
name|sig
operator|.
name|validateStorageInfo
argument_list|(
name|nn
operator|.
name|getFSImage
argument_list|()
argument_list|)
expr_stmt|;
comment|// this should fail
name|assertTrue
argument_list|(
literal|"This test is expected to fail."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{     }
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Starts two namenodes and two secondary namenodes, verifies that secondary    * namenodes are configured correctly to talk to their respective namenodes    * and can do the checkpoint.    *     * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testMultipleSecondaryNamenodes ()
specifier|public
name|void
name|testMultipleSecondaryNamenodes
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|String
name|nameserviceId1
init|=
literal|"ns1"
decl_stmt|;
name|String
name|nameserviceId2
init|=
literal|"ns2"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_FEDERATION_NAMESERVICES
argument_list|,
name|nameserviceId1
operator|+
literal|","
operator|+
name|nameserviceId2
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numNameNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|nameNodePort
argument_list|(
literal|9928
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Configuration
name|snConf1
init|=
operator|new
name|HdfsConfiguration
argument_list|(
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|snConf2
init|=
operator|new
name|HdfsConfiguration
argument_list|(
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|nn1RpcAddress
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|rpcAddress
decl_stmt|;
name|InetSocketAddress
name|nn2RpcAddress
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|rpcAddress
decl_stmt|;
name|String
name|nn1
init|=
name|nn1RpcAddress
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|nn1RpcAddress
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|String
name|nn2
init|=
name|nn2RpcAddress
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|nn2RpcAddress
operator|.
name|getPort
argument_list|()
decl_stmt|;
comment|// Set the Service Rpc address to empty to make sure the node specific
comment|// setting works
name|snConf1
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|snConf2
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// Set the nameserviceIds
name|snConf1
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|getNameServiceIdKey
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|nameserviceId1
argument_list|)
argument_list|,
name|nn1
argument_list|)
expr_stmt|;
name|snConf2
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|getNameServiceIdKey
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|nameserviceId2
argument_list|)
argument_list|,
name|nn2
argument_list|)
expr_stmt|;
name|SecondaryNameNode
name|secondary1
init|=
name|startSecondaryNameNode
argument_list|(
name|snConf1
argument_list|)
decl_stmt|;
name|SecondaryNameNode
name|secondary2
init|=
name|startSecondaryNameNode
argument_list|(
name|snConf2
argument_list|)
decl_stmt|;
comment|// make sure the two secondary namenodes are talking to correct namenodes.
name|assertEquals
argument_list|(
name|secondary1
operator|.
name|getNameNodeAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
name|nn1RpcAddress
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secondary2
operator|.
name|getNameNodeAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
name|nn2RpcAddress
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|secondary1
operator|.
name|getNameNodeAddress
argument_list|()
operator|.
name|getPort
argument_list|()
operator|!=
name|secondary2
operator|.
name|getNameNodeAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// both should checkpoint.
name|secondary1
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
name|secondary2
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
name|secondary1
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|secondary2
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Simulate a secondary node failure to transfer image    * back to the name-node.    * Used to truncate primary fsimage file.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testSecondaryImageDownload (Configuration conf)
specifier|public
name|void
name|testSecondaryImageDownload
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting testSecondaryImageDownload"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/checkpoint"
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FSImage
name|image
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// Make the checkpoint
comment|//
name|SecondaryNameNode
name|secondary
init|=
name|startSecondaryNameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|fsimageLength
init|=
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageFile
argument_list|(
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterator
argument_list|(
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|)
operator|.
name|next
argument_list|()
argument_list|,
name|NameNodeFile
operator|.
name|IMAGE
argument_list|)
operator|.
name|length
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Image is downloaded"
argument_list|,
name|secondary
operator|.
name|doCheckpoint
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that image file sizes did not change.
for|for
control|(
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|it
init|=
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterator
argument_list|(
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|assertTrue
argument_list|(
literal|"Image size does not change"
argument_list|,
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageFile
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|NameNodeFile
operator|.
name|IMAGE
argument_list|)
operator|.
name|length
argument_list|()
operator|==
name|fsimageLength
argument_list|)
expr_stmt|;
block|}
comment|// change namespace
name|fileSys
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Image is not downloaded"
argument_list|,
name|secondary
operator|.
name|doCheckpoint
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|it
init|=
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterator
argument_list|(
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|assertTrue
argument_list|(
literal|"Image size increased"
argument_list|,
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageFile
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|NameNodeFile
operator|.
name|IMAGE
argument_list|)
operator|.
name|length
argument_list|()
operator|>
name|fsimageLength
argument_list|)
expr_stmt|;
block|}
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

