begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogFileInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeDirType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|metrics
operator|.
name|NameNodeMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_comment
comment|/**  * This class tests the creation and validation of a checkpoint.  */
end_comment

begin_class
DECL|class|TestEditLog
specifier|public
class|class
name|TestEditLog
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestEditLog
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NUM_DATA_NODES
specifier|static
specifier|final
name|int
name|NUM_DATA_NODES
init|=
literal|0
decl_stmt|;
comment|// This test creates NUM_THREADS threads and each thread does
comment|// 2 * NUM_TRANSACTIONS Transactions concurrently.
DECL|field|NUM_TRANSACTIONS
specifier|static
specifier|final
name|int
name|NUM_TRANSACTIONS
init|=
literal|100
decl_stmt|;
DECL|field|NUM_THREADS
specifier|static
specifier|final
name|int
name|NUM_THREADS
init|=
literal|100
decl_stmt|;
comment|//
comment|// an object that does a bunch of transactions
comment|//
DECL|class|Transactions
specifier|static
class|class
name|Transactions
implements|implements
name|Runnable
block|{
DECL|field|namesystem
name|FSNamesystem
name|namesystem
decl_stmt|;
DECL|field|numTransactions
name|int
name|numTransactions
decl_stmt|;
DECL|field|replication
name|short
name|replication
init|=
literal|3
decl_stmt|;
DECL|field|blockSize
name|long
name|blockSize
init|=
literal|64
decl_stmt|;
DECL|method|Transactions (FSNamesystem ns, int num)
name|Transactions
parameter_list|(
name|FSNamesystem
name|ns
parameter_list|,
name|int
name|num
parameter_list|)
block|{
name|namesystem
operator|=
name|ns
expr_stmt|;
name|numTransactions
operator|=
name|num
expr_stmt|;
block|}
comment|// add a bunch of transactions.
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|PermissionStatus
name|p
init|=
name|namesystem
operator|.
name|createFsOwnerPermissions
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
decl_stmt|;
name|FSEditLog
name|editLog
init|=
name|namesystem
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTransactions
condition|;
name|i
operator|++
control|)
block|{
name|INodeFileUnderConstruction
name|inode
init|=
operator|new
name|INodeFileUnderConstruction
argument_list|(
name|p
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|editLog
operator|.
name|logOpenFile
argument_list|(
literal|"/filename"
operator|+
name|i
argument_list|,
name|inode
argument_list|)
expr_stmt|;
name|editLog
operator|.
name|logCloseFile
argument_list|(
literal|"/filename"
operator|+
name|i
argument_list|,
name|inode
argument_list|)
expr_stmt|;
name|editLog
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Tests transaction logging in dfs.    */
DECL|method|testEditLog ()
specifier|public
name|void
name|testEditLog
parameter_list|()
throws|throws
name|IOException
block|{
name|testEditLog
argument_list|(
literal|2048
argument_list|)
expr_stmt|;
comment|// force edit buffer to automatically sync on each log of edit log entry
name|testEditLog
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test edit log with different initial buffer size    *     * @param initialSize initial edit log buffer size    * @throws IOException    */
DECL|method|testEditLog (int initialSize)
specifier|private
name|void
name|testEditLog
parameter_list|(
name|int
name|initialSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// start a cluster
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
specifier|final
name|FSNamesystem
name|namesystem
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|URI
argument_list|>
name|it
init|=
name|cluster
operator|.
name|getNameDirs
argument_list|(
literal|0
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
name|FSImage
name|fsimage
init|=
name|namesystem
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|FSEditLog
name|editLog
init|=
name|fsimage
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
comment|// set small size of flush buffer
name|editLog
operator|.
name|setBufferCapacity
argument_list|(
name|initialSize
argument_list|)
expr_stmt|;
name|editLog
operator|.
name|close
argument_list|()
expr_stmt|;
name|editLog
operator|.
name|open
argument_list|()
expr_stmt|;
comment|// Create threads and make them run transactions concurrently.
name|Thread
name|threadId
index|[]
init|=
operator|new
name|Thread
index|[
name|NUM_THREADS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|Transactions
name|trans
init|=
operator|new
name|Transactions
argument_list|(
name|namesystem
argument_list|,
name|NUM_TRANSACTIONS
argument_list|)
decl_stmt|;
name|threadId
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|trans
argument_list|,
literal|"TransactionThread-"
operator|+
name|i
argument_list|)
expr_stmt|;
name|threadId
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// wait for all transactions to get over
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|threadId
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|i
operator|--
expr_stmt|;
comment|// retry
block|}
block|}
name|editLog
operator|.
name|close
argument_list|()
expr_stmt|;
name|editLog
operator|.
name|open
argument_list|()
expr_stmt|;
comment|// Verify that we can read in all the transactions that we have written.
comment|// If there were any corruptions, it is likely that the reading in
comment|// of these transactions will throw an exception.
comment|//
name|FSEditLogLoader
name|loader
init|=
operator|new
name|FSEditLogLoader
argument_list|(
name|namesystem
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|it
init|=
name|fsimage
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterator
argument_list|(
name|NameNodeDirType
operator|.
name|EDITS
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|editFile
init|=
name|NNStorage
operator|.
name|getStorageFile
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|NameNodeFile
operator|.
name|EDITS
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Verifying file: "
operator|+
name|editFile
argument_list|)
expr_stmt|;
name|int
name|numEdits
init|=
name|loader
operator|.
name|loadFSEdits
argument_list|(
operator|new
name|EditLogFileInputStream
argument_list|(
name|editFile
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numLeases
init|=
name|namesystem
operator|.
name|leaseManager
operator|.
name|countLease
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Number of outstanding leases "
operator|+
name|numLeases
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|numLeases
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Verification for "
operator|+
name|editFile
operator|+
literal|" failed. "
operator|+
literal|"Expected "
operator|+
operator|(
name|NUM_THREADS
operator|*
literal|2
operator|*
name|NUM_TRANSACTIONS
operator|)
operator|+
literal|" transactions. "
operator|+
literal|"Found "
operator|+
name|numEdits
operator|+
literal|" transactions."
argument_list|,
name|numEdits
operator|==
name|NUM_THREADS
operator|*
literal|2
operator|*
name|NUM_TRANSACTIONS
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|fileSys
operator|!=
literal|null
condition|)
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doLogEdit (ExecutorService exec, final FSEditLog log, final String filename)
specifier|private
name|void
name|doLogEdit
parameter_list|(
name|ExecutorService
name|exec
parameter_list|,
specifier|final
name|FSEditLog
name|log
parameter_list|,
specifier|final
name|String
name|filename
parameter_list|)
throws|throws
name|Exception
block|{
name|exec
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|call
parameter_list|()
block|{
name|log
operator|.
name|logSetReplication
argument_list|(
name|filename
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|doCallLogSync (ExecutorService exec, final FSEditLog log)
specifier|private
name|void
name|doCallLogSync
parameter_list|(
name|ExecutorService
name|exec
parameter_list|,
specifier|final
name|FSEditLog
name|log
parameter_list|)
throws|throws
name|Exception
block|{
name|exec
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|call
parameter_list|()
block|{
name|log
operator|.
name|logSync
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|doCallLogSyncAll (ExecutorService exec, final FSEditLog log)
specifier|private
name|void
name|doCallLogSyncAll
parameter_list|(
name|ExecutorService
name|exec
parameter_list|,
specifier|final
name|FSEditLog
name|log
parameter_list|)
throws|throws
name|Exception
block|{
name|exec
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|logSyncAll
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|testSyncBatching ()
specifier|public
name|void
name|testSyncBatching
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start a cluster
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
name|ExecutorService
name|threadA
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|ExecutorService
name|threadB
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
specifier|final
name|FSNamesystem
name|namesystem
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|FSImage
name|fsimage
init|=
name|namesystem
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
specifier|final
name|FSEditLog
name|editLog
init|=
name|fsimage
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"should start with no txids synced"
argument_list|,
literal|0
argument_list|,
name|editLog
operator|.
name|getSyncTxId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Log an edit from thread A
name|doLogEdit
argument_list|(
name|threadA
argument_list|,
name|editLog
argument_list|,
literal|"thread-a 1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"logging edit without syncing should do not affect txid"
argument_list|,
literal|0
argument_list|,
name|editLog
operator|.
name|getSyncTxId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Log an edit from thread B
name|doLogEdit
argument_list|(
name|threadB
argument_list|,
name|editLog
argument_list|,
literal|"thread-b 1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"logging edit without syncing should do not affect txid"
argument_list|,
literal|0
argument_list|,
name|editLog
operator|.
name|getSyncTxId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now ask to sync edit from B, which should sync both edits.
name|doCallLogSync
argument_list|(
name|threadB
argument_list|,
name|editLog
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"logSync from second thread should bump txid up to 2"
argument_list|,
literal|2
argument_list|,
name|editLog
operator|.
name|getSyncTxId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now ask to sync edit from A, which was already batched in - thus
comment|// it should increment the batch count metric
name|doCallLogSync
argument_list|(
name|threadA
argument_list|,
name|editLog
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"logSync from first thread shouldn't change txid"
argument_list|,
literal|2
argument_list|,
name|editLog
operator|.
name|getSyncTxId
argument_list|()
argument_list|)
expr_stmt|;
comment|//Should have incremented the batch count exactly once
name|assertCounter
argument_list|(
literal|"TransactionsBatchedInSync"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
literal|"NameNodeActivity"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|threadA
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|threadB
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|fileSys
operator|!=
literal|null
condition|)
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test what happens with the following sequence:    *    *  Thread A writes edit    *  Thread B calls logSyncAll    *           calls close() on stream    *  Thread A calls logSync    *    * This sequence is legal and can occur if enterSafeMode() is closely    * followed by saveNamespace.    */
DECL|method|testBatchedSyncWithClosedLogs ()
specifier|public
name|void
name|testBatchedSyncWithClosedLogs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start a cluster
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
name|ExecutorService
name|threadA
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|ExecutorService
name|threadB
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
specifier|final
name|FSNamesystem
name|namesystem
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|FSImage
name|fsimage
init|=
name|namesystem
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
specifier|final
name|FSEditLog
name|editLog
init|=
name|fsimage
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
comment|// Log an edit from thread A
name|doLogEdit
argument_list|(
name|threadA
argument_list|,
name|editLog
argument_list|,
literal|"thread-a 1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"logging edit without syncing should do not affect txid"
argument_list|,
literal|0
argument_list|,
name|editLog
operator|.
name|getSyncTxId
argument_list|()
argument_list|)
expr_stmt|;
comment|// logSyncAll in Thread B
name|doCallLogSyncAll
argument_list|(
name|threadB
argument_list|,
name|editLog
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"logSyncAll should sync thread A's transaction"
argument_list|,
literal|1
argument_list|,
name|editLog
operator|.
name|getSyncTxId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Close edit log
name|editLog
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Ask thread A to finish sync (which should be a no-op)
name|doCallLogSync
argument_list|(
name|threadA
argument_list|,
name|editLog
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|threadA
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|threadB
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|fileSys
operator|!=
literal|null
condition|)
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testEditChecksum ()
specifier|public
name|void
name|testEditChecksum
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start a cluster
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
specifier|final
name|FSNamesystem
name|namesystem
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|FSImage
name|fsimage
init|=
name|namesystem
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
specifier|final
name|FSEditLog
name|editLog
init|=
name|fsimage
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
name|fileSys
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|editFile
init|=
name|editLog
operator|.
name|getFsEditName
argument_list|()
decl_stmt|;
name|editLog
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|long
name|fileLen
init|=
name|editFile
operator|.
name|length
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"File name: "
operator|+
name|editFile
operator|+
literal|" len: "
operator|+
name|fileLen
argument_list|)
expr_stmt|;
name|RandomAccessFile
name|rwf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|editFile
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|rwf
operator|.
name|seek
argument_list|(
name|fileLen
operator|-
literal|4
argument_list|)
expr_stmt|;
comment|// seek to checksum bytes
name|int
name|b
init|=
name|rwf
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|rwf
operator|.
name|seek
argument_list|(
name|fileLen
operator|-
literal|4
argument_list|)
expr_stmt|;
name|rwf
operator|.
name|writeInt
argument_list|(
name|b
operator|+
literal|1
argument_list|)
expr_stmt|;
name|rwf
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should not be able to start"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
name|assertEquals
argument_list|(
literal|"Cause of exception should be ChecksumException"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|ChecksumException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFailedOpen ()
specifier|public
name|void
name|testFailedOpen
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
comment|// Set up spys
specifier|final
name|FSImage
name|originalImage
init|=
name|fsn
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|NNStorage
name|storage
init|=
name|originalImage
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|NNStorage
name|spyStorage
init|=
name|spy
argument_list|(
name|storage
argument_list|)
decl_stmt|;
name|originalImage
operator|.
name|storage
operator|=
name|spyStorage
expr_stmt|;
specifier|final
name|FSEditLog
name|editLog
init|=
name|originalImage
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
name|FSEditLog
name|spyLog
init|=
name|spy
argument_list|(
name|editLog
argument_list|)
decl_stmt|;
name|FSImage
name|spyImage
init|=
name|spy
argument_list|(
name|originalImage
argument_list|)
decl_stmt|;
name|fsn
operator|.
name|dir
operator|.
name|fsImage
operator|=
name|spyImage
expr_stmt|;
name|spyImage
operator|.
name|storage
operator|.
name|setStorageDirectories
argument_list|(
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|conf
argument_list|)
argument_list|,
name|FSNamesystem
operator|.
name|getNamespaceEditsDirs
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fail every attempt to open a new edit file
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Injected fault: open"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyLog
argument_list|)
operator|.
name|addNewEditLogStream
argument_list|(
operator|(
name|File
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|spyLog
operator|.
name|close
argument_list|()
expr_stmt|;
name|spyLog
operator|.
name|open
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"open did not fail even when all directories failed!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|spyLog
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Reset and try it with a working open
name|Mockito
operator|.
name|reset
argument_list|(
name|spyLog
argument_list|)
expr_stmt|;
name|spyImage
operator|.
name|storage
operator|.
name|setStorageDirectories
argument_list|(
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|conf
argument_list|)
argument_list|,
name|FSNamesystem
operator|.
name|getNamespaceEditsDirs
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|spyLog
operator|.
name|open
argument_list|()
expr_stmt|;
comment|// Close everything off
name|spyLog
operator|.
name|close
argument_list|()
expr_stmt|;
name|originalImage
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

