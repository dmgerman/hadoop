begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestLease
specifier|public
class|class
name|TestLease
block|{
DECL|method|hasLease (MiniDFSCluster cluster, Path src)
specifier|static
name|boolean
name|hasLease
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|Path
name|src
parameter_list|)
block|{
return|return
name|NameNodeAdapter
operator|.
name|getLeaseManager
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|)
operator|.
name|getLeaseByPath
argument_list|(
name|src
operator|.
name|toString
argument_list|()
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|field|dir
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/test/lease/"
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testLease ()
specifier|public
name|void
name|testLease
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|a
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Path
name|b
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|DataOutputStream
name|a_out
init|=
name|fs
operator|.
name|create
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|a_out
operator|.
name|writeBytes
argument_list|(
literal|"something"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|DataOutputStream
name|b_out
init|=
name|fs
operator|.
name|create
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|b_out
operator|.
name|writeBytes
argument_list|(
literal|"something"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|a_out
operator|.
name|close
argument_list|()
expr_stmt|;
name|b_out
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testFactory ()
specifier|public
name|void
name|testFactory
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
index|[]
name|groups
init|=
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
decl_stmt|;
specifier|final
name|UserGroupInformation
index|[]
name|ugi
init|=
operator|new
name|UserGroupInformation
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ugi
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ugi
index|[
name|i
index|]
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user"
operator|+
name|i
argument_list|,
name|groups
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|DFSClient
name|c1
init|=
name|createDFSClientAs
argument_list|(
name|ugi
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|DFSClient
name|c2
init|=
name|createDFSClientAs
argument_list|(
name|ugi
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c1
operator|.
name|leaserenewer
argument_list|,
name|c2
operator|.
name|leaserenewer
argument_list|)
expr_stmt|;
specifier|final
name|DFSClient
name|c3
init|=
name|createDFSClientAs
argument_list|(
name|ugi
index|[
literal|1
index|]
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|c1
operator|.
name|leaserenewer
operator|!=
name|c3
operator|.
name|leaserenewer
argument_list|)
expr_stmt|;
specifier|final
name|DFSClient
name|c4
init|=
name|createDFSClientAs
argument_list|(
name|ugi
index|[
literal|1
index|]
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c3
operator|.
name|leaserenewer
argument_list|,
name|c4
operator|.
name|leaserenewer
argument_list|)
expr_stmt|;
specifier|final
name|DFSClient
name|c5
init|=
name|createDFSClientAs
argument_list|(
name|ugi
index|[
literal|2
index|]
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|c1
operator|.
name|leaserenewer
operator|!=
name|c5
operator|.
name|leaserenewer
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|c3
operator|.
name|leaserenewer
operator|!=
name|c5
operator|.
name|leaserenewer
argument_list|)
expr_stmt|;
block|}
DECL|field|mcp
specifier|static
specifier|final
name|ClientProtocol
name|mcp
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|createDFSClientAs (UserGroupInformation ugi, final Configuration conf)
specifier|static
specifier|public
name|DFSClient
name|createDFSClientAs
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|DFSClient
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DFSClient
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|DFSClient
argument_list|(
literal|null
argument_list|,
name|mcp
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

