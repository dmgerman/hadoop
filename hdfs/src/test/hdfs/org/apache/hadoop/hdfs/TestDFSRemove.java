begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_class
DECL|class|TestDFSRemove
specifier|public
class|class
name|TestDFSRemove
extends|extends
name|junit
operator|.
name|framework
operator|.
name|TestCase
block|{
DECL|method|countLease (MiniDFSCluster cluster)
specifier|static
name|int
name|countLease
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
block|{
return|return
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|leaseManager
operator|.
name|countLease
argument_list|()
return|;
block|}
DECL|field|dir
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/test/remove/"
argument_list|)
decl_stmt|;
DECL|method|list (FileSystem fs, String name)
name|void
name|list
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n"
operator|+
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|s
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
control|)
block|{
name|FileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|""
operator|+
name|s
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createFile (FileSystem fs, Path f)
specifier|static
name|void
name|createFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|a_out
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|a_out
operator|.
name|writeBytes
argument_list|(
literal|"something"
argument_list|)
expr_stmt|;
name|a_out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getTotalDfsUsed (MiniDFSCluster cluster)
specifier|static
name|long
name|getTotalDfsUsed
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DataNode
name|node
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|total
operator|+=
name|node
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getDfsUsed
argument_list|()
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
DECL|method|testRemove ()
specifier|public
name|void
name|testRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|dfsUsedStart
init|=
name|getTotalDfsUsed
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
block|{
comment|// Create 100 files
specifier|final
name|int
name|fileCount
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileCount
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|a
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"a"
operator|+
name|i
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
name|long
name|dfsUsedMax
init|=
name|getTotalDfsUsed
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
comment|// Remove 100 files
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileCount
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|a
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"a"
operator|+
name|i
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|a
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// wait 3 heartbeat intervals, so that all blocks are deleted.
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
name|FSConstants
operator|.
name|HEARTBEAT_INTERVAL
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// all blocks should be gone now.
name|long
name|dfsUsedFinal
init|=
name|getTotalDfsUsed
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"All blocks should be gone. start="
operator|+
name|dfsUsedStart
operator|+
literal|" max="
operator|+
name|dfsUsedMax
operator|+
literal|" final="
operator|+
name|dfsUsedFinal
argument_list|,
name|dfsUsedStart
argument_list|,
name|dfsUsedFinal
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

