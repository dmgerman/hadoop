begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_class
DECL|class|TestDFSRename
specifier|public
class|class
name|TestDFSRename
extends|extends
name|junit
operator|.
name|framework
operator|.
name|TestCase
block|{
DECL|method|countLease (MiniDFSCluster cluster)
specifier|static
name|int
name|countLease
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
block|{
return|return
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|leaseManager
operator|.
name|countLease
argument_list|()
return|;
block|}
DECL|field|dir
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/test/rename/"
argument_list|)
decl_stmt|;
DECL|method|list (FileSystem fs, String name)
name|void
name|list
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n"
operator|+
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|s
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
control|)
block|{
name|FileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|""
operator|+
name|s
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createFile (FileSystem fs, Path f)
specifier|static
name|void
name|createFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|a_out
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|a_out
operator|.
name|writeBytes
argument_list|(
literal|"something"
argument_list|)
expr_stmt|;
name|a_out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRename ()
specifier|public
name|void
name|testRename
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|{
comment|//test lease
name|Path
name|a
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Path
name|aa
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"aa"
argument_list|)
decl_stmt|;
name|Path
name|b
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
name|a
argument_list|)
expr_stmt|;
comment|//should not have any lease
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countLease
argument_list|(
name|cluster
argument_list|)
argument_list|)
expr_stmt|;
name|DataOutputStream
name|aa_out
init|=
name|fs
operator|.
name|create
argument_list|(
name|aa
argument_list|)
decl_stmt|;
name|aa_out
operator|.
name|writeBytes
argument_list|(
literal|"something"
argument_list|)
expr_stmt|;
comment|//should have 1 lease
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countLease
argument_list|(
name|cluster
argument_list|)
argument_list|)
expr_stmt|;
name|list
argument_list|(
name|fs
argument_list|,
literal|"rename0"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|list
argument_list|(
name|fs
argument_list|,
literal|"rename1"
argument_list|)
expr_stmt|;
name|aa_out
operator|.
name|writeBytes
argument_list|(
literal|" more"
argument_list|)
expr_stmt|;
name|aa_out
operator|.
name|close
argument_list|()
expr_stmt|;
name|list
argument_list|(
name|fs
argument_list|,
literal|"rename2"
argument_list|)
expr_stmt|;
comment|//should not have any lease
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countLease
argument_list|(
name|cluster
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// test non-existent destination
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
literal|"/c/d"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|dstPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|dir
argument_list|,
name|dstPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// dst cannot be a file or directory under src
comment|// test rename /a/b/foo to /a/b/c
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
literal|"/a/b"
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
literal|"/a/b/c"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|src
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// dst cannot be a file under src
name|assertFalse
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
argument_list|)
expr_stmt|;
comment|// dst cannot be a directory under src
name|assertFalse
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|src
operator|.
name|getParent
argument_list|()
argument_list|,
name|dst
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// dst can start with src, if it is not a directory or file under src
comment|// test rename /test /testfile
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
literal|"/testPrefix"
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
literal|"/testPrefixfile"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// dst should not be same as src test rename /a/b/c to /a/b/c
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
literal|"/a/b/c"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/a/b/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/a/b/c/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

