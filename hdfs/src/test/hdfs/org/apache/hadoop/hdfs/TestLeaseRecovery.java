begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|TestInterDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseManager
import|;
end_import

begin_class
DECL|class|TestLeaseRecovery
specifier|public
class|class
name|TestLeaseRecovery
extends|extends
name|junit
operator|.
name|framework
operator|.
name|TestCase
block|{
DECL|field|BLOCK_SIZE
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|REPLICATION_NUM
specifier|static
specifier|final
name|short
name|REPLICATION_NUM
init|=
operator|(
name|short
operator|)
literal|3
decl_stmt|;
DECL|field|LEASE_PERIOD
specifier|private
specifier|static
specifier|final
name|long
name|LEASE_PERIOD
init|=
literal|300L
decl_stmt|;
DECL|method|checkMetaInfo (ExtendedBlock b, DataNode dn )
specifier|static
name|void
name|checkMetaInfo
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|DataNode
name|dn
parameter_list|)
throws|throws
name|IOException
block|{
name|TestInterDatanodeProtocol
operator|.
name|checkMetaInfo
argument_list|(
name|b
argument_list|,
name|dn
argument_list|)
expr_stmt|;
block|}
DECL|method|min (Integer... x)
specifier|static
name|int
name|min
parameter_list|(
name|Integer
modifier|...
name|x
parameter_list|)
block|{
name|int
name|m
init|=
name|x
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|x
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|x
index|[
name|i
index|]
operator|<
name|m
condition|)
block|{
name|m
operator|=
name|x
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|m
return|;
block|}
DECL|method|waitLeaseRecovery (MiniDFSCluster cluster)
name|void
name|waitLeaseRecovery
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
block|{
name|cluster
operator|.
name|setLeasePeriod
argument_list|(
name|LEASE_PERIOD
argument_list|,
name|LEASE_PERIOD
argument_list|)
expr_stmt|;
comment|// wait for the lease to expire
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
literal|3000
argument_list|)
expr_stmt|;
comment|// 2 heartbeat intervals
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{     }
block|}
comment|/**    * The following test first creates a file with a few blocks.    * It randomly truncates the replica of the last block stored in each datanode.    * Finally, it triggers block synchronization to synchronize all stored block.    */
DECL|method|testBlockSynchronization ()
specifier|public
name|void
name|testBlockSynchronization
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|ORG_FILE_SIZE
init|=
literal|3000
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.support.append"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|5
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|//create a file
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|String
name|filestr
init|=
literal|"/foo"
decl_stmt|;
name|Path
name|filepath
init|=
operator|new
name|Path
argument_list|(
name|filestr
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|filepath
argument_list|,
name|ORG_FILE_SIZE
argument_list|,
name|REPLICATION_NUM
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|exists
argument_list|(
name|filestr
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|dfs
argument_list|,
name|filepath
argument_list|,
name|REPLICATION_NUM
argument_list|)
expr_stmt|;
comment|//get block info for the last block
name|LocatedBlock
name|locatedblock
init|=
name|TestInterDatanodeProtocol
operator|.
name|getLastLocatedBlock
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getNamenode
argument_list|()
argument_list|,
name|filestr
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|datanodeinfos
init|=
name|locatedblock
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|REPLICATION_NUM
argument_list|,
name|datanodeinfos
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//connect to data nodes
name|DataNode
index|[]
name|datanodes
init|=
operator|new
name|DataNode
index|[
name|REPLICATION_NUM
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|REPLICATION_NUM
condition|;
name|i
operator|++
control|)
block|{
name|datanodes
index|[
name|i
index|]
operator|=
name|cluster
operator|.
name|getDataNode
argument_list|(
name|datanodeinfos
index|[
name|i
index|]
operator|.
name|getIpcPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|datanodes
index|[
name|i
index|]
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//verify Block Info
name|ExtendedBlock
name|lastblock
init|=
name|locatedblock
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|DataNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"newblocks="
operator|+
name|lastblock
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|REPLICATION_NUM
condition|;
name|i
operator|++
control|)
block|{
name|checkMetaInfo
argument_list|(
name|lastblock
argument_list|,
name|datanodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|DataNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"dfs.dfs.clientName="
operator|+
name|dfs
operator|.
name|dfs
operator|.
name|clientName
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|append
argument_list|(
name|filestr
argument_list|,
name|dfs
operator|.
name|dfs
operator|.
name|clientName
argument_list|)
expr_stmt|;
comment|// expire lease to trigger block recovery.
name|waitLeaseRecovery
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|Block
index|[]
name|updatedmetainfo
init|=
operator|new
name|Block
index|[
name|REPLICATION_NUM
index|]
decl_stmt|;
name|long
name|oldSize
init|=
name|lastblock
operator|.
name|getNumBytes
argument_list|()
decl_stmt|;
name|lastblock
operator|=
name|TestInterDatanodeProtocol
operator|.
name|getLastLocatedBlock
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|getNamenode
argument_list|()
argument_list|,
name|filestr
argument_list|)
operator|.
name|getBlock
argument_list|()
expr_stmt|;
name|long
name|currentGS
init|=
name|lastblock
operator|.
name|getGenerationStamp
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|REPLICATION_NUM
condition|;
name|i
operator|++
control|)
block|{
name|updatedmetainfo
index|[
name|i
index|]
operator|=
name|datanodes
index|[
name|i
index|]
operator|.
name|data
operator|.
name|getStoredBlock
argument_list|(
name|lastblock
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|lastblock
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lastblock
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|updatedmetainfo
index|[
name|i
index|]
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldSize
argument_list|,
name|updatedmetainfo
index|[
name|i
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentGS
argument_list|,
name|updatedmetainfo
index|[
name|i
index|]
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// verify that lease recovery does not occur when namenode is in safemode
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing that lease recovery cannot happen during safemode."
argument_list|)
expr_stmt|;
name|filestr
operator|=
literal|"/foo.safemode"
expr_stmt|;
name|filepath
operator|=
operator|new
name|Path
argument_list|(
name|filestr
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|create
argument_list|(
name|filepath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|FSConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|exists
argument_list|(
name|filestr
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|dfs
argument_list|,
name|filepath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|waitLeaseRecovery
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// verify that we still cannot recover the lease
name|LeaseManager
name|lm
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|leaseManager
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Found "
operator|+
name|lm
operator|.
name|countLease
argument_list|()
operator|+
literal|" lease, expected 1"
argument_list|,
name|lm
operator|.
name|countLease
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|FSConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

