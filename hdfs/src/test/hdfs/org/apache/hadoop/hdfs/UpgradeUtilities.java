begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UpgradeUtilities.java  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LayoutVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LayoutVersion
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsConstants
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsConstants
operator|.
name|NodeType
operator|.
name|NAME_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsConstants
operator|.
name|NodeType
operator|.
name|DATA_NODE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|BlockPoolSliceStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_comment
comment|/**  * This class defines a number of static helper methods used by the  * DFS Upgrade unit tests.  By default, a singleton master populated storage  * directory is created for a Namenode (contains edits, fsimage,  * version, and time files) and a Datanode (contains version and  * block files).  The master directories are lazily created.  They are then  * copied by the createStorageDirs() method to create new storage  * directories of the appropriate type (Namenode or Datanode).  */
end_comment

begin_class
DECL|class|UpgradeUtilities
specifier|public
class|class
name|UpgradeUtilities
block|{
comment|// Root scratch directory on local filesystem
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|File
name|TEST_ROOT_DIR
init|=
operator|new
name|File
argument_list|(
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
argument_list|)
decl_stmt|;
comment|// The singleton master storage directory for Namenode
DECL|field|namenodeStorage
specifier|private
specifier|static
name|File
name|namenodeStorage
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"namenodeMaster"
argument_list|)
decl_stmt|;
comment|// A checksum of the contents in namenodeStorage directory
DECL|field|namenodeStorageChecksum
specifier|private
specifier|static
name|long
name|namenodeStorageChecksum
decl_stmt|;
comment|// The namespaceId of the namenodeStorage directory
DECL|field|namenodeStorageNamespaceID
specifier|private
specifier|static
name|int
name|namenodeStorageNamespaceID
decl_stmt|;
comment|// The clusterId of the namenodeStorage directory
DECL|field|namenodeStorageClusterID
specifier|private
specifier|static
name|String
name|namenodeStorageClusterID
decl_stmt|;
comment|// The blockpoolId of the namenodeStorage directory
DECL|field|namenodeStorageBlockPoolID
specifier|private
specifier|static
name|String
name|namenodeStorageBlockPoolID
decl_stmt|;
comment|// The fsscTime of the namenodeStorage directory
DECL|field|namenodeStorageFsscTime
specifier|private
specifier|static
name|long
name|namenodeStorageFsscTime
decl_stmt|;
comment|// The singleton master storage directory for Datanode
DECL|field|datanodeStorage
specifier|private
specifier|static
name|File
name|datanodeStorage
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"datanodeMaster"
argument_list|)
decl_stmt|;
comment|// A checksum of the contents in datanodeStorage directory
DECL|field|datanodeStorageChecksum
specifier|private
specifier|static
name|long
name|datanodeStorageChecksum
decl_stmt|;
comment|// A checksum of the contents in blockpool storage directory
DECL|field|blockPoolStorageChecksum
specifier|private
specifier|static
name|long
name|blockPoolStorageChecksum
decl_stmt|;
comment|// A checksum of the contents in blockpool finalize storage directory
DECL|field|blockPoolFinalizedStorageChecksum
specifier|private
specifier|static
name|long
name|blockPoolFinalizedStorageChecksum
decl_stmt|;
comment|// A checksum of the contents in blockpool rbw storage directory
DECL|field|blockPoolRbwStorageChecksum
specifier|private
specifier|static
name|long
name|blockPoolRbwStorageChecksum
decl_stmt|;
comment|/**    * Initialize the data structures used by this class.      * IMPORTANT NOTE: This method must be called once before calling     *                 any other public method on this class.      *<p>    * Creates a singleton master populated storage    * directory for a Namenode (contains edits, fsimage,    * version, and time files) and a Datanode (contains version and    * block files).  This can be a lengthy operation.    */
DECL|method|initialize ()
specifier|public
specifier|static
name|void
name|initialize
parameter_list|()
throws|throws
name|Exception
block|{
name|createEmptyDirs
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_ROOT_DIR
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|namenodeStorage
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|namenodeStorage
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|datanodeStorage
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// format data-node
name|createEmptyDirs
argument_list|(
operator|new
name|String
index|[]
block|{
name|datanodeStorage
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
comment|// format and start NameNode and start DataNode
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|startupOption
argument_list|(
name|StartupOption
operator|.
name|REGULAR
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|manageDataDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|NameNode
name|namenode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|namenodeStorageNamespaceID
operator|=
name|namenode
operator|.
name|versionRequest
argument_list|()
operator|.
name|getNamespaceID
argument_list|()
expr_stmt|;
name|namenodeStorageFsscTime
operator|=
name|namenode
operator|.
name|versionRequest
argument_list|()
operator|.
name|getCTime
argument_list|()
expr_stmt|;
name|namenodeStorageClusterID
operator|=
name|namenode
operator|.
name|versionRequest
argument_list|()
operator|.
name|getClusterID
argument_list|()
expr_stmt|;
name|namenodeStorageBlockPoolID
operator|=
name|namenode
operator|.
name|versionRequest
argument_list|()
operator|.
name|getBlockPoolID
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Path
name|baseDir
init|=
operator|new
name|Path
argument_list|(
literal|"/TestUpgrade"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
comment|// write some files
name|int
name|bufferSize
init|=
literal|4096
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|bufferSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufferSize
condition|;
name|i
operator|++
control|)
name|buffer
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|'0'
operator|+
name|i
operator|%
literal|50
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
literal|"file1"
argument_list|)
argument_list|,
name|buffer
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
literal|"file2"
argument_list|)
argument_list|,
name|buffer
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
comment|// save image
name|namenode
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|namenode
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|namenode
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
comment|// write more files
name|writeFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
literal|"file3"
argument_list|)
argument_list|,
name|buffer
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
literal|"file4"
argument_list|)
argument_list|,
name|buffer
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// shutdown
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|namenodeStorage
argument_list|,
literal|"in_use.lock"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|datanodeStorage
argument_list|,
literal|"in_use.lock"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|namenodeStorageChecksum
operator|=
name|checksumContents
argument_list|(
name|NAME_NODE
argument_list|,
operator|new
name|File
argument_list|(
name|namenodeStorage
argument_list|,
literal|"current"
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|dnCurDir
init|=
operator|new
name|File
argument_list|(
name|datanodeStorage
argument_list|,
literal|"current"
argument_list|)
decl_stmt|;
name|datanodeStorageChecksum
operator|=
name|checksumContents
argument_list|(
name|DATA_NODE
argument_list|,
name|dnCurDir
argument_list|)
expr_stmt|;
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|File
name|bpCurDir
init|=
operator|new
name|File
argument_list|(
name|BlockPoolSliceStorage
operator|.
name|getBpRoot
argument_list|(
name|bpid
argument_list|,
name|dnCurDir
argument_list|)
argument_list|,
literal|"current"
argument_list|)
decl_stmt|;
name|blockPoolStorageChecksum
operator|=
name|checksumContents
argument_list|(
name|DATA_NODE
argument_list|,
name|bpCurDir
argument_list|)
expr_stmt|;
name|File
name|bpCurFinalizeDir
init|=
operator|new
name|File
argument_list|(
name|BlockPoolSliceStorage
operator|.
name|getBpRoot
argument_list|(
name|bpid
argument_list|,
name|dnCurDir
argument_list|)
argument_list|,
literal|"current/"
operator|+
name|DataStorage
operator|.
name|STORAGE_DIR_FINALIZED
argument_list|)
decl_stmt|;
name|blockPoolFinalizedStorageChecksum
operator|=
name|checksumContents
argument_list|(
name|DATA_NODE
argument_list|,
name|bpCurFinalizeDir
argument_list|)
expr_stmt|;
name|File
name|bpCurRbwDir
init|=
operator|new
name|File
argument_list|(
name|BlockPoolSliceStorage
operator|.
name|getBpRoot
argument_list|(
name|bpid
argument_list|,
name|dnCurDir
argument_list|)
argument_list|,
literal|"current/"
operator|+
name|DataStorage
operator|.
name|STORAGE_DIR_RBW
argument_list|)
decl_stmt|;
name|blockPoolRbwStorageChecksum
operator|=
name|checksumContents
argument_list|(
name|DATA_NODE
argument_list|,
name|bpCurRbwDir
argument_list|)
expr_stmt|;
block|}
comment|// Private helper method that writes a file to the given file system.
DECL|method|writeFile (FileSystem fs, Path path, byte[] buffer, int bufferSize)
specifier|private
specifier|static
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|out
decl_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|bufferSize
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Initialize {@link DFSConfigKeys#DFS_NAMENODE_NAME_DIR_KEY} and     * {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} with the specified     * number of directory entries. Also initialize dfs.blockreport.intervalMsec.    */
DECL|method|initializeStorageStateConf (int numDirs, Configuration conf)
specifier|public
specifier|static
name|Configuration
name|initializeStorageStateConf
parameter_list|(
name|int
name|numDirs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|StringBuffer
name|nameNodeDirs
init|=
operator|new
name|StringBuffer
argument_list|(
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"name1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuffer
name|dataNodeDirs
init|=
operator|new
name|StringBuffer
argument_list|(
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"data1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
name|numDirs
condition|;
name|i
operator|++
control|)
block|{
name|nameNodeDirs
operator|.
name|append
argument_list|(
literal|","
operator|+
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"name"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|dataNodeDirs
operator|.
name|append
argument_list|(
literal|","
operator|+
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"data"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameNodeDirs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|nameNodeDirs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|dataNodeDirs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Create empty directories.  If a specified directory already exists    * then it is first removed.    */
DECL|method|createEmptyDirs (String[] dirs)
specifier|public
specifier|static
name|void
name|createEmptyDirs
parameter_list|(
name|String
index|[]
name|dirs
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|d
range|:
name|dirs
control|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Return the checksum for the singleton master storage directory    * for namenode    */
DECL|method|checksumMasterNameNodeContents ()
specifier|public
specifier|static
name|long
name|checksumMasterNameNodeContents
parameter_list|()
block|{
return|return
name|namenodeStorageChecksum
return|;
block|}
comment|/**    * Return the checksum for the singleton master storage directory    * for datanode    */
DECL|method|checksumMasterDataNodeContents ()
specifier|public
specifier|static
name|long
name|checksumMasterDataNodeContents
parameter_list|()
block|{
return|return
name|datanodeStorageChecksum
return|;
block|}
comment|/**    * Return the checksum for the singleton master storage directory    * for block pool.    */
DECL|method|checksumMasterBlockPoolContents ()
specifier|public
specifier|static
name|long
name|checksumMasterBlockPoolContents
parameter_list|()
block|{
return|return
name|blockPoolStorageChecksum
return|;
block|}
comment|/**    * Return the checksum for the singleton master storage directory    * for finalized dir under block pool.    */
DECL|method|checksumMasterBlockPoolFinalizedContents ()
specifier|public
specifier|static
name|long
name|checksumMasterBlockPoolFinalizedContents
parameter_list|()
block|{
return|return
name|blockPoolFinalizedStorageChecksum
return|;
block|}
comment|/**    * Return the checksum for the singleton master storage directory    * for rbw dir under block pool.    */
DECL|method|checksumMasterBlockPoolRbwContents ()
specifier|public
specifier|static
name|long
name|checksumMasterBlockPoolRbwContents
parameter_list|()
block|{
return|return
name|blockPoolRbwStorageChecksum
return|;
block|}
comment|/**    * Compute the checksum of all the files in the specified directory.    * The contents of subdirectories are not included. This method provides    * an easy way to ensure equality between the contents of two directories.    *    * @param nodeType if DATA_NODE then any file named "VERSION" is ignored.    *    This is because this file file is changed every time    *    the Datanode is started.    * @param dir must be a directory. Subdirectories are ignored.    *    * @throws IllegalArgumentException if specified directory is not a directory    * @throws IOException if an IOException occurs while reading the files    * @return the computed checksum value    */
DECL|method|checksumContents (NodeType nodeType, File dir)
specifier|public
specifier|static
name|long
name|checksumContents
parameter_list|(
name|NodeType
name|nodeType
parameter_list|,
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Given argument is not a directory:"
operator|+
name|dir
argument_list|)
throw|;
block|}
name|File
index|[]
name|list
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|CRC32
name|checksum
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|list
index|[
name|i
index|]
operator|.
name|isFile
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// skip VERSION file for DataNodes
if|if
condition|(
name|nodeType
operator|==
name|DATA_NODE
operator|&&
name|list
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"VERSION"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|list
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|bytesRead
decl_stmt|;
while|while
condition|(
operator|(
name|bytesRead
operator|=
name|fis
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|checksum
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|checksum
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|/**    * Simulate the {@link DFSConfigKeys#DFS_NAMENODE_NAME_DIR_KEY} of a populated     * DFS filesystem.    * This method populates for each parent directory,<code>parent/dirName</code>    * with the content of namenode storage directory that comes from a singleton    * namenode master (that contains edits, fsimage, version and time files).     * If the destination directory does not exist, it will be created.      * If the directory already exists, it will first be deleted.    *    * @param parents parent directory where {@code dirName} is created    * @param dirName directory under which storage directory is created    * @return the array of created directories    */
DECL|method|createNameNodeStorageDirs (String[] parents, String dirName)
specifier|public
specifier|static
name|File
index|[]
name|createNameNodeStorageDirs
parameter_list|(
name|String
index|[]
name|parents
parameter_list|,
name|String
name|dirName
parameter_list|)
throws|throws
name|Exception
block|{
name|File
index|[]
name|retVal
init|=
operator|new
name|File
index|[
name|parents
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|newDir
init|=
operator|new
name|File
argument_list|(
name|parents
index|[
name|i
index|]
argument_list|,
name|dirName
argument_list|)
decl_stmt|;
name|createEmptyDirs
argument_list|(
operator|new
name|String
index|[]
block|{
name|newDir
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|LocalFileSystem
name|localFS
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|localFS
operator|.
name|copyToLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|namenodeStorage
operator|.
name|toString
argument_list|()
argument_list|,
literal|"current"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|newDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|retVal
index|[
name|i
index|]
operator|=
name|newDir
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
comment|/**    * Simulate the {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} of a     * populated DFS filesystem.    * This method populates for each parent directory,<code>parent/dirName</code>    * with the content of datanode storage directory that comes from a singleton    * datanode master (that contains version and block files). If the destination    * directory does not exist, it will be created.  If the directory already     * exists, it will first be deleted.    *     * @param parents parent directory where {@code dirName} is created    * @param dirName directory under which storage directory is created    * @return the array of created directories    */
DECL|method|createDataNodeStorageDirs (String[] parents, String dirName)
specifier|public
specifier|static
name|File
index|[]
name|createDataNodeStorageDirs
parameter_list|(
name|String
index|[]
name|parents
parameter_list|,
name|String
name|dirName
parameter_list|)
throws|throws
name|Exception
block|{
name|File
index|[]
name|retVal
init|=
operator|new
name|File
index|[
name|parents
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|newDir
init|=
operator|new
name|File
argument_list|(
name|parents
index|[
name|i
index|]
argument_list|,
name|dirName
argument_list|)
decl_stmt|;
name|createEmptyDirs
argument_list|(
operator|new
name|String
index|[]
block|{
name|newDir
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|LocalFileSystem
name|localFS
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|localFS
operator|.
name|copyToLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|datanodeStorage
operator|.
name|toString
argument_list|()
argument_list|,
literal|"current"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|newDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|retVal
index|[
name|i
index|]
operator|=
name|newDir
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
comment|/**    * Simulate the {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} of a     * populated DFS filesystem.    * This method populates for each parent directory,<code>parent/dirName</code>    * with the content of block pool storage directory that comes from a singleton    * datanode master (that contains version and block files). If the destination    * directory does not exist, it will be created.  If the directory already     * exists, it will first be deleted.    *     * @param parents parent directory where {@code dirName} is created    * @param dirName directory under which storage directory is created    * @param bpid block pool id for which the storage directory is created.    * @return the array of created directories    */
DECL|method|createBlockPoolStorageDirs (String[] parents, String dirName, String bpid)
specifier|public
specifier|static
name|File
index|[]
name|createBlockPoolStorageDirs
parameter_list|(
name|String
index|[]
name|parents
parameter_list|,
name|String
name|dirName
parameter_list|,
name|String
name|bpid
parameter_list|)
throws|throws
name|Exception
block|{
name|File
index|[]
name|retVal
init|=
operator|new
name|File
index|[
name|parents
operator|.
name|length
index|]
decl_stmt|;
name|Path
name|bpCurDir
init|=
operator|new
name|Path
argument_list|(
name|MiniDFSCluster
operator|.
name|getBPDir
argument_list|(
name|datanodeStorage
argument_list|,
name|bpid
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|newDir
init|=
operator|new
name|File
argument_list|(
name|parents
index|[
name|i
index|]
operator|+
literal|"/current/"
operator|+
name|bpid
argument_list|,
name|dirName
argument_list|)
decl_stmt|;
name|createEmptyDirs
argument_list|(
operator|new
name|String
index|[]
block|{
name|newDir
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|LocalFileSystem
name|localFS
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|localFS
operator|.
name|copyToLocalFile
argument_list|(
name|bpCurDir
argument_list|,
operator|new
name|Path
argument_list|(
name|newDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|retVal
index|[
name|i
index|]
operator|=
name|newDir
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
comment|/**    * Create a<code>version</code> file for namenode inside the specified parent    * directory.  If such a file already exists, it will be overwritten.    * The given version string will be written to the file as the layout    * version. None of the parameters may be null.    *    * @param parent directory where namenode VERSION file is stored    * @param version StorageInfo to create VERSION file from    * @param bpid Block pool Id    *    * @return the created version file    */
DECL|method|createNameNodeVersionFile (Configuration conf, File[] parent, StorageInfo version, String bpid)
specifier|public
specifier|static
name|File
index|[]
name|createNameNodeVersionFile
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|File
index|[]
name|parent
parameter_list|,
name|StorageInfo
name|version
parameter_list|,
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
name|Storage
name|storage
init|=
operator|new
name|NNStorage
argument_list|(
name|conf
argument_list|,
name|Collections
operator|.
expr|<
name|URI
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|URI
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|storage
operator|.
name|setStorageInfo
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|File
index|[]
name|versionFiles
init|=
operator|new
name|File
index|[
name|parent
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parent
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|versionFiles
index|[
name|i
index|]
operator|=
operator|new
name|File
argument_list|(
name|parent
index|[
name|i
index|]
argument_list|,
literal|"VERSION"
argument_list|)
expr_stmt|;
name|StorageDirectory
name|sd
init|=
operator|new
name|StorageDirectory
argument_list|(
name|parent
index|[
name|i
index|]
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
name|storage
operator|.
name|writeProperties
argument_list|(
name|versionFiles
index|[
name|i
index|]
argument_list|,
name|sd
argument_list|)
expr_stmt|;
block|}
return|return
name|versionFiles
return|;
block|}
comment|/**    * Create a<code>version</code> file for datanode inside the specified parent    * directory.  If such a file already exists, it will be overwritten.    * The given version string will be written to the file as the layout    * version. None of the parameters may be null.    *    * @param parent directory where namenode VERSION file is stored    * @param version StorageInfo to create VERSION file from    * @param bpid Block pool Id    */
DECL|method|createDataNodeVersionFile (File[] parent, StorageInfo version, String bpid)
specifier|public
specifier|static
name|void
name|createDataNodeVersionFile
parameter_list|(
name|File
index|[]
name|parent
parameter_list|,
name|StorageInfo
name|version
parameter_list|,
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
name|createDataNodeVersionFile
argument_list|(
name|parent
argument_list|,
name|version
argument_list|,
name|bpid
argument_list|,
name|bpid
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a<code>version</code> file for datanode inside the specified parent    * directory.  If such a file already exists, it will be overwritten.    * The given version string will be written to the file as the layout    * version. None of the parameters may be null.    *    * @param parent directory where namenode VERSION file is stored    * @param version StorageInfo to create VERSION file from    * @param bpid Block pool Id    * @param bpidToWrite Block pool Id to write into the version file    */
DECL|method|createDataNodeVersionFile (File[] parent, StorageInfo version, String bpid, String bpidToWrite)
specifier|public
specifier|static
name|void
name|createDataNodeVersionFile
parameter_list|(
name|File
index|[]
name|parent
parameter_list|,
name|StorageInfo
name|version
parameter_list|,
name|String
name|bpid
parameter_list|,
name|String
name|bpidToWrite
parameter_list|)
throws|throws
name|IOException
block|{
name|DataStorage
name|storage
init|=
operator|new
name|DataStorage
argument_list|(
name|version
argument_list|,
literal|"doNotCare"
argument_list|)
decl_stmt|;
name|File
index|[]
name|versionFiles
init|=
operator|new
name|File
index|[
name|parent
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parent
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|versionFile
init|=
operator|new
name|File
argument_list|(
name|parent
index|[
name|i
index|]
argument_list|,
literal|"VERSION"
argument_list|)
decl_stmt|;
name|StorageDirectory
name|sd
init|=
operator|new
name|StorageDirectory
argument_list|(
name|parent
index|[
name|i
index|]
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
name|storage
operator|.
name|writeProperties
argument_list|(
name|versionFile
argument_list|,
name|sd
argument_list|)
expr_stmt|;
name|versionFiles
index|[
name|i
index|]
operator|=
name|versionFile
expr_stmt|;
name|File
name|bpDir
init|=
name|BlockPoolSliceStorage
operator|.
name|getBpRoot
argument_list|(
name|bpid
argument_list|,
name|parent
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|createBlockPoolVersionFile
argument_list|(
name|bpDir
argument_list|,
name|version
argument_list|,
name|bpidToWrite
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createBlockPoolVersionFile (File bpDir, StorageInfo version, String bpid)
specifier|public
specifier|static
name|void
name|createBlockPoolVersionFile
parameter_list|(
name|File
name|bpDir
parameter_list|,
name|StorageInfo
name|version
parameter_list|,
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create block pool version files
if|if
condition|(
name|LayoutVersion
operator|.
name|supports
argument_list|(
name|Feature
operator|.
name|FEDERATION
argument_list|,
name|version
operator|.
name|layoutVersion
argument_list|)
condition|)
block|{
name|File
name|bpCurDir
init|=
operator|new
name|File
argument_list|(
name|bpDir
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
argument_list|)
decl_stmt|;
name|BlockPoolSliceStorage
name|bpStorage
init|=
operator|new
name|BlockPoolSliceStorage
argument_list|(
name|version
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
name|File
name|versionFile
init|=
operator|new
name|File
argument_list|(
name|bpCurDir
argument_list|,
literal|"VERSION"
argument_list|)
decl_stmt|;
name|StorageDirectory
name|sd
init|=
operator|new
name|StorageDirectory
argument_list|(
name|bpDir
argument_list|)
decl_stmt|;
name|bpStorage
operator|.
name|writeProperties
argument_list|(
name|versionFile
argument_list|,
name|sd
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Corrupt the specified file.  Some random bytes within the file    * will be changed to some random values.    *    * @throws IllegalArgumentException if the given file is not a file    * @throws IOException if an IOException occurs while reading or writing the file    */
DECL|method|corruptFile (File file)
specifier|public
specifier|static
name|void
name|corruptFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Given argument is not a file:"
operator|+
name|file
argument_list|)
throw|;
block|}
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"rws"
argument_list|)
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|raf
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|raf
operator|.
name|seek
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|raf
operator|.
name|writeByte
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Return the layout version inherent in the current version    * of the Namenode, whether it is running or not.    */
DECL|method|getCurrentLayoutVersion ()
specifier|public
specifier|static
name|int
name|getCurrentLayoutVersion
parameter_list|()
block|{
return|return
name|FSConstants
operator|.
name|LAYOUT_VERSION
return|;
block|}
comment|/**    * Return the namespace ID inherent in the currently running    * Namenode.  If no Namenode is running, return the namespace ID of    * the master Namenode storage directory.    *    * The UpgradeUtilities.initialize() method must be called once before    * calling this method.    */
DECL|method|getCurrentNamespaceID (MiniDFSCluster cluster)
specifier|public
specifier|static
name|int
name|getCurrentNamespaceID
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
return|return
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|versionRequest
argument_list|()
operator|.
name|getNamespaceID
argument_list|()
return|;
block|}
return|return
name|namenodeStorageNamespaceID
return|;
block|}
comment|/**    * Return the cluster ID inherent in the currently running    * Namenode.     */
DECL|method|getCurrentClusterID (MiniDFSCluster cluster)
specifier|public
specifier|static
name|String
name|getCurrentClusterID
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
return|return
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|versionRequest
argument_list|()
operator|.
name|getClusterID
argument_list|()
return|;
block|}
return|return
name|namenodeStorageClusterID
return|;
block|}
comment|/**    * Return the blockpool ID inherent in the currently running    * Namenode.     */
DECL|method|getCurrentBlockPoolID (MiniDFSCluster cluster)
specifier|public
specifier|static
name|String
name|getCurrentBlockPoolID
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
return|return
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|versionRequest
argument_list|()
operator|.
name|getBlockPoolID
argument_list|()
return|;
block|}
return|return
name|namenodeStorageBlockPoolID
return|;
block|}
comment|/**    * Return the File System State Creation Timestamp (FSSCTime) inherent    * in the currently running Namenode.  If no Namenode is running,    * return the FSSCTime of the master Namenode storage directory.    *    * The UpgradeUtilities.initialize() method must be called once before    * calling this method.    */
DECL|method|getCurrentFsscTime (MiniDFSCluster cluster)
specifier|public
specifier|static
name|long
name|getCurrentFsscTime
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
return|return
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|versionRequest
argument_list|()
operator|.
name|getCTime
argument_list|()
return|;
block|}
return|return
name|namenodeStorageFsscTime
return|;
block|}
comment|/**    * Create empty block pool directories    * @return array of block pool directories    */
DECL|method|createEmptyBPDirs (String[] baseDirs, String bpid)
specifier|public
specifier|static
name|String
index|[]
name|createEmptyBPDirs
parameter_list|(
name|String
index|[]
name|baseDirs
parameter_list|,
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|bpDirs
init|=
operator|new
name|String
index|[
name|baseDirs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|baseDirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bpDirs
index|[
name|i
index|]
operator|=
name|MiniDFSCluster
operator|.
name|getBPDir
argument_list|(
operator|new
name|File
argument_list|(
name|baseDirs
index|[
name|i
index|]
argument_list|)
argument_list|,
name|bpid
argument_list|)
expr_stmt|;
block|}
name|createEmptyDirs
argument_list|(
name|bpDirs
argument_list|)
expr_stmt|;
return|return
name|bpDirs
return|;
block|}
block|}
end_class

end_unit

