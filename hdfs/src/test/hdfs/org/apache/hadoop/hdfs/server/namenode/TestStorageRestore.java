begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cli
operator|.
name|CLITestCmdDFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cli
operator|.
name|util
operator|.
name|CLICommandDFSAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cli
operator|.
name|util
operator|.
name|CommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeDirType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_comment
comment|/**  * Startup and checkpoint tests  *   */
end_comment

begin_class
DECL|class|TestStorageRestore
specifier|public
class|class
name|TestStorageRestore
block|{
DECL|field|NAME_NODE_HOST
specifier|public
specifier|static
specifier|final
name|String
name|NAME_NODE_HOST
init|=
literal|"localhost:"
decl_stmt|;
DECL|field|NAME_NODE_HTTP_HOST
specifier|public
specifier|static
specifier|final
name|String
name|NAME_NODE_HTTP_HOST
init|=
literal|"0.0.0.0:"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestStorageRestore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|config
specifier|private
name|Configuration
name|config
decl_stmt|;
DECL|field|hdfsDir
specifier|private
name|File
name|hdfsDir
init|=
literal|null
decl_stmt|;
DECL|field|seed
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0xAAAAEEFL
decl_stmt|;
DECL|field|blockSize
specifier|static
specifier|final
name|int
name|blockSize
init|=
literal|4096
decl_stmt|;
DECL|field|fileSize
specifier|static
specifier|final
name|int
name|fileSize
init|=
literal|8192
decl_stmt|;
DECL|field|path1
DECL|field|path2
DECL|field|path3
specifier|private
name|File
name|path1
decl_stmt|,
name|path2
decl_stmt|,
name|path3
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|method|writeFile (FileSystem fileSys, Path name, int repl)
specifier|private
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|stm
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|repl
argument_list|,
operator|(
name|long
operator|)
name|blockSize
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|fileSize
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUpNameDirs ()
specifier|public
name|void
name|setUpNameDirs
parameter_list|()
throws|throws
name|Exception
block|{
name|config
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|hdfsDir
operator|=
operator|new
name|File
argument_list|(
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|hdfsDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|hdfsDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not delete hdfs directory '"
operator|+
name|hdfsDir
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|hdfsDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|path1
operator|=
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"name1"
argument_list|)
expr_stmt|;
name|path2
operator|=
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"name2"
argument_list|)
expr_stmt|;
name|path3
operator|=
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"name3"
argument_list|)
expr_stmt|;
name|path1
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|path2
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|path3
operator|.
name|mkdir
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|path2
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|path3
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|path1
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't create dfs.name dirs in "
operator|+
name|hdfsDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|dfs_name_dir
init|=
operator|new
name|String
argument_list|(
name|path1
operator|.
name|getPath
argument_list|()
operator|+
literal|","
operator|+
name|path2
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"configuring hdfsdir is "
operator|+
name|hdfsDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"; dfs_name_dir = "
operator|+
name|dfs_name_dir
operator|+
literal|";dfs_name_edits_dir(only)="
operator|+
name|path3
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|dfs_name_dir
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|dfs_name_dir
operator|+
literal|","
operator|+
name|path3
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"secondary"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|config
argument_list|,
literal|"hdfs://"
operator|+
name|NAME_NODE_HOST
operator|+
literal|"0"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
comment|// set the restore feature on
name|config
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_RESTORE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * clean up    */
annotation|@
name|After
DECL|method|cleanUpNameDirs ()
specifier|public
name|void
name|cleanUpNameDirs
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|hdfsDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|hdfsDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not delete hdfs directory in tearDown '"
operator|+
name|hdfsDir
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
comment|/**    * invalidate storage by removing storage directories    */
DECL|method|invalidateStorage (FSImage fi, Set<File> filesToInvalidate)
specifier|public
name|void
name|invalidateStorage
parameter_list|(
name|FSImage
name|fi
parameter_list|,
name|Set
argument_list|<
name|File
argument_list|>
name|filesToInvalidate
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|StorageDirectory
argument_list|>
name|al
init|=
operator|new
name|ArrayList
argument_list|<
name|StorageDirectory
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|it
init|=
name|fi
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|StorageDirectory
name|sd
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|filesToInvalidate
operator|.
name|contains
argument_list|(
name|sd
operator|.
name|getRoot
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"causing IO error on "
operator|+
name|sd
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|al
operator|.
name|add
argument_list|(
name|sd
argument_list|)
expr_stmt|;
block|}
block|}
comment|// simulate an error
name|fi
operator|.
name|getStorage
argument_list|()
operator|.
name|reportErrorsOnDirectories
argument_list|(
name|al
argument_list|)
expr_stmt|;
block|}
comment|/**    * test    */
DECL|method|printStorages (FSImage fs)
specifier|public
name|void
name|printStorages
parameter_list|(
name|FSImage
name|fs
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"current storages and corresponding sizes:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|it
init|=
name|fs
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StorageDirectory
name|sd
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|sd
operator|.
name|getStorageDirType
argument_list|()
operator|.
name|isOfType
argument_list|(
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|)
condition|)
block|{
name|File
name|imf
init|=
name|NNStorage
operator|.
name|getStorageFile
argument_list|(
name|sd
argument_list|,
name|NameNodeFile
operator|.
name|IMAGE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  image file "
operator|+
name|imf
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"; len = "
operator|+
name|imf
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sd
operator|.
name|getStorageDirType
argument_list|()
operator|.
name|isOfType
argument_list|(
name|NameNodeDirType
operator|.
name|EDITS
argument_list|)
condition|)
block|{
name|File
name|edf
init|=
name|NNStorage
operator|.
name|getStorageFile
argument_list|(
name|sd
argument_list|,
name|NameNodeFile
operator|.
name|EDITS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  edits file "
operator|+
name|edf
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"; len = "
operator|+
name|edf
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This function returns a md5 hash of a file.    *     * @param file input file    * @return The md5 string    */
DECL|method|getFileMD5 (File file)
specifier|public
name|String
name|getFileMD5
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|res
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
name|MessageDigest
name|mD
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|mD
operator|.
name|update
argument_list|(
name|dis
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{}
name|BigInteger
name|bigInt
init|=
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|mD
operator|.
name|digest
argument_list|()
argument_list|)
decl_stmt|;
name|res
operator|=
name|bigInt
operator|.
name|toString
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
comment|/**    * read currentCheckpointTime directly from the file    * @param currDir    * @return the checkpoint time    * @throws IOException    */
DECL|method|readCheckpointTime (File currDir)
name|long
name|readCheckpointTime
parameter_list|(
name|File
name|currDir
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|timeFile
init|=
operator|new
name|File
argument_list|(
name|currDir
argument_list|,
name|NameNodeFile
operator|.
name|TIME
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|timeStamp
init|=
literal|0L
decl_stmt|;
if|if
condition|(
name|timeFile
operator|.
name|exists
argument_list|()
operator|&&
name|timeFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|timeFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|timeStamp
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|timeStamp
return|;
block|}
comment|/**    *  check if files exist/not exist    * @throws IOException     */
DECL|method|checkFiles (boolean valid)
specifier|public
name|void
name|checkFiles
parameter_list|(
name|boolean
name|valid
parameter_list|)
throws|throws
name|IOException
block|{
comment|//look at the valid storage
name|File
name|fsImg1
init|=
operator|new
name|File
argument_list|(
name|path1
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
operator|+
literal|"/"
operator|+
name|NameNodeFile
operator|.
name|IMAGE
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|fsImg2
init|=
operator|new
name|File
argument_list|(
name|path2
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
operator|+
literal|"/"
operator|+
name|NameNodeFile
operator|.
name|IMAGE
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|fsImg3
init|=
operator|new
name|File
argument_list|(
name|path3
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
operator|+
literal|"/"
operator|+
name|NameNodeFile
operator|.
name|IMAGE
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|fsEdits1
init|=
operator|new
name|File
argument_list|(
name|path1
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
operator|+
literal|"/"
operator|+
name|NameNodeFile
operator|.
name|EDITS
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|fsEdits2
init|=
operator|new
name|File
argument_list|(
name|path2
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
operator|+
literal|"/"
operator|+
name|NameNodeFile
operator|.
name|EDITS
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|fsEdits3
init|=
operator|new
name|File
argument_list|(
name|path3
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
operator|+
literal|"/"
operator|+
name|NameNodeFile
operator|.
name|EDITS
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|chkPt1
init|=
name|readCheckpointTime
argument_list|(
operator|new
name|File
argument_list|(
name|path1
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|chkPt2
init|=
name|readCheckpointTime
argument_list|(
operator|new
name|File
argument_list|(
name|path2
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|chkPt3
init|=
name|readCheckpointTime
argument_list|(
operator|new
name|File
argument_list|(
name|path3
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|md5_1
init|=
literal|null
decl_stmt|,
name|md5_2
init|=
literal|null
decl_stmt|,
name|md5_3
init|=
literal|null
decl_stmt|;
try|try
block|{
name|md5_1
operator|=
name|getFileMD5
argument_list|(
name|fsEdits1
argument_list|)
expr_stmt|;
name|md5_2
operator|=
name|getFileMD5
argument_list|(
name|fsEdits2
argument_list|)
expr_stmt|;
name|md5_3
operator|=
name|getFileMD5
argument_list|(
name|fsEdits3
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"md 5 calculation failed:"
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|printStorages
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getFSImage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"++++ image files = "
operator|+
name|fsImg1
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|","
operator|+
name|fsImg2
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|","
operator|+
name|fsImg3
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"++++ edits files = "
operator|+
name|fsEdits1
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|","
operator|+
name|fsEdits2
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|","
operator|+
name|fsEdits3
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"checkFiles compares lengths: img1="
operator|+
name|fsImg1
operator|.
name|length
argument_list|()
operator|+
literal|",img2="
operator|+
name|fsImg2
operator|.
name|length
argument_list|()
operator|+
literal|",img3="
operator|+
name|fsImg3
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"checkFiles compares lengths: edits1="
operator|+
name|fsEdits1
operator|.
name|length
argument_list|()
operator|+
literal|",edits2="
operator|+
name|fsEdits2
operator|.
name|length
argument_list|()
operator|+
literal|",edits3="
operator|+
name|fsEdits3
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"checkFiles compares chkPts: name1="
operator|+
name|chkPt1
operator|+
literal|",name2="
operator|+
name|chkPt2
operator|+
literal|",name3="
operator|+
name|chkPt3
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"checkFiles compares md5s: "
operator|+
name|fsEdits1
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"="
operator|+
name|md5_1
operator|+
literal|","
operator|+
name|fsEdits2
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"="
operator|+
name|md5_2
operator|+
literal|","
operator|+
name|fsEdits3
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"="
operator|+
name|md5_3
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
condition|)
block|{
comment|// should be the same
name|assertTrue
argument_list|(
name|fsImg1
operator|.
name|length
argument_list|()
operator|==
name|fsImg2
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|==
name|fsImg3
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|//shouldn't be created
name|assertTrue
argument_list|(
name|fsEdits1
operator|.
name|length
argument_list|()
operator|==
name|fsEdits2
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fsEdits1
operator|.
name|length
argument_list|()
operator|==
name|fsEdits3
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|md5_1
operator|.
name|equals
argument_list|(
name|md5_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|md5_1
operator|.
name|equals
argument_list|(
name|md5_3
argument_list|)
argument_list|)
expr_stmt|;
comment|// checkpoint times
name|assertTrue
argument_list|(
name|chkPt1
operator|==
name|chkPt2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chkPt1
operator|==
name|chkPt3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// should be different
comment|//assertTrue(fsImg1.length() != fsImg2.length());
comment|//assertTrue(fsImg1.length() != fsImg3.length());
name|assertTrue
argument_list|(
literal|"edits1 = edits2"
argument_list|,
name|fsEdits1
operator|.
name|length
argument_list|()
operator|!=
name|fsEdits2
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"edits1 = edits3"
argument_list|,
name|fsEdits1
operator|.
name|length
argument_list|()
operator|!=
name|fsEdits3
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|md5_1
operator|.
name|equals
argument_list|(
name|md5_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|md5_1
operator|.
name|equals
argument_list|(
name|md5_3
argument_list|)
argument_list|)
expr_stmt|;
comment|// checkpoint times
name|assertTrue
argument_list|(
name|chkPt1
operator|>
name|chkPt2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chkPt1
operator|>
name|chkPt3
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test     * 1. create DFS cluster with 3 storage directories - 2 EDITS_IMAGE, 1 EDITS    * 2. create a cluster and write a file    * 3. corrupt/disable one storage (or two) by removing    * 4. run doCheckpoint - it will fail on removed dirs (which    * will invalidate the storages)    * 5. write another file    * 6. check that edits and fsimage differ     * 7. run doCheckpoint    * 8. verify that all the image and edits files are the same.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testStorageRestore ()
specifier|public
name|void
name|testStorageRestore
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numDatanodes
init|=
literal|2
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|SecondaryNameNode
name|secondary
init|=
operator|new
name|SecondaryNameNode
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"****testStorageRestore: Cluster and SNN started"
argument_list|)
expr_stmt|;
name|printStorages
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getFSImage
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"****testStorageRestore: file test written, invalidating storage..."
argument_list|)
expr_stmt|;
name|invalidateStorage
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getFSImage
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|path2
argument_list|,
name|path3
argument_list|)
argument_list|)
expr_stmt|;
comment|//secondary.doCheckpoint(); // this will cause storages to be removed.
name|printStorages
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getFSImage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"****testStorageRestore: storage invalidated + doCheckpoint"
argument_list|)
expr_stmt|;
name|path
operator|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"****testStorageRestore: file test1 written"
argument_list|)
expr_stmt|;
name|checkFiles
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// SHOULD BE FALSE
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"****testStorageRestore: checkfiles(false) run"
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
comment|///should enable storage..
name|checkFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"****testStorageRestore: second Checkpoint done and checkFiles(true) run"
argument_list|)
expr_stmt|;
comment|// verify that all the logs are active
name|path
operator|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"****testStorageRestore: wrote a file and checkFiles(true) run"
argument_list|)
expr_stmt|;
name|checkFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test dfsadmin -restoreFailedStorage command    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDfsAdminCmd ()
specifier|public
name|void
name|testDfsAdminCmd
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
try|try
block|{
name|FSImage
name|fsi
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
comment|// it is started with dfs.namenode.name.dir.restore set to true (in SetUp())
name|boolean
name|restore
init|=
name|fsi
operator|.
name|getStorage
argument_list|()
operator|.
name|getRestoreFailedStorage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restore is "
operator|+
name|restore
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|restore
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// now run DFSAdmnin command
name|String
name|cmd
init|=
literal|"-fs NAMENODE -restoreFailedStorage false"
decl_stmt|;
name|String
name|namenode
init|=
name|config
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"file:///"
argument_list|)
decl_stmt|;
name|CommandExecutor
name|executor
init|=
operator|new
name|CLITestCmdDFS
argument_list|(
name|cmd
argument_list|,
operator|new
name|CLICommandDFSAdmin
argument_list|()
argument_list|)
operator|.
name|getExecutor
argument_list|(
name|namenode
argument_list|)
decl_stmt|;
name|executor
operator|.
name|executeCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|restore
operator|=
name|fsi
operator|.
name|getStorage
argument_list|()
operator|.
name|getRestoreFailedStorage
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"After set true call restore is "
operator|+
name|restore
argument_list|,
name|restore
argument_list|)
expr_stmt|;
comment|// run one more time - to set it to true again
name|cmd
operator|=
literal|"-fs NAMENODE -restoreFailedStorage true"
expr_stmt|;
name|executor
operator|.
name|executeCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|restore
operator|=
name|fsi
operator|.
name|getStorage
argument_list|()
operator|.
name|getRestoreFailedStorage
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"After set false call restore is "
operator|+
name|restore
argument_list|,
name|restore
argument_list|)
expr_stmt|;
comment|// run one more time - no change in value
name|cmd
operator|=
literal|"-fs NAMENODE -restoreFailedStorage check"
expr_stmt|;
name|CommandExecutor
operator|.
name|Result
name|cmdResult
init|=
name|executor
operator|.
name|executeCommand
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|restore
operator|=
name|fsi
operator|.
name|getStorage
argument_list|()
operator|.
name|getRestoreFailedStorage
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"After check call restore is "
operator|+
name|restore
argument_list|,
name|restore
argument_list|)
expr_stmt|;
name|String
name|commandOutput
init|=
name|cmdResult
operator|.
name|getCommandOutput
argument_list|()
decl_stmt|;
name|commandOutput
operator|.
name|trim
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|commandOutput
operator|.
name|contains
argument_list|(
literal|"restoreFailedStorage is set to true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test to simulate interleaved checkpointing by 2 2NNs after a storage    * directory has been taken offline. The first will cause the directory to    * come back online, but it won't have any valid contents. The second 2NN will    * then try to perform a checkpoint. The NN should not serve up the image or    * edits from the restored (empty) dir.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testMultipleSecondaryCheckpoint ()
specifier|public
name|void
name|testMultipleSecondaryCheckpoint
parameter_list|()
throws|throws
name|IOException
block|{
name|SecondaryNameNode
name|secondary
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|secondary
operator|=
operator|new
name|SecondaryNameNode
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|FSImage
name|fsImage
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|printStorages
argument_list|(
name|fsImage
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
name|testPath
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|printStorages
argument_list|(
name|fsImage
argument_list|)
expr_stmt|;
comment|// Take name1 offline
name|invalidateStorage
argument_list|(
name|fsImage
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|path1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Simulate a 2NN beginning a checkpoint, but not finishing. This will
comment|// cause name1 to be restored.
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|rollEditLog
argument_list|()
expr_stmt|;
name|printStorages
argument_list|(
name|fsImage
argument_list|)
expr_stmt|;
comment|// Now another 2NN comes along to do a full checkpoint.
name|secondary
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
name|printStorages
argument_list|(
name|fsImage
argument_list|)
expr_stmt|;
comment|// The created file should still exist in the in-memory FS state after the
comment|// checkpoint.
name|assertTrue
argument_list|(
literal|"path exists before restart"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Restart the NN so it reloads the edits from on-disk.
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
comment|// The created file should still exist after the restart.
name|assertTrue
argument_list|(
literal|"path should still exist after restart"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|secondary
operator|!=
literal|null
condition|)
block|{
name|secondary
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

