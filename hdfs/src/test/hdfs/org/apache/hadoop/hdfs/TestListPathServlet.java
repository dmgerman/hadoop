begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ListPathsServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test for {@link ListPathsServlet} that serves the URL  * http://<namenodeaddress:httpport?/listPaths  *   * This test does not use the servlet directly. Instead it is based on  * {@link HftpFileSystem}, which uses this servlet to implement  * {@link HftpFileSystem#listStatus(Path)} method.  */
end_comment

begin_class
DECL|class|TestListPathServlet
specifier|public
class|class
name|TestListPathServlet
block|{
DECL|field|CONF
specifier|private
specifier|static
specifier|final
name|Configuration
name|CONF
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
DECL|field|hftpURI
specifier|private
specifier|static
name|URI
name|hftpURI
decl_stmt|;
DECL|field|hftpFs
specifier|private
specifier|static
name|HftpFileSystem
name|hftpFs
decl_stmt|;
DECL|field|r
specifier|private
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|filelist
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|filelist
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start a cluster with single datanode
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
specifier|final
name|String
name|str
init|=
literal|"hftp://"
operator|+
name|CONF
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|)
decl_stmt|;
name|hftpURI
operator|=
operator|new
name|URI
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|hftpFs
operator|=
name|cluster
operator|.
name|getHftpFileSystem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardown ()
specifier|public
specifier|static
name|void
name|teardown
parameter_list|()
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/** create a file with a length of<code>fileLen</code> */
DECL|method|createFile (String fileName, long fileLen)
specifier|private
name|void
name|createFile
parameter_list|(
name|String
name|fileName
parameter_list|,
name|long
name|fileLen
parameter_list|)
throws|throws
name|IOException
block|{
name|filelist
operator|.
name|add
argument_list|(
name|hftpURI
operator|+
name|fileName
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|mkdirs (String dirName)
specifier|private
name|void
name|mkdirs
parameter_list|(
name|String
name|dirName
parameter_list|)
throws|throws
name|IOException
block|{
name|filelist
operator|.
name|add
argument_list|(
name|hftpURI
operator|+
name|dirName
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|dirName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListStatus ()
specifier|public
name|void
name|testListStatus
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Empty root directory
name|checkStatus
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|// Root directory with files and directories
name|createFile
argument_list|(
literal|"/a"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
literal|"/b"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
literal|"/dir"
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|// A directory with files and directories
name|createFile
argument_list|(
literal|"/dir/.a.crc"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
literal|"/dir/b"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
literal|"/dir/dir1"
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dir/.a.crc"
argument_list|)
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dir/b"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
literal|"/dir"
argument_list|)
expr_stmt|;
comment|// Non existent path
name|checkStatus
argument_list|(
literal|"/nonexistent"
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
literal|"/nonexistent/a"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|username
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"1"
decl_stmt|;
specifier|final
name|HftpFileSystem
name|hftp2
init|=
name|cluster
operator|.
name|getHftpFileSystemAs
argument_list|(
name|username
argument_list|,
name|CONF
argument_list|,
literal|0
argument_list|,
literal|"somegroup"
argument_list|)
decl_stmt|;
block|{
comment|//test file not found on hftp
specifier|final
name|Path
name|nonexistent
init|=
operator|new
name|Path
argument_list|(
literal|"/nonexistent"
argument_list|)
decl_stmt|;
try|try
block|{
name|hftp2
operator|.
name|getFileStatus
argument_list|(
name|nonexistent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|FileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"GOOD: getting an exception"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|{
comment|//test permission error on hftp
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|hftp2
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|FileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"GOOD: getting an exception"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkStatus (String listdir)
specifier|private
name|void
name|checkStatus
parameter_list|(
name|String
name|listdir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|listpath
init|=
name|hftpFs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|listdir
argument_list|)
argument_list|)
decl_stmt|;
name|listdir
operator|=
name|listpath
operator|.
name|toString
argument_list|()
expr_stmt|;
specifier|final
name|FileStatus
index|[]
name|statuslist
init|=
name|hftpFs
operator|.
name|listStatus
argument_list|(
name|listpath
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|directory
range|:
name|filelist
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"dir:"
operator|+
name|directory
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|file
range|:
name|filelist
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"file:"
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FileStatus
name|status
range|:
name|statuslist
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"status:"
operator|+
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" type "
operator|+
operator|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|?
literal|"directory"
else|:
operator|(
name|status
operator|.
name|isFile
argument_list|()
condition|?
literal|"file"
else|:
literal|"symlink"
operator|)
operator|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|file
range|:
name|filelist
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
comment|// Consider only file under the list path
if|if
condition|(
operator|!
name|file
operator|.
name|startsWith
argument_list|(
name|listpath
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|file
operator|.
name|equals
argument_list|(
name|listpath
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|FileStatus
name|status
range|:
name|statuslist
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Directory/file not returned in list status "
operator|+
name|file
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkFile (final Path f)
specifier|private
name|void
name|checkFile
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|hdfspath
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|f
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|hdfsstatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hdfspath
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"hdfspath="
operator|+
name|hdfspath
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|hftppath
init|=
name|hftpFs
operator|.
name|makeQualified
argument_list|(
name|f
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|hftpstatus
init|=
name|hftpFs
operator|.
name|getFileStatus
argument_list|(
name|hftppath
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"hftppath="
operator|+
name|hftppath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hdfspath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|hdfsstatus
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|checkFileStatus
argument_list|(
name|hdfsstatus
argument_list|,
name|hftpstatus
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFileStatus (final FileStatus expected, final FileStatus computed)
specifier|private
specifier|static
name|void
name|checkFileStatus
parameter_list|(
specifier|final
name|FileStatus
name|expected
parameter_list|,
specifier|final
name|FileStatus
name|computed
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|computed
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: test will fail if the following is un-commented.
comment|//    Assert.assertEquals(expected.getAccessTime(), computed.getAccessTime());
comment|//    Assert.assertEquals(expected.getModificationTime(),
comment|//        computed.getModificationTime());
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|computed
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getGroup
argument_list|()
argument_list|,
name|computed
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getLen
argument_list|()
argument_list|,
name|computed
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getOwner
argument_list|()
argument_list|,
name|computed
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getPermission
argument_list|()
argument_list|,
name|computed
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getReplication
argument_list|()
argument_list|,
name|computed
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

