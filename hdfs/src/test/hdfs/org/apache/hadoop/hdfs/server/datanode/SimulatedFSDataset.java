begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|StandardMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsConstants
operator|.
name|ReplicaState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FSDataset
operator|.
name|BlockPoolSlice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FSDataset
operator|.
name|FSVolumeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|metrics
operator|.
name|FSDatasetMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReplicaRecoveryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockRecoveryCommand
operator|.
name|RecoveringBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskErrorException
import|;
end_import

begin_comment
comment|/**  * This class implements a simulated FSDataset.  *   * Blocks that are created are recorded but their data (plus their CRCs) are  *  discarded.  * Fixed data is returned when blocks are read; a null CRC meta file is  * created for such data.  *   * This FSDataset does not remember any block information across its  * restarts; it does however offer an operation to inject blocks  *  (See the TestInectionForSImulatedStorage()  * for a usage example of injection.  *   * Note the synchronization is coarse grained - it is at each method.   */
end_comment

begin_class
DECL|class|SimulatedFSDataset
specifier|public
class|class
name|SimulatedFSDataset
implements|implements
name|FSConstants
implements|,
name|FSDatasetInterface
implements|,
name|Configurable
block|{
DECL|field|CONFIG_PROPERTY_SIMULATED
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_PROPERTY_SIMULATED
init|=
literal|"dfs.datanode.simulateddatastorage"
decl_stmt|;
DECL|field|CONFIG_PROPERTY_CAPACITY
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_PROPERTY_CAPACITY
init|=
literal|"dfs.datanode.simulateddatastorage.capacity"
decl_stmt|;
DECL|field|DEFAULT_CAPACITY
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_CAPACITY
init|=
literal|2L
operator|<<
literal|40
decl_stmt|;
comment|// 1 terabyte
DECL|field|DEFAULT_DATABYTE
specifier|public
specifier|static
specifier|final
name|byte
name|DEFAULT_DATABYTE
init|=
literal|9
decl_stmt|;
comment|// 1 terabyte
DECL|field|simulatedDataByte
name|byte
name|simulatedDataByte
init|=
name|DEFAULT_DATABYTE
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|nullCrcFileData
specifier|static
name|byte
index|[]
name|nullCrcFileData
decl_stmt|;
block|{
name|DataChecksum
name|checksum
init|=
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|DataChecksum
operator|.
name|CHECKSUM_NULL
argument_list|,
literal|16
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|byte
index|[]
name|nullCrcHeader
init|=
name|checksum
operator|.
name|getHeader
argument_list|()
decl_stmt|;
name|nullCrcFileData
operator|=
operator|new
name|byte
index|[
literal|2
operator|+
name|nullCrcHeader
operator|.
name|length
index|]
expr_stmt|;
name|nullCrcFileData
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|FSDataset
operator|.
name|METADATA_VERSION
operator|>>>
literal|8
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|nullCrcFileData
index|[
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|FSDataset
operator|.
name|METADATA_VERSION
operator|&
literal|0xff
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nullCrcHeader
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|nullCrcFileData
index|[
name|i
operator|+
literal|2
index|]
operator|=
name|nullCrcHeader
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
comment|// information about a single block
DECL|class|BInfo
specifier|private
class|class
name|BInfo
implements|implements
name|ReplicaInPipelineInterface
block|{
DECL|field|theBlock
name|Block
name|theBlock
decl_stmt|;
DECL|field|finalized
specifier|private
name|boolean
name|finalized
init|=
literal|false
decl_stmt|;
comment|// if not finalized => ongoing creation
DECL|field|oStream
name|SimulatedOutputStream
name|oStream
init|=
literal|null
decl_stmt|;
DECL|field|bytesAcked
specifier|private
name|long
name|bytesAcked
decl_stmt|;
DECL|field|bytesRcvd
specifier|private
name|long
name|bytesRcvd
decl_stmt|;
DECL|method|BInfo (String bpid, Block b, boolean forWriting)
name|BInfo
parameter_list|(
name|String
name|bpid
parameter_list|,
name|Block
name|b
parameter_list|,
name|boolean
name|forWriting
parameter_list|)
throws|throws
name|IOException
block|{
name|theBlock
operator|=
operator|new
name|Block
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|theBlock
operator|.
name|getNumBytes
argument_list|()
operator|<
literal|0
condition|)
block|{
name|theBlock
operator|.
name|setNumBytes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|storage
operator|.
name|alloc
argument_list|(
name|bpid
argument_list|,
name|theBlock
operator|.
name|getNumBytes
argument_list|()
argument_list|)
condition|)
block|{
comment|// expected length - actual length may
comment|// be more - we find out at finalize
name|DataNode
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Lack of free storage on a block alloc"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Creating block, no free space available"
argument_list|)
throw|;
block|}
if|if
condition|(
name|forWriting
condition|)
block|{
name|finalized
operator|=
literal|false
expr_stmt|;
name|oStream
operator|=
operator|new
name|SimulatedOutputStream
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|finalized
operator|=
literal|true
expr_stmt|;
name|oStream
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getGenerationStamp ()
specifier|synchronized
specifier|public
name|long
name|getGenerationStamp
parameter_list|()
block|{
return|return
name|theBlock
operator|.
name|getGenerationStamp
argument_list|()
return|;
block|}
DECL|method|getNumBytes ()
specifier|synchronized
specifier|public
name|long
name|getNumBytes
parameter_list|()
block|{
if|if
condition|(
operator|!
name|finalized
condition|)
block|{
return|return
name|bytesRcvd
return|;
block|}
else|else
block|{
return|return
name|theBlock
operator|.
name|getNumBytes
argument_list|()
return|;
block|}
block|}
DECL|method|setNumBytes (long length)
specifier|synchronized
specifier|public
name|void
name|setNumBytes
parameter_list|(
name|long
name|length
parameter_list|)
block|{
if|if
condition|(
operator|!
name|finalized
condition|)
block|{
name|bytesRcvd
operator|=
name|length
expr_stmt|;
block|}
else|else
block|{
name|theBlock
operator|.
name|setNumBytes
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getIStream ()
specifier|synchronized
name|SimulatedInputStream
name|getIStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|finalized
condition|)
block|{
comment|// throw new IOException("Trying to read an unfinalized block");
return|return
operator|new
name|SimulatedInputStream
argument_list|(
name|oStream
operator|.
name|getLength
argument_list|()
argument_list|,
name|DEFAULT_DATABYTE
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SimulatedInputStream
argument_list|(
name|theBlock
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|DEFAULT_DATABYTE
argument_list|)
return|;
block|}
block|}
DECL|method|finalizeBlock (String bpid, long finalSize)
specifier|synchronized
name|void
name|finalizeBlock
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|finalSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|finalized
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Finalizing a block that has already been finalized"
operator|+
name|theBlock
operator|.
name|getBlockId
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|oStream
operator|==
literal|null
condition|)
block|{
name|DataNode
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Null oStream on unfinalized block - bug"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected error on finalize"
argument_list|)
throw|;
block|}
if|if
condition|(
name|oStream
operator|.
name|getLength
argument_list|()
operator|!=
name|finalSize
condition|)
block|{
name|DataNode
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Size passed to finalize ("
operator|+
name|finalSize
operator|+
literal|")does not match what was written:"
operator|+
name|oStream
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Size passed to finalize does not match the amount of data written"
argument_list|)
throw|;
block|}
comment|// We had allocated the expected length when block was created;
comment|// adjust if necessary
name|long
name|extraLen
init|=
name|finalSize
operator|-
name|theBlock
operator|.
name|getNumBytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|extraLen
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|storage
operator|.
name|alloc
argument_list|(
name|bpid
argument_list|,
name|extraLen
argument_list|)
condition|)
block|{
name|DataNode
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Lack of free storage on a block alloc"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Creating block, no free space available"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|storage
operator|.
name|free
argument_list|(
name|bpid
argument_list|,
operator|-
name|extraLen
argument_list|)
expr_stmt|;
block|}
name|theBlock
operator|.
name|setNumBytes
argument_list|(
name|finalSize
argument_list|)
expr_stmt|;
name|finalized
operator|=
literal|true
expr_stmt|;
name|oStream
operator|=
literal|null
expr_stmt|;
return|return;
block|}
DECL|method|unfinalizeBlock ()
specifier|synchronized
name|void
name|unfinalizeBlock
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|finalized
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unfinalized a block that's not finalized "
operator|+
name|theBlock
argument_list|)
throw|;
block|}
name|finalized
operator|=
literal|false
expr_stmt|;
name|oStream
operator|=
operator|new
name|SimulatedOutputStream
argument_list|()
expr_stmt|;
name|long
name|blockLen
init|=
name|theBlock
operator|.
name|getNumBytes
argument_list|()
decl_stmt|;
name|oStream
operator|.
name|setLength
argument_list|(
name|blockLen
argument_list|)
expr_stmt|;
name|bytesRcvd
operator|=
name|blockLen
expr_stmt|;
name|bytesAcked
operator|=
name|blockLen
expr_stmt|;
block|}
DECL|method|getMetaIStream ()
name|SimulatedInputStream
name|getMetaIStream
parameter_list|()
block|{
return|return
operator|new
name|SimulatedInputStream
argument_list|(
name|nullCrcFileData
argument_list|)
return|;
block|}
DECL|method|isFinalized ()
specifier|synchronized
name|boolean
name|isFinalized
parameter_list|()
block|{
return|return
name|finalized
return|;
block|}
annotation|@
name|Override
DECL|method|createStreams (boolean isCreate, int bytesPerChunk, int checksumSize)
specifier|synchronized
specifier|public
name|BlockWriteStreams
name|createStreams
parameter_list|(
name|boolean
name|isCreate
parameter_list|,
name|int
name|bytesPerChunk
parameter_list|,
name|int
name|checksumSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|finalized
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Trying to write to a finalized replica "
operator|+
name|theBlock
argument_list|)
throw|;
block|}
else|else
block|{
name|SimulatedOutputStream
name|crcStream
init|=
operator|new
name|SimulatedOutputStream
argument_list|()
decl_stmt|;
return|return
operator|new
name|BlockWriteStreams
argument_list|(
name|oStream
argument_list|,
name|crcStream
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getBlockId ()
specifier|synchronized
specifier|public
name|long
name|getBlockId
parameter_list|()
block|{
return|return
name|theBlock
operator|.
name|getBlockId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getVisibleLength ()
specifier|synchronized
specifier|public
name|long
name|getVisibleLength
parameter_list|()
block|{
return|return
name|getBytesAcked
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|ReplicaState
name|getState
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getBytesAcked ()
specifier|synchronized
specifier|public
name|long
name|getBytesAcked
parameter_list|()
block|{
if|if
condition|(
name|finalized
condition|)
block|{
return|return
name|theBlock
operator|.
name|getNumBytes
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|bytesAcked
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setBytesAcked (long bytesAcked)
specifier|synchronized
specifier|public
name|void
name|setBytesAcked
parameter_list|(
name|long
name|bytesAcked
parameter_list|)
block|{
if|if
condition|(
operator|!
name|finalized
condition|)
block|{
name|this
operator|.
name|bytesAcked
operator|=
name|bytesAcked
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getBytesOnDisk ()
specifier|synchronized
specifier|public
name|long
name|getBytesOnDisk
parameter_list|()
block|{
if|if
condition|(
name|finalized
condition|)
block|{
return|return
name|theBlock
operator|.
name|getNumBytes
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|oStream
operator|.
name|getLength
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setLastChecksumAndDataLen (long dataLength, byte[] lastChecksum)
specifier|public
name|void
name|setLastChecksumAndDataLen
parameter_list|(
name|long
name|dataLength
parameter_list|,
name|byte
index|[]
name|lastChecksum
parameter_list|)
block|{
name|oStream
operator|.
name|setLength
argument_list|(
name|dataLength
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLastChecksumAndDataLen ()
specifier|public
name|ChunkChecksum
name|getLastChecksumAndDataLen
parameter_list|()
block|{
return|return
operator|new
name|ChunkChecksum
argument_list|(
name|oStream
operator|.
name|getLength
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
comment|/**    * Class is used for tracking block pool storage utilization similar    * to {@link BlockPoolSlice}    */
DECL|class|SimulatedBPStorage
specifier|private
specifier|static
class|class
name|SimulatedBPStorage
block|{
DECL|field|used
specifier|private
name|long
name|used
decl_stmt|;
comment|// in bytes
DECL|method|getUsed ()
name|long
name|getUsed
parameter_list|()
block|{
return|return
name|used
return|;
block|}
DECL|method|alloc (long amount)
name|void
name|alloc
parameter_list|(
name|long
name|amount
parameter_list|)
block|{
name|used
operator|+=
name|amount
expr_stmt|;
block|}
DECL|method|free (long amount)
name|void
name|free
parameter_list|(
name|long
name|amount
parameter_list|)
block|{
name|used
operator|-=
name|amount
expr_stmt|;
block|}
DECL|method|SimulatedBPStorage ()
name|SimulatedBPStorage
parameter_list|()
block|{
name|used
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/**    * Class used for tracking datanode level storage utilization similar    * to {@link FSVolumeSet}    */
DECL|class|SimulatedStorage
specifier|private
specifier|static
class|class
name|SimulatedStorage
block|{
DECL|field|map
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SimulatedBPStorage
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SimulatedBPStorage
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|capacity
specifier|private
name|long
name|capacity
decl_stmt|;
comment|// in bytes
DECL|method|getFree ()
specifier|synchronized
name|long
name|getFree
parameter_list|()
block|{
return|return
name|capacity
operator|-
name|getUsed
argument_list|()
return|;
block|}
DECL|method|getCapacity ()
specifier|synchronized
name|long
name|getCapacity
parameter_list|()
block|{
return|return
name|capacity
return|;
block|}
DECL|method|getUsed ()
specifier|synchronized
name|long
name|getUsed
parameter_list|()
block|{
name|long
name|used
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SimulatedBPStorage
name|bpStorage
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|used
operator|+=
name|bpStorage
operator|.
name|getUsed
argument_list|()
expr_stmt|;
block|}
return|return
name|used
return|;
block|}
DECL|method|getBlockPoolUsed (String bpid)
specifier|synchronized
name|long
name|getBlockPoolUsed
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBPStorage
argument_list|(
name|bpid
argument_list|)
operator|.
name|getUsed
argument_list|()
return|;
block|}
DECL|method|getNumFailedVolumes ()
name|int
name|getNumFailedVolumes
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|alloc (String bpid, long amount)
specifier|synchronized
name|boolean
name|alloc
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|amount
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|getFree
argument_list|()
operator|>=
name|amount
condition|)
block|{
name|getBPStorage
argument_list|(
name|bpid
argument_list|)
operator|.
name|alloc
argument_list|(
name|amount
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|free (String bpid, long amount)
specifier|synchronized
name|void
name|free
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|amount
parameter_list|)
throws|throws
name|IOException
block|{
name|getBPStorage
argument_list|(
name|bpid
argument_list|)
operator|.
name|free
argument_list|(
name|amount
argument_list|)
expr_stmt|;
block|}
DECL|method|SimulatedStorage (long cap)
name|SimulatedStorage
parameter_list|(
name|long
name|cap
parameter_list|)
block|{
name|capacity
operator|=
name|cap
expr_stmt|;
block|}
DECL|method|addBlockPool (String bpid)
specifier|synchronized
name|void
name|addBlockPool
parameter_list|(
name|String
name|bpid
parameter_list|)
block|{
name|SimulatedBPStorage
name|bpStorage
init|=
name|map
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|bpStorage
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|map
operator|.
name|put
argument_list|(
name|bpid
argument_list|,
operator|new
name|SimulatedBPStorage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|removeBlockPool (String bpid)
specifier|synchronized
name|void
name|removeBlockPool
parameter_list|(
name|String
name|bpid
parameter_list|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|bpid
argument_list|)
expr_stmt|;
block|}
DECL|method|getBPStorage (String bpid)
specifier|private
name|SimulatedBPStorage
name|getBPStorage
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
name|SimulatedBPStorage
name|bpStorage
init|=
name|map
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|bpStorage
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"block pool "
operator|+
name|bpid
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
name|bpStorage
return|;
block|}
block|}
DECL|field|blockMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
argument_list|>
name|blockMap
init|=
literal|null
decl_stmt|;
DECL|field|storage
specifier|private
name|SimulatedStorage
name|storage
init|=
literal|null
decl_stmt|;
DECL|field|storageId
specifier|private
name|String
name|storageId
decl_stmt|;
DECL|method|SimulatedFSDataset (Configuration conf)
specifier|public
name|SimulatedFSDataset
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// Constructor used for constructing the object using reflection
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|SimulatedFSDataset ()
specifier|private
name|SimulatedFSDataset
parameter_list|()
block|{
comment|// real construction when setConf called..
block|}
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|setConf (Configuration iconf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|iconf
parameter_list|)
block|{
name|conf
operator|=
name|iconf
expr_stmt|;
name|storageId
operator|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_STORAGEID_KEY
argument_list|,
literal|"unknownStorageId"
operator|+
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|registerMBean
argument_list|(
name|storageId
argument_list|)
expr_stmt|;
name|storage
operator|=
operator|new
name|SimulatedStorage
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|CONFIG_PROPERTY_CAPACITY
argument_list|,
name|DEFAULT_CAPACITY
argument_list|)
argument_list|)
expr_stmt|;
name|blockMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|injectBlocks (String bpid, Iterable<Block> injectBlocks)
specifier|public
specifier|synchronized
name|void
name|injectBlocks
parameter_list|(
name|String
name|bpid
parameter_list|,
name|Iterable
argument_list|<
name|Block
argument_list|>
name|injectBlocks
parameter_list|)
throws|throws
name|IOException
block|{
name|ExtendedBlock
name|blk
init|=
operator|new
name|ExtendedBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|injectBlocks
operator|!=
literal|null
condition|)
block|{
name|int
name|numInjectedBlocks
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Block
name|b
range|:
name|injectBlocks
control|)
block|{
comment|// if any blocks in list is bad, reject list
name|numInjectedBlocks
operator|++
expr_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null blocks in block list"
argument_list|)
throw|;
block|}
name|blk
operator|.
name|set
argument_list|(
name|bpid
argument_list|,
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|isValidBlock
argument_list|(
name|blk
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Block already exists in  block list"
argument_list|)
throw|;
block|}
block|}
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|blockMap
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
argument_list|()
expr_stmt|;
name|blockMap
operator|.
name|put
argument_list|(
name|bpid
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Block
name|b
range|:
name|injectBlocks
control|)
block|{
name|BInfo
name|binfo
init|=
operator|new
name|BInfo
argument_list|(
name|bpid
argument_list|,
name|b
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|binfo
operator|.
name|theBlock
argument_list|,
name|binfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Get a map for a given block pool Id */
DECL|method|getMap (String bpid)
specifier|private
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|getMap
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|blockMap
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Non existent blockpool "
operator|+
name|bpid
argument_list|)
throw|;
block|}
return|return
name|map
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|finalizeBlock (ExtendedBlock b)
specifier|public
specifier|synchronized
name|void
name|finalizeBlock
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|getMap
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
name|BInfo
name|binfo
init|=
name|map
operator|.
name|get
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|binfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Finalizing a non existing block "
operator|+
name|b
argument_list|)
throw|;
block|}
name|binfo
operator|.
name|finalizeBlock
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|unfinalizeBlock (ExtendedBlock b)
specifier|public
specifier|synchronized
name|void
name|unfinalizeBlock
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isValidRbw
argument_list|(
name|b
argument_list|)
condition|)
block|{
name|blockMap
operator|.
name|remove
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getBlockReport (String bpid)
specifier|public
specifier|synchronized
name|BlockListAsLongs
name|getBlockReport
parameter_list|(
name|String
name|bpid
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|blockMap
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
name|Block
index|[]
name|blockTable
init|=
operator|new
name|Block
index|[
name|map
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BInfo
name|b
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|b
operator|.
name|isFinalized
argument_list|()
condition|)
block|{
name|blockTable
index|[
name|count
operator|++
index|]
operator|=
name|b
operator|.
name|theBlock
expr_stmt|;
block|}
block|}
if|if
condition|(
name|count
operator|!=
name|blockTable
operator|.
name|length
condition|)
block|{
name|blockTable
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|blockTable
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|blockTable
operator|=
operator|new
name|Block
index|[
literal|0
index|]
expr_stmt|;
block|}
return|return
operator|new
name|BlockListAsLongs
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Block
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|blockTable
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetMBean
DECL|method|getCapacity ()
specifier|public
name|long
name|getCapacity
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|storage
operator|.
name|getCapacity
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetMBean
DECL|method|getDfsUsed ()
specifier|public
name|long
name|getDfsUsed
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|storage
operator|.
name|getUsed
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetMBean
DECL|method|getBlockPoolUsed (String bpid)
specifier|public
name|long
name|getBlockPoolUsed
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|storage
operator|.
name|getBlockPoolUsed
argument_list|(
name|bpid
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetMBean
DECL|method|getRemaining ()
specifier|public
name|long
name|getRemaining
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|storage
operator|.
name|getFree
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetMBean
DECL|method|getNumFailedVolumes ()
specifier|public
name|int
name|getNumFailedVolumes
parameter_list|()
block|{
return|return
name|storage
operator|.
name|getNumFailedVolumes
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|getLength (ExtendedBlock b)
specifier|public
specifier|synchronized
name|long
name|getLength
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|getMap
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
name|BInfo
name|binfo
init|=
name|map
operator|.
name|get
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|binfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Finalizing a non existing block "
operator|+
name|b
argument_list|)
throw|;
block|}
return|return
name|binfo
operator|.
name|getNumBytes
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|getReplica (String bpid, long blockId)
specifier|public
name|Replica
name|getReplica
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|blockId
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|blockMap
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
operator|new
name|Block
argument_list|(
name|blockId
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getReplicaString (String bpid, long blockId)
specifier|public
specifier|synchronized
name|String
name|getReplicaString
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|blockId
parameter_list|)
block|{
name|Replica
name|r
init|=
literal|null
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|blockMap
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|r
operator|=
name|map
operator|.
name|get
argument_list|(
operator|new
name|Block
argument_list|(
name|blockId
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|r
operator|==
literal|null
condition|?
literal|"null"
else|:
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|getStoredBlock (String bpid, long blkid)
specifier|public
name|Block
name|getStoredBlock
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|blkid
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|blockMap
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|BInfo
name|binfo
init|=
name|map
operator|.
name|get
argument_list|(
operator|new
name|Block
argument_list|(
name|blkid
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|binfo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Block
argument_list|(
name|blkid
argument_list|,
name|binfo
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|binfo
operator|.
name|getNumBytes
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|invalidate (String bpid, Block[] invalidBlks)
specifier|public
specifier|synchronized
name|void
name|invalidate
parameter_list|(
name|String
name|bpid
parameter_list|,
name|Block
index|[]
name|invalidBlks
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|error
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|invalidBlks
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|getMap
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
for|for
control|(
name|Block
name|b
range|:
name|invalidBlks
control|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|BInfo
name|binfo
init|=
name|map
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|binfo
operator|==
literal|null
condition|)
block|{
name|error
operator|=
literal|true
expr_stmt|;
name|DataNode
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalidate: Missing block"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|storage
operator|.
name|free
argument_list|(
name|bpid
argument_list|,
name|binfo
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|blockMap
operator|.
name|remove
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|error
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalidate: Missing blocks."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|isValidBlock (ExtendedBlock b)
specifier|public
specifier|synchronized
name|boolean
name|isValidBlock
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|blockMap
operator|.
name|get
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|BInfo
name|binfo
init|=
name|map
operator|.
name|get
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|binfo
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|binfo
operator|.
name|isFinalized
argument_list|()
return|;
block|}
comment|/* check if a block is created but not finalized */
annotation|@
name|Override
DECL|method|isValidRbw (ExtendedBlock b)
specifier|public
specifier|synchronized
name|boolean
name|isValidRbw
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|blockMap
operator|.
name|get
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|BInfo
name|binfo
init|=
name|map
operator|.
name|get
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|binfo
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|!
name|binfo
operator|.
name|isFinalized
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getStorageInfo
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|append (ExtendedBlock b, long newGS, long expectedBlockLen)
specifier|public
specifier|synchronized
name|ReplicaInPipelineInterface
name|append
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|long
name|newGS
parameter_list|,
name|long
name|expectedBlockLen
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|getMap
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
name|BInfo
name|binfo
init|=
name|map
operator|.
name|get
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|binfo
operator|==
literal|null
operator|||
operator|!
name|binfo
operator|.
name|isFinalized
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ReplicaNotFoundException
argument_list|(
literal|"Block "
operator|+
name|b
operator|+
literal|" is not valid, and cannot be appended to."
argument_list|)
throw|;
block|}
name|binfo
operator|.
name|unfinalizeBlock
argument_list|()
expr_stmt|;
return|return
name|binfo
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|recoverAppend (ExtendedBlock b, long newGS, long expectedBlockLen)
specifier|public
specifier|synchronized
name|ReplicaInPipelineInterface
name|recoverAppend
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|long
name|newGS
parameter_list|,
name|long
name|expectedBlockLen
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|getMap
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
name|BInfo
name|binfo
init|=
name|map
operator|.
name|get
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|binfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReplicaNotFoundException
argument_list|(
literal|"Block "
operator|+
name|b
operator|+
literal|" is not valid, and cannot be appended to."
argument_list|)
throw|;
block|}
if|if
condition|(
name|binfo
operator|.
name|isFinalized
argument_list|()
condition|)
block|{
name|binfo
operator|.
name|unfinalizeBlock
argument_list|()
expr_stmt|;
block|}
name|map
operator|.
name|remove
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|binfo
operator|.
name|theBlock
operator|.
name|setGenerationStamp
argument_list|(
name|newGS
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|binfo
operator|.
name|theBlock
argument_list|,
name|binfo
argument_list|)
expr_stmt|;
return|return
name|binfo
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|recoverClose (ExtendedBlock b, long newGS, long expectedBlockLen)
specifier|public
name|void
name|recoverClose
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|long
name|newGS
parameter_list|,
name|long
name|expectedBlockLen
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|getMap
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
name|BInfo
name|binfo
init|=
name|map
operator|.
name|get
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|binfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReplicaNotFoundException
argument_list|(
literal|"Block "
operator|+
name|b
operator|+
literal|" is not valid, and cannot be appended to."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|binfo
operator|.
name|isFinalized
argument_list|()
condition|)
block|{
name|binfo
operator|.
name|finalizeBlock
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|binfo
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|remove
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
expr_stmt|;
name|binfo
operator|.
name|theBlock
operator|.
name|setGenerationStamp
argument_list|(
name|newGS
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|binfo
operator|.
name|theBlock
argument_list|,
name|binfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|recoverRbw (ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)
specifier|public
specifier|synchronized
name|ReplicaInPipelineInterface
name|recoverRbw
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|long
name|newGS
parameter_list|,
name|long
name|minBytesRcvd
parameter_list|,
name|long
name|maxBytesRcvd
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|getMap
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
name|BInfo
name|binfo
init|=
name|map
operator|.
name|get
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|binfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReplicaNotFoundException
argument_list|(
literal|"Block "
operator|+
name|b
operator|+
literal|" does not exist, and cannot be appended to."
argument_list|)
throw|;
block|}
if|if
condition|(
name|binfo
operator|.
name|isFinalized
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ReplicaAlreadyExistsException
argument_list|(
literal|"Block "
operator|+
name|b
operator|+
literal|" is valid, and cannot be written to."
argument_list|)
throw|;
block|}
name|map
operator|.
name|remove
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|binfo
operator|.
name|theBlock
operator|.
name|setGenerationStamp
argument_list|(
name|newGS
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|binfo
operator|.
name|theBlock
argument_list|,
name|binfo
argument_list|)
expr_stmt|;
return|return
name|binfo
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|createRbw (ExtendedBlock b)
specifier|public
specifier|synchronized
name|ReplicaInPipelineInterface
name|createRbw
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTemporary
argument_list|(
name|b
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|createTemporary (ExtendedBlock b)
specifier|public
specifier|synchronized
name|ReplicaInPipelineInterface
name|createTemporary
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isValidBlock
argument_list|(
name|b
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ReplicaAlreadyExistsException
argument_list|(
literal|"Block "
operator|+
name|b
operator|+
literal|" is valid, and cannot be written to."
argument_list|)
throw|;
block|}
if|if
condition|(
name|isValidRbw
argument_list|(
name|b
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ReplicaAlreadyExistsException
argument_list|(
literal|"Block "
operator|+
name|b
operator|+
literal|" is being written, and cannot be written to."
argument_list|)
throw|;
block|}
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|getMap
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
name|BInfo
name|binfo
init|=
operator|new
name|BInfo
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|binfo
operator|.
name|theBlock
argument_list|,
name|binfo
argument_list|)
expr_stmt|;
return|return
name|binfo
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|getBlockInputStream (ExtendedBlock b)
specifier|public
specifier|synchronized
name|InputStream
name|getBlockInputStream
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|getMap
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
name|BInfo
name|binfo
init|=
name|map
operator|.
name|get
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|binfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No such Block "
operator|+
name|b
argument_list|)
throw|;
block|}
return|return
name|binfo
operator|.
name|getIStream
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|getBlockInputStream (ExtendedBlock b, long seekOffset)
specifier|public
specifier|synchronized
name|InputStream
name|getBlockInputStream
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|long
name|seekOffset
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|result
init|=
name|getBlockInputStream
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|result
operator|.
name|skip
argument_list|(
name|seekOffset
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/** Not supported */
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|getTmpInputStreams (ExtendedBlock b, long blkoff, long ckoff)
specifier|public
name|BlockInputStreams
name|getTmpInputStreams
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|long
name|blkoff
parameter_list|,
name|long
name|ckoff
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
comment|/**    * Returns metaData of block b as an input stream    * @param b - the block for which the metadata is desired    * @return metaData of block b as an input stream    * @throws IOException - block does not exist or problems accessing    *  the meta file    */
DECL|method|getMetaDataInStream (ExtendedBlock b)
specifier|private
specifier|synchronized
name|InputStream
name|getMetaDataInStream
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|getMap
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
name|BInfo
name|binfo
init|=
name|map
operator|.
name|get
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|binfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No such Block "
operator|+
name|b
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|binfo
operator|.
name|finalized
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Block "
operator|+
name|b
operator|+
literal|" is being written, its meta cannot be read"
argument_list|)
throw|;
block|}
return|return
name|binfo
operator|.
name|getMetaIStream
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|getMetaDataLength (ExtendedBlock b)
specifier|public
specifier|synchronized
name|long
name|getMetaDataLength
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|getMap
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
name|BInfo
name|binfo
init|=
name|map
operator|.
name|get
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|binfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No such Block "
operator|+
name|b
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|binfo
operator|.
name|finalized
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Block "
operator|+
name|b
operator|+
literal|" is being written, its metalength cannot be read"
argument_list|)
throw|;
block|}
return|return
name|binfo
operator|.
name|getMetaIStream
argument_list|()
operator|.
name|getLength
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|getMetaDataInputStream (ExtendedBlock b)
specifier|public
name|MetaDataInputStream
name|getMetaDataInputStream
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MetaDataInputStream
argument_list|(
name|getMetaDataInStream
argument_list|(
name|b
argument_list|)
argument_list|,
name|getMetaDataLength
argument_list|(
name|b
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|metaFileExists (ExtendedBlock b)
specifier|public
specifier|synchronized
name|boolean
name|metaFileExists
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isValidBlock
argument_list|(
name|b
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Block "
operator|+
name|b
operator|+
literal|" is valid, and cannot be written to."
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
comment|// crc exists for all valid blocks
block|}
DECL|method|checkDataDir ()
specifier|public
name|void
name|checkDataDir
parameter_list|()
throws|throws
name|DiskErrorException
block|{
comment|// nothing to check for simulated data set
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|adjustCrcChannelPosition (ExtendedBlock b, BlockWriteStreams stream, int checksumSize)
specifier|public
specifier|synchronized
name|void
name|adjustCrcChannelPosition
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|BlockWriteStreams
name|stream
parameter_list|,
name|int
name|checksumSize
parameter_list|)
throws|throws
name|IOException
block|{   }
comment|/**     * Simulated input and output streams    *    */
DECL|class|SimulatedInputStream
specifier|static
specifier|private
class|class
name|SimulatedInputStream
extends|extends
name|java
operator|.
name|io
operator|.
name|InputStream
block|{
DECL|field|theRepeatedData
name|byte
name|theRepeatedData
init|=
literal|7
decl_stmt|;
DECL|field|length
name|long
name|length
decl_stmt|;
comment|// bytes
DECL|field|currentPos
name|int
name|currentPos
init|=
literal|0
decl_stmt|;
DECL|field|data
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
comment|/**      * An input stream of size l with repeated bytes      * @param l      * @param iRepeatedData      */
DECL|method|SimulatedInputStream (long l, byte iRepeatedData)
name|SimulatedInputStream
parameter_list|(
name|long
name|l
parameter_list|,
name|byte
name|iRepeatedData
parameter_list|)
block|{
name|length
operator|=
name|l
expr_stmt|;
name|theRepeatedData
operator|=
name|iRepeatedData
expr_stmt|;
block|}
comment|/**      * An input stream of of the supplied data      *       * @param iData      */
DECL|method|SimulatedInputStream (byte[] iData)
name|SimulatedInputStream
parameter_list|(
name|byte
index|[]
name|iData
parameter_list|)
block|{
name|data
operator|=
name|iData
expr_stmt|;
name|length
operator|=
name|data
operator|.
name|length
expr_stmt|;
block|}
comment|/**      *       * @return the lenght of the input stream      */
DECL|method|getLength ()
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentPos
operator|>=
name|length
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
return|return
name|data
index|[
name|currentPos
operator|++
index|]
return|;
block|}
else|else
block|{
name|currentPos
operator|++
expr_stmt|;
return|return
name|theRepeatedData
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|read (byte[] b)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|b
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|currentPos
operator|>=
name|length
condition|)
block|{
comment|// EOF
return|return
operator|-
literal|1
return|;
block|}
name|int
name|bytesRead
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|b
operator|.
name|length
argument_list|,
name|length
operator|-
name|currentPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|currentPos
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// all data is zero
for|for
control|(
name|int
name|i
range|:
name|b
control|)
block|{
name|b
index|[
name|i
index|]
operator|=
name|theRepeatedData
expr_stmt|;
block|}
block|}
name|currentPos
operator|+=
name|bytesRead
expr_stmt|;
return|return
name|bytesRead
return|;
block|}
block|}
comment|/**    * This class implements an output stream that merely throws its data away, but records its    * length.    *    */
DECL|class|SimulatedOutputStream
specifier|static
specifier|private
class|class
name|SimulatedOutputStream
extends|extends
name|OutputStream
block|{
DECL|field|length
name|long
name|length
init|=
literal|0
decl_stmt|;
comment|/**      * constructor for Simulated Output Steram      */
DECL|method|SimulatedOutputStream ()
name|SimulatedOutputStream
parameter_list|()
block|{     }
comment|/**      *       * @return the length of the data created so far.      */
DECL|method|getLength ()
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
comment|/**      */
DECL|method|setLength (long length)
name|void
name|setLength
parameter_list|(
name|long
name|length
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (int arg0)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
name|length
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] b)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|length
operator|+=
name|b
operator|.
name|length
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] b, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|length
operator|+=
name|len
expr_stmt|;
block|}
block|}
DECL|field|mbeanName
specifier|private
name|ObjectName
name|mbeanName
decl_stmt|;
comment|/**    * Register the FSDataset MBean using the name    *        "hadoop:service=DataNode,name=FSDatasetState-<storageid>"    *  We use storage id for MBean name since a minicluster within a single    * Java VM may have multiple Simulated Datanodes.    */
DECL|method|registerMBean (final String storageId)
name|void
name|registerMBean
parameter_list|(
specifier|final
name|String
name|storageId
parameter_list|)
block|{
comment|// We wrap to bypass standard mbean naming convetion.
comment|// This wraping can be removed in java 6 as it is more flexible in
comment|// package naming for mbeans and their impl.
name|StandardMBean
name|bean
decl_stmt|;
try|try
block|{
name|bean
operator|=
operator|new
name|StandardMBean
argument_list|(
name|this
argument_list|,
name|FSDatasetMBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|mbeanName
operator|=
name|MBeans
operator|.
name|register
argument_list|(
literal|"DataNode"
argument_list|,
literal|"FSDatasetState-"
operator|+
name|storageId
argument_list|,
name|bean
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotCompliantMBeanException
name|e
parameter_list|)
block|{
name|DataNode
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error registering FSDatasetState MBean"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|DataNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Registered FSDatasetState MBean"
argument_list|)
expr_stmt|;
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|mbeanName
operator|!=
literal|null
condition|)
name|MBeans
operator|.
name|unregister
argument_list|(
name|mbeanName
argument_list|)
expr_stmt|;
block|}
DECL|method|getStorageInfo ()
specifier|public
name|String
name|getStorageInfo
parameter_list|()
block|{
return|return
literal|"Simulated FSDataset-"
operator|+
name|storageId
return|;
block|}
DECL|method|hasEnoughResource ()
specifier|public
name|boolean
name|hasEnoughResource
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|initReplicaRecovery (RecoveringBlock rBlock)
specifier|public
name|ReplicaRecoveryInfo
name|initReplicaRecovery
parameter_list|(
name|RecoveringBlock
name|rBlock
parameter_list|)
throws|throws
name|IOException
block|{
name|ExtendedBlock
name|b
init|=
name|rBlock
operator|.
name|getBlock
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|getMap
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
name|BInfo
name|binfo
init|=
name|map
operator|.
name|get
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|binfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No such Block "
operator|+
name|b
argument_list|)
throw|;
block|}
return|return
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|binfo
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|binfo
operator|.
name|getBytesOnDisk
argument_list|()
argument_list|,
name|binfo
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|binfo
operator|.
name|isFinalized
argument_list|()
condition|?
name|ReplicaState
operator|.
name|FINALIZED
else|:
name|ReplicaState
operator|.
name|RBW
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|updateReplicaUnderRecovery (ExtendedBlock oldBlock, long recoveryId, long newlength)
specifier|public
name|FinalizedReplica
name|updateReplicaUnderRecovery
parameter_list|(
name|ExtendedBlock
name|oldBlock
parameter_list|,
name|long
name|recoveryId
parameter_list|,
name|long
name|newlength
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FinalizedReplica
argument_list|(
name|oldBlock
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|newlength
argument_list|,
name|recoveryId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|getReplicaVisibleLength (ExtendedBlock block)
specifier|public
name|long
name|getReplicaVisibleLength
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|block
operator|.
name|getNumBytes
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|addBlockPool (String bpid, Configuration conf)
specifier|public
name|void
name|addBlockPool
parameter_list|(
name|String
name|bpid
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
argument_list|()
decl_stmt|;
name|blockMap
operator|.
name|put
argument_list|(
name|bpid
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|storage
operator|.
name|addBlockPool
argument_list|(
name|bpid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|shutdownBlockPool (String bpid)
specifier|public
name|void
name|shutdownBlockPool
parameter_list|(
name|String
name|bpid
parameter_list|)
block|{
name|blockMap
operator|.
name|remove
argument_list|(
name|bpid
argument_list|)
expr_stmt|;
name|storage
operator|.
name|removeBlockPool
argument_list|(
name|bpid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// FSDatasetInterface
DECL|method|deleteBlockPool (String bpid, boolean force)
specifier|public
name|void
name|deleteBlockPool
parameter_list|(
name|String
name|bpid
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
return|return;
block|}
annotation|@
name|Override
DECL|method|convertTemporaryToRbw (ExtendedBlock temporary)
specifier|public
name|ReplicaInPipelineInterface
name|convertTemporaryToRbw
parameter_list|(
name|ExtendedBlock
name|temporary
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BInfo
argument_list|>
name|map
init|=
name|blockMap
operator|.
name|get
argument_list|(
name|temporary
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Block pool not found, temporary="
operator|+
name|temporary
argument_list|)
throw|;
block|}
specifier|final
name|BInfo
name|r
init|=
name|map
operator|.
name|get
argument_list|(
name|temporary
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Block not found, temporary="
operator|+
name|temporary
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|r
operator|.
name|isFinalized
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Replica already finalized, temporary="
operator|+
name|temporary
operator|+
literal|", r="
operator|+
name|r
argument_list|)
throw|;
block|}
return|return
name|r
return|;
block|}
block|}
end_class

end_unit

