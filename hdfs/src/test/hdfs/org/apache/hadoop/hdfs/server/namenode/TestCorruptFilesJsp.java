begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|TestDatanodeBlockScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** A JUnit test for corrupt_files.jsp */
end_comment

begin_class
DECL|class|TestCorruptFilesJsp
specifier|public
class|class
name|TestCorruptFilesJsp
block|{
annotation|@
name|Test
DECL|method|testCorruptFilesJsp ()
specifier|public
name|void
name|testCorruptFilesJsp
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|int
name|FILE_SIZE
init|=
literal|512
decl_stmt|;
name|Path
index|[]
name|filepaths
init|=
block|{
operator|new
name|Path
argument_list|(
literal|"/audiobook"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/audio/audio1"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/audio/audio2"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/audio/audio"
argument_list|)
block|}
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|// datanode scans directories
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// datanode sends block reports
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// create files
for|for
control|(
name|Path
name|filepath
range|:
name|filepaths
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filepath
argument_list|,
name|FILE_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|filepath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// verify there are not corrupt files
specifier|final
name|NameNode
name|namenode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|FSNamesystem
operator|.
name|CorruptFileBlockInfo
argument_list|>
name|badFiles
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"There are "
operator|+
name|badFiles
operator|.
name|size
argument_list|()
operator|+
literal|" corrupt files, but expecting none"
argument_list|,
name|badFiles
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Check if webui agrees
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://"
operator|+
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|)
operator|+
literal|"/corrupt_files.jsp"
argument_list|)
decl_stmt|;
name|String
name|corruptFilesPage
init|=
name|DFSTestUtil
operator|.
name|urlGet
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Corrupt files page is not showing a healthy filesystem"
argument_list|,
name|corruptFilesPage
operator|.
name|contains
argument_list|(
literal|"No missing blocks found at the moment."
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now corrupt all the files except for the last one
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|filepaths
operator|.
name|length
operator|-
literal|1
condition|;
name|idx
operator|++
control|)
block|{
name|ExtendedBlock
name|blk
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|filepaths
index|[
name|idx
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TestDatanodeBlockScanner
operator|.
name|corruptReplica
argument_list|(
name|blk
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// read the file so that the corrupt block is reported to NN
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|filepaths
index|[
name|idx
index|]
argument_list|)
decl_stmt|;
try|try
block|{
name|in
operator|.
name|readFully
argument_list|(
operator|new
name|byte
index|[
name|FILE_SIZE
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ChecksumException
name|ignored
parameter_list|)
block|{
comment|// checksum error is expected.
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// verify if all corrupt files were reported to NN
name|badFiles
operator|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting 3 corrupt files, but got "
operator|+
name|badFiles
operator|.
name|size
argument_list|()
argument_list|,
name|badFiles
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// Check if webui agrees
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"http://"
operator|+
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|)
operator|+
literal|"/corrupt_files.jsp"
argument_list|)
expr_stmt|;
name|corruptFilesPage
operator|=
name|DFSTestUtil
operator|.
name|urlGet
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"'/audiobook' should be corrupt"
argument_list|,
name|corruptFilesPage
operator|.
name|contains
argument_list|(
literal|"/audiobook"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"'/audio/audio1' should be corrupt"
argument_list|,
name|corruptFilesPage
operator|.
name|contains
argument_list|(
literal|"/audio/audio1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"'/audio/audio2' should be corrupt"
argument_list|,
name|corruptFilesPage
operator|.
name|contains
argument_list|(
literal|"/audio/audio2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Summary message shall report 3 corrupt files"
argument_list|,
name|corruptFilesPage
operator|.
name|contains
argument_list|(
literal|"At least 3 corrupt file(s)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// clean up
for|for
control|(
name|Path
name|filepath
range|:
name|filepaths
control|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|filepath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

