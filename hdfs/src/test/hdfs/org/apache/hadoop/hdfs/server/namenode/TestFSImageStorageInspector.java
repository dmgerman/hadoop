begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeDirType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|getInProgressEditsFileName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|getFinalizedEditsFileName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|getImageFileName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageTransactionalStorageInspector
operator|.
name|FoundEditLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageTransactionalStorageInspector
operator|.
name|FoundFSImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageTransactionalStorageInspector
operator|.
name|TransactionalLoadPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageTransactionalStorageInspector
operator|.
name|LogGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageStorageInspector
operator|.
name|LoadPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestFSImageStorageInspector
specifier|public
class|class
name|TestFSImageStorageInspector
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFSImageStorageInspector
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Simple test with image, edits, and inprogress edits    */
annotation|@
name|Test
DECL|method|testCurrentStorageInspector ()
specifier|public
name|void
name|testCurrentStorageInspector
parameter_list|()
throws|throws
name|IOException
block|{
name|FSImageTransactionalStorageInspector
name|inspector
init|=
operator|new
name|FSImageTransactionalStorageInspector
argument_list|()
decl_stmt|;
name|StorageDirectory
name|mockDir
init|=
name|mockDirectory
argument_list|(
name|NameNodeDirType
operator|.
name|IMAGE_AND_EDITS
argument_list|,
literal|false
argument_list|,
literal|"/foo/current/"
operator|+
name|getImageFileName
argument_list|(
literal|123
argument_list|)
argument_list|,
literal|"/foo/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|123
argument_list|,
literal|456
argument_list|)
argument_list|,
literal|"/foo/current/"
operator|+
name|getImageFileName
argument_list|(
literal|456
argument_list|)
argument_list|,
literal|"/foo/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|457
argument_list|)
argument_list|)
decl_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDir
argument_list|)
expr_stmt|;
name|mockLogValidation
argument_list|(
name|inspector
argument_list|,
literal|"/foo/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|457
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|inspector
operator|.
name|foundEditLogs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|inspector
operator|.
name|foundImages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inspector
operator|.
name|foundEditLogs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|FoundFSImage
name|latestImage
init|=
name|inspector
operator|.
name|getLatestImage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|456
argument_list|,
name|latestImage
operator|.
name|txId
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|mockDir
argument_list|,
name|latestImage
operator|.
name|sd
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inspector
operator|.
name|isUpgradeFinalized
argument_list|()
argument_list|)
expr_stmt|;
name|LoadPlan
name|plan
init|=
name|inspector
operator|.
name|createLoadPlan
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Plan: "
operator|+
name|plan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"/foo/current/"
operator|+
name|getImageFileName
argument_list|(
literal|456
argument_list|)
argument_list|)
argument_list|,
name|plan
operator|.
name|getImageFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|File
index|[]
block|{
operator|new
name|File
argument_list|(
literal|"/foo/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|457
argument_list|)
argument_list|)
block|}
argument_list|,
name|plan
operator|.
name|getEditsFiles
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|File
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that we check for gaps in txids when devising a load plan.    */
annotation|@
name|Test
DECL|method|testPlanWithGaps ()
specifier|public
name|void
name|testPlanWithGaps
parameter_list|()
throws|throws
name|IOException
block|{
name|FSImageTransactionalStorageInspector
name|inspector
init|=
operator|new
name|FSImageTransactionalStorageInspector
argument_list|()
decl_stmt|;
name|StorageDirectory
name|mockDir
init|=
name|mockDirectory
argument_list|(
name|NameNodeDirType
operator|.
name|IMAGE_AND_EDITS
argument_list|,
literal|false
argument_list|,
literal|"/foo/current/"
operator|+
name|getImageFileName
argument_list|(
literal|123
argument_list|)
argument_list|,
literal|"/foo/current/"
operator|+
name|getImageFileName
argument_list|(
literal|456
argument_list|)
argument_list|,
literal|"/foo/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|457
argument_list|,
literal|900
argument_list|)
argument_list|,
literal|"/foo/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|901
argument_list|,
literal|950
argument_list|)
argument_list|,
literal|"/foo/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|952
argument_list|,
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
comment|//<-- missing edit 951!
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDir
argument_list|)
expr_stmt|;
try|try
block|{
name|inspector
operator|.
name|createLoadPlan
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't throw IOE trying to load with gaps in edits"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"would start at txid 951 but starts at txid 952"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test the case where an in-progress log comes in the middle of a sequence    * of logs    */
annotation|@
name|Test
DECL|method|testPlanWithInProgressInMiddle ()
specifier|public
name|void
name|testPlanWithInProgressInMiddle
parameter_list|()
throws|throws
name|IOException
block|{
name|FSImageTransactionalStorageInspector
name|inspector
init|=
operator|new
name|FSImageTransactionalStorageInspector
argument_list|()
decl_stmt|;
name|StorageDirectory
name|mockDir
init|=
name|mockDirectory
argument_list|(
name|NameNodeDirType
operator|.
name|IMAGE_AND_EDITS
argument_list|,
literal|false
argument_list|,
literal|"/foo/current/"
operator|+
name|getImageFileName
argument_list|(
literal|123
argument_list|)
argument_list|,
literal|"/foo/current/"
operator|+
name|getImageFileName
argument_list|(
literal|456
argument_list|)
argument_list|,
literal|"/foo/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|457
argument_list|,
literal|900
argument_list|)
argument_list|,
literal|"/foo/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|901
argument_list|)
argument_list|,
comment|//<-- inprogress in middle
literal|"/foo/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|952
argument_list|,
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDir
argument_list|)
expr_stmt|;
name|mockLogValidation
argument_list|(
name|inspector
argument_list|,
literal|"/foo/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|901
argument_list|)
argument_list|,
literal|51
argument_list|)
expr_stmt|;
name|LoadPlan
name|plan
init|=
name|inspector
operator|.
name|createLoadPlan
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Plan: "
operator|+
name|plan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"/foo/current/"
operator|+
name|getImageFileName
argument_list|(
literal|456
argument_list|)
argument_list|)
argument_list|,
name|plan
operator|.
name|getImageFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|File
index|[]
block|{
operator|new
name|File
argument_list|(
literal|"/foo/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|457
argument_list|,
literal|900
argument_list|)
argument_list|)
block|,
operator|new
name|File
argument_list|(
literal|"/foo/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|901
argument_list|)
argument_list|)
block|,
operator|new
name|File
argument_list|(
literal|"/foo/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|952
argument_list|,
literal|1000
argument_list|)
argument_list|)
block|}
argument_list|,
name|plan
operator|.
name|getEditsFiles
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|File
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case for the usual case where no recovery of a log group is necessary    * (i.e all logs have the same start and end txids and finalized)    */
annotation|@
name|Test
DECL|method|testLogGroupRecoveryNoop ()
specifier|public
name|void
name|testLogGroupRecoveryNoop
parameter_list|()
throws|throws
name|IOException
block|{
name|FSImageTransactionalStorageInspector
name|inspector
init|=
operator|new
name|FSImageTransactionalStorageInspector
argument_list|()
decl_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDirectoryWithEditLogs
argument_list|(
literal|"/foo1/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|123
argument_list|,
literal|456
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDirectoryWithEditLogs
argument_list|(
literal|"/foo2/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|123
argument_list|,
literal|456
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDirectoryWithEditLogs
argument_list|(
literal|"/foo3/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|123
argument_list|,
literal|456
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LogGroup
name|lg
init|=
name|inspector
operator|.
name|logGroups
operator|.
name|get
argument_list|(
literal|123L
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|lg
operator|.
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|lg
operator|.
name|planRecovery
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|lg
operator|.
name|logs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lg
operator|.
name|logs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lg
operator|.
name|logs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case where we have some in-progress and some finalized logs    * for a given txid.    */
annotation|@
name|Test
DECL|method|testLogGroupRecoveryMixed ()
specifier|public
name|void
name|testLogGroupRecoveryMixed
parameter_list|()
throws|throws
name|IOException
block|{
name|FSImageTransactionalStorageInspector
name|inspector
init|=
operator|new
name|FSImageTransactionalStorageInspector
argument_list|()
decl_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDirectoryWithEditLogs
argument_list|(
literal|"/foo1/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|123
argument_list|,
literal|456
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDirectoryWithEditLogs
argument_list|(
literal|"/foo2/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|123
argument_list|,
literal|456
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDirectoryWithEditLogs
argument_list|(
literal|"/foo3/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|123
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDirectory
argument_list|(
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|,
literal|false
argument_list|,
literal|"/foo4/current/"
operator|+
name|getImageFileName
argument_list|(
literal|122
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LogGroup
name|lg
init|=
name|inspector
operator|.
name|logGroups
operator|.
name|get
argument_list|(
literal|123L
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|lg
operator|.
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FoundEditLog
name|inProgressLog
init|=
name|lg
operator|.
name|logs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|inProgressLog
operator|.
name|isInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|LoadPlan
name|plan
init|=
name|inspector
operator|.
name|createLoadPlan
argument_list|()
decl_stmt|;
comment|// Check that it was marked corrupt.
name|assertFalse
argument_list|(
name|lg
operator|.
name|logs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lg
operator|.
name|logs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lg
operator|.
name|logs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Calling recover should move it aside
name|inProgressLog
operator|=
name|spy
argument_list|(
name|inProgressLog
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|inProgressLog
argument_list|)
operator|.
name|moveAsideCorruptFile
argument_list|()
expr_stmt|;
name|lg
operator|.
name|logs
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|inProgressLog
argument_list|)
expr_stmt|;
name|plan
operator|.
name|doRecovery
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|inProgressLog
argument_list|)
operator|.
name|moveAsideCorruptFile
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test case where we have finalized logs with different end txids    */
annotation|@
name|Test
DECL|method|testLogGroupRecoveryInconsistentEndTxIds ()
specifier|public
name|void
name|testLogGroupRecoveryInconsistentEndTxIds
parameter_list|()
throws|throws
name|IOException
block|{
name|FSImageTransactionalStorageInspector
name|inspector
init|=
operator|new
name|FSImageTransactionalStorageInspector
argument_list|()
decl_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDirectoryWithEditLogs
argument_list|(
literal|"/foo1/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|123
argument_list|,
literal|456
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDirectoryWithEditLogs
argument_list|(
literal|"/foo2/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|123
argument_list|,
literal|678
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LogGroup
name|lg
init|=
name|inspector
operator|.
name|logGroups
operator|.
name|get
argument_list|(
literal|123L
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|lg
operator|.
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|lg
operator|.
name|planRecovery
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't throw IOE on inconsistent end txids"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"More than one ending txid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test case where we have only in-progress logs and need to synchronize    * based on valid length.    */
annotation|@
name|Test
DECL|method|testLogGroupRecoveryInProgress ()
specifier|public
name|void
name|testLogGroupRecoveryInProgress
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|paths
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"/foo1/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|123
argument_list|)
block|,
literal|"/foo2/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|123
argument_list|)
block|,
literal|"/foo3/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|123
argument_list|)
block|}
decl_stmt|;
name|FSImageTransactionalStorageInspector
name|inspector
init|=
operator|new
name|FSImageTransactionalStorageInspector
argument_list|()
decl_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDirectoryWithEditLogs
argument_list|(
name|paths
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDirectoryWithEditLogs
argument_list|(
name|paths
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDirectoryWithEditLogs
argument_list|(
name|paths
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Inject spies to return the valid counts we would like to see
name|mockLogValidation
argument_list|(
name|inspector
argument_list|,
name|paths
index|[
literal|0
index|]
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|mockLogValidation
argument_list|(
name|inspector
argument_list|,
name|paths
index|[
literal|1
index|]
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|mockLogValidation
argument_list|(
name|inspector
argument_list|,
name|paths
index|[
literal|2
index|]
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|LogGroup
name|lg
init|=
name|inspector
operator|.
name|logGroups
operator|.
name|get
argument_list|(
literal|123L
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|lg
operator|.
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|lg
operator|.
name|planRecovery
argument_list|()
expr_stmt|;
comment|// Check that the short one was marked corrupt
name|assertFalse
argument_list|(
name|lg
operator|.
name|logs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lg
operator|.
name|logs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lg
operator|.
name|logs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Calling recover should move it aside
name|FoundEditLog
name|badLog
init|=
name|lg
operator|.
name|logs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|badLog
argument_list|)
operator|.
name|moveAsideCorruptFile
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|lg
operator|.
name|logs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|finalizeLog
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|lg
operator|.
name|logs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|finalizeLog
argument_list|()
expr_stmt|;
name|lg
operator|.
name|recover
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|badLog
argument_list|)
operator|.
name|moveAsideCorruptFile
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|lg
operator|.
name|logs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|finalizeLog
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|lg
operator|.
name|logs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|finalizeLog
argument_list|()
expr_stmt|;
block|}
comment|/**    * Mock out the log at the given path to return a specified number    * of transactions upon validation.    */
DECL|method|mockLogValidation ( FSImageTransactionalStorageInspector inspector, String path, int numValidTransactions)
specifier|private
name|void
name|mockLogValidation
parameter_list|(
name|FSImageTransactionalStorageInspector
name|inspector
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|numValidTransactions
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|LogGroup
name|lg
range|:
name|inspector
operator|.
name|logGroups
operator|.
name|values
argument_list|()
control|)
block|{
name|List
argument_list|<
name|FoundEditLog
argument_list|>
name|logs
init|=
name|lg
operator|.
name|logs
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|logs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FoundEditLog
name|log
init|=
name|logs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// mock out its validation
name|FoundEditLog
name|spyLog
init|=
name|spy
argument_list|(
name|log
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
operator|new
name|FSEditLogLoader
operator|.
name|EditLogValidation
argument_list|(
operator|-
literal|1
argument_list|,
name|numValidTransactions
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyLog
argument_list|)
operator|.
name|validateLog
argument_list|()
expr_stmt|;
name|logs
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|spyLog
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|fail
argument_list|(
literal|"No log found to mock out at "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test when edits and image are in separate directories.    */
annotation|@
name|Test
DECL|method|testCurrentSplitEditsAndImage ()
specifier|public
name|void
name|testCurrentSplitEditsAndImage
parameter_list|()
throws|throws
name|IOException
block|{
name|FSImageTransactionalStorageInspector
name|inspector
init|=
operator|new
name|FSImageTransactionalStorageInspector
argument_list|()
decl_stmt|;
name|StorageDirectory
name|mockImageDir
init|=
name|mockDirectory
argument_list|(
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|,
literal|false
argument_list|,
literal|"/foo/current/"
operator|+
name|getImageFileName
argument_list|(
literal|123
argument_list|)
argument_list|)
decl_stmt|;
name|StorageDirectory
name|mockImageDir2
init|=
name|mockDirectory
argument_list|(
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|,
literal|false
argument_list|,
literal|"/foo2/current/"
operator|+
name|getImageFileName
argument_list|(
literal|456
argument_list|)
argument_list|)
decl_stmt|;
name|StorageDirectory
name|mockEditsDir
init|=
name|mockDirectory
argument_list|(
name|NameNodeDirType
operator|.
name|EDITS
argument_list|,
literal|false
argument_list|,
literal|"/foo3/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|123
argument_list|,
literal|456
argument_list|)
argument_list|,
literal|"/foo3/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|457
argument_list|)
argument_list|)
decl_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockImageDir
argument_list|)
expr_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockEditsDir
argument_list|)
expr_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockImageDir2
argument_list|)
expr_stmt|;
name|mockLogValidation
argument_list|(
name|inspector
argument_list|,
literal|"/foo3/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|457
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|inspector
operator|.
name|foundEditLogs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|inspector
operator|.
name|foundImages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inspector
operator|.
name|foundEditLogs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inspector
operator|.
name|isUpgradeFinalized
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check plan
name|TransactionalLoadPlan
name|plan
init|=
operator|(
name|TransactionalLoadPlan
operator|)
name|inspector
operator|.
name|createLoadPlan
argument_list|()
decl_stmt|;
name|FoundFSImage
name|pickedImage
init|=
name|plan
operator|.
name|image
decl_stmt|;
name|assertEquals
argument_list|(
literal|456
argument_list|,
name|pickedImage
operator|.
name|txId
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|mockImageDir2
argument_list|,
name|pickedImage
operator|.
name|sd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"/foo2/current/"
operator|+
name|getImageFileName
argument_list|(
literal|456
argument_list|)
argument_list|)
argument_list|,
name|plan
operator|.
name|getImageFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|File
index|[]
block|{
operator|new
name|File
argument_list|(
literal|"/foo3/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|457
argument_list|)
argument_list|)
block|}
argument_list|,
name|plan
operator|.
name|getEditsFiles
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|File
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check log manifest
name|assertEquals
argument_list|(
literal|"[[123,456]]"
argument_list|,
name|inspector
operator|.
name|getEditLogManifest
argument_list|(
literal|123
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[[123,456]]"
argument_list|,
name|inspector
operator|.
name|getEditLogManifest
argument_list|(
literal|456
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[]"
argument_list|,
name|inspector
operator|.
name|getEditLogManifest
argument_list|(
literal|457
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLogManifest ()
specifier|public
name|void
name|testLogManifest
parameter_list|()
throws|throws
name|IOException
block|{
name|FSImageTransactionalStorageInspector
name|inspector
init|=
operator|new
name|FSImageTransactionalStorageInspector
argument_list|()
decl_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDirectoryWithEditLogs
argument_list|(
literal|"/foo1/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"/foo1/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|2
argument_list|,
literal|200
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDirectoryWithEditLogs
argument_list|(
literal|"/foo2/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"/foo2/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|201
argument_list|,
literal|400
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDirectoryWithEditLogs
argument_list|(
literal|"/foo3/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"/foo3/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|2
argument_list|,
literal|200
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[[1,1], [2,200], [201,400]]"
argument_list|,
name|inspector
operator|.
name|getEditLogManifest
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[[2,200], [201,400]]"
argument_list|,
name|inspector
operator|.
name|getEditLogManifest
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[[2,200], [201,400]]"
argument_list|,
name|inspector
operator|.
name|getEditLogManifest
argument_list|(
literal|10
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[[201,400]]"
argument_list|,
name|inspector
operator|.
name|getEditLogManifest
argument_list|(
literal|201
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case where an in-progress log is in an earlier name directory    * than a finalized log. Previously, getEditLogManifest wouldn't    * see this log.    */
annotation|@
name|Test
DECL|method|testLogManifestInProgressComesFirst ()
specifier|public
name|void
name|testLogManifestInProgressComesFirst
parameter_list|()
throws|throws
name|IOException
block|{
name|FSImageTransactionalStorageInspector
name|inspector
init|=
operator|new
name|FSImageTransactionalStorageInspector
argument_list|()
decl_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDirectoryWithEditLogs
argument_list|(
literal|"/foo1/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|2622
argument_list|,
literal|2623
argument_list|)
argument_list|,
literal|"/foo1/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|2624
argument_list|,
literal|2625
argument_list|)
argument_list|,
literal|"/foo1/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|2626
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|mockDirectoryWithEditLogs
argument_list|(
literal|"/foo2/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|2622
argument_list|,
literal|2623
argument_list|)
argument_list|,
literal|"/foo2/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|2624
argument_list|,
literal|2625
argument_list|)
argument_list|,
literal|"/foo2/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|2626
argument_list|,
literal|2627
argument_list|)
argument_list|,
literal|"/foo2/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|2628
argument_list|,
literal|2629
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[[2622,2623], [2624,2625], [2626,2627], [2628,2629]]"
argument_list|,
name|inspector
operator|.
name|getEditLogManifest
argument_list|(
literal|2621
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|mockDirectoryWithEditLogs (String... fileNames)
specifier|private
name|StorageDirectory
name|mockDirectoryWithEditLogs
parameter_list|(
name|String
modifier|...
name|fileNames
parameter_list|)
block|{
return|return
name|mockDirectory
argument_list|(
name|NameNodeDirType
operator|.
name|EDITS
argument_list|,
literal|false
argument_list|,
name|fileNames
argument_list|)
return|;
block|}
comment|/**    * Make a mock storage directory that returns some set of file contents.    * @param type type of storage dir    * @param previousExists should we mock that the previous/ dir exists?    * @param fileNames the names of files contained in current/    */
DECL|method|mockDirectory ( StorageDirType type, boolean previousExists, String... fileNames)
specifier|static
name|StorageDirectory
name|mockDirectory
parameter_list|(
name|StorageDirType
name|type
parameter_list|,
name|boolean
name|previousExists
parameter_list|,
name|String
modifier|...
name|fileNames
parameter_list|)
block|{
name|StorageDirectory
name|sd
init|=
name|mock
argument_list|(
name|StorageDirectory
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|type
argument_list|)
operator|.
name|when
argument_list|(
name|sd
argument_list|)
operator|.
name|getStorageDirType
argument_list|()
expr_stmt|;
comment|// Version file should always exist
name|doReturn
argument_list|(
name|FSImageTestUtil
operator|.
name|mockFile
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|sd
argument_list|)
operator|.
name|getVersionFile
argument_list|()
expr_stmt|;
comment|// Previous dir optionally exists
name|doReturn
argument_list|(
name|FSImageTestUtil
operator|.
name|mockFile
argument_list|(
name|previousExists
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|sd
argument_list|)
operator|.
name|getPreviousDir
argument_list|()
expr_stmt|;
comment|// Return a mock 'current' directory which has the given paths
name|File
index|[]
name|files
init|=
operator|new
name|File
index|[
name|fileNames
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|files
index|[
name|i
index|]
operator|=
operator|new
name|File
argument_list|(
name|fileNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|File
name|mockDir
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|new
name|File
argument_list|(
literal|"/dir/current"
argument_list|)
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|files
argument_list|)
operator|.
name|when
argument_list|(
name|mockDir
argument_list|)
operator|.
name|listFiles
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|mockDir
argument_list|)
operator|.
name|when
argument_list|(
name|sd
argument_list|)
operator|.
name|getCurrentDir
argument_list|()
expr_stmt|;
return|return
name|sd
return|;
block|}
block|}
end_class

end_unit

