begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FSDataset
operator|.
name|FSVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskOutOfSpaceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestRoundRobinVolumesPolicy
specifier|public
class|class
name|TestRoundRobinVolumesPolicy
block|{
comment|// Test the Round-Robin block-volume choosing algorithm.
annotation|@
name|Test
DECL|method|testRR ()
specifier|public
name|void
name|testRR
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|FSVolume
argument_list|>
name|volumes
init|=
operator|new
name|ArrayList
argument_list|<
name|FSVolume
argument_list|>
argument_list|()
decl_stmt|;
comment|// First volume, with 100 bytes of space.
name|volumes
operator|.
name|add
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|FSVolume
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAvailable
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
comment|// Second volume, with 200 bytes of space.
name|volumes
operator|.
name|add
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|FSVolume
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAvailable
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200L
argument_list|)
expr_stmt|;
name|RoundRobinVolumesPolicy
name|policy
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|RoundRobinVolumesPolicy
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Test two rounds of round-robin choosing
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|policy
operator|.
name|chooseVolume
argument_list|(
name|volumes
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|policy
operator|.
name|chooseVolume
argument_list|(
name|volumes
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|policy
operator|.
name|chooseVolume
argument_list|(
name|volumes
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|policy
operator|.
name|chooseVolume
argument_list|(
name|volumes
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// The first volume has only 100L space, so the policy should
comment|// wisely choose the second one in case we ask for more.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|policy
operator|.
name|chooseVolume
argument_list|(
name|volumes
argument_list|,
literal|150
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fail if no volume can be chosen?
try|try
block|{
name|policy
operator|.
name|chooseVolume
argument_list|(
name|volumes
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Passed.
block|}
block|}
comment|// ChooseVolume should throw DiskOutOfSpaceException with volume and block sizes in exception message.
annotation|@
name|Test
DECL|method|testRRPolicyExceptionMessage ()
specifier|public
name|void
name|testRRPolicyExceptionMessage
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|FSVolume
argument_list|>
name|volumes
init|=
operator|new
name|ArrayList
argument_list|<
name|FSVolume
argument_list|>
argument_list|()
decl_stmt|;
comment|// First volume, with 500 bytes of space.
name|volumes
operator|.
name|add
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|FSVolume
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAvailable
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|500L
argument_list|)
expr_stmt|;
comment|// Second volume, with 600 bytes of space.
name|volumes
operator|.
name|add
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|FSVolume
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAvailable
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|600L
argument_list|)
expr_stmt|;
name|RoundRobinVolumesPolicy
name|policy
init|=
operator|new
name|RoundRobinVolumesPolicy
argument_list|()
decl_stmt|;
name|int
name|blockSize
init|=
literal|700
decl_stmt|;
try|try
block|{
name|policy
operator|.
name|chooseVolume
argument_list|(
name|volumes
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected to throw DiskOutOfSpaceException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DiskOutOfSpaceException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Not returnig the expected message"
argument_list|,
literal|"Insufficient space for an additional block. Volume with the most available space has 600 bytes free, configured block size is "
operator|+
name|blockSize
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

