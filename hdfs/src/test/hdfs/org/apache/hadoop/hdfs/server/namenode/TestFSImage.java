begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFSImage
specifier|public
class|class
name|TestFSImage
block|{
DECL|field|OUT_DIR
specifier|private
specifier|static
specifier|final
name|String
name|OUT_DIR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/fsimage"
argument_list|)
decl_stmt|;
DECL|field|miniDFSCluster
specifier|private
name|MiniDFSCluster
name|miniDFSCluster
init|=
literal|null
decl_stmt|;
DECL|field|nnConf
specifier|private
specifier|static
name|Configuration
name|nnConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|current
specifier|private
name|File
name|current
init|=
operator|new
name|File
argument_list|(
name|OUT_DIR
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUpCluster ()
specifier|public
name|void
name|setUpCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|clearDirs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|clusterShutdown ()
specifier|public
name|void
name|clusterShutdown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
literal|null
operator|!=
name|miniDFSCluster
condition|)
block|{
name|miniDFSCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLoadFsEditsShouldReturnTrueWhenEditsNewExists ()
specifier|public
name|void
name|testLoadFsEditsShouldReturnTrueWhenEditsNewExists
parameter_list|()
throws|throws
name|Exception
block|{
name|nnConf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|OUT_DIR
operator|+
literal|"/BNN1"
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|format
argument_list|(
name|nnConf
argument_list|)
expr_stmt|;
name|miniDFSCluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|nnConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FSImage
name|image
init|=
name|miniDFSCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|URI
name|next
init|=
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|miniDFSCluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|editsNew
init|=
operator|new
name|File
argument_list|(
name|next
operator|.
name|getRawPath
argument_list|()
argument_list|,
literal|"/current/edits.new"
argument_list|)
decl_stmt|;
name|createEditsNew
argument_list|(
name|editsNew
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|int
name|loadFSEdits
init|=
name|image
operator|.
name|loadFSEdits
argument_list|(
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageDir
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The numEdits should not be zero."
argument_list|,
literal|1
argument_list|,
name|loadFSEdits
argument_list|)
expr_stmt|;
block|}
DECL|method|createEditsNew (File editsNew, FSImage image)
specifier|private
name|void
name|createEditsNew
parameter_list|(
name|File
name|editsNew
parameter_list|,
name|FSImage
name|image
parameter_list|)
throws|throws
name|Exception
block|{
name|FileOutputStream
name|fileOutputStream
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|editsNew
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|editsNew
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|image
operator|.
name|editLog
operator|.
name|createEditLogFile
argument_list|(
name|editsNew
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fileOutputStream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|clearDirs ()
specifier|private
name|void
name|clearDirs
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|current
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

