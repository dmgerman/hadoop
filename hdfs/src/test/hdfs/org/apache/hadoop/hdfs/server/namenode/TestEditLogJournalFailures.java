begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestEditLogJournalFailures
specifier|public
class|class
name|TestEditLogJournalFailures
block|{
DECL|field|editsPerformed
specifier|private
name|int
name|editsPerformed
init|=
literal|0
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|runtime
specifier|private
name|Runtime
name|runtime
decl_stmt|;
comment|/**    * Create the mini cluster for testing and sub in a custom runtime so that    * edit log journal failures don't actually cause the JVM to exit.    */
annotation|@
name|Before
DECL|method|setUpMiniCluster ()
specifier|public
name|void
name|setUpMiniCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|runtime
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
expr_stmt|;
name|runtime
operator|=
name|spy
argument_list|(
name|runtime
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|runtime
argument_list|)
operator|.
name|exit
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getFSImage
argument_list|()
operator|.
name|getEditLog
argument_list|()
operator|.
name|setRuntimeForTesting
argument_list|(
name|runtime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutDownMiniCluster ()
specifier|public
name|void
name|shutDownMiniCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleFailedEditsDirOnFlush ()
specifier|public
name|void
name|testSingleFailedEditsDirOnFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|doAnEdit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Invalidate one edits journal.
name|invalidateEditsDirAtIndex
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Make sure runtime.exit(...) hasn't been called at all yet.
name|assertExitInvocations
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doAnEdit
argument_list|()
argument_list|)
expr_stmt|;
comment|// A single journal failure should not result in a call to runtime.exit(...).
name|assertExitInvocations
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllEditsDirsFailOnFlush ()
specifier|public
name|void
name|testAllEditsDirsFailOnFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|doAnEdit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Invalidate both edits journals.
name|invalidateEditsDirAtIndex
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|invalidateEditsDirAtIndex
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Make sure runtime.exit(...) hasn't been called at all yet.
name|assertExitInvocations
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doAnEdit
argument_list|()
argument_list|)
expr_stmt|;
comment|// The previous edit could not be synced to any persistent storage, should
comment|// have halted the NN.
name|assertExitInvocations
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleFailedEditsDirOnSetReadyToFlush ()
specifier|public
name|void
name|testSingleFailedEditsDirOnSetReadyToFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|doAnEdit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Invalidate one edits journal.
name|invalidateEditsDirAtIndex
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Make sure runtime.exit(...) hasn't been called at all yet.
name|assertExitInvocations
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doAnEdit
argument_list|()
argument_list|)
expr_stmt|;
comment|// A single journal failure should not result in a call to runtime.exit(...).
name|assertExitInvocations
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replace the journal at index<code>index</code> with one that throws an    * exception on flush.    *     * @param index the index of the journal to take offline.    * @return the original<code>EditLogOutputStream</code> of the journal.    */
DECL|method|invalidateEditsDirAtIndex (int index, boolean failOnFlush)
specifier|private
name|EditLogOutputStream
name|invalidateEditsDirAtIndex
parameter_list|(
name|int
name|index
parameter_list|,
name|boolean
name|failOnFlush
parameter_list|)
throws|throws
name|IOException
block|{
name|FSImage
name|fsimage
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|FSEditLog
name|editLog
init|=
name|fsimage
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
name|FSEditLog
operator|.
name|JournalAndStream
name|jas
init|=
name|editLog
operator|.
name|getJournals
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|EditLogFileOutputStream
name|elos
init|=
operator|(
name|EditLogFileOutputStream
operator|)
name|jas
operator|.
name|getCurrentStream
argument_list|()
decl_stmt|;
name|EditLogFileOutputStream
name|spyElos
init|=
name|spy
argument_list|(
name|elos
argument_list|)
decl_stmt|;
if|if
condition|(
name|failOnFlush
condition|)
block|{
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"fail on flush()"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyElos
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"fail on setReadyToFlush()"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyElos
argument_list|)
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
block|}
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|spyElos
argument_list|)
operator|.
name|abort
argument_list|()
expr_stmt|;
name|jas
operator|.
name|setCurrentStreamForTests
argument_list|(
name|spyElos
argument_list|)
expr_stmt|;
return|return
name|elos
return|;
block|}
comment|/**    * Restore the journal at index<code>index</code> with the passed    * {@link EditLogOutputStream}.    *     * @param index index of the journal to restore.    * @param elos the {@link EditLogOutputStream} to put at that index.    */
DECL|method|restoreEditsDirAtIndex (int index, EditLogOutputStream elos)
specifier|private
name|void
name|restoreEditsDirAtIndex
parameter_list|(
name|int
name|index
parameter_list|,
name|EditLogOutputStream
name|elos
parameter_list|)
block|{
name|FSImage
name|fsimage
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|FSEditLog
name|editLog
init|=
name|fsimage
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
name|FSEditLog
operator|.
name|JournalAndStream
name|jas
init|=
name|editLog
operator|.
name|getJournals
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|jas
operator|.
name|setCurrentStreamForTests
argument_list|(
name|elos
argument_list|)
expr_stmt|;
block|}
comment|/**    * Do a mutative metadata operation on the file system.    *     * @return true if the operation was successful, false otherwise.    */
DECL|method|doAnEdit ()
specifier|private
name|boolean
name|doAnEdit
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|editsPerformed
operator|++
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Make sure that Runtime.exit(...) has been called    *<code>expectedExits<code> number of times.    *     * @param expectedExits the number of times Runtime.exit(...) should have been called.    */
DECL|method|assertExitInvocations (int expectedExits)
specifier|private
name|void
name|assertExitInvocations
parameter_list|(
name|int
name|expectedExits
parameter_list|)
block|{
name|verify
argument_list|(
name|runtime
argument_list|,
name|times
argument_list|(
name|expectedExits
argument_list|)
argument_list|)
operator|.
name|exit
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

