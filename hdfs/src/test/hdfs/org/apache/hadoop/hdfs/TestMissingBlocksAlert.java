begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_comment
comment|/**  * The test makes sure that NameNode detects presense blocks that do not have  * any valid replicas. In addition, it verifies that HDFS front page displays  * a warning in such a case.  */
end_comment

begin_class
DECL|class|TestMissingBlocksAlert
specifier|public
class|class
name|TestMissingBlocksAlert
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMissingBlocksAlert
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|testMissingBlocksAlert ()
specifier|public
name|void
name|testMissingBlocksAlert
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|//minimize test delay
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_INTERVAL_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|fileLen
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|fileLen
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|//start a cluster with single datanode
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// create a normal file
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/testMissingBlocksAlert/file1"
argument_list|)
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Path
name|corruptFile
init|=
operator|new
name|Path
argument_list|(
literal|"/testMissingBlocks/corruptFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|corruptFile
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Corrupt the block
name|ExtendedBlock
name|block
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|dfs
argument_list|,
name|corruptFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TestDatanodeBlockScanner
operator|.
name|corruptReplica
argument_list|(
name|block
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// read the file so that the corrupt block is reported to NN
name|FSDataInputStream
name|in
init|=
name|dfs
operator|.
name|open
argument_list|(
name|corruptFile
argument_list|)
decl_stmt|;
try|try
block|{
name|in
operator|.
name|readFully
argument_list|(
operator|new
name|byte
index|[
name|fileLen
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ChecksumException
name|ignored
parameter_list|)
block|{
comment|// checksum error is expected.
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for missing blocks count to increase..."
argument_list|)
expr_stmt|;
while|while
condition|(
name|dfs
operator|.
name|getMissingBlocksCount
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|dfs
operator|.
name|getMissingBlocksCount
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|dfs
operator|.
name|getUnderReplicatedBlocksCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getUnderReplicatedNotMissingBlocks
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now verify that it shows up on webui
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://"
operator|+
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|)
operator|+
literal|"/dfshealth.jsp"
argument_list|)
decl_stmt|;
name|String
name|dfsFrontPage
init|=
name|DFSTestUtil
operator|.
name|urlGet
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|String
name|warnStr
init|=
literal|"WARNING : There are "
decl_stmt|;
name|assertTrue
argument_list|(
literal|"HDFS Front page does not contain expected warning"
argument_list|,
name|dfsFrontPage
operator|.
name|contains
argument_list|(
name|warnStr
operator|+
literal|"1 missing blocks"
argument_list|)
argument_list|)
expr_stmt|;
comment|// now do the reverse : remove the file expect the number of missing
comment|// blocks to go to zero
name|dfs
operator|.
name|delete
argument_list|(
name|corruptFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for missing blocks count to be zero..."
argument_list|)
expr_stmt|;
while|while
condition|(
name|dfs
operator|.
name|getMissingBlocksCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dfs
operator|.
name|getUnderReplicatedBlocksCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getUnderReplicatedNotMissingBlocks
argument_list|()
argument_list|)
expr_stmt|;
comment|// and make sure WARNING disappears
comment|// Now verify that it shows up on webui
name|dfsFrontPage
operator|=
name|DFSTestUtil
operator|.
name|urlGet
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"HDFS Front page contains unexpected warning"
argument_list|,
name|dfsFrontPage
operator|.
name|contains
argument_list|(
name|warnStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

