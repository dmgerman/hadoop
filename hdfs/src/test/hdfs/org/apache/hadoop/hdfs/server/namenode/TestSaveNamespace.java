begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Util
operator|.
name|fileAsURI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_comment
comment|/**  * Test various failure scenarios during saveNamespace() operation.  * Cases covered:  *<ol>  *<li>Recover from failure while saving into the second storage directory</li>  *<li>Recover from failure while moving current into lastcheckpoint.tmp</li>  *<li>Recover from failure while moving lastcheckpoint.tmp into  * previous.checkpoint</li>  *<li>Recover from failure while rolling edits file</li>  *</ol>  */
end_comment

begin_class
DECL|class|TestSaveNamespace
specifier|public
class|class
name|TestSaveNamespace
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSaveNamespace
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|FaultySaveImage
specifier|private
specifier|static
class|class
name|FaultySaveImage
implements|implements
name|Answer
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|count
name|int
name|count
init|=
literal|0
decl_stmt|;
DECL|field|exceptionType
name|boolean
name|exceptionType
init|=
literal|true
decl_stmt|;
comment|// generate a RuntimeException
DECL|method|FaultySaveImage ()
specifier|public
name|FaultySaveImage
parameter_list|()
block|{
name|this
operator|.
name|exceptionType
operator|=
literal|true
expr_stmt|;
block|}
comment|// generate either a RuntimeException or IOException
DECL|method|FaultySaveImage (boolean etype)
specifier|public
name|FaultySaveImage
parameter_list|(
name|boolean
name|etype
parameter_list|)
block|{
name|this
operator|.
name|exceptionType
operator|=
name|etype
expr_stmt|;
block|}
DECL|method|answer (InvocationOnMock invocation)
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|File
name|f
init|=
operator|(
name|File
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|count
operator|++
operator|==
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Injecting fault for file: "
operator|+
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|exceptionType
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Injected fault: saveFSImage second time"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Injected fault: saveFSImage second time"
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Not injecting fault for file: "
operator|+
name|f
argument_list|)
expr_stmt|;
return|return
operator|(
name|Void
operator|)
name|invocation
operator|.
name|callRealMethod
argument_list|()
return|;
block|}
block|}
DECL|enum|Fault
specifier|private
enum|enum
name|Fault
block|{
DECL|enumConstant|SAVE_FSIMAGE
name|SAVE_FSIMAGE
block|,
DECL|enumConstant|MOVE_CURRENT
name|MOVE_CURRENT
block|,
DECL|enumConstant|MOVE_LAST_CHECKPOINT
name|MOVE_LAST_CHECKPOINT
block|}
empty_stmt|;
DECL|method|saveNamespaceWithInjectedFault (Fault fault)
specifier|private
name|void
name|saveNamespaceWithInjectedFault
parameter_list|(
name|Fault
name|fault
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|NameNode
operator|.
name|initMetrics
argument_list|(
name|conf
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
operator|new
name|FSNamesystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Replace the FSImage with a spy
name|FSImage
name|originalImage
init|=
name|fsn
operator|.
name|dir
operator|.
name|fsImage
decl_stmt|;
name|NNStorage
name|storage
init|=
name|originalImage
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|storage
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// unlock any directories that FSNamesystem's initialization may have locked
name|NNStorage
name|spyStorage
init|=
name|spy
argument_list|(
name|storage
argument_list|)
decl_stmt|;
name|originalImage
operator|.
name|storage
operator|=
name|spyStorage
expr_stmt|;
name|FSImage
name|spyImage
init|=
name|spy
argument_list|(
name|originalImage
argument_list|)
decl_stmt|;
name|fsn
operator|.
name|dir
operator|.
name|fsImage
operator|=
name|spyImage
expr_stmt|;
name|spyImage
operator|.
name|getStorage
argument_list|()
operator|.
name|setStorageDirectories
argument_list|(
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|conf
argument_list|)
argument_list|,
name|FSNamesystem
operator|.
name|getNamespaceEditsDirs
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject fault
switch|switch
condition|(
name|fault
condition|)
block|{
case|case
name|SAVE_FSIMAGE
case|:
comment|// The spy throws a RuntimeException when writing to the second directory
name|doAnswer
argument_list|(
operator|new
name|FaultySaveImage
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|spyImage
argument_list|)
operator|.
name|saveFSImage
argument_list|(
operator|(
name|File
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MOVE_CURRENT
case|:
comment|// The spy throws a RuntimeException when calling moveCurrent()
name|doThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"Injected fault: moveCurrent"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyStorage
argument_list|)
operator|.
name|moveCurrent
argument_list|(
operator|(
name|StorageDirectory
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MOVE_LAST_CHECKPOINT
case|:
comment|// The spy throws a RuntimeException when calling moveLastCheckpoint()
name|doThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"Injected fault: moveLastCheckpoint"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyStorage
argument_list|)
operator|.
name|moveLastCheckpoint
argument_list|(
operator|(
name|StorageDirectory
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
try|try
block|{
name|doAnEdit
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Save namespace - this will fail because we inject a fault.
name|fsn
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
try|try
block|{
name|fsn
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test caught expected exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Now shut down and restart the namesystem
name|originalImage
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsn
operator|=
literal|null
expr_stmt|;
comment|// Start a new namesystem, which should be able to recover
comment|// the namespace from the previous incarnation.
name|fsn
operator|=
operator|new
name|FSNamesystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Make sure the image loaded including our edit.
name|checkEditExists
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fsn
operator|!=
literal|null
condition|)
block|{
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Verify that a saveNamespace command brings faulty directories    * in fs.name.dir and fs.edit.dir back online.    */
annotation|@
name|Test
DECL|method|testReinsertnamedirsInSavenamespace ()
specifier|public
name|void
name|testReinsertnamedirsInSavenamespace
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a configuration with the key to restore error
comment|// directories in fs.name.dir
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_RESTORE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|initMetrics
argument_list|(
name|conf
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
operator|new
name|FSNamesystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Replace the FSImage with a spy
name|FSImage
name|originalImage
init|=
name|fsn
operator|.
name|dir
operator|.
name|fsImage
decl_stmt|;
name|NNStorage
name|storage
init|=
name|originalImage
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|storage
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// unlock any directories that FSNamesystem's initialization may have locked
name|NNStorage
name|spyStorage
init|=
name|spy
argument_list|(
name|storage
argument_list|)
decl_stmt|;
name|originalImage
operator|.
name|storage
operator|=
name|spyStorage
expr_stmt|;
name|FSImage
name|spyImage
init|=
name|spy
argument_list|(
name|originalImage
argument_list|)
decl_stmt|;
name|fsn
operator|.
name|dir
operator|.
name|fsImage
operator|=
name|spyImage
expr_stmt|;
name|spyImage
operator|.
name|getStorage
argument_list|()
operator|.
name|setStorageDirectories
argument_list|(
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|conf
argument_list|)
argument_list|,
name|FSNamesystem
operator|.
name|getNamespaceEditsDirs
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject fault
comment|// The spy throws a IOException when writing to the second directory
name|doAnswer
argument_list|(
operator|new
name|FaultySaveImage
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyImage
argument_list|)
operator|.
name|saveFSImage
argument_list|(
operator|(
name|File
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|doAnEdit
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
comment|// Save namespace - this  injects a fault and marks one
comment|// directory as faulty.
name|LOG
operator|.
name|info
argument_list|(
literal|"Doing the first savenamespace."
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"First savenamespace sucessful."
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Savenamespace should have marked one directory as bad."
operator|+
literal|" But found "
operator|+
name|spyStorage
operator|.
name|getRemovedStorageDirs
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" bad directories."
argument_list|,
name|spyStorage
operator|.
name|getRemovedStorageDirs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// The next call to savenamespace should try inserting the
comment|// erroneous directory back to fs.name.dir. This command should
comment|// be successful.
name|LOG
operator|.
name|info
argument_list|(
literal|"Doing the second savenamespace."
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Second savenamespace sucessful."
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Savenamespace should have been successful in removing "
operator|+
literal|" bad directories from Image."
operator|+
literal|" But found "
operator|+
name|storage
operator|.
name|getRemovedStorageDirs
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" bad directories."
argument_list|,
name|storage
operator|.
name|getRemovedStorageDirs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Now shut down and restart the namesystem
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down fsimage."
argument_list|)
expr_stmt|;
name|originalImage
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsn
operator|=
literal|null
expr_stmt|;
comment|// Start a new namesystem, which should be able to recover
comment|// the namespace from the previous incarnation.
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading new FSmage from disk."
argument_list|)
expr_stmt|;
name|fsn
operator|=
operator|new
name|FSNamesystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Make sure the image loaded including our edit.
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking reloaded image."
argument_list|)
expr_stmt|;
name|checkEditExists
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reloaded image is good."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fsn
operator|!=
literal|null
condition|)
block|{
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCrashWhileSavingSecondImage ()
specifier|public
name|void
name|testCrashWhileSavingSecondImage
parameter_list|()
throws|throws
name|Exception
block|{
name|saveNamespaceWithInjectedFault
argument_list|(
name|Fault
operator|.
name|SAVE_FSIMAGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCrashWhileMoveCurrent ()
specifier|public
name|void
name|testCrashWhileMoveCurrent
parameter_list|()
throws|throws
name|Exception
block|{
name|saveNamespaceWithInjectedFault
argument_list|(
name|Fault
operator|.
name|MOVE_CURRENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCrashWhileMoveLastCheckpoint ()
specifier|public
name|void
name|testCrashWhileMoveLastCheckpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|saveNamespaceWithInjectedFault
argument_list|(
name|Fault
operator|.
name|MOVE_LAST_CHECKPOINT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case where savenamespace fails in all directories    * and then the NN shuts down. Here we should recover from the    * failed checkpoint by moving the directories back on next    * NN start. This is a regression test for HDFS-1921.    */
annotation|@
name|Test
DECL|method|testFailedSaveNamespace ()
specifier|public
name|void
name|testFailedSaveNamespace
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFailedSaveNamespace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case where saveNamespace fails in all directories, but then    * the operator restores the directories and calls it again.    * This should leave the NN in a clean state for next start.    */
annotation|@
name|Test
DECL|method|testFailedSaveNamespaceWithRecovery ()
specifier|public
name|void
name|testFailedSaveNamespaceWithRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFailedSaveNamespace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Injects a failure on all storage directories while saving namespace.    *    * @param restoreStorageAfterFailure if true, will try to save again after    *   clearing the failure injection    */
DECL|method|doTestFailedSaveNamespace (boolean restoreStorageAfterFailure)
specifier|public
name|void
name|doTestFailedSaveNamespace
parameter_list|(
name|boolean
name|restoreStorageAfterFailure
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|NameNode
operator|.
name|initMetrics
argument_list|(
name|conf
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
operator|new
name|FSNamesystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Replace the FSImage with a spy
specifier|final
name|FSImage
name|originalImage
init|=
name|fsn
operator|.
name|dir
operator|.
name|fsImage
decl_stmt|;
name|NNStorage
name|storage
init|=
name|originalImage
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|storage
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// unlock any directories that FSNamesystem's initialization may have locked
name|NNStorage
name|spyStorage
init|=
name|spy
argument_list|(
name|storage
argument_list|)
decl_stmt|;
name|originalImage
operator|.
name|storage
operator|=
name|spyStorage
expr_stmt|;
name|FSImage
name|spyImage
init|=
name|spy
argument_list|(
name|originalImage
argument_list|)
decl_stmt|;
name|fsn
operator|.
name|dir
operator|.
name|fsImage
operator|=
name|spyImage
expr_stmt|;
name|spyImage
operator|.
name|storage
operator|.
name|setStorageDirectories
argument_list|(
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|conf
argument_list|)
argument_list|,
name|FSNamesystem
operator|.
name|getNamespaceEditsDirs
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Injected fault: saveFSImage"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyImage
argument_list|)
operator|.
name|saveFSImage
argument_list|(
operator|(
name|File
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|doAnEdit
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Save namespace
name|fsn
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
try|try
block|{
name|fsn
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"saveNamespace did not fail even when all directories failed!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// Ensure that, if storage dirs come back online, things work again.
if|if
condition|(
name|restoreStorageAfterFailure
condition|)
block|{
name|Mockito
operator|.
name|reset
argument_list|(
name|spyImage
argument_list|)
expr_stmt|;
name|spyStorage
operator|.
name|setRestoreFailedStorage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|checkEditExists
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Now shut down and restart the NN
name|originalImage
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsn
operator|=
literal|null
expr_stmt|;
comment|// Start a new namesystem, which should be able to recover
comment|// the namespace from the previous incarnation.
name|fsn
operator|=
operator|new
name|FSNamesystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Make sure the image loaded including our edits.
name|checkEditExists
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fsn
operator|!=
literal|null
condition|)
block|{
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSaveWhileEditsRolled ()
specifier|public
name|void
name|testSaveWhileEditsRolled
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|NameNode
operator|.
name|initMetrics
argument_list|(
name|conf
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
operator|new
name|FSNamesystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Replace the FSImage with a spy
specifier|final
name|FSImage
name|originalImage
init|=
name|fsn
operator|.
name|dir
operator|.
name|fsImage
decl_stmt|;
name|originalImage
operator|.
name|getStorage
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|FSImage
name|spyImage
init|=
name|spy
argument_list|(
name|originalImage
argument_list|)
decl_stmt|;
name|spyImage
operator|.
name|getStorage
argument_list|()
operator|.
name|setStorageDirectories
argument_list|(
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|conf
argument_list|)
argument_list|,
name|FSNamesystem
operator|.
name|getNamespaceEditsDirs
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|dir
operator|.
name|fsImage
operator|=
name|spyImage
expr_stmt|;
try|try
block|{
name|doAnEdit
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|CheckpointSignature
name|sig
init|=
name|fsn
operator|.
name|rollEditLog
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Checkpoint signature: "
operator|+
name|sig
argument_list|)
expr_stmt|;
comment|// Do another edit
name|doAnEdit
argument_list|(
name|fsn
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Save namespace
name|fsn
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
comment|// Now shut down and restart the NN
name|originalImage
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsn
operator|=
literal|null
expr_stmt|;
comment|// Start a new namesystem, which should be able to recover
comment|// the namespace from the previous incarnation.
name|fsn
operator|=
operator|new
name|FSNamesystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Make sure the image loaded including our edits.
name|checkEditExists
argument_list|(
name|fsn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkEditExists
argument_list|(
name|fsn
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fsn
operator|!=
literal|null
condition|)
block|{
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|doAnEdit (FSNamesystem fsn, int id)
specifier|private
name|void
name|doAnEdit
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|int
name|id
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Make an edit
name|fsn
operator|.
name|mkdirs
argument_list|(
literal|"/test"
operator|+
name|id
argument_list|,
operator|new
name|PermissionStatus
argument_list|(
literal|"test"
argument_list|,
literal|"Test"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|checkEditExists (FSNamesystem fsn, int id)
specifier|private
name|void
name|checkEditExists
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|int
name|id
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Make sure the image loaded including our edit.
name|assertNotNull
argument_list|(
name|fsn
operator|.
name|getFileInfo
argument_list|(
literal|"/test"
operator|+
name|id
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getConf ()
specifier|private
name|Configuration
name|getConf
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|baseDir
init|=
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
decl_stmt|;
name|String
name|nameDirs
init|=
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"name1"
argument_list|)
argument_list|)
operator|+
literal|","
operator|+
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"name2"
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
literal|"hdfs://localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameDirs
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|nameDirs
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

