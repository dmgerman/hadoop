begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsConstants
operator|.
name|StartupOption
operator|.
name|IMPORT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Util
operator|.
name|fileAsURI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeDirType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * Startup and checkpoint tests  *   */
end_comment

begin_class
DECL|class|TestStartup
specifier|public
class|class
name|TestStartup
extends|extends
name|TestCase
block|{
DECL|field|NAME_NODE_HOST
specifier|public
specifier|static
specifier|final
name|String
name|NAME_NODE_HOST
init|=
literal|"localhost:"
decl_stmt|;
DECL|field|WILDCARD_HTTP_HOST
specifier|public
specifier|static
specifier|final
name|String
name|WILDCARD_HTTP_HOST
init|=
literal|"0.0.0.0:"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestStartup
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|config
specifier|private
name|Configuration
name|config
decl_stmt|;
DECL|field|hdfsDir
specifier|private
name|File
name|hdfsDir
init|=
literal|null
decl_stmt|;
DECL|field|seed
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0xAAAAEEFL
decl_stmt|;
DECL|field|blockSize
specifier|static
specifier|final
name|int
name|blockSize
init|=
literal|4096
decl_stmt|;
DECL|field|fileSize
specifier|static
specifier|final
name|int
name|fileSize
init|=
literal|8192
decl_stmt|;
DECL|field|editsLength
DECL|field|fsimageLength
specifier|private
name|long
name|editsLength
init|=
literal|0
decl_stmt|,
name|fsimageLength
init|=
literal|0
decl_stmt|;
DECL|method|writeFile (FileSystem fileSys, Path name, int repl)
specifier|private
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|stm
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|repl
argument_list|,
operator|(
name|long
operator|)
name|blockSize
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|fileSize
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|config
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|hdfsDir
operator|=
operator|new
name|File
argument_list|(
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hdfsDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|hdfsDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not delete hdfs directory '"
operator|+
name|hdfsDir
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"--hdfsdir is "
operator|+
name|hdfsDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"name"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"data"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"secondary"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|,
name|WILDCARD_HTTP_HOST
operator|+
literal|"0"
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|config
argument_list|,
literal|"hdfs://"
operator|+
name|NAME_NODE_HOST
operator|+
literal|"0"
argument_list|)
expr_stmt|;
block|}
comment|/**    * clean up    */
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|hdfsDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|hdfsDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not delete hdfs directory in tearDown '"
operator|+
name|hdfsDir
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
comment|/**    * start MiniDFScluster, create a file (to create edits) and do a checkpoint      * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|createCheckPoint ()
specifier|public
name|void
name|createCheckPoint
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--starting mini cluster"
argument_list|)
expr_stmt|;
comment|// manage dirs parameter set to false
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|SecondaryNameNode
name|sn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|manageDataDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--starting Secondary Node"
argument_list|)
expr_stmt|;
comment|// start secondary node
name|sn
operator|=
operator|new
name|SecondaryNameNode
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|sn
argument_list|)
expr_stmt|;
comment|// create a file
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"t1"
argument_list|)
decl_stmt|;
name|this
operator|.
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--doing checkpoint"
argument_list|)
expr_stmt|;
name|sn
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
comment|// this shouldn't fail
name|LOG
operator|.
name|info
argument_list|(
literal|"--done checkpoint"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"checkpoint failed"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|sn
operator|!=
literal|null
condition|)
name|sn
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--file t1 created, cluster shutdown"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * corrupt files by removing and recreating the directory    */
DECL|method|corruptNameNodeFiles ()
specifier|private
name|void
name|corruptNameNodeFiles
parameter_list|()
throws|throws
name|IOException
block|{
comment|// now corrupt/delete the directrory
name|List
argument_list|<
name|URI
argument_list|>
name|nameDirs
init|=
operator|(
name|List
argument_list|<
name|URI
argument_list|>
operator|)
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|nameEditsDirs
init|=
operator|(
name|List
argument_list|<
name|URI
argument_list|>
operator|)
name|FSNamesystem
operator|.
name|getNamespaceEditsDirs
argument_list|(
name|config
argument_list|)
decl_stmt|;
comment|// get name dir and its length, then delete and recreate the directory
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|nameDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
comment|// has only one
name|this
operator|.
name|fsimageLength
operator|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"current"
argument_list|)
argument_list|,
name|NameNodeFile
operator|.
name|IMAGE
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
operator|(
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dir
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot remove directory: "
operator|+
name|dir
argument_list|)
throw|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--removed dir "
operator|+
name|dir
operator|+
literal|";len was ="
operator|+
name|this
operator|.
name|fsimageLength
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|mkdirs
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create directory "
operator|+
name|dir
argument_list|)
throw|;
name|dir
operator|=
operator|new
name|File
argument_list|(
name|nameEditsDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|//has only one
name|this
operator|.
name|editsLength
operator|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"current"
argument_list|)
argument_list|,
name|NameNodeFile
operator|.
name|EDITS
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
operator|(
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dir
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot remove directory: "
operator|+
name|dir
argument_list|)
throw|;
if|if
condition|(
operator|!
name|dir
operator|.
name|mkdirs
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create directory "
operator|+
name|dir
argument_list|)
throw|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--removed dir and recreated "
operator|+
name|dir
operator|+
literal|";len was ="
operator|+
name|this
operator|.
name|editsLength
argument_list|)
expr_stmt|;
block|}
comment|/**    * start with -importCheckpoint option and verify that the files are in separate directories and of the right length    * @throws IOException    */
DECL|method|checkNameNodeFiles ()
specifier|private
name|void
name|checkNameNodeFiles
parameter_list|()
throws|throws
name|IOException
block|{
comment|// start namenode with import option
name|LOG
operator|.
name|info
argument_list|(
literal|"-- about to start DFS cluster"
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|manageDataDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|startupOption
argument_list|(
name|IMPORT
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--NN started with checkpoint option"
argument_list|)
expr_stmt|;
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|nn
argument_list|)
expr_stmt|;
comment|// Verify that image file sizes did not change.
name|FSImage
name|image
init|=
name|nn
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|verifyDifferentDirs
argument_list|(
name|image
argument_list|,
name|this
operator|.
name|fsimageLength
argument_list|,
name|this
operator|.
name|editsLength
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * verify that edits log and fsimage are in different directories and of a correct size    */
DECL|method|verifyDifferentDirs (FSImage img, long expectedImgSize, long expectedEditsSize)
specifier|private
name|void
name|verifyDifferentDirs
parameter_list|(
name|FSImage
name|img
parameter_list|,
name|long
name|expectedImgSize
parameter_list|,
name|long
name|expectedEditsSize
parameter_list|)
block|{
name|StorageDirectory
name|sd
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|it
init|=
name|img
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|sd
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|sd
operator|.
name|getStorageDirType
argument_list|()
operator|.
name|isOfType
argument_list|(
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|)
condition|)
block|{
name|img
operator|.
name|getStorage
argument_list|()
expr_stmt|;
name|File
name|imf
init|=
name|NNStorage
operator|.
name|getStorageFile
argument_list|(
name|sd
argument_list|,
name|NameNodeFile
operator|.
name|IMAGE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--image file "
operator|+
name|imf
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"; len = "
operator|+
name|imf
operator|.
name|length
argument_list|()
operator|+
literal|"; expected = "
operator|+
name|expectedImgSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedImgSize
argument_list|,
name|imf
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sd
operator|.
name|getStorageDirType
argument_list|()
operator|.
name|isOfType
argument_list|(
name|NameNodeDirType
operator|.
name|EDITS
argument_list|)
condition|)
block|{
name|img
operator|.
name|getStorage
argument_list|()
expr_stmt|;
name|File
name|edf
init|=
name|NNStorage
operator|.
name|getStorageFile
argument_list|(
name|sd
argument_list|,
name|NameNodeFile
operator|.
name|EDITS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"-- edits file "
operator|+
name|edf
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"; len = "
operator|+
name|edf
operator|.
name|length
argument_list|()
operator|+
literal|"; expected = "
operator|+
name|expectedEditsSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedEditsSize
argument_list|,
name|edf
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Image/Edits directories are not different"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * secnn-6    * checkpoint for edits and image is the same directory    * @throws IOException    */
DECL|method|testChkpointStartup2 ()
specifier|public
name|void
name|testChkpointStartup2
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--starting checkpointStartup2 - same directory for checkpoint"
argument_list|)
expr_stmt|;
comment|// different name dirs
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"name"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"edits"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// same checkpoint dirs
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"chkpt"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"chkpt"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|createCheckPoint
argument_list|()
expr_stmt|;
name|corruptNameNodeFiles
argument_list|()
expr_stmt|;
name|checkNameNodeFiles
argument_list|()
expr_stmt|;
block|}
comment|/**    * seccn-8    * checkpoint for edits and image are different directories     * @throws IOException    */
DECL|method|testChkpointStartup1 ()
specifier|public
name|void
name|testChkpointStartup1
parameter_list|()
throws|throws
name|IOException
block|{
comment|//setUpConfig();
name|LOG
operator|.
name|info
argument_list|(
literal|"--starting testStartup Recovery"
argument_list|)
expr_stmt|;
comment|// different name dirs
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"name"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"edits"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// same checkpoint dirs
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"chkpt_edits"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"chkpt"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|createCheckPoint
argument_list|()
expr_stmt|;
name|corruptNameNodeFiles
argument_list|()
expr_stmt|;
name|checkNameNodeFiles
argument_list|()
expr_stmt|;
block|}
comment|/**    * secnn-7    * secondary node copies fsimage and edits into correct separate directories.    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testSNNStartup ()
specifier|public
name|void
name|testSNNStartup
parameter_list|()
throws|throws
name|IOException
block|{
comment|//setUpConfig();
name|LOG
operator|.
name|info
argument_list|(
literal|"--starting SecondNN startup test"
argument_list|)
expr_stmt|;
comment|// different name dirs
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"name"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"name"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// same checkpoint dirs
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"chkpt_edits"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"chkpt"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--starting NN "
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|SecondaryNameNode
name|sn
init|=
literal|null
decl_stmt|;
name|NameNode
name|nn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|manageDataDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|nn
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|nn
argument_list|)
expr_stmt|;
comment|// start secondary node
name|LOG
operator|.
name|info
argument_list|(
literal|"--starting SecondNN"
argument_list|)
expr_stmt|;
name|sn
operator|=
operator|new
name|SecondaryNameNode
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|sn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--doing checkpoint"
argument_list|)
expr_stmt|;
name|sn
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
comment|// this shouldn't fail
name|LOG
operator|.
name|info
argument_list|(
literal|"--done checkpoint"
argument_list|)
expr_stmt|;
comment|// now verify that image and edits are created in the different directories
name|FSImage
name|image
init|=
name|nn
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|StorageDirectory
name|sd
init|=
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageDir
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//only one
name|assertEquals
argument_list|(
name|sd
operator|.
name|getStorageDirType
argument_list|()
argument_list|,
name|NameNodeDirType
operator|.
name|IMAGE_AND_EDITS
argument_list|)
expr_stmt|;
name|File
name|imf
init|=
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageFile
argument_list|(
name|sd
argument_list|,
name|NameNodeFile
operator|.
name|IMAGE
argument_list|)
decl_stmt|;
name|File
name|edf
init|=
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageFile
argument_list|(
name|sd
argument_list|,
name|NameNodeFile
operator|.
name|EDITS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--image file "
operator|+
name|imf
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"; len = "
operator|+
name|imf
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--edits file "
operator|+
name|edf
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"; len = "
operator|+
name|edf
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|FSImage
name|chkpImage
init|=
name|sn
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|verifyDifferentDirs
argument_list|(
name|chkpImage
argument_list|,
name|imf
operator|.
name|length
argument_list|()
argument_list|,
name|edf
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"checkpoint failed"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|sn
operator|!=
literal|null
condition|)
name|sn
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testCompression ()
specifier|public
name|void
name|testCompression
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test compressing image."
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
literal|"hdfs://localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|File
name|base_dir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
argument_list|,
literal|"dfs/"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"name"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// create an uncompressed image
name|LOG
operator|.
name|info
argument_list|(
literal|"Create an uncompressed fsimage"
argument_list|)
expr_stmt|;
name|NameNode
name|namenode
init|=
operator|new
name|NameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
literal|"/test"
argument_list|,
operator|new
name|PermissionStatus
argument_list|(
literal|"hairong"
argument_list|,
literal|null
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namenode
operator|.
name|getFileInfo
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|isDir
argument_list|()
argument_list|)
expr_stmt|;
name|namenode
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|namenode
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|namenode
operator|.
name|stop
argument_list|()
expr_stmt|;
name|namenode
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// compress image using default codec
name|LOG
operator|.
name|info
argument_list|(
literal|"Read an uncomressed image and store it compressed using default codec."
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_IMAGE_COMPRESS_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkNameSpace
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// read image compressed using the default and compress it using Gzip codec
name|LOG
operator|.
name|info
argument_list|(
literal|"Read a compressed image and store it using a different codec."
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_IMAGE_COMPRESSION_CODEC_KEY
argument_list|,
literal|"org.apache.hadoop.io.compress.GzipCodec"
argument_list|)
expr_stmt|;
name|checkNameSpace
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// read an image compressed in Gzip and store it uncompressed
name|LOG
operator|.
name|info
argument_list|(
literal|"Read an compressed iamge and store it as uncompressed."
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_IMAGE_COMPRESS_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkNameSpace
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// read an uncomrpessed image and store it uncompressed
name|LOG
operator|.
name|info
argument_list|(
literal|"Read an uncompressed image and store it as uncompressed."
argument_list|)
expr_stmt|;
name|checkNameSpace
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNameSpace (Configuration conf)
specifier|private
name|void
name|checkNameSpace
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|NameNode
name|namenode
init|=
operator|new
name|NameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|namenode
operator|.
name|getFileInfo
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|isDir
argument_list|()
argument_list|)
expr_stmt|;
name|namenode
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|namenode
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|namenode
operator|.
name|stop
argument_list|()
expr_stmt|;
name|namenode
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
DECL|method|testImageChecksum ()
specifier|public
name|void
name|testImageChecksum
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test uncompressed image checksum"
argument_list|)
expr_stmt|;
name|testImageChecksum
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test compressed image checksum"
argument_list|)
expr_stmt|;
name|testImageChecksum
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testImageChecksum (boolean compress)
specifier|private
name|void
name|testImageChecksum
parameter_list|(
name|boolean
name|compress
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
literal|"hdfs://localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|File
name|base_dir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
argument_list|,
literal|"dfs/"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"name"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|compress
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_IMAGE_COMPRESSION_CODEC_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// create an image
name|LOG
operator|.
name|info
argument_list|(
literal|"Create an fsimage"
argument_list|)
expr_stmt|;
name|NameNode
name|namenode
init|=
operator|new
name|NameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
literal|"/test"
argument_list|,
operator|new
name|PermissionStatus
argument_list|(
literal|"hairong"
argument_list|,
literal|null
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namenode
operator|.
name|getFileInfo
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|isDir
argument_list|()
argument_list|)
expr_stmt|;
name|namenode
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|namenode
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|FSImage
name|image
init|=
name|namenode
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|image
operator|.
name|loadFSImage
argument_list|()
expr_stmt|;
name|File
name|versionFile
init|=
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageDir
argument_list|(
literal|0
argument_list|)
operator|.
name|getVersionFile
argument_list|()
decl_stmt|;
name|RandomAccessFile
name|file
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|versionFile
argument_list|,
literal|"rws"
argument_list|)
decl_stmt|;
name|FileInputStream
name|in
init|=
literal|null
decl_stmt|;
name|FileOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// read the property from version file
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
operator|.
name|getFD
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// get the MD5 property and change it
name|String
name|sMd5
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|NNStorage
operator|.
name|MESSAGE_DIGEST_PROPERTY
argument_list|)
decl_stmt|;
name|MD5Hash
name|md5
init|=
operator|new
name|MD5Hash
argument_list|(
name|sMd5
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|md5
operator|.
name|getDigest
argument_list|()
decl_stmt|;
name|bytes
index|[
literal|0
index|]
operator|+=
literal|1
expr_stmt|;
name|md5
operator|=
operator|new
name|MD5Hash
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|NNStorage
operator|.
name|MESSAGE_DIGEST_PROPERTY
argument_list|,
name|md5
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// write the properties back to version file
name|file
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
operator|.
name|getFD
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|store
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|file
operator|.
name|setLength
argument_list|(
name|out
operator|.
name|getChannel
argument_list|()
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
comment|// now load the image again
name|image
operator|.
name|loadFSImage
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expect to get a checksumerror"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"is corrupt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|namenode
operator|.
name|stop
argument_list|()
expr_stmt|;
name|namenode
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test tests hosts include list contains host names.  After namenode    * restarts, the still alive datanodes should not have any trouble in getting    * registrant again.    */
DECL|method|testNNRestart ()
specifier|public
name|void
name|testNNRestart
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|localFileSys
decl_stmt|;
name|Path
name|hostsFile
decl_stmt|;
name|Path
name|excludeFile
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|int
name|HEARTBEAT_INTERVAL
init|=
literal|1
decl_stmt|;
comment|// heartbeat interval in seconds
comment|// Set up the hosts/exclude files.
name|localFileSys
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|workingDir
init|=
name|localFileSys
operator|.
name|getWorkingDirectory
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
literal|"build/test/data/work-dir/restartnn"
argument_list|)
decl_stmt|;
name|hostsFile
operator|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"hosts"
argument_list|)
expr_stmt|;
name|excludeFile
operator|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"exclude"
argument_list|)
expr_stmt|;
comment|// Setup conf
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HOSTS_EXCLUDE
argument_list|,
name|excludeFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|writeConfigFile
argument_list|(
name|localFileSys
argument_list|,
name|excludeFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HOSTS
argument_list|,
name|hostsFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// write into hosts file
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|byte
name|b
index|[]
init|=
block|{
literal|127
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
name|InetAddress
name|inetAddress
init|=
name|InetAddress
operator|.
name|getByAddress
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|inetAddress
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|writeConfigFile
argument_list|(
name|localFileSys
argument_list|,
name|hostsFile
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|int
name|numNameNodes
init|=
literal|1
decl_stmt|;
name|int
name|numDatanodes
init|=
literal|1
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numNameNodes
argument_list|(
name|numNameNodes
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|setupHostsFile
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|nn
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isDataNodeUp
argument_list|()
argument_list|)
expr_stmt|;
name|DatanodeInfo
index|[]
name|info
init|=
name|nn
operator|.
name|getDatanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
operator|&&
name|info
operator|.
name|length
operator|!=
name|numDatanodes
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|HEARTBEAT_INTERVAL
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|info
operator|=
name|nn
operator|.
name|getDatanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Number of live nodes should be "
operator|+
name|numDatanodes
argument_list|,
name|numDatanodes
argument_list|,
name|info
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|cleanupFile
argument_list|(
name|localFileSys
argument_list|,
name|excludeFile
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeConfigFile (FileSystem localFileSys, Path name, ArrayList<String> nodes)
specifier|private
name|void
name|writeConfigFile
parameter_list|(
name|FileSystem
name|localFileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// delete if it already exists
if|if
condition|(
name|localFileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|localFileSys
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
name|FSDataOutputStream
name|stm
init|=
name|localFileSys
operator|.
name|create
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|nodes
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|node
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|stm
operator|.
name|writeBytes
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|stm
operator|.
name|writeBytes
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|cleanupFile (FileSystem fileSys, Path name)
specifier|private
name|void
name|cleanupFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

