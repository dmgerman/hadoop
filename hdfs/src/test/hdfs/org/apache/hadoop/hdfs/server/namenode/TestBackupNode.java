begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImage
operator|.
name|CheckpointStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestBackupNode
specifier|public
class|class
name|TestBackupNode
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestBackupNode
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BASE_DIR
specifier|static
specifier|final
name|String
name|BASE_DIR
init|=
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
decl_stmt|;
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|File
name|baseDir
init|=
operator|new
name|File
argument_list|(
name|BASE_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseDir
operator|.
name|exists
argument_list|()
condition|)
if|if
condition|(
operator|!
operator|(
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|baseDir
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot remove directory: "
operator|+
name|baseDir
argument_list|)
throw|;
name|File
name|dirC
init|=
operator|new
name|File
argument_list|(
name|getBackupNodeDir
argument_list|(
name|StartupOption
operator|.
name|CHECKPOINT
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|dirC
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|dirB
init|=
operator|new
name|File
argument_list|(
name|getBackupNodeDir
argument_list|(
name|StartupOption
operator|.
name|BACKUP
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|dirB
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|dirB
operator|=
operator|new
name|File
argument_list|(
name|getBackupNodeDir
argument_list|(
name|StartupOption
operator|.
name|BACKUP
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|dirB
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|File
name|baseDir
init|=
operator|new
name|File
argument_list|(
name|BASE_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|baseDir
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot remove directory: "
operator|+
name|baseDir
argument_list|)
throw|;
block|}
DECL|method|writeFile (FileSystem fileSys, Path name, int repl)
specifier|static
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|)
throws|throws
name|IOException
block|{
name|TestCheckpoint
operator|.
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|name
argument_list|,
name|repl
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFile (FileSystem fileSys, Path name, int repl)
specifier|static
name|void
name|checkFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|)
throws|throws
name|IOException
block|{
name|TestCheckpoint
operator|.
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|name
argument_list|,
name|repl
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanupFile (FileSystem fileSys, Path name)
name|void
name|cleanupFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|TestCheckpoint
operator|.
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|getBackupNodeDir (StartupOption t, int i)
specifier|static
name|String
name|getBackupNodeDir
parameter_list|(
name|StartupOption
name|t
parameter_list|,
name|int
name|i
parameter_list|)
block|{
return|return
name|BASE_DIR
operator|+
literal|"name"
operator|+
name|t
operator|.
name|getName
argument_list|()
operator|+
name|i
operator|+
literal|"/"
return|;
block|}
DECL|method|startBackupNode (Configuration conf, StartupOption t, int i)
name|BackupNode
name|startBackupNode
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|StartupOption
name|t
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|c
init|=
operator|new
name|HdfsConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|dirs
init|=
name|getBackupNodeDir
argument_list|(
name|t
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
literal|"${"
operator|+
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
operator|+
literal|"}"
argument_list|)
expr_stmt|;
return|return
operator|(
name|BackupNode
operator|)
name|NameNode
operator|.
name|createNameNode
argument_list|(
operator|new
name|String
index|[]
block|{
name|t
operator|.
name|getName
argument_list|()
block|}
argument_list|,
name|c
argument_list|)
return|;
block|}
DECL|method|waitCheckpointDone (BackupNode backup)
name|void
name|waitCheckpointDone
parameter_list|(
name|BackupNode
name|backup
parameter_list|)
block|{
do|do
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting checkpoint to complete..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
do|while
condition|(
name|backup
operator|.
name|getCheckpointState
argument_list|()
operator|!=
name|CheckpointStates
operator|.
name|START
condition|)
do|;
block|}
DECL|method|testCheckpoint ()
specifier|public
name|void
name|testCheckpoint
parameter_list|()
throws|throws
name|IOException
block|{
name|testCheckpoint
argument_list|(
name|StartupOption
operator|.
name|CHECKPOINT
argument_list|)
expr_stmt|;
name|testCheckpoint
argument_list|(
name|StartupOption
operator|.
name|BACKUP
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckpoint (StartupOption op)
name|void
name|testCheckpoint
parameter_list|(
name|StartupOption
name|op
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"checkpoint.dat"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
literal|"checkpoint2.dat"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|short
name|replication
init|=
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INITIAL_DELAY_KEY
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_SCAN_PERIOD_HOURS_KEY
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// disable block scanner
name|int
name|numDatanodes
init|=
name|Math
operator|.
name|max
argument_list|(
literal|3
argument_list|,
name|replication
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
name|BackupNode
name|backup
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|//
comment|// verify that 'format' really blew away all pre-existing files
comment|//
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|file2
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// Create file1
comment|//
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
comment|//
comment|// Take a checkpoint
comment|//
name|backup
operator|=
name|startBackupNode
argument_list|(
name|conf
argument_list|,
name|op
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitCheckpointDone
argument_list|(
name|backup
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in TestBackupNode:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|backup
operator|!=
literal|null
condition|)
name|backup
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|fileSys
operator|!=
literal|null
condition|)
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|File
name|imageFileNN
init|=
operator|new
name|File
argument_list|(
name|BASE_DIR
argument_list|,
literal|"name1/current/fsimage"
argument_list|)
decl_stmt|;
name|File
name|imageFileBN
init|=
operator|new
name|File
argument_list|(
name|getBackupNodeDir
argument_list|(
name|op
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"/current/fsimage"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"NameNode fsimage length = "
operator|+
name|imageFileNN
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Backup Node fsimage length = "
operator|+
name|imageFileBN
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|imageFileNN
operator|.
name|length
argument_list|()
operator|==
name|imageFileBN
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|//
comment|// Restart cluster and verify that file1 still exist.
comment|//
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// check that file1 still exists
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
comment|// create new file file2
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|,
name|replication
argument_list|)
expr_stmt|;
comment|//
comment|// Take a checkpoint
comment|//
name|backup
operator|=
name|startBackupNode
argument_list|(
name|conf
argument_list|,
name|op
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitCheckpointDone
argument_list|(
name|backup
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in TestBackupNode:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|backup
operator|!=
literal|null
condition|)
name|backup
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|fileSys
operator|!=
literal|null
condition|)
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"NameNode fsimage length = "
operator|+
name|imageFileNN
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Backup Node fsimage length = "
operator|+
name|imageFileBN
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|imageFileNN
operator|.
name|length
argument_list|()
operator|==
name|imageFileBN
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|//
comment|// Restart cluster and verify that file2 exists and
comment|// file1 does not exist.
comment|//
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that file2 exists
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in TestBackupNode:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that only one backup node can register.    * @throws IOException    */
DECL|method|testBackupRegistration ()
specifier|public
name|void
name|testBackupRegistration
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf1
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|Configuration
name|conf2
init|=
literal|null
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|BackupNode
name|backup1
init|=
literal|null
decl_stmt|;
name|BackupNode
name|backup2
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// start name-node and backup node 1
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf1
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|conf1
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_BACKUP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:7771"
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_BACKUP_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:7775"
argument_list|)
expr_stmt|;
name|backup1
operator|=
name|startBackupNode
argument_list|(
name|conf1
argument_list|,
name|StartupOption
operator|.
name|BACKUP
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// try to start backup node 2
name|conf2
operator|=
operator|new
name|HdfsConfiguration
argument_list|(
name|conf1
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_BACKUP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:7772"
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_BACKUP_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:7776"
argument_list|)
expr_stmt|;
try|try
block|{
name|backup2
operator|=
name|startBackupNode
argument_list|(
name|conf2
argument_list|,
name|StartupOption
operator|.
name|BACKUP
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|backup2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|backup2
operator|=
literal|null
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Only one backup node should be able to start"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Registration is not allowed"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should fail - doing good
block|}
comment|// stop backup node 1; backup node 2 should be able to start
name|backup1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|backup1
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|backup2
operator|=
name|startBackupNode
argument_list|(
name|conf2
argument_list|,
name|StartupOption
operator|.
name|BACKUP
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Backup node 2 should be able to start"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in TestBackupNode:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|backup1
operator|!=
literal|null
condition|)
name|backup1
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|backup2
operator|!=
literal|null
condition|)
name|backup2
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

