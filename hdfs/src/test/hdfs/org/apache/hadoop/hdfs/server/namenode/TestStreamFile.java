begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|InclusiveByteRange
import|;
end_import

begin_comment
comment|/*   Mock input stream class that always outputs the current position of the stream */
end_comment

begin_class
DECL|class|MockFSInputStream
class|class
name|MockFSInputStream
extends|extends
name|FSInputStream
block|{
DECL|field|currentPos
name|long
name|currentPos
init|=
literal|0
decl_stmt|;
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|currentPos
operator|++
argument_list|)
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{   }
DECL|method|seek (long pos)
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|currentPos
operator|=
name|pos
expr_stmt|;
block|}
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|currentPos
return|;
block|}
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

begin_class
DECL|class|MockHttpServletResponse
class|class
name|MockHttpServletResponse
implements|implements
name|HttpServletResponse
block|{
DECL|field|status
specifier|private
name|int
name|status
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|MockHttpServletResponse ()
specifier|public
name|MockHttpServletResponse
parameter_list|()
block|{   }
DECL|method|getStatus ()
specifier|public
name|int
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
DECL|method|setStatus (int sc)
specifier|public
name|void
name|setStatus
parameter_list|(
name|int
name|sc
parameter_list|)
block|{
name|status
operator|=
name|sc
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|setStatus (int sc, java.lang.String sm)
specifier|public
name|void
name|setStatus
parameter_list|(
name|int
name|sc
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|sm
parameter_list|)
block|{   }
DECL|method|addIntHeader (String name, int value)
specifier|public
name|void
name|addIntHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
block|{   }
DECL|method|setIntHeader (String name, int value)
specifier|public
name|void
name|setIntHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
block|{    }
DECL|method|addHeader (String name, String value)
specifier|public
name|void
name|addHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{   }
DECL|method|setHeader (String name, String value)
specifier|public
name|void
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{   }
DECL|method|addDateHeader (java.lang.String name, long date)
specifier|public
name|void
name|addDateHeader
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|,
name|long
name|date
parameter_list|)
block|{   }
DECL|method|setDateHeader (java.lang.String name, long date)
specifier|public
name|void
name|setDateHeader
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|,
name|long
name|date
parameter_list|)
block|{   }
DECL|method|sendRedirect (java.lang.String location)
specifier|public
name|void
name|sendRedirect
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|location
parameter_list|)
block|{    }
DECL|method|sendError (int e)
specifier|public
name|void
name|sendError
parameter_list|(
name|int
name|e
parameter_list|)
block|{   }
DECL|method|sendError (int a, java.lang.String b)
specifier|public
name|void
name|sendError
parameter_list|(
name|int
name|a
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|b
parameter_list|)
block|{   }
annotation|@
name|Deprecated
DECL|method|encodeRedirectUrl (java.lang.String a)
specifier|public
name|String
name|encodeRedirectUrl
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|a
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Deprecated
DECL|method|encodeUrl (java.lang.String url)
specifier|public
name|String
name|encodeUrl
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|url
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|encodeRedirectURL (java.lang.String url)
specifier|public
name|String
name|encodeRedirectURL
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|url
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Deprecated
DECL|method|encodeURL (java.lang.String url)
specifier|public
name|String
name|encodeURL
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|url
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|containsHeader (java.lang.String name)
specifier|public
name|boolean
name|containsHeader
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|method|addCookie (javax.servlet.http.Cookie cookie)
specifier|public
name|void
name|addCookie
parameter_list|(
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
name|cookie
parameter_list|)
block|{   }
DECL|method|getLocale ()
specifier|public
name|java
operator|.
name|util
operator|.
name|Locale
name|getLocale
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|setLocale (java.util.Locale loc)
specifier|public
name|void
name|setLocale
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Locale
name|loc
parameter_list|)
block|{   }
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{   }
DECL|method|isCommitted ()
specifier|public
name|boolean
name|isCommitted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|resetBuffer ()
specifier|public
name|void
name|resetBuffer
parameter_list|()
block|{   }
DECL|method|flushBuffer ()
specifier|public
name|void
name|flushBuffer
parameter_list|()
block|{   }
DECL|method|getBufferSize ()
specifier|public
name|int
name|getBufferSize
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|setBufferSize (int size)
specifier|public
name|void
name|setBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{   }
DECL|method|setContentType (java.lang.String type)
specifier|public
name|void
name|setContentType
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|type
parameter_list|)
block|{   }
DECL|method|setContentLength (int len)
specifier|public
name|void
name|setContentLength
parameter_list|(
name|int
name|len
parameter_list|)
block|{   }
DECL|method|setCharacterEncoding (java.lang.String charset)
specifier|public
name|void
name|setCharacterEncoding
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|charset
parameter_list|)
block|{   }
DECL|method|getWriter ()
specifier|public
name|java
operator|.
name|io
operator|.
name|PrintWriter
name|getWriter
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|getOutputStream ()
specifier|public
name|javax
operator|.
name|servlet
operator|.
name|ServletOutputStream
name|getOutputStream
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|getContentType ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getContentType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|getCharacterEncoding ()
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getCharacterEncoding
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

begin_class
DECL|class|TestStreamFile
specifier|public
class|class
name|TestStreamFile
extends|extends
name|TestCase
block|{
comment|// return an array matching the output of mockfsinputstream
DECL|method|getOutputArray (int start, int count)
specifier|private
specifier|static
name|byte
index|[]
name|getOutputArray
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|byte
index|[]
name|a
init|=
operator|new
name|byte
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|a
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|start
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
DECL|method|testWriteTo ()
specifier|public
name|void
name|testWriteTo
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|FSInputStream
name|fsin
init|=
operator|new
name|MockFSInputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// new int[]{s_1, c_1, s_2, c_2, ..., s_n, c_n} means to test
comment|// reading c_i bytes starting at s_i
name|int
index|[]
name|pairs
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|10000
block|,
literal|50
block|,
literal|100
block|,
literal|50
block|,
literal|6000
block|,
literal|1000
block|,
literal|2000
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|5000
block|,
literal|0
block|,                             }
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Pairs array must be even"
argument_list|,
name|pairs
operator|.
name|length
operator|%
literal|2
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pairs
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|StreamFile
operator|.
name|writeTo
argument_list|(
name|fsin
argument_list|,
name|os
argument_list|,
name|pairs
index|[
name|i
index|]
argument_list|,
name|pairs
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Reading "
operator|+
name|pairs
index|[
name|i
operator|+
literal|1
index|]
operator|+
literal|" bytes from offset "
operator|+
name|pairs
index|[
name|i
index|]
argument_list|,
name|getOutputArray
argument_list|(
name|pairs
index|[
name|i
index|]
argument_list|,
name|pairs
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|,
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|strToRanges (String s, int contentLength)
specifier|private
name|List
argument_list|<
name|?
argument_list|>
name|strToRanges
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|contentLength
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"bytes="
operator|+
name|s
block|}
argument_list|)
decl_stmt|;
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
operator|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|l
argument_list|)
operator|)
operator|.
name|elements
argument_list|()
decl_stmt|;
return|return
name|InclusiveByteRange
operator|.
name|satisfiableRanges
argument_list|(
name|e
argument_list|,
name|contentLength
argument_list|)
return|;
block|}
DECL|method|testSendPartialData ()
specifier|public
name|void
name|testSendPartialData
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|FSInputStream
name|in
init|=
operator|new
name|MockFSInputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// test if multiple ranges, then 416
block|{
name|List
argument_list|<
name|?
argument_list|>
name|ranges
init|=
name|strToRanges
argument_list|(
literal|"0-,10-300"
argument_list|,
literal|500
argument_list|)
decl_stmt|;
name|MockHttpServletResponse
name|response
init|=
operator|new
name|MockHttpServletResponse
argument_list|()
decl_stmt|;
name|StreamFile
operator|.
name|sendPartialData
argument_list|(
name|in
argument_list|,
name|os
argument_list|,
name|response
argument_list|,
literal|500
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Multiple ranges should result in a 416 error"
argument_list|,
literal|416
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test if no ranges, then 416
block|{
name|os
operator|.
name|reset
argument_list|()
expr_stmt|;
name|MockHttpServletResponse
name|response
init|=
operator|new
name|MockHttpServletResponse
argument_list|()
decl_stmt|;
name|StreamFile
operator|.
name|sendPartialData
argument_list|(
name|in
argument_list|,
name|os
argument_list|,
name|response
argument_list|,
literal|500
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No ranges should result in a 416 error"
argument_list|,
literal|416
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test if invalid single range (out of bounds), then 416
block|{
name|List
argument_list|<
name|?
argument_list|>
name|ranges
init|=
name|strToRanges
argument_list|(
literal|"600-800"
argument_list|,
literal|500
argument_list|)
decl_stmt|;
name|MockHttpServletResponse
name|response
init|=
operator|new
name|MockHttpServletResponse
argument_list|()
decl_stmt|;
name|StreamFile
operator|.
name|sendPartialData
argument_list|(
name|in
argument_list|,
name|os
argument_list|,
name|response
argument_list|,
literal|500
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Single (but invalid) range should result in a 416"
argument_list|,
literal|416
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test if one (valid) range, then 206
block|{
name|List
argument_list|<
name|?
argument_list|>
name|ranges
init|=
name|strToRanges
argument_list|(
literal|"100-300"
argument_list|,
literal|500
argument_list|)
decl_stmt|;
name|MockHttpServletResponse
name|response
init|=
operator|new
name|MockHttpServletResponse
argument_list|()
decl_stmt|;
name|StreamFile
operator|.
name|sendPartialData
argument_list|(
name|in
argument_list|,
name|os
argument_list|,
name|response
argument_list|,
literal|500
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Single (valid) range should result in a 206"
argument_list|,
literal|206
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Byte range from 100-300"
argument_list|,
name|getOutputArray
argument_list|(
literal|100
argument_list|,
literal|201
argument_list|)
argument_list|,
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

