begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AlreadyBeingCreatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfoUnderConstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestNNLeaseRecovery
specifier|public
class|class
name|TestNNLeaseRecovery
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestNNLeaseRecovery
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NAME_DIR
specifier|private
specifier|static
specifier|final
name|String
name|NAME_DIR
init|=
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
operator|+
literal|"name"
decl_stmt|;
DECL|field|fsn
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
static|static
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|FSNamesystem
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initiates and sets a spied on FSNamesystem so tests can hook its methods    * @throws IOException if an error occurred    */
annotation|@
name|Before
DECL|method|startUp ()
specifier|public
name|void
name|startUp
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|NAME_DIR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|NAME_DIR
argument_list|)
expr_stmt|;
comment|// avoid stubbing access control
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|initMetrics
argument_list|(
name|conf
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
literal|"hdfs://localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fsn
operator|=
name|spy
argument_list|(
operator|new
name|FSNamesystem
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Cleans the resources and closes the instance of FSNamesystem    * @throws IOException if an error occurred    */
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fsn
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fsn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot close: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|NAME_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
name|assertTrue
argument_list|(
literal|"Cannot delete name-node dirs"
argument_list|,
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Release the lease for the given file
DECL|method|releaseLease (FSNamesystem ns, LeaseManager.Lease lm, Path file)
specifier|private
name|boolean
name|releaseLease
parameter_list|(
name|FSNamesystem
name|ns
parameter_list|,
name|LeaseManager
operator|.
name|Lease
name|lm
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|fsn
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|fsn
operator|.
name|internalReleaseLease
argument_list|(
name|lm
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
finally|finally
block|{
name|fsn
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Mocks FSNamesystem instance, adds an empty file and invokes lease recovery    * method.     * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|testInternalReleaseLease_allCOMPLETE ()
specifier|public
name|void
name|testInternalReleaseLease_allCOMPLETE
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LeaseManager
operator|.
name|Lease
name|lm
init|=
name|mock
argument_list|(
name|LeaseManager
operator|.
name|Lease
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
name|spy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test.dat"
argument_list|)
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|dnd
init|=
name|mock
argument_list|(
name|DatanodeDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|PermissionStatus
name|ps
init|=
operator|new
name|PermissionStatus
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
decl_stmt|;
name|fsn
operator|.
name|dir
operator|.
name|addFile
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
name|ps
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1l
argument_list|,
literal|"test"
argument_list|,
literal|"test-machine"
argument_list|,
name|dnd
argument_list|,
literal|1001l
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"True has to be returned in this case"
argument_list|,
name|releaseLease
argument_list|(
name|fsn
argument_list|,
name|lm
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Mocks FSNamesystem instance, adds an empty file, sets status of last two    * blocks to non-defined and UNDER_CONSTRUCTION and invokes lease recovery    * method. IOException is expected for releasing a create lock on a     * closed file.     * @throws IOException as the result    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testInternalReleaseLease_UNKNOWN_COMM ()
specifier|public
name|void
name|testInternalReleaseLease_UNKNOWN_COMM
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LeaseManager
operator|.
name|Lease
name|lm
init|=
name|mock
argument_list|(
name|LeaseManager
operator|.
name|Lease
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
name|spy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_test.dat"
argument_list|)
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|dnd
init|=
name|mock
argument_list|(
name|DatanodeDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|PermissionStatus
name|ps
init|=
operator|new
name|PermissionStatus
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
decl_stmt|;
name|mockFileBlocks
argument_list|(
literal|2
argument_list|,
literal|null
argument_list|,
name|HdfsConstants
operator|.
name|BlockUCState
operator|.
name|UNDER_CONSTRUCTION
argument_list|,
name|file
argument_list|,
name|dnd
argument_list|,
name|ps
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|releaseLease
argument_list|(
name|fsn
argument_list|,
name|lm
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"FSNamesystem.internalReleaseLease suppose to throw "
operator|+
literal|"IOException here"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Mocks FSNamesystem instance, adds an empty file, sets status of last two    * blocks to COMMITTED and COMMITTED and invokes lease recovery    * method. AlreadyBeingCreatedException is expected.    * @throws AlreadyBeingCreatedException as the result    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AlreadyBeingCreatedException
operator|.
name|class
argument_list|)
DECL|method|testInternalReleaseLease_COMM_COMM ()
specifier|public
name|void
name|testInternalReleaseLease_COMM_COMM
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LeaseManager
operator|.
name|Lease
name|lm
init|=
name|mock
argument_list|(
name|LeaseManager
operator|.
name|Lease
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
name|spy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_test.dat"
argument_list|)
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|dnd
init|=
name|mock
argument_list|(
name|DatanodeDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|PermissionStatus
name|ps
init|=
operator|new
name|PermissionStatus
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
decl_stmt|;
name|mockFileBlocks
argument_list|(
literal|2
argument_list|,
name|HdfsConstants
operator|.
name|BlockUCState
operator|.
name|COMMITTED
argument_list|,
name|HdfsConstants
operator|.
name|BlockUCState
operator|.
name|COMMITTED
argument_list|,
name|file
argument_list|,
name|dnd
argument_list|,
name|ps
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|releaseLease
argument_list|(
name|fsn
argument_list|,
name|lm
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"FSNamesystem.internalReleaseLease suppose to throw "
operator|+
literal|"IOException here"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Mocks FSNamesystem instance, adds an empty file with 0 blocks    * and invokes lease recovery method.     */
annotation|@
name|Test
DECL|method|testInternalReleaseLease_0blocks ()
specifier|public
name|void
name|testInternalReleaseLease_0blocks
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LeaseManager
operator|.
name|Lease
name|lm
init|=
name|mock
argument_list|(
name|LeaseManager
operator|.
name|Lease
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
name|spy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_test.dat"
argument_list|)
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|dnd
init|=
name|mock
argument_list|(
name|DatanodeDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|PermissionStatus
name|ps
init|=
operator|new
name|PermissionStatus
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
decl_stmt|;
name|mockFileBlocks
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|file
argument_list|,
name|dnd
argument_list|,
name|ps
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"True has to be returned in this case"
argument_list|,
name|releaseLease
argument_list|(
name|fsn
argument_list|,
name|lm
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Mocks FSNamesystem instance, adds an empty file with 1 block    * and invokes lease recovery method.     * AlreadyBeingCreatedException is expected.    * @throws AlreadyBeingCreatedException as the result    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AlreadyBeingCreatedException
operator|.
name|class
argument_list|)
DECL|method|testInternalReleaseLease_1blocks ()
specifier|public
name|void
name|testInternalReleaseLease_1blocks
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LeaseManager
operator|.
name|Lease
name|lm
init|=
name|mock
argument_list|(
name|LeaseManager
operator|.
name|Lease
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
name|spy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_test.dat"
argument_list|)
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|dnd
init|=
name|mock
argument_list|(
name|DatanodeDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|PermissionStatus
name|ps
init|=
operator|new
name|PermissionStatus
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
decl_stmt|;
name|mockFileBlocks
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|,
name|HdfsConstants
operator|.
name|BlockUCState
operator|.
name|COMMITTED
argument_list|,
name|file
argument_list|,
name|dnd
argument_list|,
name|ps
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|releaseLease
argument_list|(
name|fsn
argument_list|,
name|lm
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"FSNamesystem.internalReleaseLease suppose to throw "
operator|+
literal|"IOException here"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Mocks FSNamesystem instance, adds an empty file, sets status of last two    * blocks to COMMITTED and UNDER_CONSTRUCTION and invokes lease recovery    * method.<code>false</code> is expected as the result    * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|testInternalReleaseLease_COMM_CONSTRUCTION ()
specifier|public
name|void
name|testInternalReleaseLease_COMM_CONSTRUCTION
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LeaseManager
operator|.
name|Lease
name|lm
init|=
name|mock
argument_list|(
name|LeaseManager
operator|.
name|Lease
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
name|spy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_test.dat"
argument_list|)
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|dnd
init|=
name|mock
argument_list|(
name|DatanodeDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|PermissionStatus
name|ps
init|=
operator|new
name|PermissionStatus
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
decl_stmt|;
name|mockFileBlocks
argument_list|(
literal|2
argument_list|,
name|HdfsConstants
operator|.
name|BlockUCState
operator|.
name|COMMITTED
argument_list|,
name|HdfsConstants
operator|.
name|BlockUCState
operator|.
name|UNDER_CONSTRUCTION
argument_list|,
name|file
argument_list|,
name|dnd
argument_list|,
name|ps
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"False is expected in return in this case"
argument_list|,
name|releaseLease
argument_list|(
name|fsn
argument_list|,
name|lm
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommitBlockSynchronization_BlockNotFound ()
specifier|public
name|void
name|testCommitBlockSynchronization_BlockNotFound
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|recoveryId
init|=
literal|2002
decl_stmt|;
name|long
name|newSize
init|=
literal|273487234
decl_stmt|;
name|Path
name|file
init|=
name|spy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_test.dat"
argument_list|)
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|dnd
init|=
name|mock
argument_list|(
name|DatanodeDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|PermissionStatus
name|ps
init|=
operator|new
name|PermissionStatus
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
decl_stmt|;
name|mockFileBlocks
argument_list|(
literal|2
argument_list|,
name|HdfsConstants
operator|.
name|BlockUCState
operator|.
name|COMMITTED
argument_list|,
name|HdfsConstants
operator|.
name|BlockUCState
operator|.
name|UNDER_CONSTRUCTION
argument_list|,
name|file
argument_list|,
name|dnd
argument_list|,
name|ps
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|BlockInfo
name|lastBlock
init|=
name|fsn
operator|.
name|dir
operator|.
name|getFileINode
argument_list|(
name|anyString
argument_list|()
argument_list|)
operator|.
name|getLastBlock
argument_list|()
decl_stmt|;
try|try
block|{
name|fsn
operator|.
name|commitBlockSynchronization
argument_list|(
name|fsn
operator|.
name|getExtendedBlock
argument_list|(
name|lastBlock
argument_list|)
argument_list|,
name|recoveryId
argument_list|,
name|newSize
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|new
name|DatanodeID
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Block (="
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCommitBlockSynchronization_notUR ()
specifier|public
name|void
name|testCommitBlockSynchronization_notUR
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|recoveryId
init|=
literal|2002
decl_stmt|;
name|long
name|newSize
init|=
literal|273487234
decl_stmt|;
name|Path
name|file
init|=
name|spy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_test.dat"
argument_list|)
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|dnd
init|=
name|mock
argument_list|(
name|DatanodeDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|PermissionStatus
name|ps
init|=
operator|new
name|PermissionStatus
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
decl_stmt|;
name|mockFileBlocks
argument_list|(
literal|2
argument_list|,
name|HdfsConstants
operator|.
name|BlockUCState
operator|.
name|COMMITTED
argument_list|,
name|HdfsConstants
operator|.
name|BlockUCState
operator|.
name|COMPLETE
argument_list|,
name|file
argument_list|,
name|dnd
argument_list|,
name|ps
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|BlockInfo
name|lastBlock
init|=
name|fsn
operator|.
name|dir
operator|.
name|getFileINode
argument_list|(
name|anyString
argument_list|()
argument_list|)
operator|.
name|getLastBlock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|lastBlock
operator|.
name|isComplete
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|fsn
operator|.
name|commitBlockSynchronization
argument_list|(
name|fsn
operator|.
name|getExtendedBlock
argument_list|(
name|lastBlock
argument_list|)
argument_list|,
name|recoveryId
argument_list|,
name|newSize
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|new
name|DatanodeID
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Unexpected block (="
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCommitBlockSynchronization_WrongGreaterRecoveryID ()
specifier|public
name|void
name|testCommitBlockSynchronization_WrongGreaterRecoveryID
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|recoveryId
init|=
literal|2002
decl_stmt|;
name|long
name|newSize
init|=
literal|273487234
decl_stmt|;
name|Path
name|file
init|=
name|spy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_test.dat"
argument_list|)
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|dnd
init|=
name|mock
argument_list|(
name|DatanodeDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|PermissionStatus
name|ps
init|=
operator|new
name|PermissionStatus
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
decl_stmt|;
name|mockFileBlocks
argument_list|(
literal|2
argument_list|,
name|HdfsConstants
operator|.
name|BlockUCState
operator|.
name|COMMITTED
argument_list|,
name|HdfsConstants
operator|.
name|BlockUCState
operator|.
name|UNDER_CONSTRUCTION
argument_list|,
name|file
argument_list|,
name|dnd
argument_list|,
name|ps
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|BlockInfo
name|lastBlock
init|=
name|fsn
operator|.
name|dir
operator|.
name|getFileINode
argument_list|(
name|anyString
argument_list|()
argument_list|)
operator|.
name|getLastBlock
argument_list|()
decl_stmt|;
name|when
argument_list|(
operator|(
operator|(
name|BlockInfoUnderConstruction
operator|)
name|lastBlock
operator|)
operator|.
name|getBlockRecoveryId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|recoveryId
operator|-
literal|100
argument_list|)
expr_stmt|;
try|try
block|{
name|fsn
operator|.
name|commitBlockSynchronization
argument_list|(
name|fsn
operator|.
name|getExtendedBlock
argument_list|(
name|lastBlock
argument_list|)
argument_list|,
name|recoveryId
argument_list|,
name|newSize
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|new
name|DatanodeID
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"The recovery id "
operator|+
name|recoveryId
operator|+
literal|" does not match current recovery id "
operator|+
operator|(
name|recoveryId
operator|-
literal|100
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCommitBlockSynchronization_WrongLesserRecoveryID ()
specifier|public
name|void
name|testCommitBlockSynchronization_WrongLesserRecoveryID
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|recoveryId
init|=
literal|2002
decl_stmt|;
name|long
name|newSize
init|=
literal|273487234
decl_stmt|;
name|Path
name|file
init|=
name|spy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_test.dat"
argument_list|)
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|dnd
init|=
name|mock
argument_list|(
name|DatanodeDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|PermissionStatus
name|ps
init|=
operator|new
name|PermissionStatus
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
decl_stmt|;
name|mockFileBlocks
argument_list|(
literal|2
argument_list|,
name|HdfsConstants
operator|.
name|BlockUCState
operator|.
name|COMMITTED
argument_list|,
name|HdfsConstants
operator|.
name|BlockUCState
operator|.
name|UNDER_CONSTRUCTION
argument_list|,
name|file
argument_list|,
name|dnd
argument_list|,
name|ps
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|BlockInfo
name|lastBlock
init|=
name|fsn
operator|.
name|dir
operator|.
name|getFileINode
argument_list|(
name|anyString
argument_list|()
argument_list|)
operator|.
name|getLastBlock
argument_list|()
decl_stmt|;
name|when
argument_list|(
operator|(
operator|(
name|BlockInfoUnderConstruction
operator|)
name|lastBlock
operator|)
operator|.
name|getBlockRecoveryId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|recoveryId
operator|+
literal|100
argument_list|)
expr_stmt|;
try|try
block|{
name|fsn
operator|.
name|commitBlockSynchronization
argument_list|(
name|fsn
operator|.
name|getExtendedBlock
argument_list|(
name|lastBlock
argument_list|)
argument_list|,
name|recoveryId
argument_list|,
name|newSize
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|new
name|DatanodeID
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"The recovery id "
operator|+
name|recoveryId
operator|+
literal|" does not match current recovery id "
operator|+
operator|(
name|recoveryId
operator|+
literal|100
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCommitBlockSynchronization_EqualRecoveryID ()
specifier|public
name|void
name|testCommitBlockSynchronization_EqualRecoveryID
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|recoveryId
init|=
literal|2002
decl_stmt|;
name|long
name|newSize
init|=
literal|273487234
decl_stmt|;
name|Path
name|file
init|=
name|spy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_test.dat"
argument_list|)
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|dnd
init|=
name|mock
argument_list|(
name|DatanodeDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|PermissionStatus
name|ps
init|=
operator|new
name|PermissionStatus
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
decl_stmt|;
name|mockFileBlocks
argument_list|(
literal|2
argument_list|,
name|HdfsConstants
operator|.
name|BlockUCState
operator|.
name|COMMITTED
argument_list|,
name|HdfsConstants
operator|.
name|BlockUCState
operator|.
name|UNDER_CONSTRUCTION
argument_list|,
name|file
argument_list|,
name|dnd
argument_list|,
name|ps
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|BlockInfo
name|lastBlock
init|=
name|fsn
operator|.
name|dir
operator|.
name|getFileINode
argument_list|(
name|anyString
argument_list|()
argument_list|)
operator|.
name|getLastBlock
argument_list|()
decl_stmt|;
name|when
argument_list|(
operator|(
operator|(
name|BlockInfoUnderConstruction
operator|)
name|lastBlock
operator|)
operator|.
name|getBlockRecoveryId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|recoveryId
argument_list|)
expr_stmt|;
name|boolean
name|recoveryChecked
init|=
literal|false
decl_stmt|;
try|try
block|{
name|fsn
operator|.
name|commitBlockSynchronization
argument_list|(
name|fsn
operator|.
name|getExtendedBlock
argument_list|(
name|lastBlock
argument_list|)
argument_list|,
name|recoveryId
argument_list|,
name|newSize
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|new
name|DatanodeID
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ioe
parameter_list|)
block|{
comment|// It is fine to get NPE here because the datanodes array is empty
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception "
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|recoveryChecked
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"commitBlockSynchronization had to throw NPE here"
argument_list|,
name|recoveryChecked
argument_list|)
expr_stmt|;
block|}
DECL|method|mockFileBlocks (int fileBlocksNumber, HdfsConstants.BlockUCState penUltState, HdfsConstants.BlockUCState lastState, Path file, DatanodeDescriptor dnd, PermissionStatus ps, boolean setStoredBlock)
specifier|private
name|void
name|mockFileBlocks
parameter_list|(
name|int
name|fileBlocksNumber
parameter_list|,
name|HdfsConstants
operator|.
name|BlockUCState
name|penUltState
parameter_list|,
name|HdfsConstants
operator|.
name|BlockUCState
name|lastState
parameter_list|,
name|Path
name|file
parameter_list|,
name|DatanodeDescriptor
name|dnd
parameter_list|,
name|PermissionStatus
name|ps
parameter_list|,
name|boolean
name|setStoredBlock
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockInfo
name|b
init|=
name|mock
argument_list|(
name|BlockInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|BlockInfoUnderConstruction
name|b1
init|=
name|mock
argument_list|(
name|BlockInfoUnderConstruction
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|b
operator|.
name|getBlockUCState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|penUltState
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|b1
operator|.
name|getBlockUCState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|lastState
argument_list|)
expr_stmt|;
name|BlockInfo
index|[]
name|blocks
decl_stmt|;
name|FSDirectory
name|fsDir
init|=
name|mock
argument_list|(
name|FSDirectory
operator|.
name|class
argument_list|)
decl_stmt|;
name|INodeFileUnderConstruction
name|iNFmock
init|=
name|mock
argument_list|(
name|INodeFileUnderConstruction
operator|.
name|class
argument_list|)
decl_stmt|;
name|fsn
operator|.
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsn
operator|.
name|dir
operator|=
name|fsDir
expr_stmt|;
name|FSImage
name|fsImage
init|=
name|mock
argument_list|(
name|FSImage
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSEditLog
name|editLog
init|=
name|mock
argument_list|(
name|FSEditLog
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fsn
operator|.
name|getFSImage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fsImage
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fsn
operator|.
name|getFSImage
argument_list|()
operator|.
name|getEditLog
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|editLog
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|getFSImage
argument_list|()
operator|.
name|setFSNamesystem
argument_list|(
name|fsn
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|fileBlocksNumber
condition|)
block|{
case|case
literal|0
case|:
name|blocks
operator|=
operator|new
name|BlockInfo
index|[
literal|0
index|]
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|blocks
operator|=
operator|new
name|BlockInfo
index|[]
block|{
name|b1
block|}
expr_stmt|;
name|when
argument_list|(
name|iNFmock
operator|.
name|getLastBlock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|b1
argument_list|)
expr_stmt|;
break|break;
default|default:
name|when
argument_list|(
name|iNFmock
operator|.
name|getPenultimateBlock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|iNFmock
operator|.
name|getLastBlock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|b1
argument_list|)
expr_stmt|;
name|blocks
operator|=
operator|new
name|BlockInfo
index|[]
block|{
name|b
block|,
name|b1
block|}
expr_stmt|;
block|}
name|when
argument_list|(
name|iNFmock
operator|.
name|getBlocks
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|blocks
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|iNFmock
operator|.
name|numBlocks
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|blocks
operator|.
name|length
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|iNFmock
operator|.
name|isUnderConstruction
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|iNFmock
operator|.
name|convertToInodeFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|iNFmock
argument_list|)
expr_stmt|;
name|fsDir
operator|.
name|addFile
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
name|ps
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1l
argument_list|,
literal|"test"
argument_list|,
literal|"test-machine"
argument_list|,
name|dnd
argument_list|,
literal|1001l
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|leaseManager
operator|=
name|mock
argument_list|(
name|LeaseManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|leaseManager
operator|.
name|addLease
argument_list|(
literal|"mock-lease"
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|setStoredBlock
condition|)
block|{
name|when
argument_list|(
name|b1
operator|.
name|getINode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|iNFmock
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|addINode
argument_list|(
name|b1
argument_list|,
name|iNFmock
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|fsDir
operator|.
name|getFileINode
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|iNFmock
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

