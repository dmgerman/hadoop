begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_USER_NAME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_SECONDARY_NAMENODE_KRB_HTTPS_USER_NAME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_SECONDARY_NAMENODE_USER_NAME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestGetImageServlet
specifier|public
class|class
name|TestGetImageServlet
block|{
DECL|field|HOST
specifier|private
specifier|static
specifier|final
name|String
name|HOST
init|=
literal|"foo.com"
decl_stmt|;
DECL|field|KERBEROS_DOMAIN
specifier|private
specifier|static
specifier|final
name|String
name|KERBEROS_DOMAIN
init|=
literal|"@HADOOP.ORG"
decl_stmt|;
DECL|method|getConf ()
specifier|private
specifier|static
name|Configuration
name|getConf
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
literal|"hdfs://"
operator|+
name|HOST
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|,
name|HOST
operator|+
literal|":50090"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|// Worker class to poke the isValidRequestor method with verifying it accepts
comment|// or rejects with these standard allowed principals
DECL|method|verifyIsValidReqBehavior (GetImageServlet gim, boolean shouldSucceed, String msg)
specifier|private
name|void
name|verifyIsValidReqBehavior
parameter_list|(
name|GetImageServlet
name|gim
parameter_list|,
name|boolean
name|shouldSucceed
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
index|[]
name|validRequestors
init|=
block|{
name|DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY
block|,
name|DFS_NAMENODE_USER_NAME_KEY
block|,
name|DFS_SECONDARY_NAMENODE_KRB_HTTPS_USER_NAME_KEY
block|,
name|DFS_SECONDARY_NAMENODE_USER_NAME_KEY
block|}
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|v
range|:
name|validRequestors
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|v
argument_list|,
literal|"a/"
operator|+
name|SecurityUtil
operator|.
name|HOSTNAME_PATTERN
operator|+
name|KERBEROS_DOMAIN
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
name|v
argument_list|,
name|gim
operator|.
name|isValidRequestor
argument_list|(
name|shouldSucceed
condition|?
literal|"a/"
operator|+
name|HOST
operator|+
name|KERBEROS_DOMAIN
else|:
literal|"b/"
operator|+
name|HOST
operator|+
name|KERBEROS_DOMAIN
argument_list|,
name|conf
argument_list|)
argument_list|,
name|shouldSucceed
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|IsValidRequestorAcceptsCorrectly ()
specifier|public
name|void
name|IsValidRequestorAcceptsCorrectly
parameter_list|()
throws|throws
name|IOException
block|{
name|GetImageServlet
name|gim
init|=
operator|new
name|GetImageServlet
argument_list|()
decl_stmt|;
name|verifyIsValidReqBehavior
argument_list|(
name|gim
argument_list|,
literal|true
argument_list|,
literal|"isValidRequestor has rejected a valid requestor: "
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|IsValidRequestorRejectsCorrectly ()
specifier|public
name|void
name|IsValidRequestorRejectsCorrectly
parameter_list|()
throws|throws
name|IOException
block|{
name|GetImageServlet
name|gim
init|=
operator|new
name|GetImageServlet
argument_list|()
decl_stmt|;
comment|// Don't set any valid requestors
name|assertFalse
argument_list|(
literal|"isValidRequestor allowed a requestor despite no values being set"
argument_list|,
name|gim
operator|.
name|isValidRequestor
argument_list|(
literal|"not set"
argument_list|,
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|verifyIsValidReqBehavior
argument_list|(
name|gim
argument_list|,
literal|false
argument_list|,
literal|"isValidRequestor has allowed an invalid requestor: "
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

