begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
operator|.
name|FiTestUtil
operator|.
name|ActionContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskErrorException
import|;
end_import

begin_comment
comment|/** Helper methods and actions for hflush() fault injection tests */
end_comment

begin_class
DECL|class|FiHFlushTestUtil
specifier|public
class|class
name|FiHFlushTestUtil
extends|extends
name|DataTransferTestUtil
block|{
comment|/** {@inheritDoc} */
DECL|method|initTest ()
specifier|public
specifier|static
name|PipelineTest
name|initTest
parameter_list|()
block|{
return|return
name|thepipelinetest
operator|=
operator|new
name|HFlushTest
argument_list|()
return|;
block|}
comment|/** Disk error action for fault injection tests */
DECL|class|DerrAction
specifier|public
specifier|static
class|class
name|DerrAction
extends|extends
name|DataTransferTestUtil
operator|.
name|DataNodeAction
block|{
comment|/**      * @param currentTest The name of the test      * @param index       The index of the datanode      */
DECL|method|DerrAction (String currentTest, int index)
specifier|public
name|DerrAction
parameter_list|(
name|String
name|currentTest
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|super
argument_list|(
name|currentTest
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|run (DatanodeID id)
specifier|public
name|void
name|run
parameter_list|(
name|DatanodeID
name|id
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Pipeline
name|p
init|=
name|getPipelineTest
argument_list|()
operator|.
name|getPipelineForDatanode
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|p
operator|.
name|contains
argument_list|(
name|index
argument_list|,
name|id
argument_list|)
condition|)
block|{
specifier|final
name|String
name|s
init|=
name|super
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|FiTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|s
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DiskErrorException
argument_list|(
name|s
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Class adds new type of action */
DECL|class|HFlushTest
specifier|public
specifier|static
class|class
name|HFlushTest
extends|extends
name|DataTransferTest
block|{
DECL|field|fiCallHFlush
specifier|public
specifier|final
name|ActionContainer
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
name|fiCallHFlush
init|=
operator|new
name|ActionContainer
argument_list|<
name|DatanodeID
argument_list|,
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|fiErrorOnCallHFlush
specifier|public
specifier|final
name|ActionContainer
argument_list|<
name|Integer
argument_list|,
name|RuntimeException
argument_list|>
name|fiErrorOnCallHFlush
init|=
operator|new
name|ActionContainer
argument_list|<
name|Integer
argument_list|,
name|RuntimeException
argument_list|>
argument_list|()
decl_stmt|;
block|}
block|}
end_class

end_unit

