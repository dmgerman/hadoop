begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_class
DECL|class|Pipeline
specifier|public
class|class
name|Pipeline
block|{
DECL|field|datanodes
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|datanodes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|Pipeline (LocatedBlock lb)
name|Pipeline
parameter_list|(
name|LocatedBlock
name|lb
parameter_list|)
block|{
for|for
control|(
name|DatanodeInfo
name|d
range|:
name|lb
operator|.
name|getLocations
argument_list|()
control|)
block|{
name|datanodes
operator|.
name|add
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Does the pipeline contains d? */
DECL|method|contains (DatanodeID d)
specifier|public
name|boolean
name|contains
parameter_list|(
name|DatanodeID
name|d
parameter_list|)
block|{
return|return
name|datanodes
operator|.
name|contains
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|/** Does the pipeline contains d at the n th position? */
DECL|method|contains (int n, DatanodeID d)
specifier|public
name|boolean
name|contains
parameter_list|(
name|int
name|n
parameter_list|,
name|DatanodeID
name|d
parameter_list|)
block|{
return|return
name|d
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
name|n
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
name|datanodes
return|;
block|}
block|}
end_class

end_unit

