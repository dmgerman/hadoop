begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
operator|.
name|DataTransferTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
operator|.
name|FiTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
operator|.
name|PipelineTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
operator|.
name|FiTestUtil
operator|.
name|ActionContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_class
DECL|class|PipelinesTestUtil
specifier|public
class|class
name|PipelinesTestUtil
extends|extends
name|DataTransferTestUtil
block|{
comment|/**    * {@inheritDoc}    */
DECL|method|initTest ()
specifier|public
specifier|static
name|PipelineTest
name|initTest
parameter_list|()
block|{
return|return
name|thepipelinetest
operator|=
operator|new
name|PipelinesTest
argument_list|()
return|;
block|}
comment|/**    * Storing acknowleged bytes num. action for fault injection tests    */
DECL|class|ReceivedCheckAction
specifier|public
specifier|static
class|class
name|ReceivedCheckAction
implements|implements
name|FiTestUtil
operator|.
name|Action
argument_list|<
name|NodeBytes
argument_list|,
name|IOException
argument_list|>
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|rcv
name|LinkedList
argument_list|<
name|NodeBytes
argument_list|>
name|rcv
init|=
operator|(
operator|(
name|PipelinesTest
operator|)
name|getPipelineTest
argument_list|()
operator|)
operator|.
name|received
decl_stmt|;
DECL|field|ack
name|LinkedList
argument_list|<
name|NodeBytes
argument_list|>
name|ack
init|=
operator|(
operator|(
name|PipelinesTest
operator|)
name|getPipelineTest
argument_list|()
operator|)
operator|.
name|acked
decl_stmt|;
comment|/**      * @param name of the test      */
DECL|method|ReceivedCheckAction (String name)
specifier|public
name|ReceivedCheckAction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|run (NodeBytes nb)
specifier|public
name|void
name|run
parameter_list|(
name|NodeBytes
name|nb
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|rcv
init|)
block|{
name|rcv
operator|.
name|add
argument_list|(
name|nb
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeBytes
name|n
range|:
name|rcv
control|)
block|{
name|long
name|counterPartsBytes
init|=
operator|-
literal|1
decl_stmt|;
name|NodeBytes
name|counterPart
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ack
operator|.
name|size
argument_list|()
operator|>
name|rcv
operator|.
name|indexOf
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|counterPart
operator|=
name|ack
operator|.
name|get
argument_list|(
name|rcv
operator|.
name|indexOf
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
name|counterPartsBytes
operator|=
name|counterPart
operator|.
name|bytes
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"FI: Wrong receiving length"
argument_list|,
name|counterPartsBytes
operator|<=
name|n
operator|.
name|bytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|FiTestUtil
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|FiTestUtil
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"FI: before compare of Recv bytes. Expected "
operator|+
name|n
operator|.
name|bytes
operator|+
literal|", got "
operator|+
name|counterPartsBytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Storing acknowleged bytes num. action for fault injection tests    */
DECL|class|AckedCheckAction
specifier|public
specifier|static
class|class
name|AckedCheckAction
implements|implements
name|FiTestUtil
operator|.
name|Action
argument_list|<
name|NodeBytes
argument_list|,
name|IOException
argument_list|>
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|rcv
name|LinkedList
argument_list|<
name|NodeBytes
argument_list|>
name|rcv
init|=
operator|(
operator|(
name|PipelinesTest
operator|)
name|getPipelineTest
argument_list|()
operator|)
operator|.
name|received
decl_stmt|;
DECL|field|ack
name|LinkedList
argument_list|<
name|NodeBytes
argument_list|>
name|ack
init|=
operator|(
operator|(
name|PipelinesTest
operator|)
name|getPipelineTest
argument_list|()
operator|)
operator|.
name|acked
decl_stmt|;
comment|/**      * @param name of the test      */
DECL|method|AckedCheckAction (String name)
specifier|public
name|AckedCheckAction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
DECL|method|run (NodeBytes nb)
specifier|public
name|void
name|run
parameter_list|(
name|NodeBytes
name|nb
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|ack
init|)
block|{
name|ack
operator|.
name|add
argument_list|(
name|nb
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeBytes
name|n
range|:
name|ack
control|)
block|{
name|NodeBytes
name|counterPart
init|=
literal|null
decl_stmt|;
name|long
name|counterPartsBytes
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|rcv
operator|.
name|size
argument_list|()
operator|>
name|ack
operator|.
name|indexOf
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|counterPart
operator|=
name|rcv
operator|.
name|get
argument_list|(
name|ack
operator|.
name|indexOf
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
name|counterPartsBytes
operator|=
name|counterPart
operator|.
name|bytes
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"FI: Wrong acknowledged length"
argument_list|,
name|counterPartsBytes
operator|==
name|n
operator|.
name|bytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|FiTestUtil
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|FiTestUtil
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"FI: before compare of Acked bytes. Expected "
operator|+
name|n
operator|.
name|bytes
operator|+
literal|", got "
operator|+
name|counterPartsBytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Class adds new types of action    */
DECL|class|PipelinesTest
specifier|public
specifier|static
class|class
name|PipelinesTest
extends|extends
name|DataTransferTest
block|{
DECL|field|received
name|LinkedList
argument_list|<
name|NodeBytes
argument_list|>
name|received
init|=
operator|new
name|LinkedList
argument_list|<
name|NodeBytes
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|acked
name|LinkedList
argument_list|<
name|NodeBytes
argument_list|>
name|acked
init|=
operator|new
name|LinkedList
argument_list|<
name|NodeBytes
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|fiCallSetNumBytes
specifier|public
specifier|final
name|ActionContainer
argument_list|<
name|NodeBytes
argument_list|,
name|IOException
argument_list|>
name|fiCallSetNumBytes
init|=
operator|new
name|ActionContainer
argument_list|<
name|NodeBytes
argument_list|,
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|fiCallSetBytesAcked
specifier|public
specifier|final
name|ActionContainer
argument_list|<
name|NodeBytes
argument_list|,
name|IOException
argument_list|>
name|fiCallSetBytesAcked
init|=
operator|new
name|ActionContainer
argument_list|<
name|NodeBytes
argument_list|,
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|suspend
specifier|private
specifier|static
name|boolean
name|suspend
init|=
literal|false
decl_stmt|;
DECL|field|lastQueuedPacket
specifier|private
specifier|static
name|long
name|lastQueuedPacket
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|setSuspend (boolean flag)
specifier|public
name|void
name|setSuspend
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|suspend
operator|=
name|flag
expr_stmt|;
block|}
DECL|method|getSuspend ()
specifier|public
name|boolean
name|getSuspend
parameter_list|()
block|{
return|return
name|suspend
return|;
block|}
DECL|method|setVerified (long packetNum)
specifier|public
name|void
name|setVerified
parameter_list|(
name|long
name|packetNum
parameter_list|)
block|{
name|PipelinesTest
operator|.
name|lastQueuedPacket
operator|=
name|packetNum
expr_stmt|;
block|}
DECL|method|getLastQueued ()
specifier|public
name|long
name|getLastQueued
parameter_list|()
block|{
return|return
name|lastQueuedPacket
return|;
block|}
block|}
DECL|class|NodeBytes
specifier|public
specifier|static
class|class
name|NodeBytes
block|{
DECL|field|id
name|DatanodeID
name|id
decl_stmt|;
DECL|field|bytes
name|long
name|bytes
decl_stmt|;
DECL|method|NodeBytes (DatanodeID id, long bytes)
specifier|public
name|NodeBytes
parameter_list|(
name|DatanodeID
name|id
parameter_list|,
name|long
name|bytes
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

