begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
operator|.
name|DataTransferTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
operator|.
name|FiHFlushTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
operator|.
name|FiHFlushTestUtil
operator|.
name|DerrAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
operator|.
name|FiHFlushTestUtil
operator|.
name|HFlushTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
operator|.
name|FiTestUtil
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/** Class provides basic fault injection tests according to the test plan     of HDFS-265  */
end_comment

begin_class
DECL|class|TestFiHFlush
specifier|public
class|class
name|TestFiHFlush
block|{
comment|/** Methods initializes a test and sets required actions to be used later by    * an injected advice    * @param conf mini cluster configuration    * @param methodName String representation of a test method invoking this     * method    * @param block_size needed size of file's block    * @param a is an action to be set for the set    * @throws IOException in case of any errors    */
DECL|method|runDiskErrorTest (final Configuration conf, final String methodName, final int block_size, DerrAction a, int index, boolean trueVerification)
specifier|private
specifier|static
name|void
name|runDiskErrorTest
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|methodName
parameter_list|,
specifier|final
name|int
name|block_size
parameter_list|,
name|DerrAction
name|a
parameter_list|,
name|int
name|index
parameter_list|,
name|boolean
name|trueVerification
parameter_list|)
throws|throws
name|IOException
block|{
name|FiTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|methodName
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
specifier|final
name|HFlushTest
name|hft
init|=
operator|(
name|HFlushTest
operator|)
name|FiHFlushTestUtil
operator|.
name|initTest
argument_list|()
decl_stmt|;
name|hft
operator|.
name|fiCallHFlush
operator|.
name|set
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|hft
operator|.
name|fiErrorOnCallHFlush
operator|.
name|set
argument_list|(
operator|new
name|DataTransferTestUtil
operator|.
name|VerificationAction
argument_list|(
name|methodName
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|TestHFlush
operator|.
name|doTheJob
argument_list|(
name|conf
argument_list|,
name|methodName
argument_list|,
name|block_size
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|trueVerification
condition|)
name|assertTrue
argument_list|(
literal|"Some of expected conditions weren't detected"
argument_list|,
name|hft
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** The tests calls     * {@link #runDiskErrorTest(Configuration, String, int, DerrAction, int, boolean)}    * to make a number of writes within a block boundaries.    * Although hflush() is called the test shouldn't expect an IOException    * in this case because the invocation is happening after write() call     * is complete when pipeline doesn't exist anymore.    * Thus, injected fault won't be triggered for 0th datanode    */
annotation|@
name|Test
DECL|method|hFlushFi01_a ()
specifier|public
name|void
name|hFlushFi01_a
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|methodName
init|=
name|FiTestUtil
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|runDiskErrorTest
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|,
name|methodName
argument_list|,
name|AppendTestUtil
operator|.
name|BLOCK_SIZE
argument_list|,
operator|new
name|DerrAction
argument_list|(
name|methodName
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** The tests calls     * {@link #runDiskErrorTest(Configuration, String, int, DerrAction, int, boolean)}    * to make a number of writes across a block boundaries.    * hflush() is called after each write() during a pipeline life time.    * Thus, injected fault ought to be triggered for 0th datanode    */
annotation|@
name|Test
DECL|method|hFlushFi01_b ()
specifier|public
name|void
name|hFlushFi01_b
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|methodName
init|=
name|FiTestUtil
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|int
name|customPerChecksumSize
init|=
literal|512
decl_stmt|;
name|int
name|customBlockSize
init|=
name|customPerChecksumSize
operator|*
literal|3
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|customPerChecksumSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|customBlockSize
argument_list|)
expr_stmt|;
name|runDiskErrorTest
argument_list|(
name|conf
argument_list|,
name|methodName
argument_list|,
name|customBlockSize
argument_list|,
operator|new
name|DerrAction
argument_list|(
name|methodName
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Similar to {@link #hFlushFi01_b()} but writing happens    * across block and checksum's boundaries    */
annotation|@
name|Test
DECL|method|hFlushFi01_c ()
specifier|public
name|void
name|hFlushFi01_c
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|methodName
init|=
name|FiTestUtil
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|int
name|customPerChecksumSize
init|=
literal|400
decl_stmt|;
name|int
name|customBlockSize
init|=
name|customPerChecksumSize
operator|*
literal|3
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|customPerChecksumSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|customBlockSize
argument_list|)
expr_stmt|;
name|runDiskErrorTest
argument_list|(
name|conf
argument_list|,
name|methodName
argument_list|,
name|customBlockSize
argument_list|,
operator|new
name|DerrAction
argument_list|(
name|methodName
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Similar to {@link #hFlushFi01_a()} but for a pipeline's 1st datanode    */
annotation|@
name|Test
DECL|method|hFlushFi02_a ()
specifier|public
name|void
name|hFlushFi02_a
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|methodName
init|=
name|FiTestUtil
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|runDiskErrorTest
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|,
name|methodName
argument_list|,
name|AppendTestUtil
operator|.
name|BLOCK_SIZE
argument_list|,
operator|new
name|DerrAction
argument_list|(
name|methodName
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** Similar to {@link #hFlushFi01_b()} but for a pipeline's 1st datanode    */
annotation|@
name|Test
DECL|method|hFlushFi02_b ()
specifier|public
name|void
name|hFlushFi02_b
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|methodName
init|=
name|FiTestUtil
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|int
name|customPerChecksumSize
init|=
literal|512
decl_stmt|;
name|int
name|customBlockSize
init|=
name|customPerChecksumSize
operator|*
literal|3
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|customPerChecksumSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|customBlockSize
argument_list|)
expr_stmt|;
name|runDiskErrorTest
argument_list|(
name|conf
argument_list|,
name|methodName
argument_list|,
name|customBlockSize
argument_list|,
operator|new
name|DerrAction
argument_list|(
name|methodName
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Similar to {@link #hFlushFi01_c()} but for a pipeline's 1st datanode    */
annotation|@
name|Test
DECL|method|hFlushFi02_c ()
specifier|public
name|void
name|hFlushFi02_c
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|methodName
init|=
name|FiTestUtil
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|int
name|customPerChecksumSize
init|=
literal|400
decl_stmt|;
name|int
name|customBlockSize
init|=
name|customPerChecksumSize
operator|*
literal|3
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|customPerChecksumSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|customBlockSize
argument_list|)
expr_stmt|;
name|runDiskErrorTest
argument_list|(
name|conf
argument_list|,
name|methodName
argument_list|,
name|customBlockSize
argument_list|,
operator|new
name|DerrAction
argument_list|(
name|methodName
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Similar to {@link #hFlushFi01_a()} but for a pipeline's 2nd datanode    */
annotation|@
name|Test
DECL|method|hFlushFi03_a ()
specifier|public
name|void
name|hFlushFi03_a
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|methodName
init|=
name|FiTestUtil
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|runDiskErrorTest
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|,
name|methodName
argument_list|,
name|AppendTestUtil
operator|.
name|BLOCK_SIZE
argument_list|,
operator|new
name|DerrAction
argument_list|(
name|methodName
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** Similar to {@link #hFlushFi01_b()} but for a pipeline's 2nd datanode    */
annotation|@
name|Test
DECL|method|hFlushFi03_b ()
specifier|public
name|void
name|hFlushFi03_b
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|methodName
init|=
name|FiTestUtil
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|int
name|customPerChecksumSize
init|=
literal|512
decl_stmt|;
name|int
name|customBlockSize
init|=
name|customPerChecksumSize
operator|*
literal|3
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|customPerChecksumSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|customBlockSize
argument_list|)
expr_stmt|;
name|runDiskErrorTest
argument_list|(
name|conf
argument_list|,
name|methodName
argument_list|,
name|customBlockSize
argument_list|,
operator|new
name|DerrAction
argument_list|(
name|methodName
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Similar to {@link #hFlushFi01_c()} but for a pipeline's 2nd datanode    */
annotation|@
name|Test
DECL|method|hFlushFi03_c ()
specifier|public
name|void
name|hFlushFi03_c
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|methodName
init|=
name|FiTestUtil
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|int
name|customPerChecksumSize
init|=
literal|400
decl_stmt|;
name|int
name|customBlockSize
init|=
name|customPerChecksumSize
operator|*
literal|3
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|customPerChecksumSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|customBlockSize
argument_list|)
expr_stmt|;
name|runDiskErrorTest
argument_list|(
name|conf
argument_list|,
name|methodName
argument_list|,
name|customBlockSize
argument_list|,
operator|new
name|DerrAction
argument_list|(
name|methodName
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

