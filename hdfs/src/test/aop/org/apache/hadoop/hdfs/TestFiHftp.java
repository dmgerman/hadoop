begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FSDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFiHftp
specifier|public
class|class
name|TestFiHftp
block|{
DECL|field|LOG
specifier|final
name|Log
name|LOG
init|=
name|FileSystem
operator|.
name|LOG
decl_stmt|;
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|DATANODE_NUM
specifier|static
specifier|final
name|short
name|DATANODE_NUM
init|=
literal|1
decl_stmt|;
DECL|field|ran
specifier|static
specifier|final
name|Random
name|ran
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|buffer
specifier|static
specifier|final
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1
operator|<<
literal|16
index|]
decl_stmt|;
DECL|field|md5
specifier|static
specifier|final
name|MessageDigest
name|md5
decl_stmt|;
static|static
block|{
try|try
block|{
name|md5
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createFile (FileSystem fs, Path name, long length, short replication, long blocksize)
specifier|private
specifier|static
name|byte
index|[]
name|createFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|name
parameter_list|,
name|long
name|length
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blocksize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|false
argument_list|,
literal|4096
argument_list|,
name|replication
argument_list|,
name|blocksize
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|long
name|n
init|=
name|length
init|;
name|n
operator|>
literal|0
condition|;
control|)
block|{
name|ran
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
specifier|final
name|int
name|w
init|=
name|n
operator|<
name|buffer
operator|.
name|length
condition|?
operator|(
name|int
operator|)
name|n
else|:
name|buffer
operator|.
name|length
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|md5
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|n
operator|-=
name|w
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
return|return
name|md5
operator|.
name|digest
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testHftpOpen ()
specifier|public
name|void
name|testHftpOpen
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DATANODE_NUM
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|//test with a file
comment|//which is larger than the servlet response buffer size
block|{
specifier|final
name|long
name|blocksize
init|=
literal|1L
operator|<<
literal|20
decl_stmt|;
comment|//
specifier|final
name|long
name|filesize
init|=
literal|2
operator|*
name|blocksize
operator|+
literal|100
decl_stmt|;
name|runTestHftpOpen
argument_list|(
name|cluster
argument_list|,
literal|"/foo"
argument_list|,
name|blocksize
argument_list|,
name|filesize
argument_list|)
expr_stmt|;
block|}
comment|//test with a small file
comment|//which is smaller than the servlet response buffer size
block|{
specifier|final
name|long
name|blocksize
init|=
literal|1L
operator|<<
literal|10
decl_stmt|;
comment|//
specifier|final
name|long
name|filesize
init|=
literal|2
operator|*
name|blocksize
operator|+
literal|100
decl_stmt|;
name|runTestHftpOpen
argument_list|(
name|cluster
argument_list|,
literal|"/small"
argument_list|,
name|blocksize
argument_list|,
name|filesize
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * A test with a 3GB file.    * It may take ~6 minutes.    */
DECL|method|largeFileTest (final MiniDFSCluster cluster)
name|void
name|largeFileTest
parameter_list|(
specifier|final
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|blocksize
init|=
literal|128L
operator|<<
literal|20
decl_stmt|;
specifier|final
name|long
name|filesize
init|=
literal|3L
operator|<<
literal|30
decl_stmt|;
name|runTestHftpOpen
argument_list|(
name|cluster
argument_list|,
literal|"/large"
argument_list|,
name|blocksize
argument_list|,
name|filesize
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param blocksize    * @param filesize must be> block size     */
DECL|method|runTestHftpOpen (final MiniDFSCluster cluster, final String file, final long blocksize, final long filesize)
specifier|private
name|void
name|runTestHftpOpen
parameter_list|(
specifier|final
name|MiniDFSCluster
name|cluster
parameter_list|,
specifier|final
name|String
name|file
parameter_list|,
specifier|final
name|long
name|blocksize
parameter_list|,
specifier|final
name|long
name|filesize
parameter_list|)
throws|throws
name|IOException
block|{
comment|//create a file
specifier|final
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|filepath
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|filemd5
init|=
name|createFile
argument_list|(
name|dfs
argument_list|,
name|filepath
argument_list|,
name|filesize
argument_list|,
name|DATANODE_NUM
argument_list|,
name|blocksize
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|dfs
argument_list|,
name|filepath
argument_list|,
name|DATANODE_NUM
argument_list|)
expr_stmt|;
comment|//test hftp open and read
specifier|final
name|HftpFileSystem
name|hftpfs
init|=
name|cluster
operator|.
name|getHftpFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
block|{
specifier|final
name|FSDataInputStream
name|in
init|=
name|hftpfs
operator|.
name|open
argument_list|(
name|filepath
argument_list|)
decl_stmt|;
name|long
name|bytesRead
init|=
literal|0
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|r
init|;
operator|(
name|r
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|;
control|)
block|{
name|bytesRead
operator|+=
name|r
expr_stmt|;
name|md5
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"bytesRead="
operator|+
name|bytesRead
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|filesize
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|filemd5
argument_list|,
name|md5
operator|.
name|digest
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//delete the second block
specifier|final
name|DFSClient
name|client
init|=
name|dfs
operator|.
name|getClient
argument_list|()
decl_stmt|;
specifier|final
name|LocatedBlocks
name|locatedblocks
init|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|file
argument_list|,
literal|0
argument_list|,
name|filesize
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
name|filesize
operator|-
literal|1
operator|)
operator|/
name|blocksize
operator|+
literal|1
argument_list|,
name|locatedblocks
operator|.
name|locatedBlockCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LocatedBlock
name|lb
init|=
name|locatedblocks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ExtendedBlock
name|blk
init|=
name|lb
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|blocksize
argument_list|,
name|lb
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeInfo
index|[]
name|datanodeinfos
init|=
name|lb
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DATANODE_NUM
argument_list|,
name|datanodeinfos
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNode
argument_list|(
name|datanodeinfos
index|[
literal|0
index|]
operator|.
name|getIpcPort
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"dn="
operator|+
name|dn
operator|+
literal|", blk="
operator|+
name|blk
operator|+
literal|" (length="
operator|+
name|blk
operator|.
name|getNumBytes
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
specifier|final
name|FSDataset
name|data
init|=
operator|(
name|FSDataset
operator|)
name|dn
operator|.
name|getFSDataset
argument_list|()
decl_stmt|;
specifier|final
name|File
name|blkfile
init|=
name|data
operator|.
name|getBlockFile
argument_list|(
name|blk
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blkfile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
comment|//read again by hftp, should get an exception
name|LOG
operator|.
name|info
argument_list|(
literal|"hftpfs.getUri() = "
operator|+
name|hftpfs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ContentSummary
name|cs
init|=
name|hftpfs
operator|.
name|getContentSummary
argument_list|(
name|filepath
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"hftpfs.getContentSummary = "
operator|+
name|cs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|filesize
argument_list|,
name|cs
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FSDataInputStream
name|in
init|=
name|hftpfs
operator|.
name|open
argument_list|(
name|hftpfs
operator|.
name|makeQualified
argument_list|(
name|filepath
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|bytesRead
init|=
literal|0
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|r
init|;
operator|(
name|r
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|;
control|)
block|{
name|bytesRead
operator|+=
name|r
expr_stmt|;
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"GOOD: get an exception"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"bytesRead="
operator|+
name|bytesRead
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

