begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestHelper
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Rename names src to dst. Rename is done using following steps:  *<ul>  *<li>Checks are made to ensure src exists and appropriate flags are being  * passed to overwrite existing destination.  *<li>src is removed.  *<li>dst if it exists is removed.  *<li>src is renamed and added to directory tree as dst.  *</ul>  *   * During any of the above steps, the state of src and dst is reverted back to  * what it was prior to rename. This test ensures that the state is reverted  * back.  *   * This test uses AspectJ to simulate failures.  */
end_comment

begin_class
DECL|class|TestFiRename
specifier|public
class|class
name|TestFiRename
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFiRename
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|removeChild
specifier|private
specifier|static
name|String
name|removeChild
init|=
literal|""
decl_stmt|;
DECL|field|addChild
specifier|private
specifier|static
name|String
name|addChild
init|=
literal|""
decl_stmt|;
DECL|field|data
specifier|private
specifier|static
name|byte
index|[]
name|data
init|=
block|{
literal|0
block|}
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|TEST_ROOT_DIR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
operator|+
literal|"/test"
decl_stmt|;
DECL|field|CONF
specifier|private
specifier|static
name|Configuration
name|CONF
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
static|static
block|{
name|CONF
operator|.
name|setInt
argument_list|(
literal|"io.bytes.per.checksum"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|fc
specifier|private
name|FileContext
name|fc
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|restartCluster
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fc
operator|!=
literal|null
condition|)
block|{
name|fc
operator|.
name|delete
argument_list|(
name|getTestRootPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|restartCluster (boolean format)
specifier|private
name|void
name|restartCluster
parameter_list|(
name|boolean
name|format
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|format
argument_list|(
name|format
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|(
literal|0
argument_list|)
argument_list|,
name|CONF
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns true to indicate an exception should be thrown to simulate failure    * during removal of a node from directory tree.    */
DECL|method|throwExceptionOnRemove (String child)
specifier|public
specifier|static
name|boolean
name|throwExceptionOnRemove
parameter_list|(
name|String
name|child
parameter_list|)
block|{
name|boolean
name|status
init|=
name|removeChild
operator|.
name|endsWith
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
condition|)
block|{
name|removeChild
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
comment|/**    * Returns true to indicate an exception should be thrown to simulate failure    * during addition of a node to directory tree.    */
DECL|method|throwExceptionOnAdd (String child)
specifier|public
specifier|static
name|boolean
name|throwExceptionOnAdd
parameter_list|(
name|String
name|child
parameter_list|)
block|{
name|boolean
name|status
init|=
name|addChild
operator|.
name|endsWith
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
condition|)
block|{
name|addChild
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
comment|/** Set child name on removal of which failure should be simulated */
DECL|method|exceptionOnRemove (String child)
specifier|public
specifier|static
name|void
name|exceptionOnRemove
parameter_list|(
name|String
name|child
parameter_list|)
block|{
name|removeChild
operator|=
name|child
expr_stmt|;
name|addChild
operator|=
literal|""
expr_stmt|;
block|}
comment|/** Set child name on addition of which failure should be simulated */
DECL|method|exceptionOnAdd (String child)
specifier|public
specifier|static
name|void
name|exceptionOnAdd
parameter_list|(
name|String
name|child
parameter_list|)
block|{
name|removeChild
operator|=
literal|""
expr_stmt|;
name|addChild
operator|=
name|child
expr_stmt|;
block|}
DECL|method|getTestRootPath ()
specifier|private
name|Path
name|getTestRootPath
parameter_list|()
block|{
return|return
name|fc
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getTestPath (String pathString)
specifier|private
name|Path
name|getTestPath
parameter_list|(
name|String
name|pathString
parameter_list|)
block|{
return|return
name|fc
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
name|pathString
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createFile (Path path)
specifier|private
name|void
name|createFile
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|fc
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|,
name|Options
operator|.
name|CreateOpts
operator|.
name|createParent
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Rename test when src exists and dst does not */
annotation|@
name|Test
DECL|method|testFailureNonExistentDst ()
specifier|public
name|void
name|testFailureNonExistentDst
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|src
init|=
name|getTestPath
argument_list|(
literal|"testFailureNonExistenSrc/dir/src"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dst
init|=
name|getTestPath
argument_list|(
literal|"testFailureNonExistenSrc/newdir/dst"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
comment|// During rename, while removing src, an exception is thrown
name|TestFiRename
operator|.
name|exceptionOnRemove
argument_list|(
name|src
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
comment|// During rename, while adding dst an exception is thrown
name|TestFiRename
operator|.
name|exceptionOnAdd
argument_list|(
name|dst
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
comment|/** Rename test when src and dst exist */
annotation|@
name|Test
DECL|method|testFailuresExistingDst ()
specifier|public
name|void
name|testFailuresExistingDst
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|src
init|=
name|getTestPath
argument_list|(
literal|"testFailuresExistingDst/dir/src"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dst
init|=
name|getTestPath
argument_list|(
literal|"testFailuresExistingDst/newdir/dst"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|dst
argument_list|)
expr_stmt|;
comment|// During rename, while removing src, an exception is thrown
name|TestFiRename
operator|.
name|exceptionOnRemove
argument_list|(
name|src
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
comment|// During rename, while removing dst, an exception is thrown
name|TestFiRename
operator|.
name|exceptionOnRemove
argument_list|(
name|dst
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
comment|// During rename, while adding dst an exception is thrown
name|TestFiRename
operator|.
name|exceptionOnAdd
argument_list|(
name|dst
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
block|}
comment|/** Rename test where both src and dst are files */
annotation|@
name|Test
DECL|method|testDeletionOfDstFile ()
specifier|public
name|void
name|testDeletionOfDstFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|src
init|=
name|getTestPath
argument_list|(
literal|"testDeletionOfDstFile/dir/src"
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
name|getTestPath
argument_list|(
literal|"testDeletionOfDstFile/newdir/dst"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|dst
argument_list|)
expr_stmt|;
specifier|final
name|FSNamesystem
name|namesystem
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
specifier|final
name|long
name|blocks
init|=
name|namesystem
operator|.
name|getBlocksTotal
argument_list|()
decl_stmt|;
specifier|final
name|long
name|fileCount
init|=
name|namesystem
operator|.
name|getFilesTotal
argument_list|()
decl_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
comment|// After successful rename the blocks corresponing dst are deleted
name|Assert
operator|.
name|assertEquals
argument_list|(
name|blocks
operator|-
literal|1
argument_list|,
name|namesystem
operator|.
name|getBlocksTotal
argument_list|()
argument_list|)
expr_stmt|;
comment|// After successful rename dst file is deleted
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fileCount
operator|-
literal|1
argument_list|,
name|namesystem
operator|.
name|getFilesTotal
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restart the cluster to ensure new rename operation
comment|// recorded in editlog is processed right
name|restartCluster
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|boolean
name|exception
init|=
literal|true
decl_stmt|;
name|src
operator|=
name|getTestPath
argument_list|(
literal|"testDeletionOfDstFile/dir/src"
argument_list|)
expr_stmt|;
name|dst
operator|=
name|getTestPath
argument_list|(
literal|"testDeletionOfDstFile/newdir/dst"
argument_list|)
expr_stmt|;
while|while
condition|(
name|exception
operator|&&
name|count
operator|<
literal|5
condition|)
block|{
try|try
block|{
name|exists
argument_list|(
name|fc
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception "
operator|+
literal|" count "
operator|+
name|count
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc
argument_list|,
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fc
argument_list|,
name|dst
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Rename test where both src and dst are directories */
annotation|@
name|Test
DECL|method|testDeletionOfDstDirectory ()
specifier|public
name|void
name|testDeletionOfDstDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|src
init|=
name|getTestPath
argument_list|(
literal|"testDeletionOfDstDirectory/dir/src"
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
name|getTestPath
argument_list|(
literal|"testDeletionOfDstDirectory/newdir/dst"
argument_list|)
decl_stmt|;
name|fc
operator|.
name|mkdir
argument_list|(
name|src
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fc
operator|.
name|mkdir
argument_list|(
name|dst
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FSNamesystem
name|namesystem
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|long
name|fileCount
init|=
name|namesystem
operator|.
name|getFilesTotal
argument_list|()
decl_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
comment|// After successful rename dst directory is deleted
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fileCount
operator|-
literal|1
argument_list|,
name|namesystem
operator|.
name|getFilesTotal
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restart the cluster to ensure new rename operation
comment|// recorded in editlog is processed right
name|restartCluster
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|src
operator|=
name|getTestPath
argument_list|(
literal|"testDeletionOfDstDirectory/dir/src"
argument_list|)
expr_stmt|;
name|dst
operator|=
name|getTestPath
argument_list|(
literal|"testDeletionOfDstDirectory/newdir/dst"
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|boolean
name|exception
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|exception
operator|&&
name|count
operator|<
literal|5
condition|)
block|{
try|try
block|{
name|exists
argument_list|(
name|fc
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception "
operator|+
literal|" count "
operator|+
name|count
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc
argument_list|,
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fc
argument_list|,
name|dst
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|rename (Path src, Path dst, boolean exception, boolean srcExists, boolean dstExists, Rename... options)
specifier|private
name|void
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|exception
parameter_list|,
name|boolean
name|srcExists
parameter_list|,
name|boolean
name|dstExists
parameter_list|,
name|Rename
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|fc
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected exception is not thrown"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|srcExists
argument_list|,
name|exists
argument_list|(
name|fc
argument_list|,
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dstExists
argument_list|,
name|exists
argument_list|(
name|fc
argument_list|,
name|dst
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

