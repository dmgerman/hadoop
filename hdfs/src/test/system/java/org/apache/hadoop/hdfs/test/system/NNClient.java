begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.test.system
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|test
operator|.
name|system
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|process
operator|.
name|RemoteProcess
import|;
end_import

begin_class
DECL|class|NNClient
specifier|public
class|class
name|NNClient
extends|extends
name|HDFSDaemonClient
argument_list|<
name|NNProtocol
argument_list|>
block|{
DECL|field|proxy
name|NNProtocol
name|proxy
decl_stmt|;
DECL|field|HADOOP_NAMENODE_OPTS_ENV
specifier|private
specifier|static
specifier|final
name|String
name|HADOOP_NAMENODE_OPTS_ENV
init|=
literal|"HADOOP_NAMENODE_OPTS"
decl_stmt|;
DECL|method|NNClient (Configuration conf, RemoteProcess process)
specifier|public
name|NNClient
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RemoteProcess
name|process
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|process
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|connect ()
specifier|public
name|void
name|connect
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isConnected
argument_list|()
condition|)
return|return;
name|String
name|sockAddrStr
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|getConf
argument_list|()
argument_list|)
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
if|if
condition|(
name|sockAddrStr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Namenode IPC address is not set"
argument_list|)
throw|;
block|}
name|String
index|[]
name|splits
init|=
name|sockAddrStr
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|splits
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Namenode report IPC is not correctly configured"
argument_list|)
throw|;
block|}
name|String
name|port
init|=
name|splits
index|[
literal|1
index|]
decl_stmt|;
name|String
name|sockAddr
init|=
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|port
decl_stmt|;
name|InetSocketAddress
name|bindAddr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|sockAddr
argument_list|)
decl_stmt|;
name|proxy
operator|=
operator|(
name|NNProtocol
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|NNProtocol
operator|.
name|class
argument_list|,
name|NNProtocol
operator|.
name|versionID
argument_list|,
name|bindAddr
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|setConnected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|disconnect ()
specifier|public
name|void
name|disconnect
parameter_list|()
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|setConnected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProxy ()
specifier|protected
name|NNProtocol
name|getProxy
parameter_list|()
block|{
return|return
name|proxy
return|;
block|}
annotation|@
name|Override
DECL|method|getHadoopOptsEnvName ()
specifier|public
name|String
name|getHadoopOptsEnvName
parameter_list|()
block|{
return|return
name|HADOOP_NAMENODE_OPTS_ENV
return|;
block|}
comment|/**    * Concrete implementation of abstract super class method    * @param attributeName name of the attribute to be retrieved    * @return Object value of the given attribute    * @throws IOException is thrown in case of communication errors    */
annotation|@
name|Override
DECL|method|getDaemonAttribute (String attributeName)
specifier|public
name|Object
name|getDaemonAttribute
parameter_list|(
name|String
name|attributeName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getJmxAttribute
argument_list|(
literal|"NameNode"
argument_list|,
literal|"NameNodeInfo"
argument_list|,
name|attributeName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

