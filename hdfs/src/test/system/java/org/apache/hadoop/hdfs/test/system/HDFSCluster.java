begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.test.system
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|test
operator|.
name|system
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|AbstractDaemonClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|AbstractDaemonCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|process
operator|.
name|ClusterProcessManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|process
operator|.
name|HadoopDaemonRemoteCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|process
operator|.
name|MultiUserHadoopDaemonRemoteCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|process
operator|.
name|RemoteProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|process
operator|.
name|HadoopDaemonRemoteCluster
operator|.
name|HadoopDaemonInfo
import|;
end_import

begin_class
DECL|class|HDFSCluster
specifier|public
class|class
name|HDFSCluster
extends|extends
name|AbstractDaemonCluster
block|{
static|static
block|{
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
literal|"hdfs-site.xml"
argument_list|)
expr_stmt|;
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HDFSCluster
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CLUSTER_PROCESS_MGR_IMPL
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER_PROCESS_MGR_IMPL
init|=
literal|"test.system.hdfs.clusterprocess.impl.class"
decl_stmt|;
DECL|method|HDFSCluster (Configuration conf, ClusterProcessManager rCluster)
specifier|private
name|HDFSCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ClusterProcessManager
name|rCluster
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|rCluster
argument_list|)
expr_stmt|;
block|}
comment|/**    * Key is used to to point to the file containing hostnames of tasktrackers    */
DECL|field|CONF_HADOOP_DN_HOSTFILE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|CONF_HADOOP_DN_HOSTFILE_NAME
init|=
literal|"test.system.hdrc.dn.hostfile"
decl_stmt|;
DECL|field|hdfsDaemonInfos
specifier|private
specifier|static
name|List
argument_list|<
name|HadoopDaemonInfo
argument_list|>
name|hdfsDaemonInfos
decl_stmt|;
DECL|field|nnHostName
specifier|private
specifier|static
name|String
name|nnHostName
decl_stmt|;
DECL|field|DN_hostFileName
specifier|private
specifier|static
name|String
name|DN_hostFileName
decl_stmt|;
DECL|enum|Role
DECL|enumConstant|NN
DECL|enumConstant|DN
specifier|protected
enum|enum
name|Role
block|{
name|NN
block|,
name|DN
block|}
annotation|@
name|Override
specifier|protected
name|AbstractDaemonClient
DECL|method|createClient (RemoteProcess process)
name|createClient
parameter_list|(
name|RemoteProcess
name|process
parameter_list|)
throws|throws
name|IOException
block|{
name|Enum
argument_list|<
name|?
argument_list|>
name|pRole
init|=
name|process
operator|.
name|getRole
argument_list|()
decl_stmt|;
if|if
condition|(
name|Role
operator|.
name|NN
operator|.
name|equals
argument_list|(
name|pRole
argument_list|)
condition|)
block|{
return|return
name|createNNClient
argument_list|(
name|process
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Role
operator|.
name|DN
operator|.
name|equals
argument_list|(
name|pRole
argument_list|)
condition|)
block|{
return|return
name|createDNClient
argument_list|(
name|process
argument_list|)
return|;
block|}
else|else
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Role "
operator|+
name|pRole
operator|+
literal|" is not supported by HDFSCluster"
argument_list|)
throw|;
block|}
DECL|method|createDNClient (RemoteProcess dnDaemon)
specifier|protected
name|DNClient
name|createDNClient
parameter_list|(
name|RemoteProcess
name|dnDaemon
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DNClient
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|dnDaemon
argument_list|)
return|;
block|}
DECL|method|createNNClient (RemoteProcess nnDaemon)
specifier|protected
name|NNClient
name|createNNClient
parameter_list|(
name|RemoteProcess
name|nnDaemon
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|NNClient
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|nnDaemon
argument_list|)
return|;
block|}
DECL|method|getNNClient ()
specifier|public
name|NNClient
name|getNNClient
parameter_list|()
block|{
name|Iterator
argument_list|<
name|AbstractDaemonClient
argument_list|>
name|iter
init|=
name|getDaemons
argument_list|()
operator|.
name|get
argument_list|(
name|Role
operator|.
name|NN
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|(
name|NNClient
operator|)
name|iter
operator|.
name|next
argument_list|()
return|;
block|}
DECL|method|getDNClients ()
specifier|public
name|List
argument_list|<
name|DNClient
argument_list|>
name|getDNClients
parameter_list|()
block|{
return|return
operator|(
name|List
operator|)
name|getDaemons
argument_list|()
operator|.
name|get
argument_list|(
name|Role
operator|.
name|DN
argument_list|)
return|;
block|}
DECL|method|getDNClient (String hostname)
specifier|public
name|DNClient
name|getDNClient
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
for|for
control|(
name|DNClient
name|dnC
range|:
name|getDNClients
argument_list|()
control|)
block|{
if|if
condition|(
name|dnC
operator|.
name|getHostName
argument_list|()
operator|.
name|equals
argument_list|(
name|hostname
argument_list|)
condition|)
return|return
name|dnC
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|class|HDFSProcessManager
specifier|public
specifier|static
class|class
name|HDFSProcessManager
extends|extends
name|HadoopDaemonRemoteCluster
block|{
DECL|method|HDFSProcessManager ()
specifier|public
name|HDFSProcessManager
parameter_list|()
block|{
name|super
argument_list|(
name|hdfsDaemonInfos
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MultiUserHDFSProcessManager
specifier|public
specifier|static
class|class
name|MultiUserHDFSProcessManager
extends|extends
name|MultiUserHadoopDaemonRemoteCluster
block|{
DECL|method|MultiUserHDFSProcessManager ()
specifier|public
name|MultiUserHDFSProcessManager
parameter_list|()
block|{
name|super
argument_list|(
name|hdfsDaemonInfos
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createCluster (Configuration conf)
specifier|public
specifier|static
name|HDFSCluster
name|createCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|addResource
argument_list|(
literal|"system-test.xml"
argument_list|)
expr_stmt|;
name|String
name|sockAddrStr
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
if|if
condition|(
name|sockAddrStr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Namenode IPC address is not set"
argument_list|)
throw|;
block|}
name|String
index|[]
name|splits
init|=
name|sockAddrStr
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|splits
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Namenode report IPC is not correctly configured"
argument_list|)
throw|;
block|}
name|nnHostName
operator|=
name|splits
index|[
literal|0
index|]
expr_stmt|;
name|DN_hostFileName
operator|=
name|conf
operator|.
name|get
argument_list|(
name|CONF_HADOOP_DN_HOSTFILE_NAME
argument_list|,
literal|"slaves"
argument_list|)
expr_stmt|;
name|hdfsDaemonInfos
operator|=
operator|new
name|ArrayList
argument_list|<
name|HadoopDaemonInfo
argument_list|>
argument_list|()
expr_stmt|;
name|hdfsDaemonInfos
operator|.
name|add
argument_list|(
operator|new
name|HadoopDaemonInfo
argument_list|(
literal|"namenode"
argument_list|,
name|Role
operator|.
name|NN
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|nnHostName
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hdfsDaemonInfos
operator|.
name|add
argument_list|(
operator|new
name|HadoopDaemonInfo
argument_list|(
literal|"datanode"
argument_list|,
name|Role
operator|.
name|DN
argument_list|,
name|DN_hostFileName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|implKlass
init|=
name|conf
operator|.
name|get
argument_list|(
name|CLUSTER_PROCESS_MGR_IMPL
argument_list|)
decl_stmt|;
if|if
condition|(
name|implKlass
operator|==
literal|null
operator|||
name|implKlass
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|implKlass
operator|=
name|HDFSCluster
operator|.
name|HDFSProcessManager
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|Class
argument_list|<
name|ClusterProcessManager
argument_list|>
name|klass
init|=
operator|(
name|Class
argument_list|<
name|ClusterProcessManager
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|implKlass
argument_list|)
decl_stmt|;
name|ClusterProcessManager
name|clusterProcessMgr
init|=
name|klass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created ClusterProcessManager as "
operator|+
name|implKlass
argument_list|)
expr_stmt|;
name|clusterProcessMgr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
operator|new
name|HDFSCluster
argument_list|(
name|conf
argument_list|,
name|clusterProcessMgr
argument_list|)
return|;
block|}
block|}
end_class

end_unit

