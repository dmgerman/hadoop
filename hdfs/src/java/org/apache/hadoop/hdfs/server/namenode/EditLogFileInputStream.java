begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * An implementation of the abstract class {@link EditLogInputStream}, which  * reads edits from a local file.  */
end_comment

begin_class
DECL|class|EditLogFileInputStream
class|class
name|EditLogFileInputStream
extends|extends
name|EditLogInputStream
block|{
DECL|field|file
specifier|private
name|File
name|file
decl_stmt|;
DECL|field|fStream
specifier|private
name|FileInputStream
name|fStream
decl_stmt|;
DECL|method|EditLogFileInputStream (File name)
name|EditLogFileInputStream
parameter_list|(
name|File
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|file
operator|=
name|name
expr_stmt|;
name|fStream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// JournalStream
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|file
operator|.
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// JournalStream
DECL|method|getType ()
specifier|public
name|JournalType
name|getType
parameter_list|()
block|{
return|return
name|JournalType
operator|.
name|FILE
return|;
block|}
annotation|@
name|Override
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fStream
operator|.
name|available
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fStream
operator|.
name|read
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] b, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fStream
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|fStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|length ()
name|long
name|length
parameter_list|()
throws|throws
name|IOException
block|{
comment|// file size + size of both buffers
return|return
name|file
operator|.
name|length
argument_list|()
return|;
block|}
block|}
end_class

end_unit

