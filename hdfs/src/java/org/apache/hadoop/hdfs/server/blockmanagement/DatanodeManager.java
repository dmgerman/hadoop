begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_comment
comment|/**  * Manage datanodes, include decommission and other activities.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DatanodeManager
specifier|public
class|class
name|DatanodeManager
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DatanodeManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|namesystem
specifier|final
name|FSNamesystem
name|namesystem
decl_stmt|;
comment|/** Cluster network topology */
DECL|field|networktopology
specifier|private
specifier|final
name|NetworkTopology
name|networktopology
init|=
operator|new
name|NetworkTopology
argument_list|()
decl_stmt|;
comment|/** Host names to datanode descriptors mapping. */
DECL|field|host2DatanodeMap
specifier|private
specifier|final
name|Host2NodesMap
name|host2DatanodeMap
init|=
operator|new
name|Host2NodesMap
argument_list|()
decl_stmt|;
DECL|method|DatanodeManager (final FSNamesystem namesystem)
name|DatanodeManager
parameter_list|(
specifier|final
name|FSNamesystem
name|namesystem
parameter_list|)
block|{
name|this
operator|.
name|namesystem
operator|=
name|namesystem
expr_stmt|;
block|}
DECL|field|decommissionthread
specifier|private
name|Daemon
name|decommissionthread
init|=
literal|null
decl_stmt|;
DECL|method|activate (final Configuration conf)
name|void
name|activate
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|decommissionthread
operator|=
operator|new
name|Daemon
argument_list|(
operator|new
name|DecommissionManager
argument_list|(
name|namesystem
argument_list|)
operator|.
operator|new
name|Monitor
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_INTERVAL_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_NODES_PER_INTERVAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_NODES_PER_INTERVAL_DEFAULT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|decommissionthread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|close ()
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|decommissionthread
operator|!=
literal|null
condition|)
name|decommissionthread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
comment|/** @return the network topology. */
DECL|method|getNetworkTopology ()
specifier|public
name|NetworkTopology
name|getNetworkTopology
parameter_list|()
block|{
return|return
name|networktopology
return|;
block|}
comment|/** Sort the located blocks by the distance to the target host. */
DECL|method|sortLocatedBlocks (final String targethost, final List<LocatedBlock> locatedblocks)
specifier|public
name|void
name|sortLocatedBlocks
parameter_list|(
specifier|final
name|String
name|targethost
parameter_list|,
specifier|final
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|locatedblocks
parameter_list|)
block|{
comment|//sort the blocks
specifier|final
name|DatanodeDescriptor
name|client
init|=
name|getDatanodeByHost
argument_list|(
name|targethost
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|b
range|:
name|locatedblocks
control|)
block|{
name|networktopology
operator|.
name|pseudoSortByDistance
argument_list|(
name|client
argument_list|,
name|b
operator|.
name|getLocations
argument_list|()
argument_list|)
expr_stmt|;
comment|// Move decommissioned datanodes to the bottom
name|Arrays
operator|.
name|sort
argument_list|(
name|b
operator|.
name|getLocations
argument_list|()
argument_list|,
name|DFSUtil
operator|.
name|DECOM_COMPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** @return the datanode descriptor for the host. */
DECL|method|getDatanodeByHost (final String host)
specifier|public
name|DatanodeDescriptor
name|getDatanodeByHost
parameter_list|(
specifier|final
name|String
name|host
parameter_list|)
block|{
return|return
name|host2DatanodeMap
operator|.
name|getDatanodeByHost
argument_list|(
name|host
argument_list|)
return|;
block|}
comment|/** Add a datanode. */
DECL|method|addDatanode (final DatanodeDescriptor node)
specifier|public
name|void
name|addDatanode
parameter_list|(
specifier|final
name|DatanodeDescriptor
name|node
parameter_list|)
block|{
comment|// To keep host2DatanodeMap consistent with datanodeMap,
comment|// remove  from host2DatanodeMap the datanodeDescriptor removed
comment|// from datanodeMap before adding node to host2DatanodeMap.
synchronized|synchronized
init|(
name|namesystem
operator|.
name|datanodeMap
init|)
block|{
name|host2DatanodeMap
operator|.
name|remove
argument_list|(
name|namesystem
operator|.
name|datanodeMap
operator|.
name|put
argument_list|(
name|node
operator|.
name|getStorageID
argument_list|()
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|host2DatanodeMap
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|networktopology
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".addDatanode: "
operator|+
literal|"node "
operator|+
name|node
operator|.
name|getName
argument_list|()
operator|+
literal|" is added to datanodeMap."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Physically remove node from datanodeMap. */
DECL|method|wipeDatanode (final DatanodeID node)
specifier|public
name|void
name|wipeDatanode
parameter_list|(
specifier|final
name|DatanodeID
name|node
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|key
init|=
name|node
operator|.
name|getStorageID
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|namesystem
operator|.
name|datanodeMap
init|)
block|{
name|host2DatanodeMap
operator|.
name|remove
argument_list|(
name|namesystem
operator|.
name|datanodeMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".wipeDatanode("
operator|+
name|node
operator|.
name|getName
argument_list|()
operator|+
literal|"): storage "
operator|+
name|key
operator|+
literal|" is removed from datanodeMap."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

