begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|reflect
operator|.
name|Union
import|;
end_import

begin_comment
comment|/**  * Base class for data-node command.  * Issued by the name-node to notify data-nodes what should be done.  */
end_comment

begin_comment
comment|// Declare subclasses for Avro's denormalized representation
end_comment

begin_class
annotation|@
name|Union
argument_list|(
block|{
name|Void
operator|.
name|class
block|,
name|DatanodeCommand
operator|.
name|Register
operator|.
name|class
block|,
name|DatanodeCommand
operator|.
name|Finalize
operator|.
name|class
block|,
name|BlockCommand
operator|.
name|class
block|,
name|UpgradeCommand
operator|.
name|class
block|,
name|BlockRecoveryCommand
operator|.
name|class
block|,
name|KeyUpdateCommand
operator|.
name|class
block|}
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DatanodeCommand
specifier|public
specifier|abstract
class|class
name|DatanodeCommand
extends|extends
name|ServerCommand
block|{
DECL|class|Register
specifier|static
class|class
name|Register
extends|extends
name|DatanodeCommand
block|{
DECL|method|Register ()
specifier|private
name|Register
parameter_list|()
block|{
name|super
argument_list|(
name|DatanodeProtocol
operator|.
name|DNA_REGISTER
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
block|{}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
block|{}
block|}
DECL|class|Finalize
specifier|public
specifier|static
class|class
name|Finalize
extends|extends
name|DatanodeCommand
block|{
DECL|field|blockPoolId
name|String
name|blockPoolId
decl_stmt|;
DECL|method|Finalize ()
specifier|private
name|Finalize
parameter_list|()
block|{
name|super
argument_list|(
name|DatanodeProtocol
operator|.
name|DNA_FINALIZE
argument_list|)
expr_stmt|;
block|}
DECL|method|Finalize (String bpid)
specifier|public
name|Finalize
parameter_list|(
name|String
name|bpid
parameter_list|)
block|{
name|super
argument_list|(
name|DatanodeProtocol
operator|.
name|DNA_FINALIZE
argument_list|)
expr_stmt|;
name|blockPoolId
operator|=
name|bpid
expr_stmt|;
block|}
DECL|method|getBlockPoolId ()
specifier|public
name|String
name|getBlockPoolId
parameter_list|()
block|{
return|return
name|blockPoolId
return|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|blockPoolId
operator|=
name|WritableUtils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|blockPoolId
argument_list|)
expr_stmt|;
block|}
block|}
static|static
block|{
comment|// register a ctor
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|Register
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|Register
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|Finalize
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|Finalize
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|field|REGISTER
specifier|public
specifier|static
specifier|final
name|DatanodeCommand
name|REGISTER
init|=
operator|new
name|Register
argument_list|()
decl_stmt|;
DECL|method|DatanodeCommand ()
specifier|public
name|DatanodeCommand
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|DatanodeCommand (int action)
name|DatanodeCommand
parameter_list|(
name|int
name|action
parameter_list|)
block|{
name|super
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

