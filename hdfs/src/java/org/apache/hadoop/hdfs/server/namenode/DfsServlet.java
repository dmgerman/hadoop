begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|JspHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|znerd
operator|.
name|xmlenc
operator|.
name|XMLOutputter
import|;
end_import

begin_comment
comment|/**  * A base class for the servlets in DFS.  */
end_comment

begin_class
DECL|class|DfsServlet
specifier|abstract
class|class
name|DfsServlet
extends|extends
name|HttpServlet
block|{
comment|/** For java.io.Serializable */
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DfsServlet
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Write the object to XML format */
DECL|method|writeXml (Exception except, String path, XMLOutputter doc)
specifier|protected
name|void
name|writeXml
parameter_list|(
name|Exception
name|except
parameter_list|,
name|String
name|path
parameter_list|,
name|XMLOutputter
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|doc
operator|.
name|startTag
argument_list|(
name|RemoteException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"path"
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|except
operator|instanceof
name|RemoteException
condition|)
block|{
name|doc
operator|.
name|attribute
argument_list|(
literal|"class"
argument_list|,
operator|(
operator|(
name|RemoteException
operator|)
name|except
operator|)
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|attribute
argument_list|(
literal|"class"
argument_list|,
name|except
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|msg
init|=
name|except
operator|.
name|getLocalizedMessage
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|msg
operator|.
name|indexOf
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|msg
operator|=
name|msg
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|attribute
argument_list|(
literal|"message"
argument_list|,
name|msg
operator|.
name|substring
argument_list|(
name|msg
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a {@link NameNode} proxy from the current {@link ServletContext}.     */
DECL|method|createNameNodeProxy ()
specifier|protected
name|ClientProtocol
name|createNameNodeProxy
parameter_list|()
throws|throws
name|IOException
block|{
name|ServletContext
name|context
init|=
name|getServletContext
argument_list|()
decl_stmt|;
comment|// if we are running in the Name Node, use it directly rather than via
comment|// rpc
name|NameNode
name|nn
init|=
name|NameNodeHttpServer
operator|.
name|getNameNodeFromContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|nn
operator|!=
literal|null
condition|)
block|{
return|return
name|nn
return|;
block|}
name|InetSocketAddress
name|nnAddr
init|=
name|NameNodeHttpServer
operator|.
name|getNameNodeAddressFromContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
name|NameNodeHttpServer
operator|.
name|getConfFromContext
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|DFSUtil
operator|.
name|createNamenode
argument_list|(
name|nnAddr
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/** Create a URI for redirecting request to a datanode */
DECL|method|createRedirectUri (String servletpath, UserGroupInformation ugi, DatanodeID host, HttpServletRequest request, NameNode nn )
specifier|protected
name|URI
name|createRedirectUri
parameter_list|(
name|String
name|servletpath
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|DatanodeID
name|host
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|NameNode
name|nn
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
specifier|final
name|String
name|hostname
init|=
name|host
operator|instanceof
name|DatanodeInfo
condition|?
operator|(
operator|(
name|DatanodeInfo
operator|)
name|host
operator|)
operator|.
name|getHostName
argument_list|()
else|:
name|host
operator|.
name|getHost
argument_list|()
decl_stmt|;
specifier|final
name|String
name|scheme
init|=
name|request
operator|.
name|getScheme
argument_list|()
decl_stmt|;
specifier|final
name|int
name|port
init|=
literal|"https"
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
condition|?
operator|(
name|Integer
operator|)
name|getServletContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"datanode.https.port"
argument_list|)
else|:
name|host
operator|.
name|getInfoPort
argument_list|()
decl_stmt|;
specifier|final
name|String
name|filename
init|=
name|request
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
name|StringBuilder
name|params
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|params
operator|.
name|append
argument_list|(
literal|"filename="
argument_list|)
expr_stmt|;
name|params
operator|.
name|append
argument_list|(
name|filename
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|String
name|tokenString
init|=
name|ugi
operator|.
name|getTokens
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|encodeToUrlString
argument_list|()
decl_stmt|;
name|params
operator|.
name|append
argument_list|(
name|JspHelper
operator|.
name|getDelegationTokenUrlParam
argument_list|(
name|tokenString
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|append
argument_list|(
literal|"&ugi="
argument_list|)
expr_stmt|;
name|params
operator|.
name|append
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add namenode address to the URL params
name|String
name|nnAddr
init|=
name|NameNode
operator|.
name|getHostPortString
argument_list|(
name|nn
operator|.
name|getNameNodeAddress
argument_list|()
argument_list|)
decl_stmt|;
name|params
operator|.
name|append
argument_list|(
name|JspHelper
operator|.
name|getUrlParam
argument_list|(
name|JspHelper
operator|.
name|NAMENODE_ADDRESS
argument_list|,
name|nnAddr
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|URI
argument_list|(
name|scheme
argument_list|,
literal|null
argument_list|,
name|hostname
argument_list|,
name|port
argument_list|,
name|servletpath
argument_list|,
name|params
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** Get filename from the request */
DECL|method|getFilename (HttpServletRequest request, HttpServletResponse response)
specifier|protected
name|String
name|getFilename
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|filename
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"filename"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filename
operator|==
literal|null
operator|||
name|filename
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid filename"
argument_list|)
throw|;
block|}
return|return
name|filename
return|;
block|}
DECL|method|getUGI (HttpServletRequest request, Configuration conf)
specifier|protected
name|UserGroupInformation
name|getUGI
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|getServletContext
argument_list|()
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
end_class

end_unit

