begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Math
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|DataTransferThrottler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
operator|.
name|ErrorSimulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * This class provides fetching a specified file from the NameNode.  */
end_comment

begin_class
DECL|class|TransferFsImage
class|class
name|TransferFsImage
implements|implements
name|FSConstants
block|{
DECL|field|CONTENT_LENGTH
specifier|public
specifier|final
specifier|static
name|String
name|CONTENT_LENGTH
init|=
literal|"Content-Length"
decl_stmt|;
DECL|field|isGetImage
specifier|private
name|boolean
name|isGetImage
decl_stmt|;
DECL|field|isGetEdit
specifier|private
name|boolean
name|isGetEdit
decl_stmt|;
DECL|field|isPutImage
specifier|private
name|boolean
name|isPutImage
decl_stmt|;
DECL|field|remoteport
specifier|private
name|int
name|remoteport
decl_stmt|;
DECL|field|machineName
specifier|private
name|String
name|machineName
decl_stmt|;
DECL|field|token
specifier|private
name|CheckpointSignature
name|token
decl_stmt|;
DECL|field|newChecksum
specifier|private
name|MD5Hash
name|newChecksum
init|=
literal|null
decl_stmt|;
comment|/**    * File downloader.    * @param pmap key=value[] map that is passed to the http servlet as     *        url parameters    * @param request the object from which this servelet reads the url contents    * @param response the object into which this servelet writes the url contents    * @throws IOException    */
DECL|method|TransferFsImage (Map<String,String[]> pmap, HttpServletRequest request, HttpServletResponse response )
specifier|public
name|TransferFsImage
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|pmap
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|isGetImage
operator|=
name|isGetEdit
operator|=
name|isPutImage
operator|=
literal|false
expr_stmt|;
name|remoteport
operator|=
literal|0
expr_stmt|;
name|machineName
operator|=
literal|null
expr_stmt|;
name|token
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|pmap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"getimage"
argument_list|)
condition|)
block|{
name|isGetImage
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"getedit"
argument_list|)
condition|)
block|{
name|isGetEdit
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"putimage"
argument_list|)
condition|)
block|{
name|isPutImage
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"port"
argument_list|)
condition|)
block|{
name|remoteport
operator|=
operator|new
name|Integer
argument_list|(
name|pmap
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
index|[
literal|0
index|]
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"machine"
argument_list|)
condition|)
block|{
name|machineName
operator|=
name|pmap
operator|.
name|get
argument_list|(
literal|"machine"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"token"
argument_list|)
condition|)
block|{
name|token
operator|=
operator|new
name|CheckpointSignature
argument_list|(
name|pmap
operator|.
name|get
argument_list|(
literal|"token"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"newChecksum"
argument_list|)
condition|)
block|{
name|newChecksum
operator|=
operator|new
name|MD5Hash
argument_list|(
name|pmap
operator|.
name|get
argument_list|(
literal|"newChecksum"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|numGets
init|=
operator|(
name|isGetImage
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|isGetEdit
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|numGets
operator|>
literal|1
operator|)
operator|||
operator|(
name|numGets
operator|==
literal|0
operator|)
operator|&&
operator|!
name|isPutImage
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal parameters to TransferFsImage"
argument_list|)
throw|;
block|}
block|}
DECL|method|getEdit ()
name|boolean
name|getEdit
parameter_list|()
block|{
return|return
name|isGetEdit
return|;
block|}
DECL|method|getImage ()
name|boolean
name|getImage
parameter_list|()
block|{
return|return
name|isGetImage
return|;
block|}
DECL|method|putImage ()
name|boolean
name|putImage
parameter_list|()
block|{
return|return
name|isPutImage
return|;
block|}
DECL|method|getToken ()
name|CheckpointSignature
name|getToken
parameter_list|()
block|{
return|return
name|token
return|;
block|}
comment|/**    * Get the MD5 digest of the new image    * @return the MD5 digest of the new image    */
DECL|method|getNewChecksum ()
name|MD5Hash
name|getNewChecksum
parameter_list|()
block|{
return|return
name|newChecksum
return|;
block|}
DECL|method|getInfoServer ()
name|String
name|getInfoServer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|machineName
operator|==
literal|null
operator|||
name|remoteport
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"MachineName and port undefined"
argument_list|)
throw|;
block|}
return|return
name|machineName
operator|+
literal|":"
operator|+
name|remoteport
return|;
block|}
comment|/**    * A server-side method to respond to a getfile http request    * Copies the contents of the local file into the output stream.    */
DECL|method|getFileServer (OutputStream outstream, File localfile, DataTransferThrottler throttler)
specifier|static
name|void
name|getFileServer
parameter_list|(
name|OutputStream
name|outstream
parameter_list|,
name|File
name|localfile
parameter_list|,
name|DataTransferThrottler
name|throttler
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
name|FileInputStream
name|infile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|infile
operator|=
operator|new
name|FileInputStream
argument_list|(
name|localfile
argument_list|)
expr_stmt|;
if|if
condition|(
name|ErrorSimulator
operator|.
name|getErrorSimulation
argument_list|(
literal|2
argument_list|)
operator|&&
name|localfile
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|contains
argument_list|(
literal|"secondary"
argument_list|)
condition|)
block|{
comment|// throw exception only when the secondary sends its image
throw|throw
operator|new
name|IOException
argument_list|(
literal|"If this exception is not caught by the "
operator|+
literal|"name-node fs image will be truncated."
argument_list|)
throw|;
block|}
if|if
condition|(
name|ErrorSimulator
operator|.
name|getErrorSimulation
argument_list|(
literal|3
argument_list|)
operator|&&
name|localfile
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|contains
argument_list|(
literal|"fsimage"
argument_list|)
condition|)
block|{
comment|// Test sending image shorter than localfile
name|long
name|len
init|=
name|localfile
operator|.
name|length
argument_list|()
decl_stmt|;
name|buf
operator|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|len
operator|/
literal|2
argument_list|,
name|BUFFER_SIZE
argument_list|)
index|]
expr_stmt|;
comment|// This will read at most half of the image
comment|// and the rest of the image will be sent over the wire
name|infile
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|int
name|num
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|num
operator|>
literal|0
condition|)
block|{
name|num
operator|=
name|infile
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|num
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
name|outstream
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|num
argument_list|)
expr_stmt|;
if|if
condition|(
name|throttler
operator|!=
literal|null
condition|)
block|{
name|throttler
operator|.
name|throttle
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|infile
operator|!=
literal|null
condition|)
block|{
name|infile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Client-side Method to fetch file from a server    * Copies the response from the URL to a list of local files.    *     * @Return a digest of the received file if getChecksum is true    */
DECL|method|getFileClient (String fsName, String id, File[] localPath, boolean getChecksum)
specifier|static
name|MD5Hash
name|getFileClient
parameter_list|(
name|String
name|fsName
parameter_list|,
name|String
name|id
parameter_list|,
name|File
index|[]
name|localPath
parameter_list|,
name|boolean
name|getChecksum
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
name|String
name|proto
init|=
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|?
literal|"https://"
else|:
literal|"http://"
decl_stmt|;
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|(
name|proto
operator|+
name|fsName
operator|+
literal|"/getimage?"
argument_list|)
decl_stmt|;
name|str
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|//
comment|// open connection to remote server
comment|//
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|str
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Avoid Krb bug with cross-realm hosts
name|SecurityUtil
operator|.
name|fetchServiceTicket
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|URLConnection
name|connection
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|long
name|advertisedSize
decl_stmt|;
name|String
name|contentLength
init|=
name|connection
operator|.
name|getHeaderField
argument_list|(
name|CONTENT_LENGTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentLength
operator|!=
literal|null
condition|)
block|{
name|advertisedSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|contentLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|CONTENT_LENGTH
operator|+
literal|" header is not provided "
operator|+
literal|"by the namenode when trying to fetch "
operator|+
name|str
argument_list|)
throw|;
block|}
name|long
name|received
init|=
literal|0
decl_stmt|;
name|InputStream
name|stream
init|=
name|connection
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|MessageDigest
name|digester
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getChecksum
condition|)
block|{
name|digester
operator|=
name|MD5Hash
operator|.
name|getDigester
argument_list|()
expr_stmt|;
name|stream
operator|=
operator|new
name|DigestInputStream
argument_list|(
name|stream
argument_list|,
name|digester
argument_list|)
expr_stmt|;
block|}
name|FileOutputStream
index|[]
name|output
init|=
literal|null
decl_stmt|;
name|boolean
name|finishedReceiving
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|localPath
operator|!=
literal|null
condition|)
block|{
name|output
operator|=
operator|new
name|FileOutputStream
index|[
name|localPath
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|output
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|output
index|[
name|i
index|]
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|localPath
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|num
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|num
operator|>
literal|0
condition|)
block|{
name|num
operator|=
name|stream
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|num
operator|>
literal|0
operator|&&
name|localPath
operator|!=
literal|null
condition|)
block|{
name|received
operator|+=
name|num
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|output
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|output
index|[
name|i
index|]
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|finishedReceiving
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|output
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|output
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|output
index|[
name|i
index|]
operator|.
name|getChannel
argument_list|()
operator|.
name|force
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|output
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|finishedReceiving
operator|&&
name|received
operator|!=
name|advertisedSize
condition|)
block|{
comment|// only throw this exception if we think we read all of it on our end
comment|// -- otherwise a client-side IOException would be masked by this
comment|// exception that makes it look like a server-side problem!
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File "
operator|+
name|str
operator|+
literal|" received length "
operator|+
name|received
operator|+
literal|" is not of the advertised size "
operator|+
name|advertisedSize
argument_list|)
throw|;
block|}
block|}
return|return
name|digester
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|MD5Hash
argument_list|(
name|digester
operator|.
name|digest
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

