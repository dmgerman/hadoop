begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogLoader
operator|.
name|EditLogValidation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeDirType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLogManifest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
DECL|class|FSImageTransactionalStorageInspector
class|class
name|FSImageTransactionalStorageInspector
extends|extends
name|FSImageStorageInspector
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSImageTransactionalStorageInspector
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|needToSave
specifier|private
name|boolean
name|needToSave
init|=
literal|false
decl_stmt|;
DECL|field|isUpgradeFinalized
specifier|private
name|boolean
name|isUpgradeFinalized
init|=
literal|true
decl_stmt|;
DECL|field|foundImages
name|List
argument_list|<
name|FoundFSImage
argument_list|>
name|foundImages
init|=
operator|new
name|ArrayList
argument_list|<
name|FoundFSImage
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|foundEditLogs
name|List
argument_list|<
name|FoundEditLog
argument_list|>
name|foundEditLogs
init|=
operator|new
name|ArrayList
argument_list|<
name|FoundEditLog
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|logGroups
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|LogGroup
argument_list|>
name|logGroups
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|LogGroup
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|maxSeenTxId
name|long
name|maxSeenTxId
init|=
literal|0
decl_stmt|;
DECL|field|IMAGE_REGEX
specifier|private
specifier|static
specifier|final
name|Pattern
name|IMAGE_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|NameNodeFile
operator|.
name|IMAGE
operator|.
name|getName
argument_list|()
operator|+
literal|"_(\\d+)"
argument_list|)
decl_stmt|;
DECL|field|EDITS_REGEX
specifier|private
specifier|static
specifier|final
name|Pattern
name|EDITS_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|NameNodeFile
operator|.
name|EDITS
operator|.
name|getName
argument_list|()
operator|+
literal|"_(\\d+)-(\\d+)"
argument_list|)
decl_stmt|;
DECL|field|EDITS_INPROGRESS_REGEX
specifier|private
specifier|static
specifier|final
name|Pattern
name|EDITS_INPROGRESS_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|NameNodeFile
operator|.
name|EDITS_INPROGRESS
operator|.
name|getName
argument_list|()
operator|+
literal|"_(\\d+)"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|inspectDirectory (StorageDirectory sd)
specifier|public
name|void
name|inspectDirectory
parameter_list|(
name|StorageDirectory
name|sd
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Was the directory just formatted?
if|if
condition|(
operator|!
name|sd
operator|.
name|getVersionFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No version file in "
operator|+
name|sd
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|needToSave
operator||=
literal|true
expr_stmt|;
return|return;
block|}
name|File
name|currentDir
init|=
name|sd
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
name|File
name|filesInStorage
index|[]
decl_stmt|;
try|try
block|{
name|filesInStorage
operator|=
name|FileUtil
operator|.
name|listFiles
argument_list|(
name|currentDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to inspect storage directory "
operator|+
name|currentDir
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|File
name|f
range|:
name|filesInStorage
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking file "
operator|+
name|f
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|f
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Check for fsimage_*
name|Matcher
name|imageMatch
init|=
name|IMAGE_REGEX
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|imageMatch
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
name|sd
operator|.
name|getStorageDirType
argument_list|()
operator|.
name|isOfType
argument_list|(
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|)
condition|)
block|{
try|try
block|{
name|long
name|txid
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|imageMatch
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|foundImages
operator|.
name|add
argument_list|(
operator|new
name|FoundFSImage
argument_list|(
name|sd
argument_list|,
name|f
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Image file "
operator|+
name|f
operator|+
literal|" has improperly formatted "
operator|+
literal|"transaction ID"
argument_list|)
expr_stmt|;
comment|// skip
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found image file at "
operator|+
name|f
operator|+
literal|" but storage directory is "
operator|+
literal|"not configured to contain images."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Check for a seen_txid file, which marks a minimum transaction ID that
comment|// must be included in our load plan.
try|try
block|{
name|maxSeenTxId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxSeenTxId
argument_list|,
name|NNStorage
operator|.
name|readTransactionIdFile
argument_list|(
name|sd
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to determine the max transaction ID seen by "
operator|+
name|sd
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|FoundEditLog
argument_list|>
name|editLogs
init|=
name|matchEditLogs
argument_list|(
name|filesInStorage
argument_list|)
decl_stmt|;
if|if
condition|(
name|sd
operator|.
name|getStorageDirType
argument_list|()
operator|.
name|isOfType
argument_list|(
name|NameNodeDirType
operator|.
name|EDITS
argument_list|)
condition|)
block|{
for|for
control|(
name|FoundEditLog
name|log
range|:
name|editLogs
control|)
block|{
name|addEditLog
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|editLogs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found the following edit log file(s) in "
operator|+
name|sd
operator|+
literal|" even though it was not configured to store edits:\n"
operator|+
literal|"  "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n  "
argument_list|)
operator|.
name|join
argument_list|(
name|editLogs
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// set finalized flag
name|isUpgradeFinalized
operator|=
name|isUpgradeFinalized
operator|&&
operator|!
name|sd
operator|.
name|getPreviousDir
argument_list|()
operator|.
name|exists
argument_list|()
expr_stmt|;
block|}
DECL|method|matchEditLogs (File[] filesInStorage)
specifier|static
name|List
argument_list|<
name|FoundEditLog
argument_list|>
name|matchEditLogs
parameter_list|(
name|File
index|[]
name|filesInStorage
parameter_list|)
block|{
name|List
argument_list|<
name|FoundEditLog
argument_list|>
name|ret
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
name|filesInStorage
control|)
block|{
name|String
name|name
init|=
name|f
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Check for edits
name|Matcher
name|editsMatch
init|=
name|EDITS_REGEX
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|editsMatch
operator|.
name|matches
argument_list|()
condition|)
block|{
try|try
block|{
name|long
name|startTxId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|editsMatch
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|endTxId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|editsMatch
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|FoundEditLog
argument_list|(
name|f
argument_list|,
name|startTxId
argument_list|,
name|endTxId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Edits file "
operator|+
name|f
operator|+
literal|" has improperly formatted "
operator|+
literal|"transaction ID"
argument_list|)
expr_stmt|;
comment|// skip
block|}
block|}
comment|// Check for in-progress edits
name|Matcher
name|inProgressEditsMatch
init|=
name|EDITS_INPROGRESS_REGEX
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|inProgressEditsMatch
operator|.
name|matches
argument_list|()
condition|)
block|{
try|try
block|{
name|long
name|startTxId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|inProgressEditsMatch
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|FoundEditLog
argument_list|(
name|f
argument_list|,
name|startTxId
argument_list|,
name|FoundEditLog
operator|.
name|UNKNOWN_END
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"In-progress edits file "
operator|+
name|f
operator|+
literal|" has improperly "
operator|+
literal|"formatted transaction ID"
argument_list|)
expr_stmt|;
comment|// skip
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
DECL|method|addEditLog (FoundEditLog foundEditLog)
specifier|private
name|void
name|addEditLog
parameter_list|(
name|FoundEditLog
name|foundEditLog
parameter_list|)
block|{
name|foundEditLogs
operator|.
name|add
argument_list|(
name|foundEditLog
argument_list|)
expr_stmt|;
name|LogGroup
name|group
init|=
name|logGroups
operator|.
name|get
argument_list|(
name|foundEditLog
operator|.
name|startTxId
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|group
operator|=
operator|new
name|LogGroup
argument_list|(
name|foundEditLog
operator|.
name|startTxId
argument_list|)
expr_stmt|;
name|logGroups
operator|.
name|put
argument_list|(
name|foundEditLog
operator|.
name|startTxId
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|add
argument_list|(
name|foundEditLog
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isUpgradeFinalized ()
specifier|public
name|boolean
name|isUpgradeFinalized
parameter_list|()
block|{
return|return
name|isUpgradeFinalized
return|;
block|}
comment|/**    * @return the image that has the most recent associated transaction ID.    * If there are multiple storage directories which contain equal images     * the storage directory that was inspected first will be preferred.    *     * Returns null if no images were found.    */
DECL|method|getLatestImage ()
name|FoundFSImage
name|getLatestImage
parameter_list|()
block|{
name|FoundFSImage
name|ret
init|=
literal|null
decl_stmt|;
for|for
control|(
name|FoundFSImage
name|img
range|:
name|foundImages
control|)
block|{
if|if
condition|(
name|ret
operator|==
literal|null
operator|||
name|img
operator|.
name|txId
operator|>
name|ret
operator|.
name|txId
condition|)
block|{
name|ret
operator|=
name|img
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
DECL|method|getFoundImages ()
specifier|public
name|List
argument_list|<
name|FoundFSImage
argument_list|>
name|getFoundImages
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|foundImages
argument_list|)
return|;
block|}
DECL|method|getFoundEditLogs ()
specifier|public
name|List
argument_list|<
name|FoundEditLog
argument_list|>
name|getFoundEditLogs
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|foundEditLogs
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createLoadPlan ()
specifier|public
name|LoadPlan
name|createLoadPlan
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|foundImages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"No valid image files found"
argument_list|)
throw|;
block|}
name|FoundFSImage
name|recoveryImage
init|=
name|getLatestImage
argument_list|()
decl_stmt|;
name|LogLoadPlan
name|logPlan
init|=
name|createLogLoadPlan
argument_list|(
name|recoveryImage
operator|.
name|txId
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
return|return
operator|new
name|TransactionalLoadPlan
argument_list|(
name|recoveryImage
argument_list|,
name|logPlan
argument_list|)
return|;
block|}
comment|/**    * Plan which logs to load in order to bring the namespace up-to-date.    * Transactions will be considered in the range (sinceTxId, maxTxId]    *     * @param sinceTxId the highest txid that is already loaded     *                  (eg from the image checkpoint)    * @param maxStartTxId ignore any log files that start after this txid    */
DECL|method|createLogLoadPlan (long sinceTxId, long maxStartTxId)
name|LogLoadPlan
name|createLogLoadPlan
parameter_list|(
name|long
name|sinceTxId
parameter_list|,
name|long
name|maxStartTxId
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|expectedTxId
init|=
name|sinceTxId
operator|+
literal|1
decl_stmt|;
name|List
argument_list|<
name|FoundEditLog
argument_list|>
name|recoveryLogs
init|=
operator|new
name|ArrayList
argument_list|<
name|FoundEditLog
argument_list|>
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|LogGroup
argument_list|>
name|tailGroups
init|=
name|logGroups
operator|.
name|tailMap
argument_list|(
name|expectedTxId
argument_list|)
decl_stmt|;
if|if
condition|(
name|logGroups
operator|.
name|size
argument_list|()
operator|>
name|tailGroups
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Excluded "
operator|+
operator|(
name|logGroups
operator|.
name|size
argument_list|()
operator|-
name|tailGroups
operator|.
name|size
argument_list|()
operator|)
operator|+
literal|" groups of logs because they start with a txid less than image "
operator|+
literal|"txid "
operator|+
name|sinceTxId
argument_list|)
expr_stmt|;
block|}
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|LogGroup
argument_list|>
name|usefulGroups
decl_stmt|;
if|if
condition|(
name|maxStartTxId
operator|>
name|sinceTxId
condition|)
block|{
name|usefulGroups
operator|=
name|tailGroups
operator|.
name|headMap
argument_list|(
name|maxStartTxId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|usefulGroups
operator|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|LogGroup
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|usefulGroups
operator|.
name|size
argument_list|()
operator|>
name|tailGroups
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Excluded "
operator|+
operator|(
name|tailGroups
operator|.
name|size
argument_list|()
operator|-
name|usefulGroups
operator|.
name|size
argument_list|()
operator|)
operator|+
literal|" groups of logs because they start with a txid higher than max "
operator|+
literal|"txid "
operator|+
name|sinceTxId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|LogGroup
argument_list|>
name|entry
range|:
name|usefulGroups
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
name|logStartTxId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|LogGroup
name|logGroup
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|logGroup
operator|.
name|planRecovery
argument_list|()
expr_stmt|;
if|if
condition|(
name|expectedTxId
operator|!=
name|FSConstants
operator|.
name|INVALID_TXID
operator|&&
name|logStartTxId
operator|!=
name|expectedTxId
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected next log group would start at txid "
operator|+
name|expectedTxId
operator|+
literal|" but starts at txid "
operator|+
name|logStartTxId
argument_list|)
throw|;
block|}
comment|// We can pick any of the non-corrupt logs here
name|recoveryLogs
operator|.
name|add
argument_list|(
name|logGroup
operator|.
name|getBestNonCorruptLog
argument_list|()
argument_list|)
expr_stmt|;
comment|// If this log group was finalized, we know to expect the next
comment|// log group to start at the following txid (ie no gaps)
if|if
condition|(
name|logGroup
operator|.
name|hasKnownLastTxId
argument_list|()
condition|)
block|{
name|expectedTxId
operator|=
name|logGroup
operator|.
name|getLastTxId
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// the log group was in-progress so we don't know what ID
comment|// the next group should start from.
name|expectedTxId
operator|=
name|FSConstants
operator|.
name|INVALID_TXID
expr_stmt|;
block|}
block|}
name|long
name|lastLogGroupStartTxId
init|=
name|usefulGroups
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|usefulGroups
operator|.
name|lastKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxSeenTxId
operator|>
name|sinceTxId
operator|&&
name|maxSeenTxId
operator|>
name|lastLogGroupStartTxId
condition|)
block|{
name|String
name|msg
init|=
literal|"At least one storage directory indicated it has seen a "
operator|+
literal|"log segment starting at txid "
operator|+
name|maxSeenTxId
decl_stmt|;
if|if
condition|(
name|usefulGroups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|msg
operator|+=
literal|" but there are no logs to load."
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|+=
literal|" but the most recent log file found starts with txid "
operator|+
name|lastLogGroupStartTxId
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
operator|new
name|LogLoadPlan
argument_list|(
name|recoveryLogs
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|usefulGroups
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|needToSave ()
specifier|public
name|boolean
name|needToSave
parameter_list|()
block|{
return|return
name|needToSave
return|;
block|}
DECL|method|getEditLogManifest (long sinceTxId)
name|RemoteEditLogManifest
name|getEditLogManifest
parameter_list|(
name|long
name|sinceTxId
parameter_list|)
block|{
name|List
argument_list|<
name|RemoteEditLog
argument_list|>
name|logs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|LogGroup
name|g
range|:
name|logGroups
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|g
operator|.
name|hasFinalized
condition|)
continue|continue;
name|FoundEditLog
name|fel
init|=
name|g
operator|.
name|getBestNonCorruptLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|fel
operator|.
name|getLastTxId
argument_list|()
operator|<
name|sinceTxId
condition|)
continue|continue;
name|logs
operator|.
name|add
argument_list|(
operator|new
name|RemoteEditLog
argument_list|(
name|fel
operator|.
name|getStartTxId
argument_list|()
argument_list|,
name|fel
operator|.
name|getLastTxId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RemoteEditLogManifest
argument_list|(
name|logs
argument_list|)
return|;
block|}
comment|/**    * A group of logs that all start at the same txid.    *     * Handles determining which logs are corrupt and which should be considered    * candidates for loading.    */
DECL|class|LogGroup
specifier|static
class|class
name|LogGroup
block|{
DECL|field|startTxId
name|long
name|startTxId
decl_stmt|;
DECL|field|logs
name|List
argument_list|<
name|FoundEditLog
argument_list|>
name|logs
init|=
operator|new
name|ArrayList
argument_list|<
name|FoundEditLog
argument_list|>
argument_list|()
decl_stmt|;
empty_stmt|;
DECL|field|endTxIds
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|endTxIds
init|=
operator|new
name|TreeSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|hasInProgress
specifier|private
name|boolean
name|hasInProgress
init|=
literal|false
decl_stmt|;
DECL|field|hasFinalized
specifier|private
name|boolean
name|hasFinalized
init|=
literal|false
decl_stmt|;
DECL|method|LogGroup (long startTxId)
name|LogGroup
parameter_list|(
name|long
name|startTxId
parameter_list|)
block|{
name|this
operator|.
name|startTxId
operator|=
name|startTxId
expr_stmt|;
block|}
DECL|method|getBestNonCorruptLog ()
name|FoundEditLog
name|getBestNonCorruptLog
parameter_list|()
block|{
comment|// First look for non-corrupt finalized logs
for|for
control|(
name|FoundEditLog
name|log
range|:
name|logs
control|)
block|{
if|if
condition|(
operator|!
name|log
operator|.
name|isCorrupt
argument_list|()
operator|&&
operator|!
name|log
operator|.
name|isInProgress
argument_list|()
condition|)
block|{
return|return
name|log
return|;
block|}
block|}
comment|// Then look for non-corrupt in-progress logs
for|for
control|(
name|FoundEditLog
name|log
range|:
name|logs
control|)
block|{
if|if
condition|(
operator|!
name|log
operator|.
name|isCorrupt
argument_list|()
condition|)
block|{
return|return
name|log
return|;
block|}
block|}
comment|// We should never get here, because we don't get to the planning stage
comment|// without calling planRecovery first, and if we've called planRecovery,
comment|// we would have already thrown if there were no non-corrupt logs!
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No non-corrupt logs for txid "
operator|+
name|startTxId
argument_list|)
throw|;
block|}
comment|/**      * @return true if we can determine the last txid in this log group.      */
DECL|method|hasKnownLastTxId ()
name|boolean
name|hasKnownLastTxId
parameter_list|()
block|{
for|for
control|(
name|FoundEditLog
name|log
range|:
name|logs
control|)
block|{
if|if
condition|(
operator|!
name|log
operator|.
name|isInProgress
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * @return the last txid included in the logs in this group      * @throws IllegalStateException if it is unknown -      *                               {@see #hasKnownLastTxId()}      */
DECL|method|getLastTxId ()
name|long
name|getLastTxId
parameter_list|()
block|{
for|for
control|(
name|FoundEditLog
name|log
range|:
name|logs
control|)
block|{
if|if
condition|(
operator|!
name|log
operator|.
name|isInProgress
argument_list|()
condition|)
block|{
return|return
name|log
operator|.
name|lastTxId
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"LogGroup only has in-progress logs"
argument_list|)
throw|;
block|}
DECL|method|add (FoundEditLog log)
name|void
name|add
parameter_list|(
name|FoundEditLog
name|log
parameter_list|)
block|{
assert|assert
name|log
operator|.
name|getStartTxId
argument_list|()
operator|==
name|startTxId
assert|;
name|logs
operator|.
name|add
argument_list|(
name|log
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isInProgress
argument_list|()
condition|)
block|{
name|hasInProgress
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|hasFinalized
operator|=
literal|true
expr_stmt|;
name|endTxIds
operator|.
name|add
argument_list|(
name|log
operator|.
name|lastTxId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|planRecovery ()
name|void
name|planRecovery
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|hasInProgress
operator|||
name|hasFinalized
assert|;
name|checkConsistentEndTxIds
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasFinalized
operator|&&
name|hasInProgress
condition|)
block|{
name|planMixedLogRecovery
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|hasFinalized
operator|&&
name|hasInProgress
condition|)
block|{
name|planAllInProgressRecovery
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hasFinalized
operator|&&
operator|!
name|hasInProgress
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No recovery necessary for logs starting at txid "
operator|+
name|startTxId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Recovery case for when some logs in the group were in-progress, and      * others were finalized. This happens when one of the storage      * directories fails.      *      * The in-progress logs in this case should be considered corrupt.      */
DECL|method|planMixedLogRecovery ()
specifier|private
name|void
name|planMixedLogRecovery
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|FoundEditLog
name|log
range|:
name|logs
control|)
block|{
if|if
condition|(
name|log
operator|.
name|isInProgress
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Log at "
operator|+
name|log
operator|.
name|getFile
argument_list|()
operator|+
literal|" is in progress, but "
operator|+
literal|"other logs starting at the same txid "
operator|+
name|startTxId
operator|+
literal|" are finalized. Moving aside."
argument_list|)
expr_stmt|;
name|log
operator|.
name|markCorrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Recovery case for when all of the logs in the group were in progress.      * This happens if the NN completely crashes and restarts. In this case      * we check the non-zero lengths of each log file, and any logs that are      * less than the max of these lengths are considered corrupt.      */
DECL|method|planAllInProgressRecovery ()
specifier|private
name|void
name|planAllInProgressRecovery
parameter_list|()
throws|throws
name|IOException
block|{
comment|// We only have in-progress logs. We need to figure out which logs have
comment|// the latest data to reccover them
name|LOG
operator|.
name|warn
argument_list|(
literal|"Logs beginning at txid "
operator|+
name|startTxId
operator|+
literal|" were are all "
operator|+
literal|"in-progress (probably truncated due to a previous NameNode "
operator|+
literal|"crash)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|logs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Only one log, it's our only choice!
name|FoundEditLog
name|log
init|=
name|logs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|validateLog
argument_list|()
operator|.
name|numTransactions
operator|==
literal|0
condition|)
block|{
comment|// If it has no transactions, we should consider it corrupt just
comment|// to be conservative.
comment|// See comment below for similar case
name|LOG
operator|.
name|warn
argument_list|(
literal|"Marking log at "
operator|+
name|log
operator|.
name|getFile
argument_list|()
operator|+
literal|" as corrupt since "
operator|+
literal|"it has no transactions in it."
argument_list|)
expr_stmt|;
name|log
operator|.
name|markCorrupt
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
name|long
name|maxValidTxnCount
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|FoundEditLog
name|log
range|:
name|logs
control|)
block|{
name|long
name|validTxnCount
init|=
name|log
operator|.
name|validateLog
argument_list|()
operator|.
name|numTransactions
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"  Log "
operator|+
name|log
operator|.
name|getFile
argument_list|()
operator|+
literal|" valid txns="
operator|+
name|validTxnCount
operator|+
literal|" valid len="
operator|+
name|log
operator|.
name|validateLog
argument_list|()
operator|.
name|validLength
argument_list|)
expr_stmt|;
name|maxValidTxnCount
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxValidTxnCount
argument_list|,
name|validTxnCount
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FoundEditLog
name|log
range|:
name|logs
control|)
block|{
name|long
name|txns
init|=
name|log
operator|.
name|validateLog
argument_list|()
operator|.
name|numTransactions
decl_stmt|;
if|if
condition|(
name|txns
operator|<
name|maxValidTxnCount
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Marking log at "
operator|+
name|log
operator|.
name|getFile
argument_list|()
operator|+
literal|" as corrupt since "
operator|+
literal|"it is has only "
operator|+
name|txns
operator|+
literal|" valid txns whereas another "
operator|+
literal|"log has "
operator|+
name|maxValidTxnCount
argument_list|)
expr_stmt|;
name|log
operator|.
name|markCorrupt
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|txns
operator|==
literal|0
condition|)
block|{
comment|// this can happen if the NN crashes right after rolling a log
comment|// but before the START_LOG_SEGMENT txn is written. Since the log
comment|// is empty, we can just move it aside to its corrupt name.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Marking log at "
operator|+
name|log
operator|.
name|getFile
argument_list|()
operator|+
literal|" as corrupt since "
operator|+
literal|"it has no transactions in it."
argument_list|)
expr_stmt|;
name|log
operator|.
name|markCorrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Check for the case when we have multiple finalized logs and they have      * different ending transaction IDs. This violates an invariant that all      * log directories should roll together. We should abort in this case.      */
DECL|method|checkConsistentEndTxIds ()
specifier|private
name|void
name|checkConsistentEndTxIds
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasFinalized
operator|&&
name|endTxIds
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"More than one ending txid was found "
operator|+
literal|"for logs starting at txid "
operator|+
name|startTxId
operator|+
literal|". "
operator|+
literal|"Found: "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|endTxIds
argument_list|,
literal|','
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|recover ()
name|void
name|recover
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|FoundEditLog
name|log
range|:
name|logs
control|)
block|{
if|if
condition|(
name|log
operator|.
name|isCorrupt
argument_list|()
condition|)
block|{
name|log
operator|.
name|moveAsideCorruptFile
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|log
operator|.
name|isInProgress
argument_list|()
condition|)
block|{
name|log
operator|.
name|finalizeLog
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Record of an image that has been located and had its filename parsed.    */
DECL|class|FoundFSImage
specifier|static
class|class
name|FoundFSImage
block|{
DECL|field|sd
specifier|final
name|StorageDirectory
name|sd
decl_stmt|;
DECL|field|txId
specifier|final
name|long
name|txId
decl_stmt|;
DECL|field|file
specifier|private
specifier|final
name|File
name|file
decl_stmt|;
DECL|method|FoundFSImage (StorageDirectory sd, File file, long txId)
name|FoundFSImage
parameter_list|(
name|StorageDirectory
name|sd
parameter_list|,
name|File
name|file
parameter_list|,
name|long
name|txId
parameter_list|)
block|{
assert|assert
name|txId
operator|>=
literal|0
operator|:
literal|"Invalid txid on "
operator|+
name|file
operator|+
literal|": "
operator|+
name|txId
assert|;
name|this
operator|.
name|sd
operator|=
name|sd
expr_stmt|;
name|this
operator|.
name|txId
operator|=
name|txId
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
DECL|method|getFile ()
name|File
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
DECL|method|getTxId ()
specifier|public
name|long
name|getTxId
parameter_list|()
block|{
return|return
name|txId
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|file
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Record of an edit log that has been located and had its filename parsed.    */
DECL|class|FoundEditLog
specifier|static
class|class
name|FoundEditLog
block|{
DECL|field|file
name|File
name|file
decl_stmt|;
DECL|field|startTxId
specifier|final
name|long
name|startTxId
decl_stmt|;
DECL|field|lastTxId
name|long
name|lastTxId
decl_stmt|;
DECL|field|cachedValidation
specifier|private
name|EditLogValidation
name|cachedValidation
init|=
literal|null
decl_stmt|;
DECL|field|isCorrupt
specifier|private
name|boolean
name|isCorrupt
init|=
literal|false
decl_stmt|;
DECL|field|UNKNOWN_END
specifier|static
specifier|final
name|long
name|UNKNOWN_END
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|FoundEditLog (File file, long startTxId, long endTxId)
name|FoundEditLog
parameter_list|(
name|File
name|file
parameter_list|,
name|long
name|startTxId
parameter_list|,
name|long
name|endTxId
parameter_list|)
block|{
assert|assert
name|endTxId
operator|==
name|UNKNOWN_END
operator|||
name|endTxId
operator|>=
name|startTxId
assert|;
assert|assert
name|startTxId
operator|>
literal|0
assert|;
assert|assert
name|file
operator|!=
literal|null
assert|;
name|this
operator|.
name|startTxId
operator|=
name|startTxId
expr_stmt|;
name|this
operator|.
name|lastTxId
operator|=
name|endTxId
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
DECL|method|finalizeLog ()
specifier|public
name|void
name|finalizeLog
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|numTransactions
init|=
name|validateLog
argument_list|()
operator|.
name|numTransactions
decl_stmt|;
name|long
name|lastTxId
init|=
name|startTxId
operator|+
name|numTransactions
operator|-
literal|1
decl_stmt|;
name|File
name|dst
init|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
name|startTxId
argument_list|,
name|lastTxId
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finalizing edits log "
operator|+
name|file
operator|+
literal|" by renaming to "
operator|+
name|dst
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|renameTo
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't finalize log "
operator|+
name|file
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
throw|;
block|}
name|this
operator|.
name|lastTxId
operator|=
name|lastTxId
expr_stmt|;
name|file
operator|=
name|dst
expr_stmt|;
block|}
DECL|method|getStartTxId ()
name|long
name|getStartTxId
parameter_list|()
block|{
return|return
name|startTxId
return|;
block|}
DECL|method|getLastTxId ()
name|long
name|getLastTxId
parameter_list|()
block|{
return|return
name|lastTxId
return|;
block|}
DECL|method|validateLog ()
name|EditLogValidation
name|validateLog
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cachedValidation
operator|==
literal|null
condition|)
block|{
name|cachedValidation
operator|=
name|EditLogFileInputStream
operator|.
name|validateEditLog
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|cachedValidation
return|;
block|}
DECL|method|isInProgress ()
name|boolean
name|isInProgress
parameter_list|()
block|{
return|return
operator|(
name|lastTxId
operator|==
name|UNKNOWN_END
operator|)
return|;
block|}
DECL|method|getFile ()
name|File
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
DECL|method|markCorrupt ()
name|void
name|markCorrupt
parameter_list|()
block|{
name|isCorrupt
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|isCorrupt ()
name|boolean
name|isCorrupt
parameter_list|()
block|{
return|return
name|isCorrupt
return|;
block|}
DECL|method|moveAsideCorruptFile ()
name|void
name|moveAsideCorruptFile
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|isCorrupt
assert|;
name|File
name|src
init|=
name|file
decl_stmt|;
name|File
name|dst
init|=
operator|new
name|File
argument_list|(
name|src
operator|.
name|getParent
argument_list|()
argument_list|,
name|src
operator|.
name|getName
argument_list|()
operator|+
literal|".corrupt"
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
name|src
operator|.
name|renameTo
argument_list|(
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't rename corrupt log "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
throw|;
block|}
name|file
operator|=
name|dst
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|file
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|TransactionalLoadPlan
specifier|static
class|class
name|TransactionalLoadPlan
extends|extends
name|LoadPlan
block|{
DECL|field|image
specifier|final
name|FoundFSImage
name|image
decl_stmt|;
DECL|field|logPlan
specifier|final
name|LogLoadPlan
name|logPlan
decl_stmt|;
DECL|method|TransactionalLoadPlan (FoundFSImage image, LogLoadPlan logPlan)
specifier|public
name|TransactionalLoadPlan
parameter_list|(
name|FoundFSImage
name|image
parameter_list|,
name|LogLoadPlan
name|logPlan
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|image
operator|=
name|image
expr_stmt|;
name|this
operator|.
name|logPlan
operator|=
name|logPlan
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doRecovery ()
name|boolean
name|doRecovery
parameter_list|()
throws|throws
name|IOException
block|{
name|logPlan
operator|.
name|doRecovery
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getImageFile ()
name|File
name|getImageFile
parameter_list|()
block|{
return|return
name|image
operator|.
name|getFile
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getEditsFiles ()
name|List
argument_list|<
name|File
argument_list|>
name|getEditsFiles
parameter_list|()
block|{
return|return
name|logPlan
operator|.
name|getEditsFiles
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getStorageDirectoryForProperties ()
name|StorageDirectory
name|getStorageDirectoryForProperties
parameter_list|()
block|{
return|return
name|image
operator|.
name|sd
return|;
block|}
block|}
DECL|class|LogLoadPlan
specifier|static
class|class
name|LogLoadPlan
block|{
DECL|field|editLogs
specifier|final
name|List
argument_list|<
name|FoundEditLog
argument_list|>
name|editLogs
decl_stmt|;
DECL|field|logGroupsToRecover
specifier|final
name|List
argument_list|<
name|LogGroup
argument_list|>
name|logGroupsToRecover
decl_stmt|;
DECL|method|LogLoadPlan (List<FoundEditLog> editLogs, List<LogGroup> logGroupsToRecover)
name|LogLoadPlan
parameter_list|(
name|List
argument_list|<
name|FoundEditLog
argument_list|>
name|editLogs
parameter_list|,
name|List
argument_list|<
name|LogGroup
argument_list|>
name|logGroupsToRecover
parameter_list|)
block|{
name|this
operator|.
name|editLogs
operator|=
name|editLogs
expr_stmt|;
name|this
operator|.
name|logGroupsToRecover
operator|=
name|logGroupsToRecover
expr_stmt|;
block|}
DECL|method|doRecovery ()
specifier|public
name|void
name|doRecovery
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|LogGroup
name|g
range|:
name|logGroupsToRecover
control|)
block|{
name|g
operator|.
name|recover
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getEditsFiles ()
specifier|public
name|List
argument_list|<
name|File
argument_list|>
name|getEditsFiles
parameter_list|()
block|{
name|List
argument_list|<
name|File
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FoundEditLog
name|log
range|:
name|editLogs
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|log
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
block|}
end_class

end_unit

