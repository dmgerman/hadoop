begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Util
operator|.
name|now
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImage
operator|.
name|CheckpointStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeDirType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|CheckpointCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_BACKUP_HTTP_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_BACKUP_HTTP_ADDRESS_DEFAULT
import|;
end_import

begin_comment
comment|/**  * The Checkpointer is responsible for supporting periodic checkpoints   * of the HDFS metadata.  *  * The Checkpointer is a daemon that periodically wakes up  * up (determined by the schedule specified in the configuration),  * triggers a periodic checkpoint and then goes back to sleep.  *   * The start of a checkpoint is triggered by one of the two factors:  * (1) time or (2) the size of the edits file.  */
end_comment

begin_class
DECL|class|Checkpointer
class|class
name|Checkpointer
extends|extends
name|Daemon
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Checkpointer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|backupNode
specifier|private
name|BackupNode
name|backupNode
decl_stmt|;
DECL|field|shouldRun
specifier|volatile
name|boolean
name|shouldRun
decl_stmt|;
DECL|field|checkpointPeriod
specifier|private
name|long
name|checkpointPeriod
decl_stmt|;
comment|// in seconds
DECL|field|checkpointSize
specifier|private
name|long
name|checkpointSize
decl_stmt|;
comment|// size (in MB) of current Edit Log
DECL|field|infoBindAddress
specifier|private
name|String
name|infoBindAddress
decl_stmt|;
DECL|method|getFSImage ()
specifier|private
name|BackupImage
name|getFSImage
parameter_list|()
block|{
return|return
operator|(
name|BackupImage
operator|)
name|backupNode
operator|.
name|getFSImage
argument_list|()
return|;
block|}
DECL|method|getNamenode ()
specifier|private
name|NamenodeProtocol
name|getNamenode
parameter_list|()
block|{
return|return
name|backupNode
operator|.
name|namenode
return|;
block|}
comment|/**    * Create a connection to the primary namenode.    */
DECL|method|Checkpointer (Configuration conf, BackupNode bnNode)
name|Checkpointer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|BackupNode
name|bnNode
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|backupNode
operator|=
name|bnNode
expr_stmt|;
try|try
block|{
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|shutdown
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Initialize checkpoint.    */
DECL|method|initialize (Configuration conf)
specifier|private
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create connection to the namenode.
name|shouldRun
operator|=
literal|true
expr_stmt|;
comment|// Initialize other scheduling parameters from the configuration
name|checkpointPeriod
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_PERIOD_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_PERIOD_DEFAULT
argument_list|)
expr_stmt|;
name|checkpointSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_SIZE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_SIZE_DEFAULT
argument_list|)
expr_stmt|;
comment|// Pull out exact http address for posting url to avoid ip aliasing issues
name|String
name|fullInfoAddr
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_NAMENODE_BACKUP_HTTP_ADDRESS_KEY
argument_list|,
name|DFS_NAMENODE_BACKUP_HTTP_ADDRESS_DEFAULT
argument_list|)
decl_stmt|;
name|infoBindAddress
operator|=
name|fullInfoAddr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fullInfoAddr
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
argument_list|)
expr_stmt|;
name|HttpServer
name|httpServer
init|=
name|backupNode
operator|.
name|httpServer
decl_stmt|;
name|httpServer
operator|.
name|setAttribute
argument_list|(
literal|"name.system.image"
argument_list|,
name|getFSImage
argument_list|()
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|setAttribute
argument_list|(
literal|"name.conf"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|addInternalServlet
argument_list|(
literal|"getimage"
argument_list|,
literal|"/getimage"
argument_list|,
name|GetImageServlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checkpoint Period : "
operator|+
name|checkpointPeriod
operator|+
literal|" secs "
operator|+
literal|"("
operator|+
name|checkpointPeriod
operator|/
literal|60
operator|+
literal|" min)"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Log Size Trigger  : "
operator|+
name|checkpointSize
operator|+
literal|" bytes "
operator|+
literal|"("
operator|+
name|checkpointSize
operator|/
literal|1024
operator|+
literal|" KB)"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Shut down the checkpointer.    */
DECL|method|shutdown ()
name|void
name|shutdown
parameter_list|()
block|{
name|shouldRun
operator|=
literal|false
expr_stmt|;
name|backupNode
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// The main work loop
comment|//
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Check the size of the edit log once every 5 minutes.
name|long
name|periodMSec
init|=
literal|5
operator|*
literal|60
decl_stmt|;
comment|// 5 minutes
if|if
condition|(
name|checkpointPeriod
operator|<
name|periodMSec
condition|)
block|{
name|periodMSec
operator|=
name|checkpointPeriod
expr_stmt|;
block|}
name|periodMSec
operator|*=
literal|1000
expr_stmt|;
name|long
name|lastCheckpointTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|backupNode
operator|.
name|shouldCheckpointAtStartup
argument_list|()
condition|)
name|lastCheckpointTime
operator|=
name|now
argument_list|()
expr_stmt|;
while|while
condition|(
name|shouldRun
condition|)
block|{
try|try
block|{
name|long
name|now
init|=
name|now
argument_list|()
decl_stmt|;
name|boolean
name|shouldCheckpoint
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|now
operator|>=
name|lastCheckpointTime
operator|+
name|periodMSec
condition|)
block|{
name|shouldCheckpoint
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|long
name|size
init|=
name|getJournalSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>=
name|checkpointSize
condition|)
name|shouldCheckpoint
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|shouldCheckpoint
condition|)
block|{
name|doCheckpoint
argument_list|()
expr_stmt|;
name|lastCheckpointTime
operator|=
name|now
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in doCheckpoint: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Throwable Exception in doCheckpoint: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|periodMSec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
block|}
DECL|method|getJournalSize ()
specifier|private
name|long
name|getJournalSize
parameter_list|()
throws|throws
name|IOException
block|{
comment|// If BACKUP node has been loaded
comment|// get edits size from the local file. ACTIVE has the same.
if|if
condition|(
name|backupNode
operator|.
name|isRole
argument_list|(
name|NamenodeRole
operator|.
name|BACKUP
argument_list|)
operator|&&
name|getFSImage
argument_list|()
operator|.
name|getEditLog
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
return|return
name|backupNode
operator|.
name|journalSize
argument_list|()
return|;
comment|// Go to the ACTIVE node for its size
return|return
name|getNamenode
argument_list|()
operator|.
name|journalSize
argument_list|(
name|backupNode
operator|.
name|getRegistration
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Download<code>fsimage</code> and<code>edits</code>    * files from the remote name-node.    */
DECL|method|downloadCheckpoint (CheckpointSignature sig)
specifier|private
name|void
name|downloadCheckpoint
parameter_list|(
name|CheckpointSignature
name|sig
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Retrieve image file
name|String
name|fileid
init|=
literal|"getimage=1"
decl_stmt|;
name|Collection
argument_list|<
name|File
argument_list|>
name|list
init|=
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getFiles
argument_list|(
name|NameNodeFile
operator|.
name|IMAGE
argument_list|,
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|)
decl_stmt|;
name|File
index|[]
name|files
init|=
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|File
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
assert|assert
name|files
operator|.
name|length
operator|>
literal|0
operator|:
literal|"No checkpoint targets."
assert|;
name|String
name|nnHttpAddr
init|=
name|backupNode
operator|.
name|nnHttpAddress
decl_stmt|;
name|TransferFsImage
operator|.
name|getFileClient
argument_list|(
name|nnHttpAddr
argument_list|,
name|fileid
argument_list|,
name|files
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Downloaded file "
operator|+
name|files
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" size "
operator|+
name|files
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
operator|+
literal|" bytes."
argument_list|)
expr_stmt|;
comment|// Retrieve edits file
name|fileid
operator|=
literal|"getedit=1"
expr_stmt|;
name|list
operator|=
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getFiles
argument_list|(
name|NameNodeFile
operator|.
name|EDITS
argument_list|,
name|NameNodeDirType
operator|.
name|EDITS
argument_list|)
expr_stmt|;
name|files
operator|=
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|File
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
assert|assert
name|files
operator|.
name|length
operator|>
literal|0
operator|:
literal|"No checkpoint targets."
assert|;
name|TransferFsImage
operator|.
name|getFileClient
argument_list|(
name|nnHttpAddr
argument_list|,
name|fileid
argument_list|,
name|files
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Downloaded file "
operator|+
name|files
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" size "
operator|+
name|files
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
operator|+
literal|" bytes."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy the new image into remote name-node.    */
DECL|method|uploadCheckpoint (CheckpointSignature sig)
specifier|private
name|void
name|uploadCheckpoint
parameter_list|(
name|CheckpointSignature
name|sig
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Use the exact http addr as specified in config to deal with ip aliasing
name|InetSocketAddress
name|httpSocAddr
init|=
name|backupNode
operator|.
name|getHttpAddress
argument_list|()
decl_stmt|;
name|int
name|httpPort
init|=
name|httpSocAddr
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|String
name|fileid
init|=
literal|"putimage=1&port="
operator|+
name|httpPort
operator|+
literal|"&machine="
operator|+
name|infoBindAddress
operator|+
literal|"&token="
operator|+
name|sig
operator|.
name|toString
argument_list|()
operator|+
literal|"&newChecksum="
operator|+
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getImageDigest
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Posted URL "
operator|+
name|backupNode
operator|.
name|nnHttpAddress
operator|+
name|fileid
argument_list|)
expr_stmt|;
name|TransferFsImage
operator|.
name|getFileClient
argument_list|(
name|backupNode
operator|.
name|nnHttpAddress
argument_list|,
name|fileid
argument_list|,
operator|(
name|File
index|[]
operator|)
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new checkpoint    */
DECL|method|doCheckpoint ()
name|void
name|doCheckpoint
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|startTime
init|=
name|now
argument_list|()
decl_stmt|;
name|NamenodeCommand
name|cmd
init|=
name|getNamenode
argument_list|()
operator|.
name|startCheckpoint
argument_list|(
name|backupNode
operator|.
name|getRegistration
argument_list|()
argument_list|)
decl_stmt|;
name|CheckpointCommand
name|cpCmd
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|cmd
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|NamenodeProtocol
operator|.
name|ACT_SHUTDOWN
case|:
name|shutdown
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Name-node "
operator|+
name|backupNode
operator|.
name|nnRpcAddress
operator|+
literal|" requested shutdown."
argument_list|)
throw|;
case|case
name|NamenodeProtocol
operator|.
name|ACT_CHECKPOINT
case|:
name|cpCmd
operator|=
operator|(
name|CheckpointCommand
operator|)
name|cmd
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unsupported NamenodeCommand: "
operator|+
name|cmd
operator|.
name|getAction
argument_list|()
argument_list|)
throw|;
block|}
name|CheckpointSignature
name|sig
init|=
name|cpCmd
operator|.
name|getSignature
argument_list|()
decl_stmt|;
assert|assert
name|FSConstants
operator|.
name|LAYOUT_VERSION
operator|==
name|sig
operator|.
name|getLayoutVersion
argument_list|()
operator|:
literal|"Signature should have current layout version. Expected: "
operator|+
name|FSConstants
operator|.
name|LAYOUT_VERSION
operator|+
literal|" actual "
operator|+
name|sig
operator|.
name|getLayoutVersion
argument_list|()
assert|;
assert|assert
operator|!
name|backupNode
operator|.
name|isRole
argument_list|(
name|NamenodeRole
operator|.
name|CHECKPOINT
argument_list|)
operator|||
name|cpCmd
operator|.
name|isImageObsolete
argument_list|()
operator|:
literal|"checkpoint node should always download image."
assert|;
name|backupNode
operator|.
name|setCheckpointState
argument_list|(
name|CheckpointStates
operator|.
name|UPLOAD_START
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpCmd
operator|.
name|isImageObsolete
argument_list|()
condition|)
block|{
comment|// First reset storage on disk and memory state
name|backupNode
operator|.
name|resetNamespace
argument_list|()
expr_stmt|;
name|downloadCheckpoint
argument_list|(
name|sig
argument_list|)
expr_stmt|;
block|}
name|BackupImage
name|bnImage
init|=
name|getFSImage
argument_list|()
decl_stmt|;
name|bnImage
operator|.
name|getStorage
argument_list|()
operator|.
name|setBlockPoolID
argument_list|(
name|backupNode
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
expr_stmt|;
name|bnImage
operator|.
name|getStorage
argument_list|()
operator|.
name|setClusterID
argument_list|(
name|backupNode
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|bnImage
operator|.
name|loadCheckpoint
argument_list|(
name|sig
argument_list|)
expr_stmt|;
name|sig
operator|.
name|validateStorageInfo
argument_list|(
name|bnImage
argument_list|)
expr_stmt|;
name|bnImage
operator|.
name|saveCheckpoint
argument_list|()
expr_stmt|;
if|if
condition|(
name|cpCmd
operator|.
name|needToReturnImage
argument_list|()
condition|)
name|uploadCheckpoint
argument_list|(
name|sig
argument_list|)
expr_stmt|;
name|getNamenode
argument_list|()
operator|.
name|endCheckpoint
argument_list|(
name|backupNode
operator|.
name|getRegistration
argument_list|()
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|bnImage
operator|.
name|convergeJournalSpool
argument_list|()
expr_stmt|;
name|backupNode
operator|.
name|setRegistration
argument_list|()
expr_stmt|;
comment|// keep registration up to date
if|if
condition|(
name|backupNode
operator|.
name|isRole
argument_list|(
name|NamenodeRole
operator|.
name|CHECKPOINT
argument_list|)
condition|)
name|getFSImage
argument_list|()
operator|.
name|getEditLog
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checkpoint completed in "
operator|+
operator|(
name|now
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000
operator|+
literal|" seconds."
operator|+
literal|" New Image Size: "
operator|+
name|bnImage
operator|.
name|getStorage
argument_list|()
operator|.
name|getFsImageName
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

