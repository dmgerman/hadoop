begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CheckedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LayoutVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LayoutVersion
operator|.
name|Feature
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Util
operator|.
name|now
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseManager
operator|.
name|Lease
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOp
operator|.
name|*
import|;
end_import

begin_class
DECL|class|FSEditLogLoader
specifier|public
class|class
name|FSEditLogLoader
block|{
DECL|field|fsNamesys
specifier|private
specifier|final
name|FSNamesystem
name|fsNamesys
decl_stmt|;
DECL|method|FSEditLogLoader (FSNamesystem fsNamesys)
specifier|public
name|FSEditLogLoader
parameter_list|(
name|FSNamesystem
name|fsNamesys
parameter_list|)
block|{
name|this
operator|.
name|fsNamesys
operator|=
name|fsNamesys
expr_stmt|;
block|}
comment|/**    * Load an edit log, and apply the changes to the in-memory structure    * This is where we apply edits that we've been writing to disk all    * along.    */
DECL|method|loadFSEdits (EditLogInputStream edits)
name|int
name|loadFSEdits
parameter_list|(
name|EditLogInputStream
name|edits
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startTime
init|=
name|now
argument_list|()
decl_stmt|;
name|int
name|numEdits
init|=
name|loadFSEdits
argument_list|(
name|edits
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSImage
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Edits file "
operator|+
name|edits
operator|.
name|getName
argument_list|()
operator|+
literal|" of size "
operator|+
name|edits
operator|.
name|length
argument_list|()
operator|+
literal|" edits # "
operator|+
name|numEdits
operator|+
literal|" loaded in "
operator|+
operator|(
name|now
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
return|return
name|numEdits
return|;
block|}
comment|/**    * Read the header of fsedit log    * @param in fsedit stream    * @return the edit log version number    * @throws IOException if error occurs    */
DECL|method|readLogVersion (DataInputStream in)
name|int
name|readLogVersion
parameter_list|(
name|DataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|logVersion
init|=
literal|0
decl_stmt|;
comment|// Read log file version. Could be missing.
name|in
operator|.
name|mark
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// If edits log is greater than 2G, available method will return negative
comment|// numbers, so we avoid having to call available
name|boolean
name|available
init|=
literal|true
decl_stmt|;
try|try
block|{
name|logVersion
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|available
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|available
condition|)
block|{
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
name|logVersion
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|logVersion
operator|<
name|FSConstants
operator|.
name|LAYOUT_VERSION
condition|)
comment|// future version
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected version of the file system log file: "
operator|+
name|logVersion
operator|+
literal|". Current version = "
operator|+
name|FSConstants
operator|.
name|LAYOUT_VERSION
operator|+
literal|"."
argument_list|)
throw|;
block|}
assert|assert
name|logVersion
operator|<=
name|Storage
operator|.
name|LAST_UPGRADABLE_LAYOUT_VERSION
operator|:
literal|"Unsupported version "
operator|+
name|logVersion
assert|;
return|return
name|logVersion
return|;
block|}
DECL|method|loadFSEdits (EditLogInputStream edits, boolean closeOnExit)
name|int
name|loadFSEdits
parameter_list|(
name|EditLogInputStream
name|edits
parameter_list|,
name|boolean
name|closeOnExit
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedInputStream
name|bin
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|edits
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|bin
argument_list|)
decl_stmt|;
name|int
name|numEdits
init|=
literal|0
decl_stmt|;
name|int
name|logVersion
init|=
literal|0
decl_stmt|;
try|try
block|{
name|logVersion
operator|=
name|readLogVersion
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Checksum
name|checksum
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|LayoutVersion
operator|.
name|supports
argument_list|(
name|Feature
operator|.
name|EDITS_CHESKUM
argument_list|,
name|logVersion
argument_list|)
condition|)
block|{
name|checksum
operator|=
name|FSEditLog
operator|.
name|getChecksum
argument_list|()
expr_stmt|;
name|in
operator|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|CheckedInputStream
argument_list|(
name|bin
argument_list|,
name|checksum
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|numEdits
operator|=
name|loadEditRecords
argument_list|(
name|logVersion
argument_list|,
name|in
argument_list|,
name|checksum
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|closeOnExit
condition|)
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|logVersion
operator|!=
name|FSConstants
operator|.
name|LAYOUT_VERSION
condition|)
comment|// other version
name|numEdits
operator|++
expr_stmt|;
comment|// save this image asap
return|return
name|numEdits
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|loadEditRecords (int logVersion, DataInputStream in, Checksum checksum, boolean closeOnExit)
name|int
name|loadEditRecords
parameter_list|(
name|int
name|logVersion
parameter_list|,
name|DataInputStream
name|in
parameter_list|,
name|Checksum
name|checksum
parameter_list|,
name|boolean
name|closeOnExit
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDirectory
name|fsDir
init|=
name|fsNamesys
operator|.
name|dir
decl_stmt|;
name|int
name|numEdits
init|=
literal|0
decl_stmt|;
name|int
name|numOpAdd
init|=
literal|0
decl_stmt|,
name|numOpClose
init|=
literal|0
decl_stmt|,
name|numOpDelete
init|=
literal|0
decl_stmt|,
name|numOpRenameOld
init|=
literal|0
decl_stmt|,
name|numOpSetRepl
init|=
literal|0
decl_stmt|,
name|numOpMkDir
init|=
literal|0
decl_stmt|,
name|numOpSetPerm
init|=
literal|0
decl_stmt|,
name|numOpSetOwner
init|=
literal|0
decl_stmt|,
name|numOpSetGenStamp
init|=
literal|0
decl_stmt|,
name|numOpTimes
init|=
literal|0
decl_stmt|,
name|numOpRename
init|=
literal|0
decl_stmt|,
name|numOpConcatDelete
init|=
literal|0
decl_stmt|,
name|numOpSymlink
init|=
literal|0
decl_stmt|,
name|numOpGetDelegationToken
init|=
literal|0
decl_stmt|,
name|numOpRenewDelegationToken
init|=
literal|0
decl_stmt|,
name|numOpCancelDelegationToken
init|=
literal|0
decl_stmt|,
name|numOpUpdateMasterKey
init|=
literal|0
decl_stmt|,
name|numOpReassignLease
init|=
literal|0
decl_stmt|,
name|numOpOther
init|=
literal|0
decl_stmt|;
name|fsNamesys
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|fsDir
operator|.
name|writeLock
argument_list|()
expr_stmt|;
comment|// Keep track of the file offsets of the last several opcodes.
comment|// This is handy when manually recovering corrupted edits files.
name|PositionTrackingInputStream
name|tracker
init|=
operator|new
name|PositionTrackingInputStream
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|in
operator|=
operator|new
name|DataInputStream
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
name|long
name|recentOpcodeOffsets
index|[]
init|=
operator|new
name|long
index|[
literal|4
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|recentOpcodeOffsets
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
try|try
block|{
name|FSEditLogOp
operator|.
name|Reader
name|reader
init|=
operator|new
name|FSEditLogOp
operator|.
name|Reader
argument_list|(
name|in
argument_list|,
name|logVersion
argument_list|,
name|checksum
argument_list|)
decl_stmt|;
name|FSEditLogOp
name|op
decl_stmt|;
while|while
condition|(
operator|(
name|op
operator|=
name|reader
operator|.
name|readOp
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|recentOpcodeOffsets
index|[
name|numEdits
operator|%
name|recentOpcodeOffsets
operator|.
name|length
index|]
operator|=
name|tracker
operator|.
name|getPos
argument_list|()
expr_stmt|;
name|numEdits
operator|++
expr_stmt|;
switch|switch
condition|(
name|op
operator|.
name|opCode
condition|)
block|{
case|case
name|OP_ADD
case|:
case|case
name|OP_CLOSE
case|:
block|{
name|AddCloseOp
name|addCloseOp
init|=
operator|(
name|AddCloseOp
operator|)
name|op
decl_stmt|;
comment|// versions> 0 support per file replication
comment|// get name and replication
name|short
name|replication
init|=
name|fsNamesys
operator|.
name|adjustReplication
argument_list|(
name|addCloseOp
operator|.
name|replication
argument_list|)
decl_stmt|;
name|long
name|blockSize
init|=
name|addCloseOp
operator|.
name|blockSize
decl_stmt|;
name|BlockInfo
name|blocks
index|[]
init|=
operator|new
name|BlockInfo
index|[
name|addCloseOp
operator|.
name|blocks
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|addCloseOp
operator|.
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|addCloseOp
operator|.
name|opCode
operator|==
name|FSEditLogOpCodes
operator|.
name|OP_ADD
operator|&&
name|i
operator|==
name|addCloseOp
operator|.
name|blocks
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|blocks
index|[
name|i
index|]
operator|=
operator|new
name|BlockInfoUnderConstruction
argument_list|(
name|addCloseOp
operator|.
name|blocks
index|[
name|i
index|]
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|blocks
index|[
name|i
index|]
operator|=
operator|new
name|BlockInfo
argument_list|(
name|addCloseOp
operator|.
name|blocks
index|[
name|i
index|]
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
block|}
name|PermissionStatus
name|permissions
init|=
name|fsNamesys
operator|.
name|getUpgradePermission
argument_list|()
decl_stmt|;
if|if
condition|(
name|addCloseOp
operator|.
name|permissions
operator|!=
literal|null
condition|)
block|{
name|permissions
operator|=
name|addCloseOp
operator|.
name|permissions
expr_stmt|;
block|}
comment|// Older versions of HDFS does not store the block size in inode.
comment|// If the file has more than one block, use the size of the
comment|// first block as the blocksize. Otherwise use the default
comment|// block size.
if|if
condition|(
operator|-
literal|8
operator|<=
name|logVersion
operator|&&
name|blockSize
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|blocks
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|blockSize
operator|=
name|blocks
index|[
literal|0
index|]
operator|.
name|getNumBytes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|long
name|first
init|=
operator|(
operator|(
name|blocks
operator|.
name|length
operator|==
literal|1
operator|)
condition|?
name|blocks
index|[
literal|0
index|]
operator|.
name|getNumBytes
argument_list|()
else|:
literal|0
operator|)
decl_stmt|;
name|blockSize
operator|=
name|Math
operator|.
name|max
argument_list|(
name|fsNamesys
operator|.
name|getDefaultBlockSize
argument_list|()
argument_list|,
name|first
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The open lease transaction re-creates a file if necessary.
comment|// Delete the file if it already exists.
if|if
condition|(
name|FSNamesystem
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|FSNamesystem
operator|.
name|LOG
operator|.
name|debug
argument_list|(
name|op
operator|.
name|opCode
operator|+
literal|": "
operator|+
name|addCloseOp
operator|.
name|path
operator|+
literal|" numblocks : "
operator|+
name|blocks
operator|.
name|length
operator|+
literal|" clientHolder "
operator|+
name|addCloseOp
operator|.
name|clientName
operator|+
literal|" clientMachine "
operator|+
name|addCloseOp
operator|.
name|clientMachine
argument_list|)
expr_stmt|;
block|}
name|fsDir
operator|.
name|unprotectedDelete
argument_list|(
name|addCloseOp
operator|.
name|path
argument_list|,
name|addCloseOp
operator|.
name|mtime
argument_list|)
expr_stmt|;
comment|// add to the file tree
name|INodeFile
name|node
init|=
operator|(
name|INodeFile
operator|)
name|fsDir
operator|.
name|unprotectedAddFile
argument_list|(
name|addCloseOp
operator|.
name|path
argument_list|,
name|permissions
argument_list|,
name|blocks
argument_list|,
name|replication
argument_list|,
name|addCloseOp
operator|.
name|mtime
argument_list|,
name|addCloseOp
operator|.
name|atime
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|addCloseOp
operator|.
name|opCode
operator|==
name|FSEditLogOpCodes
operator|.
name|OP_ADD
condition|)
block|{
name|numOpAdd
operator|++
expr_stmt|;
comment|//
comment|// Replace current node with a INodeUnderConstruction.
comment|// Recreate in-memory lease record.
comment|//
name|INodeFileUnderConstruction
name|cons
init|=
operator|new
name|INodeFileUnderConstruction
argument_list|(
name|node
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|,
name|node
operator|.
name|getReplication
argument_list|()
argument_list|,
name|node
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|node
operator|.
name|getPreferredBlockSize
argument_list|()
argument_list|,
name|node
operator|.
name|getBlocks
argument_list|()
argument_list|,
name|node
operator|.
name|getPermissionStatus
argument_list|()
argument_list|,
name|addCloseOp
operator|.
name|clientName
argument_list|,
name|addCloseOp
operator|.
name|clientMachine
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|fsDir
operator|.
name|replaceNode
argument_list|(
name|addCloseOp
operator|.
name|path
argument_list|,
name|node
argument_list|,
name|cons
argument_list|)
expr_stmt|;
name|fsNamesys
operator|.
name|leaseManager
operator|.
name|addLease
argument_list|(
name|cons
operator|.
name|getClientName
argument_list|()
argument_list|,
name|addCloseOp
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|OP_SET_REPLICATION
case|:
block|{
name|numOpSetRepl
operator|++
expr_stmt|;
name|SetReplicationOp
name|setReplicationOp
init|=
operator|(
name|SetReplicationOp
operator|)
name|op
decl_stmt|;
name|short
name|replication
init|=
name|fsNamesys
operator|.
name|adjustReplication
argument_list|(
name|setReplicationOp
operator|.
name|replication
argument_list|)
decl_stmt|;
name|fsDir
operator|.
name|unprotectedSetReplication
argument_list|(
name|setReplicationOp
operator|.
name|path
argument_list|,
name|replication
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_CONCAT_DELETE
case|:
block|{
name|numOpConcatDelete
operator|++
expr_stmt|;
name|ConcatDeleteOp
name|concatDeleteOp
init|=
operator|(
name|ConcatDeleteOp
operator|)
name|op
decl_stmt|;
name|fsDir
operator|.
name|unprotectedConcat
argument_list|(
name|concatDeleteOp
operator|.
name|trg
argument_list|,
name|concatDeleteOp
operator|.
name|srcs
argument_list|,
name|concatDeleteOp
operator|.
name|timestamp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_RENAME_OLD
case|:
block|{
name|numOpRenameOld
operator|++
expr_stmt|;
name|RenameOldOp
name|renameOp
init|=
operator|(
name|RenameOldOp
operator|)
name|op
decl_stmt|;
name|HdfsFileStatus
name|dinfo
init|=
name|fsDir
operator|.
name|getFileInfo
argument_list|(
name|renameOp
operator|.
name|dst
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|fsDir
operator|.
name|unprotectedRenameTo
argument_list|(
name|renameOp
operator|.
name|src
argument_list|,
name|renameOp
operator|.
name|dst
argument_list|,
name|renameOp
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|fsNamesys
operator|.
name|unprotectedChangeLease
argument_list|(
name|renameOp
operator|.
name|src
argument_list|,
name|renameOp
operator|.
name|dst
argument_list|,
name|dinfo
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_DELETE
case|:
block|{
name|numOpDelete
operator|++
expr_stmt|;
name|DeleteOp
name|deleteOp
init|=
operator|(
name|DeleteOp
operator|)
name|op
decl_stmt|;
name|fsDir
operator|.
name|unprotectedDelete
argument_list|(
name|deleteOp
operator|.
name|path
argument_list|,
name|deleteOp
operator|.
name|timestamp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_MKDIR
case|:
block|{
name|numOpMkDir
operator|++
expr_stmt|;
name|MkdirOp
name|mkdirOp
init|=
operator|(
name|MkdirOp
operator|)
name|op
decl_stmt|;
name|PermissionStatus
name|permissions
init|=
name|fsNamesys
operator|.
name|getUpgradePermission
argument_list|()
decl_stmt|;
if|if
condition|(
name|mkdirOp
operator|.
name|permissions
operator|!=
literal|null
condition|)
block|{
name|permissions
operator|=
name|mkdirOp
operator|.
name|permissions
expr_stmt|;
block|}
name|fsDir
operator|.
name|unprotectedMkdir
argument_list|(
name|mkdirOp
operator|.
name|path
argument_list|,
name|permissions
argument_list|,
name|mkdirOp
operator|.
name|timestamp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_SET_GENSTAMP
case|:
block|{
name|numOpSetGenStamp
operator|++
expr_stmt|;
name|SetGenstampOp
name|setGenstampOp
init|=
operator|(
name|SetGenstampOp
operator|)
name|op
decl_stmt|;
name|fsNamesys
operator|.
name|setGenerationStamp
argument_list|(
name|setGenstampOp
operator|.
name|genStamp
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_SET_PERMISSIONS
case|:
block|{
name|numOpSetPerm
operator|++
expr_stmt|;
name|SetPermissionsOp
name|setPermissionsOp
init|=
operator|(
name|SetPermissionsOp
operator|)
name|op
decl_stmt|;
name|fsDir
operator|.
name|unprotectedSetPermission
argument_list|(
name|setPermissionsOp
operator|.
name|src
argument_list|,
name|setPermissionsOp
operator|.
name|permissions
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_SET_OWNER
case|:
block|{
name|numOpSetOwner
operator|++
expr_stmt|;
name|SetOwnerOp
name|setOwnerOp
init|=
operator|(
name|SetOwnerOp
operator|)
name|op
decl_stmt|;
name|fsDir
operator|.
name|unprotectedSetOwner
argument_list|(
name|setOwnerOp
operator|.
name|src
argument_list|,
name|setOwnerOp
operator|.
name|username
argument_list|,
name|setOwnerOp
operator|.
name|groupname
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_SET_NS_QUOTA
case|:
block|{
name|SetNSQuotaOp
name|setNSQuotaOp
init|=
operator|(
name|SetNSQuotaOp
operator|)
name|op
decl_stmt|;
name|fsDir
operator|.
name|unprotectedSetQuota
argument_list|(
name|setNSQuotaOp
operator|.
name|src
argument_list|,
name|setNSQuotaOp
operator|.
name|nsQuota
argument_list|,
name|FSConstants
operator|.
name|QUOTA_DONT_SET
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_CLEAR_NS_QUOTA
case|:
block|{
name|ClearNSQuotaOp
name|clearNSQuotaOp
init|=
operator|(
name|ClearNSQuotaOp
operator|)
name|op
decl_stmt|;
name|fsDir
operator|.
name|unprotectedSetQuota
argument_list|(
name|clearNSQuotaOp
operator|.
name|src
argument_list|,
name|FSConstants
operator|.
name|QUOTA_RESET
argument_list|,
name|FSConstants
operator|.
name|QUOTA_DONT_SET
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_SET_QUOTA
case|:
name|SetQuotaOp
name|setQuotaOp
init|=
operator|(
name|SetQuotaOp
operator|)
name|op
decl_stmt|;
name|fsDir
operator|.
name|unprotectedSetQuota
argument_list|(
name|setQuotaOp
operator|.
name|src
argument_list|,
name|setQuotaOp
operator|.
name|nsQuota
argument_list|,
name|setQuotaOp
operator|.
name|dsQuota
argument_list|)
expr_stmt|;
break|break;
case|case
name|OP_TIMES
case|:
block|{
name|numOpTimes
operator|++
expr_stmt|;
name|TimesOp
name|timesOp
init|=
operator|(
name|TimesOp
operator|)
name|op
decl_stmt|;
name|fsDir
operator|.
name|unprotectedSetTimes
argument_list|(
name|timesOp
operator|.
name|path
argument_list|,
name|timesOp
operator|.
name|mtime
argument_list|,
name|timesOp
operator|.
name|atime
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_SYMLINK
case|:
block|{
name|numOpSymlink
operator|++
expr_stmt|;
name|SymlinkOp
name|symlinkOp
init|=
operator|(
name|SymlinkOp
operator|)
name|op
decl_stmt|;
name|fsDir
operator|.
name|unprotectedSymlink
argument_list|(
name|symlinkOp
operator|.
name|path
argument_list|,
name|symlinkOp
operator|.
name|value
argument_list|,
name|symlinkOp
operator|.
name|mtime
argument_list|,
name|symlinkOp
operator|.
name|atime
argument_list|,
name|symlinkOp
operator|.
name|permissionStatus
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_RENAME
case|:
block|{
name|numOpRename
operator|++
expr_stmt|;
name|RenameOp
name|renameOp
init|=
operator|(
name|RenameOp
operator|)
name|op
decl_stmt|;
name|HdfsFileStatus
name|dinfo
init|=
name|fsDir
operator|.
name|getFileInfo
argument_list|(
name|renameOp
operator|.
name|dst
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|fsDir
operator|.
name|unprotectedRenameTo
argument_list|(
name|renameOp
operator|.
name|src
argument_list|,
name|renameOp
operator|.
name|dst
argument_list|,
name|renameOp
operator|.
name|timestamp
argument_list|,
name|renameOp
operator|.
name|options
argument_list|)
expr_stmt|;
name|fsNamesys
operator|.
name|unprotectedChangeLease
argument_list|(
name|renameOp
operator|.
name|src
argument_list|,
name|renameOp
operator|.
name|dst
argument_list|,
name|dinfo
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_GET_DELEGATION_TOKEN
case|:
block|{
name|numOpGetDelegationToken
operator|++
expr_stmt|;
name|GetDelegationTokenOp
name|getDelegationTokenOp
init|=
operator|(
name|GetDelegationTokenOp
operator|)
name|op
decl_stmt|;
name|fsNamesys
operator|.
name|getDelegationTokenSecretManager
argument_list|()
operator|.
name|addPersistedDelegationToken
argument_list|(
name|getDelegationTokenOp
operator|.
name|token
argument_list|,
name|getDelegationTokenOp
operator|.
name|expiryTime
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_RENEW_DELEGATION_TOKEN
case|:
block|{
name|numOpRenewDelegationToken
operator|++
expr_stmt|;
name|RenewDelegationTokenOp
name|renewDelegationTokenOp
init|=
operator|(
name|RenewDelegationTokenOp
operator|)
name|op
decl_stmt|;
name|fsNamesys
operator|.
name|getDelegationTokenSecretManager
argument_list|()
operator|.
name|updatePersistedTokenRenewal
argument_list|(
name|renewDelegationTokenOp
operator|.
name|token
argument_list|,
name|renewDelegationTokenOp
operator|.
name|expiryTime
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_CANCEL_DELEGATION_TOKEN
case|:
block|{
name|numOpCancelDelegationToken
operator|++
expr_stmt|;
name|CancelDelegationTokenOp
name|cancelDelegationTokenOp
init|=
operator|(
name|CancelDelegationTokenOp
operator|)
name|op
decl_stmt|;
name|fsNamesys
operator|.
name|getDelegationTokenSecretManager
argument_list|()
operator|.
name|updatePersistedTokenCancellation
argument_list|(
name|cancelDelegationTokenOp
operator|.
name|token
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_UPDATE_MASTER_KEY
case|:
block|{
name|numOpUpdateMasterKey
operator|++
expr_stmt|;
name|UpdateMasterKeyOp
name|updateMasterKeyOp
init|=
operator|(
name|UpdateMasterKeyOp
operator|)
name|op
decl_stmt|;
name|fsNamesys
operator|.
name|getDelegationTokenSecretManager
argument_list|()
operator|.
name|updatePersistedMasterKey
argument_list|(
name|updateMasterKeyOp
operator|.
name|key
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_REASSIGN_LEASE
case|:
block|{
name|numOpReassignLease
operator|++
expr_stmt|;
name|ReassignLeaseOp
name|reassignLeaseOp
init|=
operator|(
name|ReassignLeaseOp
operator|)
name|op
decl_stmt|;
name|Lease
name|lease
init|=
name|fsNamesys
operator|.
name|leaseManager
operator|.
name|getLease
argument_list|(
name|reassignLeaseOp
operator|.
name|leaseHolder
argument_list|)
decl_stmt|;
name|INodeFileUnderConstruction
name|pendingFile
init|=
operator|(
name|INodeFileUnderConstruction
operator|)
name|fsDir
operator|.
name|getFileINode
argument_list|(
name|reassignLeaseOp
operator|.
name|path
argument_list|)
decl_stmt|;
name|fsNamesys
operator|.
name|reassignLeaseInternal
argument_list|(
name|lease
argument_list|,
name|reassignLeaseOp
operator|.
name|path
argument_list|,
name|reassignLeaseOp
operator|.
name|newHolder
argument_list|,
name|pendingFile
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OP_DATANODE_ADD
case|:
case|case
name|OP_DATANODE_REMOVE
case|:
name|numOpOther
operator|++
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid operation read "
operator|+
name|op
operator|.
name|opCode
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|check203UpgradeFailure
argument_list|(
name|logVersion
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|closeOnExit
condition|)
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Catch Throwable because in the case of a truly corrupt edits log, any
comment|// sort of error might be thrown (NumberFormat, NullPointer, EOF, etc.)
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Error replaying edit log at offset "
operator|+
name|tracker
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|recentOpcodeOffsets
index|[
literal|0
index|]
operator|!=
operator|-
literal|1
condition|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|recentOpcodeOffsets
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nRecent opcode offsets:"
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|offset
range|:
name|recentOpcodeOffsets
control|)
block|{
if|if
condition|(
name|offset
operator|!=
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|errorMessage
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FSImage
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errorMessage
argument_list|,
name|t
argument_list|)
throw|;
block|}
finally|finally
block|{
name|fsDir
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
name|fsNamesys
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|FSImage
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|FSImage
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"numOpAdd = "
operator|+
name|numOpAdd
operator|+
literal|" numOpClose = "
operator|+
name|numOpClose
operator|+
literal|" numOpDelete = "
operator|+
name|numOpDelete
operator|+
literal|" numOpRenameOld = "
operator|+
name|numOpRenameOld
operator|+
literal|" numOpSetRepl = "
operator|+
name|numOpSetRepl
operator|+
literal|" numOpMkDir = "
operator|+
name|numOpMkDir
operator|+
literal|" numOpSetPerm = "
operator|+
name|numOpSetPerm
operator|+
literal|" numOpSetOwner = "
operator|+
name|numOpSetOwner
operator|+
literal|" numOpSetGenStamp = "
operator|+
name|numOpSetGenStamp
operator|+
literal|" numOpTimes = "
operator|+
name|numOpTimes
operator|+
literal|" numOpConcatDelete  = "
operator|+
name|numOpConcatDelete
operator|+
literal|" numOpRename = "
operator|+
name|numOpRename
operator|+
literal|" numOpGetDelegationToken = "
operator|+
name|numOpGetDelegationToken
operator|+
literal|" numOpRenewDelegationToken = "
operator|+
name|numOpRenewDelegationToken
operator|+
literal|" numOpCancelDelegationToken = "
operator|+
name|numOpCancelDelegationToken
operator|+
literal|" numOpUpdateMasterKey = "
operator|+
name|numOpUpdateMasterKey
operator|+
literal|" numOpReassignLease = "
operator|+
name|numOpReassignLease
operator|+
literal|" numOpOther = "
operator|+
name|numOpOther
argument_list|)
expr_stmt|;
block|}
return|return
name|numEdits
return|;
block|}
comment|/**    * Throw appropriate exception during upgrade from 203, when editlog loading    * could fail due to opcode conflicts.    */
DECL|method|check203UpgradeFailure (int logVersion, IOException ex)
specifier|private
name|void
name|check203UpgradeFailure
parameter_list|(
name|int
name|logVersion
parameter_list|,
name|IOException
name|ex
parameter_list|)
throws|throws
name|IOException
block|{
comment|// 0.20.203 version version has conflicting opcodes with the later releases.
comment|// The editlog must be emptied by restarting the namenode, before proceeding
comment|// with the upgrade.
if|if
condition|(
name|Storage
operator|.
name|is203LayoutVersion
argument_list|(
name|logVersion
argument_list|)
operator|&&
name|logVersion
operator|!=
name|FSConstants
operator|.
name|LAYOUT_VERSION
condition|)
block|{
name|String
name|msg
init|=
literal|"During upgrade failed to load the editlog version "
operator|+
name|logVersion
operator|+
literal|" from release 0.20.203. Please go back to the old "
operator|+
literal|" release and restart the namenode. This empties the editlog "
operator|+
literal|" and saves the namespace. Resume the upgrade after this step."
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
name|ex
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Stream wrapper that keeps track of the current file position.    */
DECL|class|PositionTrackingInputStream
specifier|private
specifier|static
class|class
name|PositionTrackingInputStream
extends|extends
name|FilterInputStream
block|{
DECL|field|curPos
specifier|private
name|long
name|curPos
init|=
literal|0
decl_stmt|;
DECL|field|markPos
specifier|private
name|long
name|markPos
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|PositionTrackingInputStream (InputStream is)
specifier|public
name|PositionTrackingInputStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|super
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|ret
init|=
name|super
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
operator|-
literal|1
condition|)
name|curPos
operator|++
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|read (byte[] data)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ret
init|=
name|super
operator|.
name|read
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|>
literal|0
condition|)
name|curPos
operator|+=
name|ret
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|read (byte[] data, int offset, int length)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ret
init|=
name|super
operator|.
name|read
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|>
literal|0
condition|)
name|curPos
operator|+=
name|ret
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|mark (int limit)
specifier|public
name|void
name|mark
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|super
operator|.
name|mark
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|markPos
operator|=
name|curPos
expr_stmt|;
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|markPos
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not marked!"
argument_list|)
throw|;
block|}
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|curPos
operator|=
name|markPos
expr_stmt|;
name|markPos
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
block|{
return|return
name|curPos
return|;
block|}
block|}
block|}
end_class

end_unit

