begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|GenerationStamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FSDataset
operator|.
name|FSVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Periodically scans the data directories for block and block metadata files.  * Reconciles the differences with block information maintained in  * {@link FSDataset}  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DirectoryScanner
specifier|public
class|class
name|DirectoryScanner
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DirectoryScanner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_SCAN_INTERVAL
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_SCAN_INTERVAL
init|=
literal|21600
decl_stmt|;
DECL|field|datanode
specifier|private
specifier|final
name|DataNode
name|datanode
decl_stmt|;
DECL|field|dataset
specifier|private
specifier|final
name|FSDataset
name|dataset
decl_stmt|;
DECL|field|reportCompileThreadPool
specifier|private
specifier|final
name|ExecutorService
name|reportCompileThreadPool
decl_stmt|;
DECL|field|masterThread
specifier|private
specifier|final
name|ScheduledExecutorService
name|masterThread
decl_stmt|;
DECL|field|scanPeriodMsecs
specifier|private
specifier|final
name|long
name|scanPeriodMsecs
decl_stmt|;
DECL|field|shouldRun
specifier|private
specifier|volatile
name|boolean
name|shouldRun
init|=
literal|false
decl_stmt|;
DECL|field|retainDiffs
specifier|private
name|boolean
name|retainDiffs
init|=
literal|false
decl_stmt|;
DECL|field|diffs
name|ScanInfoPerBlockPool
name|diffs
init|=
operator|new
name|ScanInfoPerBlockPool
argument_list|()
decl_stmt|;
DECL|field|stats
name|Map
argument_list|<
name|String
argument_list|,
name|Stats
argument_list|>
name|stats
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Stats
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Allow retaining diffs for unit test and analysis    * @param b - defaults to false (off)    */
DECL|method|setRetainDiffs (boolean b)
name|void
name|setRetainDiffs
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|retainDiffs
operator|=
name|b
expr_stmt|;
block|}
comment|/** Stats tracked for reporting and testing, per blockpool */
DECL|class|Stats
specifier|static
class|class
name|Stats
block|{
DECL|field|bpid
name|String
name|bpid
decl_stmt|;
DECL|field|totalBlocks
name|long
name|totalBlocks
init|=
literal|0
decl_stmt|;
DECL|field|missingMetaFile
name|long
name|missingMetaFile
init|=
literal|0
decl_stmt|;
DECL|field|missingBlockFile
name|long
name|missingBlockFile
init|=
literal|0
decl_stmt|;
DECL|field|missingMemoryBlocks
name|long
name|missingMemoryBlocks
init|=
literal|0
decl_stmt|;
DECL|field|mismatchBlocks
name|long
name|mismatchBlocks
init|=
literal|0
decl_stmt|;
DECL|method|Stats (String bpid)
specifier|public
name|Stats
parameter_list|(
name|String
name|bpid
parameter_list|)
block|{
name|this
operator|.
name|bpid
operator|=
name|bpid
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"BlockPool "
operator|+
name|bpid
operator|+
literal|" Total blocks: "
operator|+
name|totalBlocks
operator|+
literal|", missing metadata files:"
operator|+
name|missingMetaFile
operator|+
literal|", missing block files:"
operator|+
name|missingBlockFile
operator|+
literal|", missing blocks in memory:"
operator|+
name|missingMemoryBlocks
operator|+
literal|", mismatched blocks:"
operator|+
name|mismatchBlocks
return|;
block|}
block|}
DECL|class|ScanInfoPerBlockPool
specifier|static
class|class
name|ScanInfoPerBlockPool
extends|extends
name|HashMap
argument_list|<
name|String
argument_list|,
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
argument_list|>
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|ScanInfoPerBlockPool ()
name|ScanInfoPerBlockPool
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|ScanInfoPerBlockPool (int sz)
name|ScanInfoPerBlockPool
parameter_list|(
name|int
name|sz
parameter_list|)
block|{
name|super
argument_list|(
name|sz
argument_list|)
expr_stmt|;
block|}
comment|/**      * Merges "that" ScanInfoPerBlockPool into this one      * @param that      */
DECL|method|addAll (ScanInfoPerBlockPool that)
specifier|public
name|void
name|addAll
parameter_list|(
name|ScanInfoPerBlockPool
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
argument_list|>
name|entry
range|:
name|that
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|bpid
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
name|list
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|containsKey
argument_list|(
name|bpid
argument_list|)
condition|)
block|{
comment|//merge that per-bpid linked list with this one
name|this
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//add that new bpid and its linked list to this
name|this
operator|.
name|put
argument_list|(
name|bpid
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Convert all the LinkedList values in this ScanInfoPerBlockPool map      * into sorted arrays, and return a new map of these arrays per blockpool      * @return a map of ScanInfo arrays per blockpool      */
DECL|method|toSortedArrays ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ScanInfo
index|[]
argument_list|>
name|toSortedArrays
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ScanInfo
index|[]
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ScanInfo
index|[]
argument_list|>
argument_list|(
name|this
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
argument_list|>
name|entry
range|:
name|this
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|bpid
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
name|list
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// convert list to array
name|ScanInfo
index|[]
name|record
init|=
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|ScanInfo
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
comment|// Sort array based on blockId
name|Arrays
operator|.
name|sort
argument_list|(
name|record
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|bpid
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
comment|/**    * Tracks the files and other information related to a block on the disk    * Missing file is indicated by setting the corresponding member    * to null.    */
DECL|class|ScanInfo
specifier|static
class|class
name|ScanInfo
implements|implements
name|Comparable
argument_list|<
name|ScanInfo
argument_list|>
block|{
DECL|field|blockId
specifier|private
specifier|final
name|long
name|blockId
decl_stmt|;
DECL|field|metaFile
specifier|private
specifier|final
name|File
name|metaFile
decl_stmt|;
DECL|field|blockFile
specifier|private
specifier|final
name|File
name|blockFile
decl_stmt|;
DECL|field|volume
specifier|private
specifier|final
name|FSVolume
name|volume
decl_stmt|;
DECL|method|ScanInfo (long blockId)
name|ScanInfo
parameter_list|(
name|long
name|blockId
parameter_list|)
block|{
name|this
argument_list|(
name|blockId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ScanInfo (long blockId, File blockFile, File metaFile, FSVolume vol)
name|ScanInfo
parameter_list|(
name|long
name|blockId
parameter_list|,
name|File
name|blockFile
parameter_list|,
name|File
name|metaFile
parameter_list|,
name|FSVolume
name|vol
parameter_list|)
block|{
name|this
operator|.
name|blockId
operator|=
name|blockId
expr_stmt|;
name|this
operator|.
name|metaFile
operator|=
name|metaFile
expr_stmt|;
name|this
operator|.
name|blockFile
operator|=
name|blockFile
expr_stmt|;
name|this
operator|.
name|volume
operator|=
name|vol
expr_stmt|;
block|}
DECL|method|getMetaFile ()
name|File
name|getMetaFile
parameter_list|()
block|{
return|return
name|metaFile
return|;
block|}
DECL|method|getBlockFile ()
name|File
name|getBlockFile
parameter_list|()
block|{
return|return
name|blockFile
return|;
block|}
DECL|method|getBlockId ()
name|long
name|getBlockId
parameter_list|()
block|{
return|return
name|blockId
return|;
block|}
DECL|method|getVolume ()
name|FSVolume
name|getVolume
parameter_list|()
block|{
return|return
name|volume
return|;
block|}
annotation|@
name|Override
comment|// Comparable
DECL|method|compareTo (ScanInfo b)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ScanInfo
name|b
parameter_list|)
block|{
if|if
condition|(
name|blockId
operator|<
name|b
operator|.
name|blockId
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|blockId
operator|==
name|b
operator|.
name|blockId
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
annotation|@
name|Override
comment|// Object
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|ScanInfo
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|blockId
operator|==
operator|(
operator|(
name|ScanInfo
operator|)
name|o
operator|)
operator|.
name|blockId
return|;
block|}
annotation|@
name|Override
comment|// Object
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|blockId
operator|^
operator|(
name|blockId
operator|>>>
literal|32
operator|)
argument_list|)
return|;
block|}
DECL|method|getGenStamp ()
specifier|public
name|long
name|getGenStamp
parameter_list|()
block|{
return|return
name|metaFile
operator|!=
literal|null
condition|?
name|Block
operator|.
name|getGenerationStamp
argument_list|(
name|metaFile
operator|.
name|getName
argument_list|()
argument_list|)
else|:
name|GenerationStamp
operator|.
name|GRANDFATHER_GENERATION_STAMP
return|;
block|}
block|}
DECL|method|DirectoryScanner (DataNode dn, FSDataset dataset, Configuration conf)
name|DirectoryScanner
parameter_list|(
name|DataNode
name|dn
parameter_list|,
name|FSDataset
name|dataset
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|datanode
operator|=
name|dn
expr_stmt|;
name|this
operator|.
name|dataset
operator|=
name|dataset
expr_stmt|;
name|int
name|interval
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY
argument_list|,
name|DEFAULT_SCAN_INTERVAL
argument_list|)
decl_stmt|;
name|scanPeriodMsecs
operator|=
name|interval
operator|*
literal|1000L
expr_stmt|;
comment|//msec
name|int
name|threads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THREADS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THREADS_DEFAULT
argument_list|)
decl_stmt|;
name|reportCompileThreadPool
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|threads
argument_list|,
operator|new
name|Daemon
operator|.
name|DaemonFactory
argument_list|()
argument_list|)
expr_stmt|;
name|masterThread
operator|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
operator|new
name|Daemon
operator|.
name|DaemonFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|start ()
name|void
name|start
parameter_list|()
block|{
name|shouldRun
operator|=
literal|true
expr_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|offset
init|=
name|rand
operator|.
name|nextInt
argument_list|(
call|(
name|int
call|)
argument_list|(
name|scanPeriodMsecs
operator|/
literal|1000L
argument_list|)
argument_list|)
operator|*
literal|1000L
decl_stmt|;
comment|//msec
name|long
name|firstScanTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|offset
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Periodic Directory Tree Verification scan starting at "
operator|+
name|firstScanTime
operator|+
literal|" with interval "
operator|+
name|scanPeriodMsecs
argument_list|)
expr_stmt|;
name|masterThread
operator|.
name|scheduleAtFixedRate
argument_list|(
name|this
argument_list|,
name|offset
argument_list|,
name|scanPeriodMsecs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|// for unit test
DECL|method|getRunStatus ()
name|boolean
name|getRunStatus
parameter_list|()
block|{
return|return
name|shouldRun
return|;
block|}
DECL|method|clear ()
specifier|private
name|void
name|clear
parameter_list|()
block|{
name|diffs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stats
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Main program loop for DirectoryScanner    * Runs "reconcile()" periodically under the masterThread.    */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
operator|!
name|shouldRun
condition|)
block|{
comment|//shutdown has been activated
name|LOG
operator|.
name|warn
argument_list|(
literal|"this cycle terminating immediately because 'shouldRun' has been deactivated"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
index|[]
name|bpids
init|=
name|dataset
operator|.
name|getBPIdlist
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|bpid
range|:
name|bpids
control|)
block|{
name|UpgradeManagerDatanode
name|um
init|=
name|datanode
operator|.
name|getUpgradeManagerDatanode
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|um
operator|!=
literal|null
operator|&&
operator|!
name|um
operator|.
name|isUpgradeCompleted
argument_list|()
condition|)
block|{
comment|//If distributed upgrades underway, exit and wait for next cycle.
name|LOG
operator|.
name|warn
argument_list|(
literal|"this cycle terminating immediately because Distributed Upgrade is in process"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|//We're are okay to run - do it
name|reconcile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//Log and continue - allows Executor to run again next cycle
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception during DirectoryScanner execution - will continue next cycle"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|er
parameter_list|)
block|{
comment|//Non-recoverable error - re-throw after logging the problem
name|LOG
operator|.
name|error
argument_list|(
literal|"System Error during DirectoryScanner execution - permanently terminating periodic scanner"
argument_list|,
name|er
argument_list|)
expr_stmt|;
throw|throw
name|er
throw|;
block|}
block|}
DECL|method|shutdown ()
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
operator|!
name|shouldRun
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"DirectoryScanner: shutdown has been called, but periodic scanner not started"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"DirectoryScanner: shutdown has been called"
argument_list|)
expr_stmt|;
block|}
name|shouldRun
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|masterThread
operator|!=
literal|null
condition|)
name|masterThread
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|reportCompileThreadPool
operator|!=
literal|null
condition|)
name|reportCompileThreadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|retainDiffs
condition|)
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Reconcile differences between disk and in-memory blocks    */
DECL|method|reconcile ()
name|void
name|reconcile
parameter_list|()
block|{
name|scan
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
argument_list|>
name|entry
range|:
name|diffs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|bpid
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
name|diff
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|ScanInfo
name|info
range|:
name|diff
control|)
block|{
name|dataset
operator|.
name|checkAndUpdate
argument_list|(
name|bpid
argument_list|,
name|info
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|info
operator|.
name|getBlockFile
argument_list|()
argument_list|,
name|info
operator|.
name|getMetaFile
argument_list|()
argument_list|,
name|info
operator|.
name|getVolume
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|retainDiffs
condition|)
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Scan for the differences between disk and in-memory blocks    * Scan only the "finalized blocks" lists of both disk and memory.    */
DECL|method|scan ()
name|void
name|scan
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ScanInfo
index|[]
argument_list|>
name|diskReport
init|=
name|getDiskReport
argument_list|()
decl_stmt|;
comment|// Hold FSDataset lock to prevent further changes to the block map
synchronized|synchronized
init|(
name|dataset
init|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|ScanInfo
index|[]
argument_list|>
name|entry
range|:
name|diskReport
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|bpid
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ScanInfo
index|[]
name|blockpoolReport
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Stats
name|statsRecord
init|=
operator|new
name|Stats
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|bpid
argument_list|,
name|statsRecord
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
name|diffRecord
init|=
operator|new
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
argument_list|()
decl_stmt|;
name|diffs
operator|.
name|put
argument_list|(
name|bpid
argument_list|,
name|diffRecord
argument_list|)
expr_stmt|;
name|statsRecord
operator|.
name|totalBlocks
operator|=
name|blockpoolReport
operator|.
name|length
expr_stmt|;
name|List
argument_list|<
name|Block
argument_list|>
name|bl
init|=
name|dataset
operator|.
name|getFinalizedBlocks
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
name|Block
index|[]
name|memReport
init|=
name|bl
operator|.
name|toArray
argument_list|(
operator|new
name|Block
index|[
name|bl
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|memReport
argument_list|)
expr_stmt|;
comment|// Sort based on blockId
name|int
name|d
init|=
literal|0
decl_stmt|;
comment|// index for blockpoolReport
name|int
name|m
init|=
literal|0
decl_stmt|;
comment|// index for memReprot
while|while
condition|(
name|m
operator|<
name|memReport
operator|.
name|length
operator|&&
name|d
operator|<
name|blockpoolReport
operator|.
name|length
condition|)
block|{
name|Block
name|memBlock
init|=
name|memReport
index|[
name|Math
operator|.
name|min
argument_list|(
name|m
argument_list|,
name|memReport
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
decl_stmt|;
name|ScanInfo
name|info
init|=
name|blockpoolReport
index|[
name|Math
operator|.
name|min
argument_list|(
name|d
argument_list|,
name|blockpoolReport
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getBlockId
argument_list|()
operator|<
name|memBlock
operator|.
name|getBlockId
argument_list|()
condition|)
block|{
comment|// Block is missing in memory
name|statsRecord
operator|.
name|missingMemoryBlocks
operator|++
expr_stmt|;
name|addDifference
argument_list|(
name|diffRecord
argument_list|,
name|statsRecord
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|d
operator|++
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|info
operator|.
name|getBlockId
argument_list|()
operator|>
name|memBlock
operator|.
name|getBlockId
argument_list|()
condition|)
block|{
comment|// Block is missing on the disk
name|addDifference
argument_list|(
name|diffRecord
argument_list|,
name|statsRecord
argument_list|,
name|memBlock
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// Block file and/or metadata file exists on the disk
comment|// Block exists in memory
if|if
condition|(
name|info
operator|.
name|getBlockFile
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Block metadata file exits and block file is missing
name|addDifference
argument_list|(
name|diffRecord
argument_list|,
name|statsRecord
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|info
operator|.
name|getGenStamp
argument_list|()
operator|!=
name|memBlock
operator|.
name|getGenerationStamp
argument_list|()
operator|||
name|info
operator|.
name|getBlockFile
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
name|memBlock
operator|.
name|getNumBytes
argument_list|()
condition|)
block|{
comment|// Block metadata file is missing or has wrong generation stamp,
comment|// or block file length is different than expected
name|statsRecord
operator|.
name|mismatchBlocks
operator|++
expr_stmt|;
name|addDifference
argument_list|(
name|diffRecord
argument_list|,
name|statsRecord
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|d
operator|++
expr_stmt|;
name|m
operator|++
expr_stmt|;
block|}
while|while
condition|(
name|m
operator|<
name|memReport
operator|.
name|length
condition|)
block|{
name|addDifference
argument_list|(
name|diffRecord
argument_list|,
name|statsRecord
argument_list|,
name|memReport
index|[
name|m
operator|++
index|]
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|d
operator|<
name|blockpoolReport
operator|.
name|length
condition|)
block|{
name|statsRecord
operator|.
name|missingMemoryBlocks
operator|++
expr_stmt|;
name|addDifference
argument_list|(
name|diffRecord
argument_list|,
name|statsRecord
argument_list|,
name|blockpoolReport
index|[
name|d
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|statsRecord
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//end for
block|}
comment|//end synchronized
block|}
comment|/**    * Block is found on the disk. In-memory block is missing or does not match    * the block on the disk    */
DECL|method|addDifference (LinkedList<ScanInfo> diffRecord, Stats statsRecord, ScanInfo info)
specifier|private
name|void
name|addDifference
parameter_list|(
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
name|diffRecord
parameter_list|,
name|Stats
name|statsRecord
parameter_list|,
name|ScanInfo
name|info
parameter_list|)
block|{
name|statsRecord
operator|.
name|missingMetaFile
operator|+=
name|info
operator|.
name|getMetaFile
argument_list|()
operator|==
literal|null
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|statsRecord
operator|.
name|missingBlockFile
operator|+=
name|info
operator|.
name|getBlockFile
argument_list|()
operator|==
literal|null
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|diffRecord
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
comment|/** Block is not found on the disk */
DECL|method|addDifference (LinkedList<ScanInfo> diffRecord, Stats statsRecord, long blockId)
specifier|private
name|void
name|addDifference
parameter_list|(
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
name|diffRecord
parameter_list|,
name|Stats
name|statsRecord
parameter_list|,
name|long
name|blockId
parameter_list|)
block|{
name|statsRecord
operator|.
name|missingBlockFile
operator|++
expr_stmt|;
name|statsRecord
operator|.
name|missingMetaFile
operator|++
expr_stmt|;
name|diffRecord
operator|.
name|add
argument_list|(
operator|new
name|ScanInfo
argument_list|(
name|blockId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Get lists of blocks on the disk sorted by blockId, per blockpool */
DECL|method|getDiskReport ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ScanInfo
index|[]
argument_list|>
name|getDiskReport
parameter_list|()
block|{
comment|// First get list of data directories
name|List
argument_list|<
name|FSVolume
argument_list|>
name|volumes
init|=
name|dataset
operator|.
name|volumes
operator|.
name|getVolumes
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ScanInfoPerBlockPool
argument_list|>
name|dirReports
init|=
operator|new
name|ArrayList
argument_list|<
name|ScanInfoPerBlockPool
argument_list|>
argument_list|(
name|volumes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|ScanInfoPerBlockPool
argument_list|>
argument_list|>
name|compilersInProgress
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|ScanInfoPerBlockPool
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|volumes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|dataset
operator|.
name|volumes
operator|.
name|isValid
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
comment|// volume is still valid
name|dirReports
operator|.
name|add
argument_list|(
name|i
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ReportCompiler
name|reportCompiler
init|=
operator|new
name|ReportCompiler
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|ScanInfoPerBlockPool
argument_list|>
name|result
init|=
name|reportCompileThreadPool
operator|.
name|submit
argument_list|(
name|reportCompiler
argument_list|)
decl_stmt|;
name|compilersInProgress
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|ScanInfoPerBlockPool
argument_list|>
argument_list|>
name|report
range|:
name|compilersInProgress
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|dirReports
operator|.
name|add
argument_list|(
name|report
operator|.
name|getKey
argument_list|()
argument_list|,
name|report
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error compiling report"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
comment|// Propagate ex to DataBlockScanner to deal with
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|// Compile consolidated report for all the volumes
name|ScanInfoPerBlockPool
name|list
init|=
operator|new
name|ScanInfoPerBlockPool
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|volumes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|dataset
operator|.
name|volumes
operator|.
name|isValid
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
comment|// volume is still valid
name|list
operator|.
name|addAll
argument_list|(
name|dirReports
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
operator|.
name|toSortedArrays
argument_list|()
return|;
block|}
DECL|method|isBlockMetaFile (String blockId, String metaFile)
specifier|private
specifier|static
name|boolean
name|isBlockMetaFile
parameter_list|(
name|String
name|blockId
parameter_list|,
name|String
name|metaFile
parameter_list|)
block|{
return|return
name|metaFile
operator|.
name|startsWith
argument_list|(
name|blockId
argument_list|)
operator|&&
name|metaFile
operator|.
name|endsWith
argument_list|(
name|Block
operator|.
name|METADATA_EXTENSION
argument_list|)
return|;
block|}
DECL|class|ReportCompiler
specifier|private
specifier|static
class|class
name|ReportCompiler
implements|implements
name|Callable
argument_list|<
name|ScanInfoPerBlockPool
argument_list|>
block|{
DECL|field|volume
specifier|private
name|FSVolume
name|volume
decl_stmt|;
DECL|method|ReportCompiler (FSVolume volume)
specifier|public
name|ReportCompiler
parameter_list|(
name|FSVolume
name|volume
parameter_list|)
block|{
name|this
operator|.
name|volume
operator|=
name|volume
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|ScanInfoPerBlockPool
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|bpList
init|=
name|volume
operator|.
name|getBlockPoolList
argument_list|()
decl_stmt|;
name|ScanInfoPerBlockPool
name|result
init|=
operator|new
name|ScanInfoPerBlockPool
argument_list|(
name|bpList
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|bpid
range|:
name|bpList
control|)
block|{
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
name|report
init|=
operator|new
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
argument_list|()
decl_stmt|;
name|File
name|bpFinalizedDir
init|=
name|volume
operator|.
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getFinalizedDir
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|bpid
argument_list|,
name|compileReport
argument_list|(
name|volume
argument_list|,
name|bpFinalizedDir
argument_list|,
name|report
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** Compile list {@link ScanInfo} for the blocks in the directory<dir> */
DECL|method|compileReport (FSVolume vol, File dir, LinkedList<ScanInfo> report)
specifier|private
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
name|compileReport
parameter_list|(
name|FSVolume
name|vol
parameter_list|,
name|File
name|dir
parameter_list|,
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
name|report
parameter_list|)
block|{
name|File
index|[]
name|files
decl_stmt|;
try|try
block|{
name|files
operator|=
name|FileUtil
operator|.
name|listFiles
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception occured while compiling report: "
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
comment|// Ignore this directory and proceed.
return|return
name|report
return|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|files
argument_list|)
expr_stmt|;
comment|/*        * Assumption: In the sorted list of files block file appears immediately        * before block metadata file. This is true for the current naming        * convention for block file blk_<blockid> and meta file        * blk_<blockid>_<genstamp>.meta        */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|files
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|compileReport
argument_list|(
name|vol
argument_list|,
name|files
index|[
name|i
index|]
argument_list|,
name|report
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|Block
operator|.
name|isBlockFilename
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|isBlockMetaFile
argument_list|(
literal|"blk_"
argument_list|,
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|long
name|blockId
init|=
name|Block
operator|.
name|getBlockId
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|report
operator|.
name|add
argument_list|(
operator|new
name|ScanInfo
argument_list|(
name|blockId
argument_list|,
literal|null
argument_list|,
name|files
index|[
name|i
index|]
argument_list|,
name|vol
argument_list|)
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|File
name|blockFile
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
name|long
name|blockId
init|=
name|Block
operator|.
name|filename2id
argument_list|(
name|blockFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|metaFile
init|=
literal|null
decl_stmt|;
comment|// Skip all the files that start with block name until
comment|// getting to the metafile for the block
while|while
condition|(
name|i
operator|+
literal|1
operator|<
name|files
operator|.
name|length
operator|&&
name|files
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|isFile
argument_list|()
operator|&&
name|files
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|blockFile
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|isBlockMetaFile
argument_list|(
name|blockFile
operator|.
name|getName
argument_list|()
argument_list|,
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|metaFile
operator|=
name|files
index|[
name|i
index|]
expr_stmt|;
break|break;
block|}
block|}
name|report
operator|.
name|add
argument_list|(
operator|new
name|ScanInfo
argument_list|(
name|blockId
argument_list|,
name|blockFile
argument_list|,
name|metaFile
argument_list|,
name|vol
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|report
return|;
block|}
block|}
block|}
end_class

end_unit

