begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|JspHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|DataTransferThrottler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * This class is used in Namesystem's jetty to retrieve a file.  * Typically used by the Secondary NameNode to retrieve image and  * edit file for periodic checkpointing.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|GetImageServlet
specifier|public
class|class
name|GetImageServlet
extends|extends
name|HttpServlet
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|7669068179452648952L
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GetImageServlet
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doGet (final HttpServletRequest request, final HttpServletResponse response )
specifier|public
name|void
name|doGet
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|pmap
init|=
name|request
operator|.
name|getParameterMap
argument_list|()
decl_stmt|;
try|try
block|{
name|ServletContext
name|context
init|=
name|getServletContext
argument_list|()
decl_stmt|;
specifier|final
name|FSImage
name|nnImage
init|=
operator|(
name|FSImage
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"name.system.image"
argument_list|)
decl_stmt|;
specifier|final
name|TransferFsImage
name|ff
init|=
operator|new
name|TransferFsImage
argument_list|(
name|pmap
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|(
name|Configuration
operator|)
name|getServletContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|JspHelper
operator|.
name|CURRENT_CONF
argument_list|)
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
operator|!
name|isValidRequestor
argument_list|(
name|request
operator|.
name|getRemoteUser
argument_list|()
argument_list|,
name|conf
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
literal|"Only Namenode and Secondary Namenode may access this servlet"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Received non-NN/SNN request for image or edits from "
operator|+
name|request
operator|.
name|getRemoteHost
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|ff
operator|.
name|getImage
argument_list|()
condition|)
block|{
name|response
operator|.
name|setHeader
argument_list|(
name|TransferFsImage
operator|.
name|CONTENT_LENGTH
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|nnImage
operator|.
name|getStorage
argument_list|()
operator|.
name|getFsImageName
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// send fsImage
name|TransferFsImage
operator|.
name|getFileServer
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|nnImage
operator|.
name|getStorage
argument_list|()
operator|.
name|getFsImageName
argument_list|()
argument_list|,
name|getThrottler
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ff
operator|.
name|getEdit
argument_list|()
condition|)
block|{
name|response
operator|.
name|setHeader
argument_list|(
name|TransferFsImage
operator|.
name|CONTENT_LENGTH
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|nnImage
operator|.
name|getStorage
argument_list|()
operator|.
name|getFsEditName
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// send edits
name|TransferFsImage
operator|.
name|getFileServer
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|nnImage
operator|.
name|getStorage
argument_list|()
operator|.
name|getFsEditName
argument_list|()
argument_list|,
name|getThrottler
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ff
operator|.
name|putImage
argument_list|()
condition|)
block|{
comment|// issue a HTTP get request to download the new fsimage
name|nnImage
operator|.
name|validateCheckpointUpload
argument_list|(
name|ff
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
name|nnImage
operator|.
name|newImageDigest
operator|=
name|ff
operator|.
name|getNewChecksum
argument_list|()
expr_stmt|;
name|MD5Hash
name|downloadImageDigest
init|=
name|reloginIfNecessary
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|MD5Hash
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MD5Hash
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|TransferFsImage
operator|.
name|getFileClient
argument_list|(
name|ff
operator|.
name|getInfoServer
argument_list|()
argument_list|,
literal|"getimage=1"
argument_list|,
name|nnImage
operator|.
name|getStorage
argument_list|()
operator|.
name|getFsImageNameCheckpoint
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nnImage
operator|.
name|newImageDigest
operator|.
name|equals
argument_list|(
name|downloadImageDigest
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The downloaded image is corrupt,"
operator|+
literal|" expecting a checksum "
operator|+
name|nnImage
operator|.
name|newImageDigest
operator|+
literal|" but received a checksum "
operator|+
name|downloadImageDigest
argument_list|)
throw|;
block|}
name|nnImage
operator|.
name|checkpointUploadDone
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|// We may have lost our ticket since the last time we tried to open
comment|// an http connection, so log in just in case.
specifier|private
name|UserGroupInformation
name|reloginIfNecessary
parameter_list|()
throws|throws
name|IOException
block|{
comment|// This method is only called on the NN, therefore it is safe to
comment|// use these key values.
return|return
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY
argument_list|)
argument_list|,
name|NameNode
operator|.
name|getAddress
argument_list|(
name|conf
argument_list|)
operator|.
name|getHostName
argument_list|()
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KEYTAB_FILE_KEY
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ie
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"GetImage failed. "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ie
argument_list|)
decl_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_GONE
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
finally|finally
block|{
name|response
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Construct a throttler from conf    * @param conf configuration    * @return a data transfer throttler    */
DECL|method|getThrottler (Configuration conf)
specifier|private
specifier|final
name|DataTransferThrottler
name|getThrottler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|transferBandwidth
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_IMAGE_TRANSFER_RATE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_IMAGE_TRANSFER_RATE_DEFAULT
argument_list|)
decl_stmt|;
name|DataTransferThrottler
name|throttler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|transferBandwidth
operator|>
literal|0
condition|)
block|{
name|throttler
operator|=
operator|new
name|DataTransferThrottler
argument_list|(
name|transferBandwidth
argument_list|)
expr_stmt|;
block|}
return|return
name|throttler
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|isValidRequestor (String remoteUser, Configuration conf)
specifier|protected
name|boolean
name|isValidRequestor
parameter_list|(
name|String
name|remoteUser
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|remoteUser
operator|==
literal|null
condition|)
block|{
comment|// This really shouldn't happen...
name|LOG
operator|.
name|warn
argument_list|(
literal|"Received null remoteUser while authorizing access to getImage servlet"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
index|[]
name|validRequestors
init|=
block|{
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY
argument_list|)
argument_list|,
name|NameNode
operator|.
name|getAddress
argument_list|(
name|conf
argument_list|)
operator|.
name|getHostName
argument_list|()
argument_list|)
block|,
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_USER_NAME_KEY
argument_list|)
argument_list|,
name|NameNode
operator|.
name|getAddress
argument_list|(
name|conf
argument_list|)
operator|.
name|getHostName
argument_list|()
argument_list|)
block|,
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_SECONDARY_NAMENODE_KRB_HTTPS_USER_NAME_KEY
argument_list|)
argument_list|,
name|SecondaryNameNode
operator|.
name|getHttpAddress
argument_list|(
name|conf
argument_list|)
operator|.
name|getHostName
argument_list|()
argument_list|)
block|,
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_SECONDARY_NAMENODE_USER_NAME_KEY
argument_list|)
argument_list|,
name|SecondaryNameNode
operator|.
name|getHttpAddress
argument_list|(
name|conf
argument_list|)
operator|.
name|getHostName
argument_list|()
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|String
name|v
range|:
name|validRequestors
control|)
block|{
if|if
condition|(
name|v
operator|!=
literal|null
operator|&&
name|v
operator|.
name|equals
argument_list|(
name|remoteUser
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"isValidRequestor is allowing: "
operator|+
name|remoteUser
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"isValidRequestor is rejecting: "
operator|+
name|remoteUser
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

