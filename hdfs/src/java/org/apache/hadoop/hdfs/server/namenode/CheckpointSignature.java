begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * A unique signature intended to identify checkpoint transactions.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|CheckpointSignature
specifier|public
class|class
name|CheckpointSignature
extends|extends
name|StorageInfo
implements|implements
name|WritableComparable
argument_list|<
name|CheckpointSignature
argument_list|>
block|{
DECL|field|FIELD_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_SEPARATOR
init|=
literal|":"
decl_stmt|;
DECL|field|editsTime
name|long
name|editsTime
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|checkpointTime
name|long
name|checkpointTime
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|imageDigest
name|MD5Hash
name|imageDigest
init|=
literal|null
decl_stmt|;
DECL|field|blockpoolID
name|String
name|blockpoolID
init|=
literal|""
decl_stmt|;
DECL|method|CheckpointSignature ()
specifier|public
name|CheckpointSignature
parameter_list|()
block|{}
DECL|method|CheckpointSignature (FSImage fsImage)
name|CheckpointSignature
parameter_list|(
name|FSImage
name|fsImage
parameter_list|)
block|{
name|super
argument_list|(
name|fsImage
operator|.
name|getStorage
argument_list|()
argument_list|)
expr_stmt|;
name|blockpoolID
operator|=
name|fsImage
operator|.
name|getBlockPoolID
argument_list|()
expr_stmt|;
name|editsTime
operator|=
name|fsImage
operator|.
name|getEditLog
argument_list|()
operator|.
name|getFsEditTime
argument_list|()
expr_stmt|;
name|checkpointTime
operator|=
name|fsImage
operator|.
name|getStorage
argument_list|()
operator|.
name|getCheckpointTime
argument_list|()
expr_stmt|;
name|imageDigest
operator|=
name|fsImage
operator|.
name|getStorage
argument_list|()
operator|.
name|getImageDigest
argument_list|()
expr_stmt|;
name|checkpointTime
operator|=
name|fsImage
operator|.
name|getStorage
argument_list|()
operator|.
name|getCheckpointTime
argument_list|()
expr_stmt|;
block|}
DECL|method|CheckpointSignature (String str)
name|CheckpointSignature
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|String
index|[]
name|fields
init|=
name|str
operator|.
name|split
argument_list|(
name|FIELD_SEPARATOR
argument_list|)
decl_stmt|;
assert|assert
name|fields
operator|.
name|length
operator|==
literal|8
operator|:
literal|"Must be 8 fields in CheckpointSignature"
assert|;
name|layoutVersion
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|fields
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|namespaceID
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|fields
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|cTime
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|fields
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|editsTime
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|fields
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|checkpointTime
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|fields
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|imageDigest
operator|=
operator|new
name|MD5Hash
argument_list|(
name|fields
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|clusterID
operator|=
name|fields
index|[
literal|6
index|]
expr_stmt|;
name|blockpoolID
operator|=
name|fields
index|[
literal|7
index|]
expr_stmt|;
block|}
comment|/**    * Get the MD5 image digest    * @return the MD5 image digest    */
DECL|method|getImageDigest ()
name|MD5Hash
name|getImageDigest
parameter_list|()
block|{
return|return
name|imageDigest
return|;
block|}
comment|/**    * Get the cluster id from CheckpointSignature    * @return the cluster id    */
DECL|method|getClusterID ()
specifier|public
name|String
name|getClusterID
parameter_list|()
block|{
return|return
name|clusterID
return|;
block|}
comment|/**    * Get the block pool id from CheckpointSignature    * @return the block pool id    */
DECL|method|getBlockpoolID ()
specifier|public
name|String
name|getBlockpoolID
parameter_list|()
block|{
return|return
name|blockpoolID
return|;
block|}
comment|/**    * Set the block pool id of CheckpointSignature.    *     * @param blockpoolID the new blockpool id    */
DECL|method|setBlockpoolID (String blockpoolID)
specifier|public
name|void
name|setBlockpoolID
parameter_list|(
name|String
name|blockpoolID
parameter_list|)
block|{
name|this
operator|.
name|blockpoolID
operator|=
name|blockpoolID
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|layoutVersion
argument_list|)
operator|+
name|FIELD_SEPARATOR
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|namespaceID
argument_list|)
operator|+
name|FIELD_SEPARATOR
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|cTime
argument_list|)
operator|+
name|FIELD_SEPARATOR
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|editsTime
argument_list|)
operator|+
name|FIELD_SEPARATOR
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|checkpointTime
argument_list|)
operator|+
name|FIELD_SEPARATOR
operator|+
name|imageDigest
operator|.
name|toString
argument_list|()
operator|+
name|FIELD_SEPARATOR
operator|+
name|clusterID
operator|+
name|FIELD_SEPARATOR
operator|+
name|blockpoolID
return|;
block|}
DECL|method|validateStorageInfo (FSImage si)
name|void
name|validateStorageInfo
parameter_list|(
name|FSImage
name|si
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|layoutVersion
operator|!=
name|si
operator|.
name|getLayoutVersion
argument_list|()
operator|||
name|namespaceID
operator|!=
name|si
operator|.
name|getNamespaceID
argument_list|()
operator|||
name|cTime
operator|!=
name|si
operator|.
name|getStorage
argument_list|()
operator|.
name|cTime
operator|||
name|checkpointTime
operator|!=
name|si
operator|.
name|getStorage
argument_list|()
operator|.
name|getCheckpointTime
argument_list|()
operator|||
operator|!
name|imageDigest
operator|.
name|equals
argument_list|(
name|si
operator|.
name|getStorage
argument_list|()
operator|.
name|imageDigest
argument_list|)
operator|||
operator|!
name|clusterID
operator|.
name|equals
argument_list|(
name|si
operator|.
name|getClusterID
argument_list|()
argument_list|)
operator|||
operator|!
name|blockpoolID
operator|.
name|equals
argument_list|(
name|si
operator|.
name|getBlockPoolID
argument_list|()
argument_list|)
condition|)
block|{
comment|// checkpointTime can change when the image is saved - do not compare
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Inconsistent checkpoint fields.\n"
operator|+
literal|"LV = "
operator|+
name|layoutVersion
operator|+
literal|" namespaceID = "
operator|+
name|namespaceID
operator|+
literal|" cTime = "
operator|+
name|cTime
operator|+
literal|"; checkpointTime = "
operator|+
name|checkpointTime
operator|+
literal|" ; imageDigest = "
operator|+
name|imageDigest
operator|+
literal|" ; clusterId = "
operator|+
name|clusterID
operator|+
literal|" ; blockpoolId = "
operator|+
name|blockpoolID
operator|+
literal|".\nExpecting respectively: "
operator|+
name|si
operator|.
name|getLayoutVersion
argument_list|()
operator|+
literal|"; "
operator|+
name|si
operator|.
name|getNamespaceID
argument_list|()
operator|+
literal|"; "
operator|+
name|si
operator|.
name|getStorage
argument_list|()
operator|.
name|cTime
operator|+
literal|"; "
operator|+
name|si
operator|.
name|getStorage
argument_list|()
operator|.
name|getCheckpointTime
argument_list|()
operator|+
literal|"; "
operator|+
name|si
operator|.
name|getStorage
argument_list|()
operator|.
name|imageDigest
operator|+
literal|"; "
operator|+
name|si
operator|.
name|getClusterID
argument_list|()
operator|+
literal|"; "
operator|+
name|si
operator|.
name|getBlockPoolID
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
block|}
block|}
comment|//
comment|// Comparable interface
comment|//
DECL|method|compareTo (CheckpointSignature o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|CheckpointSignature
name|o
parameter_list|)
block|{
return|return
operator|(
name|layoutVersion
operator|<
name|o
operator|.
name|layoutVersion
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|layoutVersion
operator|>
name|o
operator|.
name|layoutVersion
operator|)
condition|?
literal|1
else|:
operator|(
name|namespaceID
operator|<
name|o
operator|.
name|namespaceID
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|namespaceID
operator|>
name|o
operator|.
name|namespaceID
operator|)
condition|?
literal|1
else|:
operator|(
name|cTime
operator|<
name|o
operator|.
name|cTime
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|cTime
operator|>
name|o
operator|.
name|cTime
operator|)
condition|?
literal|1
else|:
operator|(
name|editsTime
operator|<
name|o
operator|.
name|editsTime
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|editsTime
operator|>
name|o
operator|.
name|editsTime
operator|)
condition|?
literal|1
else|:
operator|(
name|checkpointTime
operator|<
name|o
operator|.
name|checkpointTime
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|checkpointTime
operator|>
name|o
operator|.
name|checkpointTime
operator|)
condition|?
literal|1
else|:
operator|(
name|clusterID
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|clusterID
argument_list|)
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|clusterID
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|clusterID
argument_list|)
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
operator|(
name|blockpoolID
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|blockpoolID
argument_list|)
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|blockpoolID
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|blockpoolID
argument_list|)
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
name|imageDigest
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|imageDigest
argument_list|)
return|;
block|}
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|CheckpointSignature
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|compareTo
argument_list|(
operator|(
name|CheckpointSignature
operator|)
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|layoutVersion
operator|^
name|namespaceID
operator|^
call|(
name|int
call|)
argument_list|(
name|cTime
operator|^
name|editsTime
operator|^
name|checkpointTime
argument_list|)
operator|^
name|imageDigest
operator|.
name|hashCode
argument_list|()
operator|^
name|clusterID
operator|.
name|hashCode
argument_list|()
operator|^
name|blockpoolID
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/////////////////////////////////////////////////
comment|// Writable
comment|/////////////////////////////////////////////////
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|blockpoolID
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|editsTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|checkpointTime
argument_list|)
expr_stmt|;
name|imageDigest
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|blockpoolID
operator|=
name|WritableUtils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|editsTime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|checkpointTime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|imageDigest
operator|=
operator|new
name|MD5Hash
argument_list|()
expr_stmt|;
name|imageDigest
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

