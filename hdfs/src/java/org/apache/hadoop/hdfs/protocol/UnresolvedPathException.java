begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**   * Thrown when a symbolic link is encountered in a path.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|UnresolvedPathException
specifier|public
specifier|final
class|class
name|UnresolvedPathException
extends|extends
name|UnresolvedLinkException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|originalPath
specifier|private
name|String
name|originalPath
decl_stmt|;
comment|// The original path containing the link
DECL|field|linkTarget
specifier|private
name|String
name|linkTarget
decl_stmt|;
comment|// The target of the link
DECL|field|remainingPath
specifier|private
name|String
name|remainingPath
decl_stmt|;
comment|// The path part following the link
comment|/**    * Used by RemoteException to instantiate an UnresolvedPathException.    */
DECL|method|UnresolvedPathException (String msg)
specifier|public
name|UnresolvedPathException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|UnresolvedPathException (String originalPath, String remainingPath, String linkTarget)
specifier|public
name|UnresolvedPathException
parameter_list|(
name|String
name|originalPath
parameter_list|,
name|String
name|remainingPath
parameter_list|,
name|String
name|linkTarget
parameter_list|)
block|{
name|this
operator|.
name|originalPath
operator|=
name|originalPath
expr_stmt|;
name|this
operator|.
name|remainingPath
operator|=
name|remainingPath
expr_stmt|;
name|this
operator|.
name|linkTarget
operator|=
name|linkTarget
expr_stmt|;
block|}
DECL|method|getUnresolvedPath ()
specifier|public
name|Path
name|getUnresolvedPath
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Path
argument_list|(
name|originalPath
argument_list|)
return|;
block|}
DECL|method|getResolvedPath ()
specifier|public
name|Path
name|getResolvedPath
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|remainingPath
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|remainingPath
argument_list|)
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|linkTarget
argument_list|)
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|linkTarget
argument_list|,
name|remainingPath
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
name|String
name|msg
init|=
name|super
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
return|return
name|msg
return|;
block|}
name|String
name|myMsg
init|=
literal|"Unresolved path "
operator|+
name|originalPath
decl_stmt|;
try|try
block|{
return|return
name|getResolvedPath
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
return|return
name|myMsg
return|;
block|}
block|}
end_class

end_unit

