begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsConstants
operator|.
name|ReplicaState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaInfo
import|;
end_import

begin_comment
comment|/**  * This class provides an interface for accessing list of blocks that  * has been implemented as long[].  * This class is useful for block report. Rather than send block reports  * as a Block[] we can send it as a long[].  *  * The structure of the array is as follows:  * 0: the length of the finalized replica list;  * 1: the length of the under-construction replica list;  * - followed by finalized replica list where each replica is represented by  *   3 longs: one for the blockId, one for the block length, and one for  *   the generation stamp;  * - followed by the invalid replica represented with three -1s;  * - followed by the under-construction replica list where each replica is  *   represented by 4 longs: three for the block id, length, generation   *   stamp, and the forth for the replica state.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|BlockListAsLongs
specifier|public
class|class
name|BlockListAsLongs
implements|implements
name|Iterable
argument_list|<
name|Block
argument_list|>
block|{
comment|/**    * A finalized block as 3 longs    *   block-id and block length and generation stamp    */
DECL|field|LONGS_PER_FINALIZED_BLOCK
specifier|private
specifier|static
specifier|final
name|int
name|LONGS_PER_FINALIZED_BLOCK
init|=
literal|3
decl_stmt|;
comment|/**    * An under-construction block as 4 longs    *   block-id and block length, generation stamp and replica state    */
DECL|field|LONGS_PER_UC_BLOCK
specifier|private
specifier|static
specifier|final
name|int
name|LONGS_PER_UC_BLOCK
init|=
literal|4
decl_stmt|;
comment|/** Number of longs in the header */
DECL|field|HEADER_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|HEADER_SIZE
init|=
literal|2
decl_stmt|;
comment|/**    * Returns the index of the first long in blockList    * belonging to the specified block.    * The first long contains the block id.    */
DECL|method|index2BlockId (int blockIndex)
specifier|private
name|int
name|index2BlockId
parameter_list|(
name|int
name|blockIndex
parameter_list|)
block|{
if|if
condition|(
name|blockIndex
argument_list|<
literal|0
operator|||
name|blockIndex
argument_list|>
name|getNumberOfBlocks
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|finalizedSize
init|=
name|getNumberOfFinalizedReplicas
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockIndex
operator|<
name|finalizedSize
condition|)
return|return
name|HEADER_SIZE
operator|+
name|blockIndex
operator|*
name|LONGS_PER_FINALIZED_BLOCK
return|;
return|return
name|HEADER_SIZE
operator|+
operator|(
name|finalizedSize
operator|+
literal|1
operator|)
operator|*
name|LONGS_PER_FINALIZED_BLOCK
operator|+
operator|(
name|blockIndex
operator|-
name|finalizedSize
operator|)
operator|*
name|LONGS_PER_UC_BLOCK
return|;
block|}
DECL|field|blockList
specifier|private
name|long
index|[]
name|blockList
decl_stmt|;
comment|/**    * Create block report from finalized and under construction lists of blocks.    *     * @param finalized - list of finalized blocks    * @param uc - list of under construction blocks    */
DECL|method|BlockListAsLongs (final List<? extends Block> finalized, final List<ReplicaInfo> uc)
specifier|public
name|BlockListAsLongs
parameter_list|(
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|Block
argument_list|>
name|finalized
parameter_list|,
specifier|final
name|List
argument_list|<
name|ReplicaInfo
argument_list|>
name|uc
parameter_list|)
block|{
name|int
name|finalizedSize
init|=
name|finalized
operator|==
literal|null
condition|?
literal|0
else|:
name|finalized
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|ucSize
init|=
name|uc
operator|==
literal|null
condition|?
literal|0
else|:
name|uc
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|HEADER_SIZE
operator|+
operator|(
name|finalizedSize
operator|+
literal|1
operator|)
operator|*
name|LONGS_PER_FINALIZED_BLOCK
operator|+
name|ucSize
operator|*
name|LONGS_PER_UC_BLOCK
decl_stmt|;
name|blockList
operator|=
operator|new
name|long
index|[
name|len
index|]
expr_stmt|;
comment|// set the header
name|blockList
index|[
literal|0
index|]
operator|=
name|finalizedSize
expr_stmt|;
name|blockList
index|[
literal|1
index|]
operator|=
name|ucSize
expr_stmt|;
comment|// set finalized blocks
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|finalizedSize
condition|;
name|i
operator|++
control|)
block|{
name|setBlock
argument_list|(
name|i
argument_list|,
name|finalized
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// set invalid delimiting block
name|setDelimitingBlock
argument_list|(
name|finalizedSize
argument_list|)
expr_stmt|;
comment|// set under construction blocks
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ucSize
condition|;
name|i
operator|++
control|)
block|{
name|setBlock
argument_list|(
name|finalizedSize
operator|+
name|i
argument_list|,
name|uc
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|BlockListAsLongs ()
specifier|public
name|BlockListAsLongs
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor    * @param iBlockList - BlockListALongs create from this long[] parameter    */
DECL|method|BlockListAsLongs (final long[] iBlockList)
specifier|public
name|BlockListAsLongs
parameter_list|(
specifier|final
name|long
index|[]
name|iBlockList
parameter_list|)
block|{
if|if
condition|(
name|iBlockList
operator|==
literal|null
condition|)
block|{
name|blockList
operator|=
operator|new
name|long
index|[
name|HEADER_SIZE
index|]
expr_stmt|;
return|return;
block|}
name|blockList
operator|=
name|iBlockList
expr_stmt|;
block|}
DECL|method|getBlockListAsLongs ()
specifier|public
name|long
index|[]
name|getBlockListAsLongs
parameter_list|()
block|{
return|return
name|blockList
return|;
block|}
comment|/**    * Iterates over blocks in the block report.    * Avoids object allocation on each iteration.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|BlockReportIterator
specifier|public
class|class
name|BlockReportIterator
implements|implements
name|Iterator
argument_list|<
name|Block
argument_list|>
block|{
DECL|field|currentBlockIndex
specifier|private
name|int
name|currentBlockIndex
decl_stmt|;
DECL|field|block
specifier|private
name|Block
name|block
decl_stmt|;
DECL|field|currentReplicaState
specifier|private
name|ReplicaState
name|currentReplicaState
decl_stmt|;
DECL|method|BlockReportIterator ()
name|BlockReportIterator
parameter_list|()
block|{
name|this
operator|.
name|currentBlockIndex
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|block
operator|=
operator|new
name|Block
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentReplicaState
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|currentBlockIndex
operator|<
name|getNumberOfBlocks
argument_list|()
return|;
block|}
DECL|method|next ()
specifier|public
name|Block
name|next
parameter_list|()
block|{
name|block
operator|.
name|set
argument_list|(
name|blockId
argument_list|(
name|currentBlockIndex
argument_list|)
argument_list|,
name|blockLength
argument_list|(
name|currentBlockIndex
argument_list|)
argument_list|,
name|blockGenerationStamp
argument_list|(
name|currentBlockIndex
argument_list|)
argument_list|)
expr_stmt|;
name|currentReplicaState
operator|=
name|blockReplicaState
argument_list|(
name|currentBlockIndex
argument_list|)
expr_stmt|;
name|currentBlockIndex
operator|++
expr_stmt|;
return|return
name|block
return|;
block|}
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Sorry. can't remove."
argument_list|)
throw|;
block|}
comment|/**      * Get the state of the current replica.      * The state corresponds to the replica returned      * by the latest {@link #next()}.       */
DECL|method|getCurrentReplicaState ()
specifier|public
name|ReplicaState
name|getCurrentReplicaState
parameter_list|()
block|{
return|return
name|currentReplicaState
return|;
block|}
block|}
comment|/**    * Returns an iterator over blocks in the block report.     */
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Block
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|getBlockReportIterator
argument_list|()
return|;
block|}
comment|/**    * Returns {@link BlockReportIterator}.     */
DECL|method|getBlockReportIterator ()
specifier|public
name|BlockReportIterator
name|getBlockReportIterator
parameter_list|()
block|{
return|return
operator|new
name|BlockReportIterator
argument_list|()
return|;
block|}
comment|/**    * The number of blocks    * @return - the number of blocks    */
DECL|method|getNumberOfBlocks ()
specifier|public
name|int
name|getNumberOfBlocks
parameter_list|()
block|{
assert|assert
name|blockList
operator|.
name|length
operator|==
name|HEADER_SIZE
operator|+
operator|(
name|blockList
index|[
literal|0
index|]
operator|+
literal|1
operator|)
operator|*
name|LONGS_PER_FINALIZED_BLOCK
operator|+
name|blockList
index|[
literal|1
index|]
operator|*
name|LONGS_PER_UC_BLOCK
operator|:
literal|"Number of blocks is inconcistent with the array length"
assert|;
return|return
name|getNumberOfFinalizedReplicas
argument_list|()
operator|+
name|getNumberOfUCReplicas
argument_list|()
return|;
block|}
comment|/**    * Returns the number of finalized replicas in the block report.    */
DECL|method|getNumberOfFinalizedReplicas ()
specifier|private
name|int
name|getNumberOfFinalizedReplicas
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|blockList
index|[
literal|0
index|]
return|;
block|}
comment|/**    * Returns the number of under construction replicas in the block report.    */
DECL|method|getNumberOfUCReplicas ()
specifier|private
name|int
name|getNumberOfUCReplicas
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|blockList
index|[
literal|1
index|]
return|;
block|}
comment|/**    * Returns the id of the specified replica of the block report.    */
DECL|method|blockId (int index)
specifier|private
name|long
name|blockId
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|blockList
index|[
name|index2BlockId
argument_list|(
name|index
argument_list|)
index|]
return|;
block|}
comment|/**    * Returns the length of the specified replica of the block report.    */
DECL|method|blockLength (int index)
specifier|private
name|long
name|blockLength
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|blockList
index|[
name|index2BlockId
argument_list|(
name|index
argument_list|)
operator|+
literal|1
index|]
return|;
block|}
comment|/**    * Returns the generation stamp of the specified replica of the block report.    */
DECL|method|blockGenerationStamp (int index)
specifier|private
name|long
name|blockGenerationStamp
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|blockList
index|[
name|index2BlockId
argument_list|(
name|index
argument_list|)
operator|+
literal|2
index|]
return|;
block|}
comment|/**    * Returns the state of the specified replica of the block report.    */
DECL|method|blockReplicaState (int index)
specifier|private
name|ReplicaState
name|blockReplicaState
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
name|getNumberOfFinalizedReplicas
argument_list|()
condition|)
return|return
name|ReplicaState
operator|.
name|FINALIZED
return|;
return|return
name|ReplicaState
operator|.
name|getState
argument_list|(
operator|(
name|int
operator|)
name|blockList
index|[
name|index2BlockId
argument_list|(
name|index
argument_list|)
operator|+
literal|3
index|]
argument_list|)
return|;
block|}
comment|/**    * The block-id of the indexTh block    * @param index - the block whose block-id is desired    * @return the block-id    */
annotation|@
name|Deprecated
DECL|method|getBlockId (final int index)
specifier|public
name|long
name|getBlockId
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
name|blockId
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**    * The block-len of the indexTh block    * @param index - the block whose block-len is desired    * @return - the block-len    */
annotation|@
name|Deprecated
DECL|method|getBlockLen (final int index)
specifier|public
name|long
name|getBlockLen
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
name|blockLength
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**    * The generation stamp of the indexTh block    * @param index - the block whose block-len is desired    * @return - the generation stamp    */
annotation|@
name|Deprecated
DECL|method|getBlockGenStamp (final int index)
specifier|public
name|long
name|getBlockGenStamp
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
name|blockGenerationStamp
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**    * Set the indexTh block    * @param index - the index of the block to set    * @param b - the block is set to the value of the this block    */
DECL|method|setBlock (final int index, final T b)
specifier|private
parameter_list|<
name|T
extends|extends
name|Block
parameter_list|>
name|void
name|setBlock
parameter_list|(
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|T
name|b
parameter_list|)
block|{
name|int
name|pos
init|=
name|index2BlockId
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|blockList
index|[
name|pos
index|]
operator|=
name|b
operator|.
name|getBlockId
argument_list|()
expr_stmt|;
name|blockList
index|[
name|pos
operator|+
literal|1
index|]
operator|=
name|b
operator|.
name|getNumBytes
argument_list|()
expr_stmt|;
name|blockList
index|[
name|pos
operator|+
literal|2
index|]
operator|=
name|b
operator|.
name|getGenerationStamp
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|<
name|getNumberOfFinalizedReplicas
argument_list|()
condition|)
return|return;
assert|assert
operator|(
operator|(
name|ReplicaInfo
operator|)
name|b
operator|)
operator|.
name|getState
argument_list|()
operator|!=
name|ReplicaState
operator|.
name|FINALIZED
operator|:
literal|"Must be under-construction replica."
assert|;
name|blockList
index|[
name|pos
operator|+
literal|3
index|]
operator|=
operator|(
operator|(
name|ReplicaInfo
operator|)
name|b
operator|)
operator|.
name|getState
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
comment|/**    * Set the invalid delimiting block between the finalized and    * the under-construction lists.    * The invalid block has all three fields set to -1.    * @param finalizedSzie - the size of the finalized list    */
DECL|method|setDelimitingBlock (final int finalizedSzie)
specifier|private
name|void
name|setDelimitingBlock
parameter_list|(
specifier|final
name|int
name|finalizedSzie
parameter_list|)
block|{
name|int
name|idx
init|=
name|HEADER_SIZE
operator|+
name|finalizedSzie
operator|*
name|LONGS_PER_FINALIZED_BLOCK
decl_stmt|;
name|blockList
index|[
name|idx
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|blockList
index|[
name|idx
operator|+
literal|1
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|blockList
index|[
name|idx
operator|+
literal|2
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
end_class

end_unit

