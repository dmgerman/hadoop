begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol.datatransfer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_comment
comment|/**  * The setting of replace-datanode-on-failure feature.  */
end_comment

begin_enum
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|enum|ReplaceDatanodeOnFailure
specifier|public
enum|enum
name|ReplaceDatanodeOnFailure
block|{
comment|/** The feature is disabled in the entire site. */
DECL|enumConstant|DISABLE
name|DISABLE
block|,
comment|/** Never add a new datanode. */
DECL|enumConstant|NEVER
name|NEVER
block|,
comment|/**    * DEFAULT policy:    *   Let r be the replication number.    *   Let n be the number of existing datanodes.    *   Add a new datanode only if r>= 3 and either    *   (1) floor(r/2)>= n; or    *   (2) r> n and the block is hflushed/appended.    */
DECL|enumConstant|DEFAULT
name|DEFAULT
block|,
comment|/** Always add a new datanode when an existing datanode is removed. */
DECL|enumConstant|ALWAYS
name|ALWAYS
block|;
comment|/** Check if the feature is enabled. */
DECL|method|checkEnabled ()
specifier|public
name|void
name|checkEnabled
parameter_list|()
block|{
if|if
condition|(
name|this
operator|==
name|DISABLE
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This feature is disabled.  Please refer to "
operator|+
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_ENABLE_KEY
operator|+
literal|" configuration property."
argument_list|)
throw|;
block|}
block|}
comment|/** Is the policy satisfied? */
DECL|method|satisfy ( final short replication, final DatanodeInfo[] existings, final boolean isAppend, final boolean isHflushed)
specifier|public
name|boolean
name|satisfy
parameter_list|(
specifier|final
name|short
name|replication
parameter_list|,
specifier|final
name|DatanodeInfo
index|[]
name|existings
parameter_list|,
specifier|final
name|boolean
name|isAppend
parameter_list|,
specifier|final
name|boolean
name|isHflushed
parameter_list|)
block|{
specifier|final
name|int
name|n
init|=
name|existings
operator|==
literal|null
condition|?
literal|0
else|:
name|existings
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
operator|||
name|n
operator|>=
name|replication
condition|)
block|{
comment|//don't need to add datanode for any policy.
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|==
name|DISABLE
operator|||
name|this
operator|==
name|NEVER
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|==
name|ALWAYS
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
comment|//DEFAULT
if|if
condition|(
name|replication
operator|<
literal|3
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|n
operator|<=
operator|(
name|replication
operator|/
literal|2
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|isAppend
operator|||
name|isHflushed
return|;
block|}
block|}
block|}
block|}
comment|/** Get the setting from configuration. */
DECL|method|get (final Configuration conf)
specifier|public
specifier|static
name|ReplaceDatanodeOnFailure
name|get
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|boolean
name|enabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_ENABLE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_ENABLE_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return
name|DISABLE
return|;
block|}
specifier|final
name|String
name|policy
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_DEFAULT
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|values
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ReplaceDatanodeOnFailure
name|rdof
init|=
name|values
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|rdof
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|policy
argument_list|)
condition|)
block|{
return|return
name|rdof
return|;
block|}
block|}
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Illegal configuration value for "
operator|+
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_KEY
operator|+
literal|": "
operator|+
name|policy
argument_list|)
throw|;
block|}
comment|/** Write the setting to configuration. */
DECL|method|write (final Configuration conf)
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_ENABLE_KEY
argument_list|,
name|this
operator|!=
name|DISABLE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_KEY
argument_list|,
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_enum

end_unit

