begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol.datatransfer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsProtoUtil
operator|.
name|fromProto
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsProtoUtil
operator|.
name|fromProtos
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsProtoUtil
operator|.
name|vintPrefixed
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|DataTransferProtoUtil
operator|.
name|fromProto
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|OpBlockChecksumProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|OpCopyBlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|OpReadBlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|OpReplaceBlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|OpTransferBlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|OpWriteBlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_comment
comment|/** Receiver */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|Receiver
specifier|public
specifier|abstract
class|class
name|Receiver
block|{
comment|/** Read an Op.  It also checks protocol version. */
DECL|method|readOp (DataInputStream in)
specifier|protected
specifier|final
name|Op
name|readOp
parameter_list|(
name|DataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|short
name|version
init|=
name|in
operator|.
name|readShort
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|!=
name|DataTransferProtocol
operator|.
name|DATA_TRANSFER_VERSION
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Version Mismatch (Expected: "
operator|+
name|DataTransferProtocol
operator|.
name|DATA_TRANSFER_VERSION
operator|+
literal|", Received: "
operator|+
name|version
operator|+
literal|" )"
argument_list|)
throw|;
block|}
return|return
name|Op
operator|.
name|read
argument_list|(
name|in
argument_list|)
return|;
block|}
comment|/** Process op by the corresponding method. */
DECL|method|processOp (Op op, DataInputStream in )
specifier|protected
specifier|final
name|void
name|processOp
parameter_list|(
name|Op
name|op
parameter_list|,
name|DataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|READ_BLOCK
case|:
name|opReadBlock
argument_list|(
name|in
argument_list|)
expr_stmt|;
break|break;
case|case
name|WRITE_BLOCK
case|:
name|opWriteBlock
argument_list|(
name|in
argument_list|)
expr_stmt|;
break|break;
case|case
name|REPLACE_BLOCK
case|:
name|opReplaceBlock
argument_list|(
name|in
argument_list|)
expr_stmt|;
break|break;
case|case
name|COPY_BLOCK
case|:
name|opCopyBlock
argument_list|(
name|in
argument_list|)
expr_stmt|;
break|break;
case|case
name|BLOCK_CHECKSUM
case|:
name|opBlockChecksum
argument_list|(
name|in
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRANSFER_BLOCK
case|:
name|opTransferBlock
argument_list|(
name|in
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown op "
operator|+
name|op
operator|+
literal|" in data stream"
argument_list|)
throw|;
block|}
block|}
comment|/** Receive OP_READ_BLOCK */
DECL|method|opReadBlock (DataInputStream in)
specifier|private
name|void
name|opReadBlock
parameter_list|(
name|DataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|OpReadBlockProto
name|proto
init|=
name|OpReadBlockProto
operator|.
name|parseFrom
argument_list|(
name|vintPrefixed
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|ExtendedBlock
name|b
init|=
name|fromProto
argument_list|(
name|proto
operator|.
name|getHeader
argument_list|()
operator|.
name|getBaseHeader
argument_list|()
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
init|=
name|fromProto
argument_list|(
name|proto
operator|.
name|getHeader
argument_list|()
operator|.
name|getBaseHeader
argument_list|()
operator|.
name|getToken
argument_list|()
argument_list|)
decl_stmt|;
name|opReadBlock
argument_list|(
name|in
argument_list|,
name|b
argument_list|,
name|proto
operator|.
name|getOffset
argument_list|()
argument_list|,
name|proto
operator|.
name|getLen
argument_list|()
argument_list|,
name|proto
operator|.
name|getHeader
argument_list|()
operator|.
name|getClientName
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
comment|/**    * Abstract OP_READ_BLOCK method. Read a block.    */
DECL|method|opReadBlock (DataInputStream in, ExtendedBlock blk, long offset, long length, String client, Token<BlockTokenIdentifier> blockToken)
specifier|protected
specifier|abstract
name|void
name|opReadBlock
parameter_list|(
name|DataInputStream
name|in
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|String
name|client
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Receive OP_WRITE_BLOCK */
DECL|method|opWriteBlock (DataInputStream in)
specifier|private
name|void
name|opWriteBlock
parameter_list|(
name|DataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|OpWriteBlockProto
name|proto
init|=
name|OpWriteBlockProto
operator|.
name|parseFrom
argument_list|(
name|vintPrefixed
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|opWriteBlock
argument_list|(
name|in
argument_list|,
name|fromProto
argument_list|(
name|proto
operator|.
name|getHeader
argument_list|()
operator|.
name|getBaseHeader
argument_list|()
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|,
name|proto
operator|.
name|getPipelineSize
argument_list|()
argument_list|,
name|fromProto
argument_list|(
name|proto
operator|.
name|getStage
argument_list|()
argument_list|)
argument_list|,
name|proto
operator|.
name|getLatestGenerationStamp
argument_list|()
argument_list|,
name|proto
operator|.
name|getMinBytesRcvd
argument_list|()
argument_list|,
name|proto
operator|.
name|getMaxBytesRcvd
argument_list|()
argument_list|,
name|proto
operator|.
name|getHeader
argument_list|()
operator|.
name|getClientName
argument_list|()
argument_list|,
name|fromProto
argument_list|(
name|proto
operator|.
name|getSource
argument_list|()
argument_list|)
argument_list|,
name|fromProtos
argument_list|(
name|proto
operator|.
name|getTargetsList
argument_list|()
argument_list|)
argument_list|,
name|fromProto
argument_list|(
name|proto
operator|.
name|getHeader
argument_list|()
operator|.
name|getBaseHeader
argument_list|()
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Abstract OP_WRITE_BLOCK method.     * Write a block.    */
DECL|method|opWriteBlock (DataInputStream in, ExtendedBlock blk, int pipelineSize, BlockConstructionStage stage, long newGs, long minBytesRcvd, long maxBytesRcvd, String client, DatanodeInfo src, DatanodeInfo[] targets, Token<BlockTokenIdentifier> blockToken)
specifier|protected
specifier|abstract
name|void
name|opWriteBlock
parameter_list|(
name|DataInputStream
name|in
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|,
name|int
name|pipelineSize
parameter_list|,
name|BlockConstructionStage
name|stage
parameter_list|,
name|long
name|newGs
parameter_list|,
name|long
name|minBytesRcvd
parameter_list|,
name|long
name|maxBytesRcvd
parameter_list|,
name|String
name|client
parameter_list|,
name|DatanodeInfo
name|src
parameter_list|,
name|DatanodeInfo
index|[]
name|targets
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Receive {@link Op#TRANSFER_BLOCK} */
DECL|method|opTransferBlock (DataInputStream in)
specifier|private
name|void
name|opTransferBlock
parameter_list|(
name|DataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|OpTransferBlockProto
name|proto
init|=
name|OpTransferBlockProto
operator|.
name|parseFrom
argument_list|(
name|vintPrefixed
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|opTransferBlock
argument_list|(
name|in
argument_list|,
name|fromProto
argument_list|(
name|proto
operator|.
name|getHeader
argument_list|()
operator|.
name|getBaseHeader
argument_list|()
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|,
name|proto
operator|.
name|getHeader
argument_list|()
operator|.
name|getClientName
argument_list|()
argument_list|,
name|fromProtos
argument_list|(
name|proto
operator|.
name|getTargetsList
argument_list|()
argument_list|)
argument_list|,
name|fromProto
argument_list|(
name|proto
operator|.
name|getHeader
argument_list|()
operator|.
name|getBaseHeader
argument_list|()
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Abstract {@link Op#TRANSFER_BLOCK} method.    * For {@link BlockConstructionStage#TRANSFER_RBW}    * or {@link BlockConstructionStage#TRANSFER_FINALIZED}.    */
DECL|method|opTransferBlock (DataInputStream in, ExtendedBlock blk, String client, DatanodeInfo[] targets, Token<BlockTokenIdentifier> blockToken)
specifier|protected
specifier|abstract
name|void
name|opTransferBlock
parameter_list|(
name|DataInputStream
name|in
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|,
name|String
name|client
parameter_list|,
name|DatanodeInfo
index|[]
name|targets
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Receive OP_REPLACE_BLOCK */
DECL|method|opReplaceBlock (DataInputStream in)
specifier|private
name|void
name|opReplaceBlock
parameter_list|(
name|DataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|OpReplaceBlockProto
name|proto
init|=
name|OpReplaceBlockProto
operator|.
name|parseFrom
argument_list|(
name|vintPrefixed
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|opReplaceBlock
argument_list|(
name|in
argument_list|,
name|fromProto
argument_list|(
name|proto
operator|.
name|getHeader
argument_list|()
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|,
name|proto
operator|.
name|getDelHint
argument_list|()
argument_list|,
name|fromProto
argument_list|(
name|proto
operator|.
name|getSource
argument_list|()
argument_list|)
argument_list|,
name|fromProto
argument_list|(
name|proto
operator|.
name|getHeader
argument_list|()
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Abstract OP_REPLACE_BLOCK method.    * It is used for balancing purpose; send to a destination    */
DECL|method|opReplaceBlock (DataInputStream in, ExtendedBlock blk, String delHint, DatanodeInfo src, Token<BlockTokenIdentifier> blockToken)
specifier|protected
specifier|abstract
name|void
name|opReplaceBlock
parameter_list|(
name|DataInputStream
name|in
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|,
name|String
name|delHint
parameter_list|,
name|DatanodeInfo
name|src
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Receive OP_COPY_BLOCK */
DECL|method|opCopyBlock (DataInputStream in)
specifier|private
name|void
name|opCopyBlock
parameter_list|(
name|DataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|OpCopyBlockProto
name|proto
init|=
name|OpCopyBlockProto
operator|.
name|parseFrom
argument_list|(
name|vintPrefixed
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|opCopyBlock
argument_list|(
name|in
argument_list|,
name|fromProto
argument_list|(
name|proto
operator|.
name|getHeader
argument_list|()
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|,
name|fromProto
argument_list|(
name|proto
operator|.
name|getHeader
argument_list|()
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Abstract OP_COPY_BLOCK method. It is used for balancing purpose; send to    * a proxy source.    */
DECL|method|opCopyBlock (DataInputStream in, ExtendedBlock blk, Token<BlockTokenIdentifier> blockToken)
specifier|protected
specifier|abstract
name|void
name|opCopyBlock
parameter_list|(
name|DataInputStream
name|in
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Receive OP_BLOCK_CHECKSUM */
DECL|method|opBlockChecksum (DataInputStream in)
specifier|private
name|void
name|opBlockChecksum
parameter_list|(
name|DataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|OpBlockChecksumProto
name|proto
init|=
name|OpBlockChecksumProto
operator|.
name|parseFrom
argument_list|(
name|vintPrefixed
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|opBlockChecksum
argument_list|(
name|in
argument_list|,
name|fromProto
argument_list|(
name|proto
operator|.
name|getHeader
argument_list|()
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|,
name|fromProto
argument_list|(
name|proto
operator|.
name|getHeader
argument_list|()
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Abstract OP_BLOCK_CHECKSUM method.    * Get the checksum of a block     */
DECL|method|opBlockChecksum (DataInputStream in, ExtendedBlock blk, Token<BlockTokenIdentifier> blockToken)
specifier|protected
specifier|abstract
name|void
name|opBlockChecksum
parameter_list|(
name|DataInputStream
name|in
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

