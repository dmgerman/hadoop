begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Delayed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|MD5MD5CRC32FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|JspHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DelegationTokenFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ServletUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|XMLReaderFactory
import|;
end_import

begin_comment
comment|/**  * An implementation of a protocol for accessing filesystems over HTTP.  * The following implementation provides a limited, read-only interface  * to a filesystem over HTTP.  * @see org.apache.hadoop.hdfs.server.namenode.ListPathsServlet  * @see org.apache.hadoop.hdfs.server.namenode.FileDataServlet  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|HftpFileSystem
specifier|public
class|class
name|HftpFileSystem
extends|extends
name|FileSystem
block|{
static|static
block|{
name|HttpURLConnection
operator|.
name|setFollowRedirects
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|field|nnHttpUrl
specifier|private
name|String
name|nnHttpUrl
decl_stmt|;
DECL|field|hdfsURI
specifier|private
name|URI
name|hdfsURI
decl_stmt|;
DECL|field|nnAddr
specifier|protected
name|InetSocketAddress
name|nnAddr
decl_stmt|;
DECL|field|ugi
specifier|protected
name|UserGroupInformation
name|ugi
decl_stmt|;
DECL|field|HFTP_TIMEZONE
specifier|public
specifier|static
specifier|final
name|String
name|HFTP_TIMEZONE
init|=
literal|"UTC"
decl_stmt|;
DECL|field|HFTP_DATE_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|HFTP_DATE_FORMAT
init|=
literal|"yyyy-MM-dd'T'HH:mm:ssZ"
decl_stmt|;
DECL|field|delegationToken
specifier|private
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|delegationToken
decl_stmt|;
DECL|field|HFTP_SERVICE_NAME_KEY
specifier|public
specifier|static
specifier|final
name|String
name|HFTP_SERVICE_NAME_KEY
init|=
literal|"hdfs.service.host_"
decl_stmt|;
DECL|method|getDateFormat ()
specifier|public
specifier|static
specifier|final
name|SimpleDateFormat
name|getDateFormat
parameter_list|()
block|{
specifier|final
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|HFTP_DATE_FORMAT
argument_list|)
decl_stmt|;
name|df
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
name|HFTP_TIMEZONE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|df
return|;
block|}
DECL|field|df
specifier|protected
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|SimpleDateFormat
argument_list|>
name|df
init|=
operator|new
name|ThreadLocal
argument_list|<
name|SimpleDateFormat
argument_list|>
argument_list|()
block|{
specifier|protected
name|SimpleDateFormat
name|initialValue
parameter_list|()
block|{
return|return
name|getDateFormat
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|renewer
specifier|private
specifier|static
name|RenewerThread
name|renewer
init|=
operator|new
name|RenewerThread
argument_list|()
decl_stmt|;
static|static
block|{
name|renewer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDefaultPort ()
specifier|protected
name|int
name|getDefaultPort
parameter_list|()
block|{
return|return
name|DFSConfigKeys
operator|.
name|DFS_HTTPS_PORT_DEFAULT
return|;
block|}
annotation|@
name|Override
DECL|method|getCanonicalServiceName ()
specifier|public
name|String
name|getCanonicalServiceName
parameter_list|()
block|{
return|return
name|SecurityUtil
operator|.
name|buildDTServiceName
argument_list|(
name|hdfsURI
argument_list|,
name|getDefaultPort
argument_list|()
argument_list|)
return|;
block|}
DECL|method|buildUri (String schema, String host, int port)
specifier|private
name|String
name|buildUri
parameter_list|(
name|String
name|schema
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|schema
argument_list|)
decl_stmt|;
return|return
name|sb
operator|.
name|append
argument_list|(
name|host
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|port
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|initialize (final URI name, final Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
specifier|final
name|URI
name|name
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|nnAddr
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// in case we open connection to hftp of a different cluster
comment|// we need to know this cluster https port
comment|// if it is not set we assume it is the same cluster or same port
name|int
name|urlPort
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"dfs.hftp.https.port"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|urlPort
operator|==
operator|-
literal|1
condition|)
name|urlPort
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HTTPS_PORT_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_HTTPS_PORT_DEFAULT
argument_list|)
expr_stmt|;
name|nnHttpUrl
operator|=
name|buildUri
argument_list|(
literal|"https://"
argument_list|,
name|NetUtils
operator|.
name|normalizeHostName
argument_list|(
name|name
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|,
name|urlPort
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"using url to get DT:"
operator|+
name|nnHttpUrl
argument_list|)
expr_stmt|;
comment|// if one uses RPC port different from the Default one,
comment|// one should specify what is the setvice name for this delegation token
comment|// otherwise it is hostname:RPC_PORT
name|String
name|key
init|=
name|HftpFileSystem
operator|.
name|HFTP_SERVICE_NAME_KEY
operator|+
name|SecurityUtil
operator|.
name|buildDTServiceName
argument_list|(
name|name
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_HTTPS_PORT_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to find DT for "
operator|+
name|name
operator|+
literal|" using key="
operator|+
name|key
operator|+
literal|"; conf="
operator|+
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|nnServiceName
init|=
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|nnPort
init|=
name|NameNode
operator|.
name|DEFAULT_PORT
decl_stmt|;
if|if
condition|(
name|nnServiceName
operator|!=
literal|null
condition|)
block|{
comment|// get the real port
name|nnPort
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|nnServiceName
argument_list|,
name|NameNode
operator|.
name|DEFAULT_PORT
argument_list|)
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|hdfsURI
operator|=
operator|new
name|URI
argument_list|(
name|buildUri
argument_list|(
literal|"hdfs://"
argument_list|,
name|nnAddr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|nnPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ue
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"bad uri for hdfs"
argument_list|,
name|ue
argument_list|)
throw|;
block|}
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
comment|//try finding a token for this namenode (esp applicable for tasks
comment|//using hftp). If there exists one, just set the delegationField
name|String
name|canonicalName
init|=
name|getCanonicalServiceName
argument_list|()
decl_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|t
range|:
name|ugi
operator|.
name|getTokens
argument_list|()
control|)
block|{
if|if
condition|(
name|DelegationTokenIdentifier
operator|.
name|HDFS_DELEGATION_KIND
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getKind
argument_list|()
argument_list|)
operator|&&
name|t
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|canonicalName
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found existing DT for "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|delegationToken
operator|=
operator|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
operator|)
name|t
expr_stmt|;
break|break;
block|}
block|}
comment|//since we don't already have a token, go get one over https
if|if
condition|(
name|delegationToken
operator|==
literal|null
condition|)
block|{
name|delegationToken
operator|=
operator|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
operator|)
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|renewer
operator|.
name|addTokenToRenew
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getDelegationToken (final String renewer)
specifier|public
specifier|synchronized
name|Token
argument_list|<
name|?
argument_list|>
name|getDelegationToken
parameter_list|(
specifier|final
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|//Renew TGT if needed
name|ugi
operator|.
name|reloginFromKeytab
argument_list|()
expr_stmt|;
return|return
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|Credentials
name|c
decl_stmt|;
try|try
block|{
name|c
operator|=
name|DelegationTokenFetcher
operator|.
name|getDTfromRemote
argument_list|(
name|nnHttpUrl
argument_list|,
name|renewer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Couldn't get a delegation token from "
operator|+
name|nnHttpUrl
operator|+
literal|" using https."
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"error was "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|//Maybe the server is in unsecure mode (that's bad but okay)
return|return
literal|null
return|;
block|}
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|t
range|:
name|c
operator|.
name|getAllTokens
argument_list|()
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got dt for "
operator|+
name|getUri
argument_list|()
operator|+
literal|";t.service="
operator|+
name|t
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|setService
argument_list|(
operator|new
name|Text
argument_list|(
name|getCanonicalServiceName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|)
empty_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_class

begin_function
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
literal|"hftp"
argument_list|,
literal|null
argument_list|,
name|nnAddr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|nnAddr
operator|.
name|getPort
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_comment
comment|/**    * Return a URL pointing to given path on the namenode.    *    * @param path to obtain the URL for    * @param query string to append to the path    * @return namenode URL referring to the given path    * @throws IOException on error constructing the URL    */
end_comment

begin_function
DECL|method|getNamenodeURL (String path, String query)
name|URL
name|getNamenodeURL
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|nnAddr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|nnAddr
operator|.
name|getPort
argument_list|()
argument_list|,
name|path
operator|+
literal|'?'
operator|+
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"url="
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
return|return
name|url
return|;
block|}
end_function

begin_comment
comment|/**    * Get encoded UGI parameter string for a URL.    *     * @return user_shortname,group1,group2...    */
end_comment

begin_function
DECL|method|getEncodedUgiParameter ()
specifier|private
name|String
name|getEncodedUgiParameter
parameter_list|()
block|{
name|StringBuilder
name|ugiParamenter
init|=
operator|new
name|StringBuilder
argument_list|(
name|ServletUtil
operator|.
name|encodeQueryValue
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|g
range|:
name|ugi
operator|.
name|getGroupNames
argument_list|()
control|)
block|{
name|ugiParamenter
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|ugiParamenter
operator|.
name|append
argument_list|(
name|ServletUtil
operator|.
name|encodeQueryValue
argument_list|(
name|g
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ugiParamenter
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|throwIOExceptionFromConnection ( final HttpURLConnection connection, final IOException ioe )
specifier|static
name|Void
name|throwIOExceptionFromConnection
parameter_list|(
specifier|final
name|HttpURLConnection
name|connection
parameter_list|,
specifier|final
name|IOException
name|ioe
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|code
init|=
name|connection
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
specifier|final
name|String
name|s
init|=
name|connection
operator|.
name|getResponseMessage
argument_list|()
decl_stmt|;
throw|throw
name|s
operator|==
literal|null
condition|?
name|ioe
else|:
operator|new
name|IOException
argument_list|(
name|s
operator|+
literal|" (error code="
operator|+
name|code
operator|+
literal|")"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
end_function

begin_comment
comment|/**    * Open an HTTP connection to the namenode to read file data and metadata.    * @param path The path component of the URL    * @param query The query component of the URL    */
end_comment

begin_function
DECL|method|openConnection (String path, String query)
specifier|protected
name|HttpURLConnection
name|openConnection
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|query
operator|=
name|addDelegationTokenParam
argument_list|(
name|query
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|getNamenodeURL
argument_list|(
name|path
argument_list|,
name|query
argument_list|)
decl_stmt|;
specifier|final
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|throwIOExceptionFromConnection
argument_list|(
name|connection
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
return|return
name|connection
return|;
block|}
end_function

begin_function
DECL|method|addDelegationTokenParam (String query)
specifier|protected
name|String
name|addDelegationTokenParam
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|tokenString
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|delegationToken
operator|!=
literal|null
condition|)
block|{
name|tokenString
operator|=
name|delegationToken
operator|.
name|encodeToUrlString
argument_list|()
expr_stmt|;
return|return
operator|(
name|query
operator|+
name|JspHelper
operator|.
name|getDelegationTokenUrlParam
argument_list|(
name|tokenString
argument_list|)
operator|)
return|;
block|}
block|}
block|}
return|return
name|query
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|open (Path f, int buffersize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|buffersize
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
literal|"/data"
operator|+
name|ServletUtil
operator|.
name|encodePath
argument_list|(
name|f
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|query
init|=
name|addDelegationTokenParam
argument_list|(
literal|"ugi="
operator|+
name|getEncodedUgiParameter
argument_list|()
argument_list|)
decl_stmt|;
name|URL
name|u
init|=
name|getNamenodeURL
argument_list|(
name|path
argument_list|,
name|query
argument_list|)
decl_stmt|;
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|ByteRangeInputStream
argument_list|(
name|u
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Class to parse and store a listing reply from the server. */
end_comment

begin_class
DECL|class|LsParser
class|class
name|LsParser
extends|extends
name|DefaultHandler
block|{
DECL|field|fslist
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|fslist
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|startElement (String ns, String localname, String qname, Attributes attrs)
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|ns
parameter_list|,
name|String
name|localname
parameter_list|,
name|String
name|qname
parameter_list|,
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
literal|"listing"
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
return|return;
if|if
condition|(
operator|!
literal|"file"
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
operator|&&
operator|!
literal|"directory"
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
block|{
if|if
condition|(
name|RemoteException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|RemoteException
operator|.
name|valueOf
argument_list|(
name|attrs
argument_list|)
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Unrecognized entry: "
operator|+
name|qname
argument_list|)
throw|;
block|}
name|long
name|modif
decl_stmt|;
name|long
name|atime
init|=
literal|0
decl_stmt|;
try|try
block|{
specifier|final
name|SimpleDateFormat
name|ldf
init|=
name|df
operator|.
name|get
argument_list|()
decl_stmt|;
name|modif
operator|=
name|ldf
operator|.
name|parse
argument_list|(
name|attrs
operator|.
name|getValue
argument_list|(
literal|"modified"
argument_list|)
argument_list|)
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|String
name|astr
init|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|"accesstime"
argument_list|)
decl_stmt|;
if|if
condition|(
name|astr
operator|!=
literal|null
condition|)
block|{
name|atime
operator|=
name|ldf
operator|.
name|parse
argument_list|(
name|astr
argument_list|)
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|FileStatus
name|fs
init|=
literal|"file"
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|?
operator|new
name|FileStatus
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|attrs
operator|.
name|getValue
argument_list|(
literal|"size"
argument_list|)
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
name|attrs
operator|.
name|getValue
argument_list|(
literal|"replication"
argument_list|)
argument_list|)
operator|.
name|shortValue
argument_list|()
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|attrs
operator|.
name|getValue
argument_list|(
literal|"blocksize"
argument_list|)
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|modif
argument_list|,
name|atime
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
name|attrs
operator|.
name|getValue
argument_list|(
literal|"permission"
argument_list|)
argument_list|)
argument_list|,
name|attrs
operator|.
name|getValue
argument_list|(
literal|"owner"
argument_list|)
argument_list|,
name|attrs
operator|.
name|getValue
argument_list|(
literal|"group"
argument_list|)
argument_list|,
name|HftpFileSystem
operator|.
name|this
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|attrs
operator|.
name|getValue
argument_list|(
literal|"path"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
else|:
operator|new
name|FileStatus
argument_list|(
literal|0L
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0L
argument_list|,
name|modif
argument_list|,
name|atime
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
name|attrs
operator|.
name|getValue
argument_list|(
literal|"permission"
argument_list|)
argument_list|)
argument_list|,
name|attrs
operator|.
name|getValue
argument_list|(
literal|"owner"
argument_list|)
argument_list|,
name|attrs
operator|.
name|getValue
argument_list|(
literal|"group"
argument_list|)
argument_list|,
name|HftpFileSystem
operator|.
name|this
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|attrs
operator|.
name|getValue
argument_list|(
literal|"path"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|fslist
operator|.
name|add
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
DECL|method|fetchList (String path, boolean recur)
specifier|private
name|void
name|fetchList
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|recur
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|XMLReader
name|xr
init|=
name|XMLReaderFactory
operator|.
name|createXMLReader
argument_list|()
decl_stmt|;
name|xr
operator|.
name|setContentHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|connection
init|=
name|openConnection
argument_list|(
literal|"/listPaths"
operator|+
name|ServletUtil
operator|.
name|encodePath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|"ugi="
operator|+
name|getEncodedUgiParameter
argument_list|()
operator|+
operator|(
name|recur
condition|?
literal|"&recursive=yes"
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|InputStream
name|resp
init|=
name|connection
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|xr
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
specifier|final
name|Exception
name|embedded
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|embedded
operator|!=
literal|null
operator|&&
name|embedded
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|embedded
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid xml directory content"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|fetchList
argument_list|(
name|f
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|fslist
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist: "
operator|+
name|f
argument_list|)
throw|;
block|}
return|return
name|fslist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|listStatus (Path f, boolean recur)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recur
parameter_list|)
throws|throws
name|IOException
block|{
name|fetchList
argument_list|(
name|f
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|recur
argument_list|)
expr_stmt|;
if|if
condition|(
name|fslist
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
operator|(
name|fslist
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|fslist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isDirectory
argument_list|()
operator|)
condition|)
block|{
name|fslist
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|fslist
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listStatus
argument_list|(
name|f
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_class

begin_function
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|LsParser
name|lsparser
init|=
operator|new
name|LsParser
argument_list|()
decl_stmt|;
return|return
name|lsparser
operator|.
name|listStatus
argument_list|(
name|f
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|LsParser
name|lsparser
init|=
operator|new
name|LsParser
argument_list|()
decl_stmt|;
return|return
name|lsparser
operator|.
name|getFileStatus
argument_list|(
name|f
argument_list|)
return|;
block|}
end_function

begin_class
DECL|class|ChecksumParser
specifier|private
class|class
name|ChecksumParser
extends|extends
name|DefaultHandler
block|{
DECL|field|filechecksum
specifier|private
name|FileChecksum
name|filechecksum
decl_stmt|;
comment|/** {@inheritDoc} */
DECL|method|startElement (String ns, String localname, String qname, Attributes attrs)
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|ns
parameter_list|,
name|String
name|localname
parameter_list|,
name|String
name|qname
parameter_list|,
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
operator|!
name|MD5MD5CRC32FileChecksum
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
block|{
if|if
condition|(
name|RemoteException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|RemoteException
operator|.
name|valueOf
argument_list|(
name|attrs
argument_list|)
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Unrecognized entry: "
operator|+
name|qname
argument_list|)
throw|;
block|}
name|filechecksum
operator|=
name|MD5MD5CRC32FileChecksum
operator|.
name|valueOf
argument_list|(
name|attrs
argument_list|)
expr_stmt|;
block|}
DECL|method|getFileChecksum (String f)
specifier|private
name|FileChecksum
name|getFileChecksum
parameter_list|(
name|String
name|f
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpURLConnection
name|connection
init|=
name|openConnection
argument_list|(
literal|"/fileChecksum"
operator|+
name|ServletUtil
operator|.
name|encodePath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|"ugi="
operator|+
name|getEncodedUgiParameter
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|XMLReader
name|xr
init|=
name|XMLReaderFactory
operator|.
name|createXMLReader
argument_list|()
decl_stmt|;
name|xr
operator|.
name|setContentHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|xr
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
specifier|final
name|Exception
name|embedded
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|embedded
operator|!=
literal|null
operator|&&
name|embedded
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|embedded
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid xml directory content"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
return|return
name|filechecksum
return|;
block|}
block|}
end_class

begin_comment
comment|/** {@inheritDoc} */
end_comment

begin_function
DECL|method|getFileChecksum (Path f)
specifier|public
name|FileChecksum
name|getFileChecksum
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|s
init|=
name|makeQualified
argument_list|(
name|f
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
operator|new
name|ChecksumParser
argument_list|()
operator|.
name|getFileChecksum
argument_list|(
name|s
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|getUri
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path f)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|f
parameter_list|)
block|{ }
end_function

begin_comment
comment|/** This optional operation is not yet supported. */
end_comment

begin_function
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
end_function

begin_comment
comment|/**    * A parser for parsing {@link ContentSummary} xml.    */
end_comment

begin_class
DECL|class|ContentSummaryParser
specifier|private
class|class
name|ContentSummaryParser
extends|extends
name|DefaultHandler
block|{
DECL|field|contentsummary
specifier|private
name|ContentSummary
name|contentsummary
decl_stmt|;
comment|/** {@inheritDoc} */
DECL|method|startElement (String ns, String localname, String qname, Attributes attrs)
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|ns
parameter_list|,
name|String
name|localname
parameter_list|,
name|String
name|qname
parameter_list|,
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
operator|!
name|ContentSummary
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
block|{
if|if
condition|(
name|RemoteException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|RemoteException
operator|.
name|valueOf
argument_list|(
name|attrs
argument_list|)
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Unrecognized entry: "
operator|+
name|qname
argument_list|)
throw|;
block|}
name|contentsummary
operator|=
name|toContentSummary
argument_list|(
name|attrs
argument_list|)
expr_stmt|;
block|}
comment|/**      * Connect to the name node and get content summary.        * @param path The path      * @return The content summary for the path.      * @throws IOException      */
DECL|method|getContentSummary (String path)
specifier|private
name|ContentSummary
name|getContentSummary
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpURLConnection
name|connection
init|=
name|openConnection
argument_list|(
literal|"/contentSummary"
operator|+
name|ServletUtil
operator|.
name|encodePath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|"ugi="
operator|+
name|getEncodedUgiParameter
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|connection
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
specifier|final
name|XMLReader
name|xr
init|=
name|XMLReaderFactory
operator|.
name|createXMLReader
argument_list|()
decl_stmt|;
name|xr
operator|.
name|setContentHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|xr
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|//the server may not support getContentSummary
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|saxe
parameter_list|)
block|{
specifier|final
name|Exception
name|embedded
init|=
name|saxe
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|embedded
operator|!=
literal|null
operator|&&
name|embedded
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|embedded
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid xml format"
argument_list|,
name|saxe
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
return|return
name|contentsummary
return|;
block|}
block|}
end_class

begin_comment
comment|/** Return the object represented in the attributes. */
end_comment

begin_function
DECL|method|toContentSummary (Attributes attrs )
specifier|private
specifier|static
name|ContentSummary
name|toContentSummary
parameter_list|(
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|String
name|length
init|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|"length"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fileCount
init|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|"fileCount"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|directoryCount
init|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|"directoryCount"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|quota
init|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|"quota"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|spaceConsumed
init|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|"spaceConsumed"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|spaceQuota
init|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|"spaceQuota"
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|null
operator|||
name|fileCount
operator|==
literal|null
operator|||
name|directoryCount
operator|==
literal|null
operator|||
name|quota
operator|==
literal|null
operator|||
name|spaceConsumed
operator|==
literal|null
operator|||
name|spaceQuota
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
operator|new
name|ContentSummary
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|length
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|fileCount
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|directoryCount
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|quota
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|spaceConsumed
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|spaceQuota
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Invalid attributes: length="
operator|+
name|length
operator|+
literal|", fileCount="
operator|+
name|fileCount
operator|+
literal|", directoryCount="
operator|+
name|directoryCount
operator|+
literal|", quota="
operator|+
name|quota
operator|+
literal|", spaceConsumed="
operator|+
name|spaceConsumed
operator|+
literal|", spaceQuota="
operator|+
name|spaceQuota
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/** {@inheritDoc} */
end_comment

begin_function
DECL|method|getContentSummary (Path f)
specifier|public
name|ContentSummary
name|getContentSummary
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|s
init|=
name|makeQualified
argument_list|(
name|f
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
specifier|final
name|ContentSummary
name|cs
init|=
operator|new
name|ContentSummaryParser
argument_list|()
operator|.
name|getContentSummary
argument_list|(
name|s
argument_list|)
decl_stmt|;
return|return
name|cs
operator|!=
literal|null
condition|?
name|cs
else|:
name|super
operator|.
name|getContentSummary
argument_list|(
name|f
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * An action that will renew and replace the hftp file system's delegation     * tokens automatically.    */
end_comment

begin_class
DECL|class|RenewAction
specifier|private
specifier|static
class|class
name|RenewAction
implements|implements
name|Delayed
block|{
comment|// when should the renew happen
DECL|field|timestamp
specifier|private
name|long
name|timestamp
decl_stmt|;
comment|// a weak reference to the file system so that it can be garbage collected
DECL|field|weakFs
specifier|private
specifier|final
name|WeakReference
argument_list|<
name|HftpFileSystem
argument_list|>
name|weakFs
decl_stmt|;
DECL|method|RenewAction (long timestamp, HftpFileSystem fs)
name|RenewAction
parameter_list|(
name|long
name|timestamp
parameter_list|,
name|HftpFileSystem
name|fs
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|weakFs
operator|=
operator|new
name|WeakReference
argument_list|<
name|HftpFileSystem
argument_list|>
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the delay until this event should happen.      */
annotation|@
name|Override
DECL|method|getDelay (TimeUnit unit)
specifier|public
name|long
name|getDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
name|long
name|millisLeft
init|=
name|timestamp
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
return|return
name|unit
operator|.
name|convert
argument_list|(
name|millisLeft
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
comment|/**      * Compare two events in the same queue.      */
annotation|@
name|Override
DECL|method|compareTo (Delayed o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Delayed
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|RenewAction
operator|.
name|class
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal comparision to non-RenewAction"
argument_list|)
throw|;
block|}
name|RenewAction
name|other
init|=
operator|(
name|RenewAction
operator|)
name|o
decl_stmt|;
return|return
name|timestamp
operator|<
name|other
operator|.
name|timestamp
condition|?
operator|-
literal|1
else|:
operator|(
name|timestamp
operator|==
name|other
operator|.
name|timestamp
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
assert|assert
literal|false
operator|:
literal|"hashCode not designed"
assert|;
return|return
literal|33
return|;
block|}
comment|/**      * equals      */
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Delayed
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|compareTo
argument_list|(
operator|(
name|Delayed
operator|)
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/**      * Set a new time for the renewal. Can only be called when the action      * is not in the queue.      * @param newTime the new time      */
DECL|method|setNewTime (long newTime)
specifier|public
name|void
name|setNewTime
parameter_list|(
name|long
name|newTime
parameter_list|)
block|{
name|timestamp
operator|=
name|newTime
expr_stmt|;
block|}
comment|/**      * Renew or replace the delegation token for this file system.      * @return      * @throws IOException      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|renew ()
specifier|public
name|boolean
name|renew
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|HftpFileSystem
name|fs
init|=
name|weakFs
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|fs
init|)
block|{
name|fs
operator|.
name|ugi
operator|.
name|reloginFromKeytab
argument_list|()
expr_stmt|;
name|fs
operator|.
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|DelegationTokenFetcher
operator|.
name|renewDelegationToken
argument_list|(
name|fs
operator|.
name|nnHttpUrl
argument_list|,
name|fs
operator|.
name|delegationToken
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
try|try
block|{
name|fs
operator|.
name|delegationToken
operator|=
operator|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
operator|)
name|fs
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie2
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't renew or get new delegation token "
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fs
operator|!=
literal|null
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|HftpFileSystem
name|fs
init|=
name|weakFs
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
block|{
return|return
literal|"evaporated token renew"
return|;
block|}
synchronized|synchronized
init|(
name|fs
init|)
block|{
name|result
operator|.
name|append
argument_list|(
name|fs
operator|.
name|delegationToken
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
literal|" renew in "
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|" secs"
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * A daemon thread that waits for the next file system to renew.    */
end_comment

begin_class
DECL|class|RenewerThread
specifier|private
specifier|static
class|class
name|RenewerThread
extends|extends
name|Thread
block|{
DECL|field|queue
specifier|private
name|DelayQueue
argument_list|<
name|RenewAction
argument_list|>
name|queue
init|=
operator|new
name|DelayQueue
argument_list|<
name|RenewAction
argument_list|>
argument_list|()
decl_stmt|;
comment|// wait for 95% of a day between renewals
DECL|field|RENEW_CYCLE
specifier|private
specifier|static
specifier|final
name|int
name|RENEW_CYCLE
init|=
call|(
name|int
call|)
argument_list|(
literal|0.95
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
argument_list|)
decl_stmt|;
DECL|method|RenewerThread ()
specifier|public
name|RenewerThread
parameter_list|()
block|{
name|super
argument_list|(
literal|"HFTP Delegation Token Renewer"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|addTokenToRenew (HftpFileSystem fs)
specifier|public
name|void
name|addTokenToRenew
parameter_list|(
name|HftpFileSystem
name|fs
parameter_list|)
block|{
name|queue
operator|.
name|add
argument_list|(
operator|new
name|RenewAction
argument_list|(
name|RENEW_CYCLE
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|RenewAction
name|action
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|action
operator|=
name|queue
operator|.
name|take
argument_list|()
expr_stmt|;
if|if
condition|(
name|action
operator|.
name|renew
argument_list|()
condition|)
block|{
name|action
operator|.
name|setNewTime
argument_list|(
name|RENEW_CYCLE
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
name|action
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|ie
parameter_list|)
block|{
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure to renew token "
operator|+
name|action
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure in renew queue"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

unit|}
end_unit

