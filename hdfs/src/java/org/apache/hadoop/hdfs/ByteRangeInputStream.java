begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|StreamFile
import|;
end_import

begin_comment
comment|/**  * To support HTTP byte streams, a new connection to an HTTP server needs to be  * created each time. This class hides the complexity of those multiple   * connections from the client. Whenever seek() is called, a new connection  * is made on the successive read(). The normal input stream functions are   * connected to the currently active input stream.   */
end_comment

begin_class
DECL|class|ByteRangeInputStream
class|class
name|ByteRangeInputStream
extends|extends
name|FSInputStream
block|{
comment|/**    * This class wraps a URL to allow easy mocking when testing. The URL class    * cannot be easily mocked because it is public.    */
DECL|class|URLOpener
specifier|static
class|class
name|URLOpener
block|{
DECL|field|url
specifier|protected
name|URL
name|url
decl_stmt|;
DECL|method|URLOpener (URL u)
specifier|public
name|URLOpener
parameter_list|(
name|URL
name|u
parameter_list|)
block|{
name|url
operator|=
name|u
expr_stmt|;
block|}
DECL|method|setURL (URL u)
specifier|public
name|void
name|setURL
parameter_list|(
name|URL
name|u
parameter_list|)
block|{
name|url
operator|=
name|u
expr_stmt|;
block|}
DECL|method|getURL ()
specifier|public
name|URL
name|getURL
parameter_list|()
block|{
return|return
name|url
return|;
block|}
DECL|method|openConnection ()
specifier|public
name|HttpURLConnection
name|openConnection
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
return|;
block|}
block|}
DECL|field|in
specifier|protected
name|InputStream
name|in
decl_stmt|;
DECL|field|originalURL
specifier|protected
name|URLOpener
name|originalURL
decl_stmt|;
DECL|field|resolvedURL
specifier|protected
name|URLOpener
name|resolvedURL
decl_stmt|;
DECL|field|startPos
specifier|protected
name|long
name|startPos
init|=
literal|0
decl_stmt|;
DECL|field|currentPos
specifier|protected
name|long
name|currentPos
init|=
literal|0
decl_stmt|;
DECL|field|filelength
specifier|protected
name|long
name|filelength
decl_stmt|;
DECL|field|status
specifier|protected
name|int
name|status
init|=
name|STATUS_SEEK
decl_stmt|;
DECL|field|STATUS_NORMAL
specifier|protected
specifier|static
specifier|final
name|int
name|STATUS_NORMAL
init|=
literal|0
decl_stmt|;
DECL|field|STATUS_SEEK
specifier|protected
specifier|static
specifier|final
name|int
name|STATUS_SEEK
init|=
literal|1
decl_stmt|;
DECL|method|ByteRangeInputStream (final URL url)
name|ByteRangeInputStream
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|URLOpener
argument_list|(
name|url
argument_list|)
argument_list|,
operator|new
name|URLOpener
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|ByteRangeInputStream (URLOpener o, URLOpener r)
name|ByteRangeInputStream
parameter_list|(
name|URLOpener
name|o
parameter_list|,
name|URLOpener
name|r
parameter_list|)
block|{
name|this
operator|.
name|originalURL
operator|=
name|o
expr_stmt|;
name|this
operator|.
name|resolvedURL
operator|=
name|r
expr_stmt|;
block|}
DECL|method|getInputStream ()
specifier|private
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|status
operator|!=
name|STATUS_NORMAL
condition|)
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|=
literal|null
expr_stmt|;
block|}
comment|// use the original url  if no resolved url exists (e.g., if it's
comment|// the first time a request is made)
specifier|final
name|URLOpener
name|o
init|=
name|resolvedURL
operator|.
name|getURL
argument_list|()
operator|==
literal|null
condition|?
name|originalURL
else|:
name|resolvedURL
decl_stmt|;
specifier|final
name|HttpURLConnection
name|connection
init|=
name|o
operator|.
name|openConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
if|if
condition|(
name|startPos
operator|!=
literal|0
condition|)
block|{
name|connection
operator|.
name|setRequestProperty
argument_list|(
literal|"Range"
argument_list|,
literal|"bytes="
operator|+
name|startPos
operator|+
literal|"-"
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
specifier|final
name|String
name|cl
init|=
name|connection
operator|.
name|getHeaderField
argument_list|(
name|StreamFile
operator|.
name|CONTENT_LENGTH
argument_list|)
decl_stmt|;
name|filelength
operator|=
name|cl
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|cl
argument_list|)
expr_stmt|;
if|if
condition|(
name|HftpFileSystem
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|HftpFileSystem
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"filelength = "
operator|+
name|filelength
argument_list|)
expr_stmt|;
block|}
name|in
operator|=
name|connection
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|HftpFileSystem
operator|.
name|throwIOExceptionFromConnection
argument_list|(
name|connection
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|startPos
operator|!=
literal|0
operator|&&
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|206
condition|)
block|{
comment|// we asked for a byte range but did not receive a partial content
comment|// response...
throw|throw
operator|new
name|IOException
argument_list|(
literal|"206 expected, but received "
operator|+
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|startPos
operator|==
literal|0
operator|&&
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|200
condition|)
block|{
comment|// we asked for all bytes from the beginning but didn't receive a 200
comment|// response (none of the other 2xx codes are valid here)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"200 expected, but received "
operator|+
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
throw|;
block|}
name|resolvedURL
operator|.
name|setURL
argument_list|(
name|connection
operator|.
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|=
name|STATUS_NORMAL
expr_stmt|;
block|}
return|return
name|in
return|;
block|}
DECL|method|update (final boolean isEOF, final int n )
specifier|private
name|void
name|update
parameter_list|(
specifier|final
name|boolean
name|isEOF
parameter_list|,
specifier|final
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isEOF
condition|)
block|{
name|currentPos
operator|+=
name|n
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentPos
operator|<
name|filelength
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Got EOF but currentPos = "
operator|+
name|currentPos
operator|+
literal|"< filelength = "
operator|+
name|filelength
argument_list|)
throw|;
block|}
block|}
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|b
init|=
name|getInputStream
argument_list|()
operator|.
name|read
argument_list|()
decl_stmt|;
name|update
argument_list|(
name|b
operator|==
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/**    * Seek to the given offset from the start of the file.    * The next read() will be from that location.  Can't    * seek past the end of the file.    */
DECL|method|seek (long pos)
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|!=
name|currentPos
condition|)
block|{
name|startPos
operator|=
name|pos
expr_stmt|;
name|currentPos
operator|=
name|pos
expr_stmt|;
name|status
operator|=
name|STATUS_SEEK
expr_stmt|;
block|}
block|}
comment|/**    * Return the current offset from the start of the file    */
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|currentPos
return|;
comment|// keep total count?
block|}
comment|/**    * Seeks a different copy of the data.  Returns true if    * found a new source, false otherwise.    */
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

