begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfsproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfsproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateExpiredException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateNotYetValidException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_class
DECL|class|ProxyFilter
specifier|public
class|class
name|ProxyFilter
implements|implements
name|Filter
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProxyFilter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Pattern for triggering reload of user permissions */
DECL|field|RELOAD_PATTERN
specifier|protected
specifier|static
specifier|final
name|Pattern
name|RELOAD_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(/reloadPermFiles)$"
argument_list|)
decl_stmt|;
comment|/** Pattern for a filter to find out if a request is HFTP/HSFTP request */
DECL|field|HFTP_PATTERN
specifier|protected
specifier|static
specifier|final
name|Pattern
name|HFTP_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(/listPaths|/data|/streamFile|/file)$"
argument_list|)
decl_stmt|;
comment|/**    * Pattern for a filter to find out if an HFTP/HSFTP request stores its file    * path in the extra path information associated with the URL; if not, the    * file path is stored in request parameter "filename"    */
DECL|field|FILEPATH_PATTERN
specifier|protected
specifier|static
specifier|final
name|Pattern
name|FILEPATH_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(/listPaths|/data|/file)$"
argument_list|)
decl_stmt|;
DECL|field|permsMap
specifier|private
specifier|static
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Path
argument_list|>
argument_list|>
name|permsMap
decl_stmt|;
DECL|field|certsMap
specifier|private
specifier|static
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|BigInteger
argument_list|>
argument_list|>
name|certsMap
decl_stmt|;
static|static
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
literal|"hdfsproxy-default.xml"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Path
argument_list|>
argument_list|>
name|pMap
init|=
name|getPermMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|permsMap
operator|=
name|pMap
operator|!=
literal|null
condition|?
name|pMap
else|:
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Path
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|BigInteger
argument_list|>
argument_list|>
name|cMap
init|=
name|getCertsMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|certsMap
operator|=
name|cMap
operator|!=
literal|null
condition|?
name|cMap
else|:
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|BigInteger
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|init (FilterConfig filterConfig)
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|ServletContext
name|context
init|=
name|filterConfig
operator|.
name|getServletContext
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
literal|"hdfsproxy-default.xml"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
literal|"ssl-server.xml"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
literal|"hdfsproxy-site.xml"
argument_list|)
expr_stmt|;
name|String
name|nn
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hdfsproxy.dfs.namenode.address"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Proxy source cluster name node address not speficied"
argument_list|)
throw|;
block|}
name|InetSocketAddress
name|nAddr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|nn
argument_list|)
decl_stmt|;
name|context
operator|.
name|setAttribute
argument_list|(
literal|"name.node.address"
argument_list|,
name|nAddr
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAttribute
argument_list|(
literal|"name.conf"
argument_list|,
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.conf"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"proxyFilter initialization success: "
operator|+
name|nn
argument_list|)
expr_stmt|;
block|}
DECL|method|getPermMap (Configuration conf)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Path
argument_list|>
argument_list|>
name|getPermMap
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|permLoc
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hdfsproxy.user.permissions.file.location"
argument_list|,
literal|"user-permissions.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getResource
argument_list|(
name|permLoc
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"HdfsProxy user permissions file not found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Configuration
name|permConf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|permConf
operator|.
name|addResource
argument_list|(
name|permLoc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Path
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Path
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|permConf
control|)
block|{
name|String
name|k
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|v
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|!=
literal|null
operator|&&
name|k
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|&&
name|v
operator|!=
literal|null
operator|&&
name|v
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Set
argument_list|<
name|Path
argument_list|>
name|pathSet
init|=
operator|new
name|HashSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|paths
init|=
name|v
operator|.
name|split
argument_list|(
literal|",\\s*"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
if|if
condition|(
name|p
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|pathSet
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|map
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|pathSet
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
DECL|method|getCertsMap (Configuration conf)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|BigInteger
argument_list|>
argument_list|>
name|getCertsMap
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|certsLoc
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hdfsproxy.user.certs.file.location"
argument_list|,
literal|"user-certs.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getResource
argument_list|(
name|certsLoc
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"HdfsProxy user certs file not found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Configuration
name|certsConf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|certsConf
operator|.
name|addResource
argument_list|(
name|certsLoc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|BigInteger
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|BigInteger
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|certsConf
control|)
block|{
name|String
name|k
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|v
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|!=
literal|null
operator|&&
name|k
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|&&
name|v
operator|!=
literal|null
operator|&&
name|v
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Set
argument_list|<
name|BigInteger
argument_list|>
name|numSet
init|=
operator|new
name|HashSet
argument_list|<
name|BigInteger
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|serialnumbers
init|=
name|v
operator|.
name|split
argument_list|(
literal|"\\s*,\\s*"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|num
range|:
name|serialnumbers
control|)
block|{
if|if
condition|(
name|num
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|numSet
operator|.
name|add
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|num
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|map
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|numSet
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{   }
comment|/** {@inheritDoc} */
DECL|method|doFilter (ServletRequest request, ServletResponse response, FilterChain chain)
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|HttpServletRequest
name|rqst
init|=
operator|(
name|HttpServletRequest
operator|)
name|request
decl_stmt|;
name|HttpServletResponse
name|rsp
init|=
operator|(
name|HttpServletResponse
operator|)
name|response
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Request from "
argument_list|)
operator|.
name|append
argument_list|(
name|rqst
operator|.
name|getRemoteHost
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|rqst
operator|.
name|getRemoteAddr
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|rqst
operator|.
name|getRemotePort
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|rqst
operator|.
name|getAttributeNames
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|attribute
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n  "
operator|+
name|attribute
operator|+
literal|" => "
operator|+
name|rqst
operator|.
name|getAttribute
argument_list|(
name|attribute
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|X509Certificate
index|[]
name|userCerts
init|=
operator|(
name|X509Certificate
index|[]
operator|)
name|rqst
operator|.
name|getAttribute
argument_list|(
literal|"javax.servlet.request.X509Certificate"
argument_list|)
decl_stmt|;
if|if
condition|(
name|userCerts
operator|!=
literal|null
condition|)
for|for
control|(
name|X509Certificate
name|cert
range|:
name|userCerts
control|)
name|b
operator|.
name|append
argument_list|(
literal|"\n Client certificate Subject Name is "
operator|+
name|cert
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The Scheme is "
operator|+
name|rqst
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The Auth Type is "
operator|+
name|rqst
operator|.
name|getAuthType
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The Path Info is "
operator|+
name|rqst
operator|.
name|getPathInfo
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The Translated Path Info is "
operator|+
name|rqst
operator|.
name|getPathTranslated
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The Context Path is "
operator|+
name|rqst
operator|.
name|getContextPath
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The Query String is "
operator|+
name|rqst
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The Remote User is "
operator|+
name|rqst
operator|.
name|getRemoteUser
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The User Principal is "
operator|+
name|rqst
operator|.
name|getUserPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The Request URI is "
operator|+
name|rqst
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The Request URL is "
operator|+
name|rqst
operator|.
name|getRequestURL
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The Servlet Path is "
operator|+
name|rqst
operator|.
name|getServletPath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|unitTest
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|rqst
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"http"
argument_list|)
operator|&&
name|rqst
operator|.
name|getParameter
argument_list|(
literal|"UnitTest"
argument_list|)
operator|!=
literal|null
condition|)
name|unitTest
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|rqst
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"https"
argument_list|)
operator|||
name|unitTest
condition|)
block|{
name|boolean
name|isAuthorized
init|=
literal|false
decl_stmt|;
name|X509Certificate
index|[]
name|certs
init|=
operator|(
name|X509Certificate
index|[]
operator|)
name|rqst
operator|.
name|getAttribute
argument_list|(
literal|"javax.servlet.request.X509Certificate"
argument_list|)
decl_stmt|;
if|if
condition|(
name|unitTest
condition|)
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"==> Entering https unit test"
argument_list|)
expr_stmt|;
block|}
name|String
name|SslPath
init|=
name|rqst
operator|.
name|getParameter
argument_list|(
literal|"SslPath"
argument_list|)
decl_stmt|;
name|InputStream
name|inStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|SslPath
argument_list|)
decl_stmt|;
name|CertificateFactory
name|cf
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|inStream
argument_list|)
decl_stmt|;
name|inStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|certs
operator|=
operator|new
name|X509Certificate
index|[]
block|{
name|cert
block|}
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do nothing here
block|}
block|}
if|if
condition|(
name|certs
operator|==
literal|null
operator|||
name|certs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|rsp
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"No client SSL certificate received"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"No Client SSL certificate received"
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|X509Certificate
name|cert
range|:
name|certs
control|)
block|{
try|try
block|{
name|cert
operator|.
name|checkValidity
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CertificateExpiredException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received cert for "
operator|+
name|cert
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" expired"
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
literal|"Certificate expired"
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|CertificateNotYetValidException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received cert for "
operator|+
name|cert
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is not yet valid"
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
literal|"Certificate is not yet valid"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|String
index|[]
name|tokens
init|=
name|certs
index|[
literal|0
index|]
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\s*,\\s*"
argument_list|)
decl_stmt|;
name|String
name|userID
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"CN="
argument_list|)
condition|)
block|{
name|userID
operator|=
name|s
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|userID
operator|==
literal|null
operator|||
name|userID
operator|.
name|length
argument_list|()
operator|<
literal|4
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't retrieve user ID from SSL certificate"
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
literal|"Can't retrieve user ID from SSL certificate"
argument_list|)
expr_stmt|;
return|return;
block|}
name|userID
operator|=
name|userID
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|String
name|servletPath
init|=
name|rqst
operator|.
name|getServletPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|unitTest
condition|)
block|{
name|servletPath
operator|=
name|rqst
operator|.
name|getParameter
argument_list|(
literal|"TestSevletPathInfo"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"this is for unit test purpose only"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|HFTP_PATTERN
operator|.
name|matcher
argument_list|(
name|servletPath
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// request is an HSFTP request
if|if
condition|(
name|FILEPATH_PATTERN
operator|.
name|matcher
argument_list|(
name|servletPath
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// file path as part of the URL
name|isAuthorized
operator|=
name|checkPath
argument_list|(
name|userID
argument_list|,
name|certs
index|[
literal|0
index|]
argument_list|,
name|rqst
operator|.
name|getPathInfo
argument_list|()
operator|!=
literal|null
condition|?
name|rqst
operator|.
name|getPathInfo
argument_list|()
else|:
literal|"/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// file path is stored in "filename" parameter
name|isAuthorized
operator|=
name|checkPath
argument_list|(
name|userID
argument_list|,
name|certs
index|[
literal|0
index|]
argument_list|,
name|rqst
operator|.
name|getParameter
argument_list|(
literal|"filename"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|RELOAD_PATTERN
operator|.
name|matcher
argument_list|(
name|servletPath
argument_list|)
operator|.
name|matches
argument_list|()
operator|&&
name|checkUser
argument_list|(
literal|"Admin"
argument_list|,
name|certs
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
literal|"hdfsproxy-default.xml"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Path
argument_list|>
argument_list|>
name|permsMap
init|=
name|getPermMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|BigInteger
argument_list|>
argument_list|>
name|certsMap
init|=
name|getCertsMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|permsMap
operator|==
literal|null
operator|||
name|certsMap
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Permission files reloading failed"
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Permission files reloading failed"
argument_list|)
expr_stmt|;
return|return;
block|}
name|ProxyFilter
operator|.
name|permsMap
operator|=
name|permsMap
expr_stmt|;
name|ProxyFilter
operator|.
name|certsMap
operator|=
name|certsMap
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"User permissions and user certs files reloaded"
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|isAuthorized
condition|)
block|{
name|rsp
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
literal|"Unauthorized access"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// request is authorized, set ugi for servlets
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|userID
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setAttribute
argument_list|(
literal|"authorized.ugi"
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.authorized.userID"
argument_list|,
name|userID
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rqst
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
comment|// http request, set ugi for servlets, only for testing purposes
name|String
name|ugi
init|=
name|rqst
operator|.
name|getParameter
argument_list|(
literal|"ugi"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ugi
operator|!=
literal|null
condition|)
block|{
name|rqst
operator|.
name|setAttribute
argument_list|(
literal|"authorized.ugi"
argument_list|,
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|ugi
argument_list|)
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.authorized.userID"
argument_list|,
name|ugi
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
comment|/** check that client's cert is listed in the user certs file */
DECL|method|checkUser (String userID, X509Certificate cert)
specifier|private
name|boolean
name|checkUser
parameter_list|(
name|String
name|userID
parameter_list|,
name|X509Certificate
name|cert
parameter_list|)
block|{
name|Set
argument_list|<
name|BigInteger
argument_list|>
name|numSet
init|=
name|certsMap
operator|.
name|get
argument_list|(
name|userID
argument_list|)
decl_stmt|;
if|if
condition|(
name|numSet
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"User "
operator|+
name|userID
operator|+
literal|" is not configured in the user certs file"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|numSet
operator|.
name|contains
argument_list|(
name|cert
operator|.
name|getSerialNumber
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cert with serial number "
operator|+
name|cert
operator|.
name|getSerialNumber
argument_list|()
operator|+
literal|" is not listed for user "
operator|+
name|userID
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** check that the requested path is listed in the user permissions file */
DECL|method|checkPath (String userID, X509Certificate cert, String pathInfo)
specifier|private
name|boolean
name|checkPath
parameter_list|(
name|String
name|userID
parameter_list|,
name|X509Certificate
name|cert
parameter_list|,
name|String
name|pathInfo
parameter_list|)
block|{
if|if
condition|(
operator|!
name|checkUser
argument_list|(
name|userID
argument_list|,
name|cert
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Set
argument_list|<
name|Path
argument_list|>
name|pathSet
init|=
name|permsMap
operator|.
name|get
argument_list|(
name|userID
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathSet
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"User "
operator|+
name|userID
operator|+
literal|" is not listed in the user permissions file"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|pathInfo
operator|==
literal|null
operator|||
name|pathInfo
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get file path from HTTPS request; user is "
operator|+
name|userID
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Path
name|userPath
init|=
operator|new
name|Path
argument_list|(
name|pathInfo
argument_list|)
decl_stmt|;
while|while
condition|(
name|userPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n Checking file path "
operator|+
name|userPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pathSet
operator|.
name|contains
argument_list|(
name|userPath
argument_list|)
condition|)
return|return
literal|true
return|;
name|userPath
operator|=
name|userPath
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"User "
operator|+
name|userID
operator|+
literal|" is not authorized to access "
operator|+
name|pathInfo
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

