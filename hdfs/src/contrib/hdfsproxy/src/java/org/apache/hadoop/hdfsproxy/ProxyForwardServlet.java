begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfsproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfsproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|RequestDispatcher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  *   *  */
end_comment

begin_class
DECL|class|ProxyForwardServlet
specifier|public
class|class
name|ProxyForwardServlet
extends|extends
name|HttpServlet
block|{
comment|/**    *     */
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|static
name|Configuration
name|configuration
init|=
literal|null
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProxyForwardServlet
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
name|ServletContext
name|context
init|=
name|getServletContext
argument_list|()
decl_stmt|;
name|configuration
operator|=
operator|(
name|Configuration
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.conf"
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|doGet (HttpServletRequest request, HttpServletResponse response)
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|String
name|hostname
init|=
name|request
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|String
name|version
init|=
name|configuration
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
comment|// extract from hostname directly
name|String
index|[]
name|strs
init|=
name|hostname
operator|.
name|split
argument_list|(
literal|"[-\\.]"
argument_list|)
decl_stmt|;
name|version
operator|=
literal|"/"
operator|+
name|strs
index|[
literal|0
index|]
expr_stmt|;
block|}
name|ServletContext
name|curContext
init|=
name|getServletContext
argument_list|()
decl_stmt|;
name|ServletContext
name|dstContext
init|=
name|curContext
operator|.
name|getContext
argument_list|(
name|version
argument_list|)
decl_stmt|;
comment|// avoid infinite forwarding.
if|if
condition|(
name|dstContext
operator|==
literal|null
operator|||
name|getServletContext
argument_list|()
operator|.
name|equals
argument_list|(
name|dstContext
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Context ("
operator|+
name|version
operator|+
literal|".war) non-exist or restricted from access"
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Request to "
operator|+
name|hostname
operator|+
literal|" is forwarded to version "
operator|+
name|version
argument_list|)
expr_stmt|;
block|}
name|forwardRequest
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|dstContext
argument_list|,
name|request
operator|.
name|getServletPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|forwardRequest (HttpServletRequest request, HttpServletResponse response, ServletContext context, String pathInfo)
specifier|public
name|void
name|forwardRequest
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|ServletContext
name|context
parameter_list|,
name|String
name|pathInfo
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|String
name|path
init|=
name|buildForwardPath
argument_list|(
name|request
argument_list|,
name|pathInfo
argument_list|)
decl_stmt|;
name|RequestDispatcher
name|dispatcher
init|=
name|context
operator|.
name|getRequestDispatcher
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|dispatcher
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"There was no such dispatcher: "
operator|+
name|path
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
return|return;
block|}
name|dispatcher
operator|.
name|forward
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|buildForwardPath (HttpServletRequest request, String pathInfo)
specifier|protected
name|String
name|buildForwardPath
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|pathInfo
parameter_list|)
block|{
name|String
name|path
init|=
name|pathInfo
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getPathInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|path
operator|+=
name|request
operator|.
name|getPathInfo
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getQueryString
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|path
operator|+=
literal|"?"
operator|+
name|request
operator|.
name|getQueryString
argument_list|()
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
block|}
end_class

end_unit

