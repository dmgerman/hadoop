begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfsproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfsproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|JspHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeHttpServer
import|;
end_import

begin_comment
comment|/**  * A HTTPS/SSL proxy to HDFS, implementing certificate based access control.  */
end_comment

begin_class
DECL|class|HdfsProxy
specifier|public
class|class
name|HdfsProxy
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HdfsProxy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|server
specifier|private
name|ProxyHttpServer
name|server
decl_stmt|;
DECL|field|sslAddr
specifier|private
name|InetSocketAddress
name|sslAddr
decl_stmt|;
comment|/** Construct a proxy from the given configuration */
DECL|method|HdfsProxy (Configuration conf)
specifier|public
name|HdfsProxy
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|stop
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|initialize (Configuration conf)
specifier|private
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|sslAddr
operator|=
name|getSslAddr
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|nn
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hdfsproxy.dfs.namenode.address"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nn
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HDFS NameNode address is not specified"
argument_list|)
throw|;
name|InetSocketAddress
name|nnAddr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|nn
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"HDFS NameNode is at: "
operator|+
name|nnAddr
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|nnAddr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|sslConf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|sslConf
operator|.
name|addResource
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hdfsproxy.https.server.keystore.resource"
argument_list|,
literal|"ssl-server.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// unit testing
name|sslConf
operator|.
name|set
argument_list|(
literal|"proxy.http.test.listener.addr"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"proxy.http.test.listener.addr"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|=
operator|new
name|ProxyHttpServer
argument_list|(
name|sslAddr
argument_list|,
name|sslConf
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|.
name|setAttribute
argument_list|(
literal|"proxy.https.port"
argument_list|,
name|server
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|.
name|setAttribute
argument_list|(
name|NameNodeHttpServer
operator|.
name|NAMENODE_ADDRESS_ATTRIBUTE_KEY
argument_list|,
name|nnAddr
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|.
name|setAttribute
argument_list|(
name|JspHelper
operator|.
name|CURRENT_CONF
argument_list|,
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|.
name|addGlobalFilter
argument_list|(
literal|"ProxyFilter"
argument_list|,
name|ProxyFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|.
name|addServlet
argument_list|(
literal|"listPaths"
argument_list|,
literal|"/listPaths/*"
argument_list|,
name|ProxyListPathsServlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|.
name|addServlet
argument_list|(
literal|"data"
argument_list|,
literal|"/data/*"
argument_list|,
name|ProxyFileDataServlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|.
name|addServlet
argument_list|(
literal|"streamFile"
argument_list|,
literal|"/streamFile/*"
argument_list|,
name|ProxyStreamFile
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/** return the http port if any, only for testing purposes */
DECL|method|getPort ()
name|int
name|getPort
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|getPort
argument_list|()
return|;
block|}
comment|/**    * Start the server.    */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"HdfsProxy server up at: "
operator|+
name|sslAddr
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|sslAddr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stop all server threads and wait for all to finish.    */
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got exception shutting down proxy"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Wait for service to finish.    * (Normally, it runs forever.)    */
DECL|method|join ()
specifier|public
name|void
name|join
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|server
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{     }
block|}
DECL|method|getSslAddr (Configuration conf)
specifier|static
name|InetSocketAddress
name|getSslAddr
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|addr
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hdfsproxy.https.address"
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HdfsProxy address is not specified"
argument_list|)
throw|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|addr
argument_list|)
return|;
block|}
DECL|method|createHdfsProxy (String argv[], Configuration conf)
specifier|public
specifier|static
name|HdfsProxy
name|createHdfsProxy
parameter_list|(
name|String
name|argv
index|[]
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: HdfsProxy"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
literal|"hdfsproxy-default.xml"
argument_list|)
expr_stmt|;
block|}
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|HdfsProxy
operator|.
name|class
argument_list|,
name|argv
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|HdfsProxy
name|proxy
init|=
operator|new
name|HdfsProxy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|proxy
return|;
block|}
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|HdfsProxy
name|proxy
init|=
name|createHdfsProxy
argument_list|(
name|argv
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
name|proxy
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

