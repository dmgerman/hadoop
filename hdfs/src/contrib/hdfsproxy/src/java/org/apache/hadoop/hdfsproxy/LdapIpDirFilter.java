begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfsproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfsproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|BasicAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|BasicAttributes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|ldap
operator|.
name|InitialLdapContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_class
DECL|class|LdapIpDirFilter
specifier|public
class|class
name|LdapIpDirFilter
implements|implements
name|Filter
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LdapIpDirFilter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|baseName
specifier|private
specifier|static
name|String
name|baseName
decl_stmt|;
DECL|field|hdfsIpSchemaStr
specifier|private
specifier|static
name|String
name|hdfsIpSchemaStr
decl_stmt|;
DECL|field|hdfsIpSchemaStrPrefix
specifier|private
specifier|static
name|String
name|hdfsIpSchemaStrPrefix
decl_stmt|;
DECL|field|hdfsUidSchemaStr
specifier|private
specifier|static
name|String
name|hdfsUidSchemaStr
decl_stmt|;
DECL|field|hdfsPathSchemaStr
specifier|private
specifier|static
name|String
name|hdfsPathSchemaStr
decl_stmt|;
DECL|field|lctx
specifier|private
name|InitialLdapContext
name|lctx
decl_stmt|;
DECL|class|LdapRoleEntry
specifier|private
class|class
name|LdapRoleEntry
block|{
DECL|field|userId
name|String
name|userId
decl_stmt|;
DECL|field|paths
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|paths
decl_stmt|;
DECL|method|init (String userId, ArrayList<Path> paths)
name|void
name|init
parameter_list|(
name|String
name|userId
parameter_list|,
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|paths
parameter_list|)
block|{
name|this
operator|.
name|userId
operator|=
name|userId
expr_stmt|;
name|this
operator|.
name|paths
operator|=
name|paths
expr_stmt|;
block|}
DECL|method|contains (Path path)
name|boolean
name|contains
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|paths
operator|!=
literal|null
operator|&&
name|paths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"LdapRoleEntry{"
operator|+
literal|", userId='"
operator|+
name|userId
operator|+
literal|'\''
operator|+
literal|", paths="
operator|+
name|paths
operator|+
literal|'}'
return|;
block|}
block|}
DECL|method|initialize (String bName, InitialLdapContext ctx)
specifier|public
name|void
name|initialize
parameter_list|(
name|String
name|bName
parameter_list|,
name|InitialLdapContext
name|ctx
parameter_list|)
block|{
comment|// hook to cooperate unit test
name|baseName
operator|=
name|bName
expr_stmt|;
name|hdfsIpSchemaStr
operator|=
literal|"uniqueMember"
expr_stmt|;
name|hdfsIpSchemaStrPrefix
operator|=
literal|"cn="
expr_stmt|;
name|hdfsUidSchemaStr
operator|=
literal|"uid"
expr_stmt|;
name|hdfsPathSchemaStr
operator|=
literal|"documentLocation"
expr_stmt|;
name|lctx
operator|=
name|ctx
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|init (FilterConfig filterConfig)
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|ServletContext
name|context
init|=
name|filterConfig
operator|.
name|getServletContext
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
literal|"hdfsproxy-default.xml"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
literal|"hdfsproxy-site.xml"
argument_list|)
expr_stmt|;
comment|// extract namenode from source conf.
name|String
name|nn
init|=
name|ProxyUtil
operator|.
name|getNamenode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|nAddr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|nn
argument_list|)
decl_stmt|;
name|context
operator|.
name|setAttribute
argument_list|(
literal|"name.node.address"
argument_list|,
name|nAddr
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAttribute
argument_list|(
literal|"name.conf"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// for storing hostname<--> cluster mapping to decide which source cluster
comment|// to forward
name|context
operator|.
name|setAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.conf"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|lctx
operator|==
literal|null
condition|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|InitialLdapContext
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"hdfsproxy.ldap.initial.context.factory"
argument_list|,
literal|"com.sun.jndi.ldap.LdapCtxFactory"
argument_list|)
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|InitialLdapContext
operator|.
name|PROVIDER_URL
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"hdfsproxy.ldap.provider.url"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|lctx
operator|=
operator|new
name|InitialLdapContext
argument_list|(
name|env
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|ne
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"NamingException in initializing ldap"
operator|+
name|ne
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|baseName
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"hdfsproxy.ldap.role.base"
argument_list|)
expr_stmt|;
name|hdfsIpSchemaStr
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"hdfsproxy.ldap.ip.schema.string"
argument_list|,
literal|"uniqueMember"
argument_list|)
expr_stmt|;
name|hdfsIpSchemaStrPrefix
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"hdfsproxy.ldap.ip.schema.string.prefix"
argument_list|,
literal|"cn="
argument_list|)
expr_stmt|;
name|hdfsUidSchemaStr
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"hdfsproxy.ldap.uid.schema.string"
argument_list|,
literal|"uid"
argument_list|)
expr_stmt|;
name|hdfsPathSchemaStr
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"hdfsproxy.ldap.hdfs.path.schema.string"
argument_list|,
literal|"documentLocation"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"LdapIpDirFilter initialization successful"
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{   }
comment|/** {@inheritDoc} */
DECL|method|doFilter (ServletRequest request, ServletResponse response, FilterChain chain)
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|String
name|prevThreadName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|HttpServletRequest
name|rqst
init|=
operator|(
name|HttpServletRequest
operator|)
name|request
decl_stmt|;
name|HttpServletResponse
name|rsp
init|=
operator|(
name|HttpServletResponse
operator|)
name|response
decl_stmt|;
name|String
name|contextPath
init|=
name|rqst
operator|.
name|getContextPath
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|contextPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Request from "
argument_list|)
operator|.
name|append
argument_list|(
name|rqst
operator|.
name|getRemoteHost
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|rqst
operator|.
name|getRemoteAddr
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|rqst
operator|.
name|getRemotePort
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The Scheme is "
operator|+
name|rqst
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The Path Info is "
operator|+
name|rqst
operator|.
name|getPathInfo
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The Translated Path Info is "
operator|+
name|rqst
operator|.
name|getPathTranslated
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The Context Path is "
operator|+
name|rqst
operator|.
name|getContextPath
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The Query String is "
operator|+
name|rqst
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The Request URI is "
operator|+
name|rqst
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The Request URL is "
operator|+
name|rqst
operator|.
name|getRequestURL
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n The Servlet Path is "
operator|+
name|rqst
operator|.
name|getServletPath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LdapRoleEntry
name|ldapent
init|=
operator|new
name|LdapRoleEntry
argument_list|()
decl_stmt|;
comment|// check ip address
name|String
name|userIp
init|=
name|rqst
operator|.
name|getRemoteAddr
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|isAuthorized
init|=
name|getLdapRoleEntryFromUserIp
argument_list|(
name|userIp
argument_list|,
name|ldapent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isAuthorized
condition|)
block|{
name|rsp
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
literal|"IP "
operator|+
name|userIp
operator|+
literal|" is not authorized to access"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|NamingException
name|ne
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"NamingException while searching ldap"
operator|+
name|ne
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// since we cannot pass ugi object cross context as they are from
comment|// different
comment|// classloaders in different war file, we have to use String attribute.
name|rqst
operator|.
name|setAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.authorized.userID"
argument_list|,
name|ldapent
operator|.
name|userId
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.authorized.paths"
argument_list|,
name|ldapent
operator|.
name|paths
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"User: "
operator|+
name|ldapent
operator|.
name|userId
operator|+
literal|", Request: "
operator|+
name|rqst
operator|.
name|getPathInfo
argument_list|()
operator|+
literal|" From: "
operator|+
name|rqst
operator|.
name|getRemoteAddr
argument_list|()
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|prevThreadName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * check if client's ip is listed in the Ldap Roles if yes, return true and    * update ldapent. if not, return false    * */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getLdapRoleEntryFromUserIp (String userIp, LdapRoleEntry ldapent)
specifier|private
name|boolean
name|getLdapRoleEntryFromUserIp
parameter_list|(
name|String
name|userIp
parameter_list|,
name|LdapRoleEntry
name|ldapent
parameter_list|)
throws|throws
name|NamingException
block|{
name|String
name|ipMember
init|=
name|hdfsIpSchemaStrPrefix
operator|+
name|userIp
decl_stmt|;
name|Attributes
name|matchAttrs
init|=
operator|new
name|BasicAttributes
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|matchAttrs
operator|.
name|put
argument_list|(
operator|new
name|BasicAttribute
argument_list|(
name|hdfsIpSchemaStr
argument_list|,
name|ipMember
argument_list|)
argument_list|)
expr_stmt|;
name|matchAttrs
operator|.
name|put
argument_list|(
operator|new
name|BasicAttribute
argument_list|(
name|hdfsUidSchemaStr
argument_list|)
argument_list|)
expr_stmt|;
name|matchAttrs
operator|.
name|put
argument_list|(
operator|new
name|BasicAttribute
argument_list|(
name|hdfsPathSchemaStr
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|attrIDs
init|=
block|{
name|hdfsUidSchemaStr
block|,
name|hdfsPathSchemaStr
block|}
decl_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|lctx
operator|.
name|search
argument_list|(
name|baseName
argument_list|,
name|matchAttrs
argument_list|,
name|attrIDs
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|String
name|userId
init|=
literal|null
decl_stmt|;
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|SearchResult
name|sr
init|=
name|results
operator|.
name|next
argument_list|()
decl_stmt|;
name|Attributes
name|attrs
init|=
name|sr
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|NamingEnumeration
name|ne
init|=
name|attrs
operator|.
name|getAll
argument_list|()
init|;
name|ne
operator|.
name|hasMore
argument_list|()
condition|;
control|)
block|{
name|Attribute
name|attr
init|=
operator|(
name|Attribute
operator|)
name|ne
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|hdfsUidSchemaStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
operator|.
name|getID
argument_list|()
argument_list|)
condition|)
block|{
name|userId
operator|=
operator|(
name|String
operator|)
name|attr
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hdfsPathSchemaStr
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
operator|.
name|getID
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|NamingEnumeration
name|e
init|=
name|attr
operator|.
name|getAll
argument_list|()
init|;
name|e
operator|.
name|hasMore
argument_list|()
condition|;
control|)
block|{
name|String
name|pathStr
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|pathStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ldapent
operator|.
name|init
argument_list|(
name|userId
argument_list|,
name|paths
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
name|ldapent
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Ip address "
operator|+
name|userIp
operator|+
literal|" is not authorized to access the proxy server"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

