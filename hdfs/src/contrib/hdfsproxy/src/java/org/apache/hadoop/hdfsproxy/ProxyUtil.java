begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfsproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfsproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HostnameVerifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509TrustManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|HostsFileReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_comment
comment|/**  * Proxy Utility .  */
end_comment

begin_class
DECL|class|ProxyUtil
specifier|public
class|class
name|ProxyUtil
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProxyUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MM_SECONDS_PER_DAY
specifier|private
specifier|static
specifier|final
name|long
name|MM_SECONDS_PER_DAY
init|=
literal|1000
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
decl_stmt|;
DECL|field|CERT_EXPIRATION_WARNING_THRESHOLD
specifier|private
specifier|static
specifier|final
name|int
name|CERT_EXPIRATION_WARNING_THRESHOLD
init|=
literal|30
decl_stmt|;
comment|// 30 days
comment|// warning
DECL|enum|UtilityOption
specifier|private
specifier|static
enum|enum
name|UtilityOption
block|{
DECL|enumConstant|RELOAD
DECL|enumConstant|GET
DECL|enumConstant|CHECKCERTS
name|RELOAD
argument_list|(
literal|"-reloadPermFiles"
argument_list|)
block|,
name|GET
argument_list|(
literal|"-get"
argument_list|)
block|,
name|CHECKCERTS
argument_list|(
literal|"-checkcerts"
argument_list|)
block|;
DECL|field|name
specifier|private
name|String
name|name
init|=
literal|null
decl_stmt|;
DECL|method|UtilityOption (String arg)
specifier|private
name|UtilityOption
parameter_list|(
name|String
name|arg
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|arg
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
comment|/**    * Dummy hostname verifier that is used to bypass hostname checking    */
DECL|class|DummyHostnameVerifier
specifier|private
specifier|static
class|class
name|DummyHostnameVerifier
implements|implements
name|HostnameVerifier
block|{
DECL|method|verify (String hostname, SSLSession session)
specifier|public
name|boolean
name|verify
parameter_list|(
name|String
name|hostname
parameter_list|,
name|SSLSession
name|session
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Dummy trustmanager that is used to bypass server certificate checking    */
DECL|class|DummyTrustManager
specifier|private
specifier|static
class|class
name|DummyTrustManager
implements|implements
name|X509TrustManager
block|{
DECL|method|checkClientTrusted (X509Certificate[] chain, String authType)
specifier|public
name|void
name|checkClientTrusted
parameter_list|(
name|X509Certificate
index|[]
name|chain
parameter_list|,
name|String
name|authType
parameter_list|)
block|{     }
DECL|method|checkServerTrusted (X509Certificate[] chain, String authType)
specifier|public
name|void
name|checkServerTrusted
parameter_list|(
name|X509Certificate
index|[]
name|chain
parameter_list|,
name|String
name|authType
parameter_list|)
block|{     }
DECL|method|getAcceptedIssuers ()
specifier|public
name|X509Certificate
index|[]
name|getAcceptedIssuers
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|openConnection (String hostname, int port, String path)
specifier|private
specifier|static
name|HttpsURLConnection
name|openConnection
parameter_list|(
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
specifier|final
name|URL
name|url
init|=
operator|new
name|URI
argument_list|(
literal|"https"
argument_list|,
literal|null
argument_list|,
name|hostname
argument_list|,
name|port
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|HttpsURLConnection
name|conn
init|=
operator|(
name|HttpsURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
comment|// bypass hostname verification
name|conn
operator|.
name|setHostnameVerifier
argument_list|(
operator|new
name|DummyHostnameVerifier
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
return|return
name|conn
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|setupSslProps (Configuration conf)
specifier|private
specifier|static
name|void
name|setupSslProps
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SSLContext
name|sc
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"SSL"
argument_list|)
decl_stmt|;
name|KeyManager
index|[]
name|kms
init|=
literal|null
decl_stmt|;
name|TrustManager
index|[]
name|tms
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
literal|"ssl.client.keystore.location"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// initialize default key manager with keystore file and pass
name|KeyManagerFactory
name|kmf
init|=
name|KeyManagerFactory
operator|.
name|getInstance
argument_list|(
literal|"SunX509"
argument_list|)
decl_stmt|;
name|KeyStore
name|ks
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"ssl.client.keystore.type"
argument_list|,
literal|"JKS"
argument_list|)
argument_list|)
decl_stmt|;
name|char
index|[]
name|ksPass
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"ssl.client.keystore.password"
argument_list|,
literal|"changeit"
argument_list|)
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"ssl.client.keystore.location"
argument_list|,
literal|"keystore.jks"
argument_list|)
argument_list|)
expr_stmt|;
name|ks
operator|.
name|load
argument_list|(
name|fis
argument_list|,
name|ksPass
argument_list|)
expr_stmt|;
name|kmf
operator|.
name|init
argument_list|(
name|ks
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"ssl.client.keystore.keypassword"
argument_list|,
literal|"changeit"
argument_list|)
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|kms
operator|=
name|kmf
operator|.
name|getKeyManagers
argument_list|()
expr_stmt|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
name|fis
operator|=
literal|null
expr_stmt|;
block|}
comment|// initialize default trust manager with keystore file and pass
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"ssl.client.do.not.authenticate.server"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// by pass trustmanager validation
name|tms
operator|=
operator|new
name|DummyTrustManager
index|[]
block|{
operator|new
name|DummyTrustManager
argument_list|()
block|}
expr_stmt|;
block|}
else|else
block|{
name|TrustManagerFactory
name|tmf
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
literal|"PKIX"
argument_list|)
decl_stmt|;
name|KeyStore
name|ts
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"ssl.client.truststore.type"
argument_list|,
literal|"JKS"
argument_list|)
argument_list|)
decl_stmt|;
name|char
index|[]
name|tsPass
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"ssl.client.truststore.password"
argument_list|,
literal|"changeit"
argument_list|)
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"ssl.client.truststore.location"
argument_list|,
literal|"truststore.jks"
argument_list|)
argument_list|)
expr_stmt|;
name|ts
operator|.
name|load
argument_list|(
name|fis
argument_list|,
name|tsPass
argument_list|)
expr_stmt|;
name|tmf
operator|.
name|init
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|tms
operator|=
name|tmf
operator|.
name|getTrustManagers
argument_list|()
expr_stmt|;
block|}
name|sc
operator|.
name|init
argument_list|(
name|kms
argument_list|,
name|tms
argument_list|,
operator|new
name|java
operator|.
name|security
operator|.
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|HttpsURLConnection
operator|.
name|setDefaultSSLSocketFactory
argument_list|(
name|sc
operator|.
name|getSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not initialize SSLContext"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getSslAddr (Configuration conf)
specifier|static
name|InetSocketAddress
name|getSslAddr
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|addr
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hdfsproxy.https.address"
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HdfsProxy address is not specified"
argument_list|)
throw|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|addr
argument_list|)
return|;
block|}
DECL|method|sendCommand (Configuration conf, String path)
specifier|static
name|boolean
name|sendCommand
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|setupSslProps
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|sslPort
init|=
name|getSslAddr
argument_list|(
name|conf
argument_list|)
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|int
name|err
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|HostsFileReader
name|hostsReader
init|=
operator|new
name|HostsFileReader
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hdfsproxy.hosts"
argument_list|,
literal|"hdfsproxy-hosts"
argument_list|)
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hostsList
init|=
name|hostsReader
operator|.
name|getHosts
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|hostname
range|:
name|hostsList
control|)
block|{
name|HttpsURLConnection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|=
name|openConnection
argument_list|(
name|hostname
argument_list|,
name|sslPort
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|X509Certificate
index|[]
name|clientCerts
init|=
operator|(
name|X509Certificate
index|[]
operator|)
name|connection
operator|.
name|getLocalCertificates
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientCerts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|X509Certificate
name|cert
range|:
name|clientCerts
control|)
name|sb
operator|.
name|append
argument_list|(
literal|"\n Client certificate Subject Name is "
operator|+
name|cert
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n No client certificates were found"
argument_list|)
expr_stmt|;
block|}
name|X509Certificate
index|[]
name|serverCerts
init|=
operator|(
name|X509Certificate
index|[]
operator|)
name|connection
operator|.
name|getServerCertificates
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverCerts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|X509Certificate
name|cert
range|:
name|serverCerts
control|)
name|sb
operator|.
name|append
argument_list|(
literal|"\n Server certificate Subject Name is "
operator|+
name|cert
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n No server certificates were found"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
name|HttpServletResponse
operator|.
name|SC_OK
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"\n\t"
operator|+
name|hostname
operator|+
literal|": "
operator|+
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|" "
operator|+
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
expr_stmt|;
name|err
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"\n\t"
operator|+
name|hostname
operator|+
literal|": "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception happend for host "
operator|+
name|hostname
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|err
operator|++
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|err
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Command failed on the following "
operator|+
name|err
operator|+
literal|" host"
operator|+
operator|(
name|err
operator|==
literal|1
condition|?
literal|":"
else|:
literal|"s:"
operator|)
operator|+
name|b
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|open (Configuration conf, String hostname, int port, String path)
specifier|static
name|FSDataInputStream
name|open
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|setupSslProps
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|connection
init|=
literal|null
decl_stmt|;
name|connection
operator|=
name|openConnection
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
specifier|final
name|InputStream
name|in
init|=
name|connection
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|FSInputStream
argument_list|()
block|{
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|read
argument_list|()
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't seek!"
argument_list|)
throw|;
block|}
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Position unknown!"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|checkServerCertsExpirationDays (Configuration conf, String hostname, int port)
specifier|static
name|void
name|checkServerCertsExpirationDays
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|setupSslProps
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|HttpsURLConnection
name|connection
init|=
literal|null
decl_stmt|;
name|connection
operator|=
name|openConnection
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|X509Certificate
index|[]
name|serverCerts
init|=
operator|(
name|X509Certificate
index|[]
operator|)
name|connection
operator|.
name|getServerCertificates
argument_list|()
decl_stmt|;
name|Date
name|curDate
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|long
name|curTime
init|=
name|curDate
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverCerts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|X509Certificate
name|cert
range|:
name|serverCerts
control|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n Server certificate Subject Name: "
operator|+
name|cert
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|expDate
init|=
name|cert
operator|.
name|getNotAfter
argument_list|()
decl_stmt|;
name|long
name|expTime
init|=
name|expDate
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|int
name|dayOffSet
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|expTime
operator|-
name|curTime
operator|)
operator|/
name|MM_SECONDS_PER_DAY
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" have "
operator|+
name|dayOffSet
operator|+
literal|" days to expire"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dayOffSet
operator|<
name|CERT_EXPIRATION_WARNING_THRESHOLD
condition|)
name|LOG
operator|.
name|warn
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|LOG
operator|.
name|info
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n No Server certs was found"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
operator|||
operator|(
operator|!
name|UtilityOption
operator|.
name|RELOAD
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
operator|&&
operator|!
name|UtilityOption
operator|.
name|GET
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
operator|&&
operator|!
name|UtilityOption
operator|.
name|CHECKCERTS
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
operator|)
operator|||
operator|(
name|UtilityOption
operator|.
name|GET
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|!=
literal|4
operator|)
operator|||
operator|(
name|UtilityOption
operator|.
name|CHECKCERTS
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
operator|&&
name|args
operator|.
name|length
operator|!=
literal|3
operator|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: ProxyUtil ["
operator|+
name|UtilityOption
operator|.
name|RELOAD
operator|.
name|getName
argument_list|()
operator|+
literal|"] | ["
operator|+
name|UtilityOption
operator|.
name|GET
operator|.
name|getName
argument_list|()
operator|+
literal|"<hostname><#port><path> ] | ["
operator|+
name|UtilityOption
operator|.
name|CHECKCERTS
operator|.
name|getName
argument_list|()
operator|+
literal|"<hostname><#port> ]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
literal|"ssl-client.xml"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
literal|"hdfsproxy-default.xml"
argument_list|)
expr_stmt|;
if|if
condition|(
name|UtilityOption
operator|.
name|RELOAD
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|// reload user-certs.xml and user-permissions.xml files
name|sendCommand
argument_list|(
name|conf
argument_list|,
literal|"/reloadPermFiles"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|UtilityOption
operator|.
name|CHECKCERTS
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|checkServerCertsExpirationDays
argument_list|(
name|conf
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|hostname
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|args
index|[
literal|3
index|]
decl_stmt|;
name|InputStream
name|in
init|=
name|open
argument_list|(
name|conf
argument_list|,
name|hostname
argument_list|,
name|port
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|System
operator|.
name|out
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getNamenode (Configuration conf)
specifier|public
specifier|static
name|String
name|getNamenode
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|namenode
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"fs.default.name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|namenode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Proxy source cluster name node address missing"
argument_list|)
throw|;
block|}
return|return
name|namenode
return|;
block|}
DECL|method|getProxyUGIFor (String userID)
specifier|public
specifier|static
name|UserGroupInformation
name|getProxyUGIFor
parameter_list|(
name|String
name|userID
parameter_list|)
block|{
try|try
block|{
return|return
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|userID
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable get current logged in user"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

