begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfsproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfsproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|nio
operator|.
name|SelectChannelConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|security
operator|.
name|SslSocketConnector
import|;
end_import

begin_comment
comment|/**  * Create a Jetty embedded server to answer http/https requests.  */
end_comment

begin_class
DECL|class|ProxyHttpServer
specifier|public
class|class
name|ProxyHttpServer
extends|extends
name|HttpServer
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProxyHttpServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ProxyHttpServer (InetSocketAddress addr, Configuration conf)
specifier|public
name|ProxyHttpServer
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
literal|""
argument_list|,
name|addr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
literal|0
operator|<=
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|createBaseListener (Configuration conf)
specifier|public
name|Connector
name|createBaseListener
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|sAddr
decl_stmt|;
if|if
condition|(
literal|null
operator|==
operator|(
name|sAddr
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"proxy.http.test.listener.addr"
argument_list|)
operator|)
condition|)
block|{
name|SslSocketConnector
name|sslListener
init|=
operator|new
name|SslSocketConnector
argument_list|()
decl_stmt|;
name|sslListener
operator|.
name|setKeystore
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"ssl.server.keystore.location"
argument_list|)
argument_list|)
expr_stmt|;
name|sslListener
operator|.
name|setPassword
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"ssl.server.keystore.password"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|sslListener
operator|.
name|setKeyPassword
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"ssl.server.keystore.keypassword"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|sslListener
operator|.
name|setKeystoreType
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"ssl.server.keystore.type"
argument_list|,
literal|"jks"
argument_list|)
argument_list|)
expr_stmt|;
name|sslListener
operator|.
name|setNeedClientAuth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.trustStore"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"ssl.server.truststore.location"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.trustStorePassword"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"ssl.server.truststore.password"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.trustStoreType"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"ssl.server.truststore.type"
argument_list|,
literal|"jks"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sslListener
return|;
block|}
comment|// unit test
name|InetSocketAddress
name|proxyAddr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|sAddr
argument_list|)
decl_stmt|;
name|SelectChannelConnector
name|testlistener
init|=
operator|new
name|SelectChannelConnector
argument_list|()
decl_stmt|;
name|testlistener
operator|.
name|setUseDirectBuffers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testlistener
operator|.
name|setHost
argument_list|(
name|proxyAddr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|testlistener
operator|.
name|setPort
argument_list|(
name|proxyAddr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|testlistener
return|;
block|}
block|}
end_class

end_unit

