begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfsproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfsproxy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This filter is required for hdfsproxies connecting to HDFS  * with kerberos authentication. Keytab file and principal to  * use for proxy user is retrieved from a configuration file.  * If user attribute in ldap doesn't kerberos realm, the   * default realm is picked up from configuration.   */
end_comment

begin_class
DECL|class|KerberosAuthorizationFilter
specifier|public
class|class
name|KerberosAuthorizationFilter
extends|extends
name|AuthorizationFilter
block|{
DECL|field|defaultRealm
specifier|private
name|String
name|defaultRealm
decl_stmt|;
annotation|@
name|Override
DECL|method|init (FilterConfig filterConfig)
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|filterConfig
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
literal|"hdfsproxy-default.xml"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
literal|"hdfsproxy-site.xml"
argument_list|)
expr_stmt|;
name|initializeUGI
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|initDefaultRealm
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeUGI (Configuration conf)
specifier|private
name|void
name|initializeUGI
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|loginUserFromKeytab
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hdfsproxy.kerberos.principal"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"hdfsproxy.kerberos.keytab"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Logged in user: "
operator|+
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
operator|+
literal|", Current User: "
operator|+
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to initialize credentials"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|initDefaultRealm (Configuration conf)
specifier|private
name|void
name|initDefaultRealm
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|defaultRealm
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"hdfsproxy.kerberos.default.realm"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|/** If the userid does not have realm, add the default realm */
DECL|method|getUserId (ServletRequest request)
specifier|protected
name|String
name|getUserId
parameter_list|(
name|ServletRequest
name|request
parameter_list|)
block|{
name|String
name|userId
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.authorized.userID"
argument_list|)
decl_stmt|;
return|return
name|userId
operator|+
operator|(
name|userId
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
operator|>
literal|0
condition|?
literal|""
else|:
name|defaultRealm
operator|)
return|;
block|}
block|}
end_class

end_unit

