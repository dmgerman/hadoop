begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfsproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfsproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_class
DECL|class|FindFreePort
specifier|public
class|class
name|FindFreePort
block|{
DECL|field|MIN_AVAILABLE_PORT
specifier|private
specifier|static
specifier|final
name|int
name|MIN_AVAILABLE_PORT
init|=
literal|10000
decl_stmt|;
DECL|field|MAX_AVAILABLE_PORT
specifier|private
specifier|static
specifier|final
name|int
name|MAX_AVAILABLE_PORT
init|=
literal|65535
decl_stmt|;
DECL|field|random
specifier|private
specifier|static
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/**    *     * @param num<= 0, find a single free port    * @return free port next to port (>port)    * @throws IOException    */
DECL|method|findFreePort (int port)
specifier|public
specifier|static
name|int
name|findFreePort
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|ServerSocket
name|server
decl_stmt|;
if|if
condition|(
name|port
operator|<
literal|0
condition|)
block|{
name|server
operator|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|freePort
init|=
name|port
operator|+
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|server
operator|=
operator|new
name|ServerSocket
argument_list|(
name|freePort
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|BindException
condition|)
block|{
if|if
condition|(
name|freePort
operator|>=
name|MAX_AVAILABLE_PORT
operator|||
name|freePort
operator|<
name|MIN_AVAILABLE_PORT
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
name|freePort
operator|+=
literal|1
expr_stmt|;
block|}
block|}
block|}
name|int
name|fport
init|=
name|server
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|fport
return|;
block|}
comment|/**   *    * @return   * @throws IOException   */
DECL|method|findFreePortRandom ()
specifier|public
specifier|static
name|int
name|findFreePortRandom
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|findFreePort
argument_list|(
name|MIN_AVAILABLE_PORT
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|MAX_AVAILABLE_PORT
operator|-
name|MIN_AVAILABLE_PORT
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: FindFreePort< -random /<#port>>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|int
name|j
init|=
literal|0
decl_stmt|;
name|String
name|cmd
init|=
name|args
index|[
name|j
operator|++
index|]
decl_stmt|;
if|if
condition|(
literal|"-random"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|findFreePortRandom
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|findFreePort
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

