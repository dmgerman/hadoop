begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfsproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfsproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cactus
operator|.
name|FilterTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cactus
operator|.
name|WebRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cactus
operator|.
name|WebResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|TestLdapIpDirFilter
specifier|public
class|class
name|TestLdapIpDirFilter
extends|extends
name|FilterTestCase
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestLdapIpDirFilter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|DummyFilterChain
specifier|private
class|class
name|DummyFilterChain
implements|implements
name|FilterChain
block|{
DECL|method|doFilter (ServletRequest theRequest, ServletResponse theResponse)
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|theRequest
parameter_list|,
name|ServletResponse
name|theResponse
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|PrintWriter
name|writer
init|=
name|theResponse
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"<p>some content</p>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|init (FilterConfig theConfig)
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|theConfig
parameter_list|)
block|{     }
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{     }
block|}
DECL|method|testIpRestriction ()
specifier|public
name|void
name|testIpRestriction
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
throws|,
name|NamingException
block|{
name|LdapIpDirFilter
name|filter
init|=
operator|new
name|LdapIpDirFilter
argument_list|()
decl_stmt|;
name|String
name|baseName
init|=
literal|"ou=proxyroles,dc=mycompany,dc=com"
decl_stmt|;
name|DummyLdapContext
name|dlc
init|=
operator|new
name|DummyLdapContext
argument_list|()
decl_stmt|;
name|filter
operator|.
name|initialize
argument_list|(
name|baseName
argument_list|,
name|dlc
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRemoteIPAddress
argument_list|(
literal|"127.0.0.2"
argument_list|)
expr_stmt|;
name|request
operator|.
name|removeAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.authorized.userID"
argument_list|)
expr_stmt|;
name|FilterChain
name|mockFilterChain
init|=
operator|new
name|DummyFilterChain
argument_list|()
decl_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|mockFilterChain
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.authorized.userID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|endIpRestriction (WebResponse theResponse)
specifier|public
name|void
name|endIpRestriction
parameter_list|(
name|WebResponse
name|theResponse
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|theResponse
operator|.
name|getStatusCode
argument_list|()
argument_list|,
literal|403
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Text missing 'IP not authorized to access' : : ["
operator|+
name|theResponse
operator|.
name|getText
argument_list|()
operator|+
literal|"]"
argument_list|,
name|theResponse
operator|.
name|getText
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"not authorized to access"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|beginDoFilter (WebRequest theRequest)
specifier|public
name|void
name|beginDoFilter
parameter_list|(
name|WebRequest
name|theRequest
parameter_list|)
block|{
name|theRequest
operator|.
name|setURL
argument_list|(
literal|"proxy-test:0"
argument_list|,
literal|null
argument_list|,
literal|"/streamFile/testdir"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testDoFilter ()
specifier|public
name|void
name|testDoFilter
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
throws|,
name|NamingException
block|{
name|LdapIpDirFilter
name|filter
init|=
operator|new
name|LdapIpDirFilter
argument_list|()
decl_stmt|;
name|String
name|baseName
init|=
literal|"ou=proxyroles,dc=mycompany,dc=com"
decl_stmt|;
name|DummyLdapContext
name|dlc
init|=
operator|new
name|DummyLdapContext
argument_list|()
decl_stmt|;
name|filter
operator|.
name|initialize
argument_list|(
name|baseName
argument_list|,
name|dlc
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRemoteIPAddress
argument_list|(
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|ServletContext
name|context
init|=
name|config
operator|.
name|getServletContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|removeAttribute
argument_list|(
literal|"name.node.address"
argument_list|)
expr_stmt|;
name|context
operator|.
name|removeAttribute
argument_list|(
literal|"name.conf"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getAttribute
argument_list|(
literal|"name.node.address"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getAttribute
argument_list|(
literal|"name.conf"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|context
operator|.
name|getAttribute
argument_list|(
literal|"name.node.address"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|context
operator|.
name|getAttribute
argument_list|(
literal|"name.conf"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|removeAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.authorized.userID"
argument_list|)
expr_stmt|;
name|FilterChain
name|mockFilterChain
init|=
operator|new
name|DummyFilterChain
argument_list|()
decl_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|mockFilterChain
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.authorized.userID"
argument_list|)
argument_list|,
literal|"testuser"
argument_list|)
expr_stmt|;
block|}
DECL|method|endDoFilter (WebResponse theResponse)
specifier|public
name|void
name|endDoFilter
parameter_list|(
name|WebResponse
name|theResponse
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"<p>some content</p>"
argument_list|,
name|theResponse
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

