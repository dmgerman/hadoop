begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfsproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfsproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * A JUnit test for HdfsProxy  */
end_comment

begin_class
DECL|class|TestHdfsProxy
specifier|public
class|class
name|TestHdfsProxy
extends|extends
name|TestCase
block|{
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.hdfs.StateChange"
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|DataNode
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|FSNamesystem
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
block|}
DECL|field|LOCAL_FS
specifier|static
specifier|final
name|URI
name|LOCAL_FS
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"file:///"
argument_list|)
decl_stmt|;
DECL|field|NFILES
specifier|private
specifier|static
specifier|final
name|int
name|NFILES
init|=
literal|10
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|TEST_ROOT_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
comment|/**    * class MyFile contains enough information to recreate the contents of a    * single file.    */
DECL|class|MyFile
specifier|private
specifier|static
class|class
name|MyFile
block|{
DECL|field|gen
specifier|private
specifier|static
name|Random
name|gen
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|MAX_LEVELS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_LEVELS
init|=
literal|3
decl_stmt|;
DECL|field|MAX_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|MAX_SIZE
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
DECL|field|dirNames
specifier|private
specifier|static
name|String
index|[]
name|dirNames
init|=
block|{
literal|"zero"
block|,
literal|"one"
block|,
literal|"two"
block|,
literal|"three"
block|,
literal|"four"
block|,
literal|"five"
block|,
literal|"six"
block|,
literal|"seven"
block|,
literal|"eight"
block|,
literal|"nine"
block|}
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
init|=
literal|0
decl_stmt|;
DECL|field|seed
specifier|private
name|long
name|seed
init|=
literal|0L
decl_stmt|;
DECL|method|MyFile ()
name|MyFile
parameter_list|()
block|{
name|this
argument_list|(
name|gen
operator|.
name|nextInt
argument_list|(
name|MAX_LEVELS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|MyFile (int nLevels)
name|MyFile
parameter_list|(
name|int
name|nLevels
parameter_list|)
block|{
name|String
name|xname
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|nLevels
operator|!=
literal|0
condition|)
block|{
name|int
index|[]
name|levels
init|=
operator|new
name|int
index|[
name|nLevels
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nLevels
condition|;
name|idx
operator|++
control|)
block|{
name|levels
index|[
name|idx
index|]
operator|=
name|gen
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nLevels
condition|;
name|idx
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|dirNames
index|[
name|levels
index|[
name|idx
index|]
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|xname
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|long
name|fidx
init|=
name|gen
operator|.
name|nextLong
argument_list|()
operator|&
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|name
operator|=
name|xname
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|fidx
argument_list|)
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|reset ()
name|void
name|reset
parameter_list|()
block|{
specifier|final
name|int
name|oldsize
init|=
name|size
decl_stmt|;
do|do
block|{
name|size
operator|=
name|gen
operator|.
name|nextInt
argument_list|(
name|MAX_SIZE
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|oldsize
operator|==
name|size
condition|)
do|;
specifier|final
name|long
name|oldseed
init|=
name|seed
decl_stmt|;
do|do
block|{
name|seed
operator|=
name|gen
operator|.
name|nextLong
argument_list|()
operator|&
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
do|while
condition|(
name|oldseed
operator|==
name|seed
condition|)
do|;
block|}
DECL|method|getName ()
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getSize ()
name|int
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|getSeed ()
name|long
name|getSeed
parameter_list|()
block|{
return|return
name|seed
return|;
block|}
block|}
DECL|method|createFiles (URI fsname, String topdir)
specifier|private
specifier|static
name|MyFile
index|[]
name|createFiles
parameter_list|(
name|URI
name|fsname
parameter_list|,
name|String
name|topdir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createFiles
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|fsname
argument_list|,
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
argument_list|,
name|topdir
argument_list|)
return|;
block|}
comment|/**    * create NFILES with random names and directory hierarchies with random (but    * reproducible) data in them.    */
DECL|method|createFiles (FileSystem fs, String topdir)
specifier|private
specifier|static
name|MyFile
index|[]
name|createFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|topdir
argument_list|)
decl_stmt|;
name|MyFile
index|[]
name|files
init|=
operator|new
name|MyFile
index|[
name|NFILES
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NFILES
condition|;
name|i
operator|++
control|)
block|{
name|files
index|[
name|i
index|]
operator|=
name|createFile
argument_list|(
name|root
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
return|return
name|files
return|;
block|}
DECL|method|createFile (Path root, FileSystem fs, int levels)
specifier|private
specifier|static
name|MyFile
name|createFile
parameter_list|(
name|Path
name|root
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|int
name|levels
parameter_list|)
throws|throws
name|IOException
block|{
name|MyFile
name|f
init|=
name|levels
operator|<
literal|0
condition|?
operator|new
name|MyFile
argument_list|()
else|:
operator|new
name|MyFile
argument_list|(
name|levels
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|byte
index|[]
name|toWrite
init|=
operator|new
name|byte
index|[
name|f
operator|.
name|getSize
argument_list|()
index|]
decl_stmt|;
operator|new
name|Random
argument_list|(
name|f
operator|.
name|getSeed
argument_list|()
argument_list|)
operator|.
name|nextBytes
argument_list|(
name|toWrite
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|toWrite
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"created: "
operator|+
name|p
operator|+
literal|", size="
operator|+
name|f
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
DECL|method|createFile (Path root, FileSystem fs)
specifier|private
specifier|static
name|MyFile
name|createFile
parameter_list|(
name|Path
name|root
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createFile
argument_list|(
name|root
argument_list|,
name|fs
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|checkFiles (FileSystem fs, String topdir, MyFile[] files)
specifier|private
specifier|static
name|boolean
name|checkFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|,
name|MyFile
index|[]
name|files
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|checkFiles
argument_list|(
name|fs
argument_list|,
name|topdir
argument_list|,
name|files
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|checkFiles (FileSystem fs, String topdir, MyFile[] files, boolean existingOnly)
specifier|private
specifier|static
name|boolean
name|checkFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|,
name|MyFile
index|[]
name|files
parameter_list|,
name|boolean
name|existingOnly
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|topdir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|files
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|Path
name|fPath
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|files
index|[
name|idx
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|getFileStatus
argument_list|(
name|fPath
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|fPath
argument_list|)
decl_stmt|;
name|byte
index|[]
name|toRead
init|=
operator|new
name|byte
index|[
name|files
index|[
name|idx
index|]
operator|.
name|getSize
argument_list|()
index|]
decl_stmt|;
name|byte
index|[]
name|toCompare
init|=
operator|new
name|byte
index|[
name|files
index|[
name|idx
index|]
operator|.
name|getSize
argument_list|()
index|]
decl_stmt|;
name|Random
name|rb
init|=
operator|new
name|Random
argument_list|(
name|files
index|[
name|idx
index|]
operator|.
name|getSeed
argument_list|()
argument_list|)
decl_stmt|;
name|rb
operator|.
name|nextBytes
argument_list|(
name|toCompare
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cannnot read file."
argument_list|,
name|toRead
operator|.
name|length
argument_list|,
name|in
operator|.
name|read
argument_list|(
name|toRead
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toRead
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|toRead
index|[
name|i
index|]
operator|!=
name|toCompare
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|toRead
operator|=
literal|null
expr_stmt|;
name|toCompare
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
if|if
condition|(
operator|!
name|existingOnly
condition|)
block|{
throw|throw
name|fnfe
throw|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/** delete directory and everything underneath it. */
DECL|method|deldir (FileSystem fs, String topdir)
specifier|private
specifier|static
name|void
name|deldir
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|topdir
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|topdir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** verify hdfsproxy implements the hftp interface */
DECL|method|testHdfsProxyInterface ()
specifier|public
name|void
name|testHdfsProxyInterface
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|HdfsProxy
name|proxy
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|UserGroupInformation
name|CLIENT_UGI
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testUser
init|=
name|CLIENT_UGI
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testGroup
init|=
name|CLIENT_UGI
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|Configuration
name|dfsConf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|dfsConf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser."
operator|+
name|testUser
operator|+
literal|".groups"
argument_list|,
name|testGroup
argument_list|)
expr_stmt|;
name|dfsConf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser."
operator|+
name|testGroup
operator|+
literal|".hosts"
argument_list|,
literal|"localhost,127.0.0.1"
argument_list|)
expr_stmt|;
name|dfsConf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser."
operator|+
name|testUser
operator|+
literal|".hosts"
argument_list|,
literal|"localhost,127.0.0.1"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|dfsConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|FileSystem
name|localfs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|LOCAL_FS
argument_list|,
name|dfsConf
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|proxyConf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|proxyConf
operator|.
name|set
argument_list|(
literal|"hdfsproxy.dfs.namenode.address"
argument_list|,
name|hdfs
operator|.
name|getUri
argument_list|()
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|hdfs
operator|.
name|getUri
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|proxyConf
operator|.
name|set
argument_list|(
literal|"hdfsproxy.https.address"
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|namenode
init|=
name|hdfs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|namenode
operator|.
name|startsWith
argument_list|(
literal|"hdfs://"
argument_list|)
condition|)
block|{
name|MyFile
index|[]
name|files
init|=
name|createFiles
argument_list|(
name|LOCAL_FS
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|namenode
operator|+
literal|"/destdat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and destination directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|hdfs
argument_list|,
literal|"/destdat"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|proxyConf
operator|.
name|set
argument_list|(
literal|"proxy.http.test.listener.addr"
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|proxy
operator|=
operator|new
name|HdfsProxy
argument_list|(
name|proxyConf
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|start
argument_list|()
expr_stmt|;
name|InetSocketAddress
name|proxyAddr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
literal|"localhost:0"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|realProxyAddr
init|=
name|proxyAddr
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|proxy
operator|.
name|getPort
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|proxyUrl
init|=
operator|new
name|Path
argument_list|(
literal|"hftp://"
operator|+
name|realProxyAddr
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|hftp
init|=
name|proxyUrl
operator|.
name|getFileSystem
argument_list|(
name|dfsConf
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|hftp
argument_list|,
operator|new
name|Path
argument_list|(
name|proxyUrl
argument_list|,
literal|"/destdat"
argument_list|)
argument_list|,
name|hdfs
argument_list|,
operator|new
name|Path
argument_list|(
name|namenode
operator|+
literal|"/copied1"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|proxyConf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and copied directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|hdfs
argument_list|,
literal|"/copied1"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|hftp
argument_list|,
operator|new
name|Path
argument_list|(
name|proxyUrl
argument_list|,
literal|"/destdat"
argument_list|)
argument_list|,
name|localfs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/copied2"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|proxyConf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Source and copied directories do not match."
argument_list|,
name|checkFiles
argument_list|(
name|localfs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/copied2"
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/destdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/logs"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|hdfs
argument_list|,
literal|"/copied1"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|localfs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/srcdat"
argument_list|)
expr_stmt|;
name|deldir
argument_list|(
name|localfs
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/copied2"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|proxy
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

