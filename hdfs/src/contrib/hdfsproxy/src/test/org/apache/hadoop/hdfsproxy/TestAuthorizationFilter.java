begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfsproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfsproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cactus
operator|.
name|FilterTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cactus
operator|.
name|WebRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cactus
operator|.
name|WebResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_class
DECL|class|TestAuthorizationFilter
specifier|public
class|class
name|TestAuthorizationFilter
extends|extends
name|FilterTestCase
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAuthorizationFilter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|DummyFilterChain
specifier|private
class|class
name|DummyFilterChain
implements|implements
name|FilterChain
block|{
DECL|method|doFilter (ServletRequest theRequest, ServletResponse theResponse)
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|theRequest
parameter_list|,
name|ServletResponse
name|theResponse
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|PrintWriter
name|writer
init|=
name|theResponse
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"<p>some content</p>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|init (FilterConfig theConfig)
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|theConfig
parameter_list|)
block|{     }
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{     }
block|}
DECL|class|ConfiguredAuthorizationFilter
specifier|private
class|class
name|ConfiguredAuthorizationFilter
extends|extends
name|AuthorizationFilter
block|{
DECL|method|ConfiguredAuthorizationFilter (String nameNode)
specifier|private
name|ConfiguredAuthorizationFilter
parameter_list|(
name|String
name|nameNode
parameter_list|)
block|{
name|this
operator|.
name|namenode
operator|=
name|nameNode
expr_stmt|;
block|}
block|}
DECL|method|beginPathRestriction (WebRequest theRequest)
specifier|public
name|void
name|beginPathRestriction
parameter_list|(
name|WebRequest
name|theRequest
parameter_list|)
block|{
name|theRequest
operator|.
name|setURL
argument_list|(
literal|"proxy-test:0"
argument_list|,
literal|null
argument_list|,
literal|"/streamFile/nontestdir"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testPathRestriction ()
specifier|public
name|void
name|testPathRestriction
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|AuthorizationFilter
name|filter
init|=
operator|new
name|ConfiguredAuthorizationFilter
argument_list|(
literal|"hdfs://apache.org"
argument_list|)
decl_stmt|;
name|request
operator|.
name|setRemoteIPAddress
argument_list|(
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.authorized.userID"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/deny"
argument_list|)
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://test:100/deny"
argument_list|)
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://test/deny"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.authorized.paths"
argument_list|,
name|paths
argument_list|)
expr_stmt|;
name|FilterChain
name|mockFilterChain
init|=
operator|new
name|DummyFilterChain
argument_list|()
decl_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|mockFilterChain
argument_list|)
expr_stmt|;
block|}
DECL|method|endPathRestriction (WebResponse theResponse)
specifier|public
name|void
name|endPathRestriction
parameter_list|(
name|WebResponse
name|theResponse
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|theResponse
operator|.
name|getStatusCode
argument_list|()
argument_list|,
literal|403
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Text missing 'User not authorized to access path' : : ["
operator|+
name|theResponse
operator|.
name|getText
argument_list|()
operator|+
literal|"]"
argument_list|,
name|theResponse
operator|.
name|getText
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"is not authorized to access path"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|beginPathPermit (WebRequest theRequest)
specifier|public
name|void
name|beginPathPermit
parameter_list|(
name|WebRequest
name|theRequest
parameter_list|)
block|{
name|theRequest
operator|.
name|setURL
argument_list|(
literal|"proxy-test:0"
argument_list|,
literal|null
argument_list|,
literal|"/streamFile/data/file"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testPathPermit ()
specifier|public
name|void
name|testPathPermit
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|AuthorizationFilter
name|filter
init|=
operator|new
name|ConfiguredAuthorizationFilter
argument_list|(
literal|"hdfs://apache.org"
argument_list|)
decl_stmt|;
name|request
operator|.
name|setRemoteIPAddress
argument_list|(
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.authorized.userID"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/data"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.authorized.paths"
argument_list|,
name|paths
argument_list|)
expr_stmt|;
name|FilterChain
name|mockFilterChain
init|=
operator|new
name|DummyFilterChain
argument_list|()
decl_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|mockFilterChain
argument_list|)
expr_stmt|;
block|}
DECL|method|endPathPermit (WebResponse theResponse)
specifier|public
name|void
name|endPathPermit
parameter_list|(
name|WebResponse
name|theResponse
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|theResponse
operator|.
name|getStatusCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
DECL|method|beginPathPermitQualified (WebRequest theRequest)
specifier|public
name|void
name|beginPathPermitQualified
parameter_list|(
name|WebRequest
name|theRequest
parameter_list|)
block|{
name|theRequest
operator|.
name|setURL
argument_list|(
literal|"proxy-test:0"
argument_list|,
literal|null
argument_list|,
literal|"/streamFile/data/file"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testPathPermitQualified ()
specifier|public
name|void
name|testPathPermitQualified
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|AuthorizationFilter
name|filter
init|=
operator|new
name|ConfiguredAuthorizationFilter
argument_list|(
literal|"hdfs://apache.org"
argument_list|)
decl_stmt|;
name|request
operator|.
name|setRemoteIPAddress
argument_list|(
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.authorized.userID"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://apache.org/data"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.authorized.paths"
argument_list|,
name|paths
argument_list|)
expr_stmt|;
name|FilterChain
name|mockFilterChain
init|=
operator|new
name|DummyFilterChain
argument_list|()
decl_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|mockFilterChain
argument_list|)
expr_stmt|;
block|}
DECL|method|endPathPermitQualified (WebResponse theResponse)
specifier|public
name|void
name|endPathPermitQualified
parameter_list|(
name|WebResponse
name|theResponse
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|theResponse
operator|.
name|getStatusCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
DECL|method|beginPathQualifiediReject (WebRequest theRequest)
specifier|public
name|void
name|beginPathQualifiediReject
parameter_list|(
name|WebRequest
name|theRequest
parameter_list|)
block|{
name|theRequest
operator|.
name|setURL
argument_list|(
literal|"proxy-test:0"
argument_list|,
literal|null
argument_list|,
literal|"/streamFile/data/file"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testPathQualifiedReject ()
specifier|public
name|void
name|testPathQualifiedReject
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|AuthorizationFilter
name|filter
init|=
operator|new
name|ConfiguredAuthorizationFilter
argument_list|(
literal|"hdfs://apache.org:1111"
argument_list|)
decl_stmt|;
name|request
operator|.
name|setRemoteIPAddress
argument_list|(
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.authorized.userID"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://apache.org:2222/data"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"org.apache.hadoop.hdfsproxy.authorized.paths"
argument_list|,
name|paths
argument_list|)
expr_stmt|;
name|FilterChain
name|mockFilterChain
init|=
operator|new
name|DummyFilterChain
argument_list|()
decl_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|mockFilterChain
argument_list|)
expr_stmt|;
block|}
DECL|method|endPathQualifiedReject (WebResponse theResponse)
specifier|public
name|void
name|endPathQualifiedReject
parameter_list|(
name|WebResponse
name|theResponse
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|theResponse
operator|.
name|getStatusCode
argument_list|()
argument_list|,
literal|403
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

