begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfsproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfsproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|BasicAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|BasicAttributes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|ldap
operator|.
name|Control
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|ldap
operator|.
name|InitialLdapContext
import|;
end_import

begin_class
DECL|class|DummyLdapContext
class|class
name|DummyLdapContext
extends|extends
name|InitialLdapContext
block|{
DECL|class|ResultEnum
class|class
name|ResultEnum
parameter_list|<
name|T
parameter_list|>
implements|implements
name|NamingEnumeration
argument_list|<
name|T
argument_list|>
block|{
DECL|field|rl
specifier|private
name|ArrayList
argument_list|<
name|T
argument_list|>
name|rl
decl_stmt|;
DECL|method|ResultEnum ()
specifier|public
name|ResultEnum
parameter_list|()
block|{
name|rl
operator|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|ResultEnum (ArrayList<T> al)
specifier|public
name|ResultEnum
parameter_list|(
name|ArrayList
argument_list|<
name|T
argument_list|>
name|al
parameter_list|)
block|{
name|rl
operator|=
name|al
expr_stmt|;
block|}
DECL|method|hasMoreElements ()
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
return|return
operator|!
name|rl
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|nextElement ()
specifier|public
name|T
name|nextElement
parameter_list|()
block|{
name|T
name|t
init|=
name|rl
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|rl
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
DECL|method|hasMore ()
specifier|public
name|boolean
name|hasMore
parameter_list|()
throws|throws
name|NamingException
block|{
return|return
operator|!
name|rl
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|next ()
specifier|public
name|T
name|next
parameter_list|()
throws|throws
name|NamingException
block|{
name|T
name|t
init|=
name|rl
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|rl
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|NamingException
block|{     }
block|}
DECL|method|DummyLdapContext ()
specifier|public
name|DummyLdapContext
parameter_list|()
throws|throws
name|NamingException
block|{   }
DECL|method|DummyLdapContext (Hashtable<?, ?> environment, Control[] connCtls)
specifier|public
name|DummyLdapContext
parameter_list|(
name|Hashtable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|environment
parameter_list|,
name|Control
index|[]
name|connCtls
parameter_list|)
throws|throws
name|NamingException
block|{   }
DECL|method|search (String name, Attributes matchingAttributes, String[] attributesToReturn)
specifier|public
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|search
parameter_list|(
name|String
name|name
parameter_list|,
name|Attributes
name|matchingAttributes
parameter_list|,
name|String
index|[]
name|attributesToReturn
parameter_list|)
throws|throws
name|NamingException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Searching Dummy LDAP Server Results:"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"ou=proxyroles,dc=mycompany,dc=com"
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"baseName mismatch"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ResultEnum
argument_list|<
name|SearchResult
argument_list|>
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
literal|"cn=127.0.0.1"
operator|.
name|equals
argument_list|(
operator|(
name|String
operator|)
name|matchingAttributes
operator|.
name|get
argument_list|(
literal|"uniqueMember"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Ip address mismatch"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ResultEnum
argument_list|<
name|SearchResult
argument_list|>
argument_list|()
return|;
block|}
name|BasicAttributes
name|attrs
init|=
operator|new
name|BasicAttributes
argument_list|()
decl_stmt|;
name|BasicAttribute
name|uidAttr
init|=
operator|new
name|BasicAttribute
argument_list|(
literal|"uid"
argument_list|,
literal|"testuser"
argument_list|)
decl_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|uidAttr
argument_list|)
expr_stmt|;
name|BasicAttribute
name|groupAttr
init|=
operator|new
name|BasicAttribute
argument_list|(
literal|"userClass"
argument_list|,
literal|"testgroup"
argument_list|)
decl_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|groupAttr
argument_list|)
expr_stmt|;
name|BasicAttribute
name|locAttr
init|=
operator|new
name|BasicAttribute
argument_list|(
literal|"documentLocation"
argument_list|,
literal|"/testdir"
argument_list|)
decl_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|locAttr
argument_list|)
expr_stmt|;
name|SearchResult
name|sr
init|=
operator|new
name|SearchResult
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|attrs
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|SearchResult
argument_list|>
name|al
init|=
operator|new
name|ArrayList
argument_list|<
name|SearchResult
argument_list|>
argument_list|()
decl_stmt|;
name|al
operator|.
name|add
argument_list|(
name|sr
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|ne
init|=
operator|new
name|ResultEnum
argument_list|<
name|SearchResult
argument_list|>
argument_list|(
name|al
argument_list|)
decl_stmt|;
return|return
name|ne
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|DummyLdapContext
name|dlc
init|=
operator|new
name|DummyLdapContext
argument_list|()
decl_stmt|;
name|String
name|baseName
init|=
literal|"ou=proxyroles,dc=mycompany,dc=com"
decl_stmt|;
name|Attributes
name|matchAttrs
init|=
operator|new
name|BasicAttributes
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|String
index|[]
name|attrIDs
init|=
block|{
literal|"uid"
block|,
literal|"documentLocation"
block|}
decl_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|dlc
operator|.
name|search
argument_list|(
name|baseName
argument_list|,
name|matchAttrs
argument_list|,
name|attrIDs
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|SearchResult
name|sr
init|=
name|results
operator|.
name|next
argument_list|()
decl_stmt|;
name|Attributes
name|attrs
init|=
name|sr
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|NamingEnumeration
name|ne
init|=
name|attrs
operator|.
name|getAll
argument_list|()
init|;
name|ne
operator|.
name|hasMore
argument_list|()
condition|;
control|)
block|{
name|Attribute
name|attr
init|=
operator|(
name|Attribute
operator|)
name|ne
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"uid"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
operator|.
name|getID
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"User ID = "
operator|+
name|attr
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"documentLocation"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
operator|.
name|getID
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Document Location = "
argument_list|)
expr_stmt|;
for|for
control|(
name|NamingEnumeration
name|e
init|=
name|attr
operator|.
name|getAll
argument_list|()
init|;
name|e
operator|.
name|hasMore
argument_list|()
condition|;
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

