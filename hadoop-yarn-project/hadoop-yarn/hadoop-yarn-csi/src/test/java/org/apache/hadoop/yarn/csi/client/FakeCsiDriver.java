begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.csi.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|csi
operator|.
name|client
package|;
end_package

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|netty
operator|.
name|NettyServerBuilder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|epoll
operator|.
name|EpollEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|epoll
operator|.
name|EpollServerDomainSocketChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|csi
operator|.
name|utils
operator|.
name|GrpcHelper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * A fake implementation of CSI driver.  * This is for testing purpose only.  */
end_comment

begin_class
DECL|class|FakeCsiDriver
specifier|public
class|class
name|FakeCsiDriver
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|FakeCsiDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|field|socketAddress
specifier|private
name|String
name|socketAddress
decl_stmt|;
DECL|method|FakeCsiDriver (String socketAddress)
specifier|public
name|FakeCsiDriver
parameter_list|(
name|String
name|socketAddress
parameter_list|)
block|{
name|this
operator|.
name|socketAddress
operator|=
name|socketAddress
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|EpollEventLoopGroup
name|group
init|=
operator|new
name|EpollEventLoopGroup
argument_list|()
decl_stmt|;
name|server
operator|=
name|NettyServerBuilder
operator|.
name|forAddress
argument_list|(
name|GrpcHelper
operator|.
name|getSocketAddress
argument_list|(
name|socketAddress
argument_list|)
argument_list|)
operator|.
name|channelType
argument_list|(
name|EpollServerDomainSocketChannel
operator|.
name|class
argument_list|)
operator|.
name|workerEventLoopGroup
argument_list|(
name|group
argument_list|)
operator|.
name|bossEventLoopGroup
argument_list|(
name|group
argument_list|)
operator|.
name|addService
argument_list|(
operator|new
name|FakeCsiIdentityService
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Server started, listening on "
operator|+
name|socketAddress
argument_list|)
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Server has been shutdown"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

