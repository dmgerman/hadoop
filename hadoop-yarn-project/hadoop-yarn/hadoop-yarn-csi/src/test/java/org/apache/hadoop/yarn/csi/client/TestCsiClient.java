begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.csi.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|csi
operator|.
name|client
package|;
end_package

begin_import
import|import
name|csi
operator|.
name|v0
operator|.
name|Csi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Test class for CSI client.  */
end_comment

begin_class
DECL|class|TestCsiClient
specifier|public
class|class
name|TestCsiClient
block|{
DECL|field|testRoot
specifier|private
specifier|static
name|File
name|testRoot
init|=
literal|null
decl_stmt|;
DECL|field|domainSocket
specifier|private
specifier|static
name|String
name|domainSocket
init|=
literal|null
decl_stmt|;
DECL|field|driver
specifier|private
specifier|static
name|FakeCsiDriver
name|driver
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|testRoot
operator|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
literal|"csi-test"
argument_list|)
expr_stmt|;
name|File
name|socketPath
init|=
operator|new
name|File
argument_list|(
name|testRoot
argument_list|,
literal|"csi.sock"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdirParent
argument_list|(
name|socketPath
argument_list|)
expr_stmt|;
name|domainSocket
operator|=
literal|"unix://"
operator|+
name|socketPath
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|driver
operator|=
operator|new
name|FakeCsiDriver
argument_list|(
name|domainSocket
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|testRoot
operator|!=
literal|null
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|testRoot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|beforeMethod ()
specifier|public
name|void
name|beforeMethod
parameter_list|()
block|{
comment|// Skip tests on non-linux systems
name|String
name|osName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|osName
operator|.
name|contains
argument_list|(
literal|"nix"
argument_list|)
operator|||
name|osName
operator|.
name|contains
argument_list|(
literal|"nux"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIdentityService ()
specifier|public
name|void
name|testIdentityService
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|driver
operator|.
name|start
argument_list|()
expr_stmt|;
name|CsiClient
name|client
init|=
operator|new
name|CsiClientImpl
argument_list|(
name|domainSocket
argument_list|)
decl_stmt|;
name|Csi
operator|.
name|GetPluginInfoResponse
name|response
init|=
name|client
operator|.
name|getPluginInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"fake-csi-identity-service"
argument_list|,
name|response
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|driver
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

