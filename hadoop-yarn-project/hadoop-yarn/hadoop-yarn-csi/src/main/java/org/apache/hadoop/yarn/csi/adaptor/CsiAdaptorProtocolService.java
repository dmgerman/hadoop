begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.csi.adaptor
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|csi
operator|.
name|adaptor
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|csi
operator|.
name|v0
operator|.
name|Csi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|CsiAdaptorProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetPluginInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetPluginInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodePublishVolumeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodePublishVolumeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeUnpublishVolumeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeUnpublishVolumeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ValidateVolumeCapabilitiesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ValidateVolumeCapabilitiesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|csi
operator|.
name|client
operator|.
name|CsiClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|csi
operator|.
name|client
operator|.
name|CsiClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|csi
operator|.
name|translator
operator|.
name|ProtoTranslatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ApplicationInitializationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ApplicationTerminationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|AuxiliaryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|csi
operator|.
name|CsiConfigUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * This is a Hadoop RPC server, we uses the Hadoop RPC framework here  * because we need to stick to the security model current Hadoop supports.  */
end_comment

begin_class
DECL|class|CsiAdaptorProtocolService
specifier|public
class|class
name|CsiAdaptorProtocolService
extends|extends
name|AuxiliaryService
implements|implements
name|CsiAdaptorProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CsiAdaptorProtocolService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|field|adaptorServiceAddress
specifier|private
name|InetSocketAddress
name|adaptorServiceAddress
decl_stmt|;
DECL|field|csiClient
specifier|private
name|CsiClient
name|csiClient
decl_stmt|;
DECL|field|csiDriverName
specifier|private
name|String
name|csiDriverName
decl_stmt|;
DECL|method|CsiAdaptorProtocolService ()
specifier|public
name|CsiAdaptorProtocolService
parameter_list|()
block|{
name|super
argument_list|(
name|CsiAdaptorProtocolService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO read this from configuration
name|this
operator|.
name|csiDriverName
operator|=
literal|"ch.ctrox.csi.s3-driver"
expr_stmt|;
block|}
DECL|method|CsiAdaptorProtocolService (String driverName, String domainSocketPath)
specifier|public
name|CsiAdaptorProtocolService
parameter_list|(
name|String
name|driverName
parameter_list|,
name|String
name|domainSocketPath
parameter_list|)
block|{
name|super
argument_list|(
name|CsiAdaptorProtocolService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|csiClient
operator|=
operator|new
name|CsiClientImpl
argument_list|(
name|domainSocketPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|csiDriverName
operator|=
name|driverName
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setCsiClient (CsiClient client)
specifier|public
name|void
name|setCsiClient
parameter_list|(
name|CsiClient
name|client
parameter_list|)
block|{
name|this
operator|.
name|csiClient
operator|=
name|client
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|driverEndpoint
init|=
name|CsiConfigUtils
operator|.
name|getCsiDriverEndpoint
argument_list|(
name|csiDriverName
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|csiClient
operator|=
operator|new
name|CsiClientImpl
argument_list|(
name|driverEndpoint
argument_list|)
expr_stmt|;
name|adaptorServiceAddress
operator|=
name|CsiConfigUtils
operator|.
name|getCsiAdaptorAddressForDriver
argument_list|(
name|csiDriverName
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|server
operator|=
name|rpc
operator|.
name|getServer
argument_list|(
name|CsiAdaptorProtocol
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|adaptorServiceAddress
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} started, listening on address: {}"
argument_list|,
name|CsiAdaptorProtocolService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|adaptorServiceAddress
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|server
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPluginInfo ( GetPluginInfoRequest request)
specifier|public
name|GetPluginInfoResponse
name|getPluginInfo
parameter_list|(
name|GetPluginInfoRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Csi
operator|.
name|GetPluginInfoResponse
name|response
init|=
name|csiClient
operator|.
name|getPluginInfo
argument_list|()
decl_stmt|;
return|return
name|ProtoTranslatorFactory
operator|.
name|getTranslator
argument_list|(
name|GetPluginInfoResponse
operator|.
name|class
argument_list|,
name|Csi
operator|.
name|GetPluginInfoResponse
operator|.
name|class
argument_list|)
operator|.
name|convertFrom
argument_list|(
name|response
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|validateVolumeCapacity ( ValidateVolumeCapabilitiesRequest request)
specifier|public
name|ValidateVolumeCapabilitiesResponse
name|validateVolumeCapacity
parameter_list|(
name|ValidateVolumeCapabilitiesRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Csi
operator|.
name|ValidateVolumeCapabilitiesRequest
name|req
init|=
name|ProtoTranslatorFactory
operator|.
name|getTranslator
argument_list|(
name|ValidateVolumeCapabilitiesRequest
operator|.
name|class
argument_list|,
name|Csi
operator|.
name|ValidateVolumeCapabilitiesRequest
operator|.
name|class
argument_list|)
operator|.
name|convertTo
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Csi
operator|.
name|ValidateVolumeCapabilitiesResponse
name|response
init|=
name|csiClient
operator|.
name|validateVolumeCapabilities
argument_list|(
name|req
argument_list|)
decl_stmt|;
return|return
name|ProtoTranslatorFactory
operator|.
name|getTranslator
argument_list|(
name|ValidateVolumeCapabilitiesResponse
operator|.
name|class
argument_list|,
name|Csi
operator|.
name|ValidateVolumeCapabilitiesResponse
operator|.
name|class
argument_list|)
operator|.
name|convertFrom
argument_list|(
name|response
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nodePublishVolume ( NodePublishVolumeRequest request)
specifier|public
name|NodePublishVolumeResponse
name|nodePublishVolume
parameter_list|(
name|NodePublishVolumeRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received nodePublishVolume call, request: {}"
argument_list|,
name|request
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Csi
operator|.
name|NodePublishVolumeRequest
name|req
init|=
name|ProtoTranslatorFactory
operator|.
name|getTranslator
argument_list|(
name|NodePublishVolumeRequest
operator|.
name|class
argument_list|,
name|Csi
operator|.
name|NodePublishVolumeRequest
operator|.
name|class
argument_list|)
operator|.
name|convertTo
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Translate to CSI proto message: {}"
argument_list|,
name|req
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|csiClient
operator|.
name|nodePublishVolume
argument_list|(
name|req
argument_list|)
expr_stmt|;
return|return
name|NodePublishVolumeResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nodeUnpublishVolume ( NodeUnpublishVolumeRequest request)
specifier|public
name|NodeUnpublishVolumeResponse
name|nodeUnpublishVolume
parameter_list|(
name|NodeUnpublishVolumeRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received nodeUnpublishVolume call, request: {}"
argument_list|,
name|request
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Csi
operator|.
name|NodeUnpublishVolumeRequest
name|req
init|=
name|ProtoTranslatorFactory
operator|.
name|getTranslator
argument_list|(
name|NodeUnpublishVolumeRequest
operator|.
name|class
argument_list|,
name|Csi
operator|.
name|NodeUnpublishVolumeRequest
operator|.
name|class
argument_list|)
operator|.
name|convertTo
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Translate to CSI proto message: {}"
argument_list|,
name|req
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|csiClient
operator|.
name|nodeUnpublishVolume
argument_list|(
name|req
argument_list|)
expr_stmt|;
return|return
name|NodeUnpublishVolumeResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|initializeApplication ( ApplicationInitializationContext initAppContext)
specifier|public
name|void
name|initializeApplication
parameter_list|(
name|ApplicationInitializationContext
name|initAppContext
parameter_list|)
block|{
comment|// do nothing
block|}
annotation|@
name|Override
DECL|method|stopApplication ( ApplicationTerminationContext stopAppContext)
specifier|public
name|void
name|stopApplication
parameter_list|(
name|ApplicationTerminationContext
name|stopAppContext
parameter_list|)
block|{
comment|// do nothing
block|}
annotation|@
name|Override
DECL|method|getMetaData ()
specifier|public
name|ByteBuffer
name|getMetaData
parameter_list|()
block|{
return|return
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
end_class

end_unit

