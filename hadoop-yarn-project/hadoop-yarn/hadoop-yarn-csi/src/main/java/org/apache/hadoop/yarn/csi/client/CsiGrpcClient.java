begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.csi.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|csi
operator|.
name|client
package|;
end_package

begin_import
import|import
name|csi
operator|.
name|v0
operator|.
name|ControllerGrpc
import|;
end_import

begin_import
import|import
name|csi
operator|.
name|v0
operator|.
name|IdentityGrpc
import|;
end_import

begin_import
import|import
name|csi
operator|.
name|v0
operator|.
name|NodeGrpc
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|ManagedChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|netty
operator|.
name|NettyChannelBuilder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|epoll
operator|.
name|EpollDomainSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|epoll
operator|.
name|EpollEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|unix
operator|.
name|DomainSocketAddress
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DefaultThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * A CSI gRPC client, it connects a CSI driver via a given unix domain socket.  */
end_comment

begin_class
DECL|class|CsiGrpcClient
specifier|public
specifier|final
class|class
name|CsiGrpcClient
implements|implements
name|AutoCloseable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CsiGrpcClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|channel
specifier|private
specifier|final
name|ManagedChannel
name|channel
decl_stmt|;
DECL|method|CsiGrpcClient (ManagedChannel channel)
specifier|private
name|CsiGrpcClient
parameter_list|(
name|ManagedChannel
name|channel
parameter_list|)
block|{
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
block|}
DECL|method|newBuilder ()
specifier|public
specifier|static
name|GrpcClientBuilder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|GrpcClientBuilder
argument_list|()
return|;
block|}
comment|/**    * The Grpc Client builder.    */
DECL|class|GrpcClientBuilder
specifier|public
specifier|static
class|class
name|GrpcClientBuilder
block|{
DECL|field|socket
specifier|private
name|SocketAddress
name|socket
decl_stmt|;
DECL|method|setDomainSocketAddress (SocketAddress address)
specifier|public
name|GrpcClientBuilder
name|setDomainSocketAddress
parameter_list|(
name|SocketAddress
name|address
parameter_list|)
block|{
name|this
operator|.
name|socket
operator|=
name|address
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getChannel (SocketAddress socketAddress)
specifier|private
name|ManagedChannel
name|getChannel
parameter_list|(
name|SocketAddress
name|socketAddress
parameter_list|)
throws|throws
name|IOException
block|{
name|DefaultThreadFactory
name|tf
init|=
operator|new
name|DefaultThreadFactory
argument_list|(
literal|"yarn-csi-client-"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|EpollEventLoopGroup
name|loopGroup
init|=
operator|new
name|EpollEventLoopGroup
argument_list|(
literal|0
argument_list|,
name|tf
argument_list|)
decl_stmt|;
if|if
condition|(
name|socketAddress
operator|instanceof
name|DomainSocketAddress
condition|)
block|{
name|ManagedChannel
name|channel
init|=
name|NettyChannelBuilder
operator|.
name|forAddress
argument_list|(
name|socketAddress
argument_list|)
operator|.
name|channelType
argument_list|(
name|EpollDomainSocketChannel
operator|.
name|class
argument_list|)
operator|.
name|eventLoopGroup
argument_list|(
name|loopGroup
argument_list|)
operator|.
name|usePlaintext
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|channel
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Currently only unix domain socket is supported"
argument_list|)
throw|;
block|}
block|}
DECL|method|build ()
specifier|public
name|CsiGrpcClient
name|build
parameter_list|()
throws|throws
name|IOException
block|{
name|ManagedChannel
name|socketChannel
init|=
name|getChannel
argument_list|(
name|socket
argument_list|)
decl_stmt|;
return|return
operator|new
name|CsiGrpcClient
argument_list|(
name|socketChannel
argument_list|)
return|;
block|}
block|}
comment|/**    * Shutdown the communication channel gracefully,    * wait for 5 seconds before it is enforced.    * @throws InterruptedException    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|channel
operator|.
name|shutdown
argument_list|()
operator|.
name|awaitTermination
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to gracefully shutdown"
operator|+
literal|" gRPC communication channel in 5 seconds"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a blocking stub for CSI identity plugin on the given channel.    * @return the blocking stub    */
DECL|method|createIdentityBlockingStub ()
specifier|public
name|IdentityGrpc
operator|.
name|IdentityBlockingStub
name|createIdentityBlockingStub
parameter_list|()
block|{
return|return
name|IdentityGrpc
operator|.
name|newBlockingStub
argument_list|(
name|channel
argument_list|)
return|;
block|}
comment|/**    * Creates a blocking stub for CSI controller plugin on the given channel.    * @return the blocking stub    */
DECL|method|createControllerBlockingStub ()
specifier|public
name|ControllerGrpc
operator|.
name|ControllerBlockingStub
name|createControllerBlockingStub
parameter_list|()
block|{
return|return
name|ControllerGrpc
operator|.
name|newBlockingStub
argument_list|(
name|channel
argument_list|)
return|;
block|}
comment|/**    * Creates a blocking stub for CSI node plugin on the given channel.    * @return the blocking stub    */
DECL|method|createNodeBlockingStub ()
specifier|public
name|NodeGrpc
operator|.
name|NodeBlockingStub
name|createNodeBlockingStub
parameter_list|()
block|{
return|return
name|NodeGrpc
operator|.
name|newBlockingStub
argument_list|(
name|channel
argument_list|)
return|;
block|}
block|}
end_class

end_unit

