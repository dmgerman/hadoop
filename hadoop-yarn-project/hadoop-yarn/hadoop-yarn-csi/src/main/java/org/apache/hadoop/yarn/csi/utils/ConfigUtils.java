begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.csi.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|csi
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_comment
comment|/**  * Utility class to load configurations.  */
end_comment

begin_class
DECL|class|ConfigUtils
specifier|public
specifier|final
class|class
name|ConfigUtils
block|{
DECL|method|ConfigUtils ()
specifier|private
name|ConfigUtils
parameter_list|()
block|{
comment|// Hide constructor for utility class.
block|}
comment|/**    * Resolve the CSI adaptor address for a CSI driver from configuration.    * Expected configuration property name is    * yarn.nodemanager.csi-driver-adaptor.${driverName}.address.    * @param driverName    * @param conf    * @return adaptor service address    * @throws YarnException    */
DECL|method|getCsiAdaptorAddressForDriver ( String driverName, Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getCsiAdaptorAddressForDriver
parameter_list|(
name|String
name|driverName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|YarnException
block|{
name|String
name|configName
init|=
name|YarnConfiguration
operator|.
name|NM_CSI_ADAPTOR_PREFIX
operator|+
name|driverName
operator|+
literal|".address"
decl_stmt|;
name|String
name|errorMessage
init|=
literal|"Failed to load CSI adaptor address for driver "
operator|+
name|driverName
operator|+
literal|", configuration property "
operator|+
name|configName
operator|+
literal|" is not defined or invalid."
decl_stmt|;
try|try
block|{
name|InetSocketAddress
name|address
init|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|configName
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
return|return
name|address
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

