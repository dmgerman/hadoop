begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.csi.adaptor
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|csi
operator|.
name|adaptor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|CsiAdaptorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Desired csi-adaptor implementation is configurable, default to  * CsiAdaptorProtocolService. If user wants to have a different implementation,  * just to configure a different class for the csi-driver.  */
end_comment

begin_class
DECL|class|CsiAdaptorFactory
specifier|public
specifier|final
class|class
name|CsiAdaptorFactory
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CsiAdaptorFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|CsiAdaptorFactory ()
specifier|private
name|CsiAdaptorFactory
parameter_list|()
block|{
comment|// hide constructor for this factory class.
block|}
comment|/**    * Load csi-driver-adaptor from configuration. If the configuration is not    * specified, the default implementation    * for the adaptor is {@link DefaultCsiAdaptorImpl}. If the configured class    * is not a valid variation of {@link CsiAdaptorPlugin} or the class cannot    * be found, this function will throw a RuntimeException.    * @param driverName    * @param conf    * @return CsiAdaptorPlugin    * @throws YarnException if unable to create the adaptor class.    * @throws RuntimeException if given class is not found or not    *   an instance of {@link CsiAdaptorPlugin}    */
DECL|method|getAdaptor (String driverName, Configuration conf)
specifier|public
specifier|static
name|CsiAdaptorPlugin
name|getAdaptor
parameter_list|(
name|String
name|driverName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// load configuration
name|String
name|configName
init|=
name|YarnConfiguration
operator|.
name|NM_CSI_ADAPTOR_PREFIX
operator|+
name|driverName
operator|+
name|YarnConfiguration
operator|.
name|NM_CSI_ADAPTOR_CLASS
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|CsiAdaptorPlugin
argument_list|>
name|impl
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|configName
argument_list|,
name|DefaultCsiAdaptorImpl
operator|.
name|class
argument_list|,
name|CsiAdaptorPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|impl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Unable to init csi-adaptor from the"
operator|+
literal|" class specified via "
operator|+
name|configName
argument_list|)
throw|;
block|}
comment|// init the adaptor
name|CsiAdaptorPlugin
name|instance
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|impl
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"csi-adaptor initiated, implementation: "
operator|+
name|impl
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|instance
return|;
block|}
block|}
end_class

end_unit

