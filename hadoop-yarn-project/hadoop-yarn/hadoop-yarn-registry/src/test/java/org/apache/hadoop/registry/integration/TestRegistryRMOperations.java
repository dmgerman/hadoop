begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.integration
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|integration
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|api
operator|.
name|BackgroundCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIsNotEmptyDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|AbstractRegistryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|BindFlags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|zk
operator|.
name|ZKPathDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|CuratorEventCatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|yarn
operator|.
name|PersistencePolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|RegistryPathStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|yarn
operator|.
name|YarnRegistryAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|services
operator|.
name|DeleteCompletionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|services
operator|.
name|RegistryAdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryTypeUtils
operator|.
name|inetAddrEndpoint
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryTypeUtils
operator|.
name|restEndpoint
import|;
end_import

begin_class
DECL|class|TestRegistryRMOperations
specifier|public
class|class
name|TestRegistryRMOperations
extends|extends
name|AbstractRegistryTest
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRegistryRMOperations
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * trigger a purge operation    * @param path path    * @param id yarn ID    * @param policyMatch policy to match ID on    * @param purgePolicy policy when there are children under a match    * @return the number purged    * @throws IOException    */
DECL|method|purge (String path, String id, String policyMatch, RegistryAdminService.PurgePolicy purgePolicy)
specifier|public
name|int
name|purge
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|policyMatch
parameter_list|,
name|RegistryAdminService
operator|.
name|PurgePolicy
name|purgePolicy
parameter_list|)
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
return|return
name|purge
argument_list|(
name|path
argument_list|,
name|id
argument_list|,
name|policyMatch
argument_list|,
name|purgePolicy
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    *    * trigger a purge operation    * @param path pathn    * @param id yarn ID    * @param policyMatch policy to match ID on    * @param purgePolicy policy when there are children under a match    * @param callback optional callback    * @return the number purged    * @throws IOException    */
DECL|method|purge (String path, String id, String policyMatch, RegistryAdminService.PurgePolicy purgePolicy, BackgroundCallback callback)
specifier|public
name|int
name|purge
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|policyMatch
parameter_list|,
name|RegistryAdminService
operator|.
name|PurgePolicy
name|purgePolicy
parameter_list|,
name|BackgroundCallback
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|Future
argument_list|<
name|Integer
argument_list|>
name|future
init|=
name|registry
operator|.
name|purgeRecordsAsync
argument_list|(
name|path
argument_list|,
name|id
argument_list|,
name|policyMatch
argument_list|,
name|purgePolicy
argument_list|,
name|callback
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|future
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testPurgeEntryCuratorCallback ()
specifier|public
name|void
name|testPurgeEntryCuratorCallback
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|path
init|=
literal|"/users/example/hbase/hbase1/"
decl_stmt|;
name|ServiceRecord
name|written
init|=
name|buildExampleServiceEntry
argument_list|(
name|PersistencePolicies
operator|.
name|APPLICATION_ATTEMPT
argument_list|)
decl_stmt|;
name|written
operator|.
name|set
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_ID
argument_list|,
literal|"testAsyncPurgeEntry_attempt_001"
argument_list|)
expr_stmt|;
name|operations
operator|.
name|mknode
argument_list|(
name|RegistryPathUtils
operator|.
name|parentOf
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|operations
operator|.
name|bind
argument_list|(
name|path
argument_list|,
name|written
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ZKPathDumper
name|dump
init|=
name|registry
operator|.
name|dumpPath
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|CuratorEventCatcher
name|events
init|=
operator|new
name|CuratorEventCatcher
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initial state {}"
argument_list|,
name|dump
argument_list|)
expr_stmt|;
comment|// container query
name|String
name|id
init|=
name|written
operator|.
name|get
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_ID
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|int
name|opcount
init|=
name|purge
argument_list|(
literal|"/"
argument_list|,
name|id
argument_list|,
name|PersistencePolicies
operator|.
name|CONTAINER
argument_list|,
name|RegistryAdminService
operator|.
name|PurgePolicy
operator|.
name|PurgeAll
argument_list|,
name|events
argument_list|)
decl_stmt|;
name|assertPathExists
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|opcount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Event counter"
argument_list|,
literal|0
argument_list|,
name|events
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// now the application attempt
name|opcount
operator|=
name|purge
argument_list|(
literal|"/"
argument_list|,
name|id
argument_list|,
name|PersistencePolicies
operator|.
name|APPLICATION_ATTEMPT
argument_list|,
name|RegistryAdminService
operator|.
name|PurgePolicy
operator|.
name|PurgeAll
argument_list|,
name|events
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Final state {}"
argument_list|,
name|dump
argument_list|)
expr_stmt|;
name|assertPathNotFound
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong no of delete operations in "
operator|+
name|dump
argument_list|,
literal|1
argument_list|,
name|opcount
argument_list|)
expr_stmt|;
comment|// and validate the callback event
name|assertEquals
argument_list|(
literal|"Event counter"
argument_list|,
literal|1
argument_list|,
name|events
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncPurgeEntry ()
specifier|public
name|void
name|testAsyncPurgeEntry
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|path
init|=
literal|"/users/example/hbase/hbase1/"
decl_stmt|;
name|ServiceRecord
name|written
init|=
name|buildExampleServiceEntry
argument_list|(
name|PersistencePolicies
operator|.
name|APPLICATION_ATTEMPT
argument_list|)
decl_stmt|;
name|written
operator|.
name|set
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_ID
argument_list|,
literal|"testAsyncPurgeEntry_attempt_001"
argument_list|)
expr_stmt|;
name|operations
operator|.
name|mknode
argument_list|(
name|RegistryPathUtils
operator|.
name|parentOf
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|operations
operator|.
name|bind
argument_list|(
name|path
argument_list|,
name|written
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ZKPathDumper
name|dump
init|=
name|registry
operator|.
name|dumpPath
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initial state {}"
argument_list|,
name|dump
argument_list|)
expr_stmt|;
name|DeleteCompletionCallback
name|deletions
init|=
operator|new
name|DeleteCompletionCallback
argument_list|()
decl_stmt|;
name|int
name|opcount
init|=
name|purge
argument_list|(
literal|"/"
argument_list|,
name|written
operator|.
name|get
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_ID
argument_list|,
literal|""
argument_list|)
argument_list|,
name|PersistencePolicies
operator|.
name|CONTAINER
argument_list|,
name|RegistryAdminService
operator|.
name|PurgePolicy
operator|.
name|PurgeAll
argument_list|,
name|deletions
argument_list|)
decl_stmt|;
name|assertPathExists
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|dump
operator|=
name|registry
operator|.
name|dumpPath
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong no of delete operations in "
operator|+
name|dump
argument_list|,
literal|0
argument_list|,
name|deletions
operator|.
name|getEventCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong no of delete operations in "
operator|+
name|dump
argument_list|,
literal|0
argument_list|,
name|opcount
argument_list|)
expr_stmt|;
comment|// now app attempt
name|deletions
operator|=
operator|new
name|DeleteCompletionCallback
argument_list|()
expr_stmt|;
name|opcount
operator|=
name|purge
argument_list|(
literal|"/"
argument_list|,
name|written
operator|.
name|get
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_ID
argument_list|,
literal|""
argument_list|)
argument_list|,
name|PersistencePolicies
operator|.
name|APPLICATION_ATTEMPT
argument_list|,
name|RegistryAdminService
operator|.
name|PurgePolicy
operator|.
name|PurgeAll
argument_list|,
name|deletions
argument_list|)
expr_stmt|;
name|dump
operator|=
name|registry
operator|.
name|dumpPath
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Final state {}"
argument_list|,
name|dump
argument_list|)
expr_stmt|;
name|assertPathNotFound
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong no of delete operations in "
operator|+
name|dump
argument_list|,
literal|1
argument_list|,
name|deletions
operator|.
name|getEventCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong no of delete operations in "
operator|+
name|dump
argument_list|,
literal|1
argument_list|,
name|opcount
argument_list|)
expr_stmt|;
comment|// and validate the callback event
block|}
annotation|@
name|Test
DECL|method|testPutGetContainerPersistenceServiceEntry ()
specifier|public
name|void
name|testPutGetContainerPersistenceServiceEntry
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|path
init|=
name|ENTRY_PATH
decl_stmt|;
name|ServiceRecord
name|written
init|=
name|buildExampleServiceEntry
argument_list|(
name|PersistencePolicies
operator|.
name|CONTAINER
argument_list|)
decl_stmt|;
name|operations
operator|.
name|mknode
argument_list|(
name|RegistryPathUtils
operator|.
name|parentOf
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|operations
operator|.
name|bind
argument_list|(
name|path
argument_list|,
name|written
argument_list|,
name|BindFlags
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|ServiceRecord
name|resolved
init|=
name|operations
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|validateEntry
argument_list|(
name|resolved
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|written
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a complex example app    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testCreateComplexApplication ()
specifier|public
name|void
name|testCreateComplexApplication
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|appId
init|=
literal|"application_1408631738011_0001"
decl_stmt|;
name|String
name|cid
init|=
literal|"container_1408631738011_0001_01_"
decl_stmt|;
name|String
name|cid1
init|=
name|cid
operator|+
literal|"000001"
decl_stmt|;
name|String
name|cid2
init|=
name|cid
operator|+
literal|"000002"
decl_stmt|;
name|String
name|appPath
init|=
name|USERPATH
operator|+
literal|"tomcat"
decl_stmt|;
name|ServiceRecord
name|webapp
init|=
name|createRecord
argument_list|(
name|appId
argument_list|,
name|PersistencePolicies
operator|.
name|APPLICATION
argument_list|,
literal|"tomcat-based web application"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|webapp
operator|.
name|addExternalEndpoint
argument_list|(
name|restEndpoint
argument_list|(
literal|"www"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http"
argument_list|,
literal|"//loadbalancer/"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ServiceRecord
name|comp1
init|=
name|createRecord
argument_list|(
name|cid1
argument_list|,
name|PersistencePolicies
operator|.
name|CONTAINER
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|comp1
operator|.
name|addExternalEndpoint
argument_list|(
name|restEndpoint
argument_list|(
literal|"www"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http"
argument_list|,
literal|"//rack4server3:43572"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|comp1
operator|.
name|addInternalEndpoint
argument_list|(
name|inetAddrEndpoint
argument_list|(
literal|"jmx"
argument_list|,
literal|"JMX"
argument_list|,
literal|"rack4server3"
argument_list|,
literal|43573
argument_list|)
argument_list|)
expr_stmt|;
comment|// Component 2 has a container lifespan
name|ServiceRecord
name|comp2
init|=
name|createRecord
argument_list|(
name|cid2
argument_list|,
name|PersistencePolicies
operator|.
name|CONTAINER
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|comp2
operator|.
name|addExternalEndpoint
argument_list|(
name|restEndpoint
argument_list|(
literal|"www"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http"
argument_list|,
literal|"//rack1server28:35881"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|comp2
operator|.
name|addInternalEndpoint
argument_list|(
name|inetAddrEndpoint
argument_list|(
literal|"jmx"
argument_list|,
literal|"JMX"
argument_list|,
literal|"rack1server28"
argument_list|,
literal|35882
argument_list|)
argument_list|)
expr_stmt|;
name|operations
operator|.
name|mknode
argument_list|(
name|USERPATH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|operations
operator|.
name|bind
argument_list|(
name|appPath
argument_list|,
name|webapp
argument_list|,
name|BindFlags
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|String
name|componentsPath
init|=
name|appPath
operator|+
name|RegistryConstants
operator|.
name|SUBPATH_COMPONENTS
decl_stmt|;
name|operations
operator|.
name|mknode
argument_list|(
name|componentsPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|dns1
init|=
name|RegistryPathUtils
operator|.
name|encodeYarnID
argument_list|(
name|cid1
argument_list|)
decl_stmt|;
name|String
name|dns1path
init|=
name|componentsPath
operator|+
name|dns1
decl_stmt|;
name|operations
operator|.
name|bind
argument_list|(
name|dns1path
argument_list|,
name|comp1
argument_list|,
name|BindFlags
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|String
name|dns2
init|=
name|RegistryPathUtils
operator|.
name|encodeYarnID
argument_list|(
name|cid2
argument_list|)
decl_stmt|;
name|String
name|dns2path
init|=
name|componentsPath
operator|+
name|dns2
decl_stmt|;
name|operations
operator|.
name|bind
argument_list|(
name|dns2path
argument_list|,
name|comp2
argument_list|,
name|BindFlags
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|ZKPathDumper
name|pathDumper
init|=
name|registry
operator|.
name|dumpPath
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|pathDumper
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|logRecord
argument_list|(
literal|"tomcat"
argument_list|,
name|webapp
argument_list|)
expr_stmt|;
name|logRecord
argument_list|(
name|dns1
argument_list|,
name|comp1
argument_list|)
expr_stmt|;
name|logRecord
argument_list|(
name|dns2
argument_list|,
name|comp2
argument_list|)
expr_stmt|;
name|ServiceRecord
name|dns1resolved
init|=
name|operations
operator|.
name|resolve
argument_list|(
name|dns1path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Persistence policies on resolved entry"
argument_list|,
name|PersistencePolicies
operator|.
name|CONTAINER
argument_list|,
name|dns1resolved
operator|.
name|get
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_PERSISTENCE
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RegistryPathStatus
argument_list|>
name|children
init|=
name|RegistryUtils
operator|.
name|statChildren
argument_list|(
name|operations
argument_list|,
name|componentsPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|RegistryPathStatus
argument_list|>
name|componentStats
init|=
name|children
operator|.
name|values
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ServiceRecord
argument_list|>
name|records
init|=
name|RegistryUtils
operator|.
name|extractServiceRecords
argument_list|(
name|operations
argument_list|,
name|componentsPath
argument_list|,
name|componentStats
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceRecord
name|retrieved1
init|=
name|records
operator|.
name|get
argument_list|(
name|dns1path
argument_list|)
decl_stmt|;
name|logRecord
argument_list|(
name|retrieved1
operator|.
name|get
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_ID
argument_list|,
literal|""
argument_list|)
argument_list|,
name|retrieved1
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|dns1resolved
argument_list|,
name|retrieved1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistencePolicies
operator|.
name|CONTAINER
argument_list|,
name|retrieved1
operator|.
name|get
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_PERSISTENCE
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a listing under components/
name|operations
operator|.
name|mknode
argument_list|(
name|componentsPath
operator|+
literal|"subdir"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// this shows up in the listing of child entries
name|Map
argument_list|<
name|String
argument_list|,
name|RegistryPathStatus
argument_list|>
name|childrenUpdated
init|=
name|RegistryUtils
operator|.
name|statChildren
argument_list|(
name|operations
argument_list|,
name|componentsPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|childrenUpdated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// the non-record child this is not picked up in the record listing
name|Map
argument_list|<
name|String
argument_list|,
name|ServiceRecord
argument_list|>
name|recordsUpdated
init|=
name|RegistryUtils
operator|.
name|extractServiceRecords
argument_list|(
name|operations
argument_list|,
name|componentsPath
argument_list|,
name|childrenUpdated
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|recordsUpdated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// now do some deletions.
comment|// synchronous delete container ID 2
comment|// fail if the app policy is chosen
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|purge
argument_list|(
literal|"/"
argument_list|,
name|cid2
argument_list|,
name|PersistencePolicies
operator|.
name|APPLICATION
argument_list|,
name|RegistryAdminService
operator|.
name|PurgePolicy
operator|.
name|FailOnChildren
argument_list|)
argument_list|)
expr_stmt|;
comment|// succeed for container
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|purge
argument_list|(
literal|"/"
argument_list|,
name|cid2
argument_list|,
name|PersistencePolicies
operator|.
name|CONTAINER
argument_list|,
name|RegistryAdminService
operator|.
name|PurgePolicy
operator|.
name|FailOnChildren
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathNotFound
argument_list|(
name|dns2path
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
name|dns1path
argument_list|)
expr_stmt|;
comment|// expect a skip on children to skip
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|purge
argument_list|(
literal|"/"
argument_list|,
name|appId
argument_list|,
name|PersistencePolicies
operator|.
name|APPLICATION
argument_list|,
name|RegistryAdminService
operator|.
name|PurgePolicy
operator|.
name|SkipOnChildren
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
name|appPath
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
name|dns1path
argument_list|)
expr_stmt|;
comment|// attempt to delete app with policy of fail on children
try|try
block|{
name|int
name|p
init|=
name|purge
argument_list|(
literal|"/"
argument_list|,
name|appId
argument_list|,
name|PersistencePolicies
operator|.
name|APPLICATION
argument_list|,
name|RegistryAdminService
operator|.
name|PurgePolicy
operator|.
name|FailOnChildren
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected a failure, got a purge count of "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathIsNotEmptyDirectoryException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
name|assertPathExists
argument_list|(
name|appPath
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
name|dns1path
argument_list|)
expr_stmt|;
comment|// now trigger recursive delete
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|purge
argument_list|(
literal|"/"
argument_list|,
name|appId
argument_list|,
name|PersistencePolicies
operator|.
name|APPLICATION
argument_list|,
name|RegistryAdminService
operator|.
name|PurgePolicy
operator|.
name|PurgeAll
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathNotFound
argument_list|(
name|appPath
argument_list|)
expr_stmt|;
name|assertPathNotFound
argument_list|(
name|dns1path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChildDeletion ()
specifier|public
name|void
name|testChildDeletion
parameter_list|()
throws|throws
name|Throwable
block|{
name|ServiceRecord
name|app
init|=
name|createRecord
argument_list|(
literal|"app1"
argument_list|,
name|PersistencePolicies
operator|.
name|APPLICATION
argument_list|,
literal|"app"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ServiceRecord
name|container
init|=
name|createRecord
argument_list|(
literal|"container1"
argument_list|,
name|PersistencePolicies
operator|.
name|CONTAINER
argument_list|,
literal|"container"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|operations
operator|.
name|bind
argument_list|(
literal|"/app"
argument_list|,
name|app
argument_list|,
name|BindFlags
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|operations
operator|.
name|bind
argument_list|(
literal|"/app/container"
argument_list|,
name|container
argument_list|,
name|BindFlags
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|p
init|=
name|purge
argument_list|(
literal|"/"
argument_list|,
literal|"app1"
argument_list|,
name|PersistencePolicies
operator|.
name|APPLICATION
argument_list|,
name|RegistryAdminService
operator|.
name|PurgePolicy
operator|.
name|FailOnChildren
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected a failure, got a purge count of "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathIsNotEmptyDirectoryException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class

end_unit

