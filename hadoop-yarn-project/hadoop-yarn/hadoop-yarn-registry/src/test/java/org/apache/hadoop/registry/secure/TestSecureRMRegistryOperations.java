begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.secure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|secure
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathPermissionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperationsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|NoPathPermissionsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|zk
operator|.
name|ZKPathDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|RegistryOperationsClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|zk
operator|.
name|RegistrySecurity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|zk
operator|.
name|ZookeeperConfigOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|integration
operator|.
name|RMRegistryOperationsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|services
operator|.
name|RegistryAdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|client
operator|.
name|ZooKeeperSaslClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Id
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Verify that the {@link RMRegistryOperationsService} works securely  */
end_comment

begin_class
DECL|class|TestSecureRMRegistryOperations
specifier|public
class|class
name|TestSecureRMRegistryOperations
extends|extends
name|AbstractSecureRegistryTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSecureRMRegistryOperations
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|secureConf
specifier|private
name|Configuration
name|secureConf
decl_stmt|;
DECL|field|zkClientConf
specifier|private
name|Configuration
name|zkClientConf
decl_stmt|;
DECL|field|zookeeperUGI
specifier|private
name|UserGroupInformation
name|zookeeperUGI
decl_stmt|;
annotation|@
name|Before
DECL|method|setupTestSecureRMRegistryOperations ()
specifier|public
name|void
name|setupTestSecureRMRegistryOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|startSecureZK
argument_list|()
expr_stmt|;
name|secureConf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|secureConf
operator|.
name|setBoolean
argument_list|(
name|KEY_REGISTRY_SECURE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// create client conf containing the ZK quorum
name|zkClientConf
operator|=
operator|new
name|Configuration
argument_list|(
name|secureZK
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|zkClientConf
operator|.
name|setBoolean
argument_list|(
name|KEY_REGISTRY_SECURE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotEmpty
argument_list|(
name|zkClientConf
operator|.
name|get
argument_list|(
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_QUORUM
argument_list|)
argument_list|)
expr_stmt|;
comment|// ZK is in charge
name|secureConf
operator|.
name|set
argument_list|(
name|KEY_REGISTRY_SYSTEM_ACCOUNTS
argument_list|,
literal|"sasl:zookeeper@"
argument_list|)
expr_stmt|;
name|zookeeperUGI
operator|=
name|loginUGI
argument_list|(
name|ZOOKEEPER
argument_list|,
name|keytab_zk
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardownTestSecureRMRegistryOperations ()
specifier|public
name|void
name|teardownTestSecureRMRegistryOperations
parameter_list|()
block|{   }
comment|/**    * Create the RM registry operations as the current user    * @return the service    * @throws LoginException    * @throws FileNotFoundException    */
DECL|method|startRMRegistryOperations ()
specifier|public
name|RMRegistryOperationsService
name|startRMRegistryOperations
parameter_list|()
throws|throws
name|LoginException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
comment|// kerberos
name|secureConf
operator|.
name|set
argument_list|(
name|KEY_REGISTRY_CLIENT_AUTH
argument_list|,
name|REGISTRY_CLIENT_AUTH_KERBEROS
argument_list|)
expr_stmt|;
name|secureConf
operator|.
name|set
argument_list|(
name|KEY_REGISTRY_CLIENT_JAAS_CONTEXT
argument_list|,
name|ZOOKEEPER_CLIENT_CONTEXT
argument_list|)
expr_stmt|;
name|RMRegistryOperationsService
name|registryOperations
init|=
name|zookeeperUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|RMRegistryOperationsService
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RMRegistryOperationsService
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|RMRegistryOperationsService
name|operations
init|=
operator|new
name|RMRegistryOperationsService
argument_list|(
literal|"rmregistry"
argument_list|,
name|secureZK
argument_list|)
decl_stmt|;
name|addToTeardown
argument_list|(
name|operations
argument_list|)
expr_stmt|;
name|operations
operator|.
name|init
argument_list|(
name|secureConf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|operations
operator|.
name|bindingDiagnosticDetails
argument_list|()
argument_list|)
expr_stmt|;
name|operations
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|operations
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|registryOperations
return|;
block|}
comment|/**    * test that ZK can write as itself    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testZookeeperCanWriteUnderSystem ()
specifier|public
name|void
name|testZookeeperCanWriteUnderSystem
parameter_list|()
throws|throws
name|Throwable
block|{
name|RMRegistryOperationsService
name|rmRegistryOperations
init|=
name|startRMRegistryOperations
argument_list|()
decl_stmt|;
name|RegistryOperations
name|operations
init|=
name|rmRegistryOperations
decl_stmt|;
name|operations
operator|.
name|mknode
argument_list|(
name|PATH_SYSTEM_SERVICES
operator|+
literal|"hdfs"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ZKPathDumper
name|pathDumper
init|=
name|rmRegistryOperations
operator|.
name|dumpPath
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|pathDumper
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAnonReadAccess ()
specifier|public
name|void
name|testAnonReadAccess
parameter_list|()
throws|throws
name|Throwable
block|{
name|RMRegistryOperationsService
name|rmRegistryOperations
init|=
name|startRMRegistryOperations
argument_list|()
decl_stmt|;
name|describe
argument_list|(
name|LOG
argument_list|,
literal|"testAnonReadAccess"
argument_list|)
expr_stmt|;
name|RegistryOperations
name|operations
init|=
name|RegistryOperationsFactory
operator|.
name|createAnonymousInstance
argument_list|(
name|zkClientConf
argument_list|)
decl_stmt|;
name|addToTeardown
argument_list|(
name|operations
argument_list|)
expr_stmt|;
name|operations
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"RegistrySecurity.isClientSASLEnabled()==true"
argument_list|,
name|RegistrySecurity
operator|.
name|isClientSASLEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"ZooKeeperSaslClient.isEnabled()==true"
argument_list|,
name|ZooKeeperSaslClient
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|operations
operator|.
name|list
argument_list|(
name|PATH_SYSTEM_SERVICES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAnonNoWriteAccess ()
specifier|public
name|void
name|testAnonNoWriteAccess
parameter_list|()
throws|throws
name|Throwable
block|{
name|RMRegistryOperationsService
name|rmRegistryOperations
init|=
name|startRMRegistryOperations
argument_list|()
decl_stmt|;
name|describe
argument_list|(
name|LOG
argument_list|,
literal|"testAnonNoWriteAccess"
argument_list|)
expr_stmt|;
name|RegistryOperations
name|operations
init|=
name|RegistryOperationsFactory
operator|.
name|createAnonymousInstance
argument_list|(
name|zkClientConf
argument_list|)
decl_stmt|;
name|addToTeardown
argument_list|(
name|operations
argument_list|)
expr_stmt|;
name|operations
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|servicePath
init|=
name|PATH_SYSTEM_SERVICES
operator|+
literal|"hdfs"
decl_stmt|;
name|expectMkNodeFailure
argument_list|(
name|operations
argument_list|,
name|servicePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAnonNoWriteAccessOffRoot ()
specifier|public
name|void
name|testAnonNoWriteAccessOffRoot
parameter_list|()
throws|throws
name|Throwable
block|{
name|RMRegistryOperationsService
name|rmRegistryOperations
init|=
name|startRMRegistryOperations
argument_list|()
decl_stmt|;
name|describe
argument_list|(
name|LOG
argument_list|,
literal|"testAnonNoWriteAccessOffRoot"
argument_list|)
expr_stmt|;
name|RegistryOperations
name|operations
init|=
name|RegistryOperationsFactory
operator|.
name|createAnonymousInstance
argument_list|(
name|zkClientConf
argument_list|)
decl_stmt|;
name|addToTeardown
argument_list|(
name|operations
argument_list|)
expr_stmt|;
name|operations
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"mknode(/)"
argument_list|,
name|operations
operator|.
name|mknode
argument_list|(
literal|"/"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|expectMkNodeFailure
argument_list|(
name|operations
argument_list|,
literal|"/sub"
argument_list|)
expr_stmt|;
name|expectDeleteFailure
argument_list|(
name|operations
argument_list|,
name|PATH_SYSTEM_SERVICES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Expect a mknode operation to fail    * @param operations operations instance    * @param path path    * @throws IOException An IO failure other than those permitted    */
DECL|method|expectMkNodeFailure (RegistryOperations operations, String path)
specifier|public
name|void
name|expectMkNodeFailure
parameter_list|(
name|RegistryOperations
name|operations
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|operations
operator|.
name|mknode
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed to create a node under "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathPermissionException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|NoPathPermissionsException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|/**    * Expect a delete operation to fail    * @param operations operations instance    * @param path path    * @param recursive    * @throws IOException An IO failure other than those permitted    */
DECL|method|expectDeleteFailure (RegistryOperations operations, String path, boolean recursive)
specifier|public
name|void
name|expectDeleteFailure
parameter_list|(
name|RegistryOperations
name|operations
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|operations
operator|.
name|delete
argument_list|(
name|path
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed to delete the node "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathPermissionException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|NoPathPermissionsException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testAlicePathRestrictedAnonAccess ()
specifier|public
name|void
name|testAlicePathRestrictedAnonAccess
parameter_list|()
throws|throws
name|Throwable
block|{
name|RMRegistryOperationsService
name|rmRegistryOperations
init|=
name|startRMRegistryOperations
argument_list|()
decl_stmt|;
name|String
name|aliceHome
init|=
name|rmRegistryOperations
operator|.
name|initUserRegistry
argument_list|(
name|ALICE
argument_list|)
decl_stmt|;
name|describe
argument_list|(
name|LOG
argument_list|,
literal|"Creating anonymous accessor"
argument_list|)
expr_stmt|;
name|RegistryOperations
name|anonOperations
init|=
name|RegistryOperationsFactory
operator|.
name|createAnonymousInstance
argument_list|(
name|zkClientConf
argument_list|)
decl_stmt|;
name|addToTeardown
argument_list|(
name|anonOperations
argument_list|)
expr_stmt|;
name|anonOperations
operator|.
name|start
argument_list|()
expr_stmt|;
name|anonOperations
operator|.
name|list
argument_list|(
name|aliceHome
argument_list|)
expr_stmt|;
name|expectMkNodeFailure
argument_list|(
name|anonOperations
argument_list|,
name|aliceHome
operator|+
literal|"/anon"
argument_list|)
expr_stmt|;
name|expectDeleteFailure
argument_list|(
name|anonOperations
argument_list|,
name|aliceHome
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUserZookeeperHomePathAccess ()
specifier|public
name|void
name|testUserZookeeperHomePathAccess
parameter_list|()
throws|throws
name|Throwable
block|{
name|RMRegistryOperationsService
name|rmRegistryOperations
init|=
name|startRMRegistryOperations
argument_list|()
decl_stmt|;
specifier|final
name|String
name|home
init|=
name|rmRegistryOperations
operator|.
name|initUserRegistry
argument_list|(
name|ZOOKEEPER
argument_list|)
decl_stmt|;
name|describe
argument_list|(
name|LOG
argument_list|,
literal|"Creating ZK client"
argument_list|)
expr_stmt|;
name|RegistryOperations
name|operations
init|=
name|zookeeperUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|RegistryOperations
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RegistryOperations
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|RegistryOperations
name|operations
init|=
name|RegistryOperationsFactory
operator|.
name|createKerberosInstance
argument_list|(
name|zkClientConf
argument_list|,
name|ZOOKEEPER_CLIENT_CONTEXT
argument_list|)
decl_stmt|;
name|addToTeardown
argument_list|(
name|operations
argument_list|)
expr_stmt|;
name|operations
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|operations
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|operations
operator|.
name|list
argument_list|(
name|home
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|home
operator|+
literal|"/subpath"
decl_stmt|;
name|operations
operator|.
name|mknode
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|operations
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUserHomedirsPermissionsRestricted ()
specifier|public
name|void
name|testUserHomedirsPermissionsRestricted
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// test that the /users/$user permissions are restricted
name|RMRegistryOperationsService
name|rmRegistryOperations
init|=
name|startRMRegistryOperations
argument_list|()
decl_stmt|;
comment|// create Alice's dir, so it should have an ACL for Alice
specifier|final
name|String
name|home
init|=
name|rmRegistryOperations
operator|.
name|initUserRegistry
argument_list|(
name|ALICE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ACL
argument_list|>
name|acls
init|=
name|rmRegistryOperations
operator|.
name|zkGetACLS
argument_list|(
name|home
argument_list|)
decl_stmt|;
name|ACL
name|aliceACL
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ACL
name|acl
range|:
name|acls
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|RegistrySecurity
operator|.
name|aclToString
argument_list|(
name|acl
argument_list|)
argument_list|)
expr_stmt|;
name|Id
name|id
init|=
name|acl
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|ZookeeperConfigOptions
operator|.
name|SCHEME_SASL
argument_list|)
operator|&&
name|id
operator|.
name|getId
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ALICE
argument_list|)
condition|)
block|{
name|aliceACL
operator|=
name|acl
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|aliceACL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RegistryAdminService
operator|.
name|USER_HOMEDIR_ACL_PERMISSIONS
argument_list|,
name|aliceACL
operator|.
name|getPerms
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDigestAccess ()
specifier|public
name|void
name|testDigestAccess
parameter_list|()
throws|throws
name|Throwable
block|{
name|RMRegistryOperationsService
name|registryAdmin
init|=
name|startRMRegistryOperations
argument_list|()
decl_stmt|;
name|String
name|id
init|=
literal|"username"
decl_stmt|;
name|String
name|pass
init|=
literal|"password"
decl_stmt|;
name|registryAdmin
operator|.
name|addWriteAccessor
argument_list|(
name|id
argument_list|,
name|pass
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ACL
argument_list|>
name|clientAcls
init|=
name|registryAdmin
operator|.
name|getClientAcls
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Client ACLS=\n{}"
argument_list|,
name|RegistrySecurity
operator|.
name|aclsToString
argument_list|(
name|clientAcls
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|base
init|=
literal|"/digested"
decl_stmt|;
name|registryAdmin
operator|.
name|mknode
argument_list|(
name|base
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ACL
argument_list|>
name|baseACLs
init|=
name|registryAdmin
operator|.
name|zkGetACLS
argument_list|(
name|base
argument_list|)
decl_stmt|;
name|String
name|aclset
init|=
name|RegistrySecurity
operator|.
name|aclsToString
argument_list|(
name|baseACLs
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Base ACLs=\n{}"
argument_list|,
name|aclset
argument_list|)
expr_stmt|;
name|ACL
name|found
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ACL
name|acl
range|:
name|baseACLs
control|)
block|{
if|if
condition|(
name|ZookeeperConfigOptions
operator|.
name|SCHEME_DIGEST
operator|.
name|equals
argument_list|(
name|acl
operator|.
name|getId
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
name|acl
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
literal|"Did not find digest entry in ACLs "
operator|+
name|aclset
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|zkClientConf
operator|.
name|set
argument_list|(
name|KEY_REGISTRY_USER_ACCOUNTS
argument_list|,
literal|"sasl:somebody@EXAMPLE.COM, sasl:other"
argument_list|)
expr_stmt|;
name|RegistryOperations
name|operations
init|=
name|RegistryOperationsFactory
operator|.
name|createAuthenticatedInstance
argument_list|(
name|zkClientConf
argument_list|,
name|id
argument_list|,
name|pass
argument_list|)
decl_stmt|;
name|addToTeardown
argument_list|(
name|operations
argument_list|)
expr_stmt|;
name|operations
operator|.
name|start
argument_list|()
expr_stmt|;
name|RegistryOperationsClient
name|operationsClient
init|=
operator|(
name|RegistryOperationsClient
operator|)
name|operations
decl_stmt|;
name|List
argument_list|<
name|ACL
argument_list|>
name|digestClientACLs
init|=
name|operationsClient
operator|.
name|getClientAcls
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"digest client ACLs=\n{}"
argument_list|,
name|RegistrySecurity
operator|.
name|aclsToString
argument_list|(
name|digestClientACLs
argument_list|)
argument_list|)
expr_stmt|;
name|operations
operator|.
name|stat
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|operations
operator|.
name|mknode
argument_list|(
name|base
operator|+
literal|"/subdir"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ZKPathDumper
name|pathDumper
init|=
name|registryAdmin
operator|.
name|dumpPath
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|pathDumper
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testNoDigestAuthMissingId ()
specifier|public
name|void
name|testNoDigestAuthMissingId
parameter_list|()
throws|throws
name|Throwable
block|{
name|RegistryOperationsFactory
operator|.
name|createAuthenticatedInstance
argument_list|(
name|zkClientConf
argument_list|,
literal|""
argument_list|,
literal|"pass"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ServiceStateException
operator|.
name|class
argument_list|)
DECL|method|testNoDigestAuthMissingId2 ()
specifier|public
name|void
name|testNoDigestAuthMissingId2
parameter_list|()
throws|throws
name|Throwable
block|{
name|zkClientConf
operator|.
name|set
argument_list|(
name|KEY_REGISTRY_CLIENT_AUTH
argument_list|,
name|REGISTRY_CLIENT_AUTH_DIGEST
argument_list|)
expr_stmt|;
name|zkClientConf
operator|.
name|set
argument_list|(
name|KEY_REGISTRY_CLIENT_AUTHENTICATION_ID
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|zkClientConf
operator|.
name|set
argument_list|(
name|KEY_REGISTRY_CLIENT_AUTHENTICATION_PASSWORD
argument_list|,
literal|"pass"
argument_list|)
expr_stmt|;
name|RegistryOperationsFactory
operator|.
name|createInstance
argument_list|(
literal|"DigestRegistryOperations"
argument_list|,
name|zkClientConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testNoDigestAuthMissingPass ()
specifier|public
name|void
name|testNoDigestAuthMissingPass
parameter_list|()
throws|throws
name|Throwable
block|{
name|RegistryOperationsFactory
operator|.
name|createAuthenticatedInstance
argument_list|(
name|zkClientConf
argument_list|,
literal|"id"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ServiceStateException
operator|.
name|class
argument_list|)
DECL|method|testNoDigestAuthMissingPass2 ()
specifier|public
name|void
name|testNoDigestAuthMissingPass2
parameter_list|()
throws|throws
name|Throwable
block|{
name|zkClientConf
operator|.
name|set
argument_list|(
name|KEY_REGISTRY_CLIENT_AUTH
argument_list|,
name|REGISTRY_CLIENT_AUTH_DIGEST
argument_list|)
expr_stmt|;
name|zkClientConf
operator|.
name|set
argument_list|(
name|KEY_REGISTRY_CLIENT_AUTHENTICATION_ID
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|zkClientConf
operator|.
name|set
argument_list|(
name|KEY_REGISTRY_CLIENT_AUTHENTICATION_PASSWORD
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|RegistryOperationsFactory
operator|.
name|createInstance
argument_list|(
literal|"DigestRegistryOperations"
argument_list|,
name|zkClientConf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

