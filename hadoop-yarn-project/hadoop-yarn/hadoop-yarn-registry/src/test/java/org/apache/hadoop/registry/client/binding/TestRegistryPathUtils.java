begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.client.binding
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryPathUtils
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|InvalidPathnameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRegistryPathUtils
specifier|public
class|class
name|TestRegistryPathUtils
extends|extends
name|Assert
block|{
DECL|field|EURO
specifier|public
specifier|static
specifier|final
name|String
name|EURO
init|=
literal|"\u20AC"
decl_stmt|;
annotation|@
name|Test
DECL|method|testFormatAscii ()
specifier|public
name|void
name|testFormatAscii
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|in
init|=
literal|"hostname01101101-1"
decl_stmt|;
name|assertConverted
argument_list|(
name|in
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
comment|/*   * Euro symbol    */
annotation|@
name|Test
DECL|method|testFormatEuroSymbol ()
specifier|public
name|void
name|testFormatEuroSymbol
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertConverted
argument_list|(
literal|"xn--lzg"
argument_list|,
name|EURO
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFormatIdempotent ()
specifier|public
name|void
name|testFormatIdempotent
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertConverted
argument_list|(
literal|"xn--lzg"
argument_list|,
name|RegistryPathUtils
operator|.
name|encodeForRegistry
argument_list|(
name|EURO
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFormatCyrillicSpaced ()
specifier|public
name|void
name|testFormatCyrillicSpaced
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertConverted
argument_list|(
literal|"xn--pa 3-k4di"
argument_list|,
literal|"\u0413PA\u0414 3"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertConverted (String expected, String in)
specifier|protected
name|void
name|assertConverted
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|in
parameter_list|)
block|{
name|String
name|out
init|=
name|RegistryPathUtils
operator|.
name|encodeForRegistry
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Conversion of "
operator|+
name|in
argument_list|,
name|expected
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPaths ()
specifier|public
name|void
name|testPaths
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertCreatedPathEquals
argument_list|(
literal|"/"
argument_list|,
literal|"/"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertCreatedPathEquals
argument_list|(
literal|"/"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertCreatedPathEquals
argument_list|(
literal|"/"
argument_list|,
literal|""
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|assertCreatedPathEquals
argument_list|(
literal|"/"
argument_list|,
literal|"/"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|assertCreatedPathEquals
argument_list|(
literal|"/a"
argument_list|,
literal|"/a"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertCreatedPathEquals
argument_list|(
literal|"/a"
argument_list|,
literal|"/"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertCreatedPathEquals
argument_list|(
literal|"/a/b"
argument_list|,
literal|"/a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|assertCreatedPathEquals
argument_list|(
literal|"/a/b"
argument_list|,
literal|"/a/"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|assertCreatedPathEquals
argument_list|(
literal|"/a/b"
argument_list|,
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
expr_stmt|;
name|assertCreatedPathEquals
argument_list|(
literal|"/a/b"
argument_list|,
literal|"/a"
argument_list|,
literal|"/b/"
argument_list|)
expr_stmt|;
name|assertCreatedPathEquals
argument_list|(
literal|"/a"
argument_list|,
literal|"/a"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|assertCreatedPathEquals
argument_list|(
literal|"/alice"
argument_list|,
literal|"/"
argument_list|,
literal|"/alice"
argument_list|)
expr_stmt|;
name|assertCreatedPathEquals
argument_list|(
literal|"/alice"
argument_list|,
literal|"/alice"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testComplexPaths ()
specifier|public
name|void
name|testComplexPaths
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertCreatedPathEquals
argument_list|(
literal|"/"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertCreatedPathEquals
argument_list|(
literal|"/yarn/registry/users/hadoop/org-apache-hadoop"
argument_list|,
literal|"/yarn/registry"
argument_list|,
literal|"users/hadoop/org-apache-hadoop/"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCreatedPathEquals (String expected, String base, String path)
specifier|private
specifier|static
name|void
name|assertCreatedPathEquals
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|base
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fullPath
init|=
name|createFullPath
argument_list|(
name|base
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"\""
operator|+
name|base
operator|+
literal|"\" + \""
operator|+
name|path
operator|+
literal|"\" =\""
operator|+
name|fullPath
operator|+
literal|"\""
argument_list|,
name|expected
argument_list|,
name|fullPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplittingEmpty ()
specifier|public
name|void
name|testSplittingEmpty
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|split
argument_list|(
literal|""
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|split
argument_list|(
literal|"/"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|split
argument_list|(
literal|"///"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitting ()
specifier|public
name|void
name|testSplitting
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|split
argument_list|(
literal|"/a"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|split
argument_list|(
literal|"/"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|split
argument_list|(
literal|"/a/b/c"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|split
argument_list|(
literal|"/a/b/c/"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|split
argument_list|(
literal|"a/b/c"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|split
argument_list|(
literal|"/a/b//c"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|split
argument_list|(
literal|"//a/b/c/"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|split
init|=
name|split
argument_list|(
literal|"//a/b/c/"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|split
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|split
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|split
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParentOf ()
specifier|public
name|void
name|testParentOf
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|parentOf
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|parentOf
argument_list|(
literal|"/a/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|parentOf
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b"
argument_list|,
name|parentOf
argument_list|(
literal|"/a/b/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLastPathEntry ()
specifier|public
name|void
name|testLastPathEntry
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|lastPathEntry
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|lastPathEntry
argument_list|(
literal|"//"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|lastPathEntry
argument_list|(
literal|"/a/b/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|lastPathEntry
argument_list|(
literal|"/a/b/c/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PathNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testParentOfRoot ()
specifier|public
name|void
name|testParentOfRoot
parameter_list|()
throws|throws
name|Throwable
block|{
name|parentOf
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidPaths ()
specifier|public
name|void
name|testValidPaths
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertValidPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|assertValidPath
argument_list|(
literal|"/a/b/c"
argument_list|)
expr_stmt|;
name|assertValidPath
argument_list|(
literal|"/users/drwho/org-apache-hadoop/registry/appid-55-55"
argument_list|)
expr_stmt|;
name|assertValidPath
argument_list|(
literal|"/a50"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidPaths ()
specifier|public
name|void
name|testInvalidPaths
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertInvalidPath
argument_list|(
literal|"/a_b"
argument_list|)
expr_stmt|;
name|assertInvalidPath
argument_list|(
literal|"/UpperAndLowerCase"
argument_list|)
expr_stmt|;
name|assertInvalidPath
argument_list|(
literal|"/space in string"
argument_list|)
expr_stmt|;
comment|// Is this valid?    assertInvalidPath("/50");
block|}
DECL|method|assertValidPath (String path)
specifier|private
name|void
name|assertValidPath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|InvalidPathnameException
block|{
name|validateZKPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
DECL|method|assertInvalidPath (String path)
specifier|private
name|void
name|assertInvalidPath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|InvalidPathnameException
block|{
try|try
block|{
name|validateElementsAsDNS
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"path considered valid: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPathnameException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class

end_unit

