begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.server.dns
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|dns
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|AAAARecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|ARecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|CNAMERecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|DClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|DNSKEYRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|DNSSEC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Flags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|OPTRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|PTRRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|RRSIGRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|RRset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Rcode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|SRVRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet6Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|RSAPrivateKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TestRegistryDNS
specifier|public
class|class
name|TestRegistryDNS
extends|extends
name|Assert
block|{
DECL|field|registryDNS
specifier|private
name|RegistryDNS
name|registryDNS
decl_stmt|;
DECL|field|marshal
specifier|private
name|RegistryUtils
operator|.
name|ServiceRecordMarshal
name|marshal
decl_stmt|;
DECL|field|APPLICATION_RECORD
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_RECORD
init|=
literal|"{\n"
operator|+
literal|"  \"type\" : \"JSONServiceRecord\",\n"
operator|+
literal|"  \"description\" : \"Slider Application Master\",\n"
operator|+
literal|"  \"external\" : [ {\n"
operator|+
literal|"    \"api\" : \"classpath:org.apache.hadoop.yarn.service.appmaster.ipc"
operator|+
literal|"\",\n"
operator|+
literal|"    \"addressType\" : \"host/port\",\n"
operator|+
literal|"    \"protocolType\" : \"hadoop/IPC\",\n"
operator|+
literal|"    \"addresses\" : [ {\n"
operator|+
literal|"      \"host\" : \"192.168.1.5\",\n"
operator|+
literal|"      \"port\" : \"1026\"\n"
operator|+
literal|"    } ]\n"
operator|+
literal|"  }, {\n"
operator|+
literal|"    \"api\" : \"http://\",\n"
operator|+
literal|"    \"addressType\" : \"uri\",\n"
operator|+
literal|"    \"protocolType\" : \"webui\",\n"
operator|+
literal|"    \"addresses\" : [ {\n"
operator|+
literal|"      \"uri\" : \"http://192.168.1.5:1027\"\n"
operator|+
literal|"    } ]\n"
operator|+
literal|"  }, {\n"
operator|+
literal|"    \"api\" : \"classpath:org.apache.hadoop.yarn.service.management\""
operator|+
literal|",\n"
operator|+
literal|"    \"addressType\" : \"uri\",\n"
operator|+
literal|"    \"protocolType\" : \"REST\",\n"
operator|+
literal|"    \"addresses\" : [ {\n"
operator|+
literal|"      \"uri\" : \"http://192.168.1.5:1027/ws/v1/slider/mgmt\"\n"
operator|+
literal|"    } ]\n"
operator|+
literal|"  } ],\n"
operator|+
literal|"  \"internal\" : [ {\n"
operator|+
literal|"    \"api\" : \"classpath:org.apache.hadoop.yarn.service.agents.secure"
operator|+
literal|"\",\n"
operator|+
literal|"    \"addressType\" : \"uri\",\n"
operator|+
literal|"    \"protocolType\" : \"REST\",\n"
operator|+
literal|"    \"addresses\" : [ {\n"
operator|+
literal|"      \"uri\" : \"https://192.168.1.5:47700/ws/v1/slider/agents\"\n"
operator|+
literal|"    } ]\n"
operator|+
literal|"  }, {\n"
operator|+
literal|"    \"api\" : \"classpath:org.apache.hadoop.yarn.service.agents.oneway"
operator|+
literal|"\",\n"
operator|+
literal|"    \"addressType\" : \"uri\",\n"
operator|+
literal|"    \"protocolType\" : \"REST\",\n"
operator|+
literal|"    \"addresses\" : [ {\n"
operator|+
literal|"      \"uri\" : \"https://192.168.1.5:35531/ws/v1/slider/agents\"\n"
operator|+
literal|"    } ]\n"
operator|+
literal|"  } ],\n"
operator|+
literal|"  \"yarn:id\" : \"application_1451931954322_0016\",\n"
operator|+
literal|"  \"yarn:persistence\" : \"application\"\n"
operator|+
literal|"}\n"
decl_stmt|;
DECL|field|CONTAINER_RECORD
specifier|static
specifier|final
name|String
name|CONTAINER_RECORD
init|=
literal|"{\n"
operator|+
literal|"  \"type\" : \"JSONServiceRecord\",\n"
operator|+
literal|"  \"description\" : \"COMP-NAME\",\n"
operator|+
literal|"  \"external\" : [ ],\n"
operator|+
literal|"  \"internal\" : [ ],\n"
operator|+
literal|"  \"yarn:id\" : \"container_e50_1451931954322_0016_01_000002\",\n"
operator|+
literal|"  \"yarn:persistence\" : \"container\",\n"
operator|+
literal|"  \"yarn:ip\" : \"172.17.0.19\",\n"
operator|+
literal|"  \"yarn:hostname\" : \"0a134d6329ba\"\n"
operator|+
literal|"}\n"
decl_stmt|;
DECL|field|CONTAINER_RECORD_NO_IP
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_RECORD_NO_IP
init|=
literal|"{\n"
operator|+
literal|"  \"type\" : \"JSONServiceRecord\",\n"
operator|+
literal|"  \"description\" : \"COMP-NAME\",\n"
operator|+
literal|"  \"external\" : [ ],\n"
operator|+
literal|"  \"internal\" : [ ],\n"
operator|+
literal|"  \"yarn:id\" : \"container_e50_1451931954322_0016_01_000002\",\n"
operator|+
literal|"  \"yarn:persistence\" : \"container\"\n"
operator|+
literal|"}\n"
decl_stmt|;
DECL|field|CONTAINER_RECORD_YARN_PERSISTANCE_ABSENT
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_RECORD_YARN_PERSISTANCE_ABSENT
init|=
literal|"{\n"
operator|+
literal|"  \"type\" : \"JSONServiceRecord\",\n"
operator|+
literal|"  \"description\" : \"COMP-NAME\",\n"
operator|+
literal|"  \"external\" : [ ],\n"
operator|+
literal|"  \"internal\" : [ ],\n"
operator|+
literal|"  \"yarn:id\" : \"container_e50_1451931954322_0016_01_000003\",\n"
operator|+
literal|"  \"yarn:ip\" : \"172.17.0.19\",\n"
operator|+
literal|"  \"yarn:hostname\" : \"0a134d6329bb\"\n"
operator|+
literal|"}\n"
decl_stmt|;
annotation|@
name|Before
DECL|method|initialize ()
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|Exception
block|{
name|setRegistryDNS
argument_list|(
operator|new
name|RegistryDNS
argument_list|(
literal|"TestRegistry"
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|getRegistryDNS
argument_list|()
operator|.
name|setDomainName
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|getRegistryDNS
argument_list|()
operator|.
name|initializeZones
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setMarshal
argument_list|(
operator|new
name|RegistryUtils
operator|.
name|ServiceRecordMarshal
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNS_DOMAIN
argument_list|,
literal|"hwx.test"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNS_ZONE_SUBNET
argument_list|,
literal|"172.17.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNS_TTL
argument_list|,
literal|30L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|isSecure ()
specifier|protected
name|boolean
name|isSecure
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|After
DECL|method|closeRegistry ()
specifier|public
name|void
name|closeRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|getRegistryDNS
argument_list|()
operator|.
name|stopExecutor
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppRegistration ()
specifier|public
name|void
name|testAppRegistration
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceRecord
name|record
init|=
name|getMarshal
argument_list|()
operator|.
name|fromBytes
argument_list|(
literal|"somepath"
argument_list|,
name|APPLICATION_RECORD
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|getRegistryDNS
argument_list|()
operator|.
name|register
argument_list|(
literal|"/registry/users/root/services/org-apache-slider/test1/"
argument_list|,
name|record
argument_list|)
expr_stmt|;
comment|// start assessing whether correct records are available
name|Record
index|[]
name|recs
init|=
name|assertDNSQuery
argument_list|(
literal|"test1.root.hwx.test."
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong result"
argument_list|,
literal|"192.168.1.5"
argument_list|,
operator|(
operator|(
name|ARecord
operator|)
name|recs
index|[
literal|0
index|]
operator|)
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|recs
operator|=
name|assertDNSQuery
argument_list|(
literal|"management-api.test1.root.hwx.test."
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong target name"
argument_list|,
literal|"test1.root.hwx.test."
argument_list|,
operator|(
operator|(
name|CNAMERecord
operator|)
name|recs
index|[
literal|0
index|]
operator|)
operator|.
name|getTarget
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not an ARecord"
argument_list|,
name|recs
index|[
name|isSecure
argument_list|()
condition|?
literal|2
else|:
literal|1
index|]
operator|instanceof
name|ARecord
argument_list|)
expr_stmt|;
name|recs
operator|=
name|assertDNSQuery
argument_list|(
literal|"appmaster-ipc-api.test1.root.hwx.test."
argument_list|,
name|Type
operator|.
name|SRV
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not an SRV record"
argument_list|,
name|recs
index|[
literal|0
index|]
operator|instanceof
name|SRVRecord
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong port"
argument_list|,
literal|1026
argument_list|,
operator|(
operator|(
name|SRVRecord
operator|)
name|recs
index|[
literal|0
index|]
operator|)
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|recs
operator|=
name|assertDNSQuery
argument_list|(
literal|"appmaster-ipc-api.test1.root.hwx.test."
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong target name"
argument_list|,
literal|"test1.root.hwx.test."
argument_list|,
operator|(
operator|(
name|CNAMERecord
operator|)
name|recs
index|[
literal|0
index|]
operator|)
operator|.
name|getTarget
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not an ARecord"
argument_list|,
name|recs
index|[
name|isSecure
argument_list|()
condition|?
literal|2
else|:
literal|1
index|]
operator|instanceof
name|ARecord
argument_list|)
expr_stmt|;
name|recs
operator|=
name|assertDNSQuery
argument_list|(
literal|"http-api.test1.root.hwx.test."
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong target name"
argument_list|,
literal|"test1.root.hwx.test."
argument_list|,
operator|(
operator|(
name|CNAMERecord
operator|)
name|recs
index|[
literal|0
index|]
operator|)
operator|.
name|getTarget
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not an ARecord"
argument_list|,
name|recs
index|[
name|isSecure
argument_list|()
condition|?
literal|2
else|:
literal|1
index|]
operator|instanceof
name|ARecord
argument_list|)
expr_stmt|;
name|recs
operator|=
name|assertDNSQuery
argument_list|(
literal|"http-api.test1.root.hwx.test."
argument_list|,
name|Type
operator|.
name|SRV
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not an SRV record"
argument_list|,
name|recs
index|[
literal|0
index|]
operator|instanceof
name|SRVRecord
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong port"
argument_list|,
literal|1027
argument_list|,
operator|(
operator|(
name|SRVRecord
operator|)
name|recs
index|[
literal|0
index|]
operator|)
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertDNSQuery
argument_list|(
literal|"test1.root.hwx.test."
argument_list|,
name|Type
operator|.
name|TXT
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertDNSQuery
argument_list|(
literal|"appmaster-ipc-api.test1.root.hwx.test."
argument_list|,
name|Type
operator|.
name|TXT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertDNSQuery
argument_list|(
literal|"http-api.test1.root.hwx.test."
argument_list|,
name|Type
operator|.
name|TXT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertDNSQuery
argument_list|(
literal|"management-api.test1.root.hwx.test."
argument_list|,
name|Type
operator|.
name|TXT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerRegistration ()
specifier|public
name|void
name|testContainerRegistration
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceRecord
name|record
init|=
name|getMarshal
argument_list|()
operator|.
name|fromBytes
argument_list|(
literal|"somepath"
argument_list|,
name|CONTAINER_RECORD
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|getRegistryDNS
argument_list|()
operator|.
name|register
argument_list|(
literal|"/registry/users/root/services/org-apache-slider/test1/components/"
operator|+
literal|"ctr-e50-1451931954322-0016-01-000002"
argument_list|,
name|record
argument_list|)
expr_stmt|;
comment|// start assessing whether correct records are available
name|Record
index|[]
name|recs
init|=
name|assertDNSQuery
argument_list|(
literal|"ctr-e50-1451931954322-0016-01-000002.hwx.test."
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong result"
argument_list|,
literal|"172.17.0.19"
argument_list|,
operator|(
operator|(
name|ARecord
operator|)
name|recs
index|[
literal|0
index|]
operator|)
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|recs
operator|=
name|assertDNSQuery
argument_list|(
literal|"comp-name.test1.root.hwx.test."
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not an ARecord"
argument_list|,
name|recs
index|[
literal|0
index|]
operator|instanceof
name|ARecord
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerRegistrationPersistanceAbsent ()
specifier|public
name|void
name|testContainerRegistrationPersistanceAbsent
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceRecord
name|record
init|=
name|marshal
operator|.
name|fromBytes
argument_list|(
literal|"somepath"
argument_list|,
name|CONTAINER_RECORD_YARN_PERSISTANCE_ABSENT
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|registryDNS
operator|.
name|register
argument_list|(
literal|"/registry/users/root/services/org-apache-slider/test1/components/"
operator|+
literal|"ctr-e50-1451931954322-0016-01-000003"
argument_list|,
name|record
argument_list|)
expr_stmt|;
name|Name
name|name
init|=
name|Name
operator|.
name|fromString
argument_list|(
literal|"ctr-e50-1451931954322-0016-01-000002.hwx.test."
argument_list|)
decl_stmt|;
name|Record
name|question
init|=
name|Record
operator|.
name|newRecord
argument_list|(
name|name
argument_list|,
name|Type
operator|.
name|A
argument_list|,
name|DClass
operator|.
name|IN
argument_list|)
decl_stmt|;
name|Message
name|query
init|=
name|Message
operator|.
name|newQuery
argument_list|(
name|question
argument_list|)
decl_stmt|;
name|byte
index|[]
name|responseBytes
init|=
name|registryDNS
operator|.
name|generateReply
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Message
name|response
init|=
operator|new
name|Message
argument_list|(
name|responseBytes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Excepting NXDOMAIN as Record must not have regsisterd wrong"
argument_list|,
name|Rcode
operator|.
name|NXDOMAIN
argument_list|,
name|response
operator|.
name|getRcode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecordTTL ()
specifier|public
name|void
name|testRecordTTL
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceRecord
name|record
init|=
name|getMarshal
argument_list|()
operator|.
name|fromBytes
argument_list|(
literal|"somepath"
argument_list|,
name|CONTAINER_RECORD
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|getRegistryDNS
argument_list|()
operator|.
name|register
argument_list|(
literal|"/registry/users/root/services/org-apache-slider/test1/components/"
operator|+
literal|"ctr-e50-1451931954322-0016-01-000002"
argument_list|,
name|record
argument_list|)
expr_stmt|;
comment|// start assessing whether correct records are available
name|Record
index|[]
name|recs
init|=
name|assertDNSQuery
argument_list|(
literal|"ctr-e50-1451931954322-0016-01-000002.hwx.test."
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong result"
argument_list|,
literal|"172.17.0.19"
argument_list|,
operator|(
operator|(
name|ARecord
operator|)
name|recs
index|[
literal|0
index|]
operator|)
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong ttl"
argument_list|,
literal|30L
argument_list|,
name|recs
index|[
literal|0
index|]
operator|.
name|getTTL
argument_list|()
argument_list|)
expr_stmt|;
name|recs
operator|=
name|assertDNSQuery
argument_list|(
literal|"comp-name.test1.root.hwx.test."
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not an ARecord"
argument_list|,
name|recs
index|[
literal|0
index|]
operator|instanceof
name|ARecord
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong ttl"
argument_list|,
literal|30L
argument_list|,
name|recs
index|[
literal|0
index|]
operator|.
name|getTTL
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReverseLookup ()
specifier|public
name|void
name|testReverseLookup
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceRecord
name|record
init|=
name|getMarshal
argument_list|()
operator|.
name|fromBytes
argument_list|(
literal|"somepath"
argument_list|,
name|CONTAINER_RECORD
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|getRegistryDNS
argument_list|()
operator|.
name|register
argument_list|(
literal|"/registry/users/root/services/org-apache-slider/test1/components/"
operator|+
literal|"ctr-e50-1451931954322-0016-01-000002"
argument_list|,
name|record
argument_list|)
expr_stmt|;
comment|// start assessing whether correct records are available
name|Record
index|[]
name|recs
init|=
name|assertDNSQuery
argument_list|(
literal|"19.0.17.172.in-addr.arpa."
argument_list|,
name|Type
operator|.
name|PTR
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong result"
argument_list|,
literal|"comp-name.test1.root.hwx.test."
argument_list|,
operator|(
operator|(
name|PTRRecord
operator|)
name|recs
index|[
literal|0
index|]
operator|)
operator|.
name|getTarget
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReverseLookupInLargeNetwork ()
specifier|public
name|void
name|testReverseLookupInLargeNetwork
parameter_list|()
throws|throws
name|Exception
block|{
name|setRegistryDNS
argument_list|(
operator|new
name|RegistryDNS
argument_list|(
literal|"TestRegistry"
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNS_DOMAIN
argument_list|,
literal|"hwx.test"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_DNS_ZONE_SUBNET
argument_list|,
literal|"172.17.0.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_DNS_ZONE_MASK
argument_list|,
literal|"255.255.224.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNS_TTL
argument_list|,
literal|30L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|getRegistryDNS
argument_list|()
operator|.
name|setDomainName
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|getRegistryDNS
argument_list|()
operator|.
name|initializeZones
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ServiceRecord
name|record
init|=
name|getMarshal
argument_list|()
operator|.
name|fromBytes
argument_list|(
literal|"somepath"
argument_list|,
name|CONTAINER_RECORD
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|getRegistryDNS
argument_list|()
operator|.
name|register
argument_list|(
literal|"/registry/users/root/services/org-apache-slider/test1/components/"
operator|+
literal|"ctr-e50-1451931954322-0016-01-000002"
argument_list|,
name|record
argument_list|)
expr_stmt|;
comment|// start assessing whether correct records are available
name|Record
index|[]
name|recs
init|=
name|assertDNSQuery
argument_list|(
literal|"19.0.17.172.in-addr.arpa."
argument_list|,
name|Type
operator|.
name|PTR
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong result"
argument_list|,
literal|"comp-name.test1.root.hwx.test."
argument_list|,
operator|(
operator|(
name|PTRRecord
operator|)
name|recs
index|[
literal|0
index|]
operator|)
operator|.
name|getTarget
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingReverseLookup ()
specifier|public
name|void
name|testMissingReverseLookup
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceRecord
name|record
init|=
name|getMarshal
argument_list|()
operator|.
name|fromBytes
argument_list|(
literal|"somepath"
argument_list|,
name|CONTAINER_RECORD
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|getRegistryDNS
argument_list|()
operator|.
name|register
argument_list|(
literal|"/registry/users/root/services/org-apache-slider/test1/components/"
operator|+
literal|"ctr-e50-1451931954322-0016-01-000002"
argument_list|,
name|record
argument_list|)
expr_stmt|;
comment|// start assessing whether correct records are available
name|Name
name|name
init|=
name|Name
operator|.
name|fromString
argument_list|(
literal|"19.1.17.172.in-addr.arpa."
argument_list|)
decl_stmt|;
name|Record
name|question
init|=
name|Record
operator|.
name|newRecord
argument_list|(
name|name
argument_list|,
name|Type
operator|.
name|PTR
argument_list|,
name|DClass
operator|.
name|IN
argument_list|)
decl_stmt|;
name|Message
name|query
init|=
name|Message
operator|.
name|newQuery
argument_list|(
name|question
argument_list|)
decl_stmt|;
name|OPTRecord
name|optRecord
init|=
operator|new
name|OPTRecord
argument_list|(
literal|4096
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Flags
operator|.
name|DO
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|query
operator|.
name|addRecord
argument_list|(
name|optRecord
argument_list|,
name|Section
operator|.
name|ADDITIONAL
argument_list|)
expr_stmt|;
name|byte
index|[]
name|responseBytes
init|=
name|getRegistryDNS
argument_list|()
operator|.
name|generateReply
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Message
name|response
init|=
operator|new
name|Message
argument_list|(
name|responseBytes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Missing record should be: "
argument_list|,
name|Rcode
operator|.
name|NXDOMAIN
argument_list|,
name|response
operator|.
name|getRcode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoContainerIP ()
specifier|public
name|void
name|testNoContainerIP
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceRecord
name|record
init|=
name|getMarshal
argument_list|()
operator|.
name|fromBytes
argument_list|(
literal|"somepath"
argument_list|,
name|CONTAINER_RECORD_NO_IP
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|getRegistryDNS
argument_list|()
operator|.
name|register
argument_list|(
literal|"/registry/users/root/services/org-apache-slider/test1/components/"
operator|+
literal|"ctr-e50-1451931954322-0016-01-000002"
argument_list|,
name|record
argument_list|)
expr_stmt|;
comment|// start assessing whether correct records are available
name|Name
name|name
init|=
name|Name
operator|.
name|fromString
argument_list|(
literal|"ctr-e50-1451931954322-0016-01-000002.hwx.test."
argument_list|)
decl_stmt|;
name|Record
name|question
init|=
name|Record
operator|.
name|newRecord
argument_list|(
name|name
argument_list|,
name|Type
operator|.
name|A
argument_list|,
name|DClass
operator|.
name|IN
argument_list|)
decl_stmt|;
name|Message
name|query
init|=
name|Message
operator|.
name|newQuery
argument_list|(
name|question
argument_list|)
decl_stmt|;
name|byte
index|[]
name|responseBytes
init|=
name|getRegistryDNS
argument_list|()
operator|.
name|generateReply
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Message
name|response
init|=
operator|new
name|Message
argument_list|(
name|responseBytes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong status"
argument_list|,
name|Rcode
operator|.
name|NXDOMAIN
argument_list|,
name|response
operator|.
name|getRcode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDNSQuery (String lookup)
specifier|private
name|Record
index|[]
name|assertDNSQuery
parameter_list|(
name|String
name|lookup
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|assertDNSQuery
argument_list|(
name|lookup
argument_list|,
name|Type
operator|.
name|A
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|assertDNSQuery (String lookup, int numRecs)
specifier|private
name|Record
index|[]
name|assertDNSQuery
parameter_list|(
name|String
name|lookup
parameter_list|,
name|int
name|numRecs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|assertDNSQuery
argument_list|(
name|lookup
argument_list|,
name|Type
operator|.
name|A
argument_list|,
name|numRecs
argument_list|)
return|;
block|}
DECL|method|assertDNSQuery (String lookup, int type, int numRecs)
name|Record
index|[]
name|assertDNSQuery
parameter_list|(
name|String
name|lookup
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|numRecs
parameter_list|)
throws|throws
name|IOException
block|{
name|Name
name|name
init|=
name|Name
operator|.
name|fromString
argument_list|(
name|lookup
argument_list|)
decl_stmt|;
name|Record
name|question
init|=
name|Record
operator|.
name|newRecord
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|DClass
operator|.
name|IN
argument_list|)
decl_stmt|;
name|Message
name|query
init|=
name|Message
operator|.
name|newQuery
argument_list|(
name|question
argument_list|)
decl_stmt|;
name|OPTRecord
name|optRecord
init|=
operator|new
name|OPTRecord
argument_list|(
literal|4096
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Flags
operator|.
name|DO
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|query
operator|.
name|addRecord
argument_list|(
name|optRecord
argument_list|,
name|Section
operator|.
name|ADDITIONAL
argument_list|)
expr_stmt|;
name|byte
index|[]
name|responseBytes
init|=
name|getRegistryDNS
argument_list|()
operator|.
name|generateReply
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Message
name|response
init|=
operator|new
name|Message
argument_list|(
name|responseBytes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"not successful"
argument_list|,
name|Rcode
operator|.
name|NOERROR
argument_list|,
name|response
operator|.
name|getRcode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Null response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Questions do not match"
argument_list|,
name|query
operator|.
name|getQuestion
argument_list|()
argument_list|,
name|response
operator|.
name|getQuestion
argument_list|()
argument_list|)
expr_stmt|;
name|Record
index|[]
name|recs
init|=
name|response
operator|.
name|getSectionArray
argument_list|(
name|Section
operator|.
name|ANSWER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of answer records"
argument_list|,
name|isSecure
argument_list|()
condition|?
name|numRecs
operator|*
literal|2
else|:
name|numRecs
argument_list|,
name|recs
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSecure
argument_list|()
condition|)
block|{
name|boolean
name|signed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Record
name|record
range|:
name|recs
control|)
block|{
name|signed
operator|=
name|record
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|RRSIG
expr_stmt|;
if|if
condition|(
name|signed
condition|)
block|{
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"No signatures found"
argument_list|,
name|signed
argument_list|)
expr_stmt|;
block|}
return|return
name|recs
return|;
block|}
annotation|@
name|Test
DECL|method|testDNSKEYRecord ()
specifier|public
name|void
name|testDNSKEYRecord
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|publicK
init|=
literal|"AwEAAe1Jev0Az1khlQCvf0nud1/CNHQwwPEu8BNchZthdDxKPVn29yrD "
operator|+
literal|"CHoAWjwiGsOSw3SzIPrawSbHzyJsjn0oLBhGrH6QedFGnydoxjNsw3m/ "
operator|+
literal|"SCmOjR/a7LGBAMDFKqFioi4gOyuN66svBeY+/5uw72+0ei9AQ20gqf6q "
operator|+
literal|"l9Ozs5bV"
decl_stmt|;
comment|//    byte[] publicBytes = Base64.decodeBase64(publicK);
comment|//    X509EncodedKeySpec keySpec = new X509EncodedKeySpec(publicBytes);
comment|//    KeyFactory keyFactory = KeyFactory.getInstance("RSA");
comment|//    PublicKey pubKey = keyFactory.generatePublic(keySpec);
name|DNSKEYRecord
name|dnskeyRecord
init|=
operator|new
name|DNSKEYRecord
argument_list|(
name|Name
operator|.
name|fromString
argument_list|(
literal|"hwxstg.site."
argument_list|)
argument_list|,
name|DClass
operator|.
name|IN
argument_list|,
literal|0
argument_list|,
name|DNSKEYRecord
operator|.
name|Flags
operator|.
name|ZONE_KEY
argument_list|,
name|DNSKEYRecord
operator|.
name|Protocol
operator|.
name|DNSSEC
argument_list|,
name|DNSSEC
operator|.
name|Algorithm
operator|.
name|RSASHA256
argument_list|,
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|publicK
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dnskeyRecord
argument_list|)
expr_stmt|;
name|RSAPrivateKeySpec
name|privateSpec
init|=
operator|new
name|RSAPrivateKeySpec
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|Base64
operator|.
name|decodeBase64
argument_list|(
literal|"7Ul6/QDPWSGVAK9/Se53X8I0dDDA8S7wE1yFm2F0PEo9Wfb3KsMIegBaPCIaw5LDd"
operator|+
literal|"LMg+trBJsfPImyOfSgsGEasfpB50UafJ2jGM2zDeb9IKY6NH9rssYEAwMUq"
operator|+
literal|"oWKiLiA7K43rqy8F5j7/m7Dvb7R6L0BDbSCp/qqX07OzltU="
argument_list|)
argument_list|)
argument_list|,
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|Base64
operator|.
name|decodeBase64
argument_list|(
literal|"MgbQ6DBYhskeufNGGdct0cGG/4wb0X183ggenwCv2dopDyOTPq+5xMb4Pz9Ndzgk/"
operator|+
literal|"yCY7mpaWIu9rttGOzrR+LBRR30VobPpMK1bMnzu2C0x08oYAguVwZB79DLC"
operator|+
literal|"705qmZpiaaFB+LnhG7VtpPiOBm3UzZxdrBfeq/qaKrXid60="
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|KeyFactory
name|factory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
name|PrivateKey
name|priv
init|=
name|factory
operator|.
name|generatePrivate
argument_list|(
name|privateSpec
argument_list|)
decl_stmt|;
name|ARecord
name|aRecord
init|=
operator|new
name|ARecord
argument_list|(
name|Name
operator|.
name|fromString
argument_list|(
literal|"some.test."
argument_list|)
argument_list|,
name|DClass
operator|.
name|IN
argument_list|,
literal|0
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"192.168.0.1"
argument_list|)
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Date
name|inception
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Date
name|expiration
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|RRset
name|rrset
init|=
operator|new
name|RRset
argument_list|(
name|aRecord
argument_list|)
decl_stmt|;
name|RRSIGRecord
name|rrsigRecord
init|=
name|DNSSEC
operator|.
name|sign
argument_list|(
name|rrset
argument_list|,
name|dnskeyRecord
argument_list|,
name|priv
argument_list|,
name|inception
argument_list|,
name|expiration
argument_list|)
decl_stmt|;
name|DNSSEC
operator|.
name|verify
argument_list|(
name|rrset
argument_list|,
name|rrsigRecord
argument_list|,
name|dnskeyRecord
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIpv4toIpv6 ()
specifier|public
name|void
name|testIpv4toIpv6
parameter_list|()
throws|throws
name|Exception
block|{
name|InetAddress
name|address
init|=
name|BaseServiceRecordProcessor
operator|.
name|getIpv6Address
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"172.17.0.19"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not an ipv6 address"
argument_list|,
name|address
operator|instanceof
name|Inet6Address
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong IP"
argument_list|,
literal|"172.17.0.19"
argument_list|,
name|InetAddress
operator|.
name|getByAddress
argument_list|(
name|address
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAAAALookup ()
specifier|public
name|void
name|testAAAALookup
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceRecord
name|record
init|=
name|getMarshal
argument_list|()
operator|.
name|fromBytes
argument_list|(
literal|"somepath"
argument_list|,
name|CONTAINER_RECORD
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|getRegistryDNS
argument_list|()
operator|.
name|register
argument_list|(
literal|"/registry/users/root/services/org-apache-slider/test1/components/"
operator|+
literal|"ctr-e50-1451931954322-0016-01-000002"
argument_list|,
name|record
argument_list|)
expr_stmt|;
comment|// start assessing whether correct records are available
name|Record
index|[]
name|recs
init|=
name|assertDNSQuery
argument_list|(
literal|"ctr-e50-1451931954322-0016-01-000002.hwx.test."
argument_list|,
name|Type
operator|.
name|AAAA
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong result"
argument_list|,
literal|"172.17.0.19"
argument_list|,
operator|(
operator|(
name|AAAARecord
operator|)
name|recs
index|[
literal|0
index|]
operator|)
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|recs
operator|=
name|assertDNSQuery
argument_list|(
literal|"comp-name.test1.root.hwx.test."
argument_list|,
name|Type
operator|.
name|AAAA
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not an ARecord"
argument_list|,
name|recs
index|[
literal|0
index|]
operator|instanceof
name|AAAARecord
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNegativeLookup ()
specifier|public
name|void
name|testNegativeLookup
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceRecord
name|record
init|=
name|getMarshal
argument_list|()
operator|.
name|fromBytes
argument_list|(
literal|"somepath"
argument_list|,
name|CONTAINER_RECORD
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|getRegistryDNS
argument_list|()
operator|.
name|register
argument_list|(
literal|"/registry/users/root/services/org-apache-slider/test1/components/"
operator|+
literal|"ctr-e50-1451931954322-0016-01-000002"
argument_list|,
name|record
argument_list|)
expr_stmt|;
comment|// start assessing whether correct records are available
name|Name
name|name
init|=
name|Name
operator|.
name|fromString
argument_list|(
literal|"missing.hwx.test."
argument_list|)
decl_stmt|;
name|Record
name|question
init|=
name|Record
operator|.
name|newRecord
argument_list|(
name|name
argument_list|,
name|Type
operator|.
name|A
argument_list|,
name|DClass
operator|.
name|IN
argument_list|)
decl_stmt|;
name|Message
name|query
init|=
name|Message
operator|.
name|newQuery
argument_list|(
name|question
argument_list|)
decl_stmt|;
name|byte
index|[]
name|responseBytes
init|=
name|getRegistryDNS
argument_list|()
operator|.
name|generateReply
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Message
name|response
init|=
operator|new
name|Message
argument_list|(
name|responseBytes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"not successful"
argument_list|,
name|Rcode
operator|.
name|NXDOMAIN
argument_list|,
name|response
operator|.
name|getRcode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Null response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Questions do not match"
argument_list|,
name|query
operator|.
name|getQuestion
argument_list|()
argument_list|,
name|response
operator|.
name|getQuestion
argument_list|()
argument_list|)
expr_stmt|;
name|Record
index|[]
name|sectionArray
init|=
name|response
operator|.
name|getSectionArray
argument_list|(
name|Section
operator|.
name|AUTHORITY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of recs in AUTHORITY"
argument_list|,
name|isSecure
argument_list|()
condition|?
literal|2
else|:
literal|1
argument_list|,
name|sectionArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|boolean
name|soaFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Record
name|rec
range|:
name|sectionArray
control|)
block|{
name|soaFound
operator|=
name|rec
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|SOA
expr_stmt|;
if|if
condition|(
name|soaFound
condition|)
block|{
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"wrong record type"
argument_list|,
name|soaFound
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadMasterFile ()
specifier|public
name|void
name|testReadMasterFile
parameter_list|()
throws|throws
name|Exception
block|{
name|setRegistryDNS
argument_list|(
operator|new
name|RegistryDNS
argument_list|(
literal|"TestRegistry"
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNS_DOMAIN
argument_list|,
literal|"hwx.test"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNS_ZONE_SUBNET
argument_list|,
literal|"172.17.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNS_TTL
argument_list|,
literal|30L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNS_ZONES_DIR
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSecure
argument_list|()
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNSSEC_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNSSEC_PUBLIC_KEY
argument_list|,
literal|"AwEAAe1Jev0Az1khlQCvf0nud1/CNHQwwPEu8BNchZthdDxKPVn29yrD "
operator|+
literal|"CHoAWjwiGsOSw3SzIPrawSbHzyJsjn0oLBhGrH6QedFGnydoxjNsw3m/ "
operator|+
literal|"SCmOjR/a7LGBAMDFKqFioi4gOyuN66svBeY+/5uw72+0ei9AQ20gqf6q "
operator|+
literal|"l9Ozs5bV"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNSSEC_PRIVATE_KEY_FILE
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/test.private"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getRegistryDNS
argument_list|()
operator|.
name|setDomainName
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|getRegistryDNS
argument_list|()
operator|.
name|initializeZones
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ServiceRecord
name|record
init|=
name|getMarshal
argument_list|()
operator|.
name|fromBytes
argument_list|(
literal|"somepath"
argument_list|,
name|CONTAINER_RECORD
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|getRegistryDNS
argument_list|()
operator|.
name|register
argument_list|(
literal|"/registry/users/root/services/org-apache-slider/test1/components/"
operator|+
literal|"ctr-e50-1451931954322-0016-01-000002"
argument_list|,
name|record
argument_list|)
expr_stmt|;
comment|// start assessing whether correct records are available
name|Record
index|[]
name|recs
init|=
name|assertDNSQuery
argument_list|(
literal|"ctr-e50-1451931954322-0016-01-000002.hwx.test."
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong result"
argument_list|,
literal|"172.17.0.19"
argument_list|,
operator|(
operator|(
name|ARecord
operator|)
name|recs
index|[
literal|0
index|]
operator|)
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|recs
operator|=
name|assertDNSQuery
argument_list|(
literal|"comp-name.test1.root.hwx.test."
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not an ARecord"
argument_list|,
name|recs
index|[
literal|0
index|]
operator|instanceof
name|ARecord
argument_list|)
expr_stmt|;
comment|// lookup dyanmic reverse records
name|recs
operator|=
name|assertDNSQuery
argument_list|(
literal|"19.0.17.172.in-addr.arpa."
argument_list|,
name|Type
operator|.
name|PTR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong result"
argument_list|,
literal|"comp-name.test1.root.hwx.test."
argument_list|,
operator|(
operator|(
name|PTRRecord
operator|)
name|recs
index|[
literal|0
index|]
operator|)
operator|.
name|getTarget
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// now lookup static reverse records
name|Name
name|name
init|=
name|Name
operator|.
name|fromString
argument_list|(
literal|"5.0.17.172.in-addr.arpa."
argument_list|)
decl_stmt|;
name|Record
name|question
init|=
name|Record
operator|.
name|newRecord
argument_list|(
name|name
argument_list|,
name|Type
operator|.
name|PTR
argument_list|,
name|DClass
operator|.
name|IN
argument_list|)
decl_stmt|;
name|Message
name|query
init|=
name|Message
operator|.
name|newQuery
argument_list|(
name|question
argument_list|)
decl_stmt|;
name|OPTRecord
name|optRecord
init|=
operator|new
name|OPTRecord
argument_list|(
literal|4096
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Flags
operator|.
name|DO
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|query
operator|.
name|addRecord
argument_list|(
name|optRecord
argument_list|,
name|Section
operator|.
name|ADDITIONAL
argument_list|)
expr_stmt|;
name|byte
index|[]
name|responseBytes
init|=
name|getRegistryDNS
argument_list|()
operator|.
name|generateReply
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Message
name|response
init|=
operator|new
name|Message
argument_list|(
name|responseBytes
argument_list|)
decl_stmt|;
name|recs
operator|=
name|response
operator|.
name|getSectionArray
argument_list|(
name|Section
operator|.
name|ANSWER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong result"
argument_list|,
literal|"cn005.hwx.test."
argument_list|,
operator|(
operator|(
name|PTRRecord
operator|)
name|recs
index|[
literal|0
index|]
operator|)
operator|.
name|getTarget
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReverseZoneNames ()
specifier|public
name|void
name|testReverseZoneNames
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_DNS_ZONE_SUBNET
argument_list|,
literal|"172.26.32.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_DNS_ZONE_MASK
argument_list|,
literal|"255.255.224.0"
argument_list|)
expr_stmt|;
name|Name
name|name
init|=
name|getRegistryDNS
argument_list|()
operator|.
name|getReverseZoneName
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong name"
argument_list|,
literal|"26.172.in-addr.arpa."
argument_list|,
name|name
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitReverseZoneNames ()
specifier|public
name|void
name|testSplitReverseZoneNames
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|registryDNS
operator|=
operator|new
name|RegistryDNS
argument_list|(
literal|"TestRegistry"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNS_DOMAIN
argument_list|,
literal|"example.com"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_DNS_SPLIT_REVERSE_ZONE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_DNS_SPLIT_REVERSE_ZONE_RANGE
argument_list|,
literal|"256"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_DNS_ZONE_SUBNET
argument_list|,
literal|"172.26.32.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_DNS_ZONE_MASK
argument_list|,
literal|"255.255.224.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNS_TTL
argument_list|,
literal|30L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNS_ZONES_DIR
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSecure
argument_list|()
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNSSEC_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNSSEC_PUBLIC_KEY
argument_list|,
literal|"AwEAAe1Jev0Az1khlQCvf0nud1/CNHQwwPEu8BNchZthdDxKPVn29yrD "
operator|+
literal|"CHoAWjwiGsOSw3SzIPrawSbHzyJsjn0oLBhGrH6QedFGnydoxjNsw3m/ "
operator|+
literal|"SCmOjR/a7LGBAMDFKqFioi4gOyuN66svBeY+/5uw72+0ei9AQ20gqf6q "
operator|+
literal|"l9Ozs5bV"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNSSEC_PRIVATE_KEY_FILE
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/test.private"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|registryDNS
operator|.
name|setDomainName
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|registryDNS
operator|.
name|setDNSSECEnabled
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|registryDNS
operator|.
name|addSplitReverseZones
argument_list|(
name|conf
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|registryDNS
operator|.
name|getZoneCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExampleDotCom ()
specifier|public
name|void
name|testExampleDotCom
parameter_list|()
throws|throws
name|Exception
block|{
name|Name
name|name
init|=
name|Name
operator|.
name|fromString
argument_list|(
literal|"example.com."
argument_list|)
decl_stmt|;
name|Record
index|[]
name|records
init|=
name|getRegistryDNS
argument_list|()
operator|.
name|getRecords
argument_list|(
name|name
argument_list|,
name|Type
operator|.
name|SOA
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"example.com exists:"
argument_list|,
name|records
argument_list|)
expr_stmt|;
block|}
DECL|method|getRegistryDNS ()
specifier|public
name|RegistryDNS
name|getRegistryDNS
parameter_list|()
block|{
return|return
name|registryDNS
return|;
block|}
DECL|method|setRegistryDNS ( RegistryDNS registryDNS)
specifier|public
name|void
name|setRegistryDNS
parameter_list|(
name|RegistryDNS
name|registryDNS
parameter_list|)
block|{
name|this
operator|.
name|registryDNS
operator|=
name|registryDNS
expr_stmt|;
block|}
DECL|method|getMarshal ()
specifier|public
name|RegistryUtils
operator|.
name|ServiceRecordMarshal
name|getMarshal
parameter_list|()
block|{
return|return
name|marshal
return|;
block|}
DECL|method|setMarshal ( RegistryUtils.ServiceRecordMarshal marshal)
specifier|public
name|void
name|setMarshal
parameter_list|(
name|RegistryUtils
operator|.
name|ServiceRecordMarshal
name|marshal
parameter_list|)
block|{
name|this
operator|.
name|marshal
operator|=
name|marshal
expr_stmt|;
block|}
block|}
end_class

end_unit

