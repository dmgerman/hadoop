begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.secure
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|secure
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|MiniKdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|RegistryTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|zk
operator|.
name|RegistrySecurity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|zk
operator|.
name|ZookeeperConfigOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|services
operator|.
name|AddingCompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|services
operator|.
name|MicroZookeeperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|services
operator|.
name|MicroZookeeperServiceKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Add kerberos tests. This is based on the (JUnit3) KerberosSecurityTestcase  * and its test case,<code>TestMiniKdc</code>  */
end_comment

begin_class
DECL|class|AbstractSecureRegistryTest
specifier|public
class|class
name|AbstractSecureRegistryTest
extends|extends
name|RegistryTestHelper
block|{
DECL|field|REALM
specifier|public
specifier|static
specifier|final
name|String
name|REALM
init|=
literal|"EXAMPLE.COM"
decl_stmt|;
DECL|field|ZOOKEEPER
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER
init|=
literal|"zookeeper"
decl_stmt|;
DECL|field|ZOOKEEPER_LOCALHOST
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_LOCALHOST
init|=
literal|"zookeeper/localhost"
decl_stmt|;
DECL|field|ZOOKEEPER_1270001
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_1270001
init|=
literal|"zookeeper/127.0.0.1"
decl_stmt|;
DECL|field|ZOOKEEPER_REALM
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_REALM
init|=
literal|"zookeeper@"
operator|+
name|REALM
decl_stmt|;
DECL|field|ZOOKEEPER_CLIENT_CONTEXT
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_CLIENT_CONTEXT
init|=
name|ZOOKEEPER
decl_stmt|;
DECL|field|ZOOKEEPER_SERVER_CONTEXT
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_SERVER_CONTEXT
init|=
literal|"ZOOKEEPER_SERVER"
decl_stmt|;
empty_stmt|;
DECL|field|ZOOKEEPER_LOCALHOST_REALM
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_LOCALHOST_REALM
init|=
name|ZOOKEEPER_LOCALHOST
operator|+
literal|"@"
operator|+
name|REALM
decl_stmt|;
DECL|field|ALICE
specifier|public
specifier|static
specifier|final
name|String
name|ALICE
init|=
literal|"alice"
decl_stmt|;
DECL|field|ALICE_CLIENT_CONTEXT
specifier|public
specifier|static
specifier|final
name|String
name|ALICE_CLIENT_CONTEXT
init|=
literal|"alice"
decl_stmt|;
DECL|field|ALICE_LOCALHOST
specifier|public
specifier|static
specifier|final
name|String
name|ALICE_LOCALHOST
init|=
literal|"alice/localhost"
decl_stmt|;
DECL|field|BOB
specifier|public
specifier|static
specifier|final
name|String
name|BOB
init|=
literal|"bob"
decl_stmt|;
DECL|field|BOB_CLIENT_CONTEXT
specifier|public
specifier|static
specifier|final
name|String
name|BOB_CLIENT_CONTEXT
init|=
literal|"bob"
decl_stmt|;
DECL|field|BOB_LOCALHOST
specifier|public
specifier|static
specifier|final
name|String
name|BOB_LOCALHOST
init|=
literal|"bob/localhost"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractSecureRegistryTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CONF
specifier|public
specifier|static
specifier|final
name|Configuration
name|CONF
decl_stmt|;
static|static
block|{
name|CONF
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|CONF
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setBoolean
argument_list|(
literal|"hadoop.security.authorization"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|field|classTeardown
specifier|private
specifier|static
specifier|final
name|AddingCompositeService
name|classTeardown
init|=
operator|new
name|AddingCompositeService
argument_list|(
literal|"classTeardown"
argument_list|)
decl_stmt|;
comment|// static initializer guarantees it is always started
comment|// ahead of any @BeforeClass methods
static|static
block|{
name|classTeardown
operator|.
name|init
argument_list|(
name|CONF
argument_list|)
expr_stmt|;
name|classTeardown
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|field|SUN_SECURITY_KRB5_DEBUG
specifier|public
specifier|static
specifier|final
name|String
name|SUN_SECURITY_KRB5_DEBUG
init|=
literal|"sun.security.krb5.debug"
decl_stmt|;
DECL|field|teardown
specifier|private
specifier|final
name|AddingCompositeService
name|teardown
init|=
operator|new
name|AddingCompositeService
argument_list|(
literal|"teardown"
argument_list|)
decl_stmt|;
DECL|field|kdc
specifier|protected
specifier|static
name|MiniKdc
name|kdc
decl_stmt|;
DECL|field|keytab_zk
specifier|protected
specifier|static
name|File
name|keytab_zk
decl_stmt|;
DECL|field|keytab_bob
specifier|protected
specifier|static
name|File
name|keytab_bob
decl_stmt|;
DECL|field|keytab_alice
specifier|protected
specifier|static
name|File
name|keytab_alice
decl_stmt|;
DECL|field|kdcWorkDir
specifier|protected
specifier|static
name|File
name|kdcWorkDir
decl_stmt|;
DECL|field|kdcConf
specifier|protected
specifier|static
name|Properties
name|kdcConf
decl_stmt|;
DECL|field|registrySecurity
specifier|protected
specifier|static
name|RegistrySecurity
name|registrySecurity
decl_stmt|;
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
specifier|final
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|900000
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|methodName
specifier|public
name|TestName
name|methodName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
DECL|field|secureZK
specifier|protected
name|MicroZookeeperService
name|secureZK
decl_stmt|;
DECL|field|jaasFile
specifier|protected
specifier|static
name|File
name|jaasFile
decl_stmt|;
DECL|field|zookeeperLogin
specifier|private
name|LoginContext
name|zookeeperLogin
decl_stmt|;
DECL|field|zkServerPrincipal
specifier|private
specifier|static
name|String
name|zkServerPrincipal
decl_stmt|;
comment|/**    * All class initialization for this test class    * @throws Exception    */
annotation|@
name|BeforeClass
DECL|method|beforeSecureRegistryTestClass ()
specifier|public
specifier|static
name|void
name|beforeSecureRegistryTestClass
parameter_list|()
throws|throws
name|Exception
block|{
name|registrySecurity
operator|=
operator|new
name|RegistrySecurity
argument_list|(
literal|"registrySecurity"
argument_list|)
expr_stmt|;
name|registrySecurity
operator|.
name|init
argument_list|(
name|CONF
argument_list|)
expr_stmt|;
name|setupKDCAndPrincipals
argument_list|()
expr_stmt|;
name|RegistrySecurity
operator|.
name|clearJaasSystemProperties
argument_list|()
expr_stmt|;
name|RegistrySecurity
operator|.
name|bindJVMtoJAASFile
argument_list|(
name|jaasFile
argument_list|)
expr_stmt|;
name|initHadoopSecurity
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterSecureRegistryTestClass ()
specifier|public
specifier|static
name|void
name|afterSecureRegistryTestClass
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
name|LOG
argument_list|,
literal|"teardown of class"
argument_list|)
expr_stmt|;
name|classTeardown
operator|.
name|close
argument_list|()
expr_stmt|;
name|teardownKDC
argument_list|()
expr_stmt|;
block|}
comment|/**    * give our thread a name    */
annotation|@
name|Before
DECL|method|nameThread ()
specifier|public
name|void
name|nameThread
parameter_list|()
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"JUnit"
argument_list|)
expr_stmt|;
block|}
comment|/**    * For unknown reasons, the before-class setting of the JVM properties were    * not being picked up. This method addresses that by setting them    * before every test case    */
annotation|@
name|Before
DECL|method|beforeSecureRegistryTest ()
specifier|public
name|void
name|beforeSecureRegistryTest
parameter_list|()
block|{    }
annotation|@
name|After
DECL|method|afterSecureRegistryTest ()
specifier|public
name|void
name|afterSecureRegistryTest
parameter_list|()
throws|throws
name|IOException
block|{
name|describe
argument_list|(
name|LOG
argument_list|,
literal|"teardown of instance"
argument_list|)
expr_stmt|;
name|teardown
operator|.
name|close
argument_list|()
expr_stmt|;
name|stopSecureZK
argument_list|()
expr_stmt|;
block|}
DECL|method|addToClassTeardown (Service svc)
specifier|protected
specifier|static
name|void
name|addToClassTeardown
parameter_list|(
name|Service
name|svc
parameter_list|)
block|{
name|classTeardown
operator|.
name|addService
argument_list|(
name|svc
argument_list|)
expr_stmt|;
block|}
DECL|method|addToTeardown (Service svc)
specifier|protected
name|void
name|addToTeardown
parameter_list|(
name|Service
name|svc
parameter_list|)
block|{
name|teardown
operator|.
name|addService
argument_list|(
name|svc
argument_list|)
expr_stmt|;
block|}
DECL|method|teardownKDC ()
specifier|public
specifier|static
name|void
name|teardownKDC
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|kdc
operator|!=
literal|null
condition|)
block|{
name|kdc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|kdc
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Sets up the KDC and a set of principals in the JAAS file    *    * @throws Exception    */
DECL|method|setupKDCAndPrincipals ()
specifier|public
specifier|static
name|void
name|setupKDCAndPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up the KDC
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.dir"
argument_list|,
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
name|kdcWorkDir
operator|=
operator|new
name|File
argument_list|(
name|target
argument_list|,
literal|"kdc"
argument_list|)
expr_stmt|;
name|kdcWorkDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|kdcWorkDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|kdcWorkDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|kdcConf
operator|=
name|MiniKdc
operator|.
name|createConf
argument_list|()
expr_stmt|;
name|kdcConf
operator|.
name|setProperty
argument_list|(
name|MiniKdc
operator|.
name|DEBUG
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|kdc
operator|=
operator|new
name|MiniKdc
argument_list|(
name|kdcConf
argument_list|,
name|kdcWorkDir
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|start
argument_list|()
expr_stmt|;
name|keytab_zk
operator|=
name|createKeytab
argument_list|(
name|ZOOKEEPER
argument_list|,
literal|"zookeeper.keytab"
argument_list|)
expr_stmt|;
name|keytab_alice
operator|=
name|createKeytab
argument_list|(
name|ALICE
argument_list|,
literal|"alice.keytab"
argument_list|)
expr_stmt|;
name|keytab_bob
operator|=
name|createKeytab
argument_list|(
name|BOB
argument_list|,
literal|"bob.keytab"
argument_list|)
expr_stmt|;
name|zkServerPrincipal
operator|=
name|Shell
operator|.
name|WINDOWS
condition|?
name|ZOOKEEPER_1270001
else|:
name|ZOOKEEPER_LOCALHOST
expr_stmt|;
name|StringBuilder
name|jaas
init|=
operator|new
name|StringBuilder
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|jaas
operator|.
name|append
argument_list|(
name|registrySecurity
operator|.
name|createJAASEntry
argument_list|(
name|ZOOKEEPER_CLIENT_CONTEXT
argument_list|,
name|ZOOKEEPER
argument_list|,
name|keytab_zk
argument_list|)
argument_list|)
expr_stmt|;
name|jaas
operator|.
name|append
argument_list|(
name|registrySecurity
operator|.
name|createJAASEntry
argument_list|(
name|ZOOKEEPER_SERVER_CONTEXT
argument_list|,
name|zkServerPrincipal
argument_list|,
name|keytab_zk
argument_list|)
argument_list|)
expr_stmt|;
name|jaas
operator|.
name|append
argument_list|(
name|registrySecurity
operator|.
name|createJAASEntry
argument_list|(
name|ALICE_CLIENT_CONTEXT
argument_list|,
name|ALICE_LOCALHOST
argument_list|,
name|keytab_alice
argument_list|)
argument_list|)
expr_stmt|;
name|jaas
operator|.
name|append
argument_list|(
name|registrySecurity
operator|.
name|createJAASEntry
argument_list|(
name|BOB_CLIENT_CONTEXT
argument_list|,
name|BOB_LOCALHOST
argument_list|,
name|keytab_bob
argument_list|)
argument_list|)
expr_stmt|;
name|jaasFile
operator|=
operator|new
name|File
argument_list|(
name|kdcWorkDir
argument_list|,
literal|"jaas.txt"
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|jaasFile
argument_list|,
name|jaas
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"\n"
operator|+
name|jaas
argument_list|)
expr_stmt|;
name|RegistrySecurity
operator|.
name|bindJVMtoJAASFile
argument_list|(
name|jaasFile
argument_list|)
expr_stmt|;
block|}
comment|//
DECL|field|kerberosRule
specifier|protected
specifier|static
specifier|final
name|String
name|kerberosRule
init|=
literal|"RULE:[1:$1@$0](.*@EXAMPLE.COM)s/@.*//\nDEFAULT"
decl_stmt|;
comment|/**    * Init hadoop security by setting up the UGI config    */
DECL|method|initHadoopSecurity ()
specifier|public
specifier|static
name|void
name|initHadoopSecurity
parameter_list|()
block|{
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|CONF
argument_list|)
expr_stmt|;
name|KerberosName
operator|.
name|setRules
argument_list|(
name|kerberosRule
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stop the secure ZK and log out the ZK account    */
DECL|method|stopSecureZK ()
specifier|public
specifier|synchronized
name|void
name|stopSecureZK
parameter_list|()
block|{
name|ServiceOperations
operator|.
name|stop
argument_list|(
name|secureZK
argument_list|)
expr_stmt|;
name|secureZK
operator|=
literal|null
expr_stmt|;
name|logout
argument_list|(
name|zookeeperLogin
argument_list|)
expr_stmt|;
name|zookeeperLogin
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getKdc ()
specifier|public
specifier|static
name|MiniKdc
name|getKdc
parameter_list|()
block|{
return|return
name|kdc
return|;
block|}
DECL|method|getKdcWorkDir ()
specifier|public
specifier|static
name|File
name|getKdcWorkDir
parameter_list|()
block|{
return|return
name|kdcWorkDir
return|;
block|}
DECL|method|getKdcConf ()
specifier|public
specifier|static
name|Properties
name|getKdcConf
parameter_list|()
block|{
return|return
name|kdcConf
return|;
block|}
comment|/**    * Create a secure instance    * @param name instance name    * @return the instance    * @throws Exception    */
DECL|method|createSecureZKInstance (String name)
specifier|protected
specifier|static
name|MicroZookeeperService
name|createSecureZKInstance
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|context
init|=
name|ZOOKEEPER_SERVER_CONTEXT
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|File
name|testdir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.dir"
argument_list|,
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|workDir
init|=
operator|new
name|File
argument_list|(
name|testdir
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|workDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|workDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
name|ZookeeperConfigOptions
operator|.
name|PROP_ZK_SERVER_MAINTAIN_CONNECTION_DESPITE_SASL_FAILURE
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|RegistrySecurity
operator|.
name|validateContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MicroZookeeperServiceKeys
operator|.
name|KEY_REGISTRY_ZKSERVICE_JAAS_CONTEXT
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|MicroZookeeperService
name|secureZK
init|=
operator|new
name|MicroZookeeperService
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|secureZK
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|secureZK
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|secureZK
return|;
block|}
comment|/**    * Create the keytabl for the given principal, includes    * raw principal and $principal/localhost    * @param principal principal short name    * @param filename filename of keytab    * @return file of keytab    * @throws Exception    */
DECL|method|createKeytab (String principal, String filename)
specifier|public
specifier|static
name|File
name|createKeytab
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNotEmpty
argument_list|(
literal|"empty principal"
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|assertNotEmpty
argument_list|(
literal|"empty host"
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Null KDC"
argument_list|,
name|kdc
argument_list|)
expr_stmt|;
name|File
name|keytab
init|=
operator|new
name|File
argument_list|(
name|kdcWorkDir
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytab
argument_list|,
name|principal
argument_list|,
name|principal
operator|+
literal|"/localhost"
argument_list|,
name|principal
operator|+
literal|"/127.0.0.1"
argument_list|)
expr_stmt|;
return|return
name|keytab
return|;
block|}
DECL|method|getPrincipalAndRealm (String principal)
specifier|public
specifier|static
name|String
name|getPrincipalAndRealm
parameter_list|(
name|String
name|principal
parameter_list|)
block|{
return|return
name|principal
operator|+
literal|"@"
operator|+
name|getRealm
argument_list|()
return|;
block|}
DECL|method|getRealm ()
specifier|protected
specifier|static
name|String
name|getRealm
parameter_list|()
block|{
return|return
name|kdc
operator|.
name|getRealm
argument_list|()
return|;
block|}
comment|/**    * Log in, defaulting to the client context    * @param principal principal    * @param context context    * @param keytab keytab    * @return the logged in context    * @throws LoginException failure to log in    * @throws FileNotFoundException no keytab    */
DECL|method|login (String principal, String context, File keytab)
specifier|protected
name|LoginContext
name|login
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|context
parameter_list|,
name|File
name|keytab
parameter_list|)
throws|throws
name|LoginException
throws|,
name|FileNotFoundException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Logging in as {} in context {} with keytab {}"
argument_list|,
name|principal
argument_list|,
name|context
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|keytab
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|()
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
operator|new
name|KerberosPrincipal
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|(
literal|false
argument_list|,
name|principals
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|LoginContext
name|login
decl_stmt|;
name|login
operator|=
operator|new
name|LoginContext
argument_list|(
name|context
argument_list|,
name|subject
argument_list|,
literal|null
argument_list|,
name|KerberosConfiguration
operator|.
name|createClientConfig
argument_list|(
name|principal
argument_list|,
name|keytab
argument_list|)
argument_list|)
expr_stmt|;
name|login
operator|.
name|login
argument_list|()
expr_stmt|;
return|return
name|login
return|;
block|}
comment|/**    * Start the secure ZK instance using the test method name as the path.    * As the entry is saved to the {@link #secureZK} field, it    * is automatically stopped after the test case.    * @throws Exception on any failure    */
DECL|method|startSecureZK ()
specifier|protected
specifier|synchronized
name|void
name|startSecureZK
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
literal|"Zookeeper is already running"
argument_list|,
name|secureZK
argument_list|)
expr_stmt|;
name|zookeeperLogin
operator|=
name|login
argument_list|(
name|zkServerPrincipal
argument_list|,
name|ZOOKEEPER_SERVER_CONTEXT
argument_list|,
name|keytab_zk
argument_list|)
expr_stmt|;
name|secureZK
operator|=
name|createSecureZKInstance
argument_list|(
literal|"test-"
operator|+
name|methodName
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|secureZK
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

