begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.client.types
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|InvalidRecordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonAnyGetter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonAnySetter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|annotate
operator|.
name|JsonSerialize
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * JSON-marshallable description of a single component.  * It supports the deserialization of unknown attributes, but does  * not support their creation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
annotation|@
name|JsonSerialize
argument_list|(
name|include
operator|=
name|JsonSerialize
operator|.
name|Inclusion
operator|.
name|NON_NULL
argument_list|)
DECL|class|ServiceRecord
specifier|public
class|class
name|ServiceRecord
implements|implements
name|Cloneable
block|{
comment|/**    * A type string which MUST be in the serialized json. This permits    * fast discarding of invalid entries    */
DECL|field|RECORD_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|RECORD_TYPE
init|=
literal|"JSONServiceRecord"
decl_stmt|;
comment|/**    * The type field. This must be the string {@link #RECORD_TYPE}    */
DECL|field|type
specifier|public
name|String
name|type
init|=
name|RECORD_TYPE
decl_stmt|;
comment|/**    * Description string    */
DECL|field|description
specifier|public
name|String
name|description
decl_stmt|;
comment|/**    * map to handle unknown attributes.    */
DECL|field|attributes
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
comment|/**    * List of endpoints intended for use to external callers    */
DECL|field|external
specifier|public
name|List
argument_list|<
name|Endpoint
argument_list|>
name|external
init|=
operator|new
name|ArrayList
argument_list|<
name|Endpoint
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * List of endpoints for use<i>within</i> an application.    */
DECL|field|internal
specifier|public
name|List
argument_list|<
name|Endpoint
argument_list|>
name|internal
init|=
operator|new
name|ArrayList
argument_list|<
name|Endpoint
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Create a service record with no ID, description or registration time.    * Endpoint lists are set to empty lists.    */
DECL|method|ServiceRecord ()
specifier|public
name|ServiceRecord
parameter_list|()
block|{   }
comment|/**    * Deep cloning constructor    * @param that service record source    */
DECL|method|ServiceRecord (ServiceRecord that)
specifier|public
name|ServiceRecord
parameter_list|(
name|ServiceRecord
name|that
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|that
operator|.
name|description
expr_stmt|;
comment|// others
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|thatAttrs
init|=
name|that
operator|.
name|attributes
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|thatAttrs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// endpoints
name|List
argument_list|<
name|Endpoint
argument_list|>
name|src
init|=
name|that
operator|.
name|internal
decl_stmt|;
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
block|{
name|internal
operator|=
operator|new
name|ArrayList
argument_list|<
name|Endpoint
argument_list|>
argument_list|(
name|src
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|src
control|)
block|{
name|internal
operator|.
name|add
argument_list|(
operator|new
name|Endpoint
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|src
operator|=
name|that
operator|.
name|external
expr_stmt|;
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
block|{
name|external
operator|=
operator|new
name|ArrayList
argument_list|<
name|Endpoint
argument_list|>
argument_list|(
name|src
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|src
control|)
block|{
name|external
operator|.
name|add
argument_list|(
operator|new
name|Endpoint
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Add an external endpoint    * @param endpoint endpoint to set    */
DECL|method|addExternalEndpoint (Endpoint endpoint)
specifier|public
name|void
name|addExternalEndpoint
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|endpoint
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|validate
argument_list|()
expr_stmt|;
name|external
operator|.
name|add
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add an internal endpoint    * @param endpoint endpoint to set    */
DECL|method|addInternalEndpoint (Endpoint endpoint)
specifier|public
name|void
name|addInternalEndpoint
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|endpoint
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|validate
argument_list|()
expr_stmt|;
name|internal
operator|.
name|add
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
comment|/**    * Look up an internal endpoint    * @param api API    * @return the endpoint or null if there was no match    */
DECL|method|getInternalEndpoint (String api)
specifier|public
name|Endpoint
name|getInternalEndpoint
parameter_list|(
name|String
name|api
parameter_list|)
block|{
return|return
name|findByAPI
argument_list|(
name|internal
argument_list|,
name|api
argument_list|)
return|;
block|}
comment|/**    * Look up an external endpoint    * @param api API    * @return the endpoint or null if there was no match    */
DECL|method|getExternalEndpoint (String api)
specifier|public
name|Endpoint
name|getExternalEndpoint
parameter_list|(
name|String
name|api
parameter_list|)
block|{
return|return
name|findByAPI
argument_list|(
name|external
argument_list|,
name|api
argument_list|)
return|;
block|}
comment|/**    * Handle unknown attributes by storing them in the    * {@link #attributes} map    * @param key attribute name    * @param value attribute value.    */
annotation|@
name|JsonAnySetter
DECL|method|set (String key, Object value)
specifier|public
name|void
name|set
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * The map of "other" attributes set when parsing. These    * are not included in the JSON value of this record when it    * is generated.    * @return a map of any unknown attributes in the deserialized JSON.    */
annotation|@
name|JsonAnyGetter
DECL|method|attributes ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
parameter_list|()
block|{
return|return
name|attributes
return|;
block|}
comment|/**    * Get the "other" attribute with a specific key    * @param key key to look up    * @return the value or null    */
DECL|method|get (String key)
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|attributes
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Get the "other" attribute with a specific key.    * @param key key to look up    * @param defVal default value    * @return the value as a string,    * or<code>defval</code> if the value was not present    */
DECL|method|get (String key, String defVal)
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defVal
parameter_list|)
block|{
name|String
name|val
init|=
name|attributes
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|val
operator|!=
literal|null
condition|?
name|val
else|:
name|defVal
return|;
block|}
comment|/**    * Find an endpoint by its API    * @param list list    * @param api api name    * @return the endpoint or null if there was no match    */
DECL|method|findByAPI (List<Endpoint> list, String api)
specifier|private
name|Endpoint
name|findByAPI
parameter_list|(
name|List
argument_list|<
name|Endpoint
argument_list|>
name|list
parameter_list|,
name|String
name|api
parameter_list|)
block|{
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|list
control|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|api
operator|.
name|equals
argument_list|(
name|api
argument_list|)
condition|)
block|{
return|return
name|endpoint
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ServiceRecord{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"description='"
argument_list|)
operator|.
name|append
argument_list|(
name|description
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"; external endpoints: {"
argument_list|)
expr_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|external
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|endpoint
argument_list|)
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}; internal endpoints: {"
argument_list|)
expr_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|internal
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|endpoint
operator|!=
literal|null
condition|?
name|endpoint
operator|.
name|toString
argument_list|()
else|:
literal|"NULL ENDPOINT"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", attributes: {"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attr
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|attr
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"=\""
argument_list|)
operator|.
name|append
argument_list|(
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", attributes: {"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Shallow clone: all endpoints will be shared across instances    * @return a clone of the instance    * @throws CloneNotSupportedException    */
annotation|@
name|Override
DECL|method|clone ()
specifier|protected
name|Object
name|clone
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
return|return
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
block|}
end_class

end_unit

