begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.server.integration
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|integration
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|api
operator|.
name|BackgroundCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|zk
operator|.
name|RegistryBindingSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|yarn
operator|.
name|PersistencePolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|services
operator|.
name|DeleteCompletionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|services
operator|.
name|RegistryAdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_comment
comment|/**  * Handle RM events by updating the registry  *<p>  * These actions are all implemented as event handlers to operations  * which come from the RM.  *<p>  * This service is expected to be executed by a user with the permissions  * to manipulate the entire registry,  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
literal|"YARN"
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|RMRegistryOperationsService
specifier|public
class|class
name|RMRegistryOperationsService
extends|extends
name|RegistryAdminService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RMRegistryOperationsService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|purgeOnCompletionPolicy
specifier|private
name|PurgePolicy
name|purgeOnCompletionPolicy
init|=
name|PurgePolicy
operator|.
name|PurgeAll
decl_stmt|;
DECL|method|RMRegistryOperationsService (String name)
specifier|public
name|RMRegistryOperationsService
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|RMRegistryOperationsService (String name, RegistryBindingSource bindingSource)
specifier|public
name|RMRegistryOperationsService
parameter_list|(
name|String
name|name
parameter_list|,
name|RegistryBindingSource
name|bindingSource
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|bindingSource
argument_list|)
expr_stmt|;
block|}
comment|/**    * Extend the parent service initialization by verifying that the    * service knows âin a secure clusterâ the realm in which it is executing.    * It needs this to properly build up the user names and hence their    * access rights.    *    * @param conf configuration of the service    * @throws Exception    */
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verifyRealmValidity
argument_list|()
expr_stmt|;
block|}
DECL|method|getPurgeOnCompletionPolicy ()
specifier|public
name|PurgePolicy
name|getPurgeOnCompletionPolicy
parameter_list|()
block|{
return|return
name|purgeOnCompletionPolicy
return|;
block|}
DECL|method|setPurgeOnCompletionPolicy (PurgePolicy purgeOnCompletionPolicy)
specifier|public
name|void
name|setPurgeOnCompletionPolicy
parameter_list|(
name|PurgePolicy
name|purgeOnCompletionPolicy
parameter_list|)
block|{
name|this
operator|.
name|purgeOnCompletionPolicy
operator|=
name|purgeOnCompletionPolicy
expr_stmt|;
block|}
DECL|method|onApplicationAttemptRegistered (ApplicationAttemptId attemptId, String host, int rpcport, String trackingurl)
specifier|public
name|void
name|onApplicationAttemptRegistered
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|rpcport
parameter_list|,
name|String
name|trackingurl
parameter_list|)
throws|throws
name|IOException
block|{    }
DECL|method|onApplicationLaunched (ApplicationId id)
specifier|public
name|void
name|onApplicationLaunched
parameter_list|(
name|ApplicationId
name|id
parameter_list|)
throws|throws
name|IOException
block|{    }
comment|/**    * Actions to take as an AM registers itself with the RM.    * @param attemptId attempt ID    * @throws IOException problems    */
DECL|method|onApplicationMasterRegistered (ApplicationAttemptId attemptId)
specifier|public
name|void
name|onApplicationMasterRegistered
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|)
throws|throws
name|IOException
block|{   }
comment|/**    * Actions to take when the AM container is completed    * @param containerId  container ID    * @throws IOException problems    */
DECL|method|onAMContainerFinished (ContainerId containerId)
specifier|public
name|void
name|onAMContainerFinished
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"AM Container {} finished, purging application attempt records"
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
comment|// remove all application attempt entries
name|purgeAppAttemptRecords
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// also treat as a container finish to remove container
comment|// level records for the AM container
name|onContainerFinished
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
comment|/**    * remove all application attempt entries    * @param attemptId attempt ID    */
DECL|method|purgeAppAttemptRecords (ApplicationAttemptId attemptId)
specifier|protected
name|void
name|purgeAppAttemptRecords
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|)
block|{
name|purgeRecordsAsync
argument_list|(
literal|"/"
argument_list|,
name|attemptId
operator|.
name|toString
argument_list|()
argument_list|,
name|PersistencePolicies
operator|.
name|APPLICATION_ATTEMPT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Actions to take when an application attempt is completed    * @param attemptId  application  ID    * @throws IOException problems    */
DECL|method|onApplicationAttemptUnregistered (ApplicationAttemptId attemptId)
specifier|public
name|void
name|onApplicationAttemptUnregistered
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application attempt {} unregistered, purging app attempt records"
argument_list|,
name|attemptId
argument_list|)
expr_stmt|;
name|purgeAppAttemptRecords
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Actions to take when an application is completed    * @param id  application  ID    * @throws IOException problems    */
DECL|method|onApplicationCompleted (ApplicationId id)
specifier|public
name|void
name|onApplicationCompleted
parameter_list|(
name|ApplicationId
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application {} completed, purging application-level records"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|purgeRecordsAsync
argument_list|(
literal|"/"
argument_list|,
name|id
operator|.
name|toString
argument_list|()
argument_list|,
name|PersistencePolicies
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
block|}
DECL|method|onApplicationAttemptAdded (ApplicationAttemptId appAttemptId)
specifier|public
name|void
name|onApplicationAttemptAdded
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{   }
comment|/**    * This is the event where the user is known, so the user directory    * can be created    * @param applicationId application  ID    * @param user username    * @throws IOException problems    */
DECL|method|onStateStoreEvent (ApplicationId applicationId, String user)
specifier|public
name|void
name|onStateStoreEvent
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|initUserRegistryAsync
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
comment|/**    * Actions to take when the AM container is completed    * @param id  container ID    * @throws IOException problems    */
DECL|method|onContainerFinished (ContainerId id)
specifier|public
name|void
name|onContainerFinished
parameter_list|(
name|ContainerId
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container {} finished, purging container-level records"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|purgeRecordsAsync
argument_list|(
literal|"/"
argument_list|,
name|id
operator|.
name|toString
argument_list|()
argument_list|,
name|PersistencePolicies
operator|.
name|CONTAINER
argument_list|)
expr_stmt|;
block|}
comment|/**    * Queue an async operation to purge all matching records under a base path.    *<ol>    *<li>Uses a depth first search</li>    *<li>A match is on ID and persistence policy, or, if policy==-1, any match</li>    *<li>If a record matches then it is deleted without any child searches</li>    *<li>Deletions will be asynchronous if a callback is provided</li>    *</ol>    * @param path base path    * @param id ID for service record.id    * @param persistencePolicyMatch ID for the persistence policy to match:    * no match, no delete.    * @return a future that returns the #of records deleted    */
annotation|@
name|VisibleForTesting
DECL|method|purgeRecordsAsync (String path, String id, String persistencePolicyMatch)
specifier|public
name|Future
argument_list|<
name|Integer
argument_list|>
name|purgeRecordsAsync
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|persistencePolicyMatch
parameter_list|)
block|{
return|return
name|purgeRecordsAsync
argument_list|(
name|path
argument_list|,
name|id
argument_list|,
name|persistencePolicyMatch
argument_list|,
name|purgeOnCompletionPolicy
argument_list|,
operator|new
name|DeleteCompletionCallback
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Queue an async operation to purge all matching records under a base path.    *<ol>    *<li>Uses a depth first search</li>    *<li>A match is on ID and persistence policy, or, if policy==-1, any match</li>    *<li>If a record matches then it is deleted without any child searches</li>    *<li>Deletions will be asynchronous if a callback is provided</li>    *</ol>    * @param path base path    * @param id ID for service record.id    * @param persistencePolicyMatch ID for the persistence policy to match:    * no match, no delete.    * @param purgePolicy how to react to children under the entry    * @param callback an optional callback    * @return a future that returns the #of records deleted    */
annotation|@
name|VisibleForTesting
DECL|method|purgeRecordsAsync (String path, String id, String persistencePolicyMatch, PurgePolicy purgePolicy, BackgroundCallback callback)
specifier|public
name|Future
argument_list|<
name|Integer
argument_list|>
name|purgeRecordsAsync
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|persistencePolicyMatch
parameter_list|,
name|PurgePolicy
name|purgePolicy
parameter_list|,
name|BackgroundCallback
name|callback
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|" records under {} with ID {} and policy {}: {}"
argument_list|,
name|path
argument_list|,
name|id
argument_list|,
name|persistencePolicyMatch
argument_list|)
expr_stmt|;
return|return
name|submit
argument_list|(
operator|new
name|AsyncPurge
argument_list|(
name|path
argument_list|,
operator|new
name|SelectByYarnPersistence
argument_list|(
name|id
argument_list|,
name|persistencePolicyMatch
argument_list|)
argument_list|,
name|purgePolicy
argument_list|,
name|callback
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

