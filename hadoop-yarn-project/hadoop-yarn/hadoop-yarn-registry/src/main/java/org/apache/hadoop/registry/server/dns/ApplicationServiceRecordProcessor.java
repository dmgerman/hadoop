begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.server.dns
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|dns
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A processor for generating application DNS records from registry service  * records.  */
end_comment

begin_class
DECL|class|ApplicationServiceRecordProcessor
specifier|public
class|class
name|ApplicationServiceRecordProcessor
extends|extends
name|BaseServiceRecordProcessor
block|{
comment|/**    * Create an application service record processor.    *    * @param record       the service record    * @param path         the service record registry node path    * @param domain       the DNS zone/domain name    * @param zoneSelector returns the zone associated with the provided name.    * @throws Exception  if an issue is generated during instantiation.    */
DECL|method|ApplicationServiceRecordProcessor ( ServiceRecord record, String path, String domain, ZoneSelector zoneSelector)
specifier|public
name|ApplicationServiceRecordProcessor
parameter_list|(
name|ServiceRecord
name|record
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|domain
parameter_list|,
name|ZoneSelector
name|zoneSelector
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|record
argument_list|,
name|path
argument_list|,
name|domain
argument_list|,
name|zoneSelector
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initializes the DNS record type to descriptor mapping based on the    * provided service record.    *    * @param serviceRecord the registry service record.    * @throws Exception if an issue is encountered.    */
DECL|method|initTypeToInfoMapping (ServiceRecord serviceRecord)
annotation|@
name|Override
specifier|public
name|void
name|initTypeToInfoMapping
parameter_list|(
name|ServiceRecord
name|serviceRecord
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|type
range|:
name|getRecordTypes
argument_list|()
control|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Type
operator|.
name|A
case|:
name|createAInfo
argument_list|(
name|serviceRecord
argument_list|)
expr_stmt|;
break|break;
case|case
name|Type
operator|.
name|AAAA
case|:
name|createAAAAInfo
argument_list|(
name|serviceRecord
argument_list|)
expr_stmt|;
break|break;
case|case
name|Type
operator|.
name|TXT
case|:
name|createTXTInfo
argument_list|(
name|serviceRecord
argument_list|)
expr_stmt|;
break|break;
case|case
name|Type
operator|.
name|CNAME
case|:
name|createCNAMEInfo
argument_list|(
name|serviceRecord
argument_list|)
expr_stmt|;
break|break;
case|case
name|Type
operator|.
name|SRV
case|:
name|createSRVInfo
argument_list|(
name|serviceRecord
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown type "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Create an application TXT record descriptor.    *    * @param serviceRecord the service record.    * @throws Exception if there is an issue during descriptor creation.    */
DECL|method|createTXTInfo (ServiceRecord serviceRecord)
specifier|protected
name|void
name|createTXTInfo
parameter_list|(
name|ServiceRecord
name|serviceRecord
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
init|=
name|serviceRecord
operator|.
name|external
decl_stmt|;
name|List
argument_list|<
name|RecordDescriptor
argument_list|>
name|recordDescriptors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|TXTApplicationRecordDescriptor
name|txtInfo
decl_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|txtInfo
operator|=
operator|new
name|TXTApplicationRecordDescriptor
argument_list|(
name|serviceRecord
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|recordDescriptors
operator|.
name|add
argument_list|(
name|txtInfo
argument_list|)
expr_stmt|;
block|}
name|registerRecordDescriptor
argument_list|(
name|Type
operator|.
name|TXT
argument_list|,
name|recordDescriptors
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an application SRV record descriptor.    *    * @param serviceRecord the service record.    * @throws Exception if there is an issue during descriptor creation.    */
DECL|method|createSRVInfo (ServiceRecord serviceRecord)
specifier|protected
name|void
name|createSRVInfo
parameter_list|(
name|ServiceRecord
name|serviceRecord
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
init|=
name|serviceRecord
operator|.
name|external
decl_stmt|;
name|List
argument_list|<
name|RecordDescriptor
argument_list|>
name|recordDescriptors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|SRVApplicationRecordDescriptor
name|srvInfo
decl_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|srvInfo
operator|=
operator|new
name|SRVApplicationRecordDescriptor
argument_list|(
name|serviceRecord
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|recordDescriptors
operator|.
name|add
argument_list|(
name|srvInfo
argument_list|)
expr_stmt|;
block|}
name|registerRecordDescriptor
argument_list|(
name|Type
operator|.
name|SRV
argument_list|,
name|recordDescriptors
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an application CNAME record descriptor.    *    * @param serviceRecord the service record.    * @throws Exception if there is an issue during descriptor creation.    */
DECL|method|createCNAMEInfo (ServiceRecord serviceRecord)
specifier|protected
name|void
name|createCNAMEInfo
parameter_list|(
name|ServiceRecord
name|serviceRecord
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
init|=
name|serviceRecord
operator|.
name|external
decl_stmt|;
name|List
argument_list|<
name|RecordDescriptor
argument_list|>
name|recordDescriptors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|CNAMEApplicationRecordDescriptor
name|cnameInfo
decl_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|cnameInfo
operator|=
operator|new
name|CNAMEApplicationRecordDescriptor
argument_list|(
name|serviceRecord
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|recordDescriptors
operator|.
name|add
argument_list|(
name|cnameInfo
argument_list|)
expr_stmt|;
block|}
name|registerRecordDescriptor
argument_list|(
name|Type
operator|.
name|CNAME
argument_list|,
name|recordDescriptors
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an application AAAA record descriptor.    *    * @param record the service record.    * @throws Exception if there is an issue during descriptor creation.    */
DECL|method|createAAAAInfo (ServiceRecord record)
specifier|protected
name|void
name|createAAAAInfo
parameter_list|(
name|ServiceRecord
name|record
parameter_list|)
throws|throws
name|Exception
block|{
name|AAAAApplicationRecordDescriptor
name|recordInfo
init|=
operator|new
name|AAAAApplicationRecordDescriptor
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|record
argument_list|)
decl_stmt|;
name|registerRecordDescriptor
argument_list|(
name|Type
operator|.
name|AAAA
argument_list|,
name|recordInfo
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an application A record descriptor.    *    * @param record the service record.    * @throws Exception if there is an issue during descriptor creation.    */
DECL|method|createAInfo (ServiceRecord record)
specifier|protected
name|void
name|createAInfo
parameter_list|(
name|ServiceRecord
name|record
parameter_list|)
throws|throws
name|Exception
block|{
name|AApplicationRecordDescriptor
name|recordInfo
init|=
operator|new
name|AApplicationRecordDescriptor
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|record
argument_list|)
decl_stmt|;
name|registerRecordDescriptor
argument_list|(
name|Type
operator|.
name|A
argument_list|,
name|recordInfo
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the record types associated with a container service record.    *    * @return the record type array    */
DECL|method|getRecordTypes ()
annotation|@
name|Override
specifier|public
name|int
index|[]
name|getRecordTypes
parameter_list|()
block|{
return|return
operator|new
name|int
index|[]
block|{
name|Type
operator|.
name|A
block|,
name|Type
operator|.
name|AAAA
block|,
name|Type
operator|.
name|CNAME
block|,
name|Type
operator|.
name|SRV
block|,
name|Type
operator|.
name|TXT
block|}
return|;
block|}
comment|/**    * An application TXT record descriptor.    */
DECL|class|TXTApplicationRecordDescriptor
class|class
name|TXTApplicationRecordDescriptor
extends|extends
name|ApplicationRecordDescriptor
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
block|{
comment|/**      * Creates an application TXT record descriptor.      *      * @param record service record      * @throws Exception      */
DECL|method|TXTApplicationRecordDescriptor (ServiceRecord record, Endpoint endpoint)
specifier|public
name|TXTApplicationRecordDescriptor
parameter_list|(
name|ServiceRecord
name|record
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|record
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initializes the descriptor parameters.      *      * @param serviceRecord the service record.      */
DECL|method|init (ServiceRecord serviceRecord)
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|(
name|ServiceRecord
name|serviceRecord
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|getEndpoint
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|setNames
argument_list|(
operator|new
name|Name
index|[]
block|{
name|getServiceName
argument_list|()
block|,
name|getEndpointName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|setTarget
argument_list|(
name|getTextRecords
argument_list|(
name|getEndpoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * An application SRV record descriptor.    */
DECL|class|SRVApplicationRecordDescriptor
class|class
name|SRVApplicationRecordDescriptor
extends|extends
name|ApplicationRecordDescriptor
argument_list|<
name|RecordCreatorFactory
operator|.
name|HostPortInfo
argument_list|>
block|{
comment|/**      * Creates an application SRV record descriptor.      *      * @param record service record      * @throws Exception      */
DECL|method|SRVApplicationRecordDescriptor (ServiceRecord record, Endpoint endpoint)
specifier|public
name|SRVApplicationRecordDescriptor
parameter_list|(
name|ServiceRecord
name|record
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|record
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initializes the descriptor parameters.      *      * @param serviceRecord the service record.      */
DECL|method|init (ServiceRecord serviceRecord)
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|(
name|ServiceRecord
name|serviceRecord
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|getEndpoint
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|setNames
argument_list|(
operator|new
name|Name
index|[]
block|{
name|getServiceName
argument_list|()
block|,
name|getEndpointName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|setTarget
argument_list|(
operator|new
name|RecordCreatorFactory
operator|.
name|HostPortInfo
argument_list|(
name|Name
operator|.
name|fromString
argument_list|(
name|getHost
argument_list|(
name|getEndpoint
argument_list|()
argument_list|)
operator|+
literal|"."
argument_list|)
argument_list|,
name|getPort
argument_list|(
name|getEndpoint
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * An application CNAME record descriptor.    */
DECL|class|CNAMEApplicationRecordDescriptor
class|class
name|CNAMEApplicationRecordDescriptor
extends|extends
name|ApplicationRecordDescriptor
argument_list|<
name|Name
argument_list|>
block|{
comment|/**      * Creates an application CNAME record descriptor.      *      * @param path   registry path for service record      * @param record service record      * @throws Exception      */
DECL|method|CNAMEApplicationRecordDescriptor (String path, ServiceRecord record)
specifier|public
name|CNAMEApplicationRecordDescriptor
parameter_list|(
name|String
name|path
parameter_list|,
name|ServiceRecord
name|record
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates an application CNAME record descriptor.  This descriptor is the      * source for API related CNAME records.      *      * @param record   service record      * @param endpoint the API endpoint      * @throws Exception      */
DECL|method|CNAMEApplicationRecordDescriptor (ServiceRecord record, Endpoint endpoint)
specifier|public
name|CNAMEApplicationRecordDescriptor
parameter_list|(
name|ServiceRecord
name|record
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|record
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initializes the descriptor parameters.      *      * @param serviceRecord the service record.      */
DECL|method|init (ServiceRecord serviceRecord)
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|(
name|ServiceRecord
name|serviceRecord
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|getEndpoint
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|setNames
argument_list|(
operator|new
name|Name
index|[]
block|{
name|getEndpointName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|setTarget
argument_list|(
name|getServiceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * An application A record descriptor.    */
DECL|class|AApplicationRecordDescriptor
class|class
name|AApplicationRecordDescriptor
extends|extends
name|ApplicationRecordDescriptor
argument_list|<
name|InetAddress
argument_list|>
block|{
comment|/**      * Creates an application A record descriptor.      *      * @param path   registry path for service record      * @param record service record      * @throws Exception      */
DECL|method|AApplicationRecordDescriptor (String path, ServiceRecord record)
specifier|public
name|AApplicationRecordDescriptor
parameter_list|(
name|String
name|path
parameter_list|,
name|ServiceRecord
name|record
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initializes the descriptor parameters.      *      * @param serviceRecord the service record.      */
DECL|method|init (ServiceRecord serviceRecord)
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|(
name|ServiceRecord
name|serviceRecord
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|setNames
argument_list|(
operator|new
name|Name
index|[]
block|{
name|getServiceName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
init|=
name|serviceRecord
operator|.
name|external
decl_stmt|;
comment|// TODO:  do we need a "hostname" attribute for an application record or
comment|// can we rely on the first endpoint record.
name|this
operator|.
name|setTarget
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
name|getHost
argument_list|(
name|endpoints
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * An application AAAA record descriptor.    */
DECL|class|AAAAApplicationRecordDescriptor
class|class
name|AAAAApplicationRecordDescriptor
extends|extends
name|AApplicationRecordDescriptor
block|{
comment|/**      * Creates an application AAAA record descriptor.      *      * @param path   registry path for service record      * @param record service record      * @throws Exception      */
DECL|method|AAAAApplicationRecordDescriptor (String path, ServiceRecord record)
specifier|public
name|AAAAApplicationRecordDescriptor
parameter_list|(
name|String
name|path
parameter_list|,
name|ServiceRecord
name|record
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|path
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initializes the descriptor parameters.      *      * @param serviceRecord the service record.      */
DECL|method|init (ServiceRecord serviceRecord)
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|(
name|ServiceRecord
name|serviceRecord
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|init
argument_list|(
name|serviceRecord
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|setTarget
argument_list|(
name|getIpv6Address
argument_list|(
name|getTarget
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

