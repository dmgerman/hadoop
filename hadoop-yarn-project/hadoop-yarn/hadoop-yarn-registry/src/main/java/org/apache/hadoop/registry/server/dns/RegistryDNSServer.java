begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.server.dns
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|dns
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|BasicParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|DNSOperationsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|zk
operator|.
name|PathListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|zk
operator|.
name|RegistryOperationsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|RegistryPathStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnUncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_comment
comment|/**  * A server/service that starts and manages the lifecycle of a DNS registry  * instance.  */
end_comment

begin_class
DECL|class|RegistryDNSServer
specifier|public
class|class
name|RegistryDNSServer
extends|extends
name|CompositeService
block|{
DECL|field|SHUTDOWN_HOOK_PRIORITY
specifier|public
specifier|static
specifier|final
name|int
name|SHUTDOWN_HOOK_PRIORITY
init|=
literal|30
decl_stmt|;
DECL|field|registryDNS
specifier|private
name|RegistryDNS
name|registryDNS
decl_stmt|;
DECL|field|registryOperations
specifier|private
name|RegistryOperationsService
name|registryOperations
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegistryDNS
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|pathToRecordMap
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ServiceRecord
argument_list|>
name|pathToRecordMap
decl_stmt|;
comment|/**    * Creates the DNS server.    * @param name the server name.    */
DECL|method|RegistryDNSServer (String name)
specifier|public
name|RegistryDNSServer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initializes the DNS server.    * @param conf the hadoop configuration instance.    * @throws Exception if service initialization fails.    */
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|pathToRecordMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|registryOperations
operator|=
operator|new
name|RegistryOperationsService
argument_list|(
literal|"RegistryDNSOperations"
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|registryOperations
argument_list|)
expr_stmt|;
comment|// probably need to populate with existing apps?
name|registryDNS
operator|=
operator|(
name|RegistryDNS
operator|)
name|DNSOperationsFactory
operator|.
name|createInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|registryDNS
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Starts the server.    * @throws Exception if service start fails.    */
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
name|manageRegistryDNS
argument_list|()
expr_stmt|;
block|}
comment|/**    * Performs operations required to setup the DNS registry instance (e.g. sets    * up a path listener to react to service record creation/deletion and invoke    * the appropriate registry method).    */
DECL|method|manageRegistryDNS ()
specifier|private
name|void
name|manageRegistryDNS
parameter_list|()
block|{
try|try
block|{
name|registryOperations
operator|.
name|monitorRegistryEntries
argument_list|()
expr_stmt|;
name|registryOperations
operator|.
name|registerPathListener
argument_list|(
operator|new
name|PathListener
argument_list|()
block|{
specifier|private
name|String
name|registryRoot
init|=
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_ROOT
argument_list|,
name|RegistryConstants
operator|.
name|DEFAULT_ZK_REGISTRY_ROOT
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|nodeAdded
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get a listing of service records
name|String
name|relativePath
init|=
name|getPathRelativeToRegistryRoot
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|child
init|=
name|RegistryPathUtils
operator|.
name|lastPathEntry
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RegistryPathStatus
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|child
argument_list|,
name|registryOperations
operator|.
name|stat
argument_list|(
name|relativePath
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ServiceRecord
argument_list|>
name|records
init|=
name|RegistryUtils
operator|.
name|extractServiceRecords
argument_list|(
name|registryOperations
argument_list|,
name|getAdjustedParentPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|processServiceRecords
argument_list|(
name|records
argument_list|,
name|register
argument_list|)
expr_stmt|;
name|pathToRecordMap
operator|.
name|putAll
argument_list|(
name|records
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getAdjustedParentPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|String
name|adjustedPath
init|=
literal|null
decl_stmt|;
name|adjustedPath
operator|=
name|getPathRelativeToRegistryRoot
argument_list|(
name|path
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|RegistryPathUtils
operator|.
name|parentOf
argument_list|(
name|adjustedPath
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// attempt to use passed in path
return|return
name|path
return|;
block|}
block|}
specifier|private
name|String
name|getPathRelativeToRegistryRoot
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
name|adjustedPath
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|registryRoot
argument_list|)
condition|)
block|{
name|adjustedPath
operator|=
literal|"/"
expr_stmt|;
block|}
else|else
block|{
name|adjustedPath
operator|=
name|path
operator|.
name|substring
argument_list|(
name|registryRoot
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|adjustedPath
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeRemoved
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|ServiceRecord
name|record
init|=
name|pathToRecordMap
operator|.
name|remove
argument_list|(
name|path
operator|.
name|substring
argument_list|(
name|registryRoot
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|processServiceRecord
argument_list|(
name|path
argument_list|,
name|record
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// create listener for record deletions
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to monitor the registry.  DNS support disabled."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A registry management command interface.    */
DECL|interface|ManagementCommand
interface|interface
name|ManagementCommand
block|{
DECL|method|exec (String path, ServiceRecord record)
name|void
name|exec
parameter_list|(
name|String
name|path
parameter_list|,
name|ServiceRecord
name|record
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Performs registry service record registration.    */
DECL|field|register
specifier|private
specifier|final
name|ManagementCommand
name|register
init|=
operator|new
name|ManagementCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|exec
parameter_list|(
name|String
name|path
parameter_list|,
name|ServiceRecord
name|record
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|record
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Registering DNS records for {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|registryDNS
operator|.
name|register
argument_list|(
name|path
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
comment|/**    * Performs registry service record deletion.    */
DECL|field|delete
specifier|private
name|ManagementCommand
name|delete
init|=
operator|new
name|ManagementCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|exec
parameter_list|(
name|String
name|path
parameter_list|,
name|ServiceRecord
name|record
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|record
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting DNS records for {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|registryDNS
operator|.
name|delete
argument_list|(
name|path
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
comment|/**    * iterates thru the supplied service records, executing the provided registry    * command.    * @param records the service records.    * @param command the registry command.    * @throws IOException    */
DECL|method|processServiceRecords (Map<String, ServiceRecord> records, ManagementCommand command)
specifier|private
name|void
name|processServiceRecords
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ServiceRecord
argument_list|>
name|records
parameter_list|,
name|ManagementCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ServiceRecord
argument_list|>
name|entry
range|:
name|records
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|processServiceRecord
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Process the service record, parsing the information and creating the    * required DNS records.    * @param path  the service record path.    * @param record  the record.    * @param command  the registry command to execute.    * @throws IOException    */
DECL|method|processServiceRecord (String path, ServiceRecord record, ManagementCommand command)
specifier|private
name|void
name|processServiceRecord
parameter_list|(
name|String
name|path
parameter_list|,
name|ServiceRecord
name|record
parameter_list|,
name|ManagementCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|command
operator|.
name|exec
argument_list|(
name|path
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
comment|/**    * Launch the server.    * @param args command line args.    * @return    */
DECL|method|launchDNSServer (String[] args)
specifier|static
name|RegistryDNSServer
name|launchDNSServer
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|RegistryDNSServer
name|dnsServer
init|=
literal|null
decl_stmt|;
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
operator|new
name|YarnUncaughtExceptionHandler
argument_list|()
argument_list|)
expr_stmt|;
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|RegistryDNSServer
operator|.
name|class
argument_list|,
name|args
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
try|try
block|{
name|dnsServer
operator|=
operator|new
name|RegistryDNSServer
argument_list|(
literal|"RegistryDNSServer"
argument_list|)
expr_stmt|;
name|ShutdownHookManager
operator|.
name|get
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|CompositeService
operator|.
name|CompositeServiceShutdownHook
argument_list|(
name|dnsServer
argument_list|)
argument_list|,
name|SHUTDOWN_HOOK_PRIORITY
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|processCommandLine
argument_list|(
name|args
argument_list|,
name|conf
argument_list|)
expr_stmt|;
operator|new
name|GenericOptionsParser
argument_list|(
name|conf
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|dnsServer
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dnsServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error starting Registry DNS Server"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|terminate
argument_list|(
operator|-
literal|1
argument_list|,
literal|"Error starting Registry DNS Server"
argument_list|)
expr_stmt|;
block|}
return|return
name|dnsServer
return|;
block|}
comment|/**    * Process input command line arguments.    * @param args the command line argument array.    * @param conf  the configuration.    */
DECL|method|processCommandLine (String[] args, YarnConfiguration conf)
specifier|private
specifier|static
name|void
name|processCommandLine
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|YarnConfiguration
name|conf
parameter_list|)
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"p"
argument_list|,
literal|"port"
argument_list|,
literal|true
argument_list|,
literal|"the server listening port (override)"
argument_list|)
expr_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|BasicParser
argument_list|()
decl_stmt|;
try|try
block|{
name|CommandLine
name|cmd
init|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNS_PORT
argument_list|,
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error parsing the command line options"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Lanches the server instance.    * @param args the command line args.    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|launchDNSServer
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

