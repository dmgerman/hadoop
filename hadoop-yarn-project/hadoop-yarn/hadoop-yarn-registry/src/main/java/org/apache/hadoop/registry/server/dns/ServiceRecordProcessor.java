begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.server.dns
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|dns
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  Manage the processing of service records in order to create DNS records.  */
end_comment

begin_interface
DECL|interface|ServiceRecordProcessor
specifier|public
interface|interface
name|ServiceRecordProcessor
block|{
comment|/**    * Initialize the mapping between DNS record type and record information    * for the given service record.    * @param serviceRecord  the registry service record.    * @throws Exception if encountering an error.    */
DECL|method|initTypeToInfoMapping (ServiceRecord serviceRecord)
name|void
name|initTypeToInfoMapping
parameter_list|(
name|ServiceRecord
name|serviceRecord
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**    * Return the DNS record types valid for this processor.    * @return  the array of DNS record types.    */
DECL|method|getRecordTypes ()
name|int
index|[]
name|getRecordTypes
parameter_list|()
function_decl|;
comment|/**    * Manage the creation and registration of DNS records generated by parsing    * a service record.    * @param command  the DNS registration command object (e.g. add_record,    *                 remove record)    * @throws IOException if the creation or registration generates an issue.    */
DECL|method|manageDNSRecords (RegistryDNS.RegistryCommand command)
name|void
name|manageDNSRecords
parameter_list|(
name|RegistryDNS
operator|.
name|RegistryCommand
name|command
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

