begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.client.binding
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|InvalidPathnameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|zk
operator|.
name|RegistryInternalConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|common
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|IDN
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Basic operations on paths: manipulating them and creating and validating  * path elements.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|RegistryPathUtils
specifier|public
class|class
name|RegistryPathUtils
block|{
comment|/**    * Compiled down pattern to validate single entries in the path    */
DECL|field|PATH_ENTRY_VALIDATION_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|PATH_ENTRY_VALIDATION_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|RegistryInternalConstants
operator|.
name|VALID_PATH_ENTRY_PATTERN
argument_list|)
decl_stmt|;
comment|/**    * Validate ZK path with the path itself included in    * the exception text    * @param path path to validate    * @return the path parameter    * @throws InvalidPathnameException if the pathname is invalid.    */
DECL|method|validateZKPath (String path)
specifier|public
specifier|static
name|String
name|validateZKPath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|InvalidPathnameException
block|{
try|try
block|{
name|PathUtils
operator|.
name|validatePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidPathnameException
argument_list|(
name|path
argument_list|,
literal|"Invalid Path \""
operator|+
name|path
operator|+
literal|"\" : "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|path
return|;
block|}
comment|/**    * Validate ZK path as valid for a DNS hostname.    * @param path path to validate    * @return the path parameter    * @throws InvalidPathnameException if the pathname is invalid.    */
DECL|method|validateElementsAsDNS (String path)
specifier|public
specifier|static
name|String
name|validateElementsAsDNS
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|InvalidPathnameException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|splitpath
init|=
name|split
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|fragment
range|:
name|splitpath
control|)
block|{
if|if
condition|(
operator|!
name|PATH_ENTRY_VALIDATION_PATTERN
operator|.
name|matcher
argument_list|(
name|fragment
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidPathnameException
argument_list|(
name|path
argument_list|,
literal|"Invalid Path element \""
operator|+
name|fragment
operator|+
literal|"\""
argument_list|)
throw|;
block|}
block|}
return|return
name|path
return|;
block|}
comment|/**    * Create a full path from the registry root and the supplied subdir    * @param path path of operation    * @return an absolute path    * @throws InvalidPathnameException if the path is invalid    */
DECL|method|createFullPath (String base, String path)
specifier|public
specifier|static
name|String
name|createFullPath
parameter_list|(
name|String
name|base
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|InvalidPathnameException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|path
operator|!=
literal|null
argument_list|,
literal|"null path"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|base
operator|!=
literal|null
argument_list|,
literal|"null path"
argument_list|)
expr_stmt|;
return|return
name|validateZKPath
argument_list|(
name|join
argument_list|(
name|base
argument_list|,
name|path
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Join two paths, guaranteeing that there will not be exactly    * one separator between the two, and exactly one at the front    * of the path. There will be no trailing "/" except for the special    * case that this is the root path    * @param base base path    * @param path second path to add    * @return a combined path.    */
DECL|method|join (String base, String path)
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|String
name|base
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|path
operator|!=
literal|null
argument_list|,
literal|"null path"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|base
operator|!=
literal|null
argument_list|,
literal|"null path"
argument_list|)
expr_stmt|;
name|StringBuilder
name|fullpath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|base
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|fullpath
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
name|fullpath
operator|.
name|append
argument_list|(
name|base
argument_list|)
expr_stmt|;
comment|// guarantee a trailing /
if|if
condition|(
operator|!
name|fullpath
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|fullpath
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
comment|// strip off any at the beginning
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// path starts with /, so append all other characters -if present
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|fullpath
operator|.
name|append
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fullpath
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|//here there may be a trailing "/"
name|String
name|finalpath
init|=
name|fullpath
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|finalpath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
operator|!
literal|"/"
operator|.
name|equals
argument_list|(
name|finalpath
argument_list|)
condition|)
block|{
name|finalpath
operator|=
name|finalpath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|finalpath
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|finalpath
return|;
block|}
comment|/**    * split a path into elements, stripping empty elements    * @param path the path    * @return the split path    */
DECL|method|split (String path)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|split
parameter_list|(
name|String
name|path
parameter_list|)
block|{
comment|//
name|String
index|[]
name|pathelements
init|=
name|path
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dirs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|pathelements
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pathelement
range|:
name|pathelements
control|)
block|{
if|if
condition|(
operator|!
name|pathelement
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dirs
operator|.
name|add
argument_list|(
name|pathelement
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dirs
return|;
block|}
comment|/**    * Get the last entry in a path; for an empty path    * returns "". The split logic is that of    * {@link #split(String)}    * @param path path of operation    * @return the last path entry or "" if none.    */
DECL|method|lastPathEntry (String path)
specifier|public
specifier|static
name|String
name|lastPathEntry
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|splits
init|=
name|split
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|splits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// empty path. Return ""
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
name|splits
operator|.
name|get
argument_list|(
name|splits
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
comment|/**    * Get the parent of a path    * @param path path to look at    * @return the parent path    * @throws PathNotFoundException if the path was at root.    */
DECL|method|parentOf (String path)
specifier|public
specifier|static
name|String
name|parentOf
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|PathNotFoundException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|elements
init|=
name|split
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|elements
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
literal|"No parent of "
operator|+
name|path
argument_list|)
throw|;
block|}
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
literal|"/"
return|;
block|}
name|elements
operator|.
name|remove
argument_list|(
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
name|StringBuilder
name|parent
init|=
operator|new
name|StringBuilder
argument_list|(
name|path
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|elements
control|)
block|{
name|parent
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|parent
operator|.
name|append
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
return|return
name|parent
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Perform any formatting for the registry needed to convert    * non-simple-DNS elements    * @param element element to encode    * @return an encoded string    */
DECL|method|encodeForRegistry (String element)
specifier|public
specifier|static
name|String
name|encodeForRegistry
parameter_list|(
name|String
name|element
parameter_list|)
block|{
return|return
name|IDN
operator|.
name|toASCII
argument_list|(
name|element
argument_list|)
return|;
block|}
comment|/**    * Perform whatever transforms are needed to get a YARN ID into    * a DNS-compatible name    * @param yarnId ID as string of YARN application, instance or container    * @return a string suitable for use in registry paths.    */
DECL|method|encodeYarnID (String yarnId)
specifier|public
specifier|static
name|String
name|encodeYarnID
parameter_list|(
name|String
name|yarnId
parameter_list|)
block|{
return|return
name|yarnId
operator|.
name|replace
argument_list|(
literal|"_"
argument_list|,
literal|"-"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

