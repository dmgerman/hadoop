begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.client.binding
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|InvalidRecordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|NoRecordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|JsonSerialization
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Support for marshalling objects to and from JSON.  *<p>  * This extends {@link JsonSerialization} with the notion  * of a marker field in the JSON file, with  *<ol>  *<li>a fail-fast check for it before even trying to parse.</li>  *<li>Specific IOException subclasses for a failure.</li>  *</ol>  * The rationale for this is not only to support different things in the,  * registry, but the fact that all ZK nodes have a size&gt; 0 when examined.  *  * @param<T> Type to marshal.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|JsonSerDeser
specifier|public
class|class
name|JsonSerDeser
parameter_list|<
name|T
parameter_list|>
extends|extends
name|JsonSerialization
argument_list|<
name|T
argument_list|>
block|{
DECL|field|UTF_8
specifier|private
specifier|static
specifier|final
name|String
name|UTF_8
init|=
literal|"UTF-8"
decl_stmt|;
DECL|field|E_NO_DATA
specifier|public
specifier|static
specifier|final
name|String
name|E_NO_DATA
init|=
literal|"No data at path"
decl_stmt|;
DECL|field|E_DATA_TOO_SHORT
specifier|public
specifier|static
specifier|final
name|String
name|E_DATA_TOO_SHORT
init|=
literal|"Data at path too short"
decl_stmt|;
DECL|field|E_MISSING_MARKER_STRING
specifier|public
specifier|static
specifier|final
name|String
name|E_MISSING_MARKER_STRING
init|=
literal|"Missing marker string: "
decl_stmt|;
comment|/**    * Create an instance bound to a specific type    * @param classType class to marshall    */
DECL|method|JsonSerDeser (Class<T> classType)
specifier|public
name|JsonSerDeser
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|classType
parameter_list|)
block|{
name|super
argument_list|(
name|classType
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deserialize from a byte array    * @param path path the data came from    * @param bytes byte array    * @throws IOException all problems    * @throws EOFException not enough data    * @throws InvalidRecordException if the parsing failed -the record is invalid    * @throws NoRecordException if the data is not considered a record: either    * it is too short or it did not contain the marker string.    */
DECL|method|fromBytes (String path, byte[] bytes)
specifier|public
name|T
name|fromBytes
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fromBytes
argument_list|(
name|path
argument_list|,
name|bytes
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/**    * Deserialize from a byte array, optionally checking for a marker string.    *<p>    * If the marker parameter is supplied (and not empty), then its presence    * will be verified before the JSON parsing takes place; it is a fast-fail    * check. If not found, an {@link InvalidRecordException} exception will be    * raised    * @param path path the data came from    * @param bytes byte array    * @param marker an optional string which, if set, MUST be present in the    * UTF-8 parsed payload.    * @return The parsed record    * @throws IOException all problems    * @throws EOFException not enough data    * @throws InvalidRecordException if the JSON parsing failed.    * @throws NoRecordException if the data is not considered a record: either    * it is too short or it did not contain the marker string.    */
DECL|method|fromBytes (String path, byte[] bytes, String marker)
specifier|public
name|T
name|fromBytes
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|String
name|marker
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|bytes
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|NoRecordException
argument_list|(
name|path
argument_list|,
name|E_NO_DATA
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|marker
argument_list|)
operator|&&
name|len
operator|<
name|marker
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoRecordException
argument_list|(
name|path
argument_list|,
name|E_DATA_TOO_SHORT
argument_list|)
throw|;
block|}
name|String
name|json
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|marker
argument_list|)
operator|&&
operator|!
name|json
operator|.
name|contains
argument_list|(
name|marker
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoRecordException
argument_list|(
name|path
argument_list|,
name|E_MISSING_MARKER_STRING
operator|+
name|marker
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|fromJson
argument_list|(
name|json
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JsonProcessingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidRecordException
argument_list|(
name|path
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

