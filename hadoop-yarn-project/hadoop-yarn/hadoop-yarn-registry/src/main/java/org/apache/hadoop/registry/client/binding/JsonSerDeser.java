begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.client.binding
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|InvalidRecordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|NoRecordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|DeserializationConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|JsonMappingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|SerializationConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Support for marshalling objects to and from JSON.  *<p>  * It constructs an object mapper as an instance field.  * and synchronizes access to those methods  * which use the mapper  * @param<T> Type to marshal.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
argument_list|()
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|JsonSerDeser
specifier|public
class|class
name|JsonSerDeser
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JsonSerDeser
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|UTF_8
specifier|private
specifier|static
specifier|final
name|String
name|UTF_8
init|=
literal|"UTF-8"
decl_stmt|;
DECL|field|E_NO_SERVICE_RECORD
specifier|public
specifier|static
specifier|final
name|String
name|E_NO_SERVICE_RECORD
init|=
literal|"No service record at path"
decl_stmt|;
DECL|field|classType
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|classType
decl_stmt|;
DECL|field|mapper
specifier|private
specifier|final
name|ObjectMapper
name|mapper
decl_stmt|;
DECL|field|header
specifier|private
specifier|final
name|byte
index|[]
name|header
decl_stmt|;
comment|/**    * Create an instance bound to a specific type    * @param classType class to marshall    * @param header byte array to use as header    */
DECL|method|JsonSerDeser (Class<T> classType, byte[] header)
specifier|public
name|JsonSerDeser
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|classType
parameter_list|,
name|byte
index|[]
name|header
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|classType
operator|!=
literal|null
argument_list|,
literal|"null classType"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|header
operator|!=
literal|null
argument_list|,
literal|"null header"
argument_list|)
expr_stmt|;
name|this
operator|.
name|classType
operator|=
name|classType
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|mapper
operator|.
name|configure
argument_list|(
name|DeserializationConfig
operator|.
name|Feature
operator|.
name|FAIL_ON_UNKNOWN_PROPERTIES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// make an immutable copy to keep findbugs happy.
name|byte
index|[]
name|h
init|=
operator|new
name|byte
index|[
name|header
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|header
argument_list|,
literal|0
argument_list|,
name|h
argument_list|,
literal|0
argument_list|,
name|header
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|header
operator|=
name|h
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|classType
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
comment|/**    * Convert from JSON    *    * @param json input    * @return the parsed JSON    * @throws IOException IO    * @throws JsonMappingException failure to map from the JSON to this class    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|fromJson (String json)
specifier|public
specifier|synchronized
name|T
name|fromJson
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|IOException
throws|,
name|JsonParseException
throws|,
name|JsonMappingException
block|{
try|try
block|{
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|classType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while parsing json : "
operator|+
name|e
operator|+
literal|"\n"
operator|+
name|json
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Convert from a JSON file    * @param jsonFile input file    * @return the parsed JSON    * @throws IOException IO problems    * @throws JsonMappingException failure to map from the JSON to this class    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|fromFile (File jsonFile)
specifier|public
specifier|synchronized
name|T
name|fromFile
parameter_list|(
name|File
name|jsonFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|JsonParseException
throws|,
name|JsonMappingException
block|{
try|try
block|{
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonFile
argument_list|,
name|classType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while parsing json file {}: {}"
argument_list|,
name|jsonFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Convert from a JSON file    * @param resource input file    * @return the parsed JSON    * @throws IOException IO problems    * @throws JsonMappingException failure to map from the JSON to this class    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"IOResourceOpenedButNotSafelyClosed"
block|}
argument_list|)
DECL|method|fromResource (String resource)
specifier|public
specifier|synchronized
name|T
name|fromResource
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
throws|,
name|JsonParseException
throws|,
name|JsonMappingException
block|{
name|InputStream
name|resStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resStream
operator|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
expr_stmt|;
if|if
condition|(
name|resStream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|resource
argument_list|)
throw|;
block|}
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|resStream
argument_list|,
name|classType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while parsing json resource {}: {}"
argument_list|,
name|resource
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|resStream
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * clone by converting to JSON and back again.    * This is much less efficient than any Java clone process.    * @param instance instance to duplicate    * @return a new instance    * @throws IOException problems.    */
DECL|method|fromInstance (T instance)
specifier|public
name|T
name|fromInstance
parameter_list|(
name|T
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fromJson
argument_list|(
name|toJson
argument_list|(
name|instance
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Load from a Hadoop filesystem    * @param fs filesystem    * @param path path    * @return a loaded CD    * @throws IOException IO problems    * @throws EOFException if not enough bytes were read in    * @throws JsonParseException parse problems    * @throws JsonMappingException O/J mapping problems    */
DECL|method|load (FileSystem fs, Path path)
specifier|public
name|T
name|load
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
throws|,
name|JsonParseException
throws|,
name|JsonMappingException
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|long
name|len
init|=
name|status
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|len
index|]
decl_stmt|;
name|FSDataInputStream
name|dataInputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|dataInputStream
operator|.
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|!=
name|len
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
name|path
operator|.
name|toString
argument_list|()
operator|+
literal|": read finished prematurely"
argument_list|)
throw|;
block|}
return|return
name|fromBytes
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|b
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Save a cluster description to a hadoop filesystem    * @param fs filesystem    * @param path path    * @param overwrite should any existing file be overwritten    * @throws IOException IO exception    */
DECL|method|save (FileSystem fs, Path path, T instance, boolean overwrite)
specifier|public
name|void
name|save
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|T
name|instance
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|dataOutputStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|overwrite
argument_list|)
decl_stmt|;
name|writeJsonAsBytes
argument_list|(
name|instance
argument_list|,
name|dataOutputStream
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write the json as bytes -then close the file    * @param dataOutputStream an outout stream that will always be closed    * @throws IOException on any failure    */
DECL|method|writeJsonAsBytes (T instance, DataOutputStream dataOutputStream)
specifier|private
name|void
name|writeJsonAsBytes
parameter_list|(
name|T
name|instance
parameter_list|,
name|DataOutputStream
name|dataOutputStream
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|byte
index|[]
name|b
init|=
name|toBytes
argument_list|(
name|instance
argument_list|)
decl_stmt|;
name|dataOutputStream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dataOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Convert JSON To bytes    * @param instance instance to convert    * @return a byte array    * @throws IOException    */
DECL|method|toBytes (T instance)
specifier|public
name|byte
index|[]
name|toBytes
parameter_list|(
name|T
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|json
init|=
name|toJson
argument_list|(
name|instance
argument_list|)
decl_stmt|;
return|return
name|json
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
return|;
block|}
comment|/**    * Convert JSON To bytes, inserting the header    * @param instance instance to convert    * @return a byte array    * @throws IOException    */
DECL|method|toByteswithHeader (T instance)
specifier|public
name|byte
index|[]
name|toByteswithHeader
parameter_list|(
name|T
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|body
init|=
name|toBytes
argument_list|(
name|instance
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|body
operator|.
name|length
operator|+
name|header
operator|.
name|length
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|body
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|array
argument_list|()
return|;
block|}
comment|/**    * Deserialize from a byte array    * @param path path the data came from    * @param bytes byte array    * @return offset in the array to read from    * @throws IOException all problems    * @throws EOFException not enough data    * @throws InvalidRecordException if the parsing failed -the record is invalid    */
DECL|method|fromBytes (String path, byte[] bytes, int offset)
specifier|public
name|T
name|fromBytes
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidRecordException
block|{
name|int
name|data
init|=
name|bytes
operator|.
name|length
operator|-
name|offset
decl_stmt|;
if|if
condition|(
name|data
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"No data at "
operator|+
name|path
argument_list|)
throw|;
block|}
name|String
name|json
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|data
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|fromJson
argument_list|(
name|json
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JsonProcessingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidRecordException
argument_list|(
name|path
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Read from a byte array to a type, checking the header first    * @param path source of data    * @param buffer buffer    * @return the parsed structure    * Null if the record was too short or the header did not match    * @throws IOException on a failure    * @throws NoRecordException if header checks implied there was no record    * @throws InvalidRecordException if record parsing failed    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|fromBytesWithHeader (String path, byte[] buffer)
specifier|public
name|T
name|fromBytesWithHeader
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|hlen
init|=
name|header
operator|.
name|length
decl_stmt|;
name|int
name|blen
init|=
name|buffer
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|hlen
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|blen
operator|<
name|hlen
condition|)
block|{
throw|throw
operator|new
name|NoRecordException
argument_list|(
name|path
argument_list|,
name|E_NO_SERVICE_RECORD
argument_list|)
throw|;
block|}
name|byte
index|[]
name|magic
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|hlen
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|header
argument_list|,
name|magic
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"start of entry does not match service record header at {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NoRecordException
argument_list|(
name|path
argument_list|,
name|E_NO_SERVICE_RECORD
argument_list|)
throw|;
block|}
block|}
return|return
name|fromBytes
argument_list|(
name|path
argument_list|,
name|buffer
argument_list|,
name|hlen
argument_list|)
return|;
block|}
comment|/**    * Check if a buffer has a header which matches this record type    * @param buffer buffer    * @return true if there is a match    * @throws IOException    */
DECL|method|headerMatches (byte[] buffer)
specifier|public
name|boolean
name|headerMatches
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|hlen
init|=
name|header
operator|.
name|length
decl_stmt|;
name|int
name|blen
init|=
name|buffer
operator|.
name|length
decl_stmt|;
name|boolean
name|matches
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|blen
operator|>
name|hlen
condition|)
block|{
name|byte
index|[]
name|magic
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|hlen
argument_list|)
decl_stmt|;
name|matches
operator|=
name|Arrays
operator|.
name|equals
argument_list|(
name|header
argument_list|,
name|magic
argument_list|)
expr_stmt|;
block|}
return|return
name|matches
return|;
block|}
comment|/**    * Convert an object to a JSON string    * @param instance instance to convert    * @return a JSON string description    * @throws JsonParseException parse problems    * @throws JsonMappingException O/J mapping problems    */
DECL|method|toJson (T instance)
specifier|public
specifier|synchronized
name|String
name|toJson
parameter_list|(
name|T
name|instance
parameter_list|)
throws|throws
name|IOException
throws|,
name|JsonGenerationException
throws|,
name|JsonMappingException
block|{
name|mapper
operator|.
name|configure
argument_list|(
name|SerializationConfig
operator|.
name|Feature
operator|.
name|INDENT_OUTPUT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|instance
argument_list|)
return|;
block|}
block|}
end_class

end_unit

