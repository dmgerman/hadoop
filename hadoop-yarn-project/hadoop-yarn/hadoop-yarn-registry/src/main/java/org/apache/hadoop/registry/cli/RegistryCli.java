begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|cli
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryTypeUtils
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|BindFlags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperationsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|AuthenticationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|InvalidPathnameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|InvalidRecordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|NoPathPermissionsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|NoRecordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ProtocolTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Command line for registry operations.  */
end_comment

begin_class
DECL|class|RegistryCli
specifier|public
class|class
name|RegistryCli
extends|extends
name|Configured
implements|implements
name|Tool
implements|,
name|Closeable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegistryCli
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|sysout
specifier|protected
specifier|final
name|PrintStream
name|sysout
decl_stmt|;
DECL|field|syserr
specifier|protected
specifier|final
name|PrintStream
name|syserr
decl_stmt|;
DECL|field|registry
specifier|private
name|RegistryOperations
name|registry
decl_stmt|;
DECL|field|LS_USAGE
specifier|private
specifier|static
specifier|final
name|String
name|LS_USAGE
init|=
literal|"ls pathName"
decl_stmt|;
DECL|field|RESOLVE_USAGE
specifier|private
specifier|static
specifier|final
name|String
name|RESOLVE_USAGE
init|=
literal|"resolve pathName"
decl_stmt|;
DECL|field|BIND_USAGE
specifier|private
specifier|static
specifier|final
name|String
name|BIND_USAGE
init|=
literal|"bind -inet  -api apiName -p portNumber -h hostName  pathName"
operator|+
literal|"\n"
operator|+
literal|"bind -webui uriString -api apiName  pathName"
operator|+
literal|"\n"
operator|+
literal|"bind -rest uriString -api apiName  pathName"
decl_stmt|;
DECL|field|MKNODE_USAGE
specifier|private
specifier|static
specifier|final
name|String
name|MKNODE_USAGE
init|=
literal|"mknode directoryName"
decl_stmt|;
DECL|field|RM_USAGE
specifier|private
specifier|static
specifier|final
name|String
name|RM_USAGE
init|=
literal|"rm pathName"
decl_stmt|;
DECL|field|USAGE
specifier|private
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"\n"
operator|+
name|LS_USAGE
operator|+
literal|"\n"
operator|+
name|RESOLVE_USAGE
operator|+
literal|"\n"
operator|+
name|BIND_USAGE
operator|+
literal|"\n"
operator|+
name|MKNODE_USAGE
operator|+
literal|"\n"
operator|+
name|RM_USAGE
decl_stmt|;
DECL|method|RegistryCli (PrintStream sysout, PrintStream syserr)
specifier|public
name|RegistryCli
parameter_list|(
name|PrintStream
name|sysout
parameter_list|,
name|PrintStream
name|syserr
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|registry
operator|=
name|RegistryOperationsFactory
operator|.
name|createInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|registry
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|sysout
operator|=
name|sysout
expr_stmt|;
name|this
operator|.
name|syserr
operator|=
name|syserr
expr_stmt|;
block|}
DECL|method|RegistryCli (RegistryOperations reg, Configuration conf, PrintStream sysout, PrintStream syserr)
specifier|public
name|RegistryCli
parameter_list|(
name|RegistryOperations
name|reg
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|PrintStream
name|sysout
parameter_list|,
name|PrintStream
name|syserr
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|reg
operator|!=
literal|null
argument_list|,
literal|"Null registry"
argument_list|)
expr_stmt|;
name|registry
operator|=
name|reg
expr_stmt|;
name|this
operator|.
name|sysout
operator|=
name|sysout
expr_stmt|;
name|this
operator|.
name|syserr
operator|=
name|syserr
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UseOfSystemOutOrSystemErr"
argument_list|)
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
operator|-
literal|1
decl_stmt|;
try|try
init|(
name|RegistryCli
name|cli
init|=
operator|new
name|RegistryCli
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|System
operator|.
name|err
argument_list|)
init|)
block|{
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|cli
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ExitUtil
operator|.
name|terminate
argument_list|(
name|res
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|ExitUtil
operator|.
name|terminate
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
comment|/**    * Close the object by stopping the registry.    *<p>    *<i>Important:</i>    *<p>    *   After this call is made, no operations may be made of this    *   object,<i>or of a YARN registry instance used when constructing    *   this object.</i>    * @throws IOException    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|ServiceOperations
operator|.
name|stopQuietly
argument_list|(
name|registry
argument_list|)
expr_stmt|;
name|registry
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|usageError (String err, String usage)
specifier|private
name|int
name|usageError
parameter_list|(
name|String
name|err
parameter_list|,
name|String
name|usage
parameter_list|)
block|{
name|syserr
operator|.
name|println
argument_list|(
literal|"Error: "
operator|+
name|err
argument_list|)
expr_stmt|;
name|syserr
operator|.
name|println
argument_list|(
literal|"Usage: "
operator|+
name|usage
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
DECL|method|validatePath (String path)
specifier|private
name|boolean
name|validatePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|syserr
operator|.
name|println
argument_list|(
literal|"Path must start with /; given path was: "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|getConf
argument_list|()
operator|!=
literal|null
argument_list|,
literal|"null configuration"
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
switch|switch
condition|(
name|args
index|[
literal|0
index|]
condition|)
block|{
case|case
literal|"ls"
case|:
return|return
name|ls
argument_list|(
name|args
argument_list|)
return|;
case|case
literal|"resolve"
case|:
return|return
name|resolve
argument_list|(
name|args
argument_list|)
return|;
case|case
literal|"bind"
case|:
return|return
name|bind
argument_list|(
name|args
argument_list|)
return|;
case|case
literal|"mknode"
case|:
return|return
name|mknode
argument_list|(
name|args
argument_list|)
return|;
case|case
literal|"rm"
case|:
return|return
name|rm
argument_list|(
name|args
argument_list|)
return|;
default|default:
return|return
name|usageError
argument_list|(
literal|"Invalid command: "
operator|+
name|args
index|[
literal|0
index|]
argument_list|,
name|USAGE
argument_list|)
return|;
block|}
block|}
return|return
name|usageError
argument_list|(
literal|"No command arg passed."
argument_list|,
name|USAGE
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|ls (String[] args)
specifier|public
name|int
name|ls
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Options
name|lsOption
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
try|try
block|{
name|CommandLine
name|line
init|=
name|parser
operator|.
name|parse
argument_list|(
name|lsOption
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
name|line
operator|.
name|getArgList
argument_list|()
decl_stmt|;
if|if
condition|(
name|argsList
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
return|return
name|usageError
argument_list|(
literal|"ls requires exactly one path argument"
argument_list|,
name|LS_USAGE
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|validatePath
argument_list|(
name|argsList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|registry
operator|.
name|list
argument_list|(
name|argsList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|sysout
operator|.
name|println
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|syserr
operator|.
name|println
argument_list|(
name|analyzeException
argument_list|(
literal|"ls"
argument_list|,
name|e
argument_list|,
name|argsList
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|exp
parameter_list|)
block|{
return|return
name|usageError
argument_list|(
literal|"Invalid syntax "
operator|+
name|exp
argument_list|,
name|LS_USAGE
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|resolve (String[] args)
specifier|public
name|int
name|resolve
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Options
name|resolveOption
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
try|try
block|{
name|CommandLine
name|line
init|=
name|parser
operator|.
name|parse
argument_list|(
name|resolveOption
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
name|line
operator|.
name|getArgList
argument_list|()
decl_stmt|;
if|if
condition|(
name|argsList
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
return|return
name|usageError
argument_list|(
literal|"resolve requires exactly one path argument"
argument_list|,
name|RESOLVE_USAGE
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|validatePath
argument_list|(
name|argsList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
try|try
block|{
name|ServiceRecord
name|record
init|=
name|registry
operator|.
name|resolve
argument_list|(
name|argsList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|record
operator|.
name|external
control|)
block|{
name|sysout
operator|.
name|println
argument_list|(
literal|" Endpoint(ProtocolType="
operator|+
name|endpoint
operator|.
name|protocolType
operator|+
literal|", Api="
operator|+
name|endpoint
operator|.
name|api
operator|+
literal|");"
operator|+
literal|" Addresses(AddressType="
operator|+
name|endpoint
operator|.
name|addressType
operator|+
literal|") are: "
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|address
range|:
name|endpoint
operator|.
name|addresses
control|)
block|{
name|sysout
operator|.
name|println
argument_list|(
literal|"[ "
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|address
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sysout
operator|.
name|print
argument_list|(
literal|"\t"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|":"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sysout
operator|.
name|println
argument_list|(
literal|"\n]"
argument_list|)
expr_stmt|;
block|}
name|sysout
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|syserr
operator|.
name|println
argument_list|(
name|analyzeException
argument_list|(
literal|"resolve"
argument_list|,
name|e
argument_list|,
name|argsList
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|exp
parameter_list|)
block|{
return|return
name|usageError
argument_list|(
literal|"Invalid syntax "
operator|+
name|exp
argument_list|,
name|RESOLVE_USAGE
argument_list|)
return|;
block|}
block|}
DECL|method|bind (String[] args)
specifier|public
name|int
name|bind
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Option
name|rest
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"rest"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"rest Option"
argument_list|)
operator|.
name|create
argument_list|(
literal|"rest"
argument_list|)
decl_stmt|;
name|Option
name|webui
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"webui"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"webui Option"
argument_list|)
operator|.
name|create
argument_list|(
literal|"webui"
argument_list|)
decl_stmt|;
name|Option
name|inet
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"inet"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"inet Option"
argument_list|)
operator|.
name|create
argument_list|(
literal|"inet"
argument_list|)
decl_stmt|;
name|Option
name|port
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"port"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"port to listen on [9999]"
argument_list|)
operator|.
name|create
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|Option
name|host
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"host"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"host name"
argument_list|)
operator|.
name|create
argument_list|(
literal|"h"
argument_list|)
decl_stmt|;
name|Option
name|apiOpt
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"api"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"api"
argument_list|)
operator|.
name|create
argument_list|(
literal|"api"
argument_list|)
decl_stmt|;
name|Options
name|inetOption
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|inetOption
operator|.
name|addOption
argument_list|(
name|inet
argument_list|)
expr_stmt|;
name|inetOption
operator|.
name|addOption
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|inetOption
operator|.
name|addOption
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|inetOption
operator|.
name|addOption
argument_list|(
name|apiOpt
argument_list|)
expr_stmt|;
name|Options
name|webuiOpt
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|webuiOpt
operator|.
name|addOption
argument_list|(
name|webui
argument_list|)
expr_stmt|;
name|webuiOpt
operator|.
name|addOption
argument_list|(
name|apiOpt
argument_list|)
expr_stmt|;
name|Options
name|restOpt
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|restOpt
operator|.
name|addOption
argument_list|(
name|rest
argument_list|)
expr_stmt|;
name|restOpt
operator|.
name|addOption
argument_list|(
name|apiOpt
argument_list|)
expr_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
name|ServiceRecord
name|sr
init|=
operator|new
name|ServiceRecord
argument_list|()
decl_stmt|;
name|CommandLine
name|line
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|<=
literal|1
condition|)
block|{
return|return
name|usageError
argument_list|(
literal|"Invalid syntax "
argument_list|,
name|BIND_USAGE
argument_list|)
return|;
block|}
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"-inet"
argument_list|)
condition|)
block|{
name|int
name|portNum
decl_stmt|;
name|String
name|hostName
decl_stmt|;
name|String
name|api
decl_stmt|;
try|try
block|{
name|line
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|inetOption
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|exp
parameter_list|)
block|{
return|return
name|usageError
argument_list|(
literal|"Invalid syntax "
operator|+
name|exp
operator|.
name|getMessage
argument_list|()
argument_list|,
name|BIND_USAGE
argument_list|)
return|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"inet"
argument_list|)
operator|&&
name|line
operator|.
name|hasOption
argument_list|(
literal|"p"
argument_list|)
operator|&&
name|line
operator|.
name|hasOption
argument_list|(
literal|"h"
argument_list|)
operator|&&
name|line
operator|.
name|hasOption
argument_list|(
literal|"api"
argument_list|)
condition|)
block|{
try|try
block|{
name|portNum
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exp
parameter_list|)
block|{
return|return
name|usageError
argument_list|(
literal|"Invalid Port - int required"
operator|+
name|exp
operator|.
name|getMessage
argument_list|()
argument_list|,
name|BIND_USAGE
argument_list|)
return|;
block|}
name|hostName
operator|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"h"
argument_list|)
expr_stmt|;
name|api
operator|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"api"
argument_list|)
expr_stmt|;
name|sr
operator|.
name|addExternalEndpoint
argument_list|(
name|inetAddrEndpoint
argument_list|(
name|api
argument_list|,
name|ProtocolTypes
operator|.
name|PROTOCOL_HADOOP_IPC
argument_list|,
name|hostName
argument_list|,
name|portNum
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|usageError
argument_list|(
literal|"Missing options: must have host, port and api"
argument_list|,
name|BIND_USAGE
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"-webui"
argument_list|)
condition|)
block|{
try|try
block|{
name|line
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|webuiOpt
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|exp
parameter_list|)
block|{
return|return
name|usageError
argument_list|(
literal|"Invalid syntax "
operator|+
name|exp
operator|.
name|getMessage
argument_list|()
argument_list|,
name|BIND_USAGE
argument_list|)
return|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"webui"
argument_list|)
operator|&&
name|line
operator|.
name|hasOption
argument_list|(
literal|"api"
argument_list|)
condition|)
block|{
name|URI
name|theUri
decl_stmt|;
try|try
block|{
name|theUri
operator|=
operator|new
name|URI
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"webui"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
return|return
name|usageError
argument_list|(
literal|"Invalid URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|BIND_USAGE
argument_list|)
return|;
block|}
name|sr
operator|.
name|addExternalEndpoint
argument_list|(
name|webEndpoint
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"api"
argument_list|)
argument_list|,
name|theUri
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|usageError
argument_list|(
literal|"Missing options: must have value for uri and api"
argument_list|,
name|BIND_USAGE
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"-rest"
argument_list|)
condition|)
block|{
try|try
block|{
name|line
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|restOpt
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|exp
parameter_list|)
block|{
return|return
name|usageError
argument_list|(
literal|"Invalid syntax "
operator|+
name|exp
operator|.
name|getMessage
argument_list|()
argument_list|,
name|BIND_USAGE
argument_list|)
return|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"rest"
argument_list|)
operator|&&
name|line
operator|.
name|hasOption
argument_list|(
literal|"api"
argument_list|)
condition|)
block|{
name|URI
name|theUri
init|=
literal|null
decl_stmt|;
try|try
block|{
name|theUri
operator|=
operator|new
name|URI
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"rest"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
return|return
name|usageError
argument_list|(
literal|"Invalid URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|BIND_USAGE
argument_list|)
return|;
block|}
name|sr
operator|.
name|addExternalEndpoint
argument_list|(
name|restEndpoint
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"api"
argument_list|)
argument_list|,
name|theUri
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|usageError
argument_list|(
literal|"Missing options: must have value for uri and api"
argument_list|,
name|BIND_USAGE
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|usageError
argument_list|(
literal|"Invalid syntax"
argument_list|,
name|BIND_USAGE
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
name|line
operator|.
name|getArgList
argument_list|()
decl_stmt|;
if|if
condition|(
name|argsList
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
return|return
name|usageError
argument_list|(
literal|"bind requires exactly one path argument"
argument_list|,
name|BIND_USAGE
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|validatePath
argument_list|(
name|argsList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
try|try
block|{
name|registry
operator|.
name|bind
argument_list|(
name|argsList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|sr
argument_list|,
name|BindFlags
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|syserr
operator|.
name|println
argument_list|(
name|analyzeException
argument_list|(
literal|"bind"
argument_list|,
name|e
argument_list|,
name|argsList
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|mknode (String[] args)
specifier|public
name|int
name|mknode
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Options
name|mknodeOption
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
try|try
block|{
name|CommandLine
name|line
init|=
name|parser
operator|.
name|parse
argument_list|(
name|mknodeOption
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
name|line
operator|.
name|getArgList
argument_list|()
decl_stmt|;
if|if
condition|(
name|argsList
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
return|return
name|usageError
argument_list|(
literal|"mknode requires exactly one path argument"
argument_list|,
name|MKNODE_USAGE
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|validatePath
argument_list|(
name|argsList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
try|try
block|{
name|registry
operator|.
name|mknode
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|syserr
operator|.
name|println
argument_list|(
name|analyzeException
argument_list|(
literal|"mknode"
argument_list|,
name|e
argument_list|,
name|argsList
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|exp
parameter_list|)
block|{
return|return
name|usageError
argument_list|(
literal|"Invalid syntax "
operator|+
name|exp
operator|.
name|toString
argument_list|()
argument_list|,
name|MKNODE_USAGE
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|rm (String[] args)
specifier|public
name|int
name|rm
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Option
name|recursive
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"recursive"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"delete recursively"
argument_list|)
operator|.
name|create
argument_list|(
literal|"r"
argument_list|)
decl_stmt|;
name|Options
name|rmOption
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|rmOption
operator|.
name|addOption
argument_list|(
name|recursive
argument_list|)
expr_stmt|;
name|boolean
name|recursiveOpt
init|=
literal|false
decl_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
try|try
block|{
name|CommandLine
name|line
init|=
name|parser
operator|.
name|parse
argument_list|(
name|rmOption
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
name|line
operator|.
name|getArgList
argument_list|()
decl_stmt|;
if|if
condition|(
name|argsList
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
return|return
name|usageError
argument_list|(
literal|"RM requires exactly one path argument"
argument_list|,
name|RM_USAGE
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|validatePath
argument_list|(
name|argsList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
try|try
block|{
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"r"
argument_list|)
condition|)
block|{
name|recursiveOpt
operator|=
literal|true
expr_stmt|;
block|}
name|registry
operator|.
name|delete
argument_list|(
name|argsList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|recursiveOpt
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|syserr
operator|.
name|println
argument_list|(
name|analyzeException
argument_list|(
literal|"rm"
argument_list|,
name|e
argument_list|,
name|argsList
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|exp
parameter_list|)
block|{
return|return
name|usageError
argument_list|(
literal|"Invalid syntax "
operator|+
name|exp
operator|.
name|toString
argument_list|()
argument_list|,
name|RM_USAGE
argument_list|)
return|;
block|}
block|}
comment|/**    * Given an exception and a possibly empty argument list, generate    * a diagnostics string for use in error messages    * @param operation the operation that failed    * @param e exception    * @param argsList arguments list    * @return a string intended for the user    */
DECL|method|analyzeException (String operation, Exception e, List<String> argsList)
name|String
name|analyzeException
parameter_list|(
name|String
name|operation
parameter_list|,
name|Exception
name|e
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|argsList
parameter_list|)
block|{
name|String
name|pathArg
init|=
operator|!
name|argsList
operator|.
name|isEmpty
argument_list|()
condition|?
name|argsList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
else|:
literal|"(none)"
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Operation {} on path {} failed with exception {}"
argument_list|,
name|operation
argument_list|,
name|pathArg
argument_list|,
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|InvalidPathnameException
condition|)
block|{
return|return
literal|"InvalidPath :"
operator|+
name|pathArg
operator|+
literal|": "
operator|+
name|e
return|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|PathNotFoundException
condition|)
block|{
return|return
literal|"Path not found: "
operator|+
name|pathArg
return|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|NoRecordException
condition|)
block|{
return|return
literal|"No service record at path "
operator|+
name|pathArg
return|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|AuthenticationFailedException
condition|)
block|{
return|return
literal|"Failed to authenticate to registry : "
operator|+
name|e
return|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|NoPathPermissionsException
condition|)
block|{
return|return
literal|"No Permission to path: "
operator|+
name|pathArg
operator|+
literal|": "
operator|+
name|e
return|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|AccessControlException
condition|)
block|{
return|return
literal|"No Permission to path: "
operator|+
name|pathArg
operator|+
literal|": "
operator|+
name|e
return|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|InvalidRecordException
condition|)
block|{
return|return
literal|"Unable to read record at: "
operator|+
name|pathArg
operator|+
literal|": "
operator|+
name|e
return|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|IOException
condition|)
block|{
return|return
literal|"IO Exception when accessing path :"
operator|+
name|pathArg
operator|+
literal|": "
operator|+
name|e
return|;
block|}
comment|// something else went very wrong here
return|return
literal|"Exception "
operator|+
name|e
return|;
block|}
block|}
end_class

end_unit

