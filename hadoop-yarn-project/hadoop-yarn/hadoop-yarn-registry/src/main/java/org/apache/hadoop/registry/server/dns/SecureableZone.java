begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.server.dns
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|dns
package|;
end_package

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|DClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|NXTRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|RRset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|SetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Zone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|ZoneTransferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|ZoneTransferIn
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A zone implementation geared to support some DNSSEC functionality.  */
end_comment

begin_class
DECL|class|SecureableZone
specifier|public
class|class
name|SecureableZone
extends|extends
name|Zone
block|{
DECL|field|records
specifier|private
name|List
argument_list|<
name|Record
argument_list|>
name|records
decl_stmt|;
comment|/**    * Creates a Zone by doing the specified zone transfer.    * @param xfrin The incoming zone transfer to execute.    * @throws IOException if there is an error.    * @throws ZoneTransferException if there is an error.    */
DECL|method|SecureableZone (ZoneTransferIn xfrin)
specifier|public
name|SecureableZone
parameter_list|(
name|ZoneTransferIn
name|xfrin
parameter_list|)
throws|throws
name|IOException
throws|,
name|ZoneTransferException
block|{
name|super
argument_list|(
name|xfrin
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a Zone by performing a zone transfer to the specified host.    * @param zone  zone name.    * @param dclass the dclass    * @param remote  the remote host.    * @throws IOException if there is an error.    * @throws ZoneTransferException if there is an error.    */
DECL|method|SecureableZone (Name zone, int dclass, String remote)
specifier|public
name|SecureableZone
parameter_list|(
name|Name
name|zone
parameter_list|,
name|int
name|dclass
parameter_list|,
name|String
name|remote
parameter_list|)
throws|throws
name|IOException
throws|,
name|ZoneTransferException
block|{
name|super
argument_list|(
name|zone
argument_list|,
name|dclass
argument_list|,
name|remote
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a Zone from the records in the specified master file.    * @param zone The name of the zone.    * @param file The master file to read from.    * @throws IOException if there is an error.    */
DECL|method|SecureableZone (Name zone, String file)
specifier|public
name|SecureableZone
parameter_list|(
name|Name
name|zone
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|zone
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a Zone from an array of records.    * @param zone The name of the zone.    * @param records The records to add to the zone.    * @throws IOException if there is an error.    */
DECL|method|SecureableZone (Name zone, Record[] records)
specifier|public
name|SecureableZone
parameter_list|(
name|Name
name|zone
parameter_list|,
name|Record
index|[]
name|records
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|zone
argument_list|,
name|records
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a Record to the Zone.    * @param r The record to be added    * @see Record    */
DECL|method|addRecord (Record r)
annotation|@
name|Override
specifier|public
name|void
name|addRecord
parameter_list|(
name|Record
name|r
parameter_list|)
block|{
if|if
condition|(
name|records
operator|==
literal|null
condition|)
block|{
name|records
operator|=
operator|new
name|ArrayList
argument_list|<
name|Record
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|addRecord
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|records
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
comment|/**    * Removes a record from the Zone.    * @param r The record to be removed    * @see Record    */
DECL|method|removeRecord (Record r)
annotation|@
name|Override
specifier|public
name|void
name|removeRecord
parameter_list|(
name|Record
name|r
parameter_list|)
block|{
if|if
condition|(
name|records
operator|==
literal|null
condition|)
block|{
name|records
operator|=
operator|new
name|ArrayList
argument_list|<
name|Record
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|removeRecord
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|records
operator|.
name|remove
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return a NXT record appropriate for the query.    * @param queryRecord the query record.    * @param zone the zone to search.    * @return  the NXT record describing the insertion point.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|getNXTRecord (Record queryRecord, Zone zone)
specifier|public
name|Record
name|getNXTRecord
parameter_list|(
name|Record
name|queryRecord
parameter_list|,
name|Zone
name|zone
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|records
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|records
argument_list|,
name|queryRecord
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Record
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Record
name|r1
parameter_list|,
name|Record
name|r2
parameter_list|)
block|{
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|index
operator|=
operator|-
name|index
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|index
operator|>=
name|records
operator|.
name|size
argument_list|()
condition|)
block|{
name|index
operator|=
name|records
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
name|Record
name|base
init|=
name|records
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|SetResponse
name|sr
init|=
name|zone
operator|.
name|findRecords
argument_list|(
name|base
operator|.
name|getName
argument_list|()
argument_list|,
name|Type
operator|.
name|ANY
argument_list|)
decl_stmt|;
name|BitSet
name|bitMap
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|bitMap
operator|.
name|set
argument_list|(
name|Type
operator|.
name|NXT
argument_list|)
expr_stmt|;
name|RRset
index|[]
name|rRsets
init|=
name|sr
operator|.
name|answers
argument_list|()
decl_stmt|;
for|for
control|(
name|RRset
name|rRset
range|:
name|rRsets
control|)
block|{
name|int
name|typeCode
init|=
name|rRset
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeCode
operator|>
literal|0
operator|&&
name|typeCode
operator|<
literal|128
condition|)
block|{
name|bitMap
operator|.
name|set
argument_list|(
name|typeCode
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|NXTRecord
argument_list|(
name|base
operator|.
name|getName
argument_list|()
argument_list|,
name|DClass
operator|.
name|IN
argument_list|,
name|zone
operator|.
name|getSOA
argument_list|()
operator|.
name|getMinimum
argument_list|()
argument_list|,
name|queryRecord
operator|.
name|getName
argument_list|()
argument_list|,
name|bitMap
argument_list|)
return|;
block|}
block|}
end_class

end_unit

