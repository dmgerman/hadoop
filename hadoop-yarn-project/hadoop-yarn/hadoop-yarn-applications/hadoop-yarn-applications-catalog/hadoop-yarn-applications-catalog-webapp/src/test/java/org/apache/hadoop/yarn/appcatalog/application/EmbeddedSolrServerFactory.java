begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.appcatalog.application
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|appcatalog
operator|.
name|application
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|EmbeddedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|NodeConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_comment
comment|/**  * Embedded solr server factory class for unit tests.  */
end_comment

begin_class
DECL|class|EmbeddedSolrServerFactory
specifier|public
specifier|final
class|class
name|EmbeddedSolrServerFactory
block|{
DECL|method|EmbeddedSolrServerFactory ()
specifier|private
name|EmbeddedSolrServerFactory
parameter_list|()
block|{   }
comment|/**    * Cleans the given solrHome directory and creates a new EmbeddedSolrServer.    *    * @param solrHome    *          the Solr home directory to use    * @param configSetHome    *          the directory containing config sets    * @param coreName    *          the name of the core, must have a matching directory in configHome    *    * @return an EmbeddedSolrServer with a core created for the given coreName    * @throws IOException    */
DECL|method|create (final String solrHome, final String configSetHome, final String coreName)
specifier|public
specifier|static
name|SolrClient
name|create
parameter_list|(
specifier|final
name|String
name|solrHome
parameter_list|,
specifier|final
name|String
name|configSetHome
parameter_list|,
specifier|final
name|String
name|coreName
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
return|return
name|create
argument_list|(
name|solrHome
argument_list|,
name|configSetHome
argument_list|,
name|coreName
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * @param solrHome    *          the Solr home directory to use    * @param configSetHome    *          the directory containing config sets    * @param coreName    *          the name of the core, must have a matching directory in configHome    * @param cleanSolrHome    *          if true the directory for solrHome will be deleted and re-created    *          if it already exists    *    * @return an EmbeddedSolrServer with a core created for the given coreName    * @throws IOException    */
DECL|method|create (final String solrHome, final String configSetHome, final String coreName, final boolean cleanSolrHome)
specifier|public
specifier|static
name|SolrClient
name|create
parameter_list|(
specifier|final
name|String
name|solrHome
parameter_list|,
specifier|final
name|String
name|configSetHome
parameter_list|,
specifier|final
name|String
name|coreName
parameter_list|,
specifier|final
name|boolean
name|cleanSolrHome
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
specifier|final
name|File
name|solrHomeDir
init|=
operator|new
name|File
argument_list|(
name|solrHome
argument_list|)
decl_stmt|;
if|if
condition|(
name|solrHomeDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|solrHomeDir
argument_list|)
expr_stmt|;
name|solrHomeDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|solrHomeDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
specifier|final
name|SolrResourceLoader
name|loader
init|=
operator|new
name|SolrResourceLoader
argument_list|(
name|solrHomeDir
operator|.
name|toPath
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|configSetPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|configSetHome
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
decl_stmt|;
specifier|final
name|NodeConfig
name|config
init|=
operator|new
name|NodeConfig
operator|.
name|NodeConfigBuilder
argument_list|(
literal|"embeddedSolrServerNode"
argument_list|,
name|loader
argument_list|)
operator|.
name|setConfigSetBaseDirectory
argument_list|(
name|configSetPath
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|EmbeddedSolrServer
name|embeddedSolrServer
init|=
operator|new
name|EmbeddedSolrServer
argument_list|(
name|config
argument_list|,
name|coreName
argument_list|)
decl_stmt|;
specifier|final
name|CoreAdminRequest
operator|.
name|Create
name|createRequest
init|=
operator|new
name|CoreAdminRequest
operator|.
name|Create
argument_list|()
decl_stmt|;
name|createRequest
operator|.
name|setCoreName
argument_list|(
name|coreName
argument_list|)
expr_stmt|;
name|createRequest
operator|.
name|setConfigSet
argument_list|(
name|coreName
argument_list|)
expr_stmt|;
name|embeddedSolrServer
operator|.
name|request
argument_list|(
name|createRequest
argument_list|)
expr_stmt|;
return|return
name|embeddedSolrServer
return|;
block|}
block|}
end_class

end_unit

