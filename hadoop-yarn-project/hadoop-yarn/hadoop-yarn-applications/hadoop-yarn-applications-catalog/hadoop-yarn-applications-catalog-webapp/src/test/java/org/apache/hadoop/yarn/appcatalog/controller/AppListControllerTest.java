begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.appcatalog.controller
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|appcatalog
operator|.
name|controller
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|appcatalog
operator|.
name|model
operator|.
name|AppEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Unit test for AppListController.  */
end_comment

begin_class
DECL|class|AppListControllerTest
specifier|public
class|class
name|AppListControllerTest
block|{
DECL|field|controller
specifier|private
name|AppListController
name|controller
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|controller
operator|=
operator|new
name|AppListController
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetList ()
specifier|public
name|void
name|testGetList
parameter_list|()
throws|throws
name|Exception
block|{
name|AppListController
name|ac
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AppListController
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AppEntry
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|AppEntry
argument_list|>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|ac
operator|.
name|getList
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|actual
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|AppEntry
argument_list|>
name|result
init|=
name|ac
operator|.
name|getList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|result
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelete ()
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
literal|"application 1"
decl_stmt|;
name|AppListController
name|ac
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AppListController
operator|.
name|class
argument_list|)
decl_stmt|;
name|Response
name|expected
init|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|ac
operator|.
name|delete
argument_list|(
name|id
argument_list|,
name|id
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Response
name|actual
init|=
name|ac
operator|.
name|delete
argument_list|(
name|id
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getStatus
argument_list|()
argument_list|,
name|actual
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeploy ()
specifier|public
name|void
name|testDeploy
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
literal|"application 1"
decl_stmt|;
name|AppListController
name|ac
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AppListController
operator|.
name|class
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|Response
name|expected
init|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|ac
operator|.
name|deploy
argument_list|(
name|id
argument_list|,
name|service
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Response
name|actual
init|=
name|ac
operator|.
name|deploy
argument_list|(
name|id
argument_list|,
name|service
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getStatus
argument_list|()
argument_list|,
name|actual
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPathAnnotation ()
specifier|public
name|void
name|testPathAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|this
operator|.
name|controller
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotations
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"The controller has the annotation Path"
argument_list|,
name|this
operator|.
name|controller
operator|.
name|getClass
argument_list|()
operator|.
name|isAnnotationPresent
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|path
init|=
name|this
operator|.
name|controller
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"The path is /app_list"
argument_list|,
name|path
operator|.
name|value
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"/app_list"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

