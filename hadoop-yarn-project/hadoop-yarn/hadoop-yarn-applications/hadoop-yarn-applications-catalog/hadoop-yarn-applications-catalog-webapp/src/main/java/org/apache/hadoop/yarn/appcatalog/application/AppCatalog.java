begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.appcatalog.application
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|appcatalog
operator|.
name|application
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ApplicationPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|appcatalog
operator|.
name|controller
operator|.
name|AppDetailsController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Jackson resource configuration class for Application Catalog.  */
end_comment

begin_class
annotation|@
name|ApplicationPath
argument_list|(
literal|"service"
argument_list|)
DECL|class|AppCatalog
specifier|public
class|class
name|AppCatalog
extends|extends
name|Application
block|{
annotation|@
name|Override
DECL|method|getClasses ()
specifier|public
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getClasses
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|resources
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// following code can be used to customize Jersey 2.0 JSON provider:
try|try
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|jsonProvider
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.glassfish.jersey.jackson.JacksonFeature"
argument_list|)
decl_stmt|;
comment|// Class jsonProvider =
comment|// Class.forName("org.glassfish.jersey.moxy.json.MoxyJsonFeature");
comment|// Class jsonProvider =
comment|// Class.forName("org.glassfish.jersey.jettison.JettisonFeature");
name|resources
operator|.
name|add
argument_list|(
name|jsonProvider
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|addRestResourceClasses
argument_list|(
name|resources
argument_list|)
expr_stmt|;
return|return
name|resources
return|;
block|}
comment|/**    * Add your own resources here.    */
DECL|method|addRestResourceClasses (final Set<Class<?>> resources)
specifier|private
name|void
name|addRestResourceClasses
parameter_list|(
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|resources
parameter_list|)
block|{
name|resources
operator|.
name|add
argument_list|(
name|AppDetailsController
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

