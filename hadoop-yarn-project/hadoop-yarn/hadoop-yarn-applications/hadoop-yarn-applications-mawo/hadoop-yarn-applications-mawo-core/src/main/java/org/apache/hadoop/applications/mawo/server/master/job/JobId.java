begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.applications.mawo.server.master.job
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|applications
operator|.
name|mawo
operator|.
name|server
operator|.
name|master
operator|.
name|job
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * Define MaWo JobId.  */
end_comment

begin_class
DECL|class|JobId
specifier|public
class|class
name|JobId
implements|implements
name|Writable
block|{
comment|/**    * MaWo job prefix.    */
DECL|field|JOB_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|JOB_PREFIX
init|=
literal|"mawo_job_"
decl_stmt|;
comment|/**    * Create unique random JobId.    * @return unique random JobId    */
DECL|method|newJobId ()
specifier|static
name|JobId
name|newJobId
parameter_list|()
block|{
name|Random
name|rn
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|int
name|range
init|=
literal|900000
decl_stmt|;
specifier|final
name|int
name|randomadd
init|=
literal|100000
decl_stmt|;
name|int
name|randomNum
init|=
name|rn
operator|.
name|nextInt
argument_list|(
name|range
argument_list|)
operator|+
name|randomadd
decl_stmt|;
return|return
operator|new
name|JobId
argument_list|(
name|randomNum
argument_list|)
return|;
block|}
comment|/**    * Unique Id.    */
DECL|field|jobIdentifier
specifier|private
name|int
name|jobIdentifier
decl_stmt|;
comment|/**    * JobId default constructor.    */
DECL|method|JobId ()
specifier|public
name|JobId
parameter_list|()
block|{    }
comment|/**    * JobId constructor with Id.    * @param id : unique id    */
DECL|method|JobId (final int id)
specifier|public
name|JobId
parameter_list|(
specifier|final
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|jobIdentifier
operator|=
name|id
expr_stmt|;
block|}
comment|/**    * Get JobId.    * @return unique ID    */
DECL|method|getID ()
specifier|public
specifier|final
name|int
name|getID
parameter_list|()
block|{
return|return
name|jobIdentifier
return|;
block|}
comment|/**    * Print JobId.    * @return JobId    */
DECL|method|toString ()
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
return|return
name|JOB_PREFIX
operator|+
name|jobIdentifier
return|;
block|}
annotation|@
name|Override
comment|/**    * Hashcode for jobId.    */
DECL|method|hashCode ()
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|jobIdentifier
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
comment|/**    * Implement equals method for jobId.    */
DECL|method|equals (final Object obj)
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|JobId
name|other
init|=
operator|(
name|JobId
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|jobIdentifier
operator|!=
name|other
operator|.
name|jobIdentifier
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|write (final DataOutput out)
specifier|public
specifier|final
name|void
name|write
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|jobIdentifier
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|readFields (final DataInput in)
specifier|public
specifier|final
name|void
name|readFields
parameter_list|(
specifier|final
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|jobIdentifier
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

