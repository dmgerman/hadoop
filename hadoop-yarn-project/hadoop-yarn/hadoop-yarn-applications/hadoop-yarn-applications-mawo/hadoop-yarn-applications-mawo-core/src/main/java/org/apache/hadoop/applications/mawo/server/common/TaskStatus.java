begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.applications.mawo.server.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|applications
operator|.
name|mawo
operator|.
name|server
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|applications
operator|.
name|mawo
operator|.
name|server
operator|.
name|worker
operator|.
name|WorkerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Defines TaskStatus for MaWo app.  */
end_comment

begin_class
DECL|class|TaskStatus
specifier|public
class|class
name|TaskStatus
implements|implements
name|Writable
implements|,
name|Cloneable
block|{
comment|/**    * Set logger.    */
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TaskStatus
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * TaskId is a unique task identifier.    */
DECL|field|taskId
specifier|private
name|TaskId
name|taskId
init|=
operator|new
name|TaskId
argument_list|()
decl_stmt|;
comment|/**    * epoch time for a task starttime.    */
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
comment|/**    * epoch time for a task endtime.    */
DECL|field|endTime
specifier|private
name|long
name|endTime
decl_stmt|;
comment|/**    * Unique worker identifier.    */
DECL|field|workerId
specifier|private
name|WorkerId
name|workerId
init|=
operator|new
name|WorkerId
argument_list|()
decl_stmt|;
comment|/**    * Task exit code.    */
DECL|field|exitCode
specifier|private
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * Task cmd.    */
DECL|field|taskCMD
specifier|private
name|String
name|taskCMD
decl_stmt|;
comment|/**    * Task type.    */
DECL|field|taskType
specifier|private
name|String
name|taskType
decl_stmt|;
comment|/**    * Possible Task States.    */
DECL|enum|State
specifier|public
enum|enum
name|State
block|{
comment|/**      * INIT State refers to Task initialization.      */
DECL|enumConstant|INIT
name|INIT
block|,
comment|/**      * RUNNING State refers to Task in Running state.      */
DECL|enumConstant|RUNNING
name|RUNNING
block|,
comment|/**      * SUCCEEDED State is assigned when task finishes successfully.      */
DECL|enumConstant|SUCCEEDED
name|SUCCEEDED
block|,
comment|/**      * FAILED State is assigned when task fails.      */
DECL|enumConstant|FAILED
name|FAILED
block|,
comment|/**      * KILLED State refers to when a task is killed.      */
DECL|enumConstant|KILLED
name|KILLED
block|,
comment|/**      * EXPIRE State refers to when a task is expired.      */
DECL|enumConstant|EXPIRE
name|EXPIRE
block|}
comment|/**    * Current Task state.    */
DECL|field|runState
specifier|private
specifier|volatile
name|State
name|runState
decl_stmt|;
comment|/**    * Task status constructor.    */
DECL|method|TaskStatus ()
specifier|public
name|TaskStatus
parameter_list|()
block|{   }
comment|/**    * Task status constructor with workerId, TaskId, TaskCmd, TaskType.    * @param localworkerId : Worker ID    * @param localtaskId : Task ID    * @param localtaskCMD : Task command line    * @param localtaskType : Type of Task    */
DECL|method|TaskStatus (final WorkerId localworkerId, final TaskId localtaskId, final String localtaskCMD, final String localtaskType)
specifier|public
name|TaskStatus
parameter_list|(
specifier|final
name|WorkerId
name|localworkerId
parameter_list|,
specifier|final
name|TaskId
name|localtaskId
parameter_list|,
specifier|final
name|String
name|localtaskCMD
parameter_list|,
specifier|final
name|String
name|localtaskType
parameter_list|)
block|{
name|this
argument_list|(
name|localworkerId
argument_list|,
name|localtaskId
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|INIT
argument_list|,
name|localtaskCMD
argument_list|,
name|localtaskType
argument_list|)
expr_stmt|;
block|}
comment|/**    * Task status constructor with workerId, TaskId,    * TaskCmd, TaskType and Run State.    * @param localworkerId : Worker Id    * @param localtaskId : Task Id    * @param localrunState : Task run State    * @param localtaskCMD : Task cmd    * @param localtaskType : Task type    */
DECL|method|TaskStatus (final WorkerId localworkerId, final TaskId localtaskId, final State localrunState, final String localtaskCMD, final String localtaskType)
specifier|public
name|TaskStatus
parameter_list|(
specifier|final
name|WorkerId
name|localworkerId
parameter_list|,
specifier|final
name|TaskId
name|localtaskId
parameter_list|,
specifier|final
name|State
name|localrunState
parameter_list|,
specifier|final
name|String
name|localtaskCMD
parameter_list|,
specifier|final
name|String
name|localtaskType
parameter_list|)
block|{
name|setWorkerId
argument_list|(
name|localworkerId
argument_list|)
expr_stmt|;
name|setTaskId
argument_list|(
name|localtaskId
argument_list|)
expr_stmt|;
name|setRunState
argument_list|(
name|localrunState
argument_list|)
expr_stmt|;
name|setTaskCMD
argument_list|(
name|localtaskCMD
argument_list|)
expr_stmt|;
name|setTaskType
argument_list|(
name|localtaskType
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get status of a Task.    * @return Status of a Task    */
DECL|method|getRunState ()
specifier|public
specifier|final
name|State
name|getRunState
parameter_list|()
block|{
return|return
name|runState
return|;
block|}
comment|/**    * Update status of a Task.    * @param localrunState : Status of a Task    */
DECL|method|setRunState (final State localrunState)
specifier|public
specifier|final
name|void
name|setRunState
parameter_list|(
specifier|final
name|State
name|localrunState
parameter_list|)
block|{
name|this
operator|.
name|runState
operator|=
name|localrunState
expr_stmt|;
block|}
comment|/**    * Set exitcode of a Task.    * @param localexitCode : Exitcode of a Task    */
DECL|method|setExitCode (final int localexitCode)
specifier|public
specifier|final
name|void
name|setExitCode
parameter_list|(
specifier|final
name|int
name|localexitCode
parameter_list|)
block|{
name|this
operator|.
name|exitCode
operator|=
name|localexitCode
expr_stmt|;
block|}
comment|/**    * Get exitcode of a Task.    * @return exitCode of Task    */
DECL|method|getExitCode ()
specifier|public
specifier|final
name|int
name|getExitCode
parameter_list|()
block|{
return|return
name|exitCode
return|;
block|}
comment|/**    * Set Task cmd of a Task.    * @param localcmd : command line which need to be executed    */
DECL|method|setTaskCMD (final String localcmd)
specifier|public
specifier|final
name|void
name|setTaskCMD
parameter_list|(
specifier|final
name|String
name|localcmd
parameter_list|)
block|{
name|this
operator|.
name|taskCMD
operator|=
name|localcmd
expr_stmt|;
block|}
comment|/**    * Get Task cmd of a Task.    * @return TaskCmd : command line which need to be executed    */
DECL|method|getTaskCMD ()
specifier|public
specifier|final
name|String
name|getTaskCMD
parameter_list|()
block|{
return|return
name|taskCMD
return|;
block|}
comment|/**    * Set Task Type.    * @param localtaskType : TaskType such as SimpleTask, NullTask    */
DECL|method|setTaskType (final String localtaskType)
specifier|public
specifier|final
name|void
name|setTaskType
parameter_list|(
specifier|final
name|String
name|localtaskType
parameter_list|)
block|{
name|this
operator|.
name|taskType
operator|=
name|localtaskType
expr_stmt|;
block|}
comment|/**    * Get Task Type.    * @return TaskType : TaskType such as SimpleTask, NullTask    */
DECL|method|getTaskType ()
specifier|public
specifier|final
name|String
name|getTaskType
parameter_list|()
block|{
return|return
name|taskType
return|;
block|}
comment|/**    * Get Task Id.    * @return TaskId : Task identifier    */
DECL|method|getTaskId ()
specifier|public
specifier|final
name|TaskId
name|getTaskId
parameter_list|()
block|{
return|return
name|taskId
return|;
block|}
comment|/**    * Set TaskId.    * @param localtaskId : Task identifier    */
DECL|method|setTaskId (final TaskId localtaskId)
specifier|public
specifier|final
name|void
name|setTaskId
parameter_list|(
specifier|final
name|TaskId
name|localtaskId
parameter_list|)
block|{
if|if
condition|(
name|localtaskId
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|taskId
operator|=
name|localtaskId
expr_stmt|;
block|}
block|}
comment|/**    * Set staus of a Task.    * @param localtaskId : TaskId of a task    * @param localrunState : Run state of a task    */
DECL|method|setTaskState (final TaskId localtaskId, final State localrunState)
specifier|public
specifier|final
name|void
name|setTaskState
parameter_list|(
specifier|final
name|TaskId
name|localtaskId
parameter_list|,
specifier|final
name|State
name|localrunState
parameter_list|)
block|{
name|setTaskId
argument_list|(
name|localtaskId
argument_list|)
expr_stmt|;
name|setRunState
argument_list|(
name|localrunState
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get Task status of a Task.    * @param localtaskId : Task Id    * @return TaskStatus for valid Task otherwise Null    */
DECL|method|getTaskState (final TaskId localtaskId)
specifier|public
specifier|final
name|State
name|getTaskState
parameter_list|(
specifier|final
name|TaskId
name|localtaskId
parameter_list|)
block|{
if|if
condition|(
name|localtaskId
operator|.
name|equals
argument_list|(
name|this
operator|.
name|taskId
argument_list|)
condition|)
block|{
return|return
name|getRunState
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Get starttime of a Task.    * @return StartTime of Task    */
DECL|method|getStartTime ()
specifier|public
specifier|final
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
comment|/**    * Set current time as start time of a Task.    */
DECL|method|setStartTime ()
specifier|public
specifier|final
name|void
name|setStartTime
parameter_list|()
block|{
name|this
operator|.
name|startTime
operator|=
name|getCurrentTime
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Start Time for "
operator|+
name|this
operator|.
name|taskId
operator|+
literal|" is "
operator|+
name|this
operator|.
name|startTime
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set task start time to a specific time value.    * @param time : epoch timestamp    */
DECL|method|setStartTime (final long time)
specifier|private
name|void
name|setStartTime
parameter_list|(
specifier|final
name|long
name|time
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|time
expr_stmt|;
block|}
comment|/**    * Get task end time.    * @return End time of task.    */
DECL|method|getEndTime ()
specifier|public
specifier|final
name|long
name|getEndTime
parameter_list|()
block|{
return|return
name|endTime
return|;
block|}
comment|/**    * Set task end time to current time.    */
DECL|method|setEndTime ()
specifier|public
specifier|final
name|void
name|setEndTime
parameter_list|()
block|{
name|this
operator|.
name|setEndTime
argument_list|(
name|getCurrentTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set task end time to a specific time value.    * @param time : epoch timestamp    */
DECL|method|setEndTime (final long time)
specifier|private
name|void
name|setEndTime
parameter_list|(
specifier|final
name|long
name|time
parameter_list|)
block|{
name|this
operator|.
name|endTime
operator|=
name|time
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"End Time for "
operator|+
name|this
operator|.
name|taskId
operator|+
literal|" is "
operator|+
name|this
operator|.
name|endTime
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get current time in milliseconds.    * @return Current time in milliseconds    */
DECL|method|getCurrentTime ()
specifier|private
name|long
name|getCurrentTime
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|write (final DataOutput dataOutput)
specifier|public
specifier|final
name|void
name|write
parameter_list|(
specifier|final
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|workerId
operator|.
name|write
argument_list|(
name|dataOutput
argument_list|)
expr_stmt|;
name|taskId
operator|.
name|write
argument_list|(
name|dataOutput
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeEnum
argument_list|(
name|dataOutput
argument_list|,
name|runState
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|dataOutput
argument_list|,
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|dataOutput
argument_list|,
name|getEndTime
argument_list|()
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|dataOutput
argument_list|,
name|taskCMD
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|dataOutput
argument_list|,
name|taskType
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|dataOutput
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|readFields (final DataInput dataInput)
specifier|public
specifier|final
name|void
name|readFields
parameter_list|(
specifier|final
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
name|workerId
operator|.
name|readFields
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
name|taskId
operator|.
name|readFields
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
name|setRunState
argument_list|(
name|WritableUtils
operator|.
name|readEnum
argument_list|(
name|dataInput
argument_list|,
name|State
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|setStartTime
argument_list|(
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|dataInput
argument_list|)
argument_list|)
expr_stmt|;
name|setEndTime
argument_list|(
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|dataInput
argument_list|)
argument_list|)
expr_stmt|;
name|setTaskCMD
argument_list|(
name|WritableUtils
operator|.
name|readString
argument_list|(
name|dataInput
argument_list|)
argument_list|)
expr_stmt|;
name|setTaskType
argument_list|(
name|WritableUtils
operator|.
name|readString
argument_list|(
name|dataInput
argument_list|)
argument_list|)
expr_stmt|;
name|setExitCode
argument_list|(
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|dataInput
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get workerId.    * @return workerId : Worker identifier    */
DECL|method|getWorkerId ()
specifier|public
specifier|final
name|WorkerId
name|getWorkerId
parameter_list|()
block|{
return|return
name|workerId
return|;
block|}
comment|/**    * Set WorkerId.    * @param localworkerId : Worker identifier    */
DECL|method|setWorkerId (final WorkerId localworkerId)
specifier|public
specifier|final
name|void
name|setWorkerId
parameter_list|(
specifier|final
name|WorkerId
name|localworkerId
parameter_list|)
block|{
name|this
operator|.
name|workerId
operator|=
name|localworkerId
expr_stmt|;
block|}
block|}
end_class

end_unit

