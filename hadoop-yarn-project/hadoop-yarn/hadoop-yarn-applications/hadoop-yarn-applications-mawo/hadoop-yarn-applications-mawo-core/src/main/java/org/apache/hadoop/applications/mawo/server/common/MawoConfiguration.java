begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.applications.mawo.server.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|applications
operator|.
name|mawo
operator|.
name|server
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_comment
comment|/**  * MaWo configuration class.  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|MawoConfiguration
specifier|public
specifier|final
class|class
name|MawoConfiguration
block|{
comment|/**    * logger initialization for mawo config class.    */
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MawoConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Define comma separator.    */
DECL|field|COMMA_SPLITTER
specifier|static
specifier|final
name|String
name|COMMA_SPLITTER
init|=
literal|","
decl_stmt|;
comment|/**    * MaWo config file name.    */
DECL|field|CONFIG_FILE
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_FILE
init|=
literal|"mawo.properties"
decl_stmt|;
comment|/**    * RPC server hostname.    */
DECL|field|RPC_SERVER_HOSTNAME
specifier|private
specifier|static
specifier|final
name|String
name|RPC_SERVER_HOSTNAME
init|=
literal|"rpc.server.hostname"
decl_stmt|;
comment|/**    * RPC server port.    */
DECL|field|RPC_SERVER_PORT
specifier|private
specifier|static
specifier|final
name|String
name|RPC_SERVER_PORT
init|=
literal|"rpc.server.port"
decl_stmt|;
comment|// Default values
comment|/**    * RPC server hostname default value.    */
DECL|field|RPC_SERVER_HOSTNAME_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|RPC_SERVER_HOSTNAME_DEFAULT
init|=
literal|"localhost"
decl_stmt|;
comment|/**    * RPC server port default value.    */
DECL|field|RPC_SERVER_PORT_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|RPC_SERVER_PORT_DEFAULT
init|=
literal|"5121"
decl_stmt|;
comment|// Curator related Configurations
comment|/**    * Config to check id Job Queue Storage is enabled.    */
DECL|field|JOB_QUEUE_STORAGE_ENABLED
specifier|private
specifier|static
specifier|final
name|String
name|JOB_QUEUE_STORAGE_ENABLED
init|=
literal|"mawo.job-queue-storage.enabled"
decl_stmt|;
comment|/**    * ZooKeeper property prefix.    */
DECL|field|ZK_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|ZK_PREFIX
init|=
literal|"zookeeper."
decl_stmt|;
comment|/**    * Property for ZooKeeper address.    */
DECL|field|ZK_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|ZK_ADDRESS
init|=
name|ZK_PREFIX
operator|+
literal|"address"
decl_stmt|;
comment|/**    * Default value for ZooKeeper address.    */
DECL|field|ZK_ADDRESS_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|ZK_ADDRESS_DEFAULT
init|=
literal|"localhost:2181"
decl_stmt|;
comment|/**    * Property for ZooKeeper parent path.    */
DECL|field|ZK_PARENT_PATH
specifier|private
specifier|static
specifier|final
name|String
name|ZK_PARENT_PATH
init|=
name|ZK_PREFIX
operator|+
literal|"parent.path"
decl_stmt|;
comment|/**    * Property for ZooKeeper parent path default value.    */
DECL|field|ZK_PARENT_PATH_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|ZK_PARENT_PATH_DEFAULT
init|=
literal|"/mawoRoot"
decl_stmt|;
comment|/**    * Property for ZooKeeper retry interval.    */
DECL|field|ZK_RETRY_INTERVAL_MS
specifier|private
specifier|static
specifier|final
name|String
name|ZK_RETRY_INTERVAL_MS
init|=
name|ZK_PREFIX
operator|+
literal|"retry.interval.ms"
decl_stmt|;
comment|/**    * Default value for ZooKeeper retry interval.    */
DECL|field|ZK_RETRY_INTERVAL_MS_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|ZK_RETRY_INTERVAL_MS_DEFAULT
init|=
literal|"1000"
decl_stmt|;
comment|/**    * Property for Zookeeper session timeout.    */
DECL|field|ZK_SESSION_TIMEOUT_MS
specifier|private
specifier|static
specifier|final
name|String
name|ZK_SESSION_TIMEOUT_MS
init|=
name|ZK_PREFIX
operator|+
literal|"session.timeout.ms"
decl_stmt|;
comment|/**    * Default value for ZooKeeper session timeout.    */
DECL|field|ZK_SESSION_TIMEOUT_MS_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|ZK_SESSION_TIMEOUT_MS_DEFAULT
init|=
literal|"10000"
decl_stmt|;
comment|/**    * Property for ZooKeeper retry number.    */
DECL|field|ZK_RETRIES_NUM
specifier|private
specifier|static
specifier|final
name|String
name|ZK_RETRIES_NUM
init|=
name|ZK_PREFIX
operator|+
literal|"retries.num"
decl_stmt|;
comment|/**    * Default value for ZooKeeper retry number.    */
DECL|field|ZK_RETRIES_NUM_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|ZK_RETRIES_NUM_DEFAULT
init|=
literal|"1000"
decl_stmt|;
comment|/**    * Property for ZooKeeper acl.    */
DECL|field|ZK_ACL
specifier|private
specifier|static
specifier|final
name|String
name|ZK_ACL
init|=
name|ZK_PREFIX
operator|+
literal|"acl"
decl_stmt|;
comment|/**    * Default value for ZooKeeper acl.    */
DECL|field|ZK_ACL_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|ZK_ACL_DEFAULT
init|=
literal|"world:anyone:rwcda"
decl_stmt|;
comment|/**    * Property for setting num of workers.    */
DECL|field|WORKER_NUM_TASKS
specifier|private
specifier|static
specifier|final
name|String
name|WORKER_NUM_TASKS
init|=
literal|"worker.num.tasks"
decl_stmt|;
comment|/**    * Default value for num of workers.    */
DECL|field|WORKER_NUM_TASKS_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|WORKER_NUM_TASKS_DEFAULT
init|=
literal|"10"
decl_stmt|;
comment|/**    * Property for setting job builder class.    */
DECL|field|JOB_BUILDER_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|JOB_BUILDER_CLASS
init|=
literal|"mawo.job-builder.class"
decl_stmt|;
comment|/**    * Default value for job builder class = simpleTaskJobBuilder.    */
DECL|field|JOB_BUILDER_CLASS_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|JOB_BUILDER_CLASS_DEFAULT
init|=
literal|"org.apache.hadoop.applications.mawo.server.master.job."
operator|+
literal|"SimpleTaskJobBuilder"
decl_stmt|;
comment|/**    * Property for setting worker workspace.    */
DECL|field|WORKER_WORK_SPACE
specifier|private
specifier|static
specifier|final
name|String
name|WORKER_WORK_SPACE
init|=
literal|"worker.workspace"
decl_stmt|;
comment|/**    * Default value for worker workspace.    */
DECL|field|WORKER_WORK_SPACE_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|WORKER_WORK_SPACE_DEFAULT
init|=
literal|"/tmp"
decl_stmt|;
comment|/**    * Property for resource manager url.    */
DECL|field|CLUSTER_MANAGER_URL
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER_MANAGER_URL
init|=
literal|"ycloud.url"
decl_stmt|;
comment|/**    * Default value for resource manager url.    */
DECL|field|DEFAULT_CLUSTER_MANAGER_URL
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CLUSTER_MANAGER_URL
init|=
literal|"0.0.0.0:9191"
decl_stmt|;
comment|/**    * Property for setting auto shutdown for worker.    */
DECL|field|AUTO_SHUTDOWN_WORKERS
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_SHUTDOWN_WORKERS
init|=
literal|"mawo.master.auto-shutdown-workers"
decl_stmt|;
comment|/**    * Set auto shutdown of workers to False by default.    */
DECL|field|DEFAULT_AUTO_SHUTDOWN_WORKERS
specifier|private
specifier|static
specifier|final
name|boolean
name|DEFAULT_AUTO_SHUTDOWN_WORKERS
init|=
literal|false
decl_stmt|;
comment|/**    * Property for task status log path in master node.    */
DECL|field|MASTER_TASKS_STATUS_LOG_PATH
specifier|public
specifier|static
specifier|final
name|String
name|MASTER_TASKS_STATUS_LOG_PATH
init|=
literal|"master.tasks-status.log.path"
decl_stmt|;
comment|/**    * Default value for task status log path.    */
DECL|field|MASTER_TASKS_STATUS_LOG_PATH_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|MASTER_TASKS_STATUS_LOG_PATH_DEFAULT
init|=
literal|"/tmp"
decl_stmt|;
comment|/**    * Property for drain event timeout.    */
DECL|field|MASTER_DRAIN_EVENTS_TIMEOUT
specifier|private
specifier|static
specifier|final
name|String
name|MASTER_DRAIN_EVENTS_TIMEOUT
init|=
literal|"master.drain-events.timeout"
decl_stmt|;
comment|/**    * Default value for drain event timeout.    */
DECL|field|MASTER_DRAIN_EVENTS_TIMEOUT_DEFAULT
specifier|private
specifier|static
specifier|final
name|long
name|MASTER_DRAIN_EVENTS_TIMEOUT_DEFAULT
init|=
literal|60000
decl_stmt|;
comment|/**    * Property for worker white list env.    * This environment variables will be set for all tasks.    */
DECL|field|WORKER_WHITELIST_ENV
specifier|private
specifier|static
specifier|final
name|String
name|WORKER_WHITELIST_ENV
init|=
literal|"worker.whitelist.env"
decl_stmt|;
comment|/**    * Default value for worker white list env.    */
DECL|field|WORKER_WHITELIST_ENV_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|WORKER_WHITELIST_ENV_DEFAULT
init|=
literal|""
decl_stmt|;
comment|/**    * Property for teardown worker validity.    */
DECL|field|MASTER_TEARDOWN_WORKER_VALIDITY_INTERVAL_MS
specifier|private
specifier|static
specifier|final
name|String
name|MASTER_TEARDOWN_WORKER_VALIDITY_INTERVAL_MS
init|=
literal|"master.teardown-worker.validity-interval.ms"
decl_stmt|;
comment|/**    * Default value for teardown worker validity.    */
specifier|private
specifier|static
specifier|final
name|String
DECL|field|MASTER_TEARDOWN_WORKER_VALIDITY_INTERVAL_MS_DEFAULT
name|MASTER_TEARDOWN_WORKER_VALIDITY_INTERVAL_MS_DEFAULT
init|=
literal|"120000"
decl_stmt|;
comment|/**    * Map of MaWo Configs.    */
DECL|field|configsMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configsMap
decl_stmt|;
comment|/**    * Mowo configuration initializer.    */
DECL|method|MawoConfiguration ()
specifier|public
name|MawoConfiguration
parameter_list|()
block|{
name|this
argument_list|(
name|readConfigFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set up MaWo properties.    * @param properties : Map of properties    */
DECL|method|MawoConfiguration (final Properties properties)
specifier|private
name|MawoConfiguration
parameter_list|(
specifier|final
name|Properties
name|properties
parameter_list|)
block|{
name|configsMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|configsMap
operator|.
name|put
argument_list|(
name|RPC_SERVER_HOSTNAME
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|RPC_SERVER_HOSTNAME
argument_list|,
name|RPC_SERVER_HOSTNAME_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|configsMap
operator|.
name|put
argument_list|(
name|RPC_SERVER_PORT
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|RPC_SERVER_PORT
argument_list|,
name|RPC_SERVER_PORT_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|configsMap
operator|.
name|put
argument_list|(
name|ZK_ADDRESS
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|ZK_ADDRESS
argument_list|,
name|ZK_ADDRESS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|configsMap
operator|.
name|put
argument_list|(
name|ZK_PARENT_PATH
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|ZK_PARENT_PATH
argument_list|,
name|ZK_PARENT_PATH_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|configsMap
operator|.
name|put
argument_list|(
name|ZK_RETRY_INTERVAL_MS
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|ZK_RETRY_INTERVAL_MS
argument_list|,
name|ZK_RETRY_INTERVAL_MS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|configsMap
operator|.
name|put
argument_list|(
name|ZK_SESSION_TIMEOUT_MS
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|ZK_SESSION_TIMEOUT_MS
argument_list|,
name|ZK_SESSION_TIMEOUT_MS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|configsMap
operator|.
name|put
argument_list|(
name|ZK_RETRIES_NUM
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|ZK_RETRIES_NUM
argument_list|,
name|ZK_RETRIES_NUM_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|configsMap
operator|.
name|put
argument_list|(
name|ZK_ACL
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|ZK_ACL
argument_list|,
name|ZK_ACL_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|configsMap
operator|.
name|put
argument_list|(
name|JOB_BUILDER_CLASS
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|JOB_BUILDER_CLASS
argument_list|,
name|JOB_BUILDER_CLASS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|configsMap
operator|.
name|put
argument_list|(
name|JOB_QUEUE_STORAGE_ENABLED
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|JOB_QUEUE_STORAGE_ENABLED
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|configsMap
operator|.
name|put
argument_list|(
name|CLUSTER_MANAGER_URL
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|CLUSTER_MANAGER_URL
argument_list|,
name|DEFAULT_CLUSTER_MANAGER_URL
argument_list|)
argument_list|)
expr_stmt|;
name|configsMap
operator|.
name|put
argument_list|(
name|WORKER_NUM_TASKS
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|WORKER_NUM_TASKS
argument_list|,
name|WORKER_NUM_TASKS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|configsMap
operator|.
name|put
argument_list|(
name|WORKER_WORK_SPACE
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|WORKER_WORK_SPACE
argument_list|,
name|WORKER_WORK_SPACE_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|configsMap
operator|.
name|put
argument_list|(
name|AUTO_SHUTDOWN_WORKERS
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|AUTO_SHUTDOWN_WORKERS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|DEFAULT_AUTO_SHUTDOWN_WORKERS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|configsMap
operator|.
name|put
argument_list|(
name|MASTER_TASKS_STATUS_LOG_PATH
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|MASTER_TASKS_STATUS_LOG_PATH
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|MASTER_TASKS_STATUS_LOG_PATH_DEFAULT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|configsMap
operator|.
name|put
argument_list|(
name|MASTER_DRAIN_EVENTS_TIMEOUT
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|MASTER_DRAIN_EVENTS_TIMEOUT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|MASTER_DRAIN_EVENTS_TIMEOUT_DEFAULT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|configsMap
operator|.
name|put
argument_list|(
name|WORKER_WHITELIST_ENV
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|WORKER_WHITELIST_ENV
argument_list|,
name|WORKER_WHITELIST_ENV_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|configsMap
operator|.
name|put
argument_list|(
name|MASTER_TEARDOWN_WORKER_VALIDITY_INTERVAL_MS
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|MASTER_TEARDOWN_WORKER_VALIDITY_INTERVAL_MS
argument_list|,
name|MASTER_TEARDOWN_WORKER_VALIDITY_INTERVAL_MS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get MaWo config map.    * @return the config map for MaWo properties    */
DECL|method|getConfigsMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getConfigsMap
parameter_list|()
block|{
return|return
name|configsMap
return|;
block|}
comment|/**    * Find, read, and parse the configuration file.    *    * @return the properties that were found or empty if no file was found    */
DECL|method|readConfigFile ()
specifier|private
specifier|static
name|Properties
name|readConfigFile
parameter_list|()
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Get property file stream from classpath
name|LOG
operator|.
name|info
argument_list|(
literal|"Configuration file being loaded: "
operator|+
name|CONFIG_FILE
operator|+
literal|". Found in classpath at "
operator|+
name|MawoConfiguration
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|CONFIG_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|InputStream
name|inputStream
init|=
name|MawoConfiguration
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|CONFIG_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputStream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|CONFIG_FILE
operator|+
literal|" not found in classpath"
argument_list|)
throw|;
block|}
comment|// load the properties
try|try
block|{
name|properties
operator|.
name|load
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnf
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No configuration file "
operator|+
name|CONFIG_FILE
operator|+
literal|" found in classpath."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't read configuration file "
operator|+
name|CONFIG_FILE
argument_list|,
name|ie
argument_list|)
throw|;
block|}
return|return
name|properties
return|;
block|}
comment|/**    * Get MaWo RPC server Port.    * @return value of rpc.server.port    */
DECL|method|getRpcServerPort ()
specifier|public
name|int
name|getRpcServerPort
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|configsMap
operator|.
name|get
argument_list|(
name|RPC_SERVER_PORT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get RPC Host map.    * @return value of rpc.server.hostname    */
DECL|method|getRpcHostName ()
specifier|public
name|String
name|getRpcHostName
parameter_list|()
block|{
return|return
name|configsMap
operator|.
name|get
argument_list|(
name|RPC_SERVER_HOSTNAME
argument_list|)
return|;
block|}
comment|/**    * Check if Job Queue Storage is Enabled.    * @return True if Job queue storage is enabled otherwise False    */
DECL|method|getJobQueueStorageEnabled ()
specifier|public
name|boolean
name|getJobQueueStorageEnabled
parameter_list|()
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|configsMap
operator|.
name|get
argument_list|(
name|JOB_QUEUE_STORAGE_ENABLED
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get ZooKeeper Address.    * @return value of ZooKeeper.address    */
DECL|method|getZKAddress ()
specifier|public
name|String
name|getZKAddress
parameter_list|()
block|{
return|return
name|configsMap
operator|.
name|get
argument_list|(
name|ZK_ADDRESS
argument_list|)
return|;
block|}
comment|/**    * Get ZooKeeper parent Path.    * @return value of ZooKeeper.parent.path    */
DECL|method|getZKParentPath ()
specifier|public
name|String
name|getZKParentPath
parameter_list|()
block|{
return|return
name|configsMap
operator|.
name|get
argument_list|(
name|ZK_PARENT_PATH
argument_list|)
return|;
block|}
comment|/**    * Get ZooKeeper retry interval value in milli seconds.    * @return value of ZooKeeper.retry.interval.ms    */
DECL|method|getZKRetryIntervalMS ()
specifier|public
name|int
name|getZKRetryIntervalMS
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|configsMap
operator|.
name|get
argument_list|(
name|ZK_RETRY_INTERVAL_MS
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get ZooKeeper session timeout in milli seconds.    * @return value of ZooKeeper.session.timeout.ms    */
DECL|method|getZKSessionTimeoutMS ()
specifier|public
name|int
name|getZKSessionTimeoutMS
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|configsMap
operator|.
name|get
argument_list|(
name|ZK_SESSION_TIMEOUT_MS
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get ZooKeeper retries number.    * @return value of ZooKeeper.retries.num    */
DECL|method|getZKRetriesNum ()
specifier|public
name|int
name|getZKRetriesNum
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|configsMap
operator|.
name|get
argument_list|(
name|ZK_RETRIES_NUM
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get ZooKeeper Acls.    * @return value of ZooKeeper.acl    */
DECL|method|getZKAcl ()
specifier|public
name|String
name|getZKAcl
parameter_list|()
block|{
return|return
name|configsMap
operator|.
name|get
argument_list|(
name|ZK_ACL
argument_list|)
return|;
block|}
comment|/**    * Get number of tasks a worker can run in parallel.    * @return value of worker.num.tasks    */
DECL|method|getWorkerConcurrentTasksLimit ()
specifier|public
name|int
name|getWorkerConcurrentTasksLimit
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|configsMap
operator|.
name|get
argument_list|(
name|WORKER_NUM_TASKS
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get job builder class.    * @return value of mawo.job-builder.class    */
DECL|method|getJobBuilderClass ()
specifier|public
name|String
name|getJobBuilderClass
parameter_list|()
block|{
return|return
name|configsMap
operator|.
name|get
argument_list|(
name|JOB_BUILDER_CLASS
argument_list|)
return|;
block|}
comment|/**    * Get worker work space.    * @return value of worker.workspace    */
DECL|method|getWorkerWorkSpace ()
specifier|public
name|String
name|getWorkerWorkSpace
parameter_list|()
block|{
return|return
name|configsMap
operator|.
name|get
argument_list|(
name|WORKER_WORK_SPACE
argument_list|)
return|;
block|}
comment|/**    * Get cluster manager URL.    * @return value of ycloud.url    */
DECL|method|getClusterManagerURL ()
specifier|public
name|String
name|getClusterManagerURL
parameter_list|()
block|{
return|return
name|configsMap
operator|.
name|get
argument_list|(
name|CLUSTER_MANAGER_URL
argument_list|)
return|;
block|}
comment|/**    * Check if worker auto shutdown feature is enabled.    * @return value of mawo.master.auto-shutdown-workers    */
DECL|method|getAutoShutdownWorkers ()
specifier|public
name|boolean
name|getAutoShutdownWorkers
parameter_list|()
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|configsMap
operator|.
name|get
argument_list|(
name|AUTO_SHUTDOWN_WORKERS
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get Task status log file path on master host.    * @return value of master.tasks-status.log.path    */
DECL|method|getMasterTasksStatusLogPath ()
specifier|public
name|String
name|getMasterTasksStatusLogPath
parameter_list|()
block|{
return|return
name|configsMap
operator|.
name|get
argument_list|(
name|MASTER_TASKS_STATUS_LOG_PATH
argument_list|)
return|;
block|}
comment|/**    * Get Master drain event timeout.    * @return value of master.drain-events.timeout    */
DECL|method|getMasterDrainEventsTimeout ()
specifier|public
name|long
name|getMasterDrainEventsTimeout
parameter_list|()
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|configsMap
operator|.
name|get
argument_list|(
name|MASTER_DRAIN_EVENTS_TIMEOUT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get Worker whitelist env params.    * These params will be set in all tasks.    * @return list of white list environment    */
DECL|method|getWorkerWhiteListEnv ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getWorkerWhiteListEnv
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|whiteList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|env
init|=
name|configsMap
operator|.
name|get
argument_list|(
name|WORKER_WHITELIST_ENV
argument_list|)
decl_stmt|;
if|if
condition|(
name|env
operator|!=
literal|null
operator|&&
operator|!
name|env
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|variables
init|=
name|env
operator|.
name|split
argument_list|(
name|COMMA_SPLITTER
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|variable
range|:
name|variables
control|)
block|{
name|variable
operator|=
name|variable
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|variable
operator|.
name|startsWith
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
name|variable
operator|=
name|variable
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|variable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|whiteList
operator|.
name|add
argument_list|(
name|variable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|whiteList
return|;
block|}
comment|/**    * Get Teardown worker validity interval.    * @return value of master.teardown-worker.validity-interval.ms    */
DECL|method|getTeardownWorkerValidityInterval ()
specifier|public
name|long
name|getTeardownWorkerValidityInterval
parameter_list|()
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|configsMap
operator|.
name|get
argument_list|(
name|MASTER_TEARDOWN_WORKER_VALIDITY_INTERVAL_MS
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

