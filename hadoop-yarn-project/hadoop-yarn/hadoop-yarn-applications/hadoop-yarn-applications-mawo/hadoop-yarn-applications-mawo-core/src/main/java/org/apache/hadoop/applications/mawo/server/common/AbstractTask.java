begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.applications.mawo.server.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|applications
operator|.
name|mawo
operator|.
name|server
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Abstract class for MaWo Task.  */
end_comment

begin_class
DECL|class|AbstractTask
specifier|public
specifier|abstract
class|class
name|AbstractTask
implements|implements
name|Task
block|{
comment|/**    * Task identifier.    */
DECL|field|taskID
specifier|private
name|TaskId
name|taskID
init|=
operator|new
name|TaskId
argument_list|()
decl_stmt|;
comment|/**    * Task environment.    */
DECL|field|environment
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Command which need to be executed as Task.    */
DECL|field|taskCmd
specifier|private
name|String
name|taskCmd
decl_stmt|;
comment|/**    * Type of task.    */
DECL|field|taskType
specifier|private
name|TaskType
name|taskType
decl_stmt|;
comment|/**    * Task timeout.    */
DECL|field|timeout
specifier|private
name|long
name|timeout
decl_stmt|;
comment|/**    * logger for abstract class.    */
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractTask
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * AbstractTask constructor.    */
DECL|method|AbstractTask ()
specifier|public
name|AbstractTask
parameter_list|()
block|{   }
comment|/**    * AbstrackTask constructor.    * @param taskId : Task identifier    * @param localenvironment : Task environment vars    * @param taskCMD : Cmd to run    * @param localtimeout : Task timeout in seconds    */
DECL|method|AbstractTask (final TaskId taskId, final Map<String, String> localenvironment, final String taskCMD, final long localtimeout)
specifier|public
name|AbstractTask
parameter_list|(
specifier|final
name|TaskId
name|taskId
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|localenvironment
parameter_list|,
specifier|final
name|String
name|taskCMD
parameter_list|,
specifier|final
name|long
name|localtimeout
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setTaskId
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
name|setEnvironment
argument_list|(
name|localenvironment
argument_list|)
expr_stmt|;
name|setTaskCmd
argument_list|(
name|taskCMD
argument_list|)
expr_stmt|;
name|setTimeout
argument_list|(
name|localtimeout
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created Task - type: "
operator|+
name|this
operator|.
name|taskType
operator|+
literal|", TaskId: "
operator|+
name|this
operator|.
name|taskID
operator|.
name|toString
argument_list|()
operator|+
literal|", cmd: '"
operator|+
name|taskCMD
operator|+
literal|"' Timeout: "
operator|+
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get environment for a Task.    * @return environment of a Task    */
annotation|@
name|Override
DECL|method|getEnvironment ()
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getEnvironment
parameter_list|()
block|{
return|return
name|environment
return|;
block|}
comment|/**    * Set environment for a Task.    * @param localenvironment : Map of environment vars    */
annotation|@
name|Override
DECL|method|setEnvironment (final Map<String, String> localenvironment)
specifier|public
specifier|final
name|void
name|setEnvironment
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|localenvironment
parameter_list|)
block|{
name|this
operator|.
name|environment
operator|=
name|localenvironment
expr_stmt|;
block|}
comment|/**    * Get TaskCmd for a Task.    * @return TaskCMD: Its a task command line such as sleep 10    */
annotation|@
name|Override
DECL|method|getTaskCmd ()
specifier|public
specifier|final
name|String
name|getTaskCmd
parameter_list|()
block|{
return|return
name|taskCmd
return|;
block|}
comment|/**    * Set TaskCmd for a Task.    * @param taskCMD : Task command line    */
annotation|@
name|Override
DECL|method|setTaskCmd (final String taskCMD)
specifier|public
specifier|final
name|void
name|setTaskCmd
parameter_list|(
specifier|final
name|String
name|taskCMD
parameter_list|)
block|{
name|this
operator|.
name|taskCmd
operator|=
name|taskCMD
expr_stmt|;
block|}
comment|/**    * Get TaskId for a Task.    * @return TaskID: Task command line    */
annotation|@
name|Override
DECL|method|getTaskId ()
specifier|public
specifier|final
name|TaskId
name|getTaskId
parameter_list|()
block|{
return|return
name|taskID
return|;
block|}
comment|/**    * Set Task Id.    * @param taskId : Task Identifier    */
annotation|@
name|Override
DECL|method|setTaskId (final TaskId taskId)
specifier|public
specifier|final
name|void
name|setTaskId
parameter_list|(
specifier|final
name|TaskId
name|taskId
parameter_list|)
block|{
if|if
condition|(
name|taskId
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|taskID
operator|=
name|taskId
expr_stmt|;
block|}
block|}
comment|/**    * Get TaskType for a Task.    * @return TaskType: Type of Task    */
annotation|@
name|Override
DECL|method|getTaskType ()
specifier|public
specifier|final
name|TaskType
name|getTaskType
parameter_list|()
block|{
return|return
name|taskType
return|;
block|}
comment|/**    * Set TaskType for a Task.    * @param type Simple or Composite Task    */
DECL|method|setTaskType (final TaskType type)
specifier|public
specifier|final
name|void
name|setTaskType
parameter_list|(
specifier|final
name|TaskType
name|type
parameter_list|)
block|{
name|this
operator|.
name|taskType
operator|=
name|type
expr_stmt|;
block|}
comment|/**    * Get Timeout for a Task.    * @return timeout in seconds    */
annotation|@
name|Override
DECL|method|getTimeout ()
specifier|public
specifier|final
name|long
name|getTimeout
parameter_list|()
block|{
return|return
name|this
operator|.
name|timeout
return|;
block|}
comment|/**    * Set Task Timeout in seconds.    * @param taskTimeout : Timeout in seconds    */
annotation|@
name|Override
DECL|method|setTimeout (final long taskTimeout)
specifier|public
specifier|final
name|void
name|setTimeout
parameter_list|(
specifier|final
name|long
name|taskTimeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|taskTimeout
expr_stmt|;
block|}
comment|/**    * Write Task.    * @param out : dataoutout object.    * @throws IOException : Throws IO exception if any error occurs.    */
annotation|@
name|Override
DECL|method|write (final DataOutput out)
specifier|public
specifier|final
name|void
name|write
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|taskID
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|int
name|environmentSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|environment
operator|==
literal|null
condition|)
block|{
name|environmentSize
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|environmentSize
operator|=
name|environment
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
operator|new
name|IntWritable
argument_list|(
name|environmentSize
argument_list|)
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|environmentSize
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envEntry
range|:
name|environment
operator|.
name|entrySet
argument_list|()
control|)
block|{
operator|new
name|Text
argument_list|(
name|envEntry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
operator|new
name|Text
argument_list|(
name|envEntry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
name|Text
name|taskCmdText
decl_stmt|;
if|if
condition|(
name|taskCmd
operator|==
literal|null
condition|)
block|{
name|taskCmdText
operator|=
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|taskCmdText
operator|=
operator|new
name|Text
argument_list|(
name|taskCmd
argument_list|)
expr_stmt|;
block|}
name|taskCmdText
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeEnum
argument_list|(
name|out
argument_list|,
name|taskType
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * Read Fields from file.    * @param in : datainput object.    * @throws IOException : Throws IOException in case of error.    */
annotation|@
name|Override
DECL|method|readFields (final DataInput in)
specifier|public
specifier|final
name|void
name|readFields
parameter_list|(
specifier|final
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|taskID
operator|=
operator|new
name|TaskId
argument_list|()
expr_stmt|;
name|taskID
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|IntWritable
name|envSize
init|=
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|envSize
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|envSize
operator|.
name|get
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Text
name|key
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|Text
name|value
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|key
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|value
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|environment
operator|.
name|put
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Text
name|taskCmdText
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|taskCmdText
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|taskCmd
operator|=
name|taskCmdText
operator|.
name|toString
argument_list|()
expr_stmt|;
name|taskType
operator|=
name|WritableUtils
operator|.
name|readEnum
argument_list|(
name|in
argument_list|,
name|TaskType
operator|.
name|class
argument_list|)
expr_stmt|;
name|timeout
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/**    * ToString.    * @return String representation of Task    */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TaskId: "
operator|+
name|this
operator|.
name|taskID
operator|.
name|toString
argument_list|()
operator|+
literal|", TaskType: "
operator|+
name|this
operator|.
name|taskType
operator|+
literal|", cmd: '"
operator|+
name|taskCmd
operator|+
literal|"'"
return|;
block|}
block|}
end_class

end_unit

