begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.applications.mawo.server.worker
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|applications
operator|.
name|mawo
operator|.
name|server
operator|.
name|worker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * Define WorkerId for Workers.  */
end_comment

begin_class
DECL|class|WorkerId
specifier|public
class|class
name|WorkerId
implements|implements
name|Writable
block|{
comment|/**    * WorkerId is a unique identifier for workers.    */
DECL|field|workerId
specifier|private
name|Text
name|workerId
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
comment|/**    * Hostname of worker node.    */
DECL|field|hostname
specifier|private
name|Text
name|hostname
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
comment|/**    * Ip address of worker node.    */
DECL|field|ipAdd
specifier|private
name|Text
name|ipAdd
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
comment|/**    * Default constructor for workerId.    * Set Hostname and Ip address of the machine where worker is running.    */
DECL|method|WorkerId ()
specifier|public
name|WorkerId
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|hostname
operator|=
operator|new
name|Text
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|ipAdd
operator|=
operator|new
name|Text
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostAddress
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get hostname for Worker.    * @return hostname of worker node    */
DECL|method|getHostname ()
specifier|public
specifier|final
name|Text
name|getHostname
parameter_list|()
block|{
return|return
name|hostname
return|;
block|}
comment|/**    * Set hostname for Worker.    * @param wkhostname : Hostname of worker    */
DECL|method|setHostname (final Text wkhostname)
specifier|public
specifier|final
name|void
name|setHostname
parameter_list|(
specifier|final
name|Text
name|wkhostname
parameter_list|)
block|{
name|this
operator|.
name|hostname
operator|=
name|wkhostname
expr_stmt|;
block|}
comment|/**    * Get Worker IP address.    * @return IP address of worker node    */
DECL|method|getIPAddress ()
specifier|public
specifier|final
name|String
name|getIPAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|ipAdd
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Print workerId.    * @return workeId in string    */
DECL|method|toString ()
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
return|return
name|workerId
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Get workerId.    * @return workerId : Worker identifier    */
DECL|method|getWorkerId ()
specifier|public
specifier|final
name|String
name|getWorkerId
parameter_list|()
block|{
return|return
name|this
operator|.
name|workerId
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Set workerId.    * @param localworkerId : Worker identifier    */
DECL|method|setWorkerId (final String localworkerId)
specifier|public
specifier|final
name|void
name|setWorkerId
parameter_list|(
specifier|final
name|String
name|localworkerId
parameter_list|)
block|{
name|this
operator|.
name|workerId
operator|=
operator|new
name|Text
argument_list|(
name|localworkerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|/**    * Implememt equals method for WorkerId.    */
DECL|method|equals (final Object o)
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
name|WorkerId
name|x
init|=
operator|(
name|WorkerId
operator|)
name|o
decl_stmt|;
return|return
name|x
operator|.
name|getHostname
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|hostname
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|write (final DataOutput dataOutput)
specifier|public
specifier|final
name|void
name|write
parameter_list|(
specifier|final
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|workerId
operator|.
name|write
argument_list|(
name|dataOutput
argument_list|)
expr_stmt|;
name|hostname
operator|.
name|write
argument_list|(
name|dataOutput
argument_list|)
expr_stmt|;
name|ipAdd
operator|.
name|write
argument_list|(
name|dataOutput
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|readFields (final DataInput dataInput)
specifier|public
specifier|final
name|void
name|readFields
parameter_list|(
specifier|final
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
name|workerId
operator|.
name|readFields
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
name|hostname
operator|.
name|readFields
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
name|ipAdd
operator|.
name|readFields
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|/**    * Override hashcode method for WorkerId.    */
DECL|method|hashCode ()
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|int
name|workerHash
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|workerId
operator|==
literal|null
condition|)
block|{
name|workerHash
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|workerHash
operator|=
name|workerId
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
name|int
name|hostHash
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|hostname
operator|==
literal|null
condition|)
block|{
name|hostHash
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|hostHash
operator|=
name|hostname
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
name|int
name|ipHash
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ipAdd
operator|==
literal|null
condition|)
block|{
name|ipHash
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|ipHash
operator|=
name|ipAdd
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|workerHash
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|hostHash
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|ipHash
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

