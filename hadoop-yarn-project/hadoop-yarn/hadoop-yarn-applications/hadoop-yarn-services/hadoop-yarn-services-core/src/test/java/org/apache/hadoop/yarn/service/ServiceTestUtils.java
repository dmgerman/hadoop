begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|PropertyNamingStrategy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|TestingCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|zk
operator|.
name|CuratorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MiniYARNCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
operator|.
name|ServiceClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|JsonSerDeser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|LinuxResourceCalculatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ProcfsBasedProcessTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_QUORUM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|DEBUG_NM_DELETE_DELAY_SEC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|NM_PMEM_CHECK_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|NM_VMEM_CHECK_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConf
operator|.
name|AM_RESOURCE_MEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConf
operator|.
name|YARN_SERVICE_BASE_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConstants
operator|.
name|CONTAINER_STATE_REPORT_AS_SERVICE_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|ServiceTestUtils
specifier|public
class|class
name|ServiceTestUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ServiceTestUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|yarnCluster
specifier|private
name|MiniYARNCluster
name|yarnCluster
init|=
literal|null
decl_stmt|;
DECL|field|hdfsCluster
specifier|private
name|MiniDFSCluster
name|hdfsCluster
init|=
literal|null
decl_stmt|;
DECL|field|zkCluster
specifier|private
name|TestingCluster
name|zkCluster
decl_stmt|;
DECL|field|curatorService
specifier|private
name|CuratorService
name|curatorService
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|NUM_NMS
specifier|public
specifier|static
specifier|final
name|int
name|NUM_NMS
init|=
literal|1
decl_stmt|;
DECL|field|basedir
specifier|private
name|File
name|basedir
decl_stmt|;
DECL|field|JSON_SER_DESER
specifier|public
specifier|static
specifier|final
name|JsonSerDeser
argument_list|<
name|Service
argument_list|>
name|JSON_SER_DESER
init|=
operator|new
name|JsonSerDeser
argument_list|<>
argument_list|(
name|Service
operator|.
name|class
argument_list|,
name|PropertyNamingStrategy
operator|.
name|SNAKE_CASE
argument_list|)
decl_stmt|;
comment|// Example service definition
comment|// 2 components, each of which has 2 containers.
DECL|method|createExampleApplication ()
specifier|public
specifier|static
name|Service
name|createExampleApplication
parameter_list|()
block|{
name|Service
name|exampleApp
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|exampleApp
operator|.
name|setName
argument_list|(
literal|"example-app"
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|setVersion
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|createComponent
argument_list|(
literal|"compa"
argument_list|)
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|createComponent
argument_list|(
literal|"compb"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|exampleApp
return|;
block|}
comment|// Example service definition
comment|// 2 components, each of which has 2 containers.
DECL|method|createTerminatingJobExample (String serviceName)
specifier|public
specifier|static
name|Service
name|createTerminatingJobExample
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
name|Service
name|exampleApp
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|exampleApp
operator|.
name|setName
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|setVersion
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|createComponent
argument_list|(
literal|"terminating-comp1"
argument_list|,
literal|2
argument_list|,
literal|"sleep 1000"
argument_list|,
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|NEVER
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|createComponent
argument_list|(
literal|"terminating-comp2"
argument_list|,
literal|2
argument_list|,
literal|"sleep 1000"
argument_list|,
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|ON_FAILURE
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|createComponent
argument_list|(
literal|"terminating-comp3"
argument_list|,
literal|2
argument_list|,
literal|"sleep 1000"
argument_list|,
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|ON_FAILURE
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|exampleApp
return|;
block|}
DECL|method|createTerminatingDominantComponentJobExample ( String serviceName)
specifier|public
specifier|static
name|Service
name|createTerminatingDominantComponentJobExample
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
name|Service
name|exampleApp
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|exampleApp
operator|.
name|setName
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|setVersion
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|Component
name|serviceStateComponent
init|=
name|createComponent
argument_list|(
literal|"terminating-comp1"
argument_list|,
literal|2
argument_list|,
literal|"sleep 1000"
argument_list|,
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|NEVER
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|serviceStateComponent
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CONTAINER_STATE_REPORT_AS_SERVICE_STATE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|serviceStateComponent
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|createComponent
argument_list|(
literal|"terminating-comp2"
argument_list|,
literal|2
argument_list|,
literal|"sleep 60000"
argument_list|,
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|ON_FAILURE
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|exampleApp
return|;
block|}
DECL|method|createComponent (String name)
specifier|public
specifier|static
name|Component
name|createComponent
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|createComponent
argument_list|(
name|name
argument_list|,
literal|2L
argument_list|,
literal|"sleep 1000"
argument_list|,
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|ALWAYS
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createComponent (String name, long numContainers, String command)
specifier|protected
specifier|static
name|Component
name|createComponent
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|numContainers
parameter_list|,
name|String
name|command
parameter_list|)
block|{
name|Component
name|comp1
init|=
operator|new
name|Component
argument_list|()
decl_stmt|;
name|comp1
operator|.
name|setNumberOfContainers
argument_list|(
name|numContainers
argument_list|)
expr_stmt|;
name|comp1
operator|.
name|setLaunchCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|comp1
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
operator|new
name|Resource
argument_list|()
decl_stmt|;
name|comp1
operator|.
name|setResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setMemory
argument_list|(
literal|"128"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setCpus
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|comp1
return|;
block|}
DECL|method|createComponent (String name, long numContainers, String command, Component.RestartPolicyEnum restartPolicyEnum, List<String> dependencies)
specifier|protected
specifier|static
name|Component
name|createComponent
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|numContainers
parameter_list|,
name|String
name|command
parameter_list|,
name|Component
operator|.
name|RestartPolicyEnum
name|restartPolicyEnum
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dependencies
parameter_list|)
block|{
name|Component
name|comp
init|=
name|createComponent
argument_list|(
name|name
argument_list|,
name|numContainers
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setRestartPolicy
argument_list|(
name|restartPolicyEnum
argument_list|)
expr_stmt|;
if|if
condition|(
name|dependencies
operator|!=
literal|null
condition|)
block|{
name|comp
operator|.
name|dependencies
argument_list|(
name|dependencies
argument_list|)
expr_stmt|;
block|}
return|return
name|comp
return|;
block|}
DECL|method|initMockFs ()
specifier|public
specifier|static
name|SliderFileSystem
name|initMockFs
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|initMockFs
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|initMockFs (Service ext)
specifier|public
specifier|static
name|SliderFileSystem
name|initMockFs
parameter_list|(
name|Service
name|ext
parameter_list|)
throws|throws
name|IOException
block|{
name|SliderFileSystem
name|sfs
init|=
name|mock
argument_list|(
name|SliderFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileSystem
name|mockFs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|JsonSerDeser
argument_list|<
name|Service
argument_list|>
name|jsonSerDeser
init|=
name|mock
argument_list|(
name|JsonSerDeser
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|sfs
operator|.
name|getFileSystem
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockFs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sfs
operator|.
name|buildClusterDirPath
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Path
argument_list|(
literal|"cluster_dir_path"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ext
operator|!=
literal|null
condition|)
block|{
name|when
argument_list|(
name|jsonSerDeser
operator|.
name|load
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ext
argument_list|)
expr_stmt|;
block|}
name|ServiceApiUtil
operator|.
name|setJsonSerDeser
argument_list|(
name|jsonSerDeser
argument_list|)
expr_stmt|;
return|return
name|sfs
return|;
block|}
DECL|method|setConf (YarnConfiguration conf)
specifier|protected
name|void
name|setConf
parameter_list|(
name|YarnConfiguration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|getConf ()
specifier|protected
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|getFS ()
specifier|protected
name|FileSystem
name|getFS
parameter_list|()
block|{
return|return
name|fs
return|;
block|}
DECL|method|getYarnCluster ()
specifier|protected
name|MiniYARNCluster
name|getYarnCluster
parameter_list|()
block|{
return|return
name|yarnCluster
return|;
block|}
DECL|method|setupInternal (int numNodeManager)
specifier|protected
name|void
name|setupInternal
parameter_list|(
name|int
name|numNodeManager
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting up YARN cluster"
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_MINICLUSTER_FIXED_PORTS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_MINICLUSTER_USE_RPC
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|128
argument_list|)
expr_stmt|;
comment|// reduce the teardown waiting time
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|DISPATCHER_DRAIN_EVENTS_TIMEOUT
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.log.dir"
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
comment|// mark if we need to launch the v1 timeline server
comment|// disable aux-service based timeline aggregators
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_VMEM_PMEM_RATIO
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
comment|// Enable ContainersMonitorImpl
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_MON_RESOURCE_CALCULATOR
argument_list|,
name|LinuxResourceCalculatorPlugin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_MON_PROCESS_TREE
argument_list|,
name|ProcfsBasedProcessTree
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DEBUG_NM_DELETE_DELAY_SEC
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|AM_RESOURCE_MEM
argument_list|,
literal|526
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnServiceConf
operator|.
name|READINESS_CHECK_INTERVAL
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Disable vmem check to disallow NM killing the container
name|conf
operator|.
name|setBoolean
argument_list|(
name|NM_VMEM_CHECK_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|NM_PMEM_CHECK_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// set auth filters
name|conf
operator|.
name|set
argument_list|(
name|HttpServer2
operator|.
name|FILTER_INITIALIZER_PROPERTY
argument_list|,
literal|"org.apache.hadoop.security.AuthenticationFilterInitializer,"
operator|+
literal|"org.apache.hadoop.security.HttpCrossOriginFilterInitializer"
argument_list|)
expr_stmt|;
comment|// setup zk cluster
name|zkCluster
operator|=
operator|new
name|TestingCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|zkCluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_ADDRESS
argument_list|,
name|zkCluster
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_REGISTRY_ZK_QUORUM
argument_list|,
name|zkCluster
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ZK cluster: "
operator|+
name|zkCluster
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|curatorService
operator|=
operator|new
name|CuratorService
argument_list|(
literal|"testCuratorService"
argument_list|)
expr_stmt|;
name|curatorService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|curatorService
operator|.
name|start
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|basedir
operator|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
literal|"apps"
argument_list|)
expr_stmt|;
if|if
condition|(
name|basedir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|basedir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|YARN_SERVICE_BASE_PATH
argument_list|,
name|basedir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|yarnCluster
operator|==
literal|null
condition|)
block|{
name|yarnCluster
operator|=
operator|new
name|MiniYARNCluster
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|1
argument_list|,
name|numNodeManager
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForNMsToRegister
argument_list|()
expr_stmt|;
name|URL
name|url
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"yarn-site.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find 'yarn-site.xml' dummy file in classpath"
argument_list|)
throw|;
block|}
name|Configuration
name|yarnClusterConfig
init|=
name|yarnCluster
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|yarnClusterConfig
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_APPLICATION_CLASSPATH
argument_list|,
operator|new
name|File
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
comment|//write the document to a buffer (not directly to the file, as that
comment|//can cause the file being written to get read -which will then fail.
name|ByteArrayOutputStream
name|bytesOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|yarnClusterConfig
operator|.
name|writeXml
argument_list|(
name|bytesOut
argument_list|)
expr_stmt|;
name|bytesOut
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//write the bytes to the file in the classpath
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|bytesOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Write yarn-site.xml configs to: "
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hdfsCluster
operator|==
literal|null
condition|)
block|{
name|HdfsConfiguration
name|hdfsConfig
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|hdfsCluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|hdfsConfig
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"setup thread sleep interrupted. message="
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|yarnCluster
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|yarnCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|yarnCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hdfsCluster
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|hdfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|hdfsCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|curatorService
operator|!=
literal|null
condition|)
block|{
name|ServiceOperations
operator|.
name|stop
argument_list|(
name|curatorService
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|zkCluster
operator|!=
literal|null
condition|)
block|{
name|zkCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|basedir
operator|!=
literal|null
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
block|}
name|SliderFileSystem
name|sfs
init|=
operator|new
name|SliderFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|appDir
init|=
name|sfs
operator|.
name|getBaseApplicationPath
argument_list|()
decl_stmt|;
name|sfs
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|appDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForNMsToRegister ()
specifier|private
name|void
name|waitForNMsToRegister
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sec
init|=
literal|60
decl_stmt|;
while|while
condition|(
name|sec
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|yarnCluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
name|NUM_NMS
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|sec
operator|--
expr_stmt|;
block|}
block|}
comment|/**    * Creates a {@link ServiceClient} for test purposes.    */
DECL|method|createClient (Configuration conf)
specifier|public
specifier|static
name|ServiceClient
name|createClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|ServiceClient
name|client
init|=
operator|new
name|ServiceClient
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Path
name|addJarResource
parameter_list|(
name|String
name|appName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
comment|// do nothing, the Unit test will use local jars
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|client
return|;
block|}
DECL|method|createServiceManager (ServiceContext context)
specifier|public
specifier|static
name|ServiceManager
name|createServiceManager
parameter_list|(
name|ServiceContext
name|context
parameter_list|)
block|{
name|ServiceManager
name|serviceManager
init|=
operator|new
name|ServiceManager
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|context
operator|.
name|setServiceManager
argument_list|(
name|serviceManager
argument_list|)
expr_stmt|;
return|return
name|serviceManager
return|;
block|}
comment|/**    * Creates a YarnClient for test purposes.    */
DECL|method|createYarnClient (Configuration conf)
specifier|public
specifier|static
name|YarnClient
name|createYarnClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|YarnClient
name|client
init|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|client
return|;
block|}
DECL|method|getCuratorService ()
specifier|protected
name|CuratorService
name|getCuratorService
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|curatorService
return|;
block|}
comment|/**    * Watcher to initialize yarn service base path under target and deletes the    * the test directory when finishes.    */
DECL|class|ServiceFSWatcher
specifier|public
specifier|static
class|class
name|ServiceFSWatcher
extends|extends
name|TestWatcher
block|{
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|fs
specifier|private
name|SliderFileSystem
name|fs
decl_stmt|;
DECL|field|serviceBasePath
specifier|private
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|serviceBasePath
decl_stmt|;
annotation|@
name|Override
DECL|method|starting (Description description)
specifier|protected
name|void
name|starting
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|delete
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|serviceBasePath
operator|=
name|Paths
operator|.
name|get
argument_list|(
literal|"target"
argument_list|,
name|description
operator|.
name|getClassName
argument_list|()
argument_list|,
name|description
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YARN_SERVICE_BASE_PATH
argument_list|,
name|serviceBasePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|serviceBasePath
argument_list|)
expr_stmt|;
name|fs
operator|=
operator|new
name|SliderFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setAppDir
argument_list|(
operator|new
name|Path
argument_list|(
name|serviceBasePath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|finished (Description description)
specifier|protected
name|void
name|finished
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|delete
argument_list|(
name|description
argument_list|)
expr_stmt|;
block|}
DECL|method|delete (Description description)
specifier|private
name|void
name|delete
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"target"
argument_list|,
name|description
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the yarn conf.      */
DECL|method|getConf ()
specifier|public
name|YarnConfiguration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|/**      * Returns the file system.      */
DECL|method|getFs ()
specifier|public
name|SliderFileSystem
name|getFs
parameter_list|()
block|{
return|return
name|fs
return|;
block|}
comment|/**      * Returns the test service base path.      */
DECL|method|getServiceBasePath ()
specifier|public
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|getServiceBasePath
parameter_list|()
block|{
return|return
name|serviceBasePath
return|;
block|}
block|}
comment|/**    * Wait until all the containers for all components become ready state.    *    * @param client    * @param exampleApp    * @return all ready containers of a service.    * @throws TimeoutException    * @throws InterruptedException    */
DECL|method|waitForAllCompToBeReady (ServiceClient client, Service exampleApp)
specifier|protected
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|waitForAllCompToBeReady
parameter_list|(
name|ServiceClient
name|client
parameter_list|,
name|Service
name|exampleApp
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|int
name|expectedTotalContainers
init|=
name|countTotalContainers
argument_list|(
name|exampleApp
argument_list|)
decl_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|allContainers
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Service
name|retrievedApp
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|totalReadyContainers
init|=
literal|0
decl_stmt|;
name|allContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Num Components "
operator|+
name|retrievedApp
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Component
name|component
range|:
name|retrievedApp
operator|.
name|getComponents
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"looking for  "
operator|+
name|component
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|component
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|component
operator|.
name|getContainers
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|component
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|exampleApp
operator|.
name|getComponent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getNumberOfContainers
argument_list|()
condition|)
block|{
for|for
control|(
name|Container
name|container
range|:
name|component
operator|.
name|getContainers
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container state "
operator|+
name|container
operator|.
name|getState
argument_list|()
operator|+
literal|", component "
operator|+
name|component
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|container
operator|.
name|getState
argument_list|()
operator|==
name|ContainerState
operator|.
name|READY
condition|)
block|{
name|totalReadyContainers
operator|++
expr_stmt|;
name|allContainers
operator|.
name|put
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found 1 ready container "
operator|+
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|component
operator|.
name|getName
argument_list|()
operator|+
literal|" Expected number of containers "
operator|+
name|exampleApp
operator|.
name|getComponent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getNumberOfContainers
argument_list|()
operator|+
literal|", current = "
operator|+
name|component
operator|.
name|getContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Exit loop, totalReadyContainers= "
operator|+
name|totalReadyContainers
operator|+
literal|" expected = "
operator|+
name|expectedTotalContainers
argument_list|)
expr_stmt|;
return|return
name|totalReadyContainers
operator|==
name|expectedTotalContainers
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|2000
argument_list|,
literal|200000
argument_list|)
expr_stmt|;
return|return
name|allContainers
return|;
block|}
comment|/**    * Wait until service state becomes stable. A service is stable when all    * requested containers of all components are running and in ready state.    *    * @param client    * @param exampleApp    * @throws TimeoutException    * @throws InterruptedException    */
DECL|method|waitForServiceToBeStable (ServiceClient client, Service exampleApp)
specifier|protected
name|void
name|waitForServiceToBeStable
parameter_list|(
name|ServiceClient
name|client
parameter_list|,
name|Service
name|exampleApp
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|,
literal|200000
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForServiceToBeStable (ServiceClient client, Service exampleApp, int waitForMillis)
specifier|protected
name|void
name|waitForServiceToBeStable
parameter_list|(
name|ServiceClient
name|client
parameter_list|,
name|Service
name|exampleApp
parameter_list|,
name|int
name|waitForMillis
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|waitForServiceToBeInState
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|,
name|ServiceState
operator|.
name|STABLE
argument_list|,
name|waitForMillis
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait until service is started. It does not have to reach a stable state.    *    * @param client    * @param exampleApp    * @throws TimeoutException    * @throws InterruptedException    */
DECL|method|waitForServiceToBeStarted (ServiceClient client, Service exampleApp)
specifier|protected
name|void
name|waitForServiceToBeStarted
parameter_list|(
name|ServiceClient
name|client
parameter_list|,
name|Service
name|exampleApp
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|waitForServiceToBeInState
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|,
name|ServiceState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForServiceToBeExpressUpgrading (ServiceClient client, Service exampleApp)
specifier|protected
name|void
name|waitForServiceToBeExpressUpgrading
parameter_list|(
name|ServiceClient
name|client
parameter_list|,
name|Service
name|exampleApp
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|waitForServiceToBeInState
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|,
name|ServiceState
operator|.
name|EXPRESS_UPGRADING
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForServiceToBeInState (ServiceClient client, Service exampleApp, ServiceState desiredState)
specifier|protected
name|void
name|waitForServiceToBeInState
parameter_list|(
name|ServiceClient
name|client
parameter_list|,
name|Service
name|exampleApp
parameter_list|,
name|ServiceState
name|desiredState
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|waitForServiceToBeInState
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|,
name|desiredState
argument_list|,
literal|200000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait until service is started. It does not have to reach a stable state.    *    * @param client    * @param exampleApp    * @throws TimeoutException    * @throws InterruptedException    */
DECL|method|waitForServiceToBeInState (ServiceClient client, Service exampleApp, ServiceState desiredState, int waitForMillis)
specifier|protected
name|void
name|waitForServiceToBeInState
parameter_list|(
name|ServiceClient
name|client
parameter_list|,
name|Service
name|exampleApp
parameter_list|,
name|ServiceState
name|desiredState
parameter_list|,
name|int
name|waitForMillis
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Service
name|retrievedApp
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|retrievedApp
operator|.
name|getState
argument_list|()
operator|==
name|desiredState
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|2000
argument_list|,
name|waitForMillis
argument_list|)
expr_stmt|;
block|}
DECL|method|countTotalContainers (Service service)
specifier|private
name|int
name|countTotalContainers
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|int
name|totalContainers
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Component
name|component
range|:
name|service
operator|.
name|getComponents
argument_list|()
control|)
block|{
name|totalContainers
operator|+=
name|component
operator|.
name|getNumberOfContainers
argument_list|()
expr_stmt|;
block|}
return|return
name|totalContainers
return|;
block|}
block|}
end_class

end_unit

