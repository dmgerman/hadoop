begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|ExampleAppJson
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
operator|.
name|params
operator|.
name|ClientArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
operator|.
name|params
operator|.
name|Arguments
operator|.
name|ARG_FILE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConf
operator|.
name|YARN_SERVICE_BASE_PATH
import|;
end_import

begin_comment
comment|/**  * Test for building / resolving components of type SERVICE.  */
end_comment

begin_class
DECL|class|TestBuildExternalComponents
specifier|public
class|class
name|TestBuildExternalComponents
block|{
DECL|field|conf
specifier|protected
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
DECL|field|basedir
specifier|private
name|File
name|basedir
decl_stmt|;
comment|// Check component names match with expected
DECL|method|checkComponentNames (List<Component> components, Set<String> expectedComponents)
specifier|private
specifier|static
name|void
name|checkComponentNames
parameter_list|(
name|List
argument_list|<
name|Component
argument_list|>
name|components
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|expectedComponents
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedComponents
operator|.
name|size
argument_list|()
argument_list|,
name|components
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Component
name|comp
range|:
name|components
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|expectedComponents
operator|.
name|contains
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 1. Build the def file and store on fs
comment|// 2. check component names
DECL|method|buildAndCheckComponents (String appName, String appDef, SliderFileSystem sfs, Set<String> names)
specifier|private
name|void
name|buildAndCheckComponents
parameter_list|(
name|String
name|appName
parameter_list|,
name|String
name|appDef
parameter_list|,
name|SliderFileSystem
name|sfs
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"build"
block|,
name|ARG_FILE
block|,
name|ExampleAppJson
operator|.
name|resourceName
argument_list|(
name|appDef
argument_list|)
block|}
decl_stmt|;
name|ClientArgs
name|clientArgs
init|=
operator|new
name|ClientArgs
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|clientArgs
operator|.
name|parse
argument_list|()
expr_stmt|;
name|ServiceCLI
name|cli
init|=
operator|new
name|ServiceCLI
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|createServiceClient
parameter_list|()
block|{
name|client
operator|=
operator|new
name|ServiceClient
argument_list|()
expr_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|cli
operator|.
name|exec
argument_list|(
name|clientArgs
argument_list|)
expr_stmt|;
comment|// verify generated conf
name|List
argument_list|<
name|Component
argument_list|>
name|components
init|=
name|ServiceApiUtil
operator|.
name|getComponents
argument_list|(
name|sfs
argument_list|,
name|appName
argument_list|)
decl_stmt|;
name|checkComponentNames
argument_list|(
name|components
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|basedir
operator|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
literal|"apps"
argument_list|)
expr_stmt|;
if|if
condition|(
name|basedir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|basedir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|YARN_SERVICE_BASE_PATH
argument_list|,
name|basedir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|basedir
operator|!=
literal|null
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test applications defining external components(SERVICE type)
comment|// can be resolved correctly
annotation|@
name|Test
DECL|method|testExternalComponentBuild ()
specifier|public
name|void
name|testExternalComponentBuild
parameter_list|()
throws|throws
name|Throwable
block|{
name|SliderFileSystem
name|sfs
init|=
operator|new
name|SliderFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nameSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|nameSet
operator|.
name|add
argument_list|(
literal|"simple"
argument_list|)
expr_stmt|;
name|nameSet
operator|.
name|add
argument_list|(
literal|"master"
argument_list|)
expr_stmt|;
name|nameSet
operator|.
name|add
argument_list|(
literal|"worker"
argument_list|)
expr_stmt|;
comment|// app-1 has 3 components: simple, master, worker
name|buildAndCheckComponents
argument_list|(
literal|"app-1"
argument_list|,
name|ExampleAppJson
operator|.
name|APP_JSON
argument_list|,
name|sfs
argument_list|,
name|nameSet
argument_list|)
expr_stmt|;
name|buildAndCheckComponents
argument_list|(
literal|"external-0"
argument_list|,
name|ExampleAppJson
operator|.
name|EXTERNAL_JSON_0
argument_list|,
name|sfs
argument_list|,
name|nameSet
argument_list|)
expr_stmt|;
name|nameSet
operator|.
name|add
argument_list|(
literal|"other"
argument_list|)
expr_stmt|;
comment|// external1 has 3 components: simple(SERVICE - app1), master and other
name|buildAndCheckComponents
argument_list|(
literal|"external-1"
argument_list|,
name|ExampleAppJson
operator|.
name|EXTERNAL_JSON_1
argument_list|,
name|sfs
argument_list|,
name|nameSet
argument_list|)
expr_stmt|;
name|nameSet
operator|.
name|add
argument_list|(
literal|"another"
argument_list|)
expr_stmt|;
comment|// external2 has 2 components: ext(SERVICE - external1), another
name|buildAndCheckComponents
argument_list|(
literal|"external-2"
argument_list|,
name|ExampleAppJson
operator|.
name|EXTERNAL_JSON_2
argument_list|,
name|sfs
argument_list|,
name|nameSet
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

