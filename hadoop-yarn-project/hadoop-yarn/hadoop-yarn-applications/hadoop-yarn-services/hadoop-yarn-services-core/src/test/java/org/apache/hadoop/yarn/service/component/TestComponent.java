begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.component
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|TestServiceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ComponentState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstanceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstanceEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|MockRunningServiceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstanceEventType
operator|.
name|STOP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Component}.  */
end_comment

begin_class
DECL|class|TestComponent
specifier|public
class|class
name|TestComponent
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|TestComponent
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|rule
specifier|public
name|ServiceTestUtils
operator|.
name|ServiceFSWatcher
name|rule
init|=
operator|new
name|ServiceTestUtils
operator|.
name|ServiceFSWatcher
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testComponentUpgrade ()
specifier|public
name|void
name|testComponentUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceContext
name|context
init|=
name|createTestContext
argument_list|(
name|rule
argument_list|,
literal|"testComponentUpgrade"
argument_list|)
decl_stmt|;
name|Component
name|comp
init|=
name|context
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ComponentEvent
name|upgradeEvent
init|=
operator|new
name|ComponentEvent
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|ComponentEventType
operator|.
name|UPGRADE
argument_list|)
decl_stmt|;
name|comp
operator|.
name|handle
argument_list|(
name|upgradeEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"component not in need upgrade state"
argument_list|,
name|ComponentState
operator|.
name|NEEDS_UPGRADE
argument_list|,
name|comp
operator|.
name|getComponentSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckState ()
specifier|public
name|void
name|testCheckState
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|serviceName
init|=
literal|"testCheckState"
decl_stmt|;
name|ServiceContext
name|context
init|=
name|createTestContext
argument_list|(
name|rule
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|Component
name|comp
init|=
name|context
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|comp
operator|.
name|handle
argument_list|(
operator|new
name|ComponentEvent
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|ComponentEventType
operator|.
name|UPGRADE
argument_list|)
operator|.
name|setTargetSpec
argument_list|(
name|createSpecWithEnv
argument_list|(
name|serviceName
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
literal|"key1"
argument_list|,
literal|"val1"
argument_list|)
argument_list|)
operator|.
name|setUpgradeVersion
argument_list|(
literal|"v2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// one instance finished upgrading
name|comp
operator|.
name|decContainersThatNeedUpgrade
argument_list|()
expr_stmt|;
name|comp
operator|.
name|handle
argument_list|(
operator|new
name|ComponentEvent
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|ComponentEventType
operator|.
name|CHECK_STABLE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"component not in need upgrade state"
argument_list|,
name|ComponentState
operator|.
name|NEEDS_UPGRADE
argument_list|,
name|comp
operator|.
name|getComponentSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// second instance finished upgrading
name|comp
operator|.
name|decContainersThatNeedUpgrade
argument_list|()
expr_stmt|;
name|comp
operator|.
name|handle
argument_list|(
operator|new
name|ComponentEvent
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|ComponentEventType
operator|.
name|CHECK_STABLE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"component not in stable state"
argument_list|,
name|ComponentState
operator|.
name|STABLE
argument_list|,
name|comp
operator|.
name|getComponentSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"component did not upgrade successfully"
argument_list|,
literal|"val1"
argument_list|,
name|comp
operator|.
name|getComponentSpec
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerCompletedWhenUpgrading ()
specifier|public
name|void
name|testContainerCompletedWhenUpgrading
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|serviceName
init|=
literal|"testContainerComplete"
decl_stmt|;
name|MockRunningServiceContext
name|context
init|=
name|createTestContext
argument_list|(
name|rule
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|Component
name|comp
init|=
name|context
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|comp
operator|.
name|handle
argument_list|(
operator|new
name|ComponentEvent
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|ComponentEventType
operator|.
name|UPGRADE
argument_list|)
operator|.
name|setTargetSpec
argument_list|(
name|createSpecWithEnv
argument_list|(
name|serviceName
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
literal|"key1"
argument_list|,
literal|"val1"
argument_list|)
argument_list|)
operator|.
name|setUpgradeVersion
argument_list|(
literal|"v2"
argument_list|)
argument_list|)
expr_stmt|;
name|comp
operator|.
name|getAllComponentInstances
argument_list|()
operator|.
name|forEach
argument_list|(
name|instance
lambda|->
block|{
name|instance
operator|.
name|handle
argument_list|(
operator|new
name|ComponentInstanceEvent
argument_list|(
name|instance
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ComponentInstanceEventType
operator|.
name|UPGRADE
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|ComponentInstance
argument_list|>
name|instanceIter
init|=
name|comp
operator|.
name|getAllComponentInstances
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// reinitialization of a container failed
name|ContainerStatus
name|status
init|=
name|mock
argument_list|(
name|ContainerStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|status
operator|.
name|getExitStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ContainerExitStatus
operator|.
name|ABORTED
argument_list|)
expr_stmt|;
name|ComponentInstance
name|instance
init|=
name|instanceIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ComponentEvent
name|stopEvent
init|=
operator|new
name|ComponentEvent
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|ComponentEventType
operator|.
name|CONTAINER_COMPLETED
argument_list|)
operator|.
name|setInstance
argument_list|(
name|instance
argument_list|)
operator|.
name|setContainerId
argument_list|(
name|instance
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
decl_stmt|;
name|comp
operator|.
name|handle
argument_list|(
name|stopEvent
argument_list|)
expr_stmt|;
name|instance
operator|.
name|handle
argument_list|(
operator|new
name|ComponentInstanceEvent
argument_list|(
name|instance
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|STOP
argument_list|)
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|comp
operator|.
name|handle
argument_list|(
operator|new
name|ComponentEvent
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|ComponentEventType
operator|.
name|CHECK_STABLE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"component not in flexing state"
argument_list|,
name|ComponentState
operator|.
name|FLEXING
argument_list|,
name|comp
operator|.
name|getComponentSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// new container get allocated
name|context
operator|.
name|assignNewContainer
argument_list|(
name|context
operator|.
name|attemptId
argument_list|,
literal|10
argument_list|,
name|comp
argument_list|)
expr_stmt|;
comment|// second instance finished upgrading
name|ComponentInstance
name|instance2
init|=
name|instanceIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|instance2
operator|.
name|handle
argument_list|(
operator|new
name|ComponentInstanceEvent
argument_list|(
name|instance2
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ComponentInstanceEventType
operator|.
name|BECOME_READY
argument_list|)
argument_list|)
expr_stmt|;
name|comp
operator|.
name|handle
argument_list|(
operator|new
name|ComponentEvent
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|ComponentEventType
operator|.
name|CHECK_STABLE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"component not in stable state"
argument_list|,
name|ComponentState
operator|.
name|STABLE
argument_list|,
name|comp
operator|.
name|getComponentSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"component did not upgrade successfully"
argument_list|,
literal|"val1"
argument_list|,
name|comp
operator|.
name|getComponentSpec
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testComponentStateReachesStableStateWithTerminatingComponents ()
specifier|public
name|void
name|testComponentStateReachesStableStateWithTerminatingComponents
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|serviceName
init|=
literal|"testComponentStateUpdatesWithTerminatingComponents"
decl_stmt|;
name|Service
name|testService
init|=
name|ServiceTestUtils
operator|.
name|createTerminatingJobExample
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|TestServiceManager
operator|.
name|createDef
argument_list|(
name|serviceName
argument_list|,
name|testService
argument_list|)
expr_stmt|;
name|ServiceContext
name|context
init|=
operator|new
name|MockRunningServiceContext
argument_list|(
name|rule
argument_list|,
name|testService
argument_list|)
decl_stmt|;
for|for
control|(
name|Component
name|comp
range|:
name|context
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Iterator
argument_list|<
name|ComponentInstance
argument_list|>
name|instanceIter
init|=
name|comp
operator|.
name|getAllComponentInstances
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ComponentInstance
name|componentInstance
init|=
name|instanceIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Container
name|instanceContainer
init|=
name|componentInstance
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|comp
operator|.
name|getNumSucceededInstances
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|comp
operator|.
name|getNumFailedInstances
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|comp
operator|.
name|getNumRunningInstances
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|comp
operator|.
name|getNumReadyInstances
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|comp
operator|.
name|getPendingInstances
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//stop 1 container
name|ContainerStatus
name|containerStatus
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|instanceContainer
operator|.
name|getId
argument_list|()
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|"successful"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|comp
operator|.
name|handle
argument_list|(
operator|new
name|ComponentEvent
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|ComponentEventType
operator|.
name|CONTAINER_COMPLETED
argument_list|)
operator|.
name|setStatus
argument_list|(
name|containerStatus
argument_list|)
operator|.
name|setContainerId
argument_list|(
name|instanceContainer
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|componentInstance
operator|.
name|handle
argument_list|(
operator|new
name|ComponentInstanceEvent
argument_list|(
name|componentInstance
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ComponentInstanceEventType
operator|.
name|STOP
argument_list|)
operator|.
name|setStatus
argument_list|(
name|containerStatus
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|comp
operator|.
name|getNumSucceededInstances
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|comp
operator|.
name|getNumFailedInstances
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|comp
operator|.
name|getNumRunningInstances
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|comp
operator|.
name|getNumReadyInstances
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|comp
operator|.
name|getPendingInstances
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentState
name|componentState
init|=
name|Component
operator|.
name|checkIfStable
argument_list|(
name|comp
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentState
operator|.
name|STABLE
argument_list|,
name|componentState
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testComponentStateUpdatesWithTerminatingComponents ()
specifier|public
name|void
name|testComponentStateUpdatesWithTerminatingComponents
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|serviceName
init|=
literal|"testComponentStateUpdatesWithTerminatingComponents"
decl_stmt|;
name|Service
name|testService
init|=
name|ServiceTestUtils
operator|.
name|createTerminatingJobExample
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|TestServiceManager
operator|.
name|createDef
argument_list|(
name|serviceName
argument_list|,
name|testService
argument_list|)
expr_stmt|;
name|ServiceContext
name|context
init|=
operator|new
name|MockRunningServiceContext
argument_list|(
name|rule
argument_list|,
name|testService
argument_list|)
decl_stmt|;
for|for
control|(
name|Component
name|comp
range|:
name|context
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Iterator
argument_list|<
name|ComponentInstance
argument_list|>
name|instanceIter
init|=
name|comp
operator|.
name|getAllComponentInstances
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|instanceIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ComponentInstance
name|componentInstance
init|=
name|instanceIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Container
name|instanceContainer
init|=
name|componentInstance
operator|.
name|getContainer
argument_list|()
decl_stmt|;
comment|//stop 1 container
name|ContainerStatus
name|containerStatus
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|instanceContainer
operator|.
name|getId
argument_list|()
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|"successful"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|comp
operator|.
name|handle
argument_list|(
operator|new
name|ComponentEvent
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|ComponentEventType
operator|.
name|CONTAINER_COMPLETED
argument_list|)
operator|.
name|setStatus
argument_list|(
name|containerStatus
argument_list|)
operator|.
name|setContainerId
argument_list|(
name|instanceContainer
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|componentInstance
operator|.
name|handle
argument_list|(
operator|new
name|ComponentInstanceEvent
argument_list|(
name|componentInstance
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ComponentInstanceEventType
operator|.
name|STOP
argument_list|)
operator|.
name|setStatus
argument_list|(
name|containerStatus
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ComponentState
name|componentState
init|=
name|comp
operator|.
name|getComponentSpec
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ComponentState
operator|.
name|SUCCEEDED
argument_list|,
name|componentState
argument_list|)
expr_stmt|;
block|}
name|ServiceState
name|serviceState
init|=
name|testService
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ServiceState
operator|.
name|SUCCEEDED
argument_list|,
name|serviceState
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
DECL|method|createSpecWithEnv (String serviceName, String compName, String key, String val)
name|createSpecWithEnv
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|String
name|compName
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
name|Service
name|service
init|=
name|TestServiceManager
operator|.
name|createBaseDef
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
name|spec
init|=
name|service
operator|.
name|getComponent
argument_list|(
name|compName
argument_list|)
decl_stmt|;
name|spec
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
name|spec
return|;
block|}
DECL|method|createTestContext ( ServiceTestUtils.ServiceFSWatcher fsWatcher, String serviceName)
specifier|public
specifier|static
name|MockRunningServiceContext
name|createTestContext
parameter_list|(
name|ServiceTestUtils
operator|.
name|ServiceFSWatcher
name|fsWatcher
parameter_list|,
name|String
name|serviceName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|MockRunningServiceContext
argument_list|(
name|fsWatcher
argument_list|,
name|TestServiceManager
operator|.
name|createBaseDef
argument_list|(
name|serviceName
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

