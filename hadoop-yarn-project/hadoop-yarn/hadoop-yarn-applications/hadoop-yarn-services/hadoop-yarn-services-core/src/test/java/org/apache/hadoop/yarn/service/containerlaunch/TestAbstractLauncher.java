begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.containerlaunch
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|containerlaunch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|AlwaysRestartPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|NeverRestartPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|OnFailureRestartPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|defaultImpl
operator|.
name|DefaultProviderService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
operator|.
name|FiConfig
operator|.
name|getConfig
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConf
operator|.
name|DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConf
operator|.
name|DEFAULT_CONTAINER_RETRY_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConf
operator|.
name|DEFAULT_CONTAINER_RETRY_MAX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verifyZeroInteractions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Tests for {@link AbstractLauncher}.  */
end_comment

begin_class
DECL|class|TestAbstractLauncher
specifier|public
class|class
name|TestAbstractLauncher
block|{
DECL|field|launcher
specifier|private
name|AbstractLauncher
name|launcher
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|launcher
operator|=
operator|new
name|AbstractLauncher
argument_list|(
name|mock
argument_list|(
name|ServiceContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDockerContainerMounts ()
specifier|public
name|void
name|testDockerContainerMounts
parameter_list|()
throws|throws
name|IOException
block|{
name|launcher
operator|.
name|yarnDockerMode
operator|=
literal|true
expr_stmt|;
name|launcher
operator|.
name|envVars
operator|.
name|put
argument_list|(
name|AbstractLauncher
operator|.
name|ENV_DOCKER_CONTAINER_MOUNTS
argument_list|,
literal|"s1:t1:ro"
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|mountPaths
operator|.
name|put
argument_list|(
literal|"s2"
argument_list|,
literal|"t2"
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|completeContainerLaunch
argument_list|()
expr_stmt|;
name|String
name|dockerContainerMounts
init|=
name|launcher
operator|.
name|containerLaunchContext
operator|.
name|getEnvironment
argument_list|()
operator|.
name|get
argument_list|(
name|AbstractLauncher
operator|.
name|ENV_DOCKER_CONTAINER_MOUNTS
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"s1:t1:ro,s2:t2:ro"
argument_list|,
name|dockerContainerMounts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerRetries ()
specifier|public
name|void
name|testContainerRetries
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultProviderService
name|providerService
init|=
operator|new
name|DefaultProviderService
argument_list|()
decl_stmt|;
name|AbstractLauncher
name|mockLauncher
init|=
name|mock
argument_list|(
name|AbstractLauncher
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerLaunchService
operator|.
name|ComponentLaunchContext
name|componentLaunchContext
init|=
name|mock
argument_list|(
name|ContainerLaunchService
operator|.
name|ComponentLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ComponentInstance
name|componentInstance
init|=
name|mock
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Never Restart Policy
name|Component
name|component
init|=
name|mock
argument_list|(
name|Component
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|componentInstance
operator|.
name|getComponent
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|component
operator|.
name|getRestartPolicyHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NeverRestartPolicy
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|providerService
operator|.
name|buildContainerRetry
argument_list|(
name|mockLauncher
argument_list|,
name|getConfig
argument_list|()
argument_list|,
name|componentLaunchContext
argument_list|,
name|componentInstance
argument_list|)
expr_stmt|;
name|verifyZeroInteractions
argument_list|(
name|mockLauncher
argument_list|)
expr_stmt|;
comment|//OnFailure restart policy
name|when
argument_list|(
name|component
operator|.
name|getRestartPolicyHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|OnFailureRestartPolicy
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|componentLaunchContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|providerService
operator|.
name|buildContainerRetry
argument_list|(
name|mockLauncher
argument_list|,
name|getConfig
argument_list|()
argument_list|,
name|componentLaunchContext
argument_list|,
name|componentInstance
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockLauncher
argument_list|)
operator|.
name|setRetryContext
argument_list|(
name|DEFAULT_CONTAINER_RETRY_MAX
argument_list|,
name|DEFAULT_CONTAINER_RETRY_INTERVAL
argument_list|,
name|DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|mockLauncher
argument_list|)
expr_stmt|;
comment|//Always restart policy
name|when
argument_list|(
name|component
operator|.
name|getRestartPolicyHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|AlwaysRestartPolicy
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|providerService
operator|.
name|buildContainerRetry
argument_list|(
name|mockLauncher
argument_list|,
name|getConfig
argument_list|()
argument_list|,
name|componentLaunchContext
argument_list|,
name|componentInstance
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockLauncher
argument_list|)
operator|.
name|setRetryContext
argument_list|(
name|DEFAULT_CONTAINER_RETRY_MAX
argument_list|,
name|DEFAULT_CONTAINER_RETRY_INTERVAL
argument_list|,
name|DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

