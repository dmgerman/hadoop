begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ClientAMProtocol
operator|.
name|GetCompInstancesRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|MockRunningServiceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|TestServiceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ComponentContainers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|TestFilterUtils
specifier|public
class|class
name|TestFilterUtils
block|{
annotation|@
name|Rule
DECL|field|rule
specifier|public
name|ServiceTestUtils
operator|.
name|ServiceFSWatcher
name|rule
init|=
operator|new
name|ServiceTestUtils
operator|.
name|ServiceFSWatcher
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testNoFilter ()
specifier|public
name|void
name|testNoFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|GetCompInstancesRequestProto
name|req
init|=
name|GetCompInstancesRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ComponentContainers
argument_list|>
name|compContainers
init|=
name|FilterUtils
operator|.
name|filterInstances
argument_list|(
operator|new
name|MockRunningServiceContext
argument_list|(
name|rule
argument_list|,
name|TestServiceManager
operator|.
name|createBaseDef
argument_list|(
literal|"service"
argument_list|)
argument_list|)
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"num comps"
argument_list|,
literal|2
argument_list|,
name|compContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compContainers
operator|.
name|forEach
argument_list|(
name|item
lambda|->
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"num containers"
argument_list|,
literal|2
argument_list|,
name|item
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilterWithComp ()
specifier|public
name|void
name|testFilterWithComp
parameter_list|()
throws|throws
name|Exception
block|{
name|GetCompInstancesRequestProto
name|req
init|=
name|GetCompInstancesRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllComponentNames
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"compa"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ComponentContainers
argument_list|>
name|compContainers
init|=
name|FilterUtils
operator|.
name|filterInstances
argument_list|(
operator|new
name|MockRunningServiceContext
argument_list|(
name|rule
argument_list|,
name|TestServiceManager
operator|.
name|createBaseDef
argument_list|(
literal|"service"
argument_list|)
argument_list|)
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"num comps"
argument_list|,
literal|1
argument_list|,
name|compContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"comp name"
argument_list|,
literal|"compa"
argument_list|,
name|compContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getComponentName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"num containers"
argument_list|,
literal|2
argument_list|,
name|compContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilterWithVersion ()
specifier|public
name|void
name|testFilterWithVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceContext
name|sc
init|=
operator|new
name|MockRunningServiceContext
argument_list|(
name|rule
argument_list|,
name|TestServiceManager
operator|.
name|createBaseDef
argument_list|(
literal|"service"
argument_list|)
argument_list|)
decl_stmt|;
name|GetCompInstancesRequestProto
operator|.
name|Builder
name|reqBuilder
init|=
name|GetCompInstancesRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|reqBuilder
operator|.
name|setVersion
argument_list|(
literal|"v2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"num comps"
argument_list|,
literal|0
argument_list|,
name|FilterUtils
operator|.
name|filterInstances
argument_list|(
name|sc
argument_list|,
name|reqBuilder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|reqBuilder
operator|.
name|addAllComponentNames
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"compa"
argument_list|)
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"num containers"
argument_list|,
literal|2
argument_list|,
name|FilterUtils
operator|.
name|filterInstances
argument_list|(
name|sc
argument_list|,
name|reqBuilder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilterWithState ()
specifier|public
name|void
name|testFilterWithState
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceContext
name|sc
init|=
operator|new
name|MockRunningServiceContext
argument_list|(
name|rule
argument_list|,
name|TestServiceManager
operator|.
name|createBaseDef
argument_list|(
literal|"service"
argument_list|)
argument_list|)
decl_stmt|;
name|GetCompInstancesRequestProto
operator|.
name|Builder
name|reqBuilder
init|=
name|GetCompInstancesRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|reqBuilder
operator|.
name|addAllContainerStates
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ContainerState
operator|.
name|READY
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ComponentContainers
argument_list|>
name|compContainers
init|=
name|FilterUtils
operator|.
name|filterInstances
argument_list|(
name|sc
argument_list|,
name|reqBuilder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"num comps"
argument_list|,
literal|2
argument_list|,
name|compContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compContainers
operator|.
name|forEach
argument_list|(
name|item
lambda|->
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"num containers"
argument_list|,
literal|2
argument_list|,
name|item
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|reqBuilder
operator|.
name|clearContainerStates
argument_list|()
expr_stmt|;
name|reqBuilder
operator|.
name|addAllContainerStates
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ContainerState
operator|.
name|STOPPED
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"num comps"
argument_list|,
literal|0
argument_list|,
name|FilterUtils
operator|.
name|filterInstances
argument_list|(
name|sc
argument_list|,
name|reqBuilder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

