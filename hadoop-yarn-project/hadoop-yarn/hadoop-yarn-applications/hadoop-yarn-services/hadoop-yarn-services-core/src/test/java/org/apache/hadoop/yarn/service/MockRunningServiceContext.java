begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|NMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|async
operator|.
name|NMClientAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstanceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstanceEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|containerlaunch
operator|.
name|ContainerLaunchService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|registry
operator|.
name|YarnRegistryViewForProviders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Mocked service context for a running service.  */
end_comment

begin_class
DECL|class|MockRunningServiceContext
specifier|public
class|class
name|MockRunningServiceContext
extends|extends
name|ServiceContext
block|{
DECL|method|MockRunningServiceContext (ServiceTestUtils.ServiceFSWatcher fsWatcher, Service serviceDef)
specifier|public
name|MockRunningServiceContext
parameter_list|(
name|ServiceTestUtils
operator|.
name|ServiceFSWatcher
name|fsWatcher
parameter_list|,
name|Service
name|serviceDef
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|serviceDef
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fsWatcher
operator|.
name|getFs
argument_list|()
expr_stmt|;
name|ContainerLaunchService
name|mockLaunchService
init|=
name|mock
argument_list|(
name|ContainerLaunchService
operator|.
name|class
argument_list|)
decl_stmt|;
name|this
operator|.
name|scheduler
operator|=
operator|new
name|ServiceScheduler
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|YarnRegistryViewForProviders
name|createYarnRegistryOperations
parameter_list|(
name|ServiceContext
name|context
parameter_list|,
name|RegistryOperations
name|registryClient
parameter_list|)
block|{
return|return
name|mock
argument_list|(
name|YarnRegistryViewForProviders
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NMClientAsync
name|createNMClient
parameter_list|()
block|{
name|NMClientAsync
name|nmClientAsync
init|=
name|super
operator|.
name|createNMClient
argument_list|()
decl_stmt|;
name|NMClient
name|nmClient
init|=
name|mock
argument_list|(
name|NMClient
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|when
argument_list|(
name|nmClient
operator|.
name|getContainerStatus
argument_list|(
name|anyObject
argument_list|()
argument_list|,
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|(
name|Answer
argument_list|<
name|ContainerStatus
argument_list|>
operator|)
name|invocation
lambda|->
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
operator|(
name|ContainerId
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|nmClientAsync
operator|.
name|setClient
argument_list|(
name|nmClient
argument_list|)
expr_stmt|;
return|return
name|nmClientAsync
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContainerLaunchService
name|getContainerLaunchService
parameter_list|()
block|{
return|return
name|mockLaunchService
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServiceUtils
operator|.
name|ProcessTerminationHandler
name|getTerminationHandler
parameter_list|()
block|{
return|return
operator|new
name|ServiceUtils
operator|.
name|ProcessTerminationHandler
argument_list|()
block|{
specifier|public
name|void
name|terminate
parameter_list|(
name|int
name|exitCode
parameter_list|)
block|{           }
block|}
return|;
block|}
block|}
expr_stmt|;
name|this
operator|.
name|scheduler
operator|.
name|init
argument_list|(
name|fsWatcher
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceTestUtils
operator|.
name|createServiceManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|mockLaunchService
argument_list|)
operator|.
name|reInitCompInstance
argument_list|(
name|anyObject
argument_list|()
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|stabilizeComponents
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|stabilizeComponents (ServiceContext context)
specifier|private
name|void
name|stabilizeComponents
parameter_list|(
name|ServiceContext
name|context
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|context
operator|.
name|service
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|context
operator|.
name|attemptId
operator|=
name|attemptId
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Component
argument_list|>
name|componentState
init|=
name|context
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
name|componentSpec
range|:
name|context
operator|.
name|service
operator|.
name|getComponents
argument_list|()
control|)
block|{
name|Component
name|component
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|Component
argument_list|(
name|componentSpec
argument_list|,
literal|1L
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|componentState
operator|.
name|put
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|component
operator|.
name|handle
argument_list|(
operator|new
name|ComponentEvent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|ComponentEventType
operator|.
name|FLEX
argument_list|)
operator|.
name|setDesired
argument_list|(
name|component
operator|.
name|getComponentSpec
argument_list|()
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|componentSpec
operator|.
name|getNumberOfContainers
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|counter
operator|++
expr_stmt|;
name|assignNewContainer
argument_list|(
name|attemptId
argument_list|,
name|counter
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
name|component
operator|.
name|handle
argument_list|(
operator|new
name|ComponentEvent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|ComponentEventType
operator|.
name|CHECK_STABLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assignNewContainer (ApplicationAttemptId attemptId, long containerNum, Component component)
specifier|public
name|void
name|assignNewContainer
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|long
name|containerNum
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
name|Container
name|container
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
operator|.
name|newInstance
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
name|containerNum
argument_list|)
argument_list|,
name|NODE_ID
argument_list|,
literal|"localhost"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|component
operator|.
name|handle
argument_list|(
operator|new
name|ComponentEvent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|ComponentEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|)
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
operator|.
name|setContainerId
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ComponentInstance
name|instance
init|=
name|this
operator|.
name|scheduler
operator|.
name|getLiveInstances
argument_list|()
operator|.
name|get
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|ComponentInstanceEvent
name|startEvent
init|=
operator|new
name|ComponentInstanceEvent
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ComponentInstanceEventType
operator|.
name|START
argument_list|)
decl_stmt|;
name|instance
operator|.
name|handle
argument_list|(
name|startEvent
argument_list|)
expr_stmt|;
name|ComponentInstanceEvent
name|readyEvent
init|=
operator|new
name|ComponentInstanceEvent
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ComponentInstanceEventType
operator|.
name|BECOME_READY
argument_list|)
decl_stmt|;
name|instance
operator|.
name|handle
argument_list|(
name|readyEvent
argument_list|)
expr_stmt|;
block|}
DECL|field|NODE_ID
specifier|private
specifier|static
specifier|final
name|NodeId
name|NODE_ID
init|=
name|NodeId
operator|.
name|fromString
argument_list|(
literal|"localhost:0"
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

