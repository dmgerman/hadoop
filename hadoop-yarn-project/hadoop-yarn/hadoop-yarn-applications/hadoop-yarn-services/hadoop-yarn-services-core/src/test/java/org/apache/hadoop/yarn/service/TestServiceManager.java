begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ComponentState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstanceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstanceEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ServiceManager}.  */
end_comment

begin_class
DECL|class|TestServiceManager
specifier|public
class|class
name|TestServiceManager
block|{
annotation|@
name|Rule
DECL|field|rule
specifier|public
name|ServiceTestUtils
operator|.
name|ServiceFSWatcher
name|rule
init|=
operator|new
name|ServiceTestUtils
operator|.
name|ServiceFSWatcher
argument_list|()
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
DECL|method|testUpgrade ()
specifier|public
name|void
name|testUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceContext
name|context
init|=
name|createServiceContext
argument_list|(
literal|"testUpgrade"
argument_list|)
decl_stmt|;
name|initUpgrade
argument_list|(
name|context
argument_list|,
literal|"v2"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"service not upgraded"
argument_list|,
name|ServiceState
operator|.
name|UPGRADING
argument_list|,
name|context
operator|.
name|getServiceManager
argument_list|()
operator|.
name|getServiceSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
DECL|method|testRestartNothingToUpgrade ()
specifier|public
name|void
name|testRestartNothingToUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceContext
name|context
init|=
name|createServiceContext
argument_list|(
literal|"testRestartNothingToUpgrade"
argument_list|)
decl_stmt|;
name|initUpgrade
argument_list|(
name|context
argument_list|,
literal|"v2"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ServiceManager
name|manager
init|=
name|context
operator|.
name|getServiceManager
argument_list|()
decl_stmt|;
comment|//make components stable by upgrading all instances
name|upgradeAndReadyAllInstances
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|scheduler
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ServiceEvent
argument_list|(
name|ServiceEventType
operator|.
name|START
argument_list|)
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|context
operator|.
name|service
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|STABLE
argument_list|)
argument_list|,
name|CHECK_EVERY_MILLIS
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"service not re-started"
argument_list|,
name|ServiceState
operator|.
name|STABLE
argument_list|,
name|manager
operator|.
name|getServiceSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
DECL|method|testAutoFinalizeNothingToUpgrade ()
specifier|public
name|void
name|testAutoFinalizeNothingToUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceContext
name|context
init|=
name|createServiceContext
argument_list|(
literal|"testAutoFinalizeNothingToUpgrade"
argument_list|)
decl_stmt|;
name|initUpgrade
argument_list|(
name|context
argument_list|,
literal|"v2"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ServiceManager
name|manager
init|=
name|context
operator|.
name|getServiceManager
argument_list|()
decl_stmt|;
comment|//make components stable by upgrading all instances
name|upgradeAndReadyAllInstances
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|context
operator|.
name|service
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|STABLE
argument_list|)
argument_list|,
name|CHECK_EVERY_MILLIS
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"service stable"
argument_list|,
name|ServiceState
operator|.
name|STABLE
argument_list|,
name|manager
operator|.
name|getServiceSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
DECL|method|testRestartWithPendingUpgrade ()
specifier|public
name|void
name|testRestartWithPendingUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceContext
name|context
init|=
name|createServiceContext
argument_list|(
literal|"testRestart"
argument_list|)
decl_stmt|;
name|initUpgrade
argument_list|(
name|context
argument_list|,
literal|"v2"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ServiceManager
name|manager
init|=
name|context
operator|.
name|getServiceManager
argument_list|()
decl_stmt|;
name|context
operator|.
name|scheduler
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ServiceEvent
argument_list|(
name|ServiceEventType
operator|.
name|START
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|scheduler
operator|.
name|getDispatcher
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"service should still be upgrading"
argument_list|,
name|ServiceState
operator|.
name|UPGRADING
argument_list|,
name|manager
operator|.
name|getServiceSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
DECL|method|testFinalize ()
specifier|public
name|void
name|testFinalize
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceContext
name|context
init|=
name|createServiceContext
argument_list|(
literal|"testCheckState"
argument_list|)
decl_stmt|;
name|initUpgrade
argument_list|(
name|context
argument_list|,
literal|"v2"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ServiceManager
name|manager
init|=
name|context
operator|.
name|getServiceManager
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"service not upgrading"
argument_list|,
name|ServiceState
operator|.
name|UPGRADING
argument_list|,
name|manager
operator|.
name|getServiceSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|//make components stable by upgrading all instances
name|upgradeAndReadyAllInstances
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// finalize service
name|context
operator|.
name|scheduler
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ServiceEvent
argument_list|(
name|ServiceEventType
operator|.
name|START
argument_list|)
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|context
operator|.
name|service
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|STABLE
argument_list|)
argument_list|,
name|CHECK_EVERY_MILLIS
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"service not re-started"
argument_list|,
name|ServiceState
operator|.
name|STABLE
argument_list|,
name|manager
operator|.
name|getServiceSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|validateUpgradeFinalization
argument_list|(
name|manager
operator|.
name|getName
argument_list|()
argument_list|,
literal|"v2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
DECL|method|testAutoFinalize ()
specifier|public
name|void
name|testAutoFinalize
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceContext
name|context
init|=
name|createServiceContext
argument_list|(
literal|"testCheckStateAutoFinalize"
argument_list|)
decl_stmt|;
name|ServiceManager
name|manager
init|=
name|context
operator|.
name|getServiceManager
argument_list|()
decl_stmt|;
name|manager
operator|.
name|getServiceSpec
argument_list|()
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|UPGRADING_AUTO_FINALIZE
argument_list|)
expr_stmt|;
name|initUpgrade
argument_list|(
name|context
argument_list|,
literal|"v2"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// make components stable
name|upgradeAndReadyAllInstances
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|context
operator|.
name|service
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|STABLE
argument_list|)
argument_list|,
name|CHECK_EVERY_MILLIS
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"service not stable"
argument_list|,
name|ServiceState
operator|.
name|STABLE
argument_list|,
name|manager
operator|.
name|getServiceSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|validateUpgradeFinalization
argument_list|(
name|manager
operator|.
name|getName
argument_list|()
argument_list|,
literal|"v2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidUpgrade ()
specifier|public
name|void
name|testInvalidUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceContext
name|serviceContext
init|=
name|createServiceContext
argument_list|(
literal|"testInvalidUpgrade"
argument_list|)
decl_stmt|;
name|ServiceManager
name|manager
init|=
name|serviceContext
operator|.
name|getServiceManager
argument_list|()
decl_stmt|;
name|manager
operator|.
name|getServiceSpec
argument_list|()
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|UPGRADING_AUTO_FINALIZE
argument_list|)
expr_stmt|;
name|Service
name|upgradedDef
init|=
name|ServiceTestUtils
operator|.
name|createExampleApplication
argument_list|()
decl_stmt|;
name|upgradedDef
operator|.
name|setName
argument_list|(
name|manager
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|upgradedDef
operator|.
name|setVersion
argument_list|(
literal|"v2"
argument_list|)
expr_stmt|;
name|upgradedDef
operator|.
name|setLifetime
argument_list|(
literal|2L
argument_list|)
expr_stmt|;
name|writeUpgradedDef
argument_list|(
name|upgradedDef
argument_list|)
expr_stmt|;
try|try
block|{
name|manager
operator|.
name|processUpgradeRequest
argument_list|(
literal|"v2"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|UnsupportedOperationException
argument_list|)
expr_stmt|;
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
DECL|method|testExpressUpgrade ()
specifier|public
name|void
name|testExpressUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceContext
name|context
init|=
name|createServiceContext
argument_list|(
literal|"testExpressUpgrade"
argument_list|)
decl_stmt|;
name|ServiceManager
name|manager
init|=
name|context
operator|.
name|getServiceManager
argument_list|()
decl_stmt|;
name|manager
operator|.
name|getServiceSpec
argument_list|()
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|EXPRESS_UPGRADING
argument_list|)
expr_stmt|;
name|initUpgrade
argument_list|(
name|context
argument_list|,
literal|"v2"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|comps
init|=
name|ServiceApiUtil
operator|.
name|resolveCompsDependency
argument_list|(
name|context
operator|.
name|service
argument_list|)
decl_stmt|;
comment|// wait till instances of first component are upgraded and ready
name|String
name|compA
init|=
name|comps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|makeInstancesReadyAfterUpgrade
argument_list|(
name|context
argument_list|,
name|compA
argument_list|)
expr_stmt|;
comment|// wait till instances of second component are upgraded and ready
name|String
name|compB
init|=
name|comps
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|makeInstancesReadyAfterUpgrade
argument_list|(
name|context
argument_list|,
name|compB
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|context
operator|.
name|service
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|STABLE
argument_list|)
argument_list|,
name|CHECK_EVERY_MILLIS
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"service not stable"
argument_list|,
name|ServiceState
operator|.
name|STABLE
argument_list|,
name|manager
operator|.
name|getServiceSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|validateUpgradeFinalization
argument_list|(
name|manager
operator|.
name|getName
argument_list|()
argument_list|,
literal|"v2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
DECL|method|testCancelUpgrade ()
specifier|public
name|void
name|testCancelUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceContext
name|context
init|=
name|createServiceContext
argument_list|(
literal|"testCancelUpgrade"
argument_list|)
decl_stmt|;
name|writeInitialDef
argument_list|(
name|context
operator|.
name|service
argument_list|)
expr_stmt|;
name|initUpgrade
argument_list|(
name|context
argument_list|,
literal|"v2"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ServiceManager
name|manager
init|=
name|context
operator|.
name|getServiceManager
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"service not upgrading"
argument_list|,
name|ServiceState
operator|.
name|UPGRADING
argument_list|,
name|manager
operator|.
name|getServiceSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|comps
init|=
name|ServiceApiUtil
operator|.
name|resolveCompsDependency
argument_list|(
name|context
operator|.
name|service
argument_list|)
decl_stmt|;
comment|// wait till instances of first component are upgraded and ready
name|String
name|compA
init|=
name|comps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// upgrade the instances
name|upgradeInstances
argument_list|(
name|context
argument_list|,
name|compA
argument_list|)
expr_stmt|;
name|makeInstancesReadyAfterUpgrade
argument_list|(
name|context
argument_list|,
name|compA
argument_list|)
expr_stmt|;
comment|// cancel upgrade
name|context
operator|.
name|scheduler
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ServiceEvent
argument_list|(
name|ServiceEventType
operator|.
name|CANCEL_UPGRADE
argument_list|)
argument_list|)
expr_stmt|;
name|makeInstancesReadyAfterUpgrade
argument_list|(
name|context
argument_list|,
name|compA
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|context
operator|.
name|service
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|STABLE
argument_list|)
argument_list|,
name|CHECK_EVERY_MILLIS
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"service upgrade not cancelled"
argument_list|,
name|ServiceState
operator|.
name|STABLE
argument_list|,
name|manager
operator|.
name|getServiceSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|validateUpgradeFinalization
argument_list|(
name|manager
operator|.
name|getName
argument_list|()
argument_list|,
literal|"v1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
DECL|method|testCancelUpgradeAfterInitiate ()
specifier|public
name|void
name|testCancelUpgradeAfterInitiate
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceContext
name|context
init|=
name|createServiceContext
argument_list|(
literal|"testCancelUpgrade"
argument_list|)
decl_stmt|;
name|writeInitialDef
argument_list|(
name|context
operator|.
name|service
argument_list|)
expr_stmt|;
name|initUpgrade
argument_list|(
name|context
argument_list|,
literal|"v2"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ServiceManager
name|manager
init|=
name|context
operator|.
name|getServiceManager
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"service not upgrading"
argument_list|,
name|ServiceState
operator|.
name|UPGRADING
argument_list|,
name|manager
operator|.
name|getServiceSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// cancel upgrade
name|context
operator|.
name|scheduler
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ServiceEvent
argument_list|(
name|ServiceEventType
operator|.
name|CANCEL_UPGRADE
argument_list|)
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|context
operator|.
name|service
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|STABLE
argument_list|)
argument_list|,
name|CHECK_EVERY_MILLIS
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"service upgrade not cancelled"
argument_list|,
name|ServiceState
operator|.
name|STABLE
argument_list|,
name|manager
operator|.
name|getServiceSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|validateUpgradeFinalization
argument_list|(
name|manager
operator|.
name|getName
argument_list|()
argument_list|,
literal|"v1"
argument_list|)
expr_stmt|;
block|}
DECL|method|validateUpgradeFinalization (String serviceName, String expectedVersion)
specifier|private
name|void
name|validateUpgradeFinalization
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|String
name|expectedVersion
parameter_list|)
throws|throws
name|IOException
block|{
name|Service
name|savedSpec
init|=
name|ServiceApiUtil
operator|.
name|loadService
argument_list|(
name|rule
operator|.
name|getFs
argument_list|()
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"service def not re-written"
argument_list|,
name|expectedVersion
argument_list|,
name|savedSpec
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"app id not present"
argument_list|,
name|savedSpec
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"state not stable"
argument_list|,
name|ServiceState
operator|.
name|STABLE
argument_list|,
name|savedSpec
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|savedSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|forEach
argument_list|(
name|compSpec
lambda|->
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"comp not stable"
argument_list|,
name|ComponentState
operator|.
name|STABLE
argument_list|,
name|compSpec
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|initUpgrade (ServiceContext context, String version, boolean upgradeArtifact, boolean autoFinalize, boolean expressUpgrade)
specifier|private
name|void
name|initUpgrade
parameter_list|(
name|ServiceContext
name|context
parameter_list|,
name|String
name|version
parameter_list|,
name|boolean
name|upgradeArtifact
parameter_list|,
name|boolean
name|autoFinalize
parameter_list|,
name|boolean
name|expressUpgrade
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|ServiceManager
name|serviceManager
init|=
name|context
operator|.
name|getServiceManager
argument_list|()
decl_stmt|;
name|Service
name|upgradedDef
init|=
name|ServiceTestUtils
operator|.
name|createExampleApplication
argument_list|()
decl_stmt|;
name|upgradedDef
operator|.
name|setName
argument_list|(
name|serviceManager
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|upgradedDef
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|upgradeArtifact
condition|)
block|{
name|Artifact
name|upgradedArtifact
init|=
name|createTestArtifact
argument_list|(
literal|"2"
argument_list|)
decl_stmt|;
name|upgradedDef
operator|.
name|getComponents
argument_list|()
operator|.
name|forEach
argument_list|(
name|component
lambda|->
block|{
name|component
operator|.
name|setArtifact
argument_list|(
name|upgradedArtifact
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
name|writeUpgradedDef
argument_list|(
name|upgradedDef
argument_list|)
expr_stmt|;
name|serviceManager
operator|.
name|processUpgradeRequest
argument_list|(
name|version
argument_list|,
name|autoFinalize
argument_list|,
name|expressUpgrade
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
for|for
control|(
name|Component
name|comp
range|:
name|context
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|comp
operator|.
name|getComponentSpec
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ComponentState
operator|.
name|NEEDS_UPGRADE
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
argument_list|,
name|CHECK_EVERY_MILLIS
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
block|}
DECL|method|upgradeAndReadyAllInstances (ServiceContext context)
specifier|private
name|void
name|upgradeAndReadyAllInstances
parameter_list|(
name|ServiceContext
name|context
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|upgradeAllInstances
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|makeAllInstancesReady
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|upgradeAllInstances (ServiceContext context)
specifier|private
name|void
name|upgradeAllInstances
parameter_list|(
name|ServiceContext
name|context
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
comment|// upgrade the instances
name|context
operator|.
name|scheduler
operator|.
name|getLiveInstances
argument_list|()
operator|.
name|forEach
argument_list|(
operator|(
parameter_list|(
name|containerId
parameter_list|,
name|instance
parameter_list|)
lambda|->
block|{
name|ComponentInstanceEvent
name|event
init|=
operator|new
name|ComponentInstanceEvent
argument_list|(
name|containerId
argument_list|,
name|ComponentInstanceEventType
operator|.
name|UPGRADE
argument_list|)
decl_stmt|;
name|context
operator|.
name|scheduler
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|makeAllInstancesReady (ServiceContext context)
specifier|private
name|void
name|makeAllInstancesReady
parameter_list|(
name|ServiceContext
name|context
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|context
operator|.
name|scheduler
operator|.
name|getLiveInstances
argument_list|()
operator|.
name|forEach
argument_list|(
operator|(
parameter_list|(
name|containerId
parameter_list|,
name|instance
parameter_list|)
lambda|->
block|{
name|ComponentInstanceEvent
name|event
init|=
operator|new
name|ComponentInstanceEvent
argument_list|(
name|containerId
argument_list|,
name|ComponentInstanceEventType
operator|.
name|BECOME_READY
argument_list|)
decl_stmt|;
name|context
operator|.
name|scheduler
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
operator|)
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
for|for
control|(
name|ComponentInstance
name|instance
range|:
name|context
operator|.
name|scheduler
operator|.
name|getLiveInstances
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|instance
operator|.
name|getContainerState
argument_list|()
operator|.
name|equals
argument_list|(
name|ContainerState
operator|.
name|READY
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
argument_list|,
name|CHECK_EVERY_MILLIS
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
block|}
DECL|method|upgradeInstances (ServiceContext context, String compName)
specifier|private
name|void
name|upgradeInstances
parameter_list|(
name|ServiceContext
name|context
parameter_list|,
name|String
name|compName
parameter_list|)
block|{
name|Collection
argument_list|<
name|ComponentInstance
argument_list|>
name|compInstances
init|=
name|context
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|get
argument_list|(
name|compName
argument_list|)
operator|.
name|getAllComponentInstances
argument_list|()
decl_stmt|;
name|compInstances
operator|.
name|forEach
argument_list|(
name|instance
lambda|->
block|{
name|ComponentInstanceEvent
name|event
init|=
operator|new
name|ComponentInstanceEvent
argument_list|(
name|instance
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ComponentInstanceEventType
operator|.
name|UPGRADE
argument_list|)
decl_stmt|;
name|context
operator|.
name|scheduler
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|makeInstancesReadyAfterUpgrade (ServiceContext context, String compName)
specifier|private
name|void
name|makeInstancesReadyAfterUpgrade
parameter_list|(
name|ServiceContext
name|context
parameter_list|,
name|String
name|compName
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|Collection
argument_list|<
name|ComponentInstance
argument_list|>
name|compInstances
init|=
name|context
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|get
argument_list|(
name|compName
argument_list|)
operator|.
name|getAllComponentInstances
argument_list|()
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
for|for
control|(
name|ComponentInstance
name|instance
range|:
name|compInstances
control|)
block|{
if|if
condition|(
operator|!
name|instance
operator|.
name|getContainerState
argument_list|()
operator|.
name|equals
argument_list|(
name|ContainerState
operator|.
name|UPGRADING
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
argument_list|,
name|CHECK_EVERY_MILLIS
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
comment|// instances of comp1 get upgraded and become ready event is triggered
comment|// become ready
name|compInstances
operator|.
name|forEach
argument_list|(
name|instance
lambda|->
block|{
name|ComponentInstanceEvent
name|event
init|=
operator|new
name|ComponentInstanceEvent
argument_list|(
name|instance
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ComponentInstanceEventType
operator|.
name|BECOME_READY
argument_list|)
decl_stmt|;
name|context
operator|.
name|scheduler
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
for|for
control|(
name|ComponentInstance
name|instance
range|:
name|compInstances
control|)
block|{
if|if
condition|(
operator|!
name|instance
operator|.
name|getContainerState
argument_list|()
operator|.
name|equals
argument_list|(
name|ContainerState
operator|.
name|READY
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
argument_list|,
name|CHECK_EVERY_MILLIS
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
block|}
DECL|method|createServiceContext (String name)
specifier|private
name|ServiceContext
name|createServiceContext
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|Service
name|service
init|=
name|createBaseDef
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ServiceContext
name|context
init|=
operator|new
name|MockRunningServiceContext
argument_list|(
name|rule
argument_list|,
name|service
argument_list|)
decl_stmt|;
name|context
operator|.
name|scheduler
operator|.
name|getDispatcher
argument_list|()
operator|.
name|setDrainEventsOnStop
argument_list|()
expr_stmt|;
name|context
operator|.
name|scheduler
operator|.
name|getDispatcher
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|createBaseDef (String name)
specifier|public
specifier|static
name|Service
name|createBaseDef
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|createDef
argument_list|(
name|name
argument_list|,
name|ServiceTestUtils
operator|.
name|createExampleApplication
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createDef (String name, Service serviceDef)
specifier|public
specifier|static
name|Service
name|createDef
parameter_list|(
name|String
name|name
parameter_list|,
name|Service
name|serviceDef
parameter_list|)
block|{
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|serviceDef
operator|.
name|setId
argument_list|(
name|applicationId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|serviceDef
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|serviceDef
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|Artifact
name|artifact
init|=
name|createTestArtifact
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|serviceDef
operator|.
name|getComponents
argument_list|()
operator|.
name|forEach
argument_list|(
name|component
lambda|->
name|component
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|serviceDef
return|;
block|}
DECL|method|createTestArtifact (String artifactId)
specifier|static
name|Artifact
name|createTestArtifact
parameter_list|(
name|String
name|artifactId
parameter_list|)
block|{
name|Artifact
name|artifact
init|=
operator|new
name|Artifact
argument_list|()
decl_stmt|;
name|artifact
operator|.
name|setId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setType
argument_list|(
name|Artifact
operator|.
name|TypeEnum
operator|.
name|TARBALL
argument_list|)
expr_stmt|;
return|return
name|artifact
return|;
block|}
DECL|method|writeInitialDef (Service service)
specifier|private
name|void
name|writeInitialDef
parameter_list|(
name|Service
name|service
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|Path
name|servicePath
init|=
name|rule
operator|.
name|getFs
argument_list|()
operator|.
name|buildClusterDirPath
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|ServiceApiUtil
operator|.
name|createDirAndPersistApp
argument_list|(
name|rule
operator|.
name|getFs
argument_list|()
argument_list|,
name|servicePath
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
DECL|method|writeUpgradedDef (Service upgradedDef)
specifier|private
name|void
name|writeUpgradedDef
parameter_list|(
name|Service
name|upgradedDef
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|Path
name|upgradePath
init|=
name|rule
operator|.
name|getFs
argument_list|()
operator|.
name|buildClusterUpgradeDirPath
argument_list|(
name|upgradedDef
operator|.
name|getName
argument_list|()
argument_list|,
name|upgradedDef
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|ServiceApiUtil
operator|.
name|createDirAndPersistApp
argument_list|(
name|rule
operator|.
name|getFs
argument_list|()
argument_list|,
name|upgradePath
argument_list|,
name|upgradedDef
argument_list|)
expr_stmt|;
block|}
DECL|field|TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
literal|10000
decl_stmt|;
DECL|field|CHECK_EVERY_MILLIS
specifier|private
specifier|static
specifier|final
name|int
name|CHECK_EVERY_MILLIS
init|=
literal|100
decl_stmt|;
block|}
end_class

end_unit

