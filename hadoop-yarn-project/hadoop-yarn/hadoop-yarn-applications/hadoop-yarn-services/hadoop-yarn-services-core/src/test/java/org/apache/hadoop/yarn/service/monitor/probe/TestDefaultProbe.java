begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.monitor.probe
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|monitor
operator|.
name|probe
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ReadinessCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Tests for default probe.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestDefaultProbe
specifier|public
class|class
name|TestDefaultProbe
block|{
DECL|field|probe
specifier|private
specifier|final
name|DefaultProbe
name|probe
decl_stmt|;
DECL|method|TestDefaultProbe (Probe probe)
specifier|public
name|TestDefaultProbe
parameter_list|(
name|Probe
name|probe
parameter_list|)
block|{
name|this
operator|.
name|probe
operator|=
operator|(
name|DefaultProbe
operator|)
name|probe
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
comment|// test run 1: Default probe checks that container has an IP
name|Probe
name|p1
init|=
name|MonitorUtils
operator|.
name|getProbe
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// test run 2: Default probe with DNS check for component instance hostname
name|ReadinessCheck
name|rc2
init|=
operator|new
name|ReadinessCheck
argument_list|()
operator|.
name|type
argument_list|(
name|ReadinessCheck
operator|.
name|TypeEnum
operator|.
name|DEFAULT
argument_list|)
operator|.
name|properties
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|MonitorKeys
operator|.
name|DEFAULT_PROBE_DNS_CHECK_ENABLED
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
name|Probe
name|p2
init|=
name|MonitorUtils
operator|.
name|getProbe
argument_list|(
name|rc2
argument_list|)
decl_stmt|;
comment|// test run 3: Default probe with DNS check using specific DNS server
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|MonitorKeys
operator|.
name|DEFAULT_PROBE_DNS_CHECK_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|MonitorKeys
operator|.
name|DEFAULT_PROBE_DNS_ADDRESS
argument_list|,
literal|"8.8.8.8"
argument_list|)
expr_stmt|;
name|ReadinessCheck
name|rc3
init|=
operator|new
name|ReadinessCheck
argument_list|()
operator|.
name|type
argument_list|(
name|ReadinessCheck
operator|.
name|TypeEnum
operator|.
name|DEFAULT
argument_list|)
operator|.
name|properties
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|Probe
name|p3
init|=
name|MonitorUtils
operator|.
name|getProbe
argument_list|(
name|rc3
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|p1
block|}
block|,
block|{
name|p2
block|}
block|,
block|{
name|p3
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testDefaultProbe ()
specifier|public
name|void
name|testDefaultProbe
parameter_list|()
block|{
comment|// component instance has a good hostname, so probe will eventually succeed
comment|// whether or not DNS checking is enabled
name|ComponentInstance
name|componentInstance
init|=
name|createMockComponentInstance
argument_list|(
literal|"example.com"
argument_list|)
decl_stmt|;
name|checkPingResults
argument_list|(
name|probe
argument_list|,
name|componentInstance
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// component instance has a bad hostname, so probe will fail when DNS
comment|// checking is enabled
name|componentInstance
operator|=
name|createMockComponentInstance
argument_list|(
literal|"bad.dns.test"
argument_list|)
expr_stmt|;
name|checkPingResults
argument_list|(
name|probe
argument_list|,
name|componentInstance
argument_list|,
name|probe
operator|.
name|isDnsCheckEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkPingResults (Probe probe, ComponentInstance componentInstance, boolean expectDNSCheckFailure)
specifier|private
specifier|static
name|void
name|checkPingResults
parameter_list|(
name|Probe
name|probe
parameter_list|,
name|ComponentInstance
name|componentInstance
parameter_list|,
name|boolean
name|expectDNSCheckFailure
parameter_list|)
block|{
comment|// on the first ping, null container status results in failure
name|ProbeStatus
name|probeStatus
init|=
name|probe
operator|.
name|ping
argument_list|(
name|componentInstance
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Expected failure for "
operator|+
name|probeStatus
operator|.
name|toString
argument_list|()
argument_list|,
name|probeStatus
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected IP failure for "
operator|+
name|probeStatus
operator|.
name|toString
argument_list|()
argument_list|,
name|probeStatus
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|componentInstance
operator|.
name|getCompInstanceName
argument_list|()
operator|+
literal|": IP is not available yet"
argument_list|)
argument_list|)
expr_stmt|;
comment|// on the second ping, container status is retrieved but there are no
comment|// IPs, resulting in failure
name|probeStatus
operator|=
name|probe
operator|.
name|ping
argument_list|(
name|componentInstance
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Expected failure for "
operator|+
name|probeStatus
operator|.
name|toString
argument_list|()
argument_list|,
name|probeStatus
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected IP failure for "
operator|+
name|probeStatus
operator|.
name|toString
argument_list|()
argument_list|,
name|probeStatus
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|componentInstance
operator|.
name|getCompInstanceName
argument_list|()
operator|+
literal|": IP is not available yet"
argument_list|)
argument_list|)
expr_stmt|;
comment|// on the third ping, IPs are retrieved and success depends on whether or
comment|// not a DNS lookup can be performed for the component instance hostname
name|probeStatus
operator|=
name|probe
operator|.
name|ping
argument_list|(
name|componentInstance
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectDNSCheckFailure
condition|)
block|{
name|assertFalse
argument_list|(
literal|"Expected failure for "
operator|+
name|probeStatus
operator|.
name|toString
argument_list|()
argument_list|,
name|probeStatus
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected DNS failure for "
operator|+
name|probeStatus
operator|.
name|toString
argument_list|()
argument_list|,
name|probeStatus
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|componentInstance
operator|.
name|getCompInstanceName
argument_list|()
operator|+
literal|": DNS checking is enabled, but lookup"
operator|+
literal|" for "
operator|+
name|componentInstance
operator|.
name|getHostname
argument_list|()
operator|+
literal|" is not available "
operator|+
literal|"yet"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Expected success for "
operator|+
name|probeStatus
operator|.
name|toString
argument_list|()
argument_list|,
name|probeStatus
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createMockComponentInstance (String hostname)
specifier|private
specifier|static
name|ComponentInstance
name|createMockComponentInstance
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|ComponentInstance
name|componentInstance
init|=
name|mock
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|componentInstance
operator|.
name|getHostname
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|componentInstance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"comp-0"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|componentInstance
operator|.
name|getContainerStatus
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ContainerStatus
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
block|{
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|1
condition|)
block|{
comment|// first call to getContainerStatus returns null
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|count
operator|==
literal|2
condition|)
block|{
comment|// second call returns a ContainerStatus with no IPs
name|ContainerStatus
name|containerStatus
init|=
name|mock
argument_list|(
name|ContainerStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|containerStatus
operator|.
name|getIPs
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|containerStatus
return|;
block|}
else|else
block|{
comment|// third call returns a ContainerStatus with one IP
name|ContainerStatus
name|containerStatus
init|=
name|mock
argument_list|(
name|ContainerStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|containerStatus
operator|.
name|getIPs
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"1.2.3.4"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|containerStatus
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|componentInstance
return|;
block|}
block|}
end_class

end_unit

