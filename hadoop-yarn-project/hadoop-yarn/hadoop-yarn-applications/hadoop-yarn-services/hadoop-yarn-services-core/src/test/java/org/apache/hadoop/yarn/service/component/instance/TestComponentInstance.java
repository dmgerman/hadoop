begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.component.instance
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|TestComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ComponentInstance}.  */
end_comment

begin_class
DECL|class|TestComponentInstance
specifier|public
class|class
name|TestComponentInstance
block|{
annotation|@
name|Rule
DECL|field|rule
specifier|public
name|ServiceTestUtils
operator|.
name|ServiceFSWatcher
name|rule
init|=
operator|new
name|ServiceTestUtils
operator|.
name|ServiceFSWatcher
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testContainerUpgrade ()
specifier|public
name|void
name|testContainerUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceContext
name|context
init|=
name|TestComponent
operator|.
name|createTestContext
argument_list|(
name|rule
argument_list|,
literal|"testContainerUpgrade"
argument_list|)
decl_stmt|;
name|Component
name|component
init|=
name|context
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|upgradeComponent
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|ComponentInstance
name|instance
init|=
name|component
operator|.
name|getAllComponentInstances
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|ComponentInstanceEvent
name|instanceEvent
init|=
operator|new
name|ComponentInstanceEvent
argument_list|(
name|instance
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ComponentInstanceEventType
operator|.
name|UPGRADE
argument_list|)
decl_stmt|;
name|instance
operator|.
name|handle
argument_list|(
name|instanceEvent
argument_list|)
expr_stmt|;
name|Container
name|containerSpec
init|=
name|component
operator|.
name|getComponentSpec
argument_list|()
operator|.
name|getContainer
argument_list|(
name|instance
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"instance not upgrading"
argument_list|,
name|ContainerState
operator|.
name|UPGRADING
argument_list|,
name|containerSpec
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerReadyAfterUpgrade ()
specifier|public
name|void
name|testContainerReadyAfterUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceContext
name|context
init|=
name|TestComponent
operator|.
name|createTestContext
argument_list|(
name|rule
argument_list|,
literal|"testContainerStarted"
argument_list|)
decl_stmt|;
name|Component
name|component
init|=
name|context
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|upgradeComponent
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|ComponentInstance
name|instance
init|=
name|component
operator|.
name|getAllComponentInstances
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|ComponentInstanceEvent
name|instanceEvent
init|=
operator|new
name|ComponentInstanceEvent
argument_list|(
name|instance
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ComponentInstanceEventType
operator|.
name|UPGRADE
argument_list|)
decl_stmt|;
name|instance
operator|.
name|handle
argument_list|(
name|instanceEvent
argument_list|)
expr_stmt|;
name|instance
operator|.
name|handle
argument_list|(
operator|new
name|ComponentInstanceEvent
argument_list|(
name|instance
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ComponentInstanceEventType
operator|.
name|BECOME_READY
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"instance not ready"
argument_list|,
name|ContainerState
operator|.
name|READY
argument_list|,
name|instance
operator|.
name|getCompSpec
argument_list|()
operator|.
name|getContainer
argument_list|(
name|instance
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|upgradeComponent (Component component)
specifier|private
name|void
name|upgradeComponent
parameter_list|(
name|Component
name|component
parameter_list|)
block|{
name|component
operator|.
name|handle
argument_list|(
operator|new
name|ComponentEvent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|ComponentEventType
operator|.
name|UPGRADE
argument_list|)
operator|.
name|setTargetSpec
argument_list|(
name|component
operator|.
name|getComponentSpec
argument_list|()
argument_list|)
operator|.
name|setUpgradeVersion
argument_list|(
literal|"v2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

