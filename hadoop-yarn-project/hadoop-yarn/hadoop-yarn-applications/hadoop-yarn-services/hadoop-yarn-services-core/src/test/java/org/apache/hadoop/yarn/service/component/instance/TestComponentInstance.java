begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.component.instance
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|TestComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ComponentInstance}.  */
end_comment

begin_class
DECL|class|TestComponentInstance
specifier|public
class|class
name|TestComponentInstance
block|{
annotation|@
name|Rule
DECL|field|rule
specifier|public
name|ServiceTestUtils
operator|.
name|ServiceFSWatcher
name|rule
init|=
operator|new
name|ServiceTestUtils
operator|.
name|ServiceFSWatcher
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testContainerUpgrade ()
specifier|public
name|void
name|testContainerUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceContext
name|context
init|=
name|TestComponent
operator|.
name|createTestContext
argument_list|(
name|rule
argument_list|,
literal|"testContainerUpgrade"
argument_list|)
decl_stmt|;
name|Component
name|component
init|=
name|context
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|upgradeComponent
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|ComponentInstance
name|instance
init|=
name|component
operator|.
name|getAllComponentInstances
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|ComponentInstanceEvent
name|instanceEvent
init|=
operator|new
name|ComponentInstanceEvent
argument_list|(
name|instance
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ComponentInstanceEventType
operator|.
name|UPGRADE
argument_list|)
decl_stmt|;
name|instance
operator|.
name|handle
argument_list|(
name|instanceEvent
argument_list|)
expr_stmt|;
name|Container
name|containerSpec
init|=
name|component
operator|.
name|getComponentSpec
argument_list|()
operator|.
name|getContainer
argument_list|(
name|instance
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"instance not upgrading"
argument_list|,
name|ContainerState
operator|.
name|UPGRADING
argument_list|,
name|containerSpec
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerReadyAfterUpgrade ()
specifier|public
name|void
name|testContainerReadyAfterUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceContext
name|context
init|=
name|TestComponent
operator|.
name|createTestContext
argument_list|(
name|rule
argument_list|,
literal|"testContainerStarted"
argument_list|)
decl_stmt|;
name|Component
name|component
init|=
name|context
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|upgradeComponent
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|ComponentInstance
name|instance
init|=
name|component
operator|.
name|getAllComponentInstances
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|ComponentInstanceEvent
name|instanceEvent
init|=
operator|new
name|ComponentInstanceEvent
argument_list|(
name|instance
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ComponentInstanceEventType
operator|.
name|UPGRADE
argument_list|)
decl_stmt|;
name|instance
operator|.
name|handle
argument_list|(
name|instanceEvent
argument_list|)
expr_stmt|;
name|instance
operator|.
name|handle
argument_list|(
operator|new
name|ComponentInstanceEvent
argument_list|(
name|instance
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ComponentInstanceEventType
operator|.
name|BECOME_READY
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"instance not ready"
argument_list|,
name|ContainerState
operator|.
name|READY
argument_list|,
name|component
operator|.
name|getComponentSpec
argument_list|()
operator|.
name|getContainer
argument_list|(
name|instance
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|upgradeComponent (Component component)
specifier|private
name|void
name|upgradeComponent
parameter_list|(
name|Component
name|component
parameter_list|)
block|{
name|component
operator|.
name|handle
argument_list|(
operator|new
name|ComponentEvent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|ComponentEventType
operator|.
name|UPGRADE
argument_list|)
operator|.
name|setTargetSpec
argument_list|(
name|component
operator|.
name|getComponentSpec
argument_list|()
argument_list|)
operator|.
name|setUpgradeVersion
argument_list|(
literal|"v2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createComponent (ServiceScheduler scheduler, org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum restartPolicy, int nSucceededInstances, int nFailedInstances, int totalAsk, int componentId)
specifier|private
name|Component
name|createComponent
parameter_list|(
name|ServiceScheduler
name|scheduler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
operator|.
name|RestartPolicyEnum
name|restartPolicy
parameter_list|,
name|int
name|nSucceededInstances
parameter_list|,
name|int
name|nFailedInstances
parameter_list|,
name|int
name|totalAsk
parameter_list|,
name|int
name|componentId
parameter_list|)
block|{
assert|assert
operator|(
name|nSucceededInstances
operator|+
name|nFailedInstances
operator|)
operator|<=
name|totalAsk
assert|;
name|Component
name|comp
init|=
name|mock
argument_list|(
name|Component
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
name|componentSpec
init|=
name|mock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|componentSpec
operator|.
name|getRestartPolicy
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|restartPolicy
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|comp
operator|.
name|getRestartPolicyHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Component
operator|.
name|getRestartPolicyHandler
argument_list|(
name|restartPolicy
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|componentSpec
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|totalAsk
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|comp
operator|.
name|getComponentSpec
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|componentSpec
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|comp
operator|.
name|getScheduler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentInstance
argument_list|>
name|succeeded
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentInstance
argument_list|>
name|failed
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|put
argument_list|(
literal|"comp"
operator|+
name|componentId
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentInstance
argument_list|>
name|componentInstances
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nSucceededInstances
condition|;
name|i
operator|++
control|)
block|{
name|ComponentInstance
name|componentInstance
init|=
name|createComponentInstance
argument_list|(
name|comp
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|componentInstances
operator|.
name|put
argument_list|(
name|componentInstance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|,
name|componentInstance
argument_list|)
expr_stmt|;
name|succeeded
operator|.
name|put
argument_list|(
name|componentInstance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|,
name|componentInstance
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nFailedInstances
condition|;
name|i
operator|++
control|)
block|{
name|ComponentInstance
name|componentInstance
init|=
name|createComponentInstance
argument_list|(
name|comp
argument_list|,
name|i
operator|+
name|nSucceededInstances
argument_list|)
decl_stmt|;
name|componentInstances
operator|.
name|put
argument_list|(
name|componentInstance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|,
name|componentInstance
argument_list|)
expr_stmt|;
name|failed
operator|.
name|put
argument_list|(
name|componentInstance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|,
name|componentInstance
argument_list|)
expr_stmt|;
block|}
name|int
name|delta
init|=
name|totalAsk
operator|-
name|nFailedInstances
operator|-
name|nSucceededInstances
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|delta
condition|;
name|i
operator|++
control|)
block|{
name|ComponentInstance
name|componentInstance
init|=
name|createComponentInstance
argument_list|(
name|comp
argument_list|,
name|i
operator|+
name|nSucceededInstances
operator|+
name|nFailedInstances
argument_list|)
decl_stmt|;
name|componentInstances
operator|.
name|put
argument_list|(
name|componentInstance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|,
name|componentInstance
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|comp
operator|.
name|getAllComponentInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|componentInstances
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|comp
operator|.
name|getSucceededInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|succeeded
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|comp
operator|.
name|getFailedInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|failed
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|comp
return|;
block|}
DECL|method|createComponent (ServiceScheduler scheduler, org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum restartPolicy, int totalAsk, int componentId)
specifier|private
name|Component
name|createComponent
parameter_list|(
name|ServiceScheduler
name|scheduler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
operator|.
name|RestartPolicyEnum
name|restartPolicy
parameter_list|,
name|int
name|totalAsk
parameter_list|,
name|int
name|componentId
parameter_list|)
block|{
name|Component
name|comp
init|=
name|mock
argument_list|(
name|Component
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
name|componentSpec
init|=
name|mock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|componentSpec
operator|.
name|getRestartPolicy
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|restartPolicy
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|comp
operator|.
name|getRestartPolicyHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Component
operator|.
name|getRestartPolicyHandler
argument_list|(
name|restartPolicy
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|componentSpec
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|totalAsk
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|comp
operator|.
name|getComponentSpec
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|componentSpec
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|comp
operator|.
name|getScheduler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|put
argument_list|(
literal|"comp"
operator|+
name|componentId
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentInstance
argument_list|>
name|componentInstances
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalAsk
condition|;
name|i
operator|++
control|)
block|{
name|ComponentInstance
name|componentInstance
init|=
name|createComponentInstance
argument_list|(
name|comp
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|componentInstances
operator|.
name|put
argument_list|(
name|componentInstance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|,
name|componentInstance
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|comp
operator|.
name|getAllComponentInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|componentInstances
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|comp
return|;
block|}
DECL|method|createComponentInstance (Component component, int instanceId)
specifier|private
name|ComponentInstance
name|createComponentInstance
parameter_list|(
name|Component
name|component
parameter_list|,
name|int
name|instanceId
parameter_list|)
block|{
name|ComponentInstance
name|componentInstance
init|=
name|mock
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|componentInstance
operator|.
name|getComponent
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|componentInstance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"compInstance"
operator|+
name|instanceId
argument_list|)
expr_stmt|;
name|ServiceUtils
operator|.
name|ProcessTerminationHandler
name|terminationHandler
init|=
name|mock
argument_list|(
name|ServiceUtils
operator|.
name|ProcessTerminationHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|component
operator|.
name|getScheduler
argument_list|()
operator|.
name|getTerminationHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|terminationHandler
argument_list|)
expr_stmt|;
return|return
name|componentInstance
return|;
block|}
annotation|@
name|Test
DECL|method|testComponentRestartPolicy ()
specifier|public
name|void
name|testComponentRestartPolicy
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Component
argument_list|>
name|allComponents
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Service
name|mockService
init|=
name|mock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceContext
name|serviceContext
init|=
name|mock
argument_list|(
name|ServiceContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|serviceContext
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockService
argument_list|)
expr_stmt|;
name|ServiceScheduler
name|serviceSchedulerInstance
init|=
operator|new
name|ServiceScheduler
argument_list|(
name|serviceContext
argument_list|)
decl_stmt|;
name|ServiceScheduler
name|serviceScheduler
init|=
name|spy
argument_list|(
name|serviceSchedulerInstance
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|serviceScheduler
operator|.
name|getAllComponents
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|allComponents
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|serviceScheduler
argument_list|)
operator|.
name|setGracefulStop
argument_list|(
name|any
argument_list|(
name|FinalApplicationStatus
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ComponentInstanceEvent
name|componentInstanceEvent
init|=
name|mock
argument_list|(
name|ComponentInstanceEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|"hello"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|componentInstanceEvent
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerStatus
argument_list|)
expr_stmt|;
comment|// Test case1: one component, one instance, restart policy = ALWAYS, exit=0
name|Component
name|comp
init|=
name|createComponent
argument_list|(
name|serviceScheduler
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|ALWAYS
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ComponentInstance
name|componentInstance
init|=
name|comp
operator|.
name|getAllComponentInstances
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|ComponentInstance
operator|.
name|handleComponentInstanceRelaunch
argument_list|(
name|componentInstance
argument_list|,
name|componentInstanceEvent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|markAsSucceeded
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|markAsFailed
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|reInsertPendingInstance
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|serviceScheduler
operator|.
name|getTerminationHandler
argument_list|()
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|terminate
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test case2: one component, one instance, restart policy = ALWAYS, exit=1
name|comp
operator|=
name|createComponent
argument_list|(
name|serviceScheduler
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|ALWAYS
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|componentInstance
operator|=
name|comp
operator|.
name|getAllComponentInstances
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|containerStatus
operator|.
name|setExitStatus
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ComponentInstance
operator|.
name|handleComponentInstanceRelaunch
argument_list|(
name|componentInstance
argument_list|,
name|componentInstanceEvent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|markAsSucceeded
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|markAsFailed
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|reInsertPendingInstance
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|serviceScheduler
operator|.
name|getTerminationHandler
argument_list|()
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|terminate
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test case3: one component, one instance, restart policy = NEVER, exit=0
comment|// Should exit with code=0
name|comp
operator|=
name|createComponent
argument_list|(
name|serviceScheduler
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|NEVER
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|componentInstance
operator|=
name|comp
operator|.
name|getAllComponentInstances
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|containerStatus
operator|.
name|setExitStatus
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentInstance
argument_list|>
name|succeededInstances
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|succeededInstances
operator|.
name|put
argument_list|(
name|componentInstance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|,
name|componentInstance
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|comp
operator|.
name|getSucceededInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|succeededInstances
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|comp
operator|.
name|getNumSucceededInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Long
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ComponentInstance
operator|.
name|handleComponentInstanceRelaunch
argument_list|(
name|componentInstance
argument_list|,
name|componentInstanceEvent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|markAsSucceeded
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|markAsFailed
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|reInsertPendingInstance
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|serviceScheduler
operator|.
name|getTerminationHandler
argument_list|()
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|terminate
argument_list|(
name|eq
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test case4: one component, one instance, restart policy = NEVER, exit=1
comment|// Should exit with code=-1
name|comp
operator|=
name|createComponent
argument_list|(
name|serviceScheduler
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|NEVER
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|componentInstance
operator|=
name|comp
operator|.
name|getAllComponentInstances
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|containerStatus
operator|.
name|setExitStatus
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|comp
operator|.
name|getNumFailedInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Long
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ComponentInstance
operator|.
name|handleComponentInstanceRelaunch
argument_list|(
name|componentInstance
argument_list|,
name|componentInstanceEvent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|markAsSucceeded
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|markAsFailed
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|reInsertPendingInstance
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|serviceScheduler
operator|.
name|getTerminationHandler
argument_list|()
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|terminate
argument_list|(
name|eq
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test case5: one component, one instance, restart policy = ON_FAILURE,
comment|// exit=1
comment|// Should continue run.
name|comp
operator|=
name|createComponent
argument_list|(
name|serviceScheduler
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|ON_FAILURE
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|componentInstance
operator|=
name|comp
operator|.
name|getAllComponentInstances
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|containerStatus
operator|.
name|setExitStatus
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ComponentInstance
operator|.
name|handleComponentInstanceRelaunch
argument_list|(
name|componentInstance
argument_list|,
name|componentInstanceEvent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|markAsSucceeded
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|markAsFailed
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|reInsertPendingInstance
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|serviceScheduler
operator|.
name|getTerminationHandler
argument_list|()
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|terminate
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test case6: one component, 3 instances, restart policy = NEVER, exit=1
comment|// 2 of the instances not completed, it should continue run.
name|comp
operator|=
name|createComponent
argument_list|(
name|serviceScheduler
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|NEVER
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|componentInstance
operator|=
name|comp
operator|.
name|getAllComponentInstances
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|containerStatus
operator|.
name|setExitStatus
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ComponentInstance
operator|.
name|handleComponentInstanceRelaunch
argument_list|(
name|componentInstance
argument_list|,
name|componentInstanceEvent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|markAsSucceeded
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|markAsFailed
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|reInsertPendingInstance
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|serviceScheduler
operator|.
name|getTerminationHandler
argument_list|()
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|terminate
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test case7: one component, 3 instances, restart policy = ON_FAILURE,
comment|// exit=1
comment|// 2 of the instances completed, it should continue run.
name|comp
operator|=
name|createComponent
argument_list|(
name|serviceScheduler
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|ON_FAILURE
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|ComponentInstance
argument_list|>
name|iter
init|=
name|comp
operator|.
name|getAllComponentInstances
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|containerStatus
operator|.
name|setExitStatus
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ComponentInstance
name|commponentInstance
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ComponentInstance
operator|.
name|handleComponentInstanceRelaunch
argument_list|(
name|commponentInstance
argument_list|,
name|componentInstanceEvent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|markAsSucceeded
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|markAsFailed
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|reInsertPendingInstance
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|serviceScheduler
operator|.
name|getTerminationHandler
argument_list|()
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|terminate
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test case8: 2 components, 2 instances for each
comment|// comp2 already finished.
comment|// comp1 has a new instance finish, we should terminate the service
name|comp
operator|=
name|createComponent
argument_list|(
name|serviceScheduler
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|NEVER
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ComponentInstance
argument_list|>
name|component1Instances
init|=
name|comp
operator|.
name|getAllComponentInstances
argument_list|()
decl_stmt|;
name|containerStatus
operator|.
name|setExitStatus
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Component
name|comp2
init|=
name|createComponent
argument_list|(
name|componentInstance
operator|.
name|getComponent
argument_list|()
operator|.
name|getScheduler
argument_list|()
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|NEVER
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|ComponentInstance
argument_list|>
name|component2Instances
init|=
name|comp2
operator|.
name|getAllComponentInstances
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentInstance
argument_list|>
name|failed2Instances
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ComponentInstance
name|component2Instance
range|:
name|component2Instances
control|)
block|{
name|failed2Instances
operator|.
name|put
argument_list|(
name|component2Instance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|,
name|component2Instance
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|component2Instance
operator|.
name|getComponent
argument_list|()
operator|.
name|getFailedInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|failed2Instances
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|component2Instance
operator|.
name|getComponent
argument_list|()
operator|.
name|getNumFailedInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Long
argument_list|(
name|failed2Instances
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ComponentInstance
operator|.
name|handleComponentInstanceRelaunch
argument_list|(
name|component2Instance
argument_list|,
name|componentInstanceEvent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentInstance
argument_list|>
name|failed1Instances
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// 2nd component, already finished.
for|for
control|(
name|ComponentInstance
name|component1Instance
range|:
name|component1Instances
control|)
block|{
name|failed1Instances
operator|.
name|put
argument_list|(
name|component1Instance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|,
name|component1Instance
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|component1Instance
operator|.
name|getComponent
argument_list|()
operator|.
name|getFailedInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|failed1Instances
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|component1Instance
operator|.
name|getComponent
argument_list|()
operator|.
name|getNumFailedInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Long
argument_list|(
name|failed1Instances
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ComponentInstance
operator|.
name|handleComponentInstanceRelaunch
argument_list|(
name|component1Instance
argument_list|,
name|componentInstanceEvent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|comp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|markAsSucceeded
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|markAsFailed
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|reInsertPendingInstance
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|serviceScheduler
operator|.
name|getTerminationHandler
argument_list|()
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|terminate
argument_list|(
name|eq
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test case9: 2 components, 2 instances for each
comment|// comp2 already finished.
comment|// comp1 has a new instance finish, we should terminate the service
comment|// All instance finish with 0, service should exit with 0 as well.
name|containerStatus
operator|.
name|setExitStatus
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|comp
operator|=
name|createComponent
argument_list|(
name|serviceScheduler
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|ON_FAILURE
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|component1Instances
operator|=
name|comp
operator|.
name|getAllComponentInstances
argument_list|()
expr_stmt|;
name|comp2
operator|=
name|createComponent
argument_list|(
name|componentInstance
operator|.
name|getComponent
argument_list|()
operator|.
name|getScheduler
argument_list|()
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|ON_FAILURE
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|component2Instances
operator|=
name|comp2
operator|.
name|getAllComponentInstances
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentInstance
argument_list|>
name|succeeded2Instances
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ComponentInstance
name|component2Instance
range|:
name|component2Instances
control|)
block|{
name|succeeded2Instances
operator|.
name|put
argument_list|(
name|component2Instance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|,
name|component2Instance
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|component2Instance
operator|.
name|getComponent
argument_list|()
operator|.
name|getSucceededInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|succeeded2Instances
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|component2Instance
operator|.
name|getComponent
argument_list|()
operator|.
name|getNumSucceededInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Long
argument_list|(
name|succeeded2Instances
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ComponentInstance
operator|.
name|handleComponentInstanceRelaunch
argument_list|(
name|component2Instance
argument_list|,
name|componentInstanceEvent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentInstance
argument_list|>
name|succeeded1Instances
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// 2nd component, already finished.
for|for
control|(
name|ComponentInstance
name|component1Instance
range|:
name|component1Instances
control|)
block|{
name|succeeded1Instances
operator|.
name|put
argument_list|(
name|component1Instance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|,
name|component1Instance
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|component1Instance
operator|.
name|getComponent
argument_list|()
operator|.
name|getSucceededInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|succeeded1Instances
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|component1Instance
operator|.
name|getComponent
argument_list|()
operator|.
name|getNumSucceededInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Long
argument_list|(
name|succeeded1Instances
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ComponentInstance
operator|.
name|handleComponentInstanceRelaunch
argument_list|(
name|component1Instance
argument_list|,
name|componentInstanceEvent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|comp
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|markAsSucceeded
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|markAsFailed
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|componentInstance
operator|.
name|getComponent
argument_list|()
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|reInsertPendingInstance
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|serviceScheduler
operator|.
name|getTerminationHandler
argument_list|()
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|terminate
argument_list|(
name|eq
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test case10: 2 components, 2 instances for each
comment|// comp2 hasn't finished
comment|// comp1 finished.
comment|// Service should continue run.
name|comp
operator|=
name|createComponent
argument_list|(
name|serviceScheduler
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|NEVER
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|component1Instances
operator|=
name|comp
operator|.
name|getAllComponentInstances
argument_list|()
expr_stmt|;
name|comp2
operator|=
name|createComponent
argument_list|(
name|componentInstance
operator|.
name|getComponent
argument_list|()
operator|.
name|getScheduler
argument_list|()
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|NEVER
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|component2Instances
operator|=
name|comp2
operator|.
name|getAllComponentInstances
argument_list|()
expr_stmt|;
for|for
control|(
name|ComponentInstance
name|component2Instance
range|:
name|component2Instances
control|)
block|{
name|ComponentInstance
operator|.
name|handleComponentInstanceRelaunch
argument_list|(
name|component2Instance
argument_list|,
name|componentInstanceEvent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|succeeded1Instances
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
comment|// 2nd component, already finished.
for|for
control|(
name|ComponentInstance
name|component1Instance
range|:
name|component1Instances
control|)
block|{
name|succeeded1Instances
operator|.
name|put
argument_list|(
name|component1Instance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|,
name|component1Instance
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|component1Instance
operator|.
name|getComponent
argument_list|()
operator|.
name|getSucceededInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|succeeded1Instances
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|ComponentInstance
operator|.
name|handleComponentInstanceRelaunch
argument_list|(
name|component1Instance
argument_list|,
name|componentInstanceEvent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|comp
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|markAsSucceeded
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|comp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|markAsFailed
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|componentInstance
operator|.
name|getComponent
argument_list|()
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|reInsertPendingInstance
argument_list|(
name|any
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|serviceScheduler
operator|.
name|getTerminationHandler
argument_list|()
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|terminate
argument_list|(
name|eq
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

