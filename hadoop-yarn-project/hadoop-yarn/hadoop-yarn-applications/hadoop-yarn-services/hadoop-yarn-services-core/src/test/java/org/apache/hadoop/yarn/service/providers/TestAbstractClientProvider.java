begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.providers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|providers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ConfigFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|AbstractClientProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test the AbstractClientProvider shared methods.  */
end_comment

begin_class
DECL|class|TestAbstractClientProvider
specifier|public
class|class
name|TestAbstractClientProvider
block|{
DECL|field|EXCEPTION_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|EXCEPTION_PREFIX
init|=
literal|"Should have thrown "
operator|+
literal|"exception: "
decl_stmt|;
DECL|field|NO_EXCEPTION_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|NO_EXCEPTION_PREFIX
init|=
literal|"Should not have thrown "
operator|+
literal|"exception: "
decl_stmt|;
DECL|class|ClientProvider
specifier|private
specifier|static
class|class
name|ClientProvider
extends|extends
name|AbstractClientProvider
block|{
annotation|@
name|Override
DECL|method|validateArtifact (Artifact artifact, String compName, FileSystem fileSystem)
specifier|public
name|void
name|validateArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|String
name|compName
parameter_list|,
name|FileSystem
name|fileSystem
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|validateConfigFile (ConfigFile configFile, String compName, FileSystem fileSystem)
specifier|protected
name|void
name|validateConfigFile
parameter_list|(
name|ConfigFile
name|configFile
parameter_list|,
name|String
name|compName
parameter_list|,
name|FileSystem
name|fileSystem
parameter_list|)
throws|throws
name|IOException
block|{     }
block|}
annotation|@
name|Test
DECL|method|testConfigFiles ()
specifier|public
name|void
name|testConfigFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|ClientProvider
name|clientProvider
init|=
operator|new
name|ClientProvider
argument_list|()
decl_stmt|;
name|FileSystem
name|mockFs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileStatus
name|mockFileStatus
init|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|exists
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|compName
init|=
literal|"sleeper"
decl_stmt|;
name|ConfigFile
name|configFile
init|=
operator|new
name|ConfigFile
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|configFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|configFiles
operator|.
name|add
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
try|try
block|{
name|clientProvider
operator|.
name|validateConfigFiles
argument_list|(
name|configFiles
argument_list|,
name|compName
argument_list|,
name|mockFs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"null file type"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
name|configFile
operator|.
name|setType
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|TEMPLATE
argument_list|)
expr_stmt|;
try|try
block|{
name|clientProvider
operator|.
name|validateConfigFiles
argument_list|(
name|configFiles
argument_list|,
name|compName
argument_list|,
name|mockFs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"empty src_file for type template"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
name|configFile
operator|.
name|setSrcFile
argument_list|(
literal|"srcfile"
argument_list|)
expr_stmt|;
try|try
block|{
name|clientProvider
operator|.
name|validateConfigFiles
argument_list|(
name|configFiles
argument_list|,
name|compName
argument_list|,
name|mockFs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"empty dest file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
name|configFile
operator|.
name|setDestFile
argument_list|(
literal|"destfile"
argument_list|)
expr_stmt|;
try|try
block|{
name|clientProvider
operator|.
name|validateConfigFiles
argument_list|(
name|configFiles
argument_list|,
name|compName
argument_list|,
name|mockFs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|NO_EXCEPTION_PREFIX
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|configFile
operator|=
operator|new
name|ConfigFile
argument_list|()
expr_stmt|;
name|configFile
operator|.
name|setType
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|JSON
argument_list|)
expr_stmt|;
name|configFile
operator|.
name|setSrcFile
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|configFile
operator|.
name|setDestFile
argument_list|(
literal|"path/destfile2"
argument_list|)
expr_stmt|;
name|configFiles
operator|.
name|add
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
try|try
block|{
name|clientProvider
operator|.
name|validateConfigFiles
argument_list|(
name|configFiles
argument_list|,
name|compName
argument_list|,
name|mockFs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"dest file with multiple path elements"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
name|configFile
operator|.
name|setDestFile
argument_list|(
literal|"/path/destfile2"
argument_list|)
expr_stmt|;
try|try
block|{
name|clientProvider
operator|.
name|validateConfigFiles
argument_list|(
name|configFiles
argument_list|,
name|compName
argument_list|,
name|mockFs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|NO_EXCEPTION_PREFIX
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|configFile
operator|.
name|setDestFile
argument_list|(
literal|"destfile"
argument_list|)
expr_stmt|;
try|try
block|{
name|clientProvider
operator|.
name|validateConfigFiles
argument_list|(
name|configFiles
argument_list|,
name|compName
argument_list|,
name|mockFs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"duplicate dest file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
name|configFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|configFile
operator|=
operator|new
name|ConfigFile
argument_list|()
expr_stmt|;
name|configFile
operator|.
name|setType
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|STATIC
argument_list|)
expr_stmt|;
name|configFile
operator|.
name|setSrcFile
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|configFile
operator|.
name|setDestFile
argument_list|(
literal|"path/destfile3"
argument_list|)
expr_stmt|;
name|configFiles
operator|.
name|add
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
try|try
block|{
name|clientProvider
operator|.
name|validateConfigFiles
argument_list|(
name|configFiles
argument_list|,
name|compName
argument_list|,
name|mockFs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"dest file with multiple path elements"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
name|configFile
operator|.
name|setDestFile
argument_list|(
literal|"/path/destfile3"
argument_list|)
expr_stmt|;
try|try
block|{
name|clientProvider
operator|.
name|validateConfigFiles
argument_list|(
name|configFiles
argument_list|,
name|compName
argument_list|,
name|mockFs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"src file should be specified"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
comment|//should succeed
name|configFile
operator|.
name|setSrcFile
argument_list|(
literal|"srcFile"
argument_list|)
expr_stmt|;
name|configFile
operator|.
name|setDestFile
argument_list|(
literal|"destfile3"
argument_list|)
expr_stmt|;
name|clientProvider
operator|.
name|validateConfigFiles
argument_list|(
name|configFiles
argument_list|,
name|compName
argument_list|,
name|mockFs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFileStatus
operator|.
name|isDirectory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"srcFile"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockFileStatus
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockFileStatus
argument_list|)
expr_stmt|;
name|configFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|configFile
operator|=
operator|new
name|ConfigFile
argument_list|()
expr_stmt|;
name|configFile
operator|.
name|setType
argument_list|(
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|STATIC
argument_list|)
expr_stmt|;
name|configFile
operator|.
name|setSrcFile
argument_list|(
literal|"srcFile"
argument_list|)
expr_stmt|;
name|configFile
operator|.
name|setDestFile
argument_list|(
literal|"destfile3"
argument_list|)
expr_stmt|;
name|configFiles
operator|.
name|add
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
try|try
block|{
name|clientProvider
operator|.
name|validateConfigFiles
argument_list|(
name|configFiles
argument_list|,
name|compName
argument_list|,
name|mockFs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|EXCEPTION_PREFIX
operator|+
literal|"src file is a directory"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

