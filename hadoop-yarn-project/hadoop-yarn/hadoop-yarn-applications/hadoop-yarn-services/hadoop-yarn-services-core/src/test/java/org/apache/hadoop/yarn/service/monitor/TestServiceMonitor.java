begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.monitor
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|monitor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|TestingCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|MockServiceAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_QUORUM
import|;
end_import

begin_class
DECL|class|TestServiceMonitor
specifier|public
class|class
name|TestServiceMonitor
extends|extends
name|ServiceTestUtils
block|{
DECL|field|basedir
specifier|private
name|File
name|basedir
decl_stmt|;
DECL|field|conf
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
DECL|field|zkCluster
name|TestingCluster
name|zkCluster
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|basedir
operator|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
literal|"apps"
argument_list|)
expr_stmt|;
if|if
condition|(
name|basedir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|basedir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setLong
argument_list|(
name|YarnServiceConf
operator|.
name|READINESS_CHECK_INTERVAL
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|zkCluster
operator|=
operator|new
name|TestingCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|zkCluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_REGISTRY_ZK_QUORUM
argument_list|,
name|zkCluster
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ZK cluster: "
operator|+
name|zkCluster
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|basedir
operator|!=
literal|null
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|zkCluster
operator|!=
literal|null
condition|)
block|{
name|zkCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Create compa with 1 container
comment|// Create compb with 1 container
comment|// Verify compb dependency satisfied
comment|// Increase compa to 2 containers
comment|// Verify compb dependency becomes unsatisfied.
annotation|@
name|Test
DECL|method|testComponentDependency ()
specifier|public
name|void
name|testComponentDependency
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|123456
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Service
name|exampleApp
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|exampleApp
operator|.
name|setVersion
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|setId
argument_list|(
name|applicationId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|setName
argument_list|(
literal|"testComponentDependency"
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|createComponent
argument_list|(
literal|"compa"
argument_list|,
literal|1
argument_list|,
literal|"sleep 1000"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Let compb depends on compa;
name|Component
name|compb
init|=
name|createComponent
argument_list|(
literal|"compb"
argument_list|,
literal|1
argument_list|,
literal|"sleep 1000"
argument_list|,
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|ON_FAILURE
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"compa"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Let compb depends on compb;
name|Component
name|compc
init|=
name|createComponent
argument_list|(
literal|"compc"
argument_list|,
literal|1
argument_list|,
literal|"sleep 1000"
argument_list|,
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|NEVER
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"compb"
argument_list|)
argument_list|)
decl_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|compb
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|compc
argument_list|)
expr_stmt|;
name|MockServiceAM
name|am
init|=
operator|new
name|MockServiceAM
argument_list|(
name|exampleApp
argument_list|)
decl_stmt|;
name|am
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|am
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// compa ready
name|Assert
operator|.
name|assertTrue
argument_list|(
name|am
operator|.
name|getComponent
argument_list|(
literal|"compa"
argument_list|)
operator|.
name|areDependenciesReady
argument_list|()
argument_list|)
expr_stmt|;
comment|//compb not ready
name|Assert
operator|.
name|assertFalse
argument_list|(
name|am
operator|.
name|getComponent
argument_list|(
literal|"compb"
argument_list|)
operator|.
name|areDependenciesReady
argument_list|()
argument_list|)
expr_stmt|;
comment|// feed 1 container to compa,
name|am
operator|.
name|feedContainerToComp
argument_list|(
name|exampleApp
argument_list|,
literal|1
argument_list|,
literal|"compa"
argument_list|)
expr_stmt|;
comment|// waiting for compb's dependencies are satisfied
name|am
operator|.
name|waitForDependenciesSatisfied
argument_list|(
literal|"compb"
argument_list|)
expr_stmt|;
comment|// feed 1 container to compb,
name|am
operator|.
name|feedContainerToComp
argument_list|(
name|exampleApp
argument_list|,
literal|2
argument_list|,
literal|"compb"
argument_list|)
expr_stmt|;
comment|// waiting for compc's dependencies are satisfied
name|am
operator|.
name|waitForDependenciesSatisfied
argument_list|(
literal|"compc"
argument_list|)
expr_stmt|;
comment|// feed 1 container to compb
name|am
operator|.
name|feedContainerToComp
argument_list|(
name|exampleApp
argument_list|,
literal|2
argument_list|,
literal|"compb"
argument_list|)
expr_stmt|;
name|am
operator|.
name|flexComponent
argument_list|(
literal|"compa"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|am
operator|.
name|waitForNumDesiredContainers
argument_list|(
literal|"compa"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// compb dependencies not satisfied again.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|am
operator|.
name|getComponent
argument_list|(
literal|"compb"
argument_list|)
operator|.
name|areDependenciesReady
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

