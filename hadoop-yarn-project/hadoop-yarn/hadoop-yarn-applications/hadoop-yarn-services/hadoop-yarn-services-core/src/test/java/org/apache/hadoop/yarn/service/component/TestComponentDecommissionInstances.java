begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.component
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
operator|.
name|ServiceClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_comment
comment|/**  * Test decommissioning component instances.  */
end_comment

begin_class
DECL|class|TestComponentDecommissionInstances
specifier|public
class|class
name|TestComponentDecommissionInstances
extends|extends
name|ServiceTestUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestComponentDecommissionInstances
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|APP_NAME
specifier|private
specifier|static
specifier|final
name|String
name|APP_NAME
init|=
literal|"test-decommission"
decl_stmt|;
DECL|field|COMPA
specifier|private
specifier|static
specifier|final
name|String
name|COMPA
init|=
literal|"compa"
decl_stmt|;
annotation|@
name|Rule
DECL|field|tmpFolder
specifier|public
name|TemporaryFolder
name|tmpFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|tmpYarnDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
literal|"tmp"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|tmpYarnDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDecommissionInstances ()
specifier|public
name|void
name|testDecommissionInstances
parameter_list|()
throws|throws
name|Exception
block|{
name|setupInternal
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ServiceClient
name|client
init|=
name|createClient
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|exampleApp
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|exampleApp
operator|.
name|setName
argument_list|(
name|APP_NAME
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|setVersion
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|Component
name|comp
init|=
name|createComponent
argument_list|(
name|COMPA
argument_list|,
literal|6L
argument_list|,
literal|"sleep 1000"
argument_list|)
decl_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionCreate
argument_list|(
name|exampleApp
argument_list|)
expr_stmt|;
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
name|checkInstances
argument_list|(
name|client
argument_list|,
name|COMPA
operator|+
literal|"-0"
argument_list|,
name|COMPA
operator|+
literal|"-1"
argument_list|,
name|COMPA
operator|+
literal|"-2"
argument_list|,
name|COMPA
operator|+
literal|"-3"
argument_list|,
name|COMPA
operator|+
literal|"-4"
argument_list|,
name|COMPA
operator|+
literal|"-5"
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionDecommissionInstances
argument_list|(
name|APP_NAME
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|COMPA
operator|+
literal|"-1"
argument_list|,
name|COMPA
operator|+
literal|"-5"
argument_list|)
argument_list|)
expr_stmt|;
name|waitForNumInstances
argument_list|(
name|client
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkInstances
argument_list|(
name|client
argument_list|,
name|COMPA
operator|+
literal|"-0"
argument_list|,
name|COMPA
operator|+
literal|"-2"
argument_list|,
name|COMPA
operator|+
literal|"-3"
argument_list|,
name|COMPA
operator|+
literal|"-4"
argument_list|)
expr_stmt|;
comment|// Stop and start service
name|client
operator|.
name|actionStop
argument_list|(
name|APP_NAME
argument_list|)
expr_stmt|;
name|waitForServiceToBeInState
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|,
name|ServiceState
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionStart
argument_list|(
name|APP_NAME
argument_list|)
expr_stmt|;
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
name|checkInstances
argument_list|(
name|client
argument_list|,
name|COMPA
operator|+
literal|"-0"
argument_list|,
name|COMPA
operator|+
literal|"-2"
argument_list|,
name|COMPA
operator|+
literal|"-3"
argument_list|,
name|COMPA
operator|+
literal|"-4"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|compCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|compCounts
operator|.
name|put
argument_list|(
name|COMPA
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionFlex
argument_list|(
name|APP_NAME
argument_list|,
name|compCounts
argument_list|)
expr_stmt|;
name|waitForNumInstances
argument_list|(
name|client
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|checkInstances
argument_list|(
name|client
argument_list|,
name|COMPA
operator|+
literal|"-0"
argument_list|,
name|COMPA
operator|+
literal|"-2"
argument_list|,
name|COMPA
operator|+
literal|"-3"
argument_list|,
name|COMPA
operator|+
literal|"-4"
argument_list|,
name|COMPA
operator|+
literal|"-6"
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionDecommissionInstances
argument_list|(
name|APP_NAME
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|COMPA
operator|+
literal|"-0."
operator|+
name|APP_NAME
operator|+
literal|"."
operator|+
name|RegistryUtils
operator|.
name|currentUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|waitForNumInstances
argument_list|(
name|client
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkInstances
argument_list|(
name|client
argument_list|,
name|COMPA
operator|+
literal|"-2"
argument_list|,
name|COMPA
operator|+
literal|"-3"
argument_list|,
name|COMPA
operator|+
literal|"-4"
argument_list|,
name|COMPA
operator|+
literal|"-6"
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForNumInstances (ServiceClient client, int expectedInstances)
specifier|private
specifier|static
name|void
name|waitForNumInstances
parameter_list|(
name|ServiceClient
name|client
parameter_list|,
name|int
name|expectedInstances
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Service
name|retrievedApp
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|APP_NAME
argument_list|)
decl_stmt|;
return|return
name|retrievedApp
operator|.
name|getComponent
argument_list|(
name|COMPA
argument_list|)
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|expectedInstances
operator|&&
name|retrievedApp
operator|.
name|getState
argument_list|()
operator|==
name|ServiceState
operator|.
name|STABLE
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|2000
argument_list|,
literal|200000
argument_list|)
expr_stmt|;
block|}
DECL|method|checkInstances (ServiceClient client, String... instances)
specifier|private
specifier|static
name|void
name|checkInstances
parameter_list|(
name|ServiceClient
name|client
parameter_list|,
name|String
modifier|...
name|instances
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|Service
name|service
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|APP_NAME
argument_list|)
decl_stmt|;
name|Component
name|component
init|=
name|service
operator|.
name|getComponent
argument_list|(
name|COMPA
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Service state should be STABLE"
argument_list|,
name|ServiceState
operator|.
name|STABLE
argument_list|,
name|service
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|instances
operator|.
name|length
operator|+
literal|" containers are expected to be "
operator|+
literal|"running"
argument_list|,
name|instances
operator|.
name|length
argument_list|,
name|component
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingInstances
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|cont
range|:
name|component
operator|.
name|getContainers
argument_list|()
control|)
block|{
name|existingInstances
operator|.
name|add
argument_list|(
name|cont
operator|.
name|getComponentInstanceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|instances
operator|.
name|length
operator|+
literal|" instances are expected to be "
operator|+
literal|"running"
argument_list|,
name|instances
operator|.
name|length
argument_list|,
name|existingInstances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|instance
range|:
name|instances
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected instance did not exist "
operator|+
name|instance
argument_list|,
name|existingInstances
operator|.
name|contains
argument_list|(
name|instance
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

