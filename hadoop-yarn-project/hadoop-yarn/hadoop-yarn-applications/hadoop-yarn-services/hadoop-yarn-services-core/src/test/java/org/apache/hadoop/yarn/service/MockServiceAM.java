begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|yarn
operator|.
name|PersistencePolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|yarn
operator|.
name|YarnRegistryAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|NMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|async
operator|.
name|AMRMClientAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|async
operator|.
name|NMClientAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
operator|.
name|AMRMClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ClientAMProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstanceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|BadClusterStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|registry
operator|.
name|YarnRegistryViewForProviders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|MockServiceAM
specifier|public
class|class
name|MockServiceAM
extends|extends
name|ServiceMaster
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MockServiceAM
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|service
name|Service
name|service
decl_stmt|;
comment|// The list of containers fed by tests to be returned on
comment|// AMRMClientCallBackHandler#onContainersAllocated
DECL|field|feedContainers
specifier|final
name|List
argument_list|<
name|Container
argument_list|>
name|feedContainers
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|failedContainers
specifier|final
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|failedContainers
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|recoveredContainers
specifier|private
specifier|final
name|List
argument_list|<
name|Container
argument_list|>
name|recoveredContainers
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|registryComponents
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ServiceRecord
argument_list|>
name|registryComponents
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|containerStatuses
specifier|private
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|releasedContainers
specifier|private
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|releasedContainers
init|=
name|ConcurrentHashMap
operator|.
name|newKeySet
argument_list|()
decl_stmt|;
DECL|field|amCreds
specifier|private
name|Credentials
name|amCreds
decl_stmt|;
DECL|method|MockServiceAM (Service service)
specifier|public
name|MockServiceAM
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|super
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
block|}
DECL|method|MockServiceAM (Service service, Credentials amCreds)
specifier|public
name|MockServiceAM
parameter_list|(
name|Service
name|service
parameter_list|,
name|Credentials
name|amCreds
parameter_list|)
block|{
name|super
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
name|this
operator|.
name|amCreds
operator|=
name|amCreds
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAMContainerId ()
specifier|protected
name|ContainerId
name|getAMContainerId
parameter_list|()
throws|throws
name|BadClusterStateException
block|{
return|return
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|service
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAppDir ()
specifier|protected
name|Path
name|getAppDir
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
literal|"target"
argument_list|,
literal|"apps"
argument_list|)
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Service path: {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
annotation|@
name|Override
DECL|method|createServiceScheduler (ServiceContext context)
specifier|protected
name|ServiceScheduler
name|createServiceScheduler
parameter_list|(
name|ServiceContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
return|return
operator|new
name|ServiceScheduler
argument_list|(
name|context
argument_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"SuspiciousMethodCalls"
argument_list|)
annotation|@
name|Override
specifier|protected
name|YarnRegistryViewForProviders
name|createYarnRegistryOperations
parameter_list|(
name|ServiceContext
name|context
parameter_list|,
name|RegistryOperations
name|registryClient
parameter_list|)
block|{
name|YarnRegistryViewForProviders
name|yarnRegistryView
init|=
name|mock
argument_list|(
name|YarnRegistryViewForProviders
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|registryComponents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|when
argument_list|(
name|yarnRegistryView
operator|.
name|listComponents
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|registryComponents
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|yarnRegistryView
operator|.
name|getComponent
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
name|registryComponents
operator|.
name|get
argument_list|(
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|yarnRegistryView
return|;
block|}
annotation|@
name|Override
specifier|protected
name|AMRMClientAsync
argument_list|<
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|>
name|createAMRMClient
parameter_list|()
block|{
name|AMRMClientImpl
name|client1
init|=
operator|new
name|AMRMClientImpl
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AllocateResponse
name|allocate
parameter_list|(
name|float
name|progressIndicator
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AllocateResponse
operator|.
name|AllocateResponseBuilder
name|builder
init|=
name|AllocateResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
comment|// add new containers if any
synchronized|synchronized
init|(
name|feedContainers
init|)
block|{
if|if
condition|(
name|feedContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Allocating........ no containers"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The AMRMClient will return containers for compoenent that are
comment|// at FLEXING state
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Container
argument_list|>
name|itor
init|=
name|feedContainers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Container
name|c
init|=
name|itor
operator|.
name|next
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|Component
name|component
init|=
name|componentsById
operator|.
name|get
argument_list|(
name|c
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|.
name|getState
argument_list|()
operator|==
name|ComponentState
operator|.
name|FLEXING
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Allocated container {} "
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|allocatedContainers
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|itor
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|allocatedContainers
argument_list|(
name|allocatedContainers
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add recovered containers if any
synchronized|synchronized
init|(
name|recoveredContainers
init|)
block|{
if|if
condition|(
operator|!
name|recoveredContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Container
argument_list|>
name|containersFromPrevAttempt
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|containersFromPrevAttempt
operator|.
name|addAll
argument_list|(
name|recoveredContainers
argument_list|)
expr_stmt|;
name|recoveredContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|builder
operator|.
name|containersFromPreviousAttempt
argument_list|(
name|containersFromPrevAttempt
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add failed containers if any
synchronized|synchronized
init|(
name|failedContainers
init|)
block|{
if|if
condition|(
operator|!
name|failedContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|failed
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|failedContainers
argument_list|)
decl_stmt|;
name|failedContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|builder
operator|.
name|completedContainersStatuses
argument_list|(
name|failed
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegisterApplicationMasterResponse
name|registerApplicationMaster
parameter_list|(
name|String
name|appHostName
parameter_list|,
name|int
name|appHostPort
parameter_list|,
name|String
name|appTrackingUrl
parameter_list|,
name|Map
name|placementConstraintsMap
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|this
operator|.
name|registerApplicationMaster
argument_list|(
name|appHostName
argument_list|,
name|appHostPort
argument_list|,
name|appTrackingUrl
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegisterApplicationMasterResponse
name|registerApplicationMaster
parameter_list|(
name|String
name|appHostName
parameter_list|,
name|int
name|appHostPort
parameter_list|,
name|String
name|appTrackingUrl
parameter_list|)
block|{
name|RegisterApplicationMasterResponse
name|response
init|=
name|mock
argument_list|(
name|RegisterApplicationMasterResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|response
operator|.
name|getResourceTypes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ResourceUtils
operator|.
name|getResourcesTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|releaseAssignedContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|releasedContainers
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|super
operator|.
name|releaseAssignedContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unregisterApplicationMaster
parameter_list|(
name|FinalApplicationStatus
name|appStatus
parameter_list|,
name|String
name|appMessage
parameter_list|,
name|String
name|appTrackingUrl
parameter_list|)
block|{
comment|// DO nothing
block|}
block|}
decl_stmt|;
name|AMRMClientAsync
argument_list|<
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|>
name|amrmClientAsync
init|=
name|AMRMClientAsync
operator|.
name|createAMRMClientAsync
argument_list|(
name|client1
argument_list|,
literal|1000
argument_list|,
name|this
operator|.
expr|new
name|AMRMClientCallback
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|amrmClientAsync
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"SuspiciousMethodCalls"
argument_list|)
annotation|@
name|Override
specifier|public
name|NMClientAsync
name|createNMClient
parameter_list|()
block|{
name|NMClientAsync
name|nmClientAsync
init|=
name|super
operator|.
name|createNMClient
argument_list|()
decl_stmt|;
name|NMClient
name|nmClient
init|=
name|mock
argument_list|(
name|NMClient
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|when
argument_list|(
name|nmClient
operator|.
name|getContainerStatus
argument_list|(
name|anyObject
argument_list|()
argument_list|,
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
name|containerStatuses
operator|.
name|get
argument_list|(
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|nmClientAsync
operator|.
name|setClient
argument_list|(
name|nmClient
argument_list|)
expr_stmt|;
return|return
name|nmClientAsync
return|;
block|}
block|}
return|;
block|}
DECL|method|loadApplicationJson (ServiceContext context, SliderFileSystem fs)
annotation|@
name|Override
specifier|protected
name|void
name|loadApplicationJson
parameter_list|(
name|ServiceContext
name|context
parameter_list|,
name|SliderFileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|context
operator|.
name|service
operator|=
name|service
expr_stmt|;
block|}
DECL|method|feedRegistryComponent (ContainerId containerId, String compName, String compInstName)
specifier|public
name|void
name|feedRegistryComponent
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|String
name|compName
parameter_list|,
name|String
name|compInstName
parameter_list|)
block|{
name|ServiceRecord
name|record
init|=
operator|new
name|ServiceRecord
argument_list|()
decl_stmt|;
name|record
operator|.
name|set
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_ID
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|record
operator|.
name|description
operator|=
name|compInstName
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_PERSISTENCE
argument_list|,
name|PersistencePolicies
operator|.
name|CONTAINER
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_IP
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_HOSTNAME
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_COMPONENT
argument_list|,
name|compName
argument_list|)
expr_stmt|;
name|registryComponents
operator|.
name|put
argument_list|(
name|RegistryPathUtils
operator|.
name|encodeYarnID
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
comment|/**    * Simulates a recovered container that is sent to the AM in the heartbeat    * response.    *    * @param containerId The ID for the container    * @param compName    The component to which the recovered container is fed.    */
DECL|method|feedRecoveredContainer (ContainerId containerId, String compName)
specifier|public
name|void
name|feedRecoveredContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|String
name|compName
parameter_list|)
block|{
name|Container
name|container
init|=
name|createContainer
argument_list|(
name|containerId
argument_list|,
name|compName
argument_list|)
decl_stmt|;
name|recoveredContainers
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|addContainerStatus
argument_list|(
name|container
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a mock container and container ID and feeds to the component.    * @param service The service for the component    * @param id The id for the container    * @param compName The component to which the container is fed    * @return    */
DECL|method|feedContainerToComp (Service service, int id, String compName)
specifier|public
name|Container
name|feedContainerToComp
parameter_list|(
name|Service
name|service
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|compName
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|createContainerId
argument_list|(
name|id
argument_list|)
decl_stmt|;
return|return
name|feedContainerToComp
argument_list|(
name|service
argument_list|,
name|containerId
argument_list|,
name|compName
argument_list|)
return|;
block|}
comment|/**    * Feeds the container to the component.    * @param service The service for the component    * @param containerId container id    * @param compName The component to which the container is fed    * @return    */
DECL|method|feedContainerToComp (Service service, ContainerId containerId, String compName)
specifier|public
name|Container
name|feedContainerToComp
parameter_list|(
name|Service
name|service
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|String
name|compName
parameter_list|)
block|{
name|Container
name|container
init|=
name|createContainer
argument_list|(
name|containerId
argument_list|,
name|compName
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|feedContainers
init|)
block|{
name|feedContainers
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
name|addContainerStatus
argument_list|(
name|container
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
DECL|method|feedFailedContainerToComp (Service service, int id, String compName)
specifier|public
name|void
name|feedFailedContainerToComp
parameter_list|(
name|Service
name|service
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|compName
parameter_list|)
block|{
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|service
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|ContainerStatus
name|status
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ContainerStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|status
operator|.
name|setContainerId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|failedContainers
init|)
block|{
name|failedContainers
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateContainerStatus (Service service, int id, String compName, String host)
specifier|public
name|Container
name|updateContainerStatus
parameter_list|(
name|Service
name|service
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|compName
parameter_list|,
name|String
name|host
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|createContainerId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|createContainer
argument_list|(
name|containerId
argument_list|,
name|compName
argument_list|)
decl_stmt|;
name|addContainerStatus
argument_list|(
name|container
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
DECL|method|createContainerId (int id)
specifier|public
name|ContainerId
name|createContainerId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|service
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|createContainer (ContainerId containerId, String compName)
specifier|private
name|Container
name|createContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|String
name|compName
parameter_list|)
block|{
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|Container
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|,
literal|"localhost"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|100
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|allocateId
init|=
name|context
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|get
argument_list|(
name|compName
argument_list|)
operator|.
name|getAllocateId
argument_list|()
decl_stmt|;
name|container
operator|.
name|setAllocationRequestId
argument_list|(
name|allocateId
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
DECL|method|flexComponent (String compName, long numberOfContainers)
specifier|public
name|void
name|flexComponent
parameter_list|(
name|String
name|compName
parameter_list|,
name|long
name|numberOfContainers
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientAMProtocol
operator|.
name|ComponentCountProto
name|componentCountProto
init|=
name|ClientAMProtocol
operator|.
name|ComponentCountProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|compName
argument_list|)
operator|.
name|setNumberOfContainers
argument_list|(
name|numberOfContainers
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClientAMProtocol
operator|.
name|FlexComponentsRequestProto
name|requestProto
init|=
name|ClientAMProtocol
operator|.
name|FlexComponentsRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addComponents
argument_list|(
name|componentCountProto
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|context
operator|.
name|clientAMService
operator|.
name|flexComponents
argument_list|(
name|requestProto
argument_list|)
expr_stmt|;
block|}
DECL|method|getComponent (String compName)
specifier|public
name|Component
name|getComponent
parameter_list|(
name|String
name|compName
parameter_list|)
block|{
return|return
name|context
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|get
argument_list|(
name|compName
argument_list|)
return|;
block|}
DECL|method|waitForDependenciesSatisfied (String compName)
specifier|public
name|void
name|waitForDependenciesSatisfied
parameter_list|(
name|String
name|compName
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|context
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|get
argument_list|(
name|compName
argument_list|)
operator|.
name|areDependenciesReady
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForNumDesiredContainers (String compName, int numDesiredContainers)
specifier|public
name|void
name|waitForNumDesiredContainers
parameter_list|(
name|String
name|compName
parameter_list|,
name|int
name|numDesiredContainers
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|context
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|get
argument_list|(
name|compName
argument_list|)
operator|.
name|getNumDesiredInstances
argument_list|()
operator|==
name|numDesiredContainers
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
block|}
DECL|method|getCompInstance (String compName, String instanceName)
specifier|public
name|ComponentInstance
name|getCompInstance
parameter_list|(
name|String
name|compName
parameter_list|,
name|String
name|instanceName
parameter_list|)
block|{
return|return
name|context
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|get
argument_list|(
name|compName
argument_list|)
operator|.
name|getComponentInstance
argument_list|(
name|instanceName
argument_list|)
return|;
block|}
DECL|method|waitForCompInstanceState (ComponentInstance instance, ComponentInstanceState state)
specifier|public
name|void
name|waitForCompInstanceState
parameter_list|(
name|ComponentInstance
name|instance
parameter_list|,
name|ComponentInstanceState
name|state
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|instance
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|state
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
block|}
DECL|method|addContainerStatus (Container container, ContainerState state)
specifier|private
name|void
name|addContainerStatus
parameter_list|(
name|Container
name|container
parameter_list|,
name|ContainerState
name|state
parameter_list|)
block|{
name|addContainerStatus
argument_list|(
name|container
argument_list|,
name|state
argument_list|,
name|container
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addContainerStatus (Container container, ContainerState state, String host)
specifier|private
name|void
name|addContainerStatus
parameter_list|(
name|Container
name|container
parameter_list|,
name|ContainerState
name|state
parameter_list|,
name|String
name|host
parameter_list|)
block|{
name|ContainerStatus
name|status
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|state
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|status
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|status
operator|.
name|setIPs
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|containerStatuses
operator|.
name|put
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|recordTokensForContainers ()
specifier|protected
name|ByteBuffer
name|recordTokensForContainers
parameter_list|()
throws|throws
name|IOException
block|{
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|amCreds
operator|==
literal|null
condition|)
block|{
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
try|try
block|{
name|amCreds
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dob
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Waits for the container to get released    * @param containerId           ContainerId    */
DECL|method|waitForContainerToRelease (ContainerId containerId)
specifier|public
name|void
name|waitForContainerToRelease
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|releasedContainers
operator|.
name|contains
argument_list|(
name|containerId
argument_list|)
argument_list|,
literal|1000
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

