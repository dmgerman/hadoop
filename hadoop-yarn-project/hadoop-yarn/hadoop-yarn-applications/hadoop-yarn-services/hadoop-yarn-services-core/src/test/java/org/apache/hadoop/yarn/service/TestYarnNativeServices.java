begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ComponentState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|PlacementConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|PlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|PlacementScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|PlacementType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
operator|.
name|ServiceClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
operator|.
name|FINISHED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConf
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|LauncherExitCodes
operator|.
name|EXIT_COMMAND_ARGUMENT_ERROR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|LauncherExitCodes
operator|.
name|EXIT_NOT_FOUND
import|;
end_import

begin_comment
comment|/**  * End to end tests to test deploying services with MiniYarnCluster and a in-JVM  * ZK testing cluster.  */
end_comment

begin_class
DECL|class|TestYarnNativeServices
specifier|public
class|class
name|TestYarnNativeServices
extends|extends
name|ServiceTestUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestYarnNativeServices
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|tmpFolder
specifier|public
name|TemporaryFolder
name|tmpFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|tmpYarnDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
literal|"tmp"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|tmpYarnDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// End-to-end test to use ServiceClient to deploy a service.
comment|// 1. Create a service with 2 components, each of which has 2 containers
comment|// 2. Flex up each component to 3 containers and check the component instance names
comment|// 3. Flex down each component to 1 container and check the component instance names
comment|// 4. Flex up each component to 2 containers and check the component instance names
comment|// 5. Stop the service
comment|// 6. Destroy the service
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|200000
argument_list|)
DECL|method|testCreateFlexStopDestroyService ()
specifier|public
name|void
name|testCreateFlexStopDestroyService
parameter_list|()
throws|throws
name|Exception
block|{
name|setupInternal
argument_list|(
name|NUM_NMS
argument_list|)
expr_stmt|;
name|ServiceClient
name|client
init|=
name|createClient
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|exampleApp
init|=
name|createExampleApplication
argument_list|()
decl_stmt|;
name|client
operator|.
name|actionCreate
argument_list|(
name|exampleApp
argument_list|)
expr_stmt|;
name|SliderFileSystem
name|fileSystem
init|=
operator|new
name|SliderFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|appDir
init|=
name|fileSystem
operator|.
name|buildClusterDirPath
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// check app.json is persisted.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|getFS
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|appDir
argument_list|,
name|exampleApp
operator|.
name|getName
argument_list|()
operator|+
literal|".json"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
comment|// Flex two components, each from 2 container to 3 containers.
name|flexComponents
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
comment|// wait for flex to be completed, increase from 2 to 3 containers.
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
comment|// check all instances name for each component are in sequential order.
name|checkCompInstancesInOrder
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
comment|// flex down to 1
name|flexComponents
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
name|checkCompInstancesInOrder
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
comment|// check component dir and registry are cleaned up.
comment|// flex up again to 2
name|flexComponents
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
name|checkCompInstancesInOrder
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
comment|// stop the service
name|LOG
operator|.
name|info
argument_list|(
literal|"Stop the service"
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionStop
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ApplicationReport
name|report
init|=
name|client
operator|.
name|getYarnClient
argument_list|()
operator|.
name|getApplicationReport
argument_list|(
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|exampleApp
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// AM unregisters with RM successfully
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FINISHED
argument_list|,
name|report
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FinalApplicationStatus
operator|.
name|ENDED
argument_list|,
name|report
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|serviceZKPath
init|=
name|RegistryUtils
operator|.
name|servicePath
argument_list|(
name|RegistryUtils
operator|.
name|currentUser
argument_list|()
argument_list|,
name|YarnServiceConstants
operator|.
name|APP_TYPE
argument_list|,
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Registry ZK service path still exists after stop"
argument_list|,
name|getCuratorService
argument_list|()
operator|.
name|zkPathExists
argument_list|(
name|serviceZKPath
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Destroy the service"
argument_list|)
expr_stmt|;
comment|// destroy the service and check the app dir is deleted from fs.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|actionDestroy
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check the service dir on hdfs (in this case, local fs) are deleted.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|getFS
argument_list|()
operator|.
name|exists
argument_list|(
name|appDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that destroying again does not succeed
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EXIT_NOT_FOUND
argument_list|,
name|client
operator|.
name|actionDestroy
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Save a service without starting it and ensure that stop does not NPE and
comment|// that service can be successfully destroyed
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|200000
argument_list|)
DECL|method|testStopDestroySavedService ()
specifier|public
name|void
name|testStopDestroySavedService
parameter_list|()
throws|throws
name|Exception
block|{
name|setupInternal
argument_list|(
name|NUM_NMS
argument_list|)
expr_stmt|;
name|ServiceClient
name|client
init|=
name|createClient
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|exampleApp
init|=
name|createExampleApplication
argument_list|()
decl_stmt|;
name|client
operator|.
name|actionBuild
argument_list|(
name|exampleApp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EXIT_COMMAND_ARGUMENT_ERROR
argument_list|,
name|client
operator|.
name|actionStop
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|actionDestroy
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create compa with 2 containers
comment|// Create compb with 2 containers which depends on compa
comment|// Create compc with 2 containers which depends on compb
comment|// Check containers for compa started before containers for compb before
comment|// containers for compc
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|200000
argument_list|)
DECL|method|testComponentStartOrder ()
specifier|public
name|void
name|testComponentStartOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|setupInternal
argument_list|(
name|NUM_NMS
argument_list|)
expr_stmt|;
name|ServiceClient
name|client
init|=
name|createClient
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|exampleApp
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|exampleApp
operator|.
name|setName
argument_list|(
literal|"teststartorder"
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|setVersion
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|createComponent
argument_list|(
literal|"compa"
argument_list|,
literal|2
argument_list|,
literal|"sleep 1000"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Let compb depend on compa
name|Component
name|compb
init|=
name|createComponent
argument_list|(
literal|"compb"
argument_list|,
literal|2
argument_list|,
literal|"sleep 1000"
argument_list|)
decl_stmt|;
name|compb
operator|.
name|setDependencies
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"compa"
argument_list|)
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|compb
argument_list|)
expr_stmt|;
comment|// Let compc depend on compb
name|Component
name|compc
init|=
name|createComponent
argument_list|(
literal|"compc"
argument_list|,
literal|2
argument_list|,
literal|"sleep 1000"
argument_list|)
decl_stmt|;
name|compc
operator|.
name|setDependencies
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"compb"
argument_list|)
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|compc
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionCreate
argument_list|(
name|exampleApp
argument_list|)
expr_stmt|;
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
comment|// check that containers for compa are launched before containers for compb
name|checkContainerLaunchDependencies
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|,
literal|"compa"
argument_list|,
literal|"compb"
argument_list|,
literal|"compc"
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionStop
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionDestroy
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|200000
argument_list|)
DECL|method|testCreateServiceSameNameDifferentUser ()
specifier|public
name|void
name|testCreateServiceSameNameDifferentUser
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|sameAppName
init|=
literal|"same-name"
decl_stmt|;
name|String
name|userA
init|=
literal|"usera"
decl_stmt|;
name|String
name|userB
init|=
literal|"userb"
decl_stmt|;
name|setupInternal
argument_list|(
name|NUM_NMS
argument_list|)
expr_stmt|;
name|ServiceClient
name|client
init|=
name|createClient
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|origBasePath
init|=
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|YARN_SERVICE_BASE_PATH
argument_list|)
decl_stmt|;
name|Service
name|userAApp
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|userAApp
operator|.
name|setName
argument_list|(
name|sameAppName
argument_list|)
expr_stmt|;
name|userAApp
operator|.
name|setVersion
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|userAApp
operator|.
name|addComponent
argument_list|(
name|createComponent
argument_list|(
literal|"comp"
argument_list|,
literal|1
argument_list|,
literal|"sleep 1000"
argument_list|)
argument_list|)
expr_stmt|;
name|Service
name|userBApp
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|userBApp
operator|.
name|setName
argument_list|(
name|sameAppName
argument_list|)
expr_stmt|;
name|userBApp
operator|.
name|setVersion
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|userBApp
operator|.
name|addComponent
argument_list|(
name|createComponent
argument_list|(
literal|"comp"
argument_list|,
literal|1
argument_list|,
literal|"sleep 1000"
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|userABasePath
init|=
literal|null
decl_stmt|,
name|userBBasePath
init|=
literal|null
decl_stmt|;
try|try
block|{
name|userABasePath
operator|=
operator|new
name|File
argument_list|(
name|origBasePath
argument_list|,
name|userA
argument_list|)
expr_stmt|;
name|userABasePath
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|YARN_SERVICE_BASE_PATH
argument_list|,
name|userABasePath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionCreate
argument_list|(
name|userAApp
argument_list|)
expr_stmt|;
name|waitForServiceToBeStarted
argument_list|(
name|client
argument_list|,
name|userAApp
argument_list|)
expr_stmt|;
name|userBBasePath
operator|=
operator|new
name|File
argument_list|(
name|origBasePath
argument_list|,
name|userB
argument_list|)
expr_stmt|;
name|userBBasePath
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|YARN_SERVICE_BASE_PATH
argument_list|,
name|userBBasePath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionBuild
argument_list|(
name|userBApp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception should not be thrown - "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|userABasePath
operator|!=
literal|null
condition|)
block|{
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|YARN_SERVICE_BASE_PATH
argument_list|,
name|userABasePath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionStop
argument_list|(
name|sameAppName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionDestroy
argument_list|(
name|sameAppName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|userBBasePath
operator|!=
literal|null
condition|)
block|{
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|YARN_SERVICE_BASE_PATH
argument_list|,
name|userBBasePath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionDestroy
argument_list|(
name|sameAppName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Need to extend this test to validate that different users can create
comment|// apps of exact same name. So far only create followed by build is tested.
comment|// Need to test create followed by create.
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|200000
argument_list|)
DECL|method|testCreateServiceSameNameSameUser ()
specifier|public
name|void
name|testCreateServiceSameNameSameUser
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|sameAppName
init|=
literal|"same-name"
decl_stmt|;
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"user.name"
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|setupInternal
argument_list|(
name|NUM_NMS
argument_list|)
expr_stmt|;
name|ServiceClient
name|client
init|=
name|createClient
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|appA
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|appA
operator|.
name|setName
argument_list|(
name|sameAppName
argument_list|)
expr_stmt|;
name|appA
operator|.
name|setVersion
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|appA
operator|.
name|addComponent
argument_list|(
name|createComponent
argument_list|(
literal|"comp"
argument_list|,
literal|1
argument_list|,
literal|"sleep 1000"
argument_list|)
argument_list|)
expr_stmt|;
name|Service
name|appB
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|appB
operator|.
name|setName
argument_list|(
name|sameAppName
argument_list|)
expr_stmt|;
name|appB
operator|.
name|setVersion
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|appB
operator|.
name|addComponent
argument_list|(
name|createComponent
argument_list|(
literal|"comp"
argument_list|,
literal|1
argument_list|,
literal|"sleep 1000"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|actionBuild
argument_list|(
name|appA
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionBuild
argument_list|(
name|appB
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|expectedMsg
init|=
literal|"Service Instance dir already exists:"
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertThat
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|containsString
argument_list|(
name|expectedMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Message cannot be null. It has to say - "
operator|+
name|expectedMsg
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// cleanup
name|client
operator|.
name|actionDestroy
argument_list|(
name|sameAppName
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|client
operator|.
name|actionCreate
argument_list|(
name|appA
argument_list|)
expr_stmt|;
name|waitForServiceToBeStarted
argument_list|(
name|client
argument_list|,
name|appA
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionCreate
argument_list|(
name|appB
argument_list|)
expr_stmt|;
name|waitForServiceToBeStarted
argument_list|(
name|client
argument_list|,
name|appB
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|expectedMsg
init|=
literal|"Failed to create service "
operator|+
name|sameAppName
operator|+
literal|", because it already exists."
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertThat
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|containsString
argument_list|(
name|expectedMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Message cannot be null. It has to say - "
operator|+
name|expectedMsg
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// cleanup
name|client
operator|.
name|actionStop
argument_list|(
name|sameAppName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionDestroy
argument_list|(
name|sameAppName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test to verify recovery of SeviceMaster after RM is restarted.
comment|// 1. Create an example service.
comment|// 2. Restart RM.
comment|// 3. Fail the application attempt.
comment|// 4. Verify ServiceMaster recovers.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|200000
argument_list|)
DECL|method|testRecoverComponentsAfterRMRestart ()
specifier|public
name|void
name|testRecoverComponentsAfterRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS
argument_list|,
literal|500L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_MINICLUSTER_FIXED_PORTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_MINICLUSTER_USE_RPC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setupInternal
argument_list|(
name|NUM_NMS
argument_list|)
expr_stmt|;
name|ServiceClient
name|client
init|=
name|createClient
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|exampleApp
init|=
name|createExampleApplication
argument_list|()
decl_stmt|;
name|client
operator|.
name|actionCreate
argument_list|(
name|exampleApp
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|containersBeforeFailure
init|=
name|waitForAllCompToBeReady
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restart the resource manager"
argument_list|)
expr_stmt|;
name|getYarnCluster
argument_list|()
operator|.
name|restartResourceManager
argument_list|(
name|getYarnCluster
argument_list|()
operator|.
name|getActiveRMIndex
argument_list|()
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|getYarnCluster
argument_list|()
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getServiceState
argument_list|()
operator|==
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|,
literal|2000
argument_list|,
literal|200000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"node managers connected"
argument_list|,
name|getYarnCluster
argument_list|()
operator|.
name|waitForNodeManagersToConnect
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationId
name|exampleAppId
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|exampleApp
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|client
operator|.
name|getYarnClient
argument_list|()
operator|.
name|getApplicationReport
argument_list|(
name|exampleAppId
argument_list|)
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Fail the application attempt {}"
argument_list|,
name|applicationAttemptId
argument_list|)
expr_stmt|;
name|client
operator|.
name|getYarnClient
argument_list|()
operator|.
name|failApplicationAttempt
argument_list|(
name|applicationAttemptId
argument_list|)
expr_stmt|;
comment|//wait until attempt 2 is running
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|ApplicationReport
name|ar
init|=
name|client
operator|.
name|getYarnClient
argument_list|()
operator|.
name|getApplicationReport
argument_list|(
name|exampleAppId
argument_list|)
decl_stmt|;
return|return
name|ar
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
operator|.
name|getAttemptId
argument_list|()
operator|==
literal|2
operator|&&
name|ar
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|RUNNING
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"while waiting"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|,
literal|2000
argument_list|,
literal|200000
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|containersAfterFailure
init|=
name|waitForAllCompToBeReady
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"component container affected by restart"
argument_list|,
name|containersBeforeFailure
argument_list|,
name|containersAfterFailure
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stop/destroy service {}"
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionStop
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionDestroy
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|200000
argument_list|)
DECL|method|testUpgrade ()
specifier|public
name|void
name|testUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|setupInternal
argument_list|(
name|NUM_NMS
argument_list|)
expr_stmt|;
name|getConf
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|YARN_SERVICE_UPGRADE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ServiceClient
name|client
init|=
name|createClient
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|createExampleApplication
argument_list|()
decl_stmt|;
name|client
operator|.
name|actionCreate
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|service
argument_list|)
expr_stmt|;
comment|// upgrade the service
name|Component
name|component
init|=
name|service
operator|.
name|getComponents
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|service
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|UPGRADING
argument_list|)
expr_stmt|;
name|service
operator|.
name|setVersion
argument_list|(
literal|"v2"
argument_list|)
expr_stmt|;
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"val1"
argument_list|)
expr_stmt|;
name|client
operator|.
name|initiateUpgrade
argument_list|(
name|service
argument_list|)
expr_stmt|;
comment|// wait for service to be in upgrade state
name|waitForServiceToBeInState
argument_list|(
name|client
argument_list|,
name|service
argument_list|,
name|ServiceState
operator|.
name|UPGRADING
argument_list|)
expr_stmt|;
name|SliderFileSystem
name|fs
init|=
operator|new
name|SliderFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|fromFs
init|=
name|ServiceApiUtil
operator|.
name|loadServiceUpgrade
argument_list|(
name|fs
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|service
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|fromFs
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|service
operator|.
name|getVersion
argument_list|()
argument_list|,
name|fromFs
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// upgrade containers
name|Service
name|liveService
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|actionUpgrade
argument_list|(
name|service
argument_list|,
name|liveService
operator|.
name|getComponent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getContainers
argument_list|()
argument_list|)
expr_stmt|;
name|waitForAllCompToBeReady
argument_list|(
name|client
argument_list|,
name|service
argument_list|)
expr_stmt|;
comment|// finalize the upgrade
name|client
operator|.
name|actionStart
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|Service
name|active
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"component not stable"
argument_list|,
name|ComponentState
operator|.
name|STABLE
argument_list|,
name|active
operator|.
name|getComponent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"comp does not have new env"
argument_list|,
literal|"val1"
argument_list|,
name|active
operator|.
name|getComponent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stop/destroy service {}"
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionStop
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionDestroy
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|200000
argument_list|)
DECL|method|testExpressUpgrade ()
specifier|public
name|void
name|testExpressUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|setupInternal
argument_list|(
name|NUM_NMS
argument_list|)
expr_stmt|;
name|getConf
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|YARN_SERVICE_UPGRADE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ServiceClient
name|client
init|=
name|createClient
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|createExampleApplication
argument_list|()
decl_stmt|;
name|client
operator|.
name|actionCreate
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|service
argument_list|)
expr_stmt|;
comment|// upgrade the service
name|Component
name|component
init|=
name|service
operator|.
name|getComponents
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|service
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|EXPRESS_UPGRADING
argument_list|)
expr_stmt|;
name|service
operator|.
name|setVersion
argument_list|(
literal|"v2"
argument_list|)
expr_stmt|;
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"val1"
argument_list|)
expr_stmt|;
name|Component
name|component2
init|=
name|service
operator|.
name|getComponent
argument_list|(
literal|"compb"
argument_list|)
decl_stmt|;
name|component2
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
literal|"val2"
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionUpgradeExpress
argument_list|(
name|service
argument_list|)
expr_stmt|;
comment|// wait for upgrade to complete
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|Service
name|active
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"version mismatch"
argument_list|,
name|service
operator|.
name|getVersion
argument_list|()
argument_list|,
name|active
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"component not stable"
argument_list|,
name|ComponentState
operator|.
name|STABLE
argument_list|,
name|active
operator|.
name|getComponent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"compa does not have new env"
argument_list|,
literal|"val1"
argument_list|,
name|active
operator|.
name|getComponent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"compb does not have new env"
argument_list|,
literal|"val2"
argument_list|,
name|active
operator|.
name|getComponent
argument_list|(
name|component2
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|(
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stop/destroy service {}"
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionStop
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionDestroy
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|200000
argument_list|)
DECL|method|testCancelUpgrade ()
specifier|public
name|void
name|testCancelUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|setupInternal
argument_list|(
name|NUM_NMS
argument_list|)
expr_stmt|;
name|getConf
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|YARN_SERVICE_UPGRADE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ServiceClient
name|client
init|=
name|createClient
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|createExampleApplication
argument_list|()
decl_stmt|;
name|Component
name|component
init|=
name|service
operator|.
name|getComponents
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"val0"
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionCreate
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|service
argument_list|)
expr_stmt|;
comment|// upgrade the service
name|service
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|UPGRADING
argument_list|)
expr_stmt|;
name|service
operator|.
name|setVersion
argument_list|(
literal|"v2"
argument_list|)
expr_stmt|;
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"val1"
argument_list|)
expr_stmt|;
name|client
operator|.
name|initiateUpgrade
argument_list|(
name|service
argument_list|)
expr_stmt|;
comment|// wait for service to be in upgrade state
name|waitForServiceToBeInState
argument_list|(
name|client
argument_list|,
name|service
argument_list|,
name|ServiceState
operator|.
name|UPGRADING
argument_list|)
expr_stmt|;
comment|// upgrade 1 container
name|Service
name|liveService
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|liveService
operator|.
name|getComponent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getContainers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|client
operator|.
name|actionUpgrade
argument_list|(
name|service
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// cancel the upgrade
name|client
operator|.
name|actionCancelUpgrade
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|Service
name|active
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"component not stable"
argument_list|,
name|ComponentState
operator|.
name|STABLE
argument_list|,
name|active
operator|.
name|getComponent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"comp does not have new env"
argument_list|,
literal|"val0"
argument_list|,
name|active
operator|.
name|getComponent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stop/destroy service {}"
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionStop
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionDestroy
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test to verify ANTI_AFFINITY placement policy
comment|// 1. Start mini cluster with 3 NMs and scheduler placement-constraint handler
comment|// 2. Create an example service with 3 containers
comment|// 3. Verify no more than 1 container comes up in each of the 3 NMs
comment|// 4. Flex the component to 4 containers
comment|// 5. Verify that the 4th container does not even get allocated since there
comment|//    are only 3 NMs
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|200000
argument_list|)
DECL|method|testCreateServiceWithPlacementPolicy ()
specifier|public
name|void
name|testCreateServiceWithPlacementPolicy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We need to enable scheduler placement-constraint at the cluster level to
comment|// let apps use placement policies.
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PLACEMENT_CONSTRAINTS_HANDLER
argument_list|,
name|YarnConfiguration
operator|.
name|SCHEDULER_RM_PLACEMENT_CONSTRAINTS_HANDLER
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setupInternal
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ServiceClient
name|client
init|=
name|createClient
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|exampleApp
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|exampleApp
operator|.
name|setName
argument_list|(
literal|"example-app"
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|setVersion
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|Component
name|comp
init|=
name|createComponent
argument_list|(
literal|"compa"
argument_list|,
literal|3L
argument_list|,
literal|"sleep 1000"
argument_list|)
decl_stmt|;
name|PlacementPolicy
name|pp
init|=
operator|new
name|PlacementPolicy
argument_list|()
decl_stmt|;
name|PlacementConstraint
name|pc
init|=
operator|new
name|PlacementConstraint
argument_list|()
decl_stmt|;
name|pc
operator|.
name|setName
argument_list|(
literal|"CA1"
argument_list|)
expr_stmt|;
name|pc
operator|.
name|setTargetTags
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"compa"
argument_list|)
argument_list|)
expr_stmt|;
name|pc
operator|.
name|setScope
argument_list|(
name|PlacementScope
operator|.
name|NODE
argument_list|)
expr_stmt|;
name|pc
operator|.
name|setType
argument_list|(
name|PlacementType
operator|.
name|ANTI_AFFINITY
argument_list|)
expr_stmt|;
name|pp
operator|.
name|setConstraints
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|pc
argument_list|)
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPlacementPolicy
argument_list|(
name|pp
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionCreate
argument_list|(
name|exampleApp
argument_list|)
expr_stmt|;
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
comment|// Check service is stable and all 3 containers are running
name|Service
name|service
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Component
name|component
init|=
name|service
operator|.
name|getComponent
argument_list|(
literal|"compa"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Service state should be STABLE"
argument_list|,
name|ServiceState
operator|.
name|STABLE
argument_list|,
name|service
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3 containers are expected to be running"
argument_list|,
literal|3
argument_list|,
name|component
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Prepare a map of non-AM containers for later lookup
name|Set
argument_list|<
name|String
argument_list|>
name|nonAMContainerIdSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|cont
range|:
name|component
operator|.
name|getContainers
argument_list|()
control|)
block|{
name|nonAMContainerIdSet
operator|.
name|add
argument_list|(
name|cont
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Verify that no more than 1 non-AM container came up on each of the 3 NMs
name|Set
argument_list|<
name|String
argument_list|>
name|hosts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ApplicationReport
name|report
init|=
name|client
operator|.
name|getYarnClient
argument_list|()
operator|.
name|getApplicationReport
argument_list|(
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|exampleApp
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|GetContainersRequest
name|req
init|=
name|GetContainersRequest
operator|.
name|newInstance
argument_list|(
name|report
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|ResourceManager
name|rm
init|=
name|getYarnCluster
argument_list|()
operator|.
name|getResourceManager
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerReport
name|contReport
range|:
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getContainers
argument_list|(
name|req
argument_list|)
operator|.
name|getContainerList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|nonAMContainerIdSet
operator|.
name|contains
argument_list|(
name|contReport
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|hosts
operator|.
name|contains
argument_list|(
name|contReport
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Container "
operator|+
name|contReport
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" came up in the same host as another container."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hosts
operator|.
name|add
argument_list|(
name|contReport
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Flex compa up to 5, which is more containers than the no of NMs
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|compCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|compCounts
operator|.
name|put
argument_list|(
literal|"compa"
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|getComponent
argument_list|(
literal|"compa"
argument_list|)
operator|.
name|setNumberOfContainers
argument_list|(
literal|5L
argument_list|)
expr_stmt|;
name|client
operator|.
name|flexByRestService
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|,
name|compCounts
argument_list|)
expr_stmt|;
try|try
block|{
comment|// 10 secs is enough for the container to be started. The down side of
comment|// this test is that it has to wait that long. Setting a higher wait time
comment|// will add to the total time taken by tests to run.
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Service should not be in a stable state. It should throw "
operator|+
literal|"a timeout exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Check that service state is not STABLE and only 3 containers are
comment|// running and the fourth one should not get allocated.
name|service
operator|=
name|client
operator|.
name|getStatus
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|component
operator|=
name|service
operator|.
name|getComponent
argument_list|(
literal|"compa"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"Service state should not be STABLE"
argument_list|,
name|ServiceState
operator|.
name|STABLE
argument_list|,
name|service
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Component state should be FLEXING"
argument_list|,
name|ComponentState
operator|.
name|FLEXING
argument_list|,
name|component
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3 containers are expected to be running"
argument_list|,
literal|3
argument_list|,
name|component
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Flex compa down to 4 now, which is still more containers than the no of
comment|// NMs. This tests the usecase that flex down does not kill any of the
comment|// currently running containers since the required number of containers are
comment|// still higher than the currently running number of containers. However,
comment|// component state will still be FLEXING and service state not STABLE.
name|compCounts
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|compCounts
operator|.
name|put
argument_list|(
literal|"compa"
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|getComponent
argument_list|(
literal|"compa"
argument_list|)
operator|.
name|setNumberOfContainers
argument_list|(
literal|4L
argument_list|)
expr_stmt|;
name|client
operator|.
name|flexByRestService
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|,
name|compCounts
argument_list|)
expr_stmt|;
try|try
block|{
comment|// 10 secs is enough for the container to be started. The down side of
comment|// this test is that it has to wait that long. Setting a higher wait time
comment|// will add to the total time taken by tests to run.
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Service should not be in a stable state. It should throw "
operator|+
literal|"a timeout exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Check that service state is not STABLE and only 3 containers are
comment|// running and the fourth one should not get allocated.
name|service
operator|=
name|client
operator|.
name|getStatus
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|component
operator|=
name|service
operator|.
name|getComponent
argument_list|(
literal|"compa"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"Service state should not be STABLE"
argument_list|,
name|ServiceState
operator|.
name|STABLE
argument_list|,
name|service
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Component state should be FLEXING"
argument_list|,
name|ComponentState
operator|.
name|FLEXING
argument_list|,
name|component
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3 containers are expected to be running"
argument_list|,
literal|3
argument_list|,
name|component
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Finally flex compa down to 3, which is exactly the number of containers
comment|// currently running. This will bring the component and service states to
comment|// STABLE.
name|compCounts
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|compCounts
operator|.
name|put
argument_list|(
literal|"compa"
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|getComponent
argument_list|(
literal|"compa"
argument_list|)
operator|.
name|setNumberOfContainers
argument_list|(
literal|3L
argument_list|)
expr_stmt|;
name|client
operator|.
name|flexByRestService
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|,
name|compCounts
argument_list|)
expr_stmt|;
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stop/destroy service {}"
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionStop
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionDestroy
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|200000
argument_list|)
DECL|method|testAMSigtermDoesNotKillApplication ()
specifier|public
name|void
name|testAMSigtermDoesNotKillApplication
parameter_list|()
throws|throws
name|Exception
block|{
name|runAMSignalTest
argument_list|(
name|SignalContainerCommand
operator|.
name|GRACEFUL_SHUTDOWN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|200000
argument_list|)
DECL|method|testAMSigkillDoesNotKillApplication ()
specifier|public
name|void
name|testAMSigkillDoesNotKillApplication
parameter_list|()
throws|throws
name|Exception
block|{
name|runAMSignalTest
argument_list|(
name|SignalContainerCommand
operator|.
name|FORCEFUL_SHUTDOWN
argument_list|)
expr_stmt|;
block|}
DECL|method|runAMSignalTest (SignalContainerCommand signal)
specifier|public
name|void
name|runAMSignalTest
parameter_list|(
name|SignalContainerCommand
name|signal
parameter_list|)
throws|throws
name|Exception
block|{
name|setupInternal
argument_list|(
name|NUM_NMS
argument_list|)
expr_stmt|;
name|ServiceClient
name|client
init|=
name|createClient
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|exampleApp
init|=
name|createExampleApplication
argument_list|()
decl_stmt|;
name|client
operator|.
name|actionCreate
argument_list|(
name|exampleApp
argument_list|)
expr_stmt|;
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
name|Service
name|appStatus1
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationId
name|exampleAppId
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|appStatus1
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|YarnClient
name|yarnClient
init|=
name|createYarnClient
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationReport
name|applicationReport
init|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|exampleAppId
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|firstAttemptId
init|=
name|applicationReport
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
decl_stmt|;
name|ApplicationAttemptReport
name|attemptReport
init|=
name|yarnClient
operator|.
name|getApplicationAttemptReport
argument_list|(
name|firstAttemptId
argument_list|)
decl_stmt|;
comment|// the AM should not perform a graceful shutdown since the operation was not
comment|// initiated through the service client
name|yarnClient
operator|.
name|signalToContainer
argument_list|(
name|attemptReport
operator|.
name|getAMContainerId
argument_list|()
argument_list|,
name|signal
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|ApplicationReport
name|ar
init|=
name|client
operator|.
name|getYarnClient
argument_list|()
operator|.
name|getApplicationReport
argument_list|(
name|exampleAppId
argument_list|)
decl_stmt|;
name|YarnApplicationState
name|state
init|=
name|ar
operator|.
name|getYarnApplicationState
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|state
operator|==
name|YarnApplicationState
operator|.
name|RUNNING
operator|||
name|state
operator|==
name|YarnApplicationState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|!=
name|YarnApplicationState
operator|.
name|RUNNING
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|ar
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
operator|==
literal|null
operator|||
name|ar
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
operator|.
name|equals
argument_list|(
name|firstAttemptId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Service
name|appStatus2
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|appStatus2
operator|.
name|getState
argument_list|()
operator|!=
name|ServiceState
operator|.
name|STABLE
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|getSortedContainerIds
argument_list|(
name|appStatus1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|getSortedContainerIds
argument_list|(
name|appStatus2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"while waiting"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|,
literal|2000
argument_list|,
literal|200000
argument_list|)
expr_stmt|;
block|}
DECL|method|getSortedContainerIds (Service s)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getSortedContainerIds
parameter_list|(
name|Service
name|s
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|component
range|:
name|s
operator|.
name|getComponents
argument_list|()
control|)
block|{
for|for
control|(
name|Container
name|container
range|:
name|component
operator|.
name|getContainers
argument_list|()
control|)
block|{
name|containerIds
operator|.
name|add
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|containerIds
argument_list|)
expr_stmt|;
return|return
name|containerIds
return|;
block|}
comment|// Test to verify component health threshold monitor. It uses anti-affinity
comment|// placement policy to make it easier to simulate container failure by
comment|// allocating more containers than the no of NMs.
comment|// 1. Start mini cluster with 3 NMs and scheduler placement-constraint handler
comment|// 2. Create an example service of 3 containers with anti-affinity placement
comment|//    policy and health threshold = 65%, window = 3 secs, init-delay = 0 secs,
comment|//    poll-frequency = 1 secs
comment|// 3. Flex the component to 4 containers. This makes health = 75%, so based on
comment|//    threshold the service will continue to run beyond the window of 3 secs.
comment|// 4. Flex the component to 5 containers. This makes health = 60%, so based on
comment|//    threshold the service will be stopped after the window of 3 secs.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|200000
argument_list|)
DECL|method|testComponentHealthThresholdMonitor ()
specifier|public
name|void
name|testComponentHealthThresholdMonitor
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We need to enable scheduler placement-constraint at the cluster level to
comment|// let apps use placement policies.
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PLACEMENT_CONSTRAINTS_HANDLER
argument_list|,
name|YarnConfiguration
operator|.
name|SCHEDULER_RM_PLACEMENT_CONSTRAINTS_HANDLER
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setupInternal
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ServiceClient
name|client
init|=
name|createClient
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|exampleApp
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|exampleApp
operator|.
name|setName
argument_list|(
literal|"example-app"
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|setVersion
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|Component
name|comp
init|=
name|createComponent
argument_list|(
literal|"compa"
argument_list|,
literal|3L
argument_list|,
literal|"sleep 1000"
argument_list|)
decl_stmt|;
name|PlacementPolicy
name|pp
init|=
operator|new
name|PlacementPolicy
argument_list|()
decl_stmt|;
name|PlacementConstraint
name|pc
init|=
operator|new
name|PlacementConstraint
argument_list|()
decl_stmt|;
name|pc
operator|.
name|setName
argument_list|(
literal|"CA1"
argument_list|)
expr_stmt|;
name|pc
operator|.
name|setTargetTags
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"compa"
argument_list|)
argument_list|)
expr_stmt|;
name|pc
operator|.
name|setScope
argument_list|(
name|PlacementScope
operator|.
name|NODE
argument_list|)
expr_stmt|;
name|pc
operator|.
name|setType
argument_list|(
name|PlacementType
operator|.
name|ANTI_AFFINITY
argument_list|)
expr_stmt|;
name|pp
operator|.
name|setConstraints
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|pc
argument_list|)
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPlacementPolicy
argument_list|(
name|pp
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|CONTAINER_HEALTH_THRESHOLD_PERCENT
argument_list|,
literal|"65"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|CONTAINER_HEALTH_THRESHOLD_WINDOW_SEC
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|CONTAINER_HEALTH_THRESHOLD_INIT_DELAY_SEC
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|CONTAINER_HEALTH_THRESHOLD_POLL_FREQUENCY_SEC
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|DEFAULT_READINESS_CHECK_ENABLED
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|addComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
comment|// Make sure AM does not come up after service is killed for this test
name|Configuration
name|serviceConfig
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|serviceConfig
operator|.
name|setProperty
argument_list|(
name|AM_RESTART_MAX
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|setConfiguration
argument_list|(
name|serviceConfig
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionCreate
argument_list|(
name|exampleApp
argument_list|)
expr_stmt|;
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
comment|// Check service is stable and all 3 containers are running
name|Service
name|service
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Component
name|component
init|=
name|service
operator|.
name|getComponent
argument_list|(
literal|"compa"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Service state should be STABLE"
argument_list|,
name|ServiceState
operator|.
name|STABLE
argument_list|,
name|service
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3 containers are expected to be running"
argument_list|,
literal|3
argument_list|,
name|component
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Flex compa up to 4 - will make health 75% (3 out of 4 running), but still
comment|// above threshold of 65%, so service will continue to run.
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|compCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|compCounts
operator|.
name|put
argument_list|(
literal|"compa"
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|getComponent
argument_list|(
literal|"compa"
argument_list|)
operator|.
name|setNumberOfContainers
argument_list|(
literal|4L
argument_list|)
expr_stmt|;
name|client
operator|.
name|flexByRestService
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|,
name|compCounts
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Wait for 6 secs (window 3 secs + 1 for next poll + 2 for buffer). Since
comment|// the service will never go to stable state (because of anti-affinity the
comment|// 4th container will never be allocated) it will timeout. However, after
comment|// the timeout the service should continue to run since health is 75%
comment|// which is above the threshold of 65%.
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|,
literal|6000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Service should not be in a stable state. It should throw "
operator|+
literal|"a timeout exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Check that service state is STARTED and only 3 containers are running
name|service
operator|=
name|client
operator|.
name|getStatus
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|component
operator|=
name|service
operator|.
name|getComponent
argument_list|(
literal|"compa"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Service state should be STARTED"
argument_list|,
name|ServiceState
operator|.
name|STARTED
argument_list|,
name|service
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Component state should be FLEXING"
argument_list|,
name|ComponentState
operator|.
name|FLEXING
argument_list|,
name|component
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3 containers are expected to be running"
argument_list|,
literal|3
argument_list|,
name|component
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Flex compa up to 5 - will make health 60% (3 out of 5 running), so
comment|// service will stop since it is below threshold of 65%.
name|compCounts
operator|.
name|put
argument_list|(
literal|"compa"
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|getComponent
argument_list|(
literal|"compa"
argument_list|)
operator|.
name|setNumberOfContainers
argument_list|(
literal|5L
argument_list|)
expr_stmt|;
name|client
operator|.
name|flexByRestService
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|,
name|compCounts
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Wait for 14 secs (window 3 secs + 1 for next poll + 2 for buffer + 5
comment|// secs of service wait before shutting down + 3 secs app cleanup so that
comment|// API returns that service is in FAILED state). Note, because of
comment|// anti-affinity the 4th and 5th container will never be allocated.
name|waitForServiceToBeInState
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|,
name|ServiceState
operator|.
name|FAILED
argument_list|,
literal|14000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have thrown exception"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Destroy service {}"
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionDestroy
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check containers launched are in dependency order
comment|// Get all containers into a list and sort based on container launch time e.g.
comment|// compa-c1, compa-c2, compb-c1, compb-c2;
comment|// check that the container's launch time are align with the dependencies.
DECL|method|checkContainerLaunchDependencies (ServiceClient client, Service exampleApp, String... compOrder)
specifier|private
name|void
name|checkContainerLaunchDependencies
parameter_list|(
name|ServiceClient
name|client
parameter_list|,
name|Service
name|exampleApp
parameter_list|,
name|String
modifier|...
name|compOrder
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|Service
name|retrievedApp
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containerList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|component
range|:
name|retrievedApp
operator|.
name|getComponents
argument_list|()
control|)
block|{
name|containerList
operator|.
name|addAll
argument_list|(
name|component
operator|.
name|getContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// sort based on launchTime
name|containerList
operator|.
name|sort
argument_list|(
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
name|o1
operator|.
name|getLaunchTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"containerList: "
operator|+
name|containerList
argument_list|)
expr_stmt|;
comment|// check the containers are in the dependency order.
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|comp
range|:
name|compOrder
control|)
block|{
name|long
name|num
init|=
name|retrievedApp
operator|.
name|getComponent
argument_list|(
name|comp
argument_list|)
operator|.
name|getNumberOfContainers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|String
name|compInstanceName
init|=
name|containerList
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getComponentInstanceName
argument_list|()
decl_stmt|;
name|String
name|compName
init|=
name|compInstanceName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|compInstanceName
operator|.
name|lastIndexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|comp
argument_list|,
name|compName
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
block|}
DECL|method|flexComponents (ServiceClient client, Service exampleApp, long count)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|flexComponents
parameter_list|(
name|ServiceClient
name|client
parameter_list|,
name|Service
name|exampleApp
parameter_list|,
name|long
name|count
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|compCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|compCounts
operator|.
name|put
argument_list|(
literal|"compa"
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|compCounts
operator|.
name|put
argument_list|(
literal|"compb"
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// flex will update the persisted conf to reflect latest number of containers.
name|exampleApp
operator|.
name|getComponent
argument_list|(
literal|"compa"
argument_list|)
operator|.
name|setNumberOfContainers
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|exampleApp
operator|.
name|getComponent
argument_list|(
literal|"compb"
argument_list|)
operator|.
name|setNumberOfContainers
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|client
operator|.
name|flexByRestService
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|,
name|compCounts
argument_list|)
expr_stmt|;
return|return
name|compCounts
return|;
block|}
comment|// Check each component's comp instances name are in sequential order.
comment|// E.g. If there are two instances compA-1 and compA-2
comment|// When flex up to 4 instances, it should be compA-1 , compA-2, compA-3, compA-4
comment|// When flex down to 3 instances,  it should be compA-1 , compA-2, compA-3.
DECL|method|checkCompInstancesInOrder (ServiceClient client, Service exampleApp)
specifier|private
name|void
name|checkCompInstancesInOrder
parameter_list|(
name|ServiceClient
name|client
parameter_list|,
name|Service
name|exampleApp
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|Service
name|service
init|=
name|client
operator|.
name|getStatus
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Component
name|comp
range|:
name|service
operator|.
name|getComponents
argument_list|()
control|)
block|{
name|checkEachCompInstancesInOrder
argument_list|(
name|comp
argument_list|,
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkEachCompInstancesInOrder (Component component, String serviceName)
specifier|private
name|void
name|checkEachCompInstancesInOrder
parameter_list|(
name|Component
name|component
parameter_list|,
name|String
name|serviceName
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|long
name|expectedNumInstances
init|=
name|component
operator|.
name|getNumberOfContainers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedNumInstances
argument_list|,
name|component
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|instances
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|component
operator|.
name|getContainers
argument_list|()
control|)
block|{
name|instances
operator|.
name|add
argument_list|(
name|container
operator|.
name|getComponentInstanceName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|componentZKPath
init|=
name|RegistryUtils
operator|.
name|componentPath
argument_list|(
name|RegistryUtils
operator|.
name|currentUser
argument_list|()
argument_list|,
name|YarnServiceConstants
operator|.
name|APP_TYPE
argument_list|,
name|serviceName
argument_list|,
name|RegistryPathUtils
operator|.
name|encodeYarnID
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
return|return
name|getCuratorService
argument_list|()
operator|.
name|zkPathExists
argument_list|(
name|componentZKPath
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|instances
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|component
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|i
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

