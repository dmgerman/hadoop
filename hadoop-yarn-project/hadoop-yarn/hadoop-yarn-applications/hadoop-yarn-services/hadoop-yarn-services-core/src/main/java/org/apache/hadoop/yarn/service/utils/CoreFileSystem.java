begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|SliderExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|BadClusterStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|ErrorStrings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|CoreFileSystem
specifier|public
class|class
name|CoreFileSystem
block|{
specifier|private
specifier|static
specifier|final
name|Logger
DECL|field|log
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CoreFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|UTF_8
specifier|private
specifier|static
specifier|final
name|String
name|UTF_8
init|=
literal|"UTF-8"
decl_stmt|;
DECL|field|fileSystem
specifier|protected
specifier|final
name|FileSystem
name|fileSystem
decl_stmt|;
DECL|field|configuration
specifier|protected
specifier|final
name|Configuration
name|configuration
decl_stmt|;
DECL|method|CoreFileSystem (FileSystem fileSystem, Configuration configuration)
specifier|public
name|CoreFileSystem
parameter_list|(
name|FileSystem
name|fileSystem
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|fileSystem
argument_list|,
literal|"Cannot create a CoreFileSystem with a null FileSystem"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|configuration
argument_list|,
literal|"Cannot create a CoreFileSystem with a null Configuration"
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileSystem
operator|=
name|fileSystem
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|CoreFileSystem (Configuration configuration)
specifier|public
name|CoreFileSystem
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|configuration
argument_list|,
literal|"Cannot create a CoreFileSystem with a null Configuration"
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileSystem
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
comment|/**    * Get the temp path for this cluster    * @param clustername name of the cluster    * @return path for temp files (is not purged)    */
DECL|method|getTempPathForCluster (String clustername)
specifier|public
name|Path
name|getTempPathForCluster
parameter_list|(
name|String
name|clustername
parameter_list|)
block|{
name|Path
name|clusterDir
init|=
name|buildClusterDirPath
argument_list|(
name|clustername
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|clusterDir
argument_list|,
name|YarnServiceConstants
operator|.
name|TMP_DIR_PREFIX
argument_list|)
return|;
block|}
comment|/**    * Returns the underlying FileSystem for this object.    *    * @return filesystem    */
DECL|method|getFileSystem ()
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|fileSystem
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"CoreFileSystem{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"fileSystem="
argument_list|)
operator|.
name|append
argument_list|(
name|fileSystem
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Build up the path string for a cluster instance -no attempt to    * create the directory is made    *    * @param clustername name of the cluster    * @return the path for persistent data    */
DECL|method|buildClusterDirPath (String clustername)
specifier|public
name|Path
name|buildClusterDirPath
parameter_list|(
name|String
name|clustername
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|clustername
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|getBaseApplicationPath
argument_list|()
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|YarnServiceConstants
operator|.
name|SERVICES_DIRECTORY
operator|+
literal|"/"
operator|+
name|clustername
argument_list|)
return|;
block|}
comment|/**    * Build up the upgrade path string for a cluster. No attempt to    * create the directory is made.    *    * @param clusterName name of the cluster    * @param version version of the cluster    * @return the upgrade path to the cluster    */
DECL|method|buildClusterUpgradeDirPath (String clusterName, String version)
specifier|public
name|Path
name|buildClusterUpgradeDirPath
parameter_list|(
name|String
name|clusterName
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|version
argument_list|)
expr_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|buildClusterDirPath
argument_list|(
name|clusterName
argument_list|)
argument_list|,
name|YarnServiceConstants
operator|.
name|UPGRADE_DIR
operator|+
literal|"/"
operator|+
name|version
argument_list|)
return|;
block|}
comment|/**    * Delete the upgrade cluster directory.    * @param clusterName name of the cluster    * @param version     version of the cluster    * @throws IOException    */
DECL|method|deleteClusterUpgradeDir (String clusterName, String version)
specifier|public
name|void
name|deleteClusterUpgradeDir
parameter_list|(
name|String
name|clusterName
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|Path
name|upgradeCluster
init|=
name|buildClusterUpgradeDirPath
argument_list|(
name|clusterName
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|fileSystem
operator|.
name|delete
argument_list|(
name|upgradeCluster
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Build up the path string for keytab install location -no attempt to    * create the directory is made    *    * @return the path for keytab    */
DECL|method|buildKeytabInstallationDirPath (String keytabFolder)
specifier|public
name|Path
name|buildKeytabInstallationDirPath
parameter_list|(
name|String
name|keytabFolder
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|keytabFolder
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|getBaseApplicationPath
argument_list|()
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|YarnServiceConstants
operator|.
name|KEYTAB_DIR
operator|+
literal|"/"
operator|+
name|keytabFolder
argument_list|)
return|;
block|}
comment|/**    * Build up the path string for keytab install location -no attempt to    * create the directory is made    *    * @return the path for keytab installation location    */
DECL|method|buildKeytabPath (String keytabDir, String keytabName, String clusterName)
specifier|public
name|Path
name|buildKeytabPath
parameter_list|(
name|String
name|keytabDir
parameter_list|,
name|String
name|keytabName
parameter_list|,
name|String
name|clusterName
parameter_list|)
block|{
name|Path
name|homePath
init|=
name|getHomeDirectory
argument_list|()
decl_stmt|;
name|Path
name|baseKeytabDir
decl_stmt|;
if|if
condition|(
name|keytabDir
operator|!=
literal|null
condition|)
block|{
name|baseKeytabDir
operator|=
operator|new
name|Path
argument_list|(
name|homePath
argument_list|,
name|keytabDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|baseKeytabDir
operator|=
operator|new
name|Path
argument_list|(
name|buildClusterDirPath
argument_list|(
name|clusterName
argument_list|)
argument_list|,
name|YarnServiceConstants
operator|.
name|KEYTAB_DIR
argument_list|)
expr_stmt|;
block|}
return|return
name|keytabName
operator|==
literal|null
condition|?
name|baseKeytabDir
else|:
operator|new
name|Path
argument_list|(
name|baseKeytabDir
argument_list|,
name|keytabName
argument_list|)
return|;
block|}
comment|/**    * Build up the path string for resource install location -no attempt to    * create the directory is made    *    * @return the path for resource    */
DECL|method|buildResourcePath (String resourceFolder)
specifier|public
name|Path
name|buildResourcePath
parameter_list|(
name|String
name|resourceFolder
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|resourceFolder
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|getBaseApplicationPath
argument_list|()
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|YarnServiceConstants
operator|.
name|RESOURCE_DIR
operator|+
literal|"/"
operator|+
name|resourceFolder
argument_list|)
return|;
block|}
comment|/**    * Build up the path string for resource install location -no attempt to    * create the directory is made    *    * @return the path for resource    */
DECL|method|buildResourcePath (String dirName, String fileName)
specifier|public
name|Path
name|buildResourcePath
parameter_list|(
name|String
name|dirName
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|getBaseApplicationPath
argument_list|()
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|YarnServiceConstants
operator|.
name|RESOURCE_DIR
operator|+
literal|"/"
operator|+
name|dirName
operator|+
literal|"/"
operator|+
name|fileName
argument_list|)
return|;
block|}
comment|/**    * Create a directory with the given permissions.    *    * @param dir          directory    * @param clusterPerms cluster permissions    * @throws IOException  IO problem    * @throws BadClusterStateException any cluster state problem    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|createWithPermissions (Path dir, FsPermission clusterPerms)
specifier|public
name|void
name|createWithPermissions
parameter_list|(
name|Path
name|dir
parameter_list|,
name|FsPermission
name|clusterPerms
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadClusterStateException
block|{
if|if
condition|(
name|fileSystem
operator|.
name|isFile
argument_list|(
name|dir
argument_list|)
condition|)
block|{
comment|// HADOOP-9361 shows some filesystems don't correctly fail here
throw|throw
operator|new
name|BadClusterStateException
argument_list|(
literal|"Cannot create a directory over a file %s"
argument_list|,
name|dir
argument_list|)
throw|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"mkdir {} with perms {}"
argument_list|,
name|dir
argument_list|,
name|clusterPerms
argument_list|)
expr_stmt|;
comment|//no mask whatoever
name|fileSystem
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
literal|"000"
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|,
name|clusterPerms
argument_list|)
expr_stmt|;
comment|//and force set it anyway just to make sure
name|fileSystem
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
name|clusterPerms
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that the cluster directory is not present    *    * @param clustername      name of the cluster    * @param clusterDirectory actual directory to look for    * @throws IOException trouble with FS    * @throws SliderException If the directory exists    */
DECL|method|verifyClusterDirectoryNonexistent (String clustername, Path clusterDirectory)
specifier|public
name|void
name|verifyClusterDirectoryNonexistent
parameter_list|(
name|String
name|clustername
parameter_list|,
name|Path
name|clusterDirectory
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
if|if
condition|(
name|fileSystem
operator|.
name|exists
argument_list|(
name|clusterDirectory
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
name|SliderExitCodes
operator|.
name|EXIT_INSTANCE_EXISTS
argument_list|,
name|ErrorStrings
operator|.
name|PRINTF_E_INSTANCE_ALREADY_EXISTS
argument_list|,
name|clustername
argument_list|,
name|clusterDirectory
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verify that the given directory is not present    *    * @param clusterDirectory actual directory to look for    * @throws IOException    trouble with FS    * @throws SliderException If the directory exists    */
DECL|method|verifyDirectoryNonexistent (Path clusterDirectory)
specifier|public
name|void
name|verifyDirectoryNonexistent
parameter_list|(
name|Path
name|clusterDirectory
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
if|if
condition|(
name|fileSystem
operator|.
name|exists
argument_list|(
name|clusterDirectory
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Dir {} exists: {}"
argument_list|,
name|clusterDirectory
argument_list|,
name|listFSDir
argument_list|(
name|clusterDirectory
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SliderException
argument_list|(
name|SliderExitCodes
operator|.
name|EXIT_INSTANCE_EXISTS
argument_list|,
name|ErrorStrings
operator|.
name|PRINTF_E_INSTANCE_DIR_ALREADY_EXISTS
argument_list|,
name|clusterDirectory
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verify that a user has write access to a directory.    * It does this by creating then deleting a temp file    *    * @param dirPath actual directory to look for    * @throws FileNotFoundException file not found    * @throws IOException  trouble with FS    * @throws BadClusterStateException if the directory is not writeable    */
DECL|method|verifyDirectoryWriteAccess (Path dirPath)
specifier|public
name|void
name|verifyDirectoryWriteAccess
parameter_list|(
name|Path
name|dirPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|verifyPathExists
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|Path
name|tempFile
init|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|"tmp-file-for-checks"
argument_list|)
decl_stmt|;
try|try
block|{
name|FSDataOutputStream
name|out
decl_stmt|;
name|out
operator|=
name|fileSystem
operator|.
name|create
argument_list|(
name|tempFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|delete
argument_list|(
name|tempFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to create file {}: {}"
argument_list|,
name|tempFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BadClusterStateException
argument_list|(
name|e
argument_list|,
literal|"Unable to write to directory %s : %s"
argument_list|,
name|dirPath
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verify that a path exists    * @param path path to check    * @throws FileNotFoundException file not found    * @throws IOException  trouble with FS    */
DECL|method|verifyPathExists (Path path)
specifier|public
name|void
name|verifyPathExists
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verify that a path exists    * @param path path to check    * @throws FileNotFoundException file not found or is not a file    * @throws IOException  trouble with FS    */
DECL|method|verifyFileExists (Path path)
specifier|public
name|void
name|verifyFileExists
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
name|fileSystem
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|status
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Not a file: "
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Given a path, check if it exists and is a file    *     * @param path    *          absolute path to the file to check    * @return true if and only if path exists and is a file, false for all other    *          reasons including if file check throws IOException    */
DECL|method|isFile (Path path)
specifier|public
name|boolean
name|isFile
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|isFile
init|=
literal|false
decl_stmt|;
try|try
block|{
name|FileStatus
name|status
init|=
name|fileSystem
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|isFile
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore, isFile is already set to false
block|}
return|return
name|isFile
return|;
block|}
comment|/**    * Get the base path    *    * @return the base path optionally configured by     * {@link YarnServiceConf#YARN_SERVICE_BASE_PATH}    */
DECL|method|getBaseApplicationPath ()
specifier|public
name|Path
name|getBaseApplicationPath
parameter_list|()
block|{
name|String
name|configuredBasePath
init|=
name|configuration
operator|.
name|get
argument_list|(
name|YarnServiceConf
operator|.
name|YARN_SERVICE_BASE_PATH
argument_list|,
name|getHomeDirectory
argument_list|()
operator|+
literal|"/"
operator|+
name|YarnServiceConstants
operator|.
name|SERVICE_BASE_DIRECTORY
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|configuredBasePath
argument_list|)
return|;
block|}
comment|/**    * Get service dependency absolute filepath in HDFS used for application    * submission.    *     * @return the absolute path to service dependency tarball in HDFS    */
DECL|method|getDependencyTarGzip ()
specifier|public
name|Path
name|getDependencyTarGzip
parameter_list|()
block|{
name|Path
name|dependencyLibTarGzip
init|=
literal|null
decl_stmt|;
name|String
name|configuredDependencyTarballPath
init|=
name|configuration
operator|.
name|get
argument_list|(
name|YarnServiceConf
operator|.
name|DEPENDENCY_TARBALL_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuredDependencyTarballPath
operator|!=
literal|null
condition|)
block|{
name|dependencyLibTarGzip
operator|=
operator|new
name|Path
argument_list|(
name|configuredDependencyTarballPath
argument_list|)
expr_stmt|;
block|}
return|return
name|dependencyLibTarGzip
return|;
block|}
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
return|return
name|fileSystem
operator|.
name|getHomeDirectory
argument_list|()
return|;
block|}
comment|/**    * Create an AM resource from the    *    * @param destPath     dest path in filesystem    * @param resourceType resource type    * @return the local resource for AM    */
DECL|method|createAmResource (Path destPath, LocalResourceType resourceType)
specifier|public
name|LocalResource
name|createAmResource
parameter_list|(
name|Path
name|destPath
parameter_list|,
name|LocalResourceType
name|resourceType
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|destStatus
init|=
name|fileSystem
operator|.
name|getFileStatus
argument_list|(
name|destPath
argument_list|)
decl_stmt|;
name|LocalResource
name|amResource
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|amResource
operator|.
name|setType
argument_list|(
name|resourceType
argument_list|)
expr_stmt|;
comment|// Set visibility of the resource
comment|// Setting to most private option
name|amResource
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
comment|// Set the resource to be copied over
name|amResource
operator|.
name|setResource
argument_list|(
name|URL
operator|.
name|fromPath
argument_list|(
name|fileSystem
operator|.
name|resolvePath
argument_list|(
name|destStatus
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set timestamp and length of file so that the framework
comment|// can do basic sanity checks for the local resource
comment|// after it has been copied over to ensure it is the same
comment|// resource the client intended to use with the service
name|amResource
operator|.
name|setTimestamp
argument_list|(
name|destStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|amResource
operator|.
name|setSize
argument_list|(
name|destStatus
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|amResource
return|;
block|}
comment|/**    * Register all files under a fs path as a directory to push out    *    * @param srcDir          src dir    * @param destRelativeDir dest dir (no trailing /)    * @return the map of entries    */
DECL|method|submitDirectory (Path srcDir, String destRelativeDir)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|submitDirectory
parameter_list|(
name|Path
name|srcDir
parameter_list|,
name|String
name|destRelativeDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|//now register each of the files in the directory to be
comment|//copied to the destination
name|FileStatus
index|[]
name|fileset
init|=
name|fileSystem
operator|.
name|listStatus
argument_list|(
name|srcDir
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|(
name|fileset
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|entry
range|:
name|fileset
control|)
block|{
name|LocalResource
name|resource
init|=
name|createAmResource
argument_list|(
name|entry
operator|.
name|getPath
argument_list|()
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|String
name|relativePath
init|=
name|destRelativeDir
operator|+
literal|"/"
operator|+
name|entry
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|relativePath
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
return|return
name|localResources
return|;
block|}
comment|/**    * Submit a JAR containing a specific class, returning    * the resource to be mapped in    *    * @param clazz   class to look for    * @param subdir  subdirectory (expected to end in a "/")    * @param jarName<i>At the destination</i>    * @return the local resource ref    * @throws IOException trouble copying to HDFS    */
DECL|method|submitJarWithClass (Class clazz, Path tempPath, String subdir, String jarName)
specifier|public
name|LocalResource
name|submitJarWithClass
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|Path
name|tempPath
parameter_list|,
name|String
name|subdir
parameter_list|,
name|String
name|jarName
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|File
name|localFile
init|=
name|ServiceUtils
operator|.
name|findContainingJarOrFail
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
return|return
name|submitFile
argument_list|(
name|localFile
argument_list|,
name|tempPath
argument_list|,
name|subdir
argument_list|,
name|jarName
argument_list|)
return|;
block|}
comment|/**    * Submit a local file to the filesystem references by the instance's cluster    * filesystem    *    * @param localFile    filename    * @param subdir       subdirectory (expected to end in a "/")    * @param destFileName destination filename    * @return the local resource ref    * @throws IOException trouble copying to HDFS    */
DECL|method|submitFile (File localFile, Path tempPath, String subdir, String destFileName)
specifier|public
name|LocalResource
name|submitFile
parameter_list|(
name|File
name|localFile
parameter_list|,
name|Path
name|tempPath
parameter_list|,
name|String
name|subdir
parameter_list|,
name|String
name|destFileName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|localFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|subdirPath
init|=
operator|new
name|Path
argument_list|(
name|tempPath
argument_list|,
name|subdir
argument_list|)
decl_stmt|;
name|fileSystem
operator|.
name|mkdirs
argument_list|(
name|subdirPath
argument_list|)
expr_stmt|;
name|Path
name|destPath
init|=
operator|new
name|Path
argument_list|(
name|subdirPath
argument_list|,
name|destFileName
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Copying {} (size={} bytes) to {}"
argument_list|,
name|localFile
argument_list|,
name|localFile
operator|.
name|length
argument_list|()
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|src
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
comment|// Set the type of resource - file or archive
comment|// archives are untarred at destination
comment|// we don't need the jar file to be untarred for now
return|return
name|createAmResource
argument_list|(
name|destPath
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
return|;
block|}
comment|/**    * Submit the AM tar.gz resource referenced by the instance's cluster    * filesystem. Also, update the providerResources object with the new    * resource.    *     * @param providerResources    *          the provider resource map to be updated    * @throws IOException    *           trouble copying to HDFS    */
DECL|method|submitTarGzipAndUpdate ( Map<String, LocalResource> providerResources)
specifier|public
name|void
name|submitTarGzipAndUpdate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|providerResources
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadClusterStateException
block|{
name|Path
name|dependencyLibTarGzip
init|=
name|getDependencyTarGzip
argument_list|()
decl_stmt|;
name|LocalResource
name|lc
init|=
name|createAmResource
argument_list|(
name|dependencyLibTarGzip
argument_list|,
name|LocalResourceType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|providerResources
operator|.
name|put
argument_list|(
name|YarnServiceConstants
operator|.
name|DEPENDENCY_LOCALIZED_DIR_LINK
argument_list|,
name|lc
argument_list|)
expr_stmt|;
block|}
DECL|method|copyLocalFileToHdfs (File localPath, Path destPath, FsPermission fp)
specifier|public
name|void
name|copyLocalFileToHdfs
parameter_list|(
name|File
name|localPath
parameter_list|,
name|Path
name|destPath
parameter_list|,
name|FsPermission
name|fp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|localPath
operator|==
literal|null
operator|||
name|destPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Either localPath or destPath is null"
argument_list|)
throw|;
block|}
name|fileSystem
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
literal|"000"
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|mkdirs
argument_list|(
name|destPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|fp
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying file {} to {}"
argument_list|,
name|localPath
operator|.
name|toURI
argument_list|()
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
name|localPath
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
comment|// set file permissions of the destPath
name|fileSystem
operator|.
name|setPermission
argument_list|(
name|destPath
argument_list|,
name|fp
argument_list|)
expr_stmt|;
block|}
DECL|method|copyHdfsFileToLocal (Path hdfsPath, File destFile)
specifier|public
name|void
name|copyHdfsFileToLocal
parameter_list|(
name|Path
name|hdfsPath
parameter_list|,
name|File
name|destFile
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hdfsPath
operator|==
literal|null
operator|||
name|destFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Either hdfsPath or destPath is null"
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Copying file {} to {}"
argument_list|,
name|hdfsPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|destFile
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|destPath
init|=
operator|new
name|Path
argument_list|(
name|destFile
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|fileSystem
operator|.
name|copyToLocalFile
argument_list|(
name|hdfsPath
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * list entries in a filesystem directory    *    * @param path directory    * @return a listing, one to a line    * @throws IOException    */
DECL|method|listFSDir (Path path)
specifier|public
name|String
name|listFSDir
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|stats
init|=
name|fileSystem
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|stat
range|:
name|stats
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|cat (Path path)
specifier|public
name|String
name|cat
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
name|fileSystem
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|status
operator|.
name|getLen
argument_list|()
index|]
decl_stmt|;
name|FSDataInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|fileSystem
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|count
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

