begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|utils
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|retry
operator|.
name|RetryNTimes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperationsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateApplicationTimeoutsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AppAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClientApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|cli
operator|.
name|ApplicationCLI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|util
operator|.
name|YarnClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ClientAMProtocol
operator|.
name|CancelUpgradeRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ClientAMProtocol
operator|.
name|CompInstancesUpgradeRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ClientAMProtocol
operator|.
name|ComponentCountProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ClientAMProtocol
operator|.
name|DecommissionCompInstancesRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ClientAMProtocol
operator|.
name|FlexComponentsRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ClientAMProtocol
operator|.
name|GetCompInstancesRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ClientAMProtocol
operator|.
name|GetCompInstancesResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ClientAMProtocol
operator|.
name|GetStatusRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ClientAMProtocol
operator|.
name|GetStatusResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ClientAMProtocol
operator|.
name|RestartServiceRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ClientAMProtocol
operator|.
name|StopRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ClientAMProtocol
operator|.
name|UpgradeServiceRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ClientAMProtocol
operator|.
name|UpgradeServiceResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ClientAMProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ComponentContainers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ConfigFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ConfigFile
operator|.
name|TypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|SliderExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|containerlaunch
operator|.
name|ClasspathConstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|containerlaunch
operator|.
name|JavaCommandLineBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|BadClusterStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|ErrorStrings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|AbstractClientProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceRegistryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ZookeeperUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|DockerClientConfigHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConf
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
operator|.
name|jsonSerDeser
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceUtils
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ServiceClient
specifier|public
class|class
name|ServiceClient
extends|extends
name|AppAdminClient
implements|implements
name|SliderExitCodes
implements|,
name|YarnServiceConstants
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ServiceClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
name|SliderFileSystem
name|fs
decl_stmt|;
comment|//TODO disable retry so that client / rest API doesn't block?
DECL|field|yarnClient
specifier|protected
name|YarnClient
name|yarnClient
decl_stmt|;
comment|// Avoid looking up applicationId from fs all the time.
DECL|field|cachedAppInfo
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AppInfo
argument_list|>
name|cachedAppInfo
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|registryClient
specifier|private
name|RegistryOperations
name|registryClient
decl_stmt|;
DECL|field|curatorClient
specifier|private
name|CuratorFramework
name|curatorClient
decl_stmt|;
DECL|field|rpc
specifier|private
name|YarnRPC
name|rpc
decl_stmt|;
DECL|field|terminatedStates
specifier|private
specifier|static
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|terminatedStates
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|FINISHED
argument_list|,
name|FAILED
argument_list|,
name|KILLED
argument_list|)
decl_stmt|;
DECL|field|liveStates
specifier|private
specifier|static
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|liveStates
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|NEW
argument_list|,
name|NEW_SAVING
argument_list|,
name|SUBMITTED
argument_list|,
name|ACCEPTED
argument_list|,
name|RUNNING
argument_list|)
decl_stmt|;
DECL|field|preRunningStates
specifier|private
specifier|static
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|preRunningStates
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|NEW
argument_list|,
name|NEW_SAVING
argument_list|,
name|SUBMITTED
argument_list|,
name|ACCEPTED
argument_list|)
decl_stmt|;
DECL|method|serviceInit (Configuration configuration)
annotation|@
name|Override
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|fs
operator|=
operator|new
name|SliderFileSystem
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|yarnClient
operator|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
expr_stmt|;
name|rpc
operator|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|yarnClient
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|registryClient
operator|!=
literal|null
condition|)
block|{
name|registryClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|fs
operator|.
name|getFileSystem
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|loadAppJsonFromLocalFS (String fileName, String serviceName, Long lifetime, String queue)
specifier|public
name|Service
name|loadAppJsonFromLocalFS
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|Long
name|lifetime
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|&&
name|fileName
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|examplesDirStr
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"YARN_SERVICE_EXAMPLES_DIR"
argument_list|)
decl_stmt|;
name|String
index|[]
name|examplesDirs
decl_stmt|;
if|if
condition|(
name|examplesDirStr
operator|==
literal|null
condition|)
block|{
name|String
name|yarnHome
init|=
name|System
operator|.
name|getenv
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_YARN_HOME
operator|.
name|key
argument_list|()
argument_list|)
decl_stmt|;
name|examplesDirs
operator|=
operator|new
name|String
index|[]
block|{
name|yarnHome
operator|+
literal|"/share/hadoop/yarn/yarn-service-examples"
block|,
name|yarnHome
operator|+
literal|"/yarn-service-examples"
block|}
expr_stmt|;
block|}
else|else
block|{
name|examplesDirs
operator|=
name|StringUtils
operator|.
name|split
argument_list|(
name|examplesDirStr
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|dir
range|:
name|examplesDirs
control|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"{0}/{1}/{2}.json"
argument_list|,
name|dir
argument_list|,
name|fileName
argument_list|,
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
break|break;
block|}
comment|// Then look for secondary location.
name|file
operator|=
operator|new
name|File
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"{0}/{1}.json"
argument_list|,
name|dir
argument_list|,
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"File or example could not be found: "
operator|+
name|fileName
argument_list|)
throw|;
block|}
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading service definition from local FS: "
operator|+
name|filePath
argument_list|)
expr_stmt|;
name|Service
name|service
init|=
name|jsonSerDeser
operator|.
name|load
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|getConfig
argument_list|()
argument_list|)
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|serviceName
argument_list|)
condition|)
block|{
name|service
operator|.
name|setName
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lifetime
operator|!=
literal|null
operator|&&
name|lifetime
operator|>
literal|0
condition|)
block|{
name|service
operator|.
name|setLifetime
argument_list|(
name|lifetime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|queue
argument_list|)
condition|)
block|{
name|service
operator|.
name|setQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
return|return
name|service
return|;
block|}
annotation|@
name|Override
DECL|method|actionSave (String fileName, String serviceName, Long lifetime, String queue)
specifier|public
name|int
name|actionSave
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|Long
name|lifetime
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
return|return
name|actionBuild
argument_list|(
name|loadAppJsonFromLocalFS
argument_list|(
name|fileName
argument_list|,
name|serviceName
argument_list|,
name|lifetime
argument_list|,
name|queue
argument_list|)
argument_list|)
return|;
block|}
DECL|method|actionBuild (Service service)
specifier|public
name|int
name|actionBuild
parameter_list|(
name|Service
name|service
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ServiceApiUtil
operator|.
name|validateAndResolveService
argument_list|(
name|service
argument_list|,
name|fs
argument_list|,
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|appDir
init|=
name|checkAppNotExistOnHdfs
argument_list|(
name|service
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ServiceApiUtil
operator|.
name|createDirAndPersistApp
argument_list|(
name|fs
argument_list|,
name|appDir
argument_list|,
name|service
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
DECL|method|upgradePrecheck (Service service)
specifier|private
name|ApplicationReport
name|upgradePrecheck
parameter_list|(
name|Service
name|service
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|boolean
name|upgradeEnabled
init|=
name|getConfig
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|YARN_SERVICE_UPGRADE_ENABLED
argument_list|,
name|YARN_SERVICE_UPGRADE_ENABLED_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|upgradeEnabled
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|ErrorStrings
operator|.
name|SERVICE_UPGRADE_DISABLED
argument_list|)
throw|;
block|}
name|Service
name|persistedService
init|=
name|ServiceApiUtil
operator|.
name|loadService
argument_list|(
name|fs
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|persistedService
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|cachedAppInfo
operator|.
name|put
argument_list|(
name|persistedService
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|AppInfo
argument_list|(
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|persistedService
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|persistedService
operator|.
name|getKerberosPrincipal
argument_list|()
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|persistedService
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|service
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|message
init|=
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|" is already at version "
operator|+
name|service
operator|.
name|getVersion
argument_list|()
operator|+
literal|". There is nothing to upgrade."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|boolean
name|foundNotNeverComp
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Component
name|comp
range|:
name|persistedService
operator|.
name|getComponents
argument_list|()
control|)
block|{
comment|// If restart policy of any component is not NEVER then upgrade is
comment|// allowed.
if|if
condition|(
operator|!
name|comp
operator|.
name|getRestartPolicy
argument_list|()
operator|.
name|equals
argument_list|(
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|NEVER
argument_list|)
condition|)
block|{
name|foundNotNeverComp
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|foundNotNeverComp
condition|)
block|{
name|String
name|message
init|=
literal|"All the components of the service "
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|" have "
operator|+
name|Component
operator|.
name|RestartPolicyEnum
operator|.
name|NEVER
operator|+
literal|" restart policy, "
operator|+
literal|"so it cannot be upgraded."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|Service
name|liveService
init|=
name|getStatus
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|liveService
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|STABLE
argument_list|)
condition|)
block|{
name|String
name|message
init|=
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|" is at "
operator|+
name|liveService
operator|.
name|getState
argument_list|()
operator|+
literal|" state and upgrade can only be initiated when service is STABLE."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|Path
name|serviceUpgradeDir
init|=
name|checkAppNotExistOnHdfs
argument_list|(
name|service
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ServiceApiUtil
operator|.
name|validateAndResolveService
argument_list|(
name|service
argument_list|,
name|fs
argument_list|,
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceApiUtil
operator|.
name|createDirAndPersistApp
argument_list|(
name|fs
argument_list|,
name|serviceUpgradeDir
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|ApplicationReport
name|appReport
init|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|getAppId
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|appReport
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|" AM hostname is empty"
argument_list|)
throw|;
block|}
return|return
name|appReport
return|;
block|}
annotation|@
name|Override
DECL|method|actionUpgradeExpress (String appName, File path)
specifier|public
name|int
name|actionUpgradeExpress
parameter_list|(
name|String
name|appName
parameter_list|,
name|File
name|path
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|Service
name|service
init|=
name|loadAppJsonFromLocalFS
argument_list|(
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|appName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|service
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|UPGRADING_AUTO_FINALIZE
argument_list|)
expr_stmt|;
name|actionUpgradeExpress
argument_list|(
name|service
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
DECL|method|actionUpgradeExpress (Service service)
specifier|public
name|int
name|actionUpgradeExpress
parameter_list|(
name|Service
name|service
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationReport
name|appReport
init|=
name|upgradePrecheck
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ClientAMProtocol
name|proxy
init|=
name|createAMProxy
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|appReport
argument_list|)
decl_stmt|;
name|UpgradeServiceRequestProto
operator|.
name|Builder
name|requestBuilder
init|=
name|UpgradeServiceRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|requestBuilder
operator|.
name|setVersion
argument_list|(
name|service
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|service
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|UPGRADING_AUTO_FINALIZE
argument_list|)
condition|)
block|{
name|requestBuilder
operator|.
name|setAutoFinalize
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|service
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|EXPRESS_UPGRADING
argument_list|)
condition|)
block|{
name|requestBuilder
operator|.
name|setExpressUpgrade
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|requestBuilder
operator|.
name|setAutoFinalize
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|UpgradeServiceResponseProto
name|responseProto
init|=
name|proxy
operator|.
name|upgrade
argument_list|(
name|requestBuilder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseProto
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Service {} express upgrade to version {} failed because {}"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|service
operator|.
name|getVersion
argument_list|()
argument_list|,
name|responseProto
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Failed to express upgrade service "
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|" to version "
operator|+
name|service
operator|.
name|getVersion
argument_list|()
operator|+
literal|" because "
operator|+
name|responseProto
operator|.
name|getError
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|EXIT_SUCCESS
return|;
block|}
annotation|@
name|Override
DECL|method|initiateUpgrade (String appName, String fileName, boolean autoFinalize)
specifier|public
name|int
name|initiateUpgrade
parameter_list|(
name|String
name|appName
parameter_list|,
name|String
name|fileName
parameter_list|,
name|boolean
name|autoFinalize
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|Service
name|upgradeService
init|=
name|loadAppJsonFromLocalFS
argument_list|(
name|fileName
argument_list|,
name|appName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|autoFinalize
condition|)
block|{
name|upgradeService
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|UPGRADING_AUTO_FINALIZE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|upgradeService
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|UPGRADING
argument_list|)
expr_stmt|;
block|}
return|return
name|initiateUpgrade
argument_list|(
name|upgradeService
argument_list|)
return|;
block|}
DECL|method|initiateUpgrade (Service service)
specifier|public
name|int
name|initiateUpgrade
parameter_list|(
name|Service
name|service
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationReport
name|appReport
init|=
name|upgradePrecheck
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ClientAMProtocol
name|proxy
init|=
name|createAMProxy
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|appReport
argument_list|)
decl_stmt|;
name|UpgradeServiceRequestProto
operator|.
name|Builder
name|requestBuilder
init|=
name|UpgradeServiceRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|requestBuilder
operator|.
name|setVersion
argument_list|(
name|service
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|service
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|UPGRADING_AUTO_FINALIZE
argument_list|)
condition|)
block|{
name|requestBuilder
operator|.
name|setAutoFinalize
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|UpgradeServiceResponseProto
name|responseProto
init|=
name|proxy
operator|.
name|upgrade
argument_list|(
name|requestBuilder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseProto
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Service {} upgrade to version {} failed because {}"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|service
operator|.
name|getVersion
argument_list|()
argument_list|,
name|responseProto
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Failed to upgrade service "
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|" to version "
operator|+
name|service
operator|.
name|getVersion
argument_list|()
operator|+
literal|" because "
operator|+
name|responseProto
operator|.
name|getError
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|EXIT_SUCCESS
return|;
block|}
annotation|@
name|Override
DECL|method|actionUpgradeInstances (String appName, List<String> componentInstances)
specifier|public
name|int
name|actionUpgradeInstances
parameter_list|(
name|String
name|appName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|componentInstances
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|checkAppExistOnHdfs
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|Service
name|persistedService
init|=
name|ServiceApiUtil
operator|.
name|loadService
argument_list|(
name|fs
argument_list|,
name|appName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containersToUpgrade
init|=
name|ServiceApiUtil
operator|.
name|getLiveContainers
argument_list|(
name|persistedService
argument_list|,
name|componentInstances
argument_list|)
decl_stmt|;
name|ServiceApiUtil
operator|.
name|validateInstancesUpgrade
argument_list|(
name|containersToUpgrade
argument_list|)
expr_stmt|;
return|return
name|actionUpgrade
argument_list|(
name|persistedService
argument_list|,
name|containersToUpgrade
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|actionUpgradeComponents (String appName, List<String> components)
specifier|public
name|int
name|actionUpgradeComponents
parameter_list|(
name|String
name|appName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|components
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|checkAppExistOnHdfs
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|Service
name|persistedService
init|=
name|ServiceApiUtil
operator|.
name|loadService
argument_list|(
name|fs
argument_list|,
name|appName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containersToUpgrade
init|=
name|ServiceApiUtil
operator|.
name|validateAndResolveCompsUpgrade
argument_list|(
name|persistedService
argument_list|,
name|components
argument_list|)
decl_stmt|;
return|return
name|actionUpgrade
argument_list|(
name|persistedService
argument_list|,
name|containersToUpgrade
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|actionCancelUpgrade (String appName)
specifier|public
name|int
name|actionCancelUpgrade
parameter_list|(
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|Service
name|liveService
init|=
name|getStatus
argument_list|(
name|appName
argument_list|)
decl_stmt|;
if|if
condition|(
name|liveService
operator|==
literal|null
operator|||
operator|!
name|ServiceState
operator|.
name|isUpgrading
argument_list|(
name|liveService
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Service "
operator|+
name|appName
operator|+
literal|" is not upgrading, "
operator|+
literal|"so nothing to cancel."
argument_list|)
throw|;
block|}
name|ApplicationReport
name|appReport
init|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|getAppId
argument_list|(
name|appName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|appReport
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|appName
operator|+
literal|" AM hostname is empty"
argument_list|)
throw|;
block|}
name|ClientAMProtocol
name|proxy
init|=
name|createAMProxy
argument_list|(
name|appName
argument_list|,
name|appReport
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|cancelUpgrade
argument_list|(
name|CancelUpgradeRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
annotation|@
name|Override
DECL|method|actionDecommissionInstances (String appName, List<String> componentInstances)
specifier|public
name|int
name|actionDecommissionInstances
parameter_list|(
name|String
name|appName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|componentInstances
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|checkAppExistOnHdfs
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|Service
name|persistedService
init|=
name|ServiceApiUtil
operator|.
name|loadService
argument_list|(
name|fs
argument_list|,
name|appName
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|persistedService
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|persistedService
operator|.
name|getName
argument_list|()
operator|+
literal|" appId is null, may be not submitted "
operator|+
literal|"to YARN yet"
argument_list|)
throw|;
block|}
name|cachedAppInfo
operator|.
name|put
argument_list|(
name|persistedService
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|AppInfo
argument_list|(
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|persistedService
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|persistedService
operator|.
name|getKerberosPrincipal
argument_list|()
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|instance
range|:
name|componentInstances
control|)
block|{
name|String
name|componentName
init|=
name|ServiceApiUtil
operator|.
name|parseComponentName
argument_list|(
name|ServiceApiUtil
operator|.
name|parseAndValidateComponentInstanceName
argument_list|(
name|instance
argument_list|,
name|appName
argument_list|,
name|getConfig
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Component
name|component
init|=
name|persistedService
operator|.
name|getComponent
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|instance
operator|+
literal|" does not exist !"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|component
operator|.
name|getDecommissionedInstances
argument_list|()
operator|.
name|contains
argument_list|(
name|instance
argument_list|)
condition|)
block|{
name|component
operator|.
name|addDecommissionedInstance
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|component
operator|.
name|setNumberOfContainers
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|component
operator|.
name|getNumberOfContainers
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ServiceApiUtil
operator|.
name|writeAppDefinition
argument_list|(
name|fs
argument_list|,
name|persistedService
argument_list|)
expr_stmt|;
name|ApplicationReport
name|appReport
init|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|persistedService
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|!=
name|RUNNING
condition|)
block|{
name|String
name|message
init|=
name|persistedService
operator|.
name|getName
argument_list|()
operator|+
literal|" is at "
operator|+
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|+
literal|" state, decommission can only be "
operator|+
literal|"invoked when service is running"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|appReport
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|persistedService
operator|.
name|getName
argument_list|()
operator|+
literal|" AM hostname is "
operator|+
literal|"empty"
argument_list|)
throw|;
block|}
name|ClientAMProtocol
name|proxy
init|=
name|createAMProxy
argument_list|(
name|persistedService
operator|.
name|getName
argument_list|()
argument_list|,
name|appReport
argument_list|)
decl_stmt|;
name|DecommissionCompInstancesRequestProto
operator|.
name|Builder
name|requestBuilder
init|=
name|DecommissionCompInstancesRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|requestBuilder
operator|.
name|addAllCompInstances
argument_list|(
name|componentInstances
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|decommissionCompInstances
argument_list|(
name|requestBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
annotation|@
name|Override
DECL|method|actionCleanUp (String appName, String userName)
specifier|public
name|int
name|actionCleanUp
parameter_list|(
name|String
name|appName
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
if|if
condition|(
name|cleanUpRegistry
argument_list|(
name|appName
argument_list|,
name|userName
argument_list|)
condition|)
block|{
return|return
name|EXIT_SUCCESS
return|;
block|}
else|else
block|{
return|return
name|EXIT_FALSE
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getInstances (String appName, List<String> components, String version, List<String> containerStates)
specifier|public
name|String
name|getInstances
parameter_list|(
name|String
name|appName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|components
parameter_list|,
name|String
name|version
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|containerStates
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|GetCompInstancesResponseProto
name|result
init|=
name|filterContainers
argument_list|(
name|appName
argument_list|,
name|components
argument_list|,
name|version
argument_list|,
name|containerStates
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|getCompInstances
argument_list|()
return|;
block|}
DECL|method|getContainers (String appName, List<String> components, String version, List<ContainerState> containerStates)
specifier|public
name|ComponentContainers
index|[]
name|getContainers
parameter_list|(
name|String
name|appName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|components
parameter_list|,
name|String
name|version
parameter_list|,
name|List
argument_list|<
name|ContainerState
argument_list|>
name|containerStates
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|GetCompInstancesResponseProto
name|result
init|=
name|filterContainers
argument_list|(
name|appName
argument_list|,
name|components
argument_list|,
name|version
argument_list|,
name|containerStates
operator|!=
literal|null
condition|?
name|containerStates
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Enum
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
decl_stmt|;
return|return
name|ServiceApiUtil
operator|.
name|COMP_CONTAINERS_JSON_SERDE
operator|.
name|fromJson
argument_list|(
name|result
operator|.
name|getCompInstances
argument_list|()
argument_list|)
return|;
block|}
DECL|method|filterContainers (String appName, List<String> components, String version, List<String> containerStates)
specifier|private
name|GetCompInstancesResponseProto
name|filterContainers
parameter_list|(
name|String
name|appName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|components
parameter_list|,
name|String
name|version
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|containerStates
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|ApplicationReport
name|appReport
init|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|getAppId
argument_list|(
name|appName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|appReport
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|appName
operator|+
literal|" AM hostname is empty."
argument_list|)
throw|;
block|}
name|ClientAMProtocol
name|proxy
init|=
name|createAMProxy
argument_list|(
name|appName
argument_list|,
name|appReport
argument_list|)
decl_stmt|;
name|GetCompInstancesRequestProto
operator|.
name|Builder
name|req
init|=
name|GetCompInstancesRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|components
operator|!=
literal|null
operator|&&
operator|!
name|components
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|req
operator|.
name|addAllComponentNames
argument_list|(
name|components
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|req
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containerStates
operator|!=
literal|null
operator|&&
operator|!
name|containerStates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|req
operator|.
name|addAllContainerStates
argument_list|(
name|containerStates
argument_list|)
expr_stmt|;
block|}
return|return
name|proxy
operator|.
name|getCompInstances
argument_list|(
name|req
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|actionUpgrade (Service service, List<Container> compInstances)
specifier|public
name|int
name|actionUpgrade
parameter_list|(
name|Service
name|service
parameter_list|,
name|List
argument_list|<
name|Container
argument_list|>
name|compInstances
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|ApplicationReport
name|appReport
init|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|getAppId
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|!=
name|RUNNING
condition|)
block|{
name|String
name|message
init|=
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|" is at "
operator|+
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|+
literal|" state, upgrade can only be invoked when service is running."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|appReport
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|" AM hostname is empty."
argument_list|)
throw|;
block|}
name|ClientAMProtocol
name|proxy
init|=
name|createAMProxy
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|appReport
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|containerIdsToUpgrade
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|compInstances
operator|.
name|forEach
argument_list|(
name|compInst
lambda|->
name|containerIdsToUpgrade
operator|.
name|add
argument_list|(
name|compInst
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"instances to upgrade {}"
argument_list|,
name|containerIdsToUpgrade
argument_list|)
expr_stmt|;
name|CompInstancesUpgradeRequestProto
operator|.
name|Builder
name|upgradeRequestBuilder
init|=
name|CompInstancesUpgradeRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|upgradeRequestBuilder
operator|.
name|addAllContainerIds
argument_list|(
name|containerIdsToUpgrade
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|upgrade
argument_list|(
name|upgradeRequestBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
DECL|method|actionLaunch (String fileName, String serviceName, Long lifetime, String queue)
specifier|public
name|int
name|actionLaunch
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|Long
name|lifetime
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|actionCreate
argument_list|(
name|loadAppJsonFromLocalFS
argument_list|(
name|fileName
argument_list|,
name|serviceName
argument_list|,
name|lifetime
argument_list|,
name|queue
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
DECL|method|actionCreate (Service service)
specifier|public
name|ApplicationId
name|actionCreate
parameter_list|(
name|Service
name|service
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|String
name|serviceName
init|=
name|service
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ServiceApiUtil
operator|.
name|validateAndResolveService
argument_list|(
name|service
argument_list|,
name|fs
argument_list|,
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNoLiveAppInRM
argument_list|(
name|serviceName
argument_list|,
literal|"create"
argument_list|)
expr_stmt|;
name|Path
name|appDir
init|=
name|checkAppNotExistOnHdfs
argument_list|(
name|service
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Write the definition first and then submit - AM will read the definition
name|ServiceApiUtil
operator|.
name|createDirAndPersistApp
argument_list|(
name|fs
argument_list|,
name|appDir
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|submitApp
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|cachedAppInfo
operator|.
name|put
argument_list|(
name|serviceName
argument_list|,
operator|new
name|AppInfo
argument_list|(
name|appId
argument_list|,
name|service
operator|.
name|getKerberosPrincipal
argument_list|()
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|service
operator|.
name|setId
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// update app definition with appId
name|ServiceApiUtil
operator|.
name|writeAppDefinition
argument_list|(
name|fs
argument_list|,
name|appDir
argument_list|,
name|service
argument_list|)
expr_stmt|;
return|return
name|appId
return|;
block|}
DECL|method|actionFlex (String serviceName, Map<String, String> componentCountStrings)
specifier|public
name|int
name|actionFlex
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|componentCountStrings
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|componentCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|componentCountStrings
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|persistedService
init|=
name|ServiceApiUtil
operator|.
name|loadService
argument_list|(
name|fs
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|persistedService
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|cachedAppInfo
operator|.
name|put
argument_list|(
name|persistedService
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|AppInfo
argument_list|(
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|persistedService
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|persistedService
operator|.
name|getKerberosPrincipal
argument_list|()
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|persistedService
operator|.
name|getName
argument_list|()
operator|+
literal|" appId is null, may be not submitted to YARN yet"
argument_list|)
throw|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|componentCountStrings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|compName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ServiceApiUtil
operator|.
name|validateNameFormat
argument_list|(
name|compName
argument_list|,
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|Component
name|component
init|=
name|persistedService
operator|.
name|getComponent
argument_list|(
name|compName
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" does not exist !"
argument_list|)
throw|;
block|}
name|long
name|numberOfContainers
init|=
name|parseNumberOfContainers
argument_list|(
name|component
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|componentCounts
operator|.
name|put
argument_list|(
name|compName
argument_list|,
name|numberOfContainers
argument_list|)
expr_stmt|;
block|}
name|flexComponents
argument_list|(
name|serviceName
argument_list|,
name|componentCounts
argument_list|,
name|persistedService
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
comment|// Parse the number of containers requested by user, e.g.
comment|// +5 means add 5 additional containers
comment|// -5 means reduce 5 containers, if it goes to negative, sets it to 0
comment|// 5 means sets it to 5 containers.
DECL|method|parseNumberOfContainers (Component component, String newNumber)
specifier|private
name|long
name|parseNumberOfContainers
parameter_list|(
name|Component
name|component
parameter_list|,
name|String
name|newNumber
parameter_list|)
block|{
name|long
name|orig
init|=
name|component
operator|.
name|getNumberOfContainers
argument_list|()
decl_stmt|;
if|if
condition|(
name|newNumber
operator|.
name|startsWith
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
return|return
name|orig
operator|+
name|Long
operator|.
name|parseLong
argument_list|(
name|newNumber
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|newNumber
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|long
name|ret
init|=
name|orig
operator|-
name|Long
operator|.
name|parseLong
argument_list|(
name|newNumber
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"[COMPONENT {0}]: component count goes to negative ({1}{2} = {3}),"
operator|+
literal|" ignore and reset it to 0."
argument_list|,
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|orig
argument_list|,
name|newNumber
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
else|else
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|newNumber
argument_list|)
return|;
block|}
block|}
comment|// Called by Rest Service
DECL|method|flexByRestService (String serviceName, Map<String, Long> componentCounts)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|flexByRestService
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|componentCounts
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// load app definition
name|Service
name|persistedService
init|=
name|ServiceApiUtil
operator|.
name|loadService
argument_list|(
name|fs
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|persistedService
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|serviceName
operator|+
literal|" appId is null, may be not submitted to YARN yet"
argument_list|)
throw|;
block|}
name|cachedAppInfo
operator|.
name|put
argument_list|(
name|persistedService
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|AppInfo
argument_list|(
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|persistedService
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|persistedService
operator|.
name|getKerberosPrincipal
argument_list|()
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|flexComponents
argument_list|(
name|serviceName
argument_list|,
name|componentCounts
argument_list|,
name|persistedService
argument_list|)
return|;
block|}
DECL|method|flexComponents (String serviceName, Map<String, Long> componentCounts, Service persistedService)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|flexComponents
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|componentCounts
parameter_list|,
name|Service
name|persistedService
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ServiceApiUtil
operator|.
name|validateNameFormat
argument_list|(
name|serviceName
argument_list|,
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|original
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|componentCounts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ComponentCountProto
operator|.
name|Builder
name|countBuilder
init|=
name|ComponentCountProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|FlexComponentsRequestProto
operator|.
name|Builder
name|requestBuilder
init|=
name|FlexComponentsRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|persistedComp
range|:
name|persistedService
operator|.
name|getComponents
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|persistedComp
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|componentCounts
operator|.
name|containsKey
argument_list|(
name|persistedComp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|original
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|persistedComp
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
expr_stmt|;
name|persistedComp
operator|.
name|setNumberOfContainers
argument_list|(
name|componentCounts
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
comment|// build the request
name|countBuilder
operator|.
name|setName
argument_list|(
name|persistedComp
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setNumberOfContainers
argument_list|(
name|persistedComp
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
expr_stmt|;
name|requestBuilder
operator|.
name|addComponents
argument_list|(
name|countBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|original
operator|.
name|size
argument_list|()
operator|<
name|componentCounts
operator|.
name|size
argument_list|()
condition|)
block|{
name|componentCounts
operator|.
name|keySet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|original
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Components "
operator|+
name|componentCounts
operator|.
name|keySet
argument_list|()
operator|+
literal|" do not exist in app definition."
argument_list|)
throw|;
block|}
name|ServiceApiUtil
operator|.
name|writeAppDefinition
argument_list|(
name|fs
argument_list|,
name|persistedService
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|getAppId
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|appId
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"Application ID doesn't exist for "
operator|+
name|serviceName
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|ApplicationReport
name|appReport
init|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|!=
name|RUNNING
condition|)
block|{
name|String
name|message
init|=
name|serviceName
operator|+
literal|" is at "
operator|+
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|+
literal|" state, flex can only be invoked when service is running"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|Service
name|liveService
init|=
name|getStatus
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|liveService
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|UPGRADING
argument_list|)
operator|||
name|liveService
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|UPGRADING_AUTO_FINALIZE
argument_list|)
condition|)
block|{
name|String
name|message
init|=
name|serviceName
operator|+
literal|" is at "
operator|+
name|liveService
operator|.
name|getState
argument_list|()
operator|+
literal|" state, flex can not be invoked when service is upgrading. "
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|appReport
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|serviceName
operator|+
literal|" AM hostname is empty"
argument_list|)
throw|;
block|}
name|ClientAMProtocol
name|proxy
init|=
name|createAMProxy
argument_list|(
name|serviceName
argument_list|,
name|appReport
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|flexComponents
argument_list|(
name|requestBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|original
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[COMPONENT {}]: number of containers changed from {} to {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|componentCounts
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|original
return|;
block|}
annotation|@
name|Override
DECL|method|actionStop (String serviceName)
specifier|public
name|int
name|actionStop
parameter_list|(
name|String
name|serviceName
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|actionStop
argument_list|(
name|serviceName
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|actionStop (String serviceName, boolean waitForAppStopped)
specifier|public
name|int
name|actionStop
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|boolean
name|waitForAppStopped
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ServiceApiUtil
operator|.
name|validateNameFormat
argument_list|(
name|serviceName
argument_list|,
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationId
name|currentAppId
init|=
name|getAppId
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentAppId
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application ID doesn't exist for service {}"
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
name|cleanUpRegistry
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
return|return
name|EXIT_COMMAND_ARGUMENT_ERROR
return|;
block|}
name|ApplicationReport
name|report
init|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|currentAppId
argument_list|)
decl_stmt|;
if|if
condition|(
name|terminatedStates
operator|.
name|contains
argument_list|(
name|report
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Service {} is already in a terminated state {}"
argument_list|,
name|serviceName
argument_list|,
name|report
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|cleanUpRegistry
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
return|return
name|EXIT_COMMAND_ARGUMENT_ERROR
return|;
block|}
if|if
condition|(
name|preRunningStates
operator|.
name|contains
argument_list|(
name|report
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
name|serviceName
operator|+
literal|" is at "
operator|+
name|report
operator|.
name|getYarnApplicationState
argument_list|()
operator|+
literal|", forcefully killed by user!"
decl_stmt|;
name|yarnClient
operator|.
name|killApplication
argument_list|(
name|currentAppId
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|cleanUpRegistry
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|report
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|serviceName
operator|+
literal|" AM hostname is empty"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping service {}, with appId = {}"
argument_list|,
name|serviceName
argument_list|,
name|currentAppId
argument_list|)
expr_stmt|;
try|try
block|{
name|ClientAMProtocol
name|proxy
init|=
name|createAMProxy
argument_list|(
name|serviceName
argument_list|,
name|report
argument_list|)
decl_stmt|;
name|cachedAppInfo
operator|.
name|remove
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
comment|// try to stop the app gracefully.
name|StopRequestProto
name|request
init|=
name|StopRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|proxy
operator|.
name|stop
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Service "
operator|+
name|serviceName
operator|+
literal|" is being gracefully stopped..."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|yarnClient
operator|.
name|killApplication
argument_list|(
name|currentAppId
argument_list|,
name|serviceName
operator|+
literal|" is forcefully killed by user!"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Forcefully kill the service: "
operator|+
name|serviceName
argument_list|)
expr_stmt|;
name|cleanUpRegistry
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
if|if
condition|(
operator|!
name|waitForAppStopped
condition|)
block|{
name|cleanUpRegistry
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
comment|// Wait until the app is killed.
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|pollCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|report
operator|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|currentAppId
argument_list|)
expr_stmt|;
if|if
condition|(
name|terminatedStates
operator|.
name|contains
argument_list|(
name|report
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Service "
operator|+
name|serviceName
operator|+
literal|" is stopped."
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Forcefully kill after 10 seconds.
if|if
condition|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|>
literal|10000
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stop operation timeout stopping, forcefully kill the app "
operator|+
name|serviceName
argument_list|)
expr_stmt|;
name|yarnClient
operator|.
name|killApplication
argument_list|(
name|currentAppId
argument_list|,
literal|"Forcefully kill the app by user"
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|++
name|pollCount
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for service "
operator|+
name|serviceName
operator|+
literal|" to be stopped."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|YarnException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to stop "
operator|+
name|serviceName
operator|+
literal|" gracefully due to: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|", forcefully kill the app."
argument_list|)
expr_stmt|;
name|yarnClient
operator|.
name|killApplication
argument_list|(
name|currentAppId
argument_list|,
literal|"Forcefully kill the app"
argument_list|)
expr_stmt|;
block|}
name|cleanUpRegistry
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
annotation|@
name|Override
DECL|method|actionDestroy (String serviceName)
specifier|public
name|int
name|actionDestroy
parameter_list|(
name|String
name|serviceName
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ServiceApiUtil
operator|.
name|validateNameFormat
argument_list|(
name|serviceName
argument_list|,
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNoLiveAppInRM
argument_list|(
name|serviceName
argument_list|,
literal|"destroy"
argument_list|)
expr_stmt|;
name|Path
name|appDir
init|=
name|fs
operator|.
name|buildClusterDirPath
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSystem
init|=
name|fs
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// remove from the appId cache
name|cachedAppInfo
operator|.
name|remove
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|EXIT_SUCCESS
decl_stmt|;
if|if
condition|(
name|fileSystem
operator|.
name|exists
argument_list|(
name|appDir
argument_list|)
condition|)
block|{
if|if
condition|(
name|fileSystem
operator|.
name|delete
argument_list|(
name|appDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully deleted service dir for "
operator|+
name|serviceName
operator|+
literal|": "
operator|+
name|appDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|message
init|=
literal|"Failed to delete service + "
operator|+
name|serviceName
operator|+
literal|" at:  "
operator|+
name|appDir
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Service '"
operator|+
name|serviceName
operator|+
literal|"' doesn't exist at hdfs path: "
operator|+
name|appDir
argument_list|)
expr_stmt|;
name|ret
operator|=
name|EXIT_NOT_FOUND
expr_stmt|;
block|}
try|try
block|{
name|deleteZKNode
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
comment|// don't set destroySucceed to false if no ZK node exists because not
comment|// all services use a ZK node
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not delete zk node for "
operator|+
name|serviceName
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|cleanUpRegistry
argument_list|(
name|serviceName
argument_list|)
condition|)
block|{
if|if
condition|(
name|ret
operator|==
name|EXIT_SUCCESS
condition|)
block|{
name|ret
operator|=
name|EXIT_OTHER_FAILURE
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ret
operator|==
name|EXIT_SUCCESS
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully destroyed service {}"
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
elseif|else
if|if
condition|(
name|ret
operator|==
name|EXIT_NOT_FOUND
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error on destroy '"
operator|+
name|serviceName
operator|+
literal|"': not found."
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error on destroy '"
operator|+
name|serviceName
operator|+
literal|"': error cleaning up "
operator|+
literal|"registry."
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
DECL|method|cleanUpRegistry (String serviceName, String user)
specifier|private
name|boolean
name|cleanUpRegistry
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|SliderException
block|{
name|String
name|encodedName
init|=
name|RegistryUtils
operator|.
name|registryUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|String
name|registryPath
init|=
name|RegistryUtils
operator|.
name|servicePath
argument_list|(
name|encodedName
argument_list|,
name|YarnServiceConstants
operator|.
name|APP_TYPE
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
return|return
name|cleanUpRegistryPath
argument_list|(
name|registryPath
argument_list|,
name|serviceName
argument_list|)
return|;
block|}
DECL|method|cleanUpRegistry (String serviceName)
specifier|private
name|boolean
name|cleanUpRegistry
parameter_list|(
name|String
name|serviceName
parameter_list|)
throws|throws
name|SliderException
block|{
name|String
name|registryPath
init|=
name|ServiceRegistryUtils
operator|.
name|registryPathForInstance
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
return|return
name|cleanUpRegistryPath
argument_list|(
name|registryPath
argument_list|,
name|serviceName
argument_list|)
return|;
block|}
DECL|method|cleanUpRegistryPath (String registryPath, String serviceName)
specifier|private
name|boolean
name|cleanUpRegistryPath
parameter_list|(
name|String
name|registryPath
parameter_list|,
name|String
name|serviceName
parameter_list|)
throws|throws
name|SliderException
block|{
try|try
block|{
if|if
condition|(
name|getRegistryClient
argument_list|()
operator|.
name|exists
argument_list|(
name|registryPath
argument_list|)
condition|)
block|{
name|getRegistryClient
argument_list|()
operator|.
name|delete
argument_list|(
name|registryPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Service '"
operator|+
name|serviceName
operator|+
literal|"' doesn't exist at ZK registry path: "
operator|+
name|registryPath
argument_list|)
expr_stmt|;
comment|// not counted as a failure if the registry entries don't exist
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error deleting registry entry {}"
argument_list|,
name|registryPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|getRegistryClient ()
specifier|private
specifier|synchronized
name|RegistryOperations
name|getRegistryClient
parameter_list|()
throws|throws
name|SliderException
throws|,
name|IOException
block|{
if|if
condition|(
name|registryClient
operator|==
literal|null
condition|)
block|{
name|registryClient
operator|=
name|RegistryOperationsFactory
operator|.
name|createInstance
argument_list|(
literal|"ServiceClient"
argument_list|,
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|registryClient
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|registryClient
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|registryClient
return|;
block|}
comment|/**    * Delete service's ZK node. This is a different node from the service's    * registry entry and is set aside for the service to use for its own ZK data.    *    * @param serviceName service name    * @return true if the node was deleted, false if the node doesn't exist    * @throws Exception if the node couldn't be deleted    */
DECL|method|deleteZKNode (String serviceName)
specifier|private
name|boolean
name|deleteZKNode
parameter_list|(
name|String
name|serviceName
parameter_list|)
throws|throws
name|Exception
block|{
name|CuratorFramework
name|curatorFramework
init|=
name|getCuratorClient
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|RegistryUtils
operator|.
name|currentUser
argument_list|()
decl_stmt|;
name|String
name|zkPath
init|=
name|ServiceRegistryUtils
operator|.
name|mkServiceHomePath
argument_list|(
name|user
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|curatorFramework
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
name|zkPath
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|curatorFramework
operator|.
name|delete
argument_list|()
operator|.
name|deletingChildrenIfNeeded
argument_list|()
operator|.
name|forPath
argument_list|(
name|zkPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted zookeeper path: "
operator|+
name|zkPath
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Service '"
operator|+
name|serviceName
operator|+
literal|"' doesn't exist at ZK path: "
operator|+
name|zkPath
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|getCuratorClient ()
specifier|private
specifier|synchronized
name|CuratorFramework
name|getCuratorClient
parameter_list|()
throws|throws
name|BadConfigException
block|{
name|String
name|registryQuorum
init|=
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_QUORUM
argument_list|)
decl_stmt|;
comment|// though if neither is set: trouble
if|if
condition|(
name|ServiceUtils
operator|.
name|isUnset
argument_list|(
name|registryQuorum
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"No Zookeeper quorum provided in the"
operator|+
literal|" configuration property "
operator|+
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_QUORUM
argument_list|)
throw|;
block|}
name|ZookeeperUtils
operator|.
name|splitToHostsAndPortsStrictly
argument_list|(
name|registryQuorum
argument_list|)
expr_stmt|;
if|if
condition|(
name|curatorClient
operator|==
literal|null
condition|)
block|{
name|curatorClient
operator|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
name|registryQuorum
argument_list|)
operator|.
name|sessionTimeoutMs
argument_list|(
literal|10000
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|RetryNTimes
argument_list|(
literal|5
argument_list|,
literal|2000
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|curatorClient
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|curatorClient
return|;
block|}
DECL|method|verifyNoLiveAppInRM (String serviceName, String action)
specifier|private
name|void
name|verifyNoLiveAppInRM
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|String
name|action
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
name|YarnServiceConstants
operator|.
name|APP_TYPE
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|tags
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|serviceName
operator|!=
literal|null
condition|)
block|{
name|tags
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|ServiceUtils
operator|.
name|createNameTag
argument_list|(
name|serviceName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetApplicationsRequest
name|request
init|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|request
operator|.
name|setApplicationTypes
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|request
operator|.
name|setApplicationTags
argument_list|(
name|tags
argument_list|)
expr_stmt|;
name|request
operator|.
name|setApplicationStates
argument_list|(
name|liveStates
argument_list|)
expr_stmt|;
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setUsers
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|reports
init|=
name|yarnClient
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reports
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|message
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|action
operator|.
name|equals
argument_list|(
literal|"destroy"
argument_list|)
condition|)
block|{
name|message
operator|=
literal|"Failed to destroy service "
operator|+
name|serviceName
operator|+
literal|", because it is still running."
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
literal|"Failed to "
operator|+
name|action
operator|+
literal|" service "
operator|+
name|serviceName
operator|+
literal|", because it already exists."
expr_stmt|;
block|}
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|submitApp (Service app)
name|ApplicationId
name|submitApp
parameter_list|(
name|Service
name|app
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|String
name|serviceName
init|=
name|app
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|Path
name|appRootDir
init|=
name|fs
operator|.
name|buildClusterDirPath
argument_list|(
name|app
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|YarnClientApplication
name|yarnApp
init|=
name|yarnClient
operator|.
name|createApplication
argument_list|()
decl_stmt|;
name|ApplicationSubmissionContext
name|submissionContext
init|=
name|yarnApp
operator|.
name|getApplicationSubmissionContext
argument_list|()
decl_stmt|;
name|ServiceApiUtil
operator|.
name|validateCompResourceSize
argument_list|(
name|yarnApp
operator|.
name|getNewApplicationResponse
argument_list|()
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setKeepContainersAcrossApplicationAttempts
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|app
operator|.
name|getLifetime
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|appTimeout
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|appTimeout
operator|.
name|put
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|,
name|app
operator|.
name|getLifetime
argument_list|()
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setApplicationTimeouts
argument_list|(
name|appTimeout
argument_list|)
expr_stmt|;
block|}
name|submissionContext
operator|.
name|setMaxAppAttempts
argument_list|(
name|YarnServiceConf
operator|.
name|getInt
argument_list|(
name|YarnServiceConf
operator|.
name|AM_RESTART_MAX
argument_list|,
name|DEFAULT_AM_RESTART_MAX
argument_list|,
name|app
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|setLogAggregationContext
argument_list|(
name|app
argument_list|,
name|conf
argument_list|,
name|submissionContext
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// copy local slideram-log4j.properties to hdfs and add to localResources
name|boolean
name|hasAMLog4j
init|=
name|addAMLog4jResource
argument_list|(
name|serviceName
argument_list|,
name|conf
argument_list|,
name|localResources
argument_list|)
decl_stmt|;
comment|// copy jars to hdfs and add to localResources
name|addJarResource
argument_list|(
name|serviceName
argument_list|,
name|localResources
argument_list|)
expr_stmt|;
comment|// add keytab if in secure env
name|addKeytabResourceIfSecure
argument_list|(
name|fs
argument_list|,
name|localResources
argument_list|,
name|app
argument_list|)
expr_stmt|;
comment|// add yarn sysfs to localResources
name|addYarnSysFs
argument_list|(
name|appRootDir
argument_list|,
name|localResources
argument_list|,
name|app
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|printLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
name|addAMEnv
argument_list|()
decl_stmt|;
comment|// create AM CLI
name|String
name|cmdStr
init|=
name|buildCommandLine
argument_list|(
name|app
argument_list|,
name|conf
argument_list|,
name|appRootDir
argument_list|,
name|hasAMLog4j
argument_list|)
decl_stmt|;
name|submissionContext
operator|.
name|setResource
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
name|YarnServiceConf
operator|.
name|getLong
argument_list|(
name|YarnServiceConf
operator|.
name|AM_RESOURCE_MEM
argument_list|,
name|YarnServiceConf
operator|.
name|DEFAULT_KEY_AM_RESOURCE_MEM
argument_list|,
name|app
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|conf
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|queue
init|=
name|app
operator|.
name|getQueue
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|queue
argument_list|)
condition|)
block|{
name|queue
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YARN_QUEUE
argument_list|,
name|DEFAULT_YARN_QUEUE
argument_list|)
expr_stmt|;
block|}
name|submissionContext
operator|.
name|setQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setApplicationName
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setApplicationType
argument_list|(
name|YarnServiceConstants
operator|.
name|APP_TYPE
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appTags
init|=
name|AbstractClientProvider
operator|.
name|createApplicationTags
argument_list|(
name|serviceName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|appTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|submissionContext
operator|.
name|setApplicationTags
argument_list|(
name|appTags
argument_list|)
expr_stmt|;
block|}
name|ContainerLaunchContext
name|amLaunchContext
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|amLaunchContext
operator|.
name|setCommands
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|cmdStr
argument_list|)
argument_list|)
expr_stmt|;
name|amLaunchContext
operator|.
name|setEnvironment
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|amLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
name|addCredentials
argument_list|(
name|amLaunchContext
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setAMContainerSpec
argument_list|(
name|amLaunchContext
argument_list|)
expr_stmt|;
name|yarnClient
operator|.
name|submitApplication
argument_list|(
name|submissionContext
argument_list|)
expr_stmt|;
return|return
name|submissionContext
operator|.
name|getApplicationId
argument_list|()
return|;
block|}
comment|/**    * Compress (tar) the input files to the output file.    *    * @param files The files to compress    * @param output The resulting output file (should end in .tar.gz)    * @param bundleRoot    * @throws IOException    */
DECL|method|compressFiles (Collection<File> files, File output, String bundleRoot)
specifier|public
specifier|static
name|File
name|compressFiles
parameter_list|(
name|Collection
argument_list|<
name|File
argument_list|>
name|files
parameter_list|,
name|File
name|output
parameter_list|,
name|String
name|bundleRoot
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|output
argument_list|)
init|;
name|TarArchiveOutputStream
name|taos
operator|=
operator|new
name|TarArchiveOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|fos
argument_list|)
argument_list|)
init|)
block|{
name|taos
operator|.
name|setLongFileMode
argument_list|(
name|TarArchiveOutputStream
operator|.
name|LONGFILE_GNU
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|f
range|:
name|files
control|)
block|{
name|addFilesToCompression
argument_list|(
name|taos
argument_list|,
name|f
argument_list|,
literal|"sysfs"
argument_list|,
name|bundleRoot
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|output
return|;
block|}
comment|/**    * Compile file list for compression and going recursive for    * nested directories.    *    * @param taos The archive    * @param file The file to add to the archive    * @param dir The directory that should serve as    *            the parent directory in the archive    * @throws IOException    */
DECL|method|addFilesToCompression (TarArchiveOutputStream taos, File file, String dir, String bundleRoot)
specifier|private
specifier|static
name|void
name|addFilesToCompression
parameter_list|(
name|TarArchiveOutputStream
name|taos
parameter_list|,
name|File
name|file
parameter_list|,
name|String
name|dir
parameter_list|,
name|String
name|bundleRoot
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|isHidden
argument_list|()
condition|)
block|{
comment|// Create an entry for the file
if|if
condition|(
operator|!
name|dir
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
if|if
condition|(
name|File
operator|.
name|separator
operator|.
name|equals
argument_list|(
literal|"\\"
argument_list|)
condition|)
block|{
name|dir
operator|=
name|dir
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
name|taos
operator|.
name|putArchiveEntry
argument_list|(
operator|new
name|TarArchiveEntry
argument_list|(
name|file
argument_list|,
name|dir
operator|+
literal|"/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
comment|// Add the file to the archive
try|try
init|(
name|FileInputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|taos
argument_list|)
expr_stmt|;
name|taos
operator|.
name|closeArchiveEntry
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// close the archive entry
if|if
condition|(
operator|!
name|dir
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|taos
operator|.
name|closeArchiveEntry
argument_list|()
expr_stmt|;
block|}
comment|// go through all the files in the directory and using recursion, add
comment|// them to the archive
name|File
index|[]
name|allFiles
init|=
name|file
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|allFiles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|childFile
range|:
name|allFiles
control|)
block|{
name|addFilesToCompression
argument_list|(
name|taos
argument_list|,
name|childFile
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
name|bundleRoot
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|bundleRoot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|addYarnSysFs (Path path, Map<String, LocalResource> localResources, Service app)
specifier|private
name|void
name|addYarnSysFs
parameter_list|(
name|Path
name|path
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
parameter_list|,
name|Service
name|app
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Component
argument_list|>
name|componentsWithYarnSysFS
init|=
operator|new
name|ArrayList
argument_list|<
name|Component
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|c
range|:
name|app
operator|.
name|getComponents
argument_list|()
control|)
block|{
name|boolean
name|enabled
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|c
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|YARN_CONTAINER_RUNTIME_YARN_SYSFS_ENABLE
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|enabled
condition|)
block|{
name|componentsWithYarnSysFS
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|componentsWithYarnSysFS
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|String
name|buffer
init|=
name|ServiceApiUtil
operator|.
name|jsonSerDeser
operator|.
name|toJson
argument_list|(
name|app
argument_list|)
decl_stmt|;
name|File
name|tmpDir
init|=
name|Files
operator|.
name|createTempDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmpDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|serviceJsonPath
init|=
name|tmpDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/app.json"
decl_stmt|;
name|File
name|localFile
init|=
operator|new
name|File
argument_list|(
name|serviceJsonPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|localFile
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
try|try
init|(
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|localFile
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Fail to write app.json to temp directory"
argument_list|)
throw|;
block|}
name|File
name|destinationFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/sysfs.tar"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destinationFile
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Fail to localize sysfs.tar."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|File
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|localFile
argument_list|)
expr_stmt|;
name|compressFiles
argument_list|(
name|files
argument_list|,
name|destinationFile
argument_list|,
literal|"sysfs"
argument_list|)
expr_stmt|;
name|LocalResource
name|localResource
init|=
name|fs
operator|.
name|submitFile
argument_list|(
name|destinationFile
argument_list|,
name|path
argument_list|,
literal|"."
argument_list|,
literal|"sysfs.tar"
argument_list|)
decl_stmt|;
name|Path
name|serviceJson
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"sysfs.tar"
argument_list|)
decl_stmt|;
for|for
control|(
name|Component
name|c
range|:
name|componentsWithYarnSysFS
control|)
block|{
name|ConfigFile
name|e
init|=
operator|new
name|ConfigFile
argument_list|()
decl_stmt|;
name|e
operator|.
name|type
argument_list|(
name|TypeEnum
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|e
operator|.
name|srcFile
argument_list|(
name|serviceJson
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|destFile
argument_list|(
literal|"/hadoop/yarn"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFiles
argument_list|()
operator|.
name|contains
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|c
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFiles
argument_list|()
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|localResources
operator|.
name|put
argument_list|(
literal|"sysfs"
argument_list|,
name|localResource
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tmpDir
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete temp file: "
operator|+
name|tmpDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Fail to localize sysfs resource."
argument_list|)
throw|;
block|}
block|}
DECL|method|setLogAggregationContext (Service app, Configuration conf, ApplicationSubmissionContext submissionContext)
specifier|private
name|void
name|setLogAggregationContext
parameter_list|(
name|Service
name|app
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ApplicationSubmissionContext
name|submissionContext
parameter_list|)
block|{
name|LogAggregationContext
name|context
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|LogAggregationContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|finalLogInclude
init|=
name|YarnServiceConf
operator|.
name|get
argument_list|(
name|FINAL_LOG_INCLUSION_PATTERN
argument_list|,
literal|null
argument_list|,
name|app
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|finalLogInclude
argument_list|)
condition|)
block|{
name|context
operator|.
name|setIncludePattern
argument_list|(
name|finalLogInclude
argument_list|)
expr_stmt|;
block|}
name|String
name|finalLogExclude
init|=
name|YarnServiceConf
operator|.
name|get
argument_list|(
name|FINAL_LOG_EXCLUSION_PATTERN
argument_list|,
literal|null
argument_list|,
name|app
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|finalLogExclude
argument_list|)
condition|)
block|{
name|context
operator|.
name|setExcludePattern
argument_list|(
name|finalLogExclude
argument_list|)
expr_stmt|;
block|}
name|String
name|rollingLogInclude
init|=
name|YarnServiceConf
operator|.
name|get
argument_list|(
name|ROLLING_LOG_INCLUSION_PATTERN
argument_list|,
literal|null
argument_list|,
name|app
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|rollingLogInclude
argument_list|)
condition|)
block|{
name|context
operator|.
name|setRolledLogsIncludePattern
argument_list|(
name|rollingLogInclude
argument_list|)
expr_stmt|;
block|}
name|String
name|rollingLogExclude
init|=
name|YarnServiceConf
operator|.
name|get
argument_list|(
name|ROLLING_LOG_EXCLUSION_PATTERN
argument_list|,
literal|null
argument_list|,
name|app
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|rollingLogExclude
argument_list|)
condition|)
block|{
name|context
operator|.
name|setRolledLogsExcludePattern
argument_list|(
name|rollingLogExclude
argument_list|)
expr_stmt|;
block|}
name|submissionContext
operator|.
name|setLogAggregationContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|printLocalResources (Map<String, LocalResource> map)
specifier|private
name|void
name|printLocalResources
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|map
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added LocalResource for localization: "
argument_list|)
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" -> "
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getResource
argument_list|()
operator|.
name|getFile
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}"
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
DECL|method|buildCommandLine (Service app, Configuration conf, Path appRootDir, boolean hasSliderAMLog4j)
specifier|private
name|String
name|buildCommandLine
parameter_list|(
name|Service
name|app
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Path
name|appRootDir
parameter_list|,
name|boolean
name|hasSliderAMLog4j
parameter_list|)
throws|throws
name|BadConfigException
block|{
name|JavaCommandLineBuilder
name|CLI
init|=
operator|new
name|JavaCommandLineBuilder
argument_list|()
decl_stmt|;
name|CLI
operator|.
name|forceIPv4
argument_list|()
operator|.
name|headless
argument_list|()
expr_stmt|;
name|String
name|jvmOpts
init|=
name|YarnServiceConf
operator|.
name|get
argument_list|(
name|YarnServiceConf
operator|.
name|JVM_OPTS
argument_list|,
literal|""
argument_list|,
name|app
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|jvmOpts
operator|.
name|contains
argument_list|(
literal|"-Xmx"
argument_list|)
condition|)
block|{
name|jvmOpts
operator|+=
name|DEFAULT_AM_JVM_XMX
expr_stmt|;
block|}
name|CLI
operator|.
name|setJVMOpts
argument_list|(
name|jvmOpts
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSliderAMLog4j
condition|)
block|{
name|CLI
operator|.
name|sysprop
argument_list|(
name|SYSPROP_LOG4J_CONFIGURATION
argument_list|,
name|YARN_SERVICE_LOG4J_FILENAME
argument_list|)
expr_stmt|;
name|CLI
operator|.
name|sysprop
argument_list|(
name|SYSPROP_LOG_DIR
argument_list|,
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
argument_list|)
expr_stmt|;
block|}
name|CLI
operator|.
name|add
argument_list|(
name|ServiceMaster
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO debugAM CLI.add(Arguments.ARG_DEBUG)
name|CLI
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|ServiceMaster
operator|.
name|YARNFILE_OPTION
argument_list|,
operator|new
name|Path
argument_list|(
name|appRootDir
argument_list|,
name|app
operator|.
name|getName
argument_list|()
operator|+
literal|".json"
argument_list|)
argument_list|)
expr_stmt|;
name|CLI
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|ServiceMaster
operator|.
name|SERVICE_NAME_OPTION
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|app
operator|.
name|getKerberosPrincipal
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|app
operator|.
name|getKerberosPrincipal
argument_list|()
operator|.
name|getKeytab
argument_list|()
argument_list|)
condition|)
block|{
name|CLI
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|ServiceMaster
operator|.
name|KEYTAB_OPTION
argument_list|,
name|app
operator|.
name|getKerberosPrincipal
argument_list|()
operator|.
name|getKeytab
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|app
operator|.
name|getKerberosPrincipal
argument_list|()
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
condition|)
block|{
name|CLI
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|ServiceMaster
operator|.
name|PRINCIPAL_NAME_OPTION
argument_list|,
name|app
operator|.
name|getKerberosPrincipal
argument_list|()
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// pass the registry binding
name|CLI
operator|.
name|addConfOptionToCLI
argument_list|(
name|conf
argument_list|,
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_ROOT
argument_list|,
name|RegistryConstants
operator|.
name|DEFAULT_ZK_REGISTRY_ROOT
argument_list|)
expr_stmt|;
name|CLI
operator|.
name|addMandatoryConfOption
argument_list|(
name|conf
argument_list|,
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_QUORUM
argument_list|)
expr_stmt|;
comment|// write out the path output
name|CLI
operator|.
name|addOutAndErrFiles
argument_list|(
name|STDOUT_AM
argument_list|,
name|STDERR_AM
argument_list|)
expr_stmt|;
name|String
name|cmdStr
init|=
name|CLI
operator|.
name|build
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"AM launch command: {}"
argument_list|,
name|cmdStr
argument_list|)
expr_stmt|;
return|return
name|cmdStr
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|addAMEnv ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|addAMEnv
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ClasspathConstructor
name|classpath
init|=
name|buildClasspath
argument_list|(
name|YarnServiceConstants
operator|.
name|SUBMITTED_CONF_DIR
argument_list|,
literal|"lib"
argument_list|,
name|fs
argument_list|,
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|YarnServiceConf
operator|.
name|YARN_SERVICE_CLASSPATH
argument_list|,
literal|""
argument_list|)
argument_list|,
name|getConfig
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|IS_MINI_YARN_CLUSTER
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"CLASSPATH"
argument_list|,
name|classpath
operator|.
name|buildClasspath
argument_list|()
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"LANG"
argument_list|,
literal|"en_US.UTF-8"
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"LC_ALL"
argument_list|,
literal|"en_US.UTF-8"
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"LANGUAGE"
argument_list|,
literal|"en_US.UTF-8"
argument_list|)
expr_stmt|;
name|String
name|jaas
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"HADOOP_JAAS_DEBUG"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jaas
operator|!=
literal|null
condition|)
block|{
name|env
operator|.
name|put
argument_list|(
literal|"HADOOP_JAAS_DEBUG"
argument_list|,
name|jaas
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|String
name|userName
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Run as user {}"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
comment|// HADOOP_USER_NAME env is used by UserGroupInformation when log in
comment|// This env makes AM run as this user
name|env
operator|.
name|put
argument_list|(
literal|"HADOOP_USER_NAME"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"AM env: \n{}"
argument_list|,
name|stringifyMap
argument_list|(
name|env
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|env
return|;
block|}
DECL|method|addJarResource (String serviceName, Map<String, LocalResource> localResources)
specifier|protected
name|Path
name|addJarResource
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|Path
name|libPath
init|=
name|fs
operator|.
name|buildClusterDirPath
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|ProviderUtils
operator|.
name|addProviderJar
argument_list|(
name|localResources
argument_list|,
name|ServiceMaster
operator|.
name|class
argument_list|,
name|SERVICE_CORE_JAR
argument_list|,
name|fs
argument_list|,
name|libPath
argument_list|,
literal|"lib"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Path
name|dependencyLibTarGzip
init|=
name|fs
operator|.
name|getDependencyTarGzip
argument_list|()
decl_stmt|;
if|if
condition|(
name|actionDependency
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
operator|==
name|EXIT_SUCCESS
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading lib tar from "
operator|+
name|dependencyLibTarGzip
argument_list|)
expr_stmt|;
name|fs
operator|.
name|submitTarGzipAndUpdate
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dependencyLibTarGzip
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Property {} has a value {}, but is not a valid file"
argument_list|,
name|YarnServiceConf
operator|.
name|DEPENDENCY_TARBALL_PATH
argument_list|,
name|dependencyLibTarGzip
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|libs
init|=
name|ServiceUtils
operator|.
name|getLibDirs
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Uploading all dependency jars to HDFS. For faster submission of"
operator|+
literal|" apps, set config property {} to the dependency tarball location."
operator|+
literal|" Dependency tarball can be uploaded to any HDFS path directly"
operator|+
literal|" or by using command: yarn app -{} [<Destination Folder>]"
argument_list|,
name|YarnServiceConf
operator|.
name|DEPENDENCY_TARBALL_PATH
argument_list|,
name|ApplicationCLI
operator|.
name|ENABLE_FAST_LAUNCH
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|libDirProp
range|:
name|libs
control|)
block|{
name|ProviderUtils
operator|.
name|addAllDependencyJars
argument_list|(
name|localResources
argument_list|,
name|fs
argument_list|,
name|libPath
argument_list|,
literal|"lib"
argument_list|,
name|libDirProp
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|libPath
return|;
block|}
DECL|method|addAMLog4jResource (String serviceName, Configuration conf, Map<String, LocalResource> localResources)
specifier|private
name|boolean
name|addAMLog4jResource
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadClusterStateException
block|{
name|boolean
name|hasAMLog4j
init|=
literal|false
decl_stmt|;
name|String
name|hadoopConfDir
init|=
name|System
operator|.
name|getenv
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_CONF_DIR
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hadoopConfDir
operator|!=
literal|null
condition|)
block|{
name|File
name|localFile
init|=
operator|new
name|File
argument_list|(
name|hadoopConfDir
argument_list|,
name|YarnServiceConstants
operator|.
name|YARN_SERVICE_LOG4J_FILENAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|localFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Path
name|localFilePath
init|=
name|createLocalPath
argument_list|(
name|localFile
argument_list|)
decl_stmt|;
name|Path
name|appDirPath
init|=
name|fs
operator|.
name|buildClusterDirPath
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|Path
name|remoteConfPath
init|=
operator|new
name|Path
argument_list|(
name|appDirPath
argument_list|,
name|YarnServiceConstants
operator|.
name|SUBMITTED_CONF_DIR
argument_list|)
decl_stmt|;
name|Path
name|remoteFilePath
init|=
operator|new
name|Path
argument_list|(
name|remoteConfPath
argument_list|,
name|YarnServiceConstants
operator|.
name|YARN_SERVICE_LOG4J_FILENAME
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|conf
argument_list|,
name|localFilePath
argument_list|,
name|remoteFilePath
argument_list|)
expr_stmt|;
name|LocalResource
name|localResource
init|=
name|fs
operator|.
name|createAmResource
argument_list|(
name|remoteConfPath
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|localFilePath
operator|.
name|getName
argument_list|()
argument_list|,
name|localResource
argument_list|)
expr_stmt|;
name|hasAMLog4j
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"AM log4j property file doesn't exist: "
operator|+
name|localFile
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|hasAMLog4j
return|;
block|}
annotation|@
name|Override
DECL|method|actionStart (String serviceName)
specifier|public
name|int
name|actionStart
parameter_list|(
name|String
name|serviceName
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|actionStartAndGetId
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
DECL|method|actionStartAndGetId (String serviceName)
specifier|public
name|ApplicationId
name|actionStartAndGetId
parameter_list|(
name|String
name|serviceName
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ServiceApiUtil
operator|.
name|validateNameFormat
argument_list|(
name|serviceName
argument_list|,
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|Service
name|liveService
init|=
name|getStatus
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|liveService
operator|==
literal|null
operator|||
operator|!
name|liveService
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|UPGRADING
argument_list|)
condition|)
block|{
name|Path
name|appDir
init|=
name|checkAppExistOnHdfs
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|ServiceApiUtil
operator|.
name|loadService
argument_list|(
name|fs
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|ServiceApiUtil
operator|.
name|validateAndResolveService
argument_list|(
name|service
argument_list|,
name|fs
argument_list|,
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
comment|// see if it is actually running and bail out;
name|verifyNoLiveAppInRM
argument_list|(
name|serviceName
argument_list|,
literal|"start"
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|submitApp
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|cachedAppInfo
operator|.
name|put
argument_list|(
name|serviceName
argument_list|,
operator|new
name|AppInfo
argument_list|(
name|appId
argument_list|,
name|service
operator|.
name|getKerberosPrincipal
argument_list|()
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|service
operator|.
name|setId
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// write app definition on to hdfs
name|Path
name|appJson
init|=
name|ServiceApiUtil
operator|.
name|writeAppDefinition
argument_list|(
name|fs
argument_list|,
name|appDir
argument_list|,
name|service
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Persisted service "
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|" at "
operator|+
name|appJson
argument_list|)
expr_stmt|;
return|return
name|appId
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Finalize service {} upgrade"
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|getAppId
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|ApplicationReport
name|appReport
init|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|appReport
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|serviceName
operator|+
literal|" AM hostname is empty"
argument_list|)
throw|;
block|}
name|ClientAMProtocol
name|proxy
init|=
name|createAMProxy
argument_list|(
name|serviceName
argument_list|,
name|appReport
argument_list|)
decl_stmt|;
name|RestartServiceRequestProto
operator|.
name|Builder
name|requestBuilder
init|=
name|RestartServiceRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|proxy
operator|.
name|restart
argument_list|(
name|requestBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|appId
return|;
block|}
block|}
comment|/**    * Verifies that the service definition does not exist on hdfs.    *    * @param service   service    * @param isUpgrade true for upgrades; false otherwise    * @return path to the service definition..    * @throws IOException    * @throws SliderException    */
DECL|method|checkAppNotExistOnHdfs (Service service, boolean isUpgrade)
specifier|private
name|Path
name|checkAppNotExistOnHdfs
parameter_list|(
name|Service
name|service
parameter_list|,
name|boolean
name|isUpgrade
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|Path
name|appDir
init|=
operator|!
name|isUpgrade
condition|?
name|fs
operator|.
name|buildClusterDirPath
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
else|:
name|fs
operator|.
name|buildClusterUpgradeDirPath
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|service
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|verifyDirectoryNonexistent
argument_list|(
operator|new
name|Path
argument_list|(
name|appDir
argument_list|,
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|".json"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|appDir
return|;
block|}
comment|/**    * Verifies that the service exists on hdfs.    * @param serviceName service name    * @return path to the service definition.    * @throws IOException    * @throws SliderException    */
DECL|method|checkAppExistOnHdfs (String serviceName)
specifier|private
name|Path
name|checkAppExistOnHdfs
parameter_list|(
name|String
name|serviceName
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|Path
name|appDir
init|=
name|fs
operator|.
name|buildClusterDirPath
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|fs
operator|.
name|verifyPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|appDir
argument_list|,
name|serviceName
operator|+
literal|".json"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|appDir
return|;
block|}
DECL|method|addCredentials (ContainerLaunchContext amContext, Service app)
specifier|private
name|void
name|addCredentials
parameter_list|(
name|ContainerLaunchContext
name|amContext
parameter_list|,
name|Service
name|app
parameter_list|)
throws|throws
name|IOException
block|{
name|Credentials
name|allCreds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
comment|// HDFS DT
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|String
name|tokenRenewer
init|=
name|YarnClientUtils
operator|.
name|getRmPrincipal
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|tokenRenewer
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't get Master Kerberos principal for the RM to use as renewer"
argument_list|)
throw|;
block|}
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|tokens
init|=
name|fs
operator|.
name|getFileSystem
argument_list|()
operator|.
name|addDelegationTokens
argument_list|(
name|tokenRenewer
argument_list|,
name|allCreds
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|tokens
operator|!=
literal|null
operator|&&
name|tokens
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
range|:
name|tokens
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got DT: {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|app
operator|.
name|getDockerClientConfig
argument_list|()
argument_list|)
condition|)
block|{
name|allCreds
operator|.
name|addAll
argument_list|(
name|DockerClientConfigHandler
operator|.
name|readCredentialsFromConfigFile
argument_list|(
operator|new
name|Path
argument_list|(
name|app
operator|.
name|getDockerClientConfig
argument_list|()
argument_list|)
argument_list|,
name|getConfig
argument_list|()
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allCreds
operator|.
name|numberOfTokens
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|allCreds
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ByteBuffer
name|tokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|amContext
operator|.
name|setTokens
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addKeytabResourceIfSecure (SliderFileSystem fileSystem, Map<String, LocalResource> localResource, Service service)
specifier|private
name|void
name|addKeytabResourceIfSecure
parameter_list|(
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResource
parameter_list|,
name|Service
name|service
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
if|if
condition|(
operator|!
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|principalName
init|=
name|service
operator|.
name|getKerberosPrincipal
argument_list|()
operator|.
name|getPrincipalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|principalName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No Kerberos principal name specified for "
operator|+
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|service
operator|.
name|getKerberosPrincipal
argument_list|()
operator|.
name|getKeytab
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No Kerberos keytab specified for "
operator|+
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|URI
name|keytabURI
decl_stmt|;
try|try
block|{
name|keytabURI
operator|=
operator|new
name|URI
argument_list|(
name|service
operator|.
name|getKerberosPrincipal
argument_list|()
operator|.
name|getKeytab
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|keytabURI
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using a keytab from localhost: "
operator|+
name|keytabURI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Path
name|keytabOnhdfs
init|=
operator|new
name|Path
argument_list|(
name|keytabURI
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|keytabOnhdfs
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|"'s keytab (principalName = "
operator|+
name|principalName
operator|+
literal|") doesn't exist at: "
operator|+
name|keytabOnhdfs
argument_list|)
expr_stmt|;
return|return;
block|}
name|LocalResource
name|keytabRes
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|keytabOnhdfs
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|localResource
operator|.
name|put
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnServiceConstants
operator|.
name|KEYTAB_LOCATION
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|keytabRes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding "
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|"'s keytab for "
operator|+
literal|"localization, uri = "
operator|+
name|keytabOnhdfs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateLifetime (String serviceName, long lifetime)
specifier|public
name|String
name|updateLifetime
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|long
name|lifetime
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationId
name|currentAppId
init|=
name|getAppId
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentAppId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Application ID not found for "
operator|+
name|serviceName
argument_list|)
throw|;
block|}
name|ApplicationReport
name|report
init|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|currentAppId
argument_list|)
decl_stmt|;
if|if
condition|(
name|report
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Service not found for "
operator|+
name|serviceName
argument_list|)
throw|;
block|}
name|ApplicationId
name|appId
init|=
name|report
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating lifetime of an service: serviceName = "
operator|+
name|serviceName
operator|+
literal|", appId = "
operator|+
name|appId
operator|+
literal|", lifetime = "
operator|+
name|lifetime
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|newTimeout
init|=
name|Times
operator|.
name|formatISO8601
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|lifetime
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|,
name|newTimeout
argument_list|)
expr_stmt|;
name|UpdateApplicationTimeoutsRequest
name|request
init|=
name|UpdateApplicationTimeoutsRequest
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|yarnClient
operator|.
name|updateApplicationTimeouts
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully updated lifetime for an service: serviceName = "
operator|+
name|serviceName
operator|+
literal|", appId = "
operator|+
name|appId
operator|+
literal|". New expiry time in ISO8601 format is "
operator|+
name|newTimeout
argument_list|)
expr_stmt|;
return|return
name|newTimeout
return|;
block|}
DECL|method|convertState (YarnApplicationState state)
specifier|public
name|ServiceState
name|convertState
parameter_list|(
name|YarnApplicationState
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|NEW_SAVING
case|:
case|case
name|SUBMITTED
case|:
case|case
name|ACCEPTED
case|:
return|return
name|ServiceState
operator|.
name|ACCEPTED
return|;
case|case
name|RUNNING
case|:
return|return
name|ServiceState
operator|.
name|STARTED
return|;
case|case
name|FINISHED
case|:
case|case
name|KILLED
case|:
return|return
name|ServiceState
operator|.
name|STOPPED
return|;
case|case
name|FAILED
case|:
return|return
name|ServiceState
operator|.
name|FAILED
return|;
default|default:
return|return
name|ServiceState
operator|.
name|ACCEPTED
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getStatusString (String appIdOrName)
specifier|public
name|String
name|getStatusString
parameter_list|(
name|String
name|appIdOrName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
try|try
block|{
comment|// try parsing appIdOrName, if it succeeds, it means it's appId
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|appIdOrName
argument_list|)
decl_stmt|;
return|return
name|getStatusByAppId
argument_list|(
name|appId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// not appId format, it could be appName.
name|Service
name|status
init|=
name|getStatus
argument_list|(
name|appIdOrName
argument_list|)
decl_stmt|;
return|return
name|ServiceApiUtil
operator|.
name|jsonSerDeser
operator|.
name|toJson
argument_list|(
name|status
argument_list|)
return|;
block|}
block|}
DECL|method|getStatusByAppId (ApplicationId appId)
specifier|private
name|String
name|getStatusByAppId
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|ApplicationReport
name|appReport
init|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|!=
name|RUNNING
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|appReport
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
name|ClientAMProtocol
name|amProxy
init|=
name|createAMProxy
argument_list|(
name|appReport
operator|.
name|getName
argument_list|()
argument_list|,
name|appReport
argument_list|)
decl_stmt|;
name|GetStatusResponseProto
name|response
init|=
name|amProxy
operator|.
name|getStatus
argument_list|(
name|GetStatusRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getStatus
argument_list|()
return|;
block|}
DECL|method|getStatus (String serviceName)
specifier|public
name|Service
name|getStatus
parameter_list|(
name|String
name|serviceName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|ServiceApiUtil
operator|.
name|validateNameFormat
argument_list|(
name|serviceName
argument_list|,
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|Service
name|appSpec
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|appSpec
operator|.
name|setName
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
name|appSpec
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|ApplicationId
name|currentAppId
init|=
name|getAppId
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentAppId
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Service {} does not have an application ID"
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
return|return
name|appSpec
return|;
block|}
name|appSpec
operator|.
name|setId
argument_list|(
name|currentAppId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationReport
name|appReport
init|=
literal|null
decl_stmt|;
try|try
block|{
name|appReport
operator|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|currentAppId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ApplicationNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"application ID {} doesn't exist"
argument_list|,
name|currentAppId
argument_list|)
expr_stmt|;
return|return
name|appSpec
return|;
block|}
if|if
condition|(
name|appReport
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"application ID {} is reported as null"
argument_list|,
name|currentAppId
argument_list|)
expr_stmt|;
return|return
name|appSpec
return|;
block|}
name|appSpec
operator|.
name|setState
argument_list|(
name|convertState
argument_list|(
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationTimeout
name|lifetime
init|=
name|appReport
operator|.
name|getApplicationTimeouts
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|)
decl_stmt|;
if|if
condition|(
name|lifetime
operator|!=
literal|null
condition|)
block|{
name|appSpec
operator|.
name|setLifetime
argument_list|(
name|lifetime
operator|.
name|getRemainingTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|!=
name|RUNNING
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Service {} is at {} state"
argument_list|,
name|serviceName
argument_list|,
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|appSpec
return|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|appReport
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|serviceName
operator|+
literal|" AM hostname is empty"
argument_list|)
expr_stmt|;
return|return
name|appSpec
return|;
block|}
name|ClientAMProtocol
name|amProxy
init|=
name|createAMProxy
argument_list|(
name|serviceName
argument_list|,
name|appReport
argument_list|)
decl_stmt|;
name|GetStatusResponseProto
name|response
init|=
name|amProxy
operator|.
name|getStatus
argument_list|(
name|GetStatusRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|appSpec
operator|=
name|jsonSerDeser
operator|.
name|fromJson
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lifetime
operator|!=
literal|null
condition|)
block|{
name|appSpec
operator|.
name|setLifetime
argument_list|(
name|lifetime
operator|.
name|getRemainingTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|appSpec
return|;
block|}
DECL|method|getYarnClient ()
specifier|public
name|YarnClient
name|getYarnClient
parameter_list|()
block|{
return|return
name|this
operator|.
name|yarnClient
return|;
block|}
DECL|method|enableFastLaunch (String destinationFolder)
specifier|public
name|int
name|enableFastLaunch
parameter_list|(
name|String
name|destinationFolder
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
return|return
name|actionDependency
argument_list|(
name|destinationFolder
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|actionDependency (String destinationFolder, boolean overwrite)
specifier|public
name|int
name|actionDependency
parameter_list|(
name|String
name|destinationFolder
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
block|{
name|String
name|currentUser
init|=
name|RegistryUtils
operator|.
name|currentUser
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running command as user {}"
argument_list|,
name|currentUser
argument_list|)
expr_stmt|;
name|Path
name|dependencyLibTarGzip
decl_stmt|;
if|if
condition|(
name|destinationFolder
operator|==
literal|null
condition|)
block|{
name|dependencyLibTarGzip
operator|=
name|fs
operator|.
name|getDependencyTarGzip
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dependencyLibTarGzip
operator|=
operator|new
name|Path
argument_list|(
name|destinationFolder
argument_list|,
name|YarnServiceConstants
operator|.
name|DEPENDENCY_TAR_GZ_FILE_NAME
operator|+
name|YarnServiceConstants
operator|.
name|DEPENDENCY_TAR_GZ_FILE_EXT
argument_list|)
expr_stmt|;
block|}
comment|// Check if dependency has already been uploaded, in which case log
comment|// appropriately and exit success (unless overwrite has been requested)
if|if
condition|(
name|fs
operator|.
name|isFile
argument_list|(
name|dependencyLibTarGzip
argument_list|)
operator|&&
operator|!
name|overwrite
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Dependency libs are already uploaded to %s."
argument_list|,
name|dependencyLibTarGzip
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
name|String
index|[]
name|libDirs
init|=
name|ServiceUtils
operator|.
name|getLibDirs
argument_list|()
decl_stmt|;
if|if
condition|(
name|libDirs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|File
name|tempLibTarGzipFile
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|checkPermissions
argument_list|(
name|dependencyLibTarGzip
argument_list|)
condition|)
block|{
return|return
name|EXIT_UNAUTHORIZED
return|;
block|}
name|tempLibTarGzipFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
name|YarnServiceConstants
operator|.
name|DEPENDENCY_TAR_GZ_FILE_NAME
operator|+
literal|"_"
argument_list|,
name|YarnServiceConstants
operator|.
name|DEPENDENCY_TAR_GZ_FILE_EXT
argument_list|)
expr_stmt|;
comment|// copy all jars
name|tarGzipFolder
argument_list|(
name|libDirs
argument_list|,
name|tempLibTarGzipFile
argument_list|,
name|createJarFilter
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyLocalFileToHdfs
argument_list|(
name|tempLibTarGzipFile
argument_list|,
name|dependencyLibTarGzip
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|YarnServiceConstants
operator|.
name|DEPENDENCY_DIR_PERMISSIONS
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"To let apps use this tarball, in yarn-site set config "
operator|+
literal|"property {} to {}"
argument_list|,
name|YarnServiceConf
operator|.
name|DEPENDENCY_TARBALL_PATH
argument_list|,
name|dependencyLibTarGzip
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception creating tarball and uploading to HDFS"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|EXIT_EXCEPTION_THROWN
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|tempLibTarGzipFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|tempLibTarGzipFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete tmp file {}"
argument_list|,
name|tempLibTarGzipFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
return|return
name|EXIT_FALSE
return|;
block|}
block|}
DECL|method|checkPermissions (Path dependencyLibTarGzip)
specifier|private
name|boolean
name|checkPermissions
parameter_list|(
name|Path
name|dependencyLibTarGzip
parameter_list|)
throws|throws
name|IOException
block|{
name|AccessControlList
name|yarnAdminAcl
init|=
operator|new
name|AccessControlList
argument_list|(
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_ADMIN_ACL
argument_list|)
argument_list|)
decl_stmt|;
name|AccessControlList
name|dfsAdminAcl
init|=
operator|new
name|AccessControlList
argument_list|(
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_ADMIN
argument_list|,
literal|" "
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|yarnAdminAcl
operator|.
name|isUserAllowed
argument_list|(
name|ugi
argument_list|)
operator|&&
operator|!
name|dfsAdminAcl
operator|.
name|isUserAllowed
argument_list|(
name|ugi
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"User must be on the {} or {} list to have permission to "
operator|+
literal|"upload AM dependency tarball"
argument_list|,
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_ADMIN
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Path
name|parent
init|=
name|dependencyLibTarGzip
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fs
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|FsPermission
name|perm
init|=
name|fs
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|parent
argument_list|)
operator|.
name|getPermission
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|perm
operator|.
name|getOtherAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Parent directory {} of {} tarball location {} does not "
operator|+
literal|"have world read/execute permission"
argument_list|,
name|parent
argument_list|,
name|YarnServiceConf
operator|.
name|DEPENDENCY_TARBALL_PATH
argument_list|,
name|dependencyLibTarGzip
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|createAMProxy (String serviceName, ApplicationReport appReport)
specifier|protected
name|ClientAMProtocol
name|createAMProxy
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|ApplicationReport
name|appReport
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|cachedAppInfo
operator|.
name|containsKey
argument_list|(
name|serviceName
argument_list|)
condition|)
block|{
name|Service
name|persistedService
init|=
name|ServiceApiUtil
operator|.
name|loadService
argument_list|(
name|fs
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|cachedAppInfo
operator|.
name|put
argument_list|(
name|serviceName
argument_list|,
operator|new
name|AppInfo
argument_list|(
name|appReport
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|persistedService
operator|.
name|getKerberosPrincipal
argument_list|()
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|principalName
init|=
name|cachedAppInfo
operator|.
name|get
argument_list|(
name|serviceName
argument_list|)
operator|.
name|principalName
decl_stmt|;
comment|// Inject the principal into hadoop conf, because Hadoop
comment|// SaslRpcClient#getServerPrincipal requires a config for the
comment|// principal
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|principalName
argument_list|)
condition|)
block|{
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|PRINCIPAL
argument_list|,
name|principalName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"No principal specified in the persisted "
operator|+
literal|"service definition, fail to connect to AM."
argument_list|)
throw|;
block|}
block|}
name|InetSocketAddress
name|address
init|=
name|NetUtils
operator|.
name|createSocketAddrForHost
argument_list|(
name|appReport
operator|.
name|getHost
argument_list|()
argument_list|,
name|appReport
operator|.
name|getRpcPort
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ClientAMProxy
operator|.
name|createProxy
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|ClientAMProtocol
operator|.
name|class
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|rpc
argument_list|,
name|address
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setFileSystem (SliderFileSystem fileSystem)
name|void
name|setFileSystem
parameter_list|(
name|SliderFileSystem
name|fileSystem
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fs
operator|=
name|fileSystem
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setYarnClient (YarnClient yarnClient)
name|void
name|setYarnClient
parameter_list|(
name|YarnClient
name|yarnClient
parameter_list|)
block|{
name|this
operator|.
name|yarnClient
operator|=
name|yarnClient
expr_stmt|;
block|}
DECL|method|getAppId (String serviceName)
specifier|public
specifier|synchronized
name|ApplicationId
name|getAppId
parameter_list|(
name|String
name|serviceName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
if|if
condition|(
name|cachedAppInfo
operator|.
name|containsKey
argument_list|(
name|serviceName
argument_list|)
condition|)
block|{
return|return
name|cachedAppInfo
operator|.
name|get
argument_list|(
name|serviceName
argument_list|)
operator|.
name|appId
return|;
block|}
name|Service
name|persistedService
init|=
name|ServiceApiUtil
operator|.
name|loadService
argument_list|(
name|fs
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|persistedService
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Service "
operator|+
name|serviceName
operator|+
literal|" doesn't exist on hdfs. Please check if the app exists in RM"
argument_list|)
throw|;
block|}
if|if
condition|(
name|persistedService
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ApplicationId
name|currentAppId
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|persistedService
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|cachedAppInfo
operator|.
name|put
argument_list|(
name|serviceName
argument_list|,
operator|new
name|AppInfo
argument_list|(
name|currentAppId
argument_list|,
name|persistedService
operator|.
name|getKerberosPrincipal
argument_list|()
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|currentAppId
return|;
block|}
DECL|class|AppInfo
specifier|private
specifier|static
class|class
name|AppInfo
block|{
DECL|field|appId
name|ApplicationId
name|appId
decl_stmt|;
DECL|field|principalName
name|String
name|principalName
decl_stmt|;
DECL|method|AppInfo (ApplicationId appId, String principalName)
name|AppInfo
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|principalName
parameter_list|)
block|{
name|this
operator|.
name|appId
operator|=
name|appId
expr_stmt|;
name|this
operator|.
name|principalName
operator|=
name|principalName
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

