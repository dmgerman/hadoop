begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Methods to aid in config, both in the Configuration class and  * with other parts of setting up Slider-initated processes.  *  * Some of the methods take an argument of a map iterable for their sources; this allows  * the same method  */
end_comment

begin_class
DECL|class|ConfigHelper
specifier|public
class|class
name|ConfigHelper
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConfigHelper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Set an entire map full of values    *    * @param config config to patch    * @param map map of data    * @param origin origin data    */
DECL|method|addConfigMap (Configuration config, Map<String, String> map, String origin)
specifier|public
specifier|static
name|void
name|addConfigMap
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|String
name|origin
parameter_list|)
throws|throws
name|BadConfigException
block|{
name|addConfigMap
argument_list|(
name|config
argument_list|,
name|map
operator|.
name|entrySet
argument_list|()
argument_list|,
name|origin
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set an entire map full of values    *    * @param config config to patch    * @param map map of data    * @param origin origin data    */
DECL|method|addConfigMap (Configuration config, Iterable<Map.Entry<String, String>> map, String origin)
specifier|public
specifier|static
name|void
name|addConfigMap
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|map
parameter_list|,
name|String
name|origin
parameter_list|)
throws|throws
name|BadConfigException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapEntry
range|:
name|map
control|)
block|{
name|String
name|key
init|=
name|mapEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|mapEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Null value for property "
operator|+
name|key
argument_list|)
throw|;
block|}
name|config
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|origin
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Convert to an XML string    * @param conf configuration    * @return conf    * @throws IOException    */
DECL|method|toXml (Configuration conf)
specifier|public
specifier|static
name|String
name|toXml
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|writer
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Register a resource as a default resource.    * Do not attempt to use this unless you understand that the    * order in which default resources are loaded affects the outcome,    * and that subclasses of Configuration often register new default    * resources    * @param resource the resource name    * @return the URL or null    */
DECL|method|registerDefaultResource (String resource)
specifier|public
specifier|static
name|URL
name|registerDefaultResource
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
name|URL
name|resURL
init|=
name|getResourceUrl
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|resURL
operator|!=
literal|null
condition|)
block|{
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
return|return
name|resURL
return|;
block|}
comment|/**    * Load a configuration from a resource on this classpath.    * If the resource is not found, an empty configuration is returned    * @param resource the resource name    * @return the loaded configuration.    */
DECL|method|loadFromResource (String resource)
specifier|public
specifier|static
name|Configuration
name|loadFromResource
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|URL
name|resURL
init|=
name|getResourceUrl
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|resURL
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"loaded resources from {}"
argument_list|,
name|resURL
argument_list|)
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"failed to find {} on the classpath"
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
comment|/**    * Get the URL to a resource, null if not on the CP    * @param resource resource to look for    * @return the URL or null    */
DECL|method|getResourceUrl (String resource)
specifier|public
specifier|static
name|URL
name|getResourceUrl
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
return|return
name|ConfigHelper
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|resource
argument_list|)
return|;
block|}
comment|/**    * This goes through the keyset of one configuration and retrieves each value    * from a value source -a different or the same configuration. This triggers    * the property resolution process of the value, resolving any variables against    * in-config or inherited configurations    * @param keysource source of keys    * @param valuesource the source of values    * @return a new configuration where<code>foreach key in keysource, get(key)==valuesource.get(key)</code>    */
DECL|method|resolveConfiguration ( Iterable<Map.Entry<String, String>> keysource, Configuration valuesource)
specifier|public
specifier|static
name|Configuration
name|resolveConfiguration
parameter_list|(
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|keysource
parameter_list|,
name|Configuration
name|valuesource
parameter_list|)
block|{
name|Configuration
name|result
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|keysource
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|valuesource
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|value
operator|!=
literal|null
argument_list|,
literal|"no reference for \"%s\" in values"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

