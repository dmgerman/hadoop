begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|annotations
operator|.
name|ApiModel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|annotations
operator|.
name|ApiModelProperty
import|;
end_import

begin_comment
comment|/**  * Placement constraint details.  **/
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
annotation|@
name|ApiModel
argument_list|(
name|description
operator|=
literal|"Placement constraint details."
argument_list|)
annotation|@
name|javax
operator|.
name|annotation
operator|.
name|Generated
argument_list|(
name|value
operator|=
literal|"class io.swagger.codegen.languages.JavaClientCodegen"
argument_list|,
name|date
operator|=
literal|"2018-02-16T10:20:12.927-07:00"
argument_list|)
DECL|class|PlacementConstraint
specifier|public
class|class
name|PlacementConstraint
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1518017165676511762L
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
init|=
literal|null
decl_stmt|;
DECL|field|type
specifier|private
name|PlacementType
name|type
init|=
literal|null
decl_stmt|;
DECL|field|scope
specifier|private
name|PlacementScope
name|scope
init|=
literal|null
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"target_tags"
argument_list|)
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"target_tags"
argument_list|)
DECL|field|targetTags
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|targetTags
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"node_attributes"
argument_list|)
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"node_attributes"
argument_list|)
DECL|field|nodeAttributes
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|nodeAttributes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"node_partitions"
argument_list|)
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"node_partitions"
argument_list|)
DECL|field|nodePartitions
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|nodePartitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"min_cardinality"
argument_list|)
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"min_cardinality"
argument_list|)
DECL|field|minCardinality
specifier|private
name|Long
name|minCardinality
init|=
literal|null
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"max_cardinality"
argument_list|)
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"max_cardinality"
argument_list|)
DECL|field|maxCardinality
specifier|private
name|Long
name|maxCardinality
init|=
literal|null
decl_stmt|;
comment|/**    * An optional name associated to this constraint.    **/
DECL|method|name (String name)
specifier|public
name|PlacementConstraint
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"C1"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"name"
argument_list|)
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**    * The type of placement.    **/
DECL|method|type (PlacementType type)
specifier|public
name|PlacementConstraint
name|type
parameter_list|(
name|PlacementType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"type"
argument_list|)
DECL|method|getType ()
specifier|public
name|PlacementType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|setType (PlacementType type)
specifier|public
name|void
name|setType
parameter_list|(
name|PlacementType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**    * The scope of placement.    **/
DECL|method|scope (PlacementScope scope)
specifier|public
name|PlacementConstraint
name|scope
parameter_list|(
name|PlacementScope
name|scope
parameter_list|)
block|{
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
annotation|@
name|JsonProperty
argument_list|(
literal|"scope"
argument_list|)
DECL|method|getScope ()
specifier|public
name|PlacementScope
name|getScope
parameter_list|()
block|{
return|return
name|scope
return|;
block|}
DECL|method|setScope (PlacementScope scope)
specifier|public
name|void
name|setScope
parameter_list|(
name|PlacementScope
name|scope
parameter_list|)
block|{
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
block|}
comment|/**    * The name of the components that this component's placement policy is    * depending upon are added as target tags. So for affinity say, this    * component's containers are requesting to be placed on hosts where    * containers of the target tag component(s) are running on. Target tags can    * also contain the name of this component, in which case it implies that for    * anti-affinity say, no more than one container of this component can be    * placed on a host. Similarly, for cardinality, it would mean that containers    * of this component is requesting to be placed on hosts where at least    * minCardinality but no more than maxCardinality containers of the target tag    * component(s) are running.    **/
DECL|method|targetTags (List<String> targetTags)
specifier|public
name|PlacementConstraint
name|targetTags
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|targetTags
parameter_list|)
block|{
name|this
operator|.
name|targetTags
operator|=
name|targetTags
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"[\"hbase-regionserver\"]"
argument_list|)
DECL|method|getTargetTags ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTargetTags
parameter_list|()
block|{
return|return
name|targetTags
return|;
block|}
DECL|method|setTargetTags (List<String> targetTags)
specifier|public
name|void
name|setTargetTags
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|targetTags
parameter_list|)
block|{
name|this
operator|.
name|targetTags
operator|=
name|targetTags
expr_stmt|;
block|}
comment|/**    * Node attributes are a set of key:value(s) pairs associated with nodes.    */
DECL|method|nodeAttributes ( Map<String, List<String>> nodeAttributes)
specifier|public
name|PlacementConstraint
name|nodeAttributes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|nodeAttributes
parameter_list|)
block|{
name|this
operator|.
name|nodeAttributes
operator|=
name|nodeAttributes
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"\"JavaVersion\":[\"1.7\", \"1.8\"]"
argument_list|)
DECL|method|getNodeAttributes ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getNodeAttributes
parameter_list|()
block|{
return|return
name|nodeAttributes
return|;
block|}
DECL|method|setNodeAttributes (Map<String, List<String>> nodeAttributes)
specifier|public
name|void
name|setNodeAttributes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|nodeAttributes
parameter_list|)
block|{
name|this
operator|.
name|nodeAttributes
operator|=
name|nodeAttributes
expr_stmt|;
block|}
comment|/**    * Node partitions where the containers of this component can run.    */
DECL|method|nodePartitions ( List<String> nodePartitions)
specifier|public
name|PlacementConstraint
name|nodePartitions
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|nodePartitions
parameter_list|)
block|{
name|this
operator|.
name|nodePartitions
operator|=
name|nodePartitions
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"[\"gpu\", \"fast_disk\"]"
argument_list|)
DECL|method|getNodePartitions ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getNodePartitions
parameter_list|()
block|{
return|return
name|nodePartitions
return|;
block|}
DECL|method|setNodePartitions (List<String> nodePartitions)
specifier|public
name|void
name|setNodePartitions
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|nodePartitions
parameter_list|)
block|{
name|this
operator|.
name|nodePartitions
operator|=
name|nodePartitions
expr_stmt|;
block|}
comment|/**    * When placement type is cardinality, the minimum number of containers of the    * depending component that a host should have, where containers of this    * component can be allocated on.    **/
DECL|method|minCardinality (Long minCardinality)
specifier|public
name|PlacementConstraint
name|minCardinality
parameter_list|(
name|Long
name|minCardinality
parameter_list|)
block|{
name|this
operator|.
name|minCardinality
operator|=
name|minCardinality
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"2"
argument_list|)
DECL|method|getMinCardinality ()
specifier|public
name|Long
name|getMinCardinality
parameter_list|()
block|{
return|return
name|minCardinality
return|;
block|}
DECL|method|setMinCardinality (Long minCardinality)
specifier|public
name|void
name|setMinCardinality
parameter_list|(
name|Long
name|minCardinality
parameter_list|)
block|{
name|this
operator|.
name|minCardinality
operator|=
name|minCardinality
expr_stmt|;
block|}
comment|/**    * When placement type is cardinality, the maximum number of containers of the    * depending component that a host should have, where containers of this    * component can be allocated on.    **/
DECL|method|maxCardinality (Long maxCardinality)
specifier|public
name|PlacementConstraint
name|maxCardinality
parameter_list|(
name|Long
name|maxCardinality
parameter_list|)
block|{
name|this
operator|.
name|maxCardinality
operator|=
name|maxCardinality
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"3"
argument_list|)
DECL|method|getMaxCardinality ()
specifier|public
name|Long
name|getMaxCardinality
parameter_list|()
block|{
return|return
name|maxCardinality
return|;
block|}
DECL|method|setMaxCardinality (Long maxCardinality)
specifier|public
name|void
name|setMaxCardinality
parameter_list|(
name|Long
name|maxCardinality
parameter_list|)
block|{
name|this
operator|.
name|maxCardinality
operator|=
name|maxCardinality
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (java.lang.Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PlacementConstraint
name|placementConstraint
init|=
operator|(
name|PlacementConstraint
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|placementConstraint
operator|.
name|name
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|type
argument_list|,
name|placementConstraint
operator|.
name|type
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|scope
argument_list|,
name|placementConstraint
operator|.
name|scope
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|targetTags
argument_list|,
name|placementConstraint
operator|.
name|targetTags
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|nodeAttributes
argument_list|,
name|placementConstraint
operator|.
name|nodeAttributes
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|nodePartitions
argument_list|,
name|placementConstraint
operator|.
name|nodePartitions
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|minCardinality
argument_list|,
name|placementConstraint
operator|.
name|minCardinality
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|maxCardinality
argument_list|,
name|placementConstraint
operator|.
name|maxCardinality
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|scope
argument_list|,
name|targetTags
argument_list|,
name|nodeAttributes
argument_list|,
name|nodePartitions
argument_list|,
name|minCardinality
argument_list|,
name|maxCardinality
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"class PlacementConstraint {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    name: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    type: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    scope: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|scope
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    targetTags: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|targetTags
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    nodeAttributes: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|nodeAttributes
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    nodePartitions: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|nodePartitions
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    minCardinality: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|minCardinality
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    maxCardinality: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|maxCardinality
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Convert the given object to string with each line indented by 4 spaces    * (except the first line).    */
DECL|method|toIndentedString (java.lang.Object o)
specifier|private
name|String
name|toIndentedString
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
return|return
name|o
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"\n    "
argument_list|)
return|;
block|}
block|}
end_class

end_unit

