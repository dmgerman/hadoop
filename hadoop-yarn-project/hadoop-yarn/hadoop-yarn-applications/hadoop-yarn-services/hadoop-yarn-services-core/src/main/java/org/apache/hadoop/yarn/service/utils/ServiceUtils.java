begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|containerlaunch
operator|.
name|ClasspathConstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|BadClusterStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_DNS_INTERFACE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_DNS_NAMESERVER_KEY
import|;
end_import

begin_comment
comment|/**  * These are slider-specific Util methods  */
end_comment

begin_class
DECL|class|ServiceUtils
specifier|public
specifier|final
class|class
name|ServiceUtils
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ServiceUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ServiceUtils ()
specifier|private
name|ServiceUtils
parameter_list|()
block|{   }
comment|/**    * Implementation of set-ness, groovy definition of true/false for a string    * @param s string    * @return true iff the string is neither null nor empty    */
DECL|method|isUnset (String s)
specifier|public
specifier|static
name|boolean
name|isUnset
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|isSet (String s)
specifier|public
specifier|static
name|boolean
name|isSet
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|!
name|isUnset
argument_list|(
name|s
argument_list|)
return|;
block|}
DECL|method|isEmpty (Collection l)
specifier|public
specifier|static
name|boolean
name|isEmpty
parameter_list|(
name|Collection
name|l
parameter_list|)
block|{
return|return
name|l
operator|==
literal|null
operator|||
name|l
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * Find a containing JAR    * @param clazz class to find    * @return the file    * @throws IOException any IO problem, including the class not having a    * classloader    * @throws FileNotFoundException if the class did not resolve to a file    */
DECL|method|findContainingJarOrFail (Class clazz)
specifier|public
specifier|static
name|File
name|findContainingJarOrFail
parameter_list|(
name|Class
name|clazz
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|localFile
init|=
name|ServiceUtils
operator|.
name|findContainingJar
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|localFile
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Could not find JAR containing "
operator|+
name|clazz
argument_list|)
throw|;
block|}
return|return
name|localFile
return|;
block|}
comment|/**    * Find a containing JAR    * @param my_class class to find    * @return the file or null if it is not found    * @throws IOException any IO problem, including the class not having a    * classloader    */
DECL|method|findContainingJar (Class my_class)
specifier|public
specifier|static
name|File
name|findContainingJar
parameter_list|(
name|Class
name|my_class
parameter_list|)
throws|throws
name|IOException
block|{
name|ClassLoader
name|loader
init|=
name|my_class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|loader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Class "
operator|+
name|my_class
operator|+
literal|" does not have a classloader!"
argument_list|)
throw|;
block|}
name|String
name|class_file
init|=
name|my_class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
operator|+
literal|".class"
decl_stmt|;
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|urlEnumeration
init|=
name|loader
operator|.
name|getResources
argument_list|(
name|class_file
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|urlEnumeration
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|URL
name|url
init|=
name|urlEnumeration
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"jar"
operator|.
name|equals
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|toReturn
init|=
name|url
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|toReturn
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|toReturn
operator|=
name|toReturn
operator|.
name|substring
argument_list|(
literal|"file:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// URLDecoder is a misnamed class, since it actually decodes
comment|// x-www-form-urlencoded MIME type rather than actual
comment|// URL encoding (which the file path has). Therefore it would
comment|// decode +s to ' 's which is incorrect (spaces are actually
comment|// either unencoded or encoded as "%20"). Replace +s first, so
comment|// that they are kept sacred during the decoding process.
name|toReturn
operator|=
name|toReturn
operator|.
name|replaceAll
argument_list|(
literal|"\\+"
argument_list|,
literal|"%2B"
argument_list|)
expr_stmt|;
name|toReturn
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|toReturn
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|String
name|jarFilePath
init|=
name|toReturn
operator|.
name|replaceAll
argument_list|(
literal|"!.*$"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
return|return
operator|new
name|File
argument_list|(
name|jarFilePath
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"could not locate JAR containing {} URL={}"
argument_list|,
name|my_class
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Copy a file to a new FS -both paths must be qualified.    * @param conf conf file    * @param srcFile src file    * @param destFile dest file    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|copy (Configuration conf, Path srcFile, Path destFile)
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|srcFile
parameter_list|,
name|Path
name|destFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadClusterStateException
block|{
name|FileSystem
name|srcFS
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|srcFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|//list all paths in the src.
if|if
condition|(
operator|!
name|srcFS
operator|.
name|exists
argument_list|(
name|srcFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Source file not found "
operator|+
name|srcFile
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|srcFS
operator|.
name|isFile
argument_list|(
name|srcFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Source file not a file "
operator|+
name|srcFile
argument_list|)
throw|;
block|}
name|FileSystem
name|destFS
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|destFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|srcFS
argument_list|,
name|srcFile
argument_list|,
name|destFS
argument_list|,
name|destFile
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Take a collection, return a list containing the string value of every    * element in the collection.    * @param c collection    * @return a stringified list    */
DECL|method|collectionToStringList (Collection c)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|collectionToStringList
parameter_list|(
name|Collection
name|c
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|c
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|c
control|)
block|{
name|l
operator|.
name|add
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
comment|/**    * Join an collection of objects with a separator that appears after every    * instance in the list -including at the end    * @param collection collection to call toString() on each element    * @param separator separator string    * @return the joined entries    */
DECL|method|join (Collection collection, String separator)
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
return|return
name|join
argument_list|(
name|collection
argument_list|,
name|separator
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Join an collection of objects with a separator that appears after every    * instance in the list -optionally at the end    * @param collection collection to call toString() on each element    * @param separator separator string    * @param trailing add a trailing entry or not    * @return the joined entries    */
DECL|method|join (Collection collection, String separator, boolean trailing)
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|String
name|separator
parameter_list|,
name|boolean
name|trailing
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// fast return on empty collection
if|if
condition|(
name|collection
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|trailing
condition|?
name|separator
else|:
literal|""
return|;
block|}
for|for
control|(
name|Object
name|o
range|:
name|collection
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|int
name|length
init|=
name|separator
operator|.
name|length
argument_list|()
decl_stmt|;
name|String
name|s
init|=
name|b
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|(
name|trailing
operator|||
name|s
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|s
else|:
operator|(
name|b
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|()
operator|-
name|length
argument_list|)
operator|)
return|;
block|}
comment|/**    * Join an array of strings with a separator that appears after every    * instance in the list -optionally at the end    * @param collection strings    * @param separator separator string    * @param trailing add a trailing entry or not    * @return the joined entries    */
DECL|method|join (String[] collection, String separator, boolean trailing)
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|String
index|[]
name|collection
parameter_list|,
name|String
name|separator
parameter_list|,
name|boolean
name|trailing
parameter_list|)
block|{
return|return
name|join
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|collection
argument_list|)
argument_list|,
name|separator
argument_list|,
name|trailing
argument_list|)
return|;
block|}
comment|/**    * Resolve a mandatory environment variable    * @param key env var    * @return the resolved value    * @throws BadClusterStateException    */
DECL|method|mandatoryEnvVariable (String key)
specifier|public
specifier|static
name|String
name|mandatoryEnvVariable
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|BadClusterStateException
block|{
name|String
name|v
init|=
name|System
operator|.
name|getenv
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadClusterStateException
argument_list|(
literal|"Missing Environment variable "
operator|+
name|key
argument_list|)
throw|;
block|}
return|return
name|v
return|;
block|}
comment|/**    * Generic map merge logic    * @param first first map    * @param second second map    * @param<T1> key type    * @param<T2> value type    * @return 'first' merged with the second    */
DECL|method|mergeMapsIgnoreDuplicateKeys (Map<T1, T2> first, Map<T1, T2> second)
specifier|public
specifier|static
parameter_list|<
name|T1
parameter_list|,
name|T2
parameter_list|>
name|Map
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
name|mergeMapsIgnoreDuplicateKeys
parameter_list|(
name|Map
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
name|first
parameter_list|,
name|Map
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
name|second
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|first
operator|!=
literal|null
argument_list|,
literal|"Null 'first' value"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|second
operator|!=
literal|null
argument_list|,
literal|"Null 'second' value"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
name|entry
range|:
name|second
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|T1
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|first
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|first
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|first
return|;
block|}
comment|/**    * Convert a map to a multi-line string for printing    * @param map map to stringify    * @return a string representation of the map    */
DECL|method|stringifyMap (Map<String, String> map)
specifier|public
specifier|static
name|String
name|stringifyMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"=\""
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Convert a YARN URL into a string value of a normal URL    * @param url URL    * @return string representatin    */
DECL|method|stringify (org.apache.hadoop.yarn.api.records.URL url)
specifier|public
specifier|static
name|String
name|stringify
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
name|url
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|url
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"://"
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|url
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|url
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|url
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Get a random open port    * @return true if the port was available for listening on    */
DECL|method|getOpenPort ()
specifier|public
specifier|static
name|int
name|getOpenPort
parameter_list|()
throws|throws
name|IOException
block|{
name|ServerSocket
name|socket
init|=
literal|null
decl_stmt|;
try|try
block|{
name|socket
operator|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|socket
operator|.
name|getLocalPort
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|socket
operator|!=
literal|null
condition|)
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * See if a port is available for listening on by trying to listen    * on it and seeing if that works or fails.    * @param port port to listen to    * @return true if the port was available for listening on    */
DECL|method|isPortAvailable (int port)
specifier|public
specifier|static
name|boolean
name|isPortAvailable
parameter_list|(
name|int
name|port
parameter_list|)
block|{
try|try
block|{
name|ServerSocket
name|socket
init|=
operator|new
name|ServerSocket
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// Build env map: key -> value;
comment|// value will be replaced by the corresponding value in tokenMap, if any.
DECL|method|buildEnvMap ( org.apache.hadoop.yarn.service.api.records.Configuration conf, Map<String,String> tokenMap)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|buildEnvMap
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Configuration
name|conf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokenMap
parameter_list|)
block|{
if|if
condition|(
name|tokenMap
operator|==
literal|null
condition|)
block|{
return|return
name|conf
operator|.
name|getEnv
argument_list|()
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|conf
operator|.
name|getEnv
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|token
range|:
name|tokenMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|val
operator|=
name|val
operator|.
name|replaceAll
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|token
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|token
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|env
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|env
return|;
block|}
DECL|method|getLibDirs ()
specifier|public
specifier|static
name|String
index|[]
name|getLibDirs
parameter_list|()
block|{
name|String
name|libDirStr
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|YarnServiceConstants
operator|.
name|PROPERTY_LIB_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|isUnset
argument_list|(
name|libDirStr
argument_list|)
condition|)
block|{
return|return
name|ArrayUtils
operator|.
name|EMPTY_STRING_ARRAY
return|;
block|}
return|return
name|StringUtils
operator|.
name|split
argument_list|(
name|libDirStr
argument_list|,
literal|','
argument_list|)
return|;
block|}
comment|/**    * Submit a JAR containing a specific class and map it    * @param providerResources provider map to build up    * @param sliderFileSystem remote fs    * @param clazz class to look for    * @param libdir lib directory    * @param jarName<i>At the destination</i>    * @return the local resource ref    * @throws IOException trouble copying to HDFS    */
DECL|method|putJar (Map<String, LocalResource> providerResources, SliderFileSystem sliderFileSystem, Class clazz, Path tempPath, String libdir, String jarName )
specifier|public
specifier|static
name|LocalResource
name|putJar
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|providerResources
parameter_list|,
name|SliderFileSystem
name|sliderFileSystem
parameter_list|,
name|Class
name|clazz
parameter_list|,
name|Path
name|tempPath
parameter_list|,
name|String
name|libdir
parameter_list|,
name|String
name|jarName
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|LocalResource
name|res
init|=
name|sliderFileSystem
operator|.
name|submitJarWithClass
argument_list|(
name|clazz
argument_list|,
name|tempPath
argument_list|,
name|libdir
argument_list|,
name|jarName
argument_list|)
decl_stmt|;
name|providerResources
operator|.
name|put
argument_list|(
name|libdir
operator|+
literal|"/"
operator|+
name|jarName
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
comment|/**    * Submit a JAR containing and map it    * @param providerResources provider map to build up    * @param sliderFileSystem remote fs    * @param libDir lib directory    * @param srcPath copy jars from    */
DECL|method|putAllJars (Map<String, LocalResource> providerResources, SliderFileSystem sliderFileSystem, Path tempPath, String libDir, String srcPath)
specifier|public
specifier|static
name|void
name|putAllJars
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|providerResources
parameter_list|,
name|SliderFileSystem
name|sliderFileSystem
parameter_list|,
name|Path
name|tempPath
parameter_list|,
name|String
name|libDir
parameter_list|,
name|String
name|srcPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Loading all dependencies from {}"
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|ServiceUtils
operator|.
name|isSet
argument_list|(
name|srcPath
argument_list|)
condition|)
block|{
name|File
name|srcFolder
init|=
operator|new
name|File
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|FilenameFilter
name|jarFilter
init|=
name|createJarFilter
argument_list|()
decl_stmt|;
name|File
index|[]
name|listOfJars
init|=
name|srcFolder
operator|.
name|listFiles
argument_list|(
name|jarFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|listOfJars
operator|==
literal|null
operator|||
name|listOfJars
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|File
name|jarFile
range|:
name|listOfJars
control|)
block|{
name|LocalResource
name|res
init|=
name|sliderFileSystem
operator|.
name|submitFile
argument_list|(
name|jarFile
argument_list|,
name|tempPath
argument_list|,
name|libDir
argument_list|,
name|jarFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|providerResources
operator|.
name|put
argument_list|(
name|libDir
operator|+
literal|"/"
operator|+
name|jarFile
operator|.
name|getName
argument_list|()
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Accept all filenames ending with {@code .jar}    * @return a filename filter    */
DECL|method|createJarFilter ()
specifier|public
specifier|static
name|FilenameFilter
name|createJarFilter
parameter_list|()
block|{
return|return
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Create a file:// path from a local file    * @param file file to point the path    * @return a new Path    */
DECL|method|createLocalPath (File file)
specifier|public
specifier|static
name|Path
name|createLocalPath
parameter_list|(
name|File
name|file
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Build up the classpath for execution    * -behaves very differently on a mini test cluster vs a production    * production one.    *    * @param sliderConfDir relative path to the dir containing slider config    *                      options to put on the classpath -or null    * @param libdir directory containing the JAR files    * @param usingMiniMRCluster flag to indicate the MiniMR cluster is in use    * (and hence the current classpath should be used, not anything built up)    * @return a classpath    */
DECL|method|buildClasspath (String sliderConfDir, String libdir, SliderFileSystem sliderFileSystem, boolean usingMiniMRCluster)
specifier|public
specifier|static
name|ClasspathConstructor
name|buildClasspath
parameter_list|(
name|String
name|sliderConfDir
parameter_list|,
name|String
name|libdir
parameter_list|,
name|SliderFileSystem
name|sliderFileSystem
parameter_list|,
name|boolean
name|usingMiniMRCluster
parameter_list|)
block|{
name|ClasspathConstructor
name|classpath
init|=
operator|new
name|ClasspathConstructor
argument_list|()
decl_stmt|;
name|classpath
operator|.
name|append
argument_list|(
name|YarnServiceConstants
operator|.
name|YARN_SERVICE_LOG4J_FILENAME
argument_list|)
expr_stmt|;
comment|// add the runtime classpath needed for tests to work
if|if
condition|(
name|usingMiniMRCluster
condition|)
block|{
comment|// for mini cluster we pass down the java CP properties
comment|// and nothing else
name|classpath
operator|.
name|appendAll
argument_list|(
name|classpath
operator|.
name|localJVMClasspath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sliderConfDir
operator|!=
literal|null
condition|)
block|{
name|classpath
operator|.
name|addClassDirectory
argument_list|(
name|sliderConfDir
argument_list|)
expr_stmt|;
block|}
name|classpath
operator|.
name|addLibDir
argument_list|(
name|libdir
argument_list|)
expr_stmt|;
if|if
condition|(
name|sliderFileSystem
operator|.
name|isFile
argument_list|(
name|sliderFileSystem
operator|.
name|getDependencyTarGzip
argument_list|()
argument_list|)
condition|)
block|{
name|classpath
operator|.
name|addLibDir
argument_list|(
name|YarnServiceConstants
operator|.
name|DEPENDENCY_LOCALIZED_DIR_LINK
argument_list|)
expr_stmt|;
block|}
name|classpath
operator|.
name|addRemoteClasspathEnvVar
argument_list|()
expr_stmt|;
name|classpath
operator|.
name|append
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_CONF_DIR
operator|.
name|$$
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|classpath
return|;
block|}
comment|/**    * Given a source folder create a tar.gz file    *     * @param libDirs    * @param tarGzipFile    *     * @throws IOException    */
DECL|method|tarGzipFolder (String[] libDirs, File tarGzipFile, FilenameFilter filter)
specifier|public
specifier|static
name|void
name|tarGzipFolder
parameter_list|(
name|String
index|[]
name|libDirs
parameter_list|,
name|File
name|tarGzipFile
parameter_list|,
name|FilenameFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Tar-gzipping folders {} to {}"
argument_list|,
name|libDirs
argument_list|,
name|tarGzipFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|TarArchiveOutputStream
name|taos
init|=
operator|new
name|TarArchiveOutputStream
argument_list|(
operator|new
name|GZIPOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|tarGzipFile
argument_list|)
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|String
name|libDir
range|:
name|libDirs
control|)
block|{
name|File
name|srcFolder
init|=
operator|new
name|File
argument_list|(
name|libDir
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|generateFileList
argument_list|(
name|files
argument_list|,
name|srcFolder
argument_list|,
name|srcFolder
argument_list|,
literal|true
argument_list|,
name|filter
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|File
name|srcFile
init|=
operator|new
name|File
argument_list|(
name|srcFolder
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|TarArchiveEntry
name|tarEntry
init|=
operator|new
name|TarArchiveEntry
argument_list|(
name|srcFile
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|taos
operator|.
name|putArchiveEntry
argument_list|(
name|tarEntry
argument_list|)
expr_stmt|;
try|try
init|(
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|srcFile
argument_list|)
init|)
block|{
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|taos
argument_list|)
expr_stmt|;
block|}
name|taos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|taos
operator|.
name|closeArchiveEntry
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|generateFileList (List<String> fileList, File node, File rootFolder, Boolean relative, FilenameFilter filter)
specifier|private
specifier|static
name|void
name|generateFileList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fileList
parameter_list|,
name|File
name|node
parameter_list|,
name|File
name|rootFolder
parameter_list|,
name|Boolean
name|relative
parameter_list|,
name|FilenameFilter
name|filter
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|String
name|fileFullPath
init|=
name|node
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|relative
condition|)
block|{
name|fileList
operator|.
name|add
argument_list|(
name|fileFullPath
operator|.
name|substring
argument_list|(
name|rootFolder
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
name|fileFullPath
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileList
operator|.
name|add
argument_list|(
name|fileFullPath
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|node
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|String
index|[]
name|subNode
init|=
name|node
operator|.
name|list
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|subNode
operator|==
literal|null
operator|||
name|subNode
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|filename
range|:
name|subNode
control|)
block|{
name|generateFileList
argument_list|(
name|fileList
argument_list|,
operator|new
name|File
argument_list|(
name|node
argument_list|,
name|filename
argument_list|)
argument_list|,
name|rootFolder
argument_list|,
name|relative
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createNameTag (String name)
specifier|public
specifier|static
name|String
name|createNameTag
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|"Name: "
operator|+
name|name
return|;
block|}
DECL|method|createVersionTag (String version)
specifier|public
specifier|static
name|String
name|createVersionTag
parameter_list|(
name|String
name|version
parameter_list|)
block|{
return|return
literal|"Version: "
operator|+
name|version
return|;
block|}
DECL|method|createDescriptionTag (String description)
specifier|public
specifier|static
name|String
name|createDescriptionTag
parameter_list|(
name|String
name|description
parameter_list|)
block|{
return|return
literal|"Description: "
operator|+
name|description
return|;
block|}
comment|// Copied from SecurityUtil because it is not public
DECL|method|getLocalHostName (@ullable Configuration conf)
specifier|public
specifier|static
name|String
name|getLocalHostName
parameter_list|(
annotation|@
name|Nullable
name|Configuration
name|conf
parameter_list|)
throws|throws
name|UnknownHostException
block|{
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|String
name|dnsInterface
init|=
name|conf
operator|.
name|get
argument_list|(
name|HADOOP_SECURITY_DNS_INTERFACE_KEY
argument_list|)
decl_stmt|;
name|String
name|nameServer
init|=
name|conf
operator|.
name|get
argument_list|(
name|HADOOP_SECURITY_DNS_NAMESERVER_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|dnsInterface
operator|!=
literal|null
condition|)
block|{
return|return
name|DNS
operator|.
name|getDefaultHost
argument_list|(
name|dnsInterface
argument_list|,
name|nameServer
argument_list|,
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|nameServer
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|HADOOP_SECURITY_DNS_NAMESERVER_KEY
operator|+
literal|" requires "
operator|+
name|HADOOP_SECURITY_DNS_INTERFACE_KEY
operator|+
literal|". Check your"
operator|+
literal|"configuration."
argument_list|)
throw|;
block|}
block|}
comment|// Fallback to querying the default hostname as we did before.
return|return
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

