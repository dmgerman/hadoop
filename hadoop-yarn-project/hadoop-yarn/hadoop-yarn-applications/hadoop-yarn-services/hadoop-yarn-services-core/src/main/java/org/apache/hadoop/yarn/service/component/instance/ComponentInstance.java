begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.component.instance
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|yarn
operator|.
name|PersistencePolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|NMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ComponentState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentRestartPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|monitor
operator|.
name|probe
operator|.
name|ProbeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|registry
operator|.
name|YarnRegistryViewForProviders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|timelineservice
operator|.
name|ServiceTimelinePublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|SingleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BoundedAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|yarn
operator|.
name|YarnRegistryAttributes
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
operator|.
name|KILLED_AFTER_APP_COMPLETION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
operator|.
name|KILLED_BY_APPMASTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstanceEventType
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstanceState
operator|.
name|*
import|;
end_import

begin_class
DECL|class|ComponentInstance
specifier|public
class|class
name|ComponentInstance
implements|implements
name|EventHandler
argument_list|<
name|ComponentInstanceEvent
argument_list|>
implements|,
name|Comparable
argument_list|<
name|ComponentInstance
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ComponentInstance
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FAILED_BEFORE_LAUNCH_DIAG
specifier|private
specifier|static
specifier|final
name|String
name|FAILED_BEFORE_LAUNCH_DIAG
init|=
literal|"failed before launch"
decl_stmt|;
specifier|private
name|StateMachine
argument_list|<
name|ComponentInstanceState
argument_list|,
name|ComponentInstanceEventType
argument_list|,
DECL|field|stateMachine
name|ComponentInstanceEvent
argument_list|>
name|stateMachine
decl_stmt|;
DECL|field|component
specifier|private
name|Component
name|component
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|compInstanceId
specifier|private
name|ComponentInstanceId
name|compInstanceId
init|=
literal|null
decl_stmt|;
DECL|field|compInstanceDir
specifier|private
name|Path
name|compInstanceDir
decl_stmt|;
DECL|field|container
specifier|private
name|Container
name|container
decl_stmt|;
DECL|field|yarnRegistryOperations
specifier|private
name|YarnRegistryViewForProviders
name|yarnRegistryOperations
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|timelineServiceEnabled
specifier|private
name|boolean
name|timelineServiceEnabled
init|=
literal|false
decl_stmt|;
DECL|field|serviceTimelinePublisher
specifier|private
name|ServiceTimelinePublisher
name|serviceTimelinePublisher
decl_stmt|;
DECL|field|scheduler
specifier|private
name|ServiceScheduler
name|scheduler
decl_stmt|;
DECL|field|diagnostics
specifier|private
name|BoundedAppender
name|diagnostics
init|=
operator|new
name|BoundedAppender
argument_list|(
literal|64
operator|*
literal|1024
argument_list|)
decl_stmt|;
DECL|field|containerStatusFuture
specifier|private
specifier|volatile
name|ScheduledFuture
name|containerStatusFuture
decl_stmt|;
DECL|field|status
specifier|private
specifier|volatile
name|ContainerStatus
name|status
decl_stmt|;
DECL|field|containerStartedTime
specifier|private
name|long
name|containerStartedTime
init|=
literal|0
decl_stmt|;
comment|// This container object is used for rest API query
DECL|field|containerSpec
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Container
name|containerSpec
decl_stmt|;
DECL|field|serviceVersion
specifier|private
name|String
name|serviceVersion
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StateMachineFactory
argument_list|<
name|ComponentInstance
argument_list|,
name|ComponentInstanceState
argument_list|,
name|ComponentInstanceEventType
argument_list|,
name|ComponentInstanceEvent
argument_list|>
DECL|field|stateMachineFactory
name|stateMachineFactory
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|ComponentInstance
argument_list|,
name|ComponentInstanceState
argument_list|,
name|ComponentInstanceEventType
argument_list|,
name|ComponentInstanceEvent
argument_list|>
argument_list|(
name|INIT
argument_list|)
operator|.
name|addTransition
argument_list|(
name|INIT
argument_list|,
name|STARTED
argument_list|,
name|START
argument_list|,
operator|new
name|ContainerStartedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|INIT
argument_list|,
name|INIT
argument_list|,
name|STOP
argument_list|,
comment|// container failed before launching, nothing to cleanup from registry
comment|// This could happen if NMClient#startContainerAsync failed, container
comment|// will be completed, but COMP_INSTANCE is still at INIT.
operator|new
name|ContainerStoppedTransition
argument_list|(
literal|true
argument_list|)
argument_list|)
comment|//From Running
operator|.
name|addTransition
argument_list|(
name|STARTED
argument_list|,
name|INIT
argument_list|,
name|STOP
argument_list|,
operator|new
name|ContainerStoppedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|STARTED
argument_list|,
name|READY
argument_list|,
name|BECOME_READY
argument_list|,
operator|new
name|ContainerBecomeReadyTransition
argument_list|()
argument_list|)
comment|// FROM READY
operator|.
name|addTransition
argument_list|(
name|READY
argument_list|,
name|STARTED
argument_list|,
name|BECOME_NOT_READY
argument_list|,
operator|new
name|ContainerBecomeNotReadyTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|READY
argument_list|,
name|INIT
argument_list|,
name|STOP
argument_list|,
operator|new
name|ContainerStoppedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|READY
argument_list|,
name|UPGRADING
argument_list|,
name|UPGRADE
argument_list|,
operator|new
name|ContainerUpgradeTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|UPGRADING
argument_list|,
name|UPGRADING
argument_list|,
name|UPGRADE
argument_list|,
operator|new
name|ContainerUpgradeTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|UPGRADING
argument_list|,
name|READY
argument_list|,
name|BECOME_READY
argument_list|,
operator|new
name|ContainerBecomeReadyTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|UPGRADING
argument_list|,
name|INIT
argument_list|,
name|STOP
argument_list|,
operator|new
name|ContainerStoppedTransition
argument_list|()
argument_list|)
operator|.
name|installTopology
argument_list|()
decl_stmt|;
DECL|method|ComponentInstance (Component component, ComponentInstanceId compInstanceId)
specifier|public
name|ComponentInstance
parameter_list|(
name|Component
name|component
parameter_list|,
name|ComponentInstanceId
name|compInstanceId
parameter_list|)
block|{
name|this
operator|.
name|stateMachine
operator|=
name|stateMachineFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|component
operator|=
name|component
expr_stmt|;
name|this
operator|.
name|compInstanceId
operator|=
name|compInstanceId
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|component
operator|.
name|getScheduler
argument_list|()
expr_stmt|;
name|this
operator|.
name|yarnRegistryOperations
operator|=
name|component
operator|.
name|getScheduler
argument_list|()
operator|.
name|getYarnRegistryOperations
argument_list|()
expr_stmt|;
name|this
operator|.
name|serviceTimelinePublisher
operator|=
name|component
operator|.
name|getScheduler
argument_list|()
operator|.
name|getServiceTimelinePublisher
argument_list|()
expr_stmt|;
if|if
condition|(
name|YarnConfiguration
operator|.
name|timelineServiceV2Enabled
argument_list|(
name|component
operator|.
name|getScheduler
argument_list|()
operator|.
name|getConfig
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|timelineServiceEnabled
operator|=
literal|true
expr_stmt|;
block|}
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|scheduler
operator|.
name|getContext
argument_list|()
operator|.
name|fs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
DECL|class|ContainerStartedTransition
specifier|private
specifier|static
class|class
name|ContainerStartedTransition
extends|extends
name|BaseTransition
block|{
DECL|method|transition (ComponentInstance compInstance, ComponentInstanceEvent event)
annotation|@
name|Override
specifier|public
name|void
name|transition
parameter_list|(
name|ComponentInstance
name|compInstance
parameter_list|,
name|ComponentInstanceEvent
name|event
parameter_list|)
block|{
comment|// Query container status for ip and host
name|boolean
name|cancelOnSuccess
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|compInstance
operator|.
name|getCompSpec
argument_list|()
operator|.
name|getArtifact
argument_list|()
operator|!=
literal|null
operator|&&
name|compInstance
operator|.
name|getCompSpec
argument_list|()
operator|.
name|getArtifact
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|Artifact
operator|.
name|TypeEnum
operator|.
name|DOCKER
condition|)
block|{
comment|// A docker container might get a different IP if the container is
comment|// relaunched by the NM, so we need to keep checking the status.
comment|// This is a temporary fix until the NM provides a callback for
comment|// container relaunch (see YARN-8265).
name|cancelOnSuccess
operator|=
literal|false
expr_stmt|;
block|}
name|compInstance
operator|.
name|containerStatusFuture
operator|=
name|compInstance
operator|.
name|scheduler
operator|.
name|executorService
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|ContainerStatusRetriever
argument_list|(
name|compInstance
operator|.
name|scheduler
argument_list|,
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|compInstance
argument_list|,
name|cancelOnSuccess
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|long
name|containerStartTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|ContainerTokenIdentifier
name|containerTokenIdentifier
init|=
name|BuilderUtils
operator|.
name|newContainerTokenIdentifier
argument_list|(
name|compInstance
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerToken
argument_list|()
argument_list|)
decl_stmt|;
name|containerStartTime
operator|=
name|containerTokenIdentifier
operator|.
name|getCreationTime
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not get container creation time, using current time"
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Container
name|container
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Container
argument_list|()
decl_stmt|;
name|container
operator|.
name|setId
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|setLaunchTime
argument_list|(
operator|new
name|Date
argument_list|(
name|containerStartTime
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|setState
argument_list|(
name|ContainerState
operator|.
name|RUNNING_BUT_UNREADY
argument_list|)
expr_stmt|;
name|container
operator|.
name|setBareHost
argument_list|(
name|compInstance
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|setComponentInstanceName
argument_list|(
name|compInstance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|compInstance
operator|.
name|containerSpec
operator|!=
literal|null
condition|)
block|{
comment|// remove the previous container.
name|compInstance
operator|.
name|getCompSpec
argument_list|()
operator|.
name|removeContainer
argument_list|(
name|compInstance
operator|.
name|containerSpec
argument_list|)
expr_stmt|;
block|}
name|compInstance
operator|.
name|containerSpec
operator|=
name|container
expr_stmt|;
name|compInstance
operator|.
name|getCompSpec
argument_list|()
operator|.
name|addContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|compInstance
operator|.
name|containerStartedTime
operator|=
name|containerStartTime
expr_stmt|;
name|compInstance
operator|.
name|component
operator|.
name|incRunningContainers
argument_list|()
expr_stmt|;
name|compInstance
operator|.
name|serviceVersion
operator|=
name|compInstance
operator|.
name|scheduler
operator|.
name|getApp
argument_list|()
operator|.
name|getVersion
argument_list|()
expr_stmt|;
if|if
condition|(
name|compInstance
operator|.
name|timelineServiceEnabled
condition|)
block|{
name|compInstance
operator|.
name|serviceTimelinePublisher
operator|.
name|componentInstanceStarted
argument_list|(
name|container
argument_list|,
name|compInstance
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ContainerBecomeReadyTransition
specifier|private
specifier|static
class|class
name|ContainerBecomeReadyTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (ComponentInstance compInstance, ComponentInstanceEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ComponentInstance
name|compInstance
parameter_list|,
name|ComponentInstanceEvent
name|event
parameter_list|)
block|{
name|compInstance
operator|.
name|containerSpec
operator|.
name|setState
argument_list|(
name|ContainerState
operator|.
name|READY
argument_list|)
expr_stmt|;
if|if
condition|(
name|compInstance
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ComponentInstanceState
operator|.
name|UPGRADING
argument_list|)
condition|)
block|{
name|compInstance
operator|.
name|component
operator|.
name|incContainersReady
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|compInstance
operator|.
name|component
operator|.
name|decContainersThatNeedUpgrade
argument_list|()
expr_stmt|;
name|compInstance
operator|.
name|serviceVersion
operator|=
name|compInstance
operator|.
name|component
operator|.
name|getUpgradeEvent
argument_list|()
operator|.
name|getUpgradeVersion
argument_list|()
expr_stmt|;
name|ComponentEvent
name|checkState
init|=
operator|new
name|ComponentEvent
argument_list|(
name|compInstance
operator|.
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|ComponentEventType
operator|.
name|CHECK_STABLE
argument_list|)
decl_stmt|;
name|compInstance
operator|.
name|scheduler
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|checkState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compInstance
operator|.
name|component
operator|.
name|incContainersReady
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compInstance
operator|.
name|timelineServiceEnabled
condition|)
block|{
name|compInstance
operator|.
name|serviceTimelinePublisher
operator|.
name|componentInstanceBecomeReady
argument_list|(
name|compInstance
operator|.
name|containerSpec
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ContainerBecomeNotReadyTransition
specifier|private
specifier|static
class|class
name|ContainerBecomeNotReadyTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (ComponentInstance compInstance, ComponentInstanceEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ComponentInstance
name|compInstance
parameter_list|,
name|ComponentInstanceEvent
name|event
parameter_list|)
block|{
name|compInstance
operator|.
name|containerSpec
operator|.
name|setState
argument_list|(
name|ContainerState
operator|.
name|RUNNING_BUT_UNREADY
argument_list|)
expr_stmt|;
name|compInstance
operator|.
name|component
operator|.
name|decContainersReady
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|handleComponentInstanceRelaunch (ComponentInstance compInstance, ComponentInstanceEvent event, boolean failureBeforeLaunch, String containerDiag)
specifier|static
name|void
name|handleComponentInstanceRelaunch
parameter_list|(
name|ComponentInstance
name|compInstance
parameter_list|,
name|ComponentInstanceEvent
name|event
parameter_list|,
name|boolean
name|failureBeforeLaunch
parameter_list|,
name|String
name|containerDiag
parameter_list|)
block|{
name|Component
name|comp
init|=
name|compInstance
operator|.
name|getComponent
argument_list|()
decl_stmt|;
comment|// Do we need to relaunch the service?
name|boolean
name|hasContainerFailed
init|=
name|failureBeforeLaunch
operator|||
name|hasContainerFailed
argument_list|(
name|event
operator|.
name|getStatus
argument_list|()
argument_list|)
decl_stmt|;
name|ComponentRestartPolicy
name|restartPolicy
init|=
name|comp
operator|.
name|getRestartPolicyHandler
argument_list|()
decl_stmt|;
name|ContainerState
name|containerState
init|=
name|hasContainerFailed
condition|?
name|ContainerState
operator|.
name|FAILED
else|:
name|ContainerState
operator|.
name|SUCCEEDED
decl_stmt|;
if|if
condition|(
name|compInstance
operator|.
name|getContainerSpec
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|compInstance
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|setState
argument_list|(
name|containerState
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|restartPolicy
operator|.
name|shouldRelaunchInstance
argument_list|(
name|compInstance
argument_list|,
name|event
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
comment|// re-ask the failed container.
name|comp
operator|.
name|requestContainers
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|comp
operator|.
name|reInsertPendingInstance
argument_list|(
name|compInstance
argument_list|)
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|compInstance
operator|.
name|getCompInstanceId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" completed. Reinsert back to pending list and requested "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"a new container."
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" exitStatus="
argument_list|)
operator|.
name|append
argument_list|(
name|failureBeforeLaunch
condition|?
literal|null
else|:
name|event
operator|.
name|getStatus
argument_list|()
operator|.
name|getExitStatus
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", diagnostics="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|failureBeforeLaunch
condition|?
name|FAILED_BEFORE_LAUNCH_DIAG
else|:
name|event
operator|.
name|getStatus
argument_list|()
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getStatus
argument_list|()
operator|.
name|getExitStatus
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compInstance
operator|.
name|timelineServiceEnabled
condition|)
block|{
comment|// record in ATS
name|LOG
operator|.
name|info
argument_list|(
literal|"Publishing component instance status {} {} "
argument_list|,
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|containerState
argument_list|)
expr_stmt|;
name|compInstance
operator|.
name|serviceTimelinePublisher
operator|.
name|componentInstanceFinished
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|event
operator|.
name|getStatus
argument_list|()
operator|.
name|getExitStatus
argument_list|()
argument_list|,
name|containerState
argument_list|,
name|containerDiag
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// When no relaunch, update component's #succeeded/#failed
comment|// instances.
if|if
condition|(
name|hasContainerFailed
condition|)
block|{
name|comp
operator|.
name|markAsFailed
argument_list|(
name|compInstance
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|comp
operator|.
name|markAsSucceeded
argument_list|(
name|compInstance
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compInstance
operator|.
name|timelineServiceEnabled
condition|)
block|{
comment|// record in ATS
name|compInstance
operator|.
name|serviceTimelinePublisher
operator|.
name|componentInstanceFinished
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|event
operator|.
name|getStatus
argument_list|()
operator|.
name|getExitStatus
argument_list|()
argument_list|,
name|containerState
argument_list|,
name|containerDiag
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|compInstance
operator|.
name|getCompInstanceId
argument_list|()
operator|+
operator|(
operator|!
name|hasContainerFailed
condition|?
literal|" succeeded"
else|:
literal|" failed"
operator|)
operator|+
literal|" without retry, exitStatus="
operator|+
name|event
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|comp
operator|.
name|getScheduler
argument_list|()
operator|.
name|terminateServiceIfAllComponentsFinished
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|hasContainerFailed (ContainerStatus containerStatus)
specifier|public
specifier|static
name|boolean
name|hasContainerFailed
parameter_list|(
name|ContainerStatus
name|containerStatus
parameter_list|)
block|{
comment|//Mark conainer as failed if we cant get its exit status i.e null?
return|return
name|containerStatus
operator|==
literal|null
operator|||
name|containerStatus
operator|.
name|getExitStatus
argument_list|()
operator|!=
name|ContainerExitStatus
operator|.
name|SUCCESS
return|;
block|}
DECL|class|ContainerStoppedTransition
specifier|private
specifier|static
class|class
name|ContainerStoppedTransition
extends|extends
name|BaseTransition
block|{
comment|// whether the container failed before launched by AM or not.
DECL|field|failedBeforeLaunching
name|boolean
name|failedBeforeLaunching
init|=
literal|false
decl_stmt|;
DECL|method|ContainerStoppedTransition (boolean failedBeforeLaunching)
specifier|public
name|ContainerStoppedTransition
parameter_list|(
name|boolean
name|failedBeforeLaunching
parameter_list|)
block|{
name|this
operator|.
name|failedBeforeLaunching
operator|=
name|failedBeforeLaunching
expr_stmt|;
block|}
DECL|method|ContainerStoppedTransition ()
specifier|public
name|ContainerStoppedTransition
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (ComponentInstance compInstance, ComponentInstanceEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ComponentInstance
name|compInstance
parameter_list|,
name|ComponentInstanceEvent
name|event
parameter_list|)
block|{
name|Component
name|comp
init|=
name|compInstance
operator|.
name|component
decl_stmt|;
name|String
name|containerDiag
init|=
name|compInstance
operator|.
name|getCompInstanceId
argument_list|()
operator|+
literal|": "
operator|+
operator|(
name|failedBeforeLaunching
condition|?
name|FAILED_BEFORE_LAUNCH_DIAG
else|:
name|event
operator|.
name|getStatus
argument_list|()
operator|.
name|getDiagnostics
argument_list|()
operator|)
decl_stmt|;
name|compInstance
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|containerDiag
operator|+
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|compInstance
operator|.
name|cancelContainerStatusRetriever
argument_list|()
expr_stmt|;
if|if
condition|(
name|compInstance
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ComponentInstanceState
operator|.
name|UPGRADING
argument_list|)
condition|)
block|{
name|compInstance
operator|.
name|component
operator|.
name|decContainersThatNeedUpgrade
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|compInstance
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|READY
argument_list|)
condition|)
block|{
name|compInstance
operator|.
name|component
operator|.
name|decContainersReady
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|compInstance
operator|.
name|component
operator|.
name|decRunningContainers
argument_list|()
expr_stmt|;
comment|// Should we fail (terminate) the service?
name|boolean
name|shouldFailService
init|=
literal|false
decl_stmt|;
specifier|final
name|ServiceScheduler
name|scheduler
init|=
name|comp
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|getAmRMClient
argument_list|()
operator|.
name|releaseAssignedContainer
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check if it exceeds the failure threshold, but only if health threshold
comment|// monitor is not enabled
if|if
condition|(
operator|!
name|comp
operator|.
name|isHealthThresholdMonitorEnabled
argument_list|()
operator|&&
name|comp
operator|.
name|currentContainerFailure
operator|.
name|get
argument_list|()
operator|>
name|comp
operator|.
name|maxContainerFailurePerComp
condition|)
block|{
name|String
name|exitDiag
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"[COMPONENT {0}]: Failed {1} times, exceeded the limit - {2}. "
operator|+
literal|"Shutting down now... "
operator|+
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|,
name|comp
operator|.
name|getName
argument_list|()
argument_list|,
name|comp
operator|.
name|currentContainerFailure
operator|.
name|get
argument_list|()
argument_list|,
name|comp
operator|.
name|maxContainerFailurePerComp
argument_list|)
decl_stmt|;
name|compInstance
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|exitDiag
argument_list|)
expr_stmt|;
comment|// append to global diagnostics that will be reported to RM.
name|scheduler
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|append
argument_list|(
name|containerDiag
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|append
argument_list|(
name|exitDiag
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|exitDiag
argument_list|)
expr_stmt|;
name|compInstance
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|setState
argument_list|(
name|ContainerState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|comp
operator|.
name|getComponentSpec
argument_list|()
operator|.
name|setState
argument_list|(
name|ComponentState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|comp
operator|.
name|getScheduler
argument_list|()
operator|.
name|getApp
argument_list|()
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
if|if
condition|(
name|compInstance
operator|.
name|timelineServiceEnabled
condition|)
block|{
comment|// record in ATS
name|compInstance
operator|.
name|scheduler
operator|.
name|getServiceTimelinePublisher
argument_list|()
operator|.
name|componentInstanceFinished
argument_list|(
name|compInstance
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|failedBeforeLaunching
condition|?
operator|-
literal|1
else|:
name|event
operator|.
name|getStatus
argument_list|()
operator|.
name|getExitStatus
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|FAILED
argument_list|,
name|containerDiag
argument_list|)
expr_stmt|;
comment|// mark other component-instances/containers as STOPPED
for|for
control|(
name|ContainerId
name|containerId
range|:
name|scheduler
operator|.
name|getLiveInstances
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|compInstance
operator|.
name|container
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
argument_list|)
operator|&&
operator|!
name|isFinalState
argument_list|(
name|compInstance
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
name|compInstance
operator|.
name|getContainerSpec
argument_list|()
operator|.
name|setState
argument_list|(
name|ContainerState
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|compInstance
operator|.
name|scheduler
operator|.
name|getServiceTimelinePublisher
argument_list|()
operator|.
name|componentInstanceFinished
argument_list|(
name|containerId
argument_list|,
name|KILLED_AFTER_APP_COMPLETION
argument_list|,
name|ContainerState
operator|.
name|STOPPED
argument_list|,
name|scheduler
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|compInstance
operator|.
name|scheduler
operator|.
name|getServiceTimelinePublisher
argument_list|()
operator|.
name|componentFinished
argument_list|(
name|comp
operator|.
name|getComponentSpec
argument_list|()
argument_list|,
name|ComponentState
operator|.
name|FAILED
argument_list|,
name|scheduler
operator|.
name|getSystemClock
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|compInstance
operator|.
name|scheduler
operator|.
name|getServiceTimelinePublisher
argument_list|()
operator|.
name|serviceAttemptUnregistered
argument_list|(
name|comp
operator|.
name|getContext
argument_list|()
argument_list|,
name|FinalApplicationStatus
operator|.
name|FAILED
argument_list|,
name|scheduler
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|shouldFailService
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|failedBeforeLaunching
condition|)
block|{
comment|// clean up registry
comment|// If the container failed before launching, no need to cleanup
comment|// registry,
comment|// because it was not registered before.
comment|// hdfs dir content will be overwritten when a new container gets
comment|// started,
comment|// so no need remove.
name|compInstance
operator|.
name|scheduler
operator|.
name|executorService
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
name|compInstance
operator|.
name|cleanupRegistry
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// remove the failed ContainerId -> CompInstance mapping
name|scheduler
operator|.
name|removeLiveCompInstance
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
comment|// According to component restart policy, handle container restart
comment|// or finish the service (if all components finished)
name|handleComponentInstanceRelaunch
argument_list|(
name|compInstance
argument_list|,
name|event
argument_list|,
name|failedBeforeLaunching
argument_list|,
name|containerDiag
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldFailService
condition|)
block|{
name|scheduler
operator|.
name|getTerminationHandler
argument_list|()
operator|.
name|terminate
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isFinalState (ContainerState state)
specifier|public
specifier|static
name|boolean
name|isFinalState
parameter_list|(
name|ContainerState
name|state
parameter_list|)
block|{
return|return
name|ContainerState
operator|.
name|FAILED
operator|.
name|equals
argument_list|(
name|state
argument_list|)
operator|||
name|ContainerState
operator|.
name|STOPPED
operator|.
name|equals
argument_list|(
name|state
argument_list|)
operator|||
name|ContainerState
operator|.
name|SUCCEEDED
operator|.
name|equals
argument_list|(
name|state
argument_list|)
return|;
block|}
DECL|class|ContainerUpgradeTransition
specifier|private
specifier|static
class|class
name|ContainerUpgradeTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (ComponentInstance compInstance, ComponentInstanceEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ComponentInstance
name|compInstance
parameter_list|,
name|ComponentInstanceEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|compInstance
operator|.
name|containerSpec
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ContainerState
operator|.
name|NEEDS_UPGRADE
argument_list|)
condition|)
block|{
comment|//nothing to upgrade. this may happen with express upgrade.
return|return;
block|}
name|compInstance
operator|.
name|containerSpec
operator|.
name|setState
argument_list|(
name|ContainerState
operator|.
name|UPGRADING
argument_list|)
expr_stmt|;
name|compInstance
operator|.
name|component
operator|.
name|decContainersReady
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ComponentEvent
name|upgradeEvent
init|=
name|compInstance
operator|.
name|component
operator|.
name|getUpgradeEvent
argument_list|()
decl_stmt|;
name|compInstance
operator|.
name|scheduler
operator|.
name|getContainerLaunchService
argument_list|()
operator|.
name|reInitCompInstance
argument_list|(
name|compInstance
operator|.
name|scheduler
operator|.
name|getApp
argument_list|()
argument_list|,
name|compInstance
argument_list|,
name|compInstance
operator|.
name|container
argument_list|,
name|compInstance
operator|.
name|component
operator|.
name|createLaunchContext
argument_list|(
name|upgradeEvent
operator|.
name|getTargetSpec
argument_list|()
argument_list|,
name|upgradeEvent
operator|.
name|getUpgradeVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getState ()
specifier|public
name|ComponentInstanceState
name|getState
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns the version of service at which the instance is at.    */
DECL|method|getServiceVersion ()
specifier|public
name|String
name|getServiceVersion
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|serviceVersion
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns the state of the container in the container spec.    */
DECL|method|getContainerState ()
specifier|public
name|ContainerState
name|getContainerState
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|containerSpec
operator|.
name|getState
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|handle (ComponentInstanceEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ComponentInstanceEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ComponentInstanceState
name|oldState
init|=
name|getState
argument_list|()
decl_stmt|;
try|try
block|{
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|getCompInstanceId
argument_list|()
operator|+
literal|": Invalid event "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" at "
operator|+
name|oldState
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldState
operator|!=
name|getState
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getCompInstanceId
argument_list|()
operator|+
literal|" Transitioned from "
operator|+
name|oldState
operator|+
literal|" to "
operator|+
name|getState
argument_list|()
operator|+
literal|" on "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" event"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setContainer (Container container)
specifier|public
name|void
name|setContainer
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|compInstanceId
operator|.
name|setContainerId
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getCompInstanceName ()
specifier|public
name|String
name|getCompInstanceName
parameter_list|()
block|{
return|return
name|compInstanceId
operator|.
name|getCompInstanceName
argument_list|()
return|;
block|}
DECL|method|getContainerStatus ()
specifier|public
name|ContainerStatus
name|getContainerStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
DECL|method|updateContainerStatus (ContainerStatus status)
specifier|public
name|void
name|updateContainerStatus
parameter_list|(
name|ContainerStatus
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Container
name|container
init|=
name|getCompSpec
argument_list|()
operator|.
name|getContainer
argument_list|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|doRegistryUpdate
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|String
name|existingIP
init|=
name|container
operator|.
name|getIp
argument_list|()
decl_stmt|;
name|String
name|newIP
init|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|status
operator|.
name|getIPs
argument_list|()
argument_list|)
decl_stmt|;
name|container
operator|.
name|setIp
argument_list|(
name|newIP
argument_list|)
expr_stmt|;
name|container
operator|.
name|setHostname
argument_list|(
name|status
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|existingIP
operator|!=
literal|null
operator|&&
name|newIP
operator|.
name|equals
argument_list|(
name|existingIP
argument_list|)
condition|)
block|{
name|doRegistryUpdate
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|timelineServiceEnabled
operator|&&
name|doRegistryUpdate
condition|)
block|{
name|serviceTimelinePublisher
operator|.
name|componentInstanceIPHostUpdated
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doRegistryUpdate
condition|)
block|{
name|cleanupRegistry
argument_list|(
name|status
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getCompInstanceId
argument_list|()
operator|+
literal|" new IP = "
operator|+
name|status
operator|.
name|getIPs
argument_list|()
operator|+
literal|", host = "
operator|+
name|status
operator|.
name|getHost
argument_list|()
operator|+
literal|", updating registry"
argument_list|)
expr_stmt|;
name|updateServiceRecord
argument_list|(
name|yarnRegistryOperations
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCompName ()
specifier|public
name|String
name|getCompName
parameter_list|()
block|{
return|return
name|compInstanceId
operator|.
name|getCompName
argument_list|()
return|;
block|}
DECL|method|setCompInstanceDir (Path dir)
specifier|public
name|void
name|setCompInstanceDir
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
name|this
operator|.
name|compInstanceDir
operator|=
name|dir
expr_stmt|;
block|}
DECL|method|getComponent ()
specifier|public
name|Component
name|getComponent
parameter_list|()
block|{
return|return
name|component
return|;
block|}
DECL|method|getContainer ()
specifier|public
name|Container
name|getContainer
parameter_list|()
block|{
return|return
name|container
return|;
block|}
DECL|method|getCompInstanceId ()
specifier|public
name|ComponentInstanceId
name|getCompInstanceId
parameter_list|()
block|{
return|return
name|compInstanceId
return|;
block|}
DECL|method|getNodeId ()
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
return|return
name|this
operator|.
name|container
operator|.
name|getNodeId
argument_list|()
return|;
block|}
DECL|method|getCompSpec ()
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
name|getCompSpec
parameter_list|()
block|{
return|return
name|component
operator|.
name|getComponentSpec
argument_list|()
return|;
block|}
DECL|class|BaseTransition
specifier|private
specifier|static
class|class
name|BaseTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ComponentInstance
argument_list|,
name|ComponentInstanceEvent
argument_list|>
block|{
DECL|method|transition (ComponentInstance compInstance, ComponentInstanceEvent event)
annotation|@
name|Override
specifier|public
name|void
name|transition
parameter_list|(
name|ComponentInstance
name|compInstance
parameter_list|,
name|ComponentInstanceEvent
name|event
parameter_list|)
block|{     }
block|}
DECL|method|ping ()
specifier|public
name|ProbeStatus
name|ping
parameter_list|()
block|{
if|if
condition|(
name|component
operator|.
name|getProbe
argument_list|()
operator|==
literal|null
condition|)
block|{
name|ProbeStatus
name|status
init|=
operator|new
name|ProbeStatus
argument_list|()
decl_stmt|;
name|status
operator|.
name|setSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
return|return
name|component
operator|.
name|getProbe
argument_list|()
operator|.
name|ping
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|// Write service record into registry
DECL|method|updateServiceRecord ( YarnRegistryViewForProviders yarnRegistry, ContainerStatus status)
specifier|private
name|void
name|updateServiceRecord
parameter_list|(
name|YarnRegistryViewForProviders
name|yarnRegistry
parameter_list|,
name|ContainerStatus
name|status
parameter_list|)
block|{
name|ServiceRecord
name|record
init|=
operator|new
name|ServiceRecord
argument_list|()
decl_stmt|;
name|String
name|containerId
init|=
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|record
operator|.
name|set
argument_list|(
name|YARN_ID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|record
operator|.
name|description
operator|=
name|getCompInstanceName
argument_list|()
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
name|YARN_PERSISTENCE
argument_list|,
name|PersistencePolicies
operator|.
name|CONTAINER
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
name|YARN_IP
argument_list|,
name|status
operator|.
name|getIPs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
name|YARN_HOSTNAME
argument_list|,
name|status
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
name|YARN_COMPONENT
argument_list|,
name|component
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|yarnRegistry
operator|.
name|putComponent
argument_list|(
name|RegistryPathUtils
operator|.
name|encodeYarnID
argument_list|(
name|containerId
argument_list|)
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to update service record in registry: "
operator|+
name|containerId
operator|+
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Called when user flexed down the container and ContainerStoppedTransition
comment|// is not executed in this case.
comment|// Release the container, dec running,
comment|// cleanup registry, hdfs dir, and send record to ATS
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getCompInstanceId
argument_list|()
operator|+
literal|": Flexed down by user, destroying."
argument_list|)
expr_stmt|;
name|diagnostics
operator|.
name|append
argument_list|(
name|getCompInstanceId
argument_list|()
operator|+
literal|": Flexed down by user"
argument_list|)
expr_stmt|;
comment|// update metrics
if|if
condition|(
name|getState
argument_list|()
operator|==
name|STARTED
condition|)
block|{
name|component
operator|.
name|decRunningContainers
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getState
argument_list|()
operator|==
name|READY
condition|)
block|{
name|component
operator|.
name|decContainersReady
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|component
operator|.
name|decRunningContainers
argument_list|()
expr_stmt|;
block|}
name|getCompSpec
argument_list|()
operator|.
name|removeContainer
argument_list|(
name|containerSpec
argument_list|)
expr_stmt|;
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getCompInstanceId
argument_list|()
operator|+
literal|" no container is assigned when "
operator|+
literal|"destroying"
argument_list|)
expr_stmt|;
return|return;
block|}
name|ContainerId
name|containerId
init|=
name|container
operator|.
name|getId
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|removeLiveCompInstance
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|component
operator|.
name|getScheduler
argument_list|()
operator|.
name|getAmRMClient
argument_list|()
operator|.
name|releaseAssignedContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|timelineServiceEnabled
condition|)
block|{
name|serviceTimelinePublisher
operator|.
name|componentInstanceFinished
argument_list|(
name|containerId
argument_list|,
name|KILLED_BY_APPMASTER
argument_list|,
name|ContainerState
operator|.
name|STOPPED
argument_list|,
name|diagnostics
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cancelContainerStatusRetriever
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|executorService
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
name|cleanupRegistryAndCompHdfsDir
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanupRegistry (ContainerId containerId)
specifier|private
name|void
name|cleanupRegistry
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|String
name|cid
init|=
name|RegistryPathUtils
operator|.
name|encodeYarnID
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|yarnRegistryOperations
operator|.
name|deleteComponent
argument_list|(
name|getCompInstanceId
argument_list|()
argument_list|,
name|cid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|getCompInstanceId
argument_list|()
operator|+
literal|": Failed to delete registry"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|//TODO Maybe have a dedicated cleanup service.
DECL|method|cleanupRegistryAndCompHdfsDir (ContainerId containerId)
specifier|public
name|void
name|cleanupRegistryAndCompHdfsDir
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|cleanupRegistry
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|compInstanceDir
operator|!=
literal|null
operator|&&
name|fs
operator|.
name|exists
argument_list|(
name|compInstanceDir
argument_list|)
condition|)
block|{
name|boolean
name|deleted
init|=
name|fs
operator|.
name|delete
argument_list|(
name|compInstanceDir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|getCompInstanceId
argument_list|()
operator|+
literal|": Failed to delete component instance dir: "
operator|+
name|compInstanceDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getCompInstanceId
argument_list|()
operator|+
literal|": Deleted component instance dir: "
operator|+
name|compInstanceDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|getCompInstanceId
argument_list|()
operator|+
literal|": Failed to delete directory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Query container status until ip and hostname are available and update
comment|// the service record into registry service
DECL|class|ContainerStatusRetriever
specifier|private
specifier|static
class|class
name|ContainerStatusRetriever
implements|implements
name|Runnable
block|{
DECL|field|containerId
specifier|private
name|ContainerId
name|containerId
decl_stmt|;
DECL|field|nodeId
specifier|private
name|NodeId
name|nodeId
decl_stmt|;
DECL|field|nmClient
specifier|private
name|NMClient
name|nmClient
decl_stmt|;
DECL|field|instance
specifier|private
name|ComponentInstance
name|instance
decl_stmt|;
DECL|field|cancelOnSuccess
specifier|private
name|boolean
name|cancelOnSuccess
decl_stmt|;
DECL|method|ContainerStatusRetriever (ServiceScheduler scheduler, ContainerId containerId, ComponentInstance instance, boolean cancelOnSuccess)
name|ContainerStatusRetriever
parameter_list|(
name|ServiceScheduler
name|scheduler
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|ComponentInstance
name|instance
parameter_list|,
name|boolean
name|cancelOnSuccess
parameter_list|)
block|{
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|instance
operator|.
name|getNodeId
argument_list|()
expr_stmt|;
name|this
operator|.
name|nmClient
operator|=
name|scheduler
operator|.
name|getNmClient
argument_list|()
operator|.
name|getClient
argument_list|()
expr_stmt|;
name|this
operator|.
name|instance
operator|=
name|instance
expr_stmt|;
name|this
operator|.
name|cancelOnSuccess
operator|=
name|cancelOnSuccess
expr_stmt|;
block|}
DECL|method|run ()
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ContainerStatus
name|status
init|=
literal|null
decl_stmt|;
try|try
block|{
name|status
operator|=
name|nmClient
operator|.
name|getContainerStatus
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|YarnException
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|instance
operator|.
name|compInstanceId
operator|+
literal|" Failed to get container status on "
operator|+
name|nodeId
operator|+
literal|" , cancelling."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|error
argument_list|(
name|instance
operator|.
name|compInstanceId
operator|+
literal|" Failed to get container status on "
operator|+
name|nodeId
operator|+
literal|", will try again"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|ServiceUtils
operator|.
name|isEmpty
argument_list|(
name|status
operator|.
name|getIPs
argument_list|()
argument_list|)
operator|||
name|ServiceUtils
operator|.
name|isUnset
argument_list|(
name|status
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|instance
operator|.
name|updateContainerStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|cancelOnSuccess
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|instance
operator|.
name|compInstanceId
operator|+
literal|" IP = "
operator|+
name|status
operator|.
name|getIPs
argument_list|()
operator|+
literal|", host = "
operator|+
name|status
operator|.
name|getHost
argument_list|()
operator|+
literal|", cancel container status retriever"
argument_list|)
expr_stmt|;
name|instance
operator|.
name|containerStatusFuture
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|cancelContainerStatusRetriever ()
specifier|private
name|void
name|cancelContainerStatusRetriever
parameter_list|()
block|{
if|if
condition|(
name|containerStatusFuture
operator|!=
literal|null
operator|&&
operator|!
name|containerStatusFuture
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|containerStatusFuture
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getHostname ()
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
name|String
name|domain
init|=
name|getComponent
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|RegistryConstants
operator|.
name|KEY_DNS_DOMAIN
argument_list|)
decl_stmt|;
name|String
name|hostname
decl_stmt|;
if|if
condition|(
name|domain
operator|==
literal|null
operator|||
name|domain
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hostname
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"{0}.{1}.{2}"
argument_list|,
name|getCompInstanceName
argument_list|()
argument_list|,
name|getComponent
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|RegistryUtils
operator|.
name|currentUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hostname
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"{0}.{1}.{2}.{3}"
argument_list|,
name|getCompInstanceName
argument_list|()
argument_list|,
name|getComponent
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|RegistryUtils
operator|.
name|currentUser
argument_list|()
argument_list|,
name|domain
argument_list|)
expr_stmt|;
block|}
return|return
name|hostname
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (ComponentInstance to)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ComponentInstance
name|to
parameter_list|)
block|{
return|return
name|getCompInstanceId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|to
operator|.
name|getCompInstanceId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|equals (Object o)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ComponentInstance
name|instance
init|=
operator|(
name|ComponentInstance
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|containerStartedTime
operator|!=
name|instance
operator|.
name|containerStartedTime
condition|)
return|return
literal|false
return|;
return|return
name|compInstanceId
operator|.
name|equals
argument_list|(
name|instance
operator|.
name|compInstanceId
argument_list|)
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|compInstanceId
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|containerStartedTime
operator|^
operator|(
name|containerStartedTime
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Returns container spec.    */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
DECL|method|getContainerSpec ()
operator|.
name|Container
name|getContainerSpec
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|containerSpec
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

