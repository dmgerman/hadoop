begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.monitor.probe
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|monitor
operator|.
name|probe
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceRegistryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A probe that checks whether the AM has retrieved an IP for a container.  * Optional parameters enable a subsequent check for whether a DNS lookup can  * be performed for the container's hostname. Configurable properties include:  *  *   dns.check.enabled - true if DNS check should be performed (default false)  *   dns.address - optional IP:port address of DNS server to use for DNS check  */
end_comment

begin_class
DECL|class|DefaultProbe
specifier|public
class|class
name|DefaultProbe
extends|extends
name|Probe
block|{
DECL|field|dnsCheckEnabled
specifier|private
specifier|final
name|boolean
name|dnsCheckEnabled
decl_stmt|;
DECL|field|dnsAddress
specifier|private
specifier|final
name|String
name|dnsAddress
decl_stmt|;
DECL|method|DefaultProbe (Map<String, String> props)
specifier|public
name|DefaultProbe
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
name|this
argument_list|(
literal|"Default probe: IP presence"
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
DECL|method|DefaultProbe (String name, Map<String, String> props)
specifier|protected
name|DefaultProbe
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
name|this
operator|.
name|dnsCheckEnabled
operator|=
name|getPropertyBool
argument_list|(
name|props
argument_list|,
name|DEFAULT_PROBE_DNS_CHECK_ENABLED
argument_list|,
name|DEFAULT_PROBE_DNS_CHECK_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|dnsAddress
operator|=
name|props
operator|.
name|get
argument_list|(
name|DEFAULT_PROBE_DNS_ADDRESS
argument_list|)
expr_stmt|;
name|String
name|additionalName
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|dnsCheckEnabled
condition|)
block|{
if|if
condition|(
name|dnsAddress
operator|==
literal|null
condition|)
block|{
name|additionalName
operator|=
literal|" with DNS checking"
expr_stmt|;
block|}
else|else
block|{
name|additionalName
operator|=
literal|" with DNS checking and DNS server address "
operator|+
name|dnsAddress
expr_stmt|;
block|}
block|}
name|setName
argument_list|(
name|name
operator|+
name|additionalName
argument_list|)
expr_stmt|;
block|}
DECL|method|create ()
specifier|public
specifier|static
name|DefaultProbe
name|create
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|DefaultProbe
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
DECL|method|create (Map<String, String> props)
specifier|public
specifier|static
name|DefaultProbe
name|create
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DefaultProbe
argument_list|(
name|props
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|ping (ComponentInstance instance)
specifier|public
name|ProbeStatus
name|ping
parameter_list|(
name|ComponentInstance
name|instance
parameter_list|)
block|{
name|ProbeStatus
name|status
init|=
operator|new
name|ProbeStatus
argument_list|()
decl_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|instance
operator|.
name|getContainerStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|containerStatus
operator|==
literal|null
operator|||
name|ServiceUtils
operator|.
name|isEmpty
argument_list|(
name|containerStatus
operator|.
name|getIPs
argument_list|()
argument_list|)
condition|)
block|{
name|status
operator|.
name|fail
argument_list|(
name|this
argument_list|,
operator|new
name|IOException
argument_list|(
name|instance
operator|.
name|getCompInstanceName
argument_list|()
operator|+
literal|": IP is not available yet"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
name|String
name|hostname
init|=
name|instance
operator|.
name|getHostname
argument_list|()
decl_stmt|;
if|if
condition|(
name|dnsCheckEnabled
operator|&&
operator|!
name|ServiceRegistryUtils
operator|.
name|registryDNSLookupExists
argument_list|(
name|dnsAddress
argument_list|,
name|hostname
argument_list|)
condition|)
block|{
name|status
operator|.
name|fail
argument_list|(
name|this
argument_list|,
operator|new
name|IOException
argument_list|(
name|instance
operator|.
name|getCompInstanceName
argument_list|()
operator|+
literal|": DNS checking is enabled, but "
operator|+
literal|"lookup for "
operator|+
name|hostname
operator|+
literal|" is not available yet"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
name|status
operator|.
name|succeed
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
DECL|method|isDnsCheckEnabled ()
specifier|protected
name|boolean
name|isDnsCheckEnabled
parameter_list|()
block|{
return|return
name|dnsCheckEnabled
return|;
block|}
block|}
end_class

end_unit

