begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.component.instance
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_class
DECL|class|ComponentInstanceId
specifier|public
class|class
name|ComponentInstanceId
implements|implements
name|Comparable
argument_list|<
name|ComponentInstanceId
argument_list|>
block|{
DECL|field|Id
specifier|private
name|long
name|Id
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|containerId
specifier|private
name|ContainerId
name|containerId
decl_stmt|;
DECL|method|ComponentInstanceId (long id, String name)
specifier|public
name|ComponentInstanceId
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|Id
return|;
block|}
DECL|method|getCompName ()
specifier|public
name|String
name|getCompName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getCompInstanceName ()
specifier|public
name|String
name|getCompInstanceName
parameter_list|()
block|{
return|return
name|getCompName
argument_list|()
operator|+
literal|"-"
operator|+
name|getId
argument_list|()
return|;
block|}
DECL|method|setContainerId (ContainerId containerId)
specifier|public
name|void
name|setContainerId
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|containerId
operator|==
literal|null
condition|)
block|{
return|return
literal|"[COMPINSTANCE "
operator|+
name|getCompInstanceName
argument_list|()
operator|+
literal|"]"
return|;
block|}
else|else
block|{
return|return
literal|"[COMPINSTANCE "
operator|+
name|getCompInstanceName
argument_list|()
operator|+
literal|" : "
operator|+
name|containerId
operator|+
literal|"]"
return|;
block|}
block|}
DECL|method|equals (Object o)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ComponentInstanceId
name|that
init|=
operator|(
name|ComponentInstanceId
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|getId
argument_list|()
operator|!=
name|that
operator|.
name|getId
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
name|getCompName
argument_list|()
operator|!=
literal|null
condition|?
name|getCompName
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getCompName
argument_list|()
argument_list|)
else|:
name|that
operator|.
name|getCompName
argument_list|()
operator|==
literal|null
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
call|(
name|int
call|)
argument_list|(
name|getId
argument_list|()
operator|^
operator|(
name|getId
argument_list|()
operator|>>>
literal|32
operator|)
argument_list|)
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|getCompName
argument_list|()
operator|!=
literal|null
condition|?
name|getCompName
argument_list|()
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (ComponentInstanceId to)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ComponentInstanceId
name|to
parameter_list|)
block|{
name|int
name|delta
init|=
name|this
operator|.
name|getCompName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|to
operator|.
name|getCompName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|delta
operator|==
literal|0
condition|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|this
operator|.
name|getId
argument_list|()
argument_list|,
name|to
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|delta
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
block|}
end_class

end_unit

