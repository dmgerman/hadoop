begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.provider.tarball
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|tarball
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|containerlaunch
operator|.
name|ContainerLaunchService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|AbstractProviderService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|containerlaunch
operator|.
name|AbstractLauncher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|TarballProviderService
specifier|public
class|class
name|TarballProviderService
extends|extends
name|AbstractProviderService
block|{
annotation|@
name|Override
DECL|method|processArtifact (AbstractLauncher launcher, ComponentInstance instance, SliderFileSystem fileSystem, Service service, ContainerLaunchService.ComponentLaunchContext compLaunchCtx)
specifier|public
name|void
name|processArtifact
parameter_list|(
name|AbstractLauncher
name|launcher
parameter_list|,
name|ComponentInstance
name|instance
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|Service
name|service
parameter_list|,
name|ContainerLaunchService
operator|.
name|ComponentLaunchContext
name|compLaunchCtx
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|artifact
init|=
operator|new
name|Path
argument_list|(
name|compLaunchCtx
operator|.
name|getArtifact
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|isFile
argument_list|(
name|artifact
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Package doesn't exist as a resource: "
operator|+
name|artifact
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Adding resource {}"
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|LocalResourceType
name|type
init|=
name|LocalResourceType
operator|.
name|ARCHIVE
decl_stmt|;
name|LocalResource
name|packageResource
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|artifact
argument_list|,
name|type
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|APP_LIB_DIR
argument_list|,
name|packageResource
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

