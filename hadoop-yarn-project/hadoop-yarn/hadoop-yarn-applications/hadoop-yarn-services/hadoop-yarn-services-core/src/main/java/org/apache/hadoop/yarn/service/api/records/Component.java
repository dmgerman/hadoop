begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|annotations
operator|.
name|ApiModel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|annotations
operator|.
name|ApiModelProperty
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonInclude
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * One or more components of the service. If the service is HBase say,  * then the component can be a simple role like master or regionserver. If the  * service is a complex business webapp then a component can be other  * services say Kafka or Storm. Thereby it opens up the support for complex  * and nested services.  **/
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
annotation|@
name|ApiModel
argument_list|(
name|description
operator|=
literal|"One or more components of the service. If the service is HBase say, then the component can be a simple role like master or regionserver. If the service is a complex business webapp then a component can be other services say Kafka or Storm. Thereby it opens up the support for complex and nested services."
argument_list|)
annotation|@
name|javax
operator|.
name|annotation
operator|.
name|Generated
argument_list|(
name|value
operator|=
literal|"class io.swagger.codegen.languages.JavaClientCodegen"
argument_list|,
name|date
operator|=
literal|"2016-06-02T08:15:05.615-07:00"
argument_list|)
annotation|@
name|XmlRootElement
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
annotation|@
name|JsonInclude
argument_list|(
name|JsonInclude
operator|.
name|Include
operator|.
name|NON_NULL
argument_list|)
DECL|class|Component
specifier|public
class|class
name|Component
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|8430058381509087805L
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"name"
argument_list|)
DECL|field|name
specifier|private
name|String
name|name
init|=
literal|null
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"dependencies"
argument_list|)
DECL|field|dependencies
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|dependencies
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"readiness_check"
argument_list|)
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"readiness_check"
argument_list|)
DECL|field|readinessCheck
specifier|private
name|ReadinessCheck
name|readinessCheck
init|=
literal|null
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"artifact"
argument_list|)
DECL|field|artifact
specifier|private
name|Artifact
name|artifact
init|=
literal|null
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"launch_command"
argument_list|)
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"launch_command"
argument_list|)
DECL|field|launchCommand
specifier|private
name|String
name|launchCommand
init|=
literal|null
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"resource"
argument_list|)
DECL|field|resource
specifier|private
name|Resource
name|resource
init|=
literal|null
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"number_of_containers"
argument_list|)
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"number_of_containers"
argument_list|)
DECL|field|numberOfContainers
specifier|private
name|Long
name|numberOfContainers
init|=
literal|null
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"run_privileged_container"
argument_list|)
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"run_privileged_container"
argument_list|)
DECL|field|runPrivilegedContainer
specifier|private
name|Boolean
name|runPrivilegedContainer
init|=
literal|false
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"placement_policy"
argument_list|)
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"placement_policy"
argument_list|)
DECL|field|placementPolicy
specifier|private
name|PlacementPolicy
name|placementPolicy
init|=
literal|null
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"state"
argument_list|)
DECL|field|state
specifier|private
name|ComponentState
name|state
init|=
name|ComponentState
operator|.
name|FLEXING
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"configuration"
argument_list|)
DECL|field|configuration
specifier|private
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"quicklinks"
argument_list|)
DECL|field|quicklinks
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|quicklinks
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"containers"
argument_list|)
DECL|field|containers
specifier|private
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Name of the service component (mandatory).    **/
DECL|method|name (String name)
specifier|public
name|Component
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|value
operator|=
literal|"Name of the service component (mandatory)."
argument_list|)
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**    * An array of service components which should be in READY state (as    * defined by readiness check), before this component can be started. The    * dependencies across all components of a service should be represented    * as a DAG.    **/
DECL|method|dependencies (List<String> dependencies)
specifier|public
name|Component
name|dependencies
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|dependencies
parameter_list|)
block|{
name|this
operator|.
name|dependencies
operator|=
name|dependencies
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"An array of service components which should be in READY state (as defined by readiness check), before this component can be started. The dependencies across all components of an service should be represented as a DAG."
argument_list|)
DECL|method|getDependencies ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDependencies
parameter_list|()
block|{
return|return
name|dependencies
return|;
block|}
DECL|method|setDependencies (List<String> dependencies)
specifier|public
name|void
name|setDependencies
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|dependencies
parameter_list|)
block|{
name|this
operator|.
name|dependencies
operator|=
name|dependencies
expr_stmt|;
block|}
comment|/**    * Readiness check for this component.    **/
DECL|method|readinessCheck (ReadinessCheck readinessCheck)
specifier|public
name|Component
name|readinessCheck
parameter_list|(
name|ReadinessCheck
name|readinessCheck
parameter_list|)
block|{
name|this
operator|.
name|readinessCheck
operator|=
name|readinessCheck
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"Readiness check for this component."
argument_list|)
DECL|method|getReadinessCheck ()
specifier|public
name|ReadinessCheck
name|getReadinessCheck
parameter_list|()
block|{
return|return
name|readinessCheck
return|;
block|}
DECL|method|setReadinessCheck (ReadinessCheck readinessCheck)
specifier|public
name|void
name|setReadinessCheck
parameter_list|(
name|ReadinessCheck
name|readinessCheck
parameter_list|)
block|{
name|this
operator|.
name|readinessCheck
operator|=
name|readinessCheck
expr_stmt|;
block|}
comment|/**    * Artifact of the component (optional). If not specified, the service    * level global artifact takes effect.    **/
DECL|method|artifact (Artifact artifact)
specifier|public
name|Component
name|artifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|this
operator|.
name|artifact
operator|=
name|artifact
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"Artifact of the component (optional). If not specified, the service level global artifact takes effect."
argument_list|)
DECL|method|getArtifact ()
specifier|public
name|Artifact
name|getArtifact
parameter_list|()
block|{
return|return
name|artifact
return|;
block|}
DECL|method|setArtifact (Artifact artifact)
specifier|public
name|void
name|setArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|this
operator|.
name|artifact
operator|=
name|artifact
expr_stmt|;
block|}
comment|/**    * The custom launch command of this component (optional). When specified at    * the component level, it overrides the value specified at the global level    * (if any).    **/
DECL|method|launchCommand (String launchCommand)
specifier|public
name|Component
name|launchCommand
parameter_list|(
name|String
name|launchCommand
parameter_list|)
block|{
name|this
operator|.
name|launchCommand
operator|=
name|launchCommand
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"The custom launch command of this component (optional). When specified at the component level, it overrides the value specified at the global level (if any)."
argument_list|)
DECL|method|getLaunchCommand ()
specifier|public
name|String
name|getLaunchCommand
parameter_list|()
block|{
return|return
name|launchCommand
return|;
block|}
DECL|method|setLaunchCommand (String launchCommand)
specifier|public
name|void
name|setLaunchCommand
parameter_list|(
name|String
name|launchCommand
parameter_list|)
block|{
name|this
operator|.
name|launchCommand
operator|=
name|launchCommand
expr_stmt|;
block|}
comment|/**    * Resource of this component (optional). If not specified, the service    * level global resource takes effect.    **/
DECL|method|resource (Resource resource)
specifier|public
name|Component
name|resource
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"Resource of this component (optional). If not specified, the service level global resource takes effect."
argument_list|)
DECL|method|getResource ()
specifier|public
name|Resource
name|getResource
parameter_list|()
block|{
return|return
name|resource
return|;
block|}
DECL|method|setResource (Resource resource)
specifier|public
name|void
name|setResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
comment|/**    * Number of containers for this component (optional). If not specified,    * the service level global number_of_containers takes effect.    **/
DECL|method|numberOfContainers (Long numberOfContainers)
specifier|public
name|Component
name|numberOfContainers
parameter_list|(
name|Long
name|numberOfContainers
parameter_list|)
block|{
name|this
operator|.
name|numberOfContainers
operator|=
name|numberOfContainers
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"Number of containers for this component (optional). If not specified, the service level global number_of_containers takes effect."
argument_list|)
DECL|method|getNumberOfContainers ()
specifier|public
name|Long
name|getNumberOfContainers
parameter_list|()
block|{
return|return
name|numberOfContainers
return|;
block|}
DECL|method|setNumberOfContainers (Long numberOfContainers)
specifier|public
name|void
name|setNumberOfContainers
parameter_list|(
name|Long
name|numberOfContainers
parameter_list|)
block|{
name|this
operator|.
name|numberOfContainers
operator|=
name|numberOfContainers
expr_stmt|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"Containers of a started component. Specifying a value for this attribute for the POST payload raises a validation error. This blob is available only in the GET response of a started service."
argument_list|)
DECL|method|getContainers ()
specifier|public
name|List
argument_list|<
name|Container
argument_list|>
name|getContainers
parameter_list|()
block|{
return|return
name|containers
return|;
block|}
DECL|method|setContainers (List<Container> containers)
specifier|public
name|void
name|setContainers
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|containers
parameter_list|)
block|{
name|this
operator|.
name|containers
operator|=
name|containers
expr_stmt|;
block|}
DECL|method|addContainer (Container container)
specifier|public
name|void
name|addContainer
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|this
operator|.
name|containers
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
DECL|method|removeContainer (Container container)
specifier|public
name|void
name|removeContainer
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|containers
operator|.
name|remove
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
DECL|method|getContainer (String id)
specifier|public
name|Container
name|getContainer
parameter_list|(
name|String
name|id
parameter_list|)
block|{
for|for
control|(
name|Container
name|container
range|:
name|containers
control|)
block|{
if|if
condition|(
name|container
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|container
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Run all containers of this component in privileged mode (YARN-4262).    **/
DECL|method|runPrivilegedContainer (Boolean runPrivilegedContainer)
specifier|public
name|Component
name|runPrivilegedContainer
parameter_list|(
name|Boolean
name|runPrivilegedContainer
parameter_list|)
block|{
name|this
operator|.
name|runPrivilegedContainer
operator|=
name|runPrivilegedContainer
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"Run all containers of this component in privileged mode (YARN-4262)."
argument_list|)
DECL|method|getRunPrivilegedContainer ()
specifier|public
name|Boolean
name|getRunPrivilegedContainer
parameter_list|()
block|{
return|return
name|runPrivilegedContainer
return|;
block|}
DECL|method|setRunPrivilegedContainer (Boolean runPrivilegedContainer)
specifier|public
name|void
name|setRunPrivilegedContainer
parameter_list|(
name|Boolean
name|runPrivilegedContainer
parameter_list|)
block|{
name|this
operator|.
name|runPrivilegedContainer
operator|=
name|runPrivilegedContainer
expr_stmt|;
block|}
comment|/**    * Advanced scheduling and placement policies for all containers of this    * component (optional). If not specified, the service level placement_policy    * takes effect. Refer to the description at the global level for more    * details.    **/
DECL|method|placementPolicy (PlacementPolicy placementPolicy)
specifier|public
name|Component
name|placementPolicy
parameter_list|(
name|PlacementPolicy
name|placementPolicy
parameter_list|)
block|{
name|this
operator|.
name|placementPolicy
operator|=
name|placementPolicy
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"Advanced scheduling and placement policies for all containers of this component (optional). If not specified, the service level placement_policy takes effect. Refer to the description at the global level for more details."
argument_list|)
DECL|method|getPlacementPolicy ()
specifier|public
name|PlacementPolicy
name|getPlacementPolicy
parameter_list|()
block|{
return|return
name|placementPolicy
return|;
block|}
DECL|method|setPlacementPolicy (PlacementPolicy placementPolicy)
specifier|public
name|void
name|setPlacementPolicy
parameter_list|(
name|PlacementPolicy
name|placementPolicy
parameter_list|)
block|{
name|this
operator|.
name|placementPolicy
operator|=
name|placementPolicy
expr_stmt|;
block|}
comment|/**    * Config properties for this component.    **/
DECL|method|configuration (Configuration configuration)
specifier|public
name|Component
name|configuration
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"Config properties for this component."
argument_list|)
DECL|method|getConfiguration ()
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (Configuration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
comment|/**    * A list of quicklink keys defined at the service level, and to be    * resolved by this component.    **/
DECL|method|quicklinks (List<String> quicklinks)
specifier|public
name|Component
name|quicklinks
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|quicklinks
parameter_list|)
block|{
name|this
operator|.
name|quicklinks
operator|=
name|quicklinks
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"A list of quicklink keys defined at the service level, and to be resolved by this component."
argument_list|)
DECL|method|getQuicklinks ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getQuicklinks
parameter_list|()
block|{
return|return
name|quicklinks
return|;
block|}
DECL|method|setQuicklinks (List<String> quicklinks)
specifier|public
name|void
name|setQuicklinks
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|quicklinks
parameter_list|)
block|{
name|this
operator|.
name|quicklinks
operator|=
name|quicklinks
expr_stmt|;
block|}
DECL|method|state (ComponentState state)
specifier|public
name|Component
name|state
parameter_list|(
name|ComponentState
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|ApiModelProperty
argument_list|(
name|example
operator|=
literal|"null"
argument_list|,
name|value
operator|=
literal|"State of the component."
argument_list|)
DECL|method|getState ()
specifier|public
name|ComponentState
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
DECL|method|setState (ComponentState state)
specifier|public
name|void
name|setState
parameter_list|(
name|ComponentState
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (java.lang.Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Component
name|component
init|=
operator|(
name|Component
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|component
operator|.
name|name
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|dependencies
argument_list|,
name|component
operator|.
name|dependencies
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|readinessCheck
argument_list|,
name|component
operator|.
name|readinessCheck
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|artifact
argument_list|,
name|component
operator|.
name|artifact
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|launchCommand
argument_list|,
name|component
operator|.
name|launchCommand
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|resource
argument_list|,
name|component
operator|.
name|resource
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|numberOfContainers
argument_list|,
name|component
operator|.
name|numberOfContainers
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|runPrivilegedContainer
argument_list|,
name|component
operator|.
name|runPrivilegedContainer
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|placementPolicy
argument_list|,
name|component
operator|.
name|placementPolicy
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|configuration
argument_list|,
name|component
operator|.
name|configuration
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|quicklinks
argument_list|,
name|component
operator|.
name|quicklinks
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|state
argument_list|,
name|component
operator|.
name|state
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|name
argument_list|,
name|dependencies
argument_list|,
name|readinessCheck
argument_list|,
name|artifact
argument_list|,
name|launchCommand
argument_list|,
name|resource
argument_list|,
name|numberOfContainers
argument_list|,
name|runPrivilegedContainer
argument_list|,
name|placementPolicy
argument_list|,
name|configuration
argument_list|,
name|quicklinks
argument_list|,
name|state
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"class Component {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    name: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    state: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|state
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    dependencies: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|dependencies
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    readinessCheck: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|readinessCheck
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    artifact: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|artifact
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    launchCommand: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|launchCommand
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    resource: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|resource
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    numberOfContainers: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|numberOfContainers
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    containers: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|containers
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    runPrivilegedContainer: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|runPrivilegedContainer
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    placementPolicy: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|placementPolicy
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    configuration: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|configuration
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    quicklinks: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|quicklinks
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Convert the given object to string with each line indented by 4 spaces    * (except the first line).    */
DECL|method|toIndentedString (java.lang.Object o)
specifier|private
name|String
name|toIndentedString
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
return|return
name|o
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"\n    "
argument_list|)
return|;
block|}
comment|/**    * Merge from another component into this component without overwriting.    */
DECL|method|mergeFrom (Component that)
specifier|public
name|void
name|mergeFrom
parameter_list|(
name|Component
name|that
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getArtifact
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setArtifact
argument_list|(
name|that
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getResource
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setResource
argument_list|(
name|that
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getNumberOfContainers
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setNumberOfContainers
argument_list|(
name|that
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getLaunchCommand
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setLaunchCommand
argument_list|(
name|that
operator|.
name|getLaunchCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|getConfiguration
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|that
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|getQuicklinks
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setQuicklinks
argument_list|(
name|that
operator|.
name|getQuicklinks
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getRunPrivilegedContainer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setRunPrivilegedContainer
argument_list|(
name|that
operator|.
name|getRunPrivilegedContainer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getDependencies
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setDependencies
argument_list|(
name|that
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getPlacementPolicy
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setPlacementPolicy
argument_list|(
name|that
operator|.
name|getPlacementPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getReadinessCheck
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setReadinessCheck
argument_list|(
name|that
operator|.
name|getReadinessCheck
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

