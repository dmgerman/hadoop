begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentRestartPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstanceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstanceEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
operator|.
name|jsonSerDeser
import|;
end_import

begin_comment
comment|/**  * Manages the state of Service.  */
end_comment

begin_class
DECL|class|ServiceManager
specifier|public
class|class
name|ServiceManager
implements|implements
name|EventHandler
argument_list|<
name|ServiceEvent
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ServiceManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|serviceSpec
specifier|private
specifier|final
name|Service
name|serviceSpec
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|ServiceContext
name|context
decl_stmt|;
DECL|field|scheduler
specifier|private
specifier|final
name|ServiceScheduler
name|scheduler
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
operator|.
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
operator|.
name|WriteLock
name|writeLock
decl_stmt|;
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|State
argument_list|,
name|ServiceEventType
argument_list|,
name|ServiceEvent
argument_list|>
DECL|field|stateMachine
name|stateMachine
decl_stmt|;
DECL|field|componentsFinder
specifier|private
specifier|final
name|UpgradeComponentsFinder
name|componentsFinder
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|final
name|AsyncDispatcher
name|dispatcher
decl_stmt|;
DECL|field|fs
specifier|private
specifier|final
name|SliderFileSystem
name|fs
decl_stmt|;
DECL|field|upgradeVersion
specifier|private
name|String
name|upgradeVersion
decl_stmt|;
specifier|private
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
DECL|field|componentsToUpgrade
operator|.
name|Component
argument_list|>
name|componentsToUpgrade
decl_stmt|;
DECL|field|compsAffectedByUpgrade
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|compsAffectedByUpgrade
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|cancelledVersion
specifier|private
name|String
name|cancelledVersion
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StateMachineFactory
argument_list|<
name|ServiceManager
argument_list|,
name|State
argument_list|,
DECL|field|STATE_MACHINE_FACTORY
name|ServiceEventType
argument_list|,
name|ServiceEvent
argument_list|>
name|STATE_MACHINE_FACTORY
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|ServiceManager
argument_list|,
name|State
argument_list|,
name|ServiceEventType
argument_list|,
name|ServiceEvent
argument_list|>
argument_list|(
name|State
operator|.
name|STABLE
argument_list|)
operator|.
name|addTransition
argument_list|(
name|State
operator|.
name|STABLE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|State
operator|.
name|STABLE
argument_list|,
name|State
operator|.
name|UPGRADING
argument_list|)
argument_list|,
name|ServiceEventType
operator|.
name|UPGRADE
argument_list|,
operator|new
name|StartUpgradeTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|State
operator|.
name|STABLE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|State
operator|.
name|STABLE
argument_list|)
argument_list|,
name|ServiceEventType
operator|.
name|CHECK_STABLE
argument_list|,
operator|new
name|CheckStableTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|State
operator|.
name|UPGRADING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|State
operator|.
name|STABLE
argument_list|,
name|State
operator|.
name|UPGRADING
argument_list|)
argument_list|,
name|ServiceEventType
operator|.
name|START
argument_list|,
operator|new
name|StartFromUpgradeTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|State
operator|.
name|UPGRADING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|State
operator|.
name|STABLE
argument_list|,
name|State
operator|.
name|UPGRADING
argument_list|)
argument_list|,
name|ServiceEventType
operator|.
name|CHECK_STABLE
argument_list|,
operator|new
name|CheckStableTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|State
operator|.
name|UPGRADING
argument_list|,
name|State
operator|.
name|UPGRADING
argument_list|,
name|ServiceEventType
operator|.
name|CANCEL_UPGRADE
argument_list|,
operator|new
name|CancelUpgradeTransition
argument_list|()
argument_list|)
operator|.
name|installTopology
argument_list|()
decl_stmt|;
DECL|method|ServiceManager (ServiceContext context)
specifier|public
name|ServiceManager
parameter_list|(
name|ServiceContext
name|context
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|serviceSpec
operator|=
name|context
operator|.
name|service
expr_stmt|;
name|scheduler
operator|=
name|context
operator|.
name|scheduler
expr_stmt|;
name|stateMachine
operator|=
name|STATE_MACHINE_FACTORY
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|dispatcher
operator|=
name|scheduler
operator|.
name|getDispatcher
argument_list|()
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|fs
operator|=
name|context
operator|.
name|fs
expr_stmt|;
name|componentsFinder
operator|=
operator|new
name|UpgradeComponentsFinder
operator|.
name|DefaultUpgradeComponentsFinder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (ServiceEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ServiceEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|State
name|oldState
init|=
name|getState
argument_list|()
decl_stmt|;
try|try
block|{
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"[SERVICE]: Invalid event {1} at {2}."
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|oldState
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldState
operator|!=
name|getState
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[SERVICE] Transitioned from {} to {} on {} event."
argument_list|,
name|oldState
argument_list|,
name|getState
argument_list|()
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getState ()
specifier|private
name|State
name|getState
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|StartUpgradeTransition
specifier|private
specifier|static
class|class
name|StartUpgradeTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|ServiceManager
argument_list|,
name|ServiceEvent
argument_list|,
name|State
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ServiceManager serviceManager, ServiceEvent event)
specifier|public
name|State
name|transition
parameter_list|(
name|ServiceManager
name|serviceManager
parameter_list|,
name|ServiceEvent
name|event
parameter_list|)
block|{
name|serviceManager
operator|.
name|upgradeVersion
operator|=
name|event
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|serviceManager
operator|.
name|componentsToUpgrade
operator|=
name|event
operator|.
name|getCompsToUpgrade
argument_list|()
expr_stmt|;
name|event
operator|.
name|getCompsToUpgrade
argument_list|()
operator|.
name|forEach
argument_list|(
name|comp
lambda|->
name|serviceManager
operator|.
name|compsAffectedByUpgrade
operator|.
name|add
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|event
operator|.
name|isExpressUpgrade
argument_list|()
condition|)
block|{
name|serviceManager
operator|.
name|dispatchNeedUpgradeEvents
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|serviceManager
operator|.
name|upgradeNextCompIfAny
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serviceManager
operator|.
name|dispatchNeedUpgradeEvents
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|isExpressUpgrade
argument_list|()
condition|)
block|{
name|serviceManager
operator|.
name|setServiceState
argument_list|(
name|ServiceState
operator|.
name|EXPRESS_UPGRADING
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|isAutoFinalize
argument_list|()
condition|)
block|{
name|serviceManager
operator|.
name|setServiceState
argument_list|(
name|ServiceState
operator|.
name|UPGRADING_AUTO_FINALIZE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serviceManager
operator|.
name|setServiceState
argument_list|(
name|ServiceState
operator|.
name|UPGRADING
argument_list|)
expr_stmt|;
block|}
name|ServiceApiUtil
operator|.
name|checkServiceDependencySatisified
argument_list|(
name|serviceManager
operator|.
name|getServiceSpec
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|State
operator|.
name|UPGRADING
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"[SERVICE]: Upgrade to version {} failed"
argument_list|,
name|event
operator|.
name|getVersion
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|State
operator|.
name|STABLE
return|;
block|}
block|}
block|}
DECL|class|CheckStableTransition
specifier|private
specifier|static
class|class
name|CheckStableTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|ServiceManager
argument_list|,
name|ServiceEvent
argument_list|,
name|State
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ServiceManager serviceManager, ServiceEvent event)
specifier|public
name|State
name|transition
parameter_list|(
name|ServiceManager
name|serviceManager
parameter_list|,
name|ServiceEvent
name|event
parameter_list|)
block|{
comment|//trigger check of service state
name|ServiceState
name|currState
init|=
name|serviceManager
operator|.
name|serviceSpec
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|currState
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|STABLE
argument_list|)
condition|)
block|{
return|return
name|State
operator|.
name|STABLE
return|;
block|}
if|if
condition|(
name|currState
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|EXPRESS_UPGRADING
argument_list|)
operator|||
name|currState
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|CANCEL_UPGRADING
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|serviceManager
operator|.
name|componentsToUpgrade
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
name|compSpec
init|=
name|serviceManager
operator|.
name|componentsToUpgrade
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Component
name|component
init|=
name|serviceManager
operator|.
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|get
argument_list|(
name|compSpec
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|component
operator|.
name|isUpgrading
argument_list|()
condition|)
block|{
name|serviceManager
operator|.
name|componentsToUpgrade
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|serviceManager
operator|.
name|upgradeNextCompIfAny
argument_list|(
name|currState
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|CANCEL_UPGRADING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|currState
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|UPGRADING_AUTO_FINALIZE
argument_list|)
operator|||
operator|(
operator|(
name|currState
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|EXPRESS_UPGRADING
argument_list|)
operator|||
name|currState
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|CANCEL_UPGRADING
argument_list|)
operator|)
operator|&&
name|serviceManager
operator|.
name|componentsToUpgrade
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|ServiceState
name|targetState
init|=
name|checkIfStable
argument_list|(
name|serviceManager
operator|.
name|serviceSpec
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetState
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|STABLE
argument_list|)
condition|)
block|{
if|if
condition|(
name|serviceManager
operator|.
name|finalizeUpgrade
argument_list|(
name|currState
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|CANCEL_UPGRADING
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|State
operator|.
name|STABLE
return|;
block|}
block|}
block|}
return|return
name|State
operator|.
name|UPGRADING
return|;
block|}
block|}
DECL|class|StartFromUpgradeTransition
specifier|private
specifier|static
class|class
name|StartFromUpgradeTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|ServiceManager
argument_list|,
name|ServiceEvent
argument_list|,
name|State
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ServiceManager serviceManager, ServiceEvent event)
specifier|public
name|State
name|transition
parameter_list|(
name|ServiceManager
name|serviceManager
parameter_list|,
name|ServiceEvent
name|event
parameter_list|)
block|{
name|ServiceState
name|currState
init|=
name|serviceManager
operator|.
name|serviceSpec
operator|.
name|getState
argument_list|()
decl_stmt|;
name|ServiceState
name|targetState
init|=
name|checkIfStable
argument_list|(
name|serviceManager
operator|.
name|serviceSpec
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetState
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|STABLE
argument_list|)
condition|)
block|{
if|if
condition|(
name|serviceManager
operator|.
name|finalizeUpgrade
argument_list|(
name|currState
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|CANCEL_UPGRADING
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|State
operator|.
name|STABLE
return|;
block|}
block|}
return|return
name|State
operator|.
name|UPGRADING
return|;
block|}
block|}
DECL|class|CancelUpgradeTransition
specifier|private
specifier|static
class|class
name|CancelUpgradeTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ServiceManager
argument_list|,
name|ServiceEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ServiceManager serviceManager, ServiceEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ServiceManager
name|serviceManager
parameter_list|,
name|ServiceEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|serviceManager
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|State
operator|.
name|UPGRADING
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[SERVICE]: Cannot cancel the upgrade in {} state"
argument_list|,
name|serviceManager
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|Service
name|targetSpec
init|=
name|ServiceApiUtil
operator|.
name|loadService
argument_list|(
name|serviceManager
operator|.
name|context
operator|.
name|fs
argument_list|,
name|serviceManager
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|sourceSpec
init|=
name|ServiceApiUtil
operator|.
name|loadServiceUpgrade
argument_list|(
name|serviceManager
operator|.
name|context
operator|.
name|fs
argument_list|,
name|serviceManager
operator|.
name|getName
argument_list|()
argument_list|,
name|serviceManager
operator|.
name|upgradeVersion
argument_list|)
decl_stmt|;
name|serviceManager
operator|.
name|cancelledVersion
operator|=
name|serviceManager
operator|.
name|upgradeVersion
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"[SERVICE] cancel version {}"
argument_list|,
name|serviceManager
operator|.
name|cancelledVersion
argument_list|)
expr_stmt|;
name|serviceManager
operator|.
name|upgradeVersion
operator|=
name|serviceManager
operator|.
name|serviceSpec
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|serviceManager
operator|.
name|componentsToUpgrade
operator|=
name|serviceManager
operator|.
name|resolveCompsToUpgrade
argument_list|(
name|sourceSpec
argument_list|,
name|targetSpec
argument_list|)
expr_stmt|;
name|serviceManager
operator|.
name|compsAffectedByUpgrade
operator|.
name|clear
argument_list|()
expr_stmt|;
name|serviceManager
operator|.
name|componentsToUpgrade
operator|.
name|forEach
argument_list|(
name|comp
lambda|->
name|serviceManager
operator|.
name|compsAffectedByUpgrade
operator|.
name|add
argument_list|(
name|comp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|serviceManager
operator|.
name|dispatchNeedUpgradeEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|serviceManager
operator|.
name|upgradeNextCompIfAny
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|serviceManager
operator|.
name|setServiceState
argument_list|(
name|ServiceState
operator|.
name|CANCEL_UPGRADING
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"[SERVICE]: Cancellation of upgrade failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|upgradeNextCompIfAny (boolean cancelUpgrade)
specifier|private
name|void
name|upgradeNextCompIfAny
parameter_list|(
name|boolean
name|cancelUpgrade
parameter_list|)
block|{
if|if
condition|(
operator|!
name|componentsToUpgrade
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
name|component
init|=
name|componentsToUpgrade
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|serviceSpec
operator|.
name|getComponent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getContainers
argument_list|()
operator|.
name|forEach
argument_list|(
name|container
lambda|->
block|{
name|ComponentInstanceEvent
name|upgradeEvent
init|=
operator|new
name|ComponentInstanceEvent
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|!
name|cancelUpgrade
condition|?
name|ComponentInstanceEventType
operator|.
name|UPGRADE
else|:
name|ComponentInstanceEventType
operator|.
name|CANCEL_UPGRADE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Upgrade container {} {}"
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|cancelUpgrade
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|upgradeEvent
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dispatchNeedUpgradeEvents (boolean cancelUpgrade)
specifier|private
name|void
name|dispatchNeedUpgradeEvents
parameter_list|(
name|boolean
name|cancelUpgrade
parameter_list|)
block|{
if|if
condition|(
name|componentsToUpgrade
operator|!=
literal|null
condition|)
block|{
name|componentsToUpgrade
operator|.
name|forEach
argument_list|(
name|component
lambda|->
block|{
name|ComponentEvent
name|needUpgradeEvent
init|=
operator|new
name|ComponentEvent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|,
operator|!
name|cancelUpgrade
condition|?
name|ComponentEventType
operator|.
name|UPGRADE
else|:
name|ComponentEventType
operator|.
name|CANCEL_UPGRADE
argument_list|)
operator|.
name|setTargetSpec
argument_list|(
name|component
argument_list|)
operator|.
name|setUpgradeVersion
argument_list|(
name|upgradeVersion
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Upgrade component {} {}"
argument_list|,
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|cancelUpgrade
argument_list|)
expr_stmt|;
name|context
operator|.
name|scheduler
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|needUpgradeEvent
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return whether finalization of upgrade was successful.    */
DECL|method|finalizeUpgrade (boolean cancelUpgrade)
specifier|private
name|boolean
name|finalizeUpgrade
parameter_list|(
name|boolean
name|cancelUpgrade
parameter_list|)
block|{
if|if
condition|(
operator|!
name|cancelUpgrade
condition|)
block|{
try|try
block|{
comment|// save the application id and state to
name|Service
name|targetSpec
init|=
name|ServiceApiUtil
operator|.
name|loadServiceUpgrade
argument_list|(
name|fs
argument_list|,
name|getName
argument_list|()
argument_list|,
name|upgradeVersion
argument_list|)
decl_stmt|;
name|targetSpec
operator|.
name|setId
argument_list|(
name|serviceSpec
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|targetSpec
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|STABLE
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Component
argument_list|>
name|allComps
init|=
name|scheduler
operator|.
name|getAllComponents
argument_list|()
decl_stmt|;
name|targetSpec
operator|.
name|getComponents
argument_list|()
operator|.
name|forEach
argument_list|(
name|compSpec
lambda|->
block|{
name|Component
name|comp
init|=
name|allComps
operator|.
name|get
argument_list|(
name|compSpec
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|compSpec
operator|.
name|setState
argument_list|(
name|comp
operator|.
name|getComponentSpec
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|jsonSerDeser
operator|.
name|save
argument_list|(
name|fs
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|ServiceApiUtil
operator|.
name|getServiceJsonPath
argument_list|(
name|fs
argument_list|,
name|getName
argument_list|()
argument_list|)
argument_list|,
name|targetSpec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Upgrade did not complete because unable to re-write the"
operator|+
literal|" service definition"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
try|try
block|{
name|String
name|upgradeVersionToDel
init|=
name|cancelUpgrade
condition|?
name|cancelledVersion
else|:
name|upgradeVersion
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"[SERVICE]: delete upgrade dir version {}"
argument_list|,
name|upgradeVersionToDel
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteClusterUpgradeDir
argument_list|(
name|getName
argument_list|()
argument_list|,
name|upgradeVersionToDel
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|comp
range|:
name|compsAffectedByUpgrade
control|)
block|{
name|String
name|compDirVersionToDel
init|=
name|cancelUpgrade
condition|?
name|cancelledVersion
else|:
name|serviceSpec
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"[SERVICE]: delete {} dir version {}"
argument_list|,
name|comp
argument_list|,
name|compDirVersionToDel
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteComponentDir
argument_list|(
name|compDirVersionToDel
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cancelUpgrade
condition|)
block|{
name|fs
operator|.
name|deleteComponentsVersionDirIfEmpty
argument_list|(
name|cancelledVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fs
operator|.
name|deleteComponentsVersionDirIfEmpty
argument_list|(
name|serviceSpec
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete upgrade definition for service {} "
operator|+
literal|"version {}"
argument_list|,
name|getName
argument_list|()
argument_list|,
name|upgradeVersion
argument_list|)
expr_stmt|;
block|}
name|setServiceState
argument_list|(
name|ServiceState
operator|.
name|STABLE
argument_list|)
expr_stmt|;
name|serviceSpec
operator|.
name|setVersion
argument_list|(
name|upgradeVersion
argument_list|)
expr_stmt|;
name|upgradeVersion
operator|=
literal|null
expr_stmt|;
name|cancelledVersion
operator|=
literal|null
expr_stmt|;
name|compsAffectedByUpgrade
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|checkIfStable (Service service)
specifier|private
specifier|static
name|ServiceState
name|checkIfStable
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
comment|// if desired == running
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
name|comp
range|:
name|service
operator|.
name|getComponents
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|comp
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ComponentState
operator|.
name|STABLE
argument_list|)
condition|)
block|{
return|return
name|service
operator|.
name|getState
argument_list|()
return|;
block|}
block|}
return|return
name|ServiceState
operator|.
name|STABLE
return|;
block|}
comment|/**    * Service state gets directly modified by ServiceMaster and Component.    * This is a problem for upgrade and flexing. For now, invoking    * ServiceMaster.checkAndUpdateServiceState here to make it easy to fix    * this in future.    */
DECL|method|checkAndUpdateServiceState ()
specifier|public
name|void
name|checkAndUpdateServiceState
parameter_list|()
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|State
operator|.
name|UPGRADING
argument_list|)
condition|)
block|{
name|ServiceMaster
operator|.
name|checkAndUpdateServiceState
argument_list|(
name|this
operator|.
name|scheduler
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|processUpgradeRequest (String upgradeVersion, boolean autoFinalize, boolean expressUpgrade)
name|void
name|processUpgradeRequest
parameter_list|(
name|String
name|upgradeVersion
parameter_list|,
name|boolean
name|autoFinalize
parameter_list|,
name|boolean
name|expressUpgrade
parameter_list|)
throws|throws
name|IOException
block|{
name|Service
name|targetSpec
init|=
name|ServiceApiUtil
operator|.
name|loadServiceUpgrade
argument_list|(
name|context
operator|.
name|fs
argument_list|,
name|context
operator|.
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|upgradeVersion
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
argument_list|>
name|compsNeedUpgradeList
init|=
name|resolveCompsToUpgrade
argument_list|(
name|context
operator|.
name|service
argument_list|,
name|targetSpec
argument_list|)
decl_stmt|;
name|ServiceEvent
name|event
init|=
operator|new
name|ServiceEvent
argument_list|(
name|ServiceEventType
operator|.
name|UPGRADE
argument_list|)
operator|.
name|setVersion
argument_list|(
name|upgradeVersion
argument_list|)
operator|.
name|setAutoFinalize
argument_list|(
name|autoFinalize
argument_list|)
operator|.
name|setExpressUpgrade
argument_list|(
name|expressUpgrade
argument_list|)
decl_stmt|;
if|if
condition|(
name|expressUpgrade
condition|)
block|{
comment|// In case of express upgrade  components need to be upgraded in order.
comment|// Once the service manager gets notified that a component finished
comment|// upgrading, it then issues event to upgrade the next component.
name|Map
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
argument_list|>
name|compsNeedUpgradeByName
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|compsNeedUpgradeList
operator|!=
literal|null
condition|)
block|{
name|compsNeedUpgradeList
operator|.
name|forEach
argument_list|(
name|component
lambda|->
name|compsNeedUpgradeByName
operator|.
name|put
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|component
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|resolvedComps
init|=
name|ServiceApiUtil
operator|.
name|resolveCompsDependency
argument_list|(
name|targetSpec
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
argument_list|>
name|orderedCompUpgrade
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|resolvedComps
operator|.
name|forEach
argument_list|(
name|compName
lambda|->
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
name|component
init|=
name|compsNeedUpgradeByName
operator|.
name|get
argument_list|(
name|compName
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
name|orderedCompUpgrade
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|event
operator|.
name|setCompsToUpgrade
argument_list|(
name|orderedCompUpgrade
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|event
operator|.
name|setCompsToUpgrade
argument_list|(
name|compsNeedUpgradeList
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|scheduler
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|autoFinalize
operator|&&
operator|(
name|compsNeedUpgradeList
operator|==
literal|null
operator|||
name|compsNeedUpgradeList
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
comment|// nothing to upgrade and auto finalize is requested, trigger a
comment|// state check.
name|context
operator|.
name|scheduler
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ServiceEvent
argument_list|(
name|ServiceEventType
operator|.
name|CHECK_STABLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
argument_list|>
DECL|method|resolveCompsToUpgrade (Service sourceSpec, Service targetSpec)
name|resolveCompsToUpgrade
parameter_list|(
name|Service
name|sourceSpec
parameter_list|,
name|Service
name|targetSpec
parameter_list|)
block|{
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
argument_list|>
name|compsNeedUpgradeList
init|=
name|componentsFinder
operator|.
name|findTargetComponentSpecs
argument_list|(
name|sourceSpec
argument_list|,
name|targetSpec
argument_list|)
decl_stmt|;
comment|// remove all components from need upgrade list if there restart policy
comment|// doesn't all upgrade.
if|if
condition|(
name|compsNeedUpgradeList
operator|!=
literal|null
condition|)
block|{
name|compsNeedUpgradeList
operator|.
name|removeIf
argument_list|(
name|component
lambda|->
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
operator|.
name|RestartPolicyEnum
name|restartPolicy
init|=
name|component
operator|.
name|getRestartPolicy
argument_list|()
decl_stmt|;
specifier|final
name|ComponentRestartPolicy
name|restartPolicyHandler
init|=
name|Component
operator|.
name|getRestartPolicyHandler
argument_list|(
name|restartPolicy
argument_list|)
decl_stmt|;
comment|// Do not allow upgrades for components which have NEVER/ON_FAILURE
comment|// restart policy
if|if
condition|(
operator|!
name|restartPolicyHandler
operator|.
name|allowUpgrades
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The component {} has a restart policy that doesnt "
operator|+
literal|"allow upgrades {} "
argument_list|,
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|component
operator|.
name|getRestartPolicy
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|compsNeedUpgradeList
return|;
block|}
comment|/**    * Sets the state of the service in the service spec.    * @param state service state    */
DECL|method|setServiceState ( org.apache.hadoop.yarn.service.api.records.ServiceState state)
specifier|private
name|void
name|setServiceState
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceState
name|state
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceState
name|curState
init|=
name|serviceSpec
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|curState
operator|.
name|equals
argument_list|(
name|state
argument_list|)
condition|)
block|{
name|serviceSpec
operator|.
name|setState
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"[SERVICE] spec state changed from {} -> {}"
argument_list|,
name|curState
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns the name of the service.    */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|serviceSpec
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**    * State of {@link ServiceManager}.    */
DECL|enum|State
specifier|public
enum|enum
name|State
block|{
DECL|enumConstant|STABLE
DECL|enumConstant|UPGRADING
name|STABLE
block|,
name|UPGRADING
block|}
annotation|@
name|VisibleForTesting
DECL|method|getServiceSpec ()
name|Service
name|getServiceSpec
parameter_list|()
block|{
return|return
name|serviceSpec
return|;
block|}
block|}
end_class

end_unit

