begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|MultipleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  * Manages the state of the service.  */
end_comment

begin_class
DECL|class|ServiceManager
specifier|public
class|class
name|ServiceManager
implements|implements
name|EventHandler
argument_list|<
name|ServiceEvent
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ServiceManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|serviceSpec
specifier|private
specifier|final
name|Service
name|serviceSpec
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|ServiceContext
name|context
decl_stmt|;
DECL|field|scheduler
specifier|private
specifier|final
name|ServiceScheduler
name|scheduler
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
operator|.
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
operator|.
name|WriteLock
name|writeLock
decl_stmt|;
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|State
argument_list|,
name|ServiceEventType
argument_list|,
name|ServiceEvent
argument_list|>
DECL|field|stateMachine
name|stateMachine
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|final
name|AsyncDispatcher
name|dispatcher
decl_stmt|;
DECL|field|fs
specifier|private
specifier|final
name|SliderFileSystem
name|fs
decl_stmt|;
DECL|field|componentsFinder
specifier|private
specifier|final
name|UpgradeComponentsFinder
name|componentsFinder
decl_stmt|;
DECL|field|upgradeVersion
specifier|private
name|String
name|upgradeVersion
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StateMachineFactory
argument_list|<
name|ServiceManager
argument_list|,
name|State
argument_list|,
DECL|field|STATE_MACHINE_FACTORY
name|ServiceEventType
argument_list|,
name|ServiceEvent
argument_list|>
name|STATE_MACHINE_FACTORY
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|ServiceManager
argument_list|,
name|State
argument_list|,
name|ServiceEventType
argument_list|,
name|ServiceEvent
argument_list|>
argument_list|(
name|State
operator|.
name|STABLE
argument_list|)
operator|.
name|addTransition
argument_list|(
name|State
operator|.
name|STABLE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|State
operator|.
name|STABLE
argument_list|,
name|State
operator|.
name|UPGRADING
argument_list|)
argument_list|,
name|ServiceEventType
operator|.
name|UPGRADE
argument_list|,
operator|new
name|StartUpgradeTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|State
operator|.
name|UPGRADING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|State
operator|.
name|STABLE
argument_list|,
name|State
operator|.
name|UPGRADING
argument_list|)
argument_list|,
name|ServiceEventType
operator|.
name|START
argument_list|,
operator|new
name|StopUpgradeTransition
argument_list|()
argument_list|)
operator|.
name|installTopology
argument_list|()
decl_stmt|;
DECL|method|ServiceManager (ServiceContext context)
specifier|public
name|ServiceManager
parameter_list|(
name|ServiceContext
name|context
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|serviceSpec
operator|=
name|context
operator|.
name|service
expr_stmt|;
name|scheduler
operator|=
name|context
operator|.
name|scheduler
expr_stmt|;
name|stateMachine
operator|=
name|STATE_MACHINE_FACTORY
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|dispatcher
operator|=
name|scheduler
operator|.
name|getDispatcher
argument_list|()
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|fs
operator|=
name|context
operator|.
name|fs
expr_stmt|;
name|componentsFinder
operator|=
operator|new
name|UpgradeComponentsFinder
operator|.
name|DefaultUpgradeComponentsFinder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (ServiceEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ServiceEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|State
name|oldState
init|=
name|getState
argument_list|()
decl_stmt|;
try|try
block|{
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"[SERVICE]: Invalid event {0} at {1}."
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|oldState
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldState
operator|!=
name|getState
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[SERVICE] Transitioned from {} to {} on {} event."
argument_list|,
name|oldState
argument_list|,
name|getState
argument_list|()
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getState ()
specifier|private
name|State
name|getState
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|StartUpgradeTransition
specifier|private
specifier|static
class|class
name|StartUpgradeTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|ServiceManager
argument_list|,
name|ServiceEvent
argument_list|,
name|State
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ServiceManager serviceManager, ServiceEvent event)
specifier|public
name|State
name|transition
parameter_list|(
name|ServiceManager
name|serviceManager
parameter_list|,
name|ServiceEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|Service
name|targetSpec
init|=
name|ServiceApiUtil
operator|.
name|loadServiceUpgrade
argument_list|(
name|serviceManager
operator|.
name|fs
argument_list|,
name|serviceManager
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|serviceManager
operator|.
name|serviceSpec
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|UPGRADING
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
argument_list|>
name|compsThatNeedUpgrade
init|=
name|serviceManager
operator|.
name|componentsFinder
operator|.
name|findTargetComponentSpecs
argument_list|(
name|serviceManager
operator|.
name|serviceSpec
argument_list|,
name|targetSpec
argument_list|)
decl_stmt|;
if|if
condition|(
name|compsThatNeedUpgrade
operator|!=
literal|null
operator|&&
operator|!
name|compsThatNeedUpgrade
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|compsThatNeedUpgrade
operator|.
name|forEach
argument_list|(
name|component
lambda|->
block|{
name|ComponentEvent
name|needUpgradeEvent
init|=
operator|new
name|ComponentEvent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|ComponentEventType
operator|.
name|UPGRADE
argument_list|)
operator|.
name|setTargetSpec
argument_list|(
name|component
argument_list|)
decl_stmt|;
name|serviceManager
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|needUpgradeEvent
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
name|serviceManager
operator|.
name|upgradeVersion
operator|=
name|event
operator|.
name|getVersion
argument_list|()
expr_stmt|;
return|return
name|State
operator|.
name|UPGRADING
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"[SERVICE]: Upgrade to version {} failed"
argument_list|,
name|event
operator|.
name|getVersion
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|State
operator|.
name|STABLE
return|;
block|}
block|}
block|}
DECL|class|StopUpgradeTransition
specifier|private
specifier|static
class|class
name|StopUpgradeTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|ServiceManager
argument_list|,
name|ServiceEvent
argument_list|,
name|State
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ServiceManager serviceManager, ServiceEvent event)
specifier|public
name|State
name|transition
parameter_list|(
name|ServiceManager
name|serviceManager
parameter_list|,
name|ServiceEvent
name|event
parameter_list|)
block|{
comment|//abort is not supported currently
comment|//trigger re-check of service state
name|ServiceMaster
operator|.
name|checkAndUpdateServiceState
argument_list|(
name|serviceManager
operator|.
name|scheduler
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|serviceManager
operator|.
name|serviceSpec
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ServiceState
operator|.
name|STABLE
argument_list|)
condition|)
block|{
return|return
name|serviceManager
operator|.
name|finalizeUpgrade
argument_list|()
condition|?
name|State
operator|.
name|STABLE
else|:
name|State
operator|.
name|UPGRADING
return|;
block|}
else|else
block|{
return|return
name|State
operator|.
name|UPGRADING
return|;
block|}
block|}
block|}
comment|/**    * @return whether finalization of upgrade was successful.    */
DECL|method|finalizeUpgrade ()
specifier|private
name|boolean
name|finalizeUpgrade
parameter_list|()
block|{
try|try
block|{
name|Service
name|upgradeSpec
init|=
name|ServiceApiUtil
operator|.
name|loadServiceUpgrade
argument_list|(
name|fs
argument_list|,
name|getName
argument_list|()
argument_list|,
name|upgradeVersion
argument_list|)
decl_stmt|;
name|ServiceApiUtil
operator|.
name|writeAppDefinition
argument_list|(
name|fs
argument_list|,
name|ServiceApiUtil
operator|.
name|getServiceJsonPath
argument_list|(
name|fs
argument_list|,
name|getName
argument_list|()
argument_list|)
argument_list|,
name|upgradeSpec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Upgrade did not complete because unable to overwrite the"
operator|+
literal|" service definition"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
name|fs
operator|.
name|deleteClusterUpgradeDir
argument_list|(
name|getName
argument_list|()
argument_list|,
name|upgradeVersion
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete upgrade definition for service {} "
operator|+
literal|"version {}"
argument_list|,
name|getName
argument_list|()
argument_list|,
name|upgradeVersion
argument_list|)
expr_stmt|;
block|}
name|serviceSpec
operator|.
name|setVersion
argument_list|(
name|upgradeVersion
argument_list|)
expr_stmt|;
name|upgradeVersion
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Returns the name of the service.    */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|serviceSpec
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**    * State of {@link ServiceManager}.    */
DECL|enum|State
specifier|public
enum|enum
name|State
block|{
DECL|enumConstant|STABLE
DECL|enumConstant|UPGRADING
name|STABLE
block|,
name|UPGRADING
block|}
annotation|@
name|VisibleForTesting
DECL|method|getServiceSpec ()
name|Service
name|getServiceSpec
parameter_list|()
block|{
return|return
name|serviceSpec
return|;
block|}
block|}
end_class

end_unit

