begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.client.params
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
operator|.
name|params
package|;
end_package

begin_import
import|import
name|com
operator|.
name|beust
operator|.
name|jcommander
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|BadCommandArgumentsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|ErrorStrings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|UsageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Base args for all actions  */
end_comment

begin_class
DECL|class|AbstractActionArgs
specifier|public
specifier|abstract
class|class
name|AbstractActionArgs
extends|extends
name|ArgOps
implements|implements
name|Arguments
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractActionArgs
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|AbstractActionArgs ()
specifier|protected
name|AbstractActionArgs
parameter_list|()
block|{   }
comment|/**    * This is the default parameter    */
annotation|@
name|Parameter
DECL|field|parameters
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * get the name: relies on arg 1 being the cluster name in all operations     * @return the name argument, null if there is none    */
DECL|method|getClusterName ()
specifier|public
name|String
name|getClusterName
parameter_list|()
block|{
return|return
operator|(
name|parameters
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|null
else|:
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    -D name=value     Define an configuration option which overrides any options in    the configuration XML files of the image or in the image configuration    directory. The values will be persisted.    Configuration options are only passed to the cluster when creating or reconfiguring a cluster.     */
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
name|ARG_DEFINE
argument_list|,
name|arity
operator|=
literal|1
argument_list|,
name|description
operator|=
literal|"Definitions"
argument_list|,
name|hidden
operator|=
literal|true
argument_list|)
DECL|field|definitions
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|definitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * System properties    */
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_SYSPROP
block|}
argument_list|,
name|arity
operator|=
literal|1
argument_list|,
name|description
operator|=
literal|"system properties in the form name value"
operator|+
literal|" These are set after the JVM is started."
argument_list|,
name|hidden
operator|=
literal|true
argument_list|)
DECL|field|sysprops
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|sysprops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
name|ARG_DEBUG
argument_list|,
name|description
operator|=
literal|"Debug mode"
argument_list|,
name|hidden
operator|=
literal|true
argument_list|)
DECL|field|debug
specifier|public
name|boolean
name|debug
init|=
literal|false
decl_stmt|;
comment|/**    * Get the min #of params expected    * @return the min number of params in the {@link #parameters} field    */
DECL|method|getMinParams ()
specifier|public
name|int
name|getMinParams
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
comment|/**    * Get the name of the action    * @return the action name    */
DECL|method|getActionName ()
specifier|public
specifier|abstract
name|String
name|getActionName
parameter_list|()
function_decl|;
comment|/**    * Get the max #of params expected    * @return the number of params in the {@link #parameters} field;    */
DECL|method|getMaxParams ()
specifier|public
name|int
name|getMaxParams
parameter_list|()
block|{
return|return
name|getMinParams
argument_list|()
return|;
block|}
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|BadCommandArgumentsException
throws|,
name|UsageException
block|{
name|int
name|minArgs
init|=
name|getMinParams
argument_list|()
decl_stmt|;
name|int
name|actionArgSize
init|=
name|parameters
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|minArgs
operator|>
name|actionArgSize
condition|)
block|{
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
name|ErrorStrings
operator|.
name|ERROR_NOT_ENOUGH_ARGUMENTS
operator|+
name|getActionName
argument_list|()
operator|+
literal|", Expected minimum "
operator|+
name|minArgs
operator|+
literal|" but got "
operator|+
name|actionArgSize
argument_list|)
throw|;
block|}
name|int
name|maxArgs
init|=
name|getMaxParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxArgs
operator|==
operator|-
literal|1
condition|)
block|{
name|maxArgs
operator|=
name|minArgs
expr_stmt|;
block|}
if|if
condition|(
name|actionArgSize
operator|>
name|maxArgs
condition|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s for action %s: limit is %d but saw %d: "
argument_list|,
name|ErrorStrings
operator|.
name|ERROR_TOO_MANY_ARGUMENTS
argument_list|,
name|getActionName
argument_list|()
argument_list|,
name|maxArgs
argument_list|,
name|actionArgSize
argument_list|)
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|1
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|message
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|actionArg
range|:
name|parameters
control|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"[{}] \"{}\""
argument_list|,
name|index
operator|++
argument_list|,
name|actionArg
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" \""
argument_list|)
operator|.
name|append
argument_list|(
name|actionArg
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|getActionName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

