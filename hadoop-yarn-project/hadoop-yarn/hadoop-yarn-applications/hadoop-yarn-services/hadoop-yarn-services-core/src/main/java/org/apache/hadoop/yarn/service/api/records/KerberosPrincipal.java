begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonInclude
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|annotations
operator|.
name|ApiModel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|annotations
operator|.
name|ApiModelProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * The kerberos principal of the service.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
annotation|@
name|ApiModel
argument_list|(
name|description
operator|=
literal|"The kerberos principal of the service."
argument_list|)
annotation|@
name|JsonInclude
argument_list|(
name|JsonInclude
operator|.
name|Include
operator|.
name|NON_NULL
argument_list|)
DECL|class|KerberosPrincipal
specifier|public
class|class
name|KerberosPrincipal
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6431667195287650037L
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"principal_name"
argument_list|)
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"principal_name"
argument_list|)
DECL|field|principalName
specifier|private
name|String
name|principalName
init|=
literal|null
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"keytab"
argument_list|)
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"keytab"
argument_list|)
DECL|field|keytab
specifier|private
name|String
name|keytab
init|=
literal|null
decl_stmt|;
DECL|method|principalName (String principalName)
specifier|public
name|KerberosPrincipal
name|principalName
parameter_list|(
name|String
name|principalName
parameter_list|)
block|{
name|this
operator|.
name|principalName
operator|=
name|principalName
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * The principal name of the service.    *    * @return principalName    **/
annotation|@
name|ApiModelProperty
argument_list|(
name|value
operator|=
literal|"The principal name of the service."
argument_list|)
DECL|method|getPrincipalName ()
specifier|public
name|String
name|getPrincipalName
parameter_list|()
block|{
return|return
name|principalName
return|;
block|}
DECL|method|setPrincipalName (String principalName)
specifier|public
name|void
name|setPrincipalName
parameter_list|(
name|String
name|principalName
parameter_list|)
block|{
name|this
operator|.
name|principalName
operator|=
name|principalName
expr_stmt|;
block|}
DECL|method|keytab (String keytab)
specifier|public
name|KerberosPrincipal
name|keytab
parameter_list|(
name|String
name|keytab
parameter_list|)
block|{
name|this
operator|.
name|keytab
operator|=
name|keytab
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * The URI of the kerberos keytab. It supports two schemes \&quot;    * hdfs\&quot; and \&quot;file\&quot;. If the URI starts with \&quot;    * hdfs://\&quot; scheme, it indicates the path on hdfs where the keytab is    * stored. The keytab will be localized by YARN and made available to AM in    * its local directory. If the URI starts with \&quot;file://\&quot;    * scheme, it indicates a path on the local host presumbaly installed by    * admins upfront.    *    * @return keytab    **/
annotation|@
name|ApiModelProperty
argument_list|(
name|value
operator|=
literal|"The URI of the kerberos keytab. It supports two "
operator|+
literal|"schemes \"hdfs\" and \"file\". If the URI starts with \"hdfs://\" "
operator|+
literal|"scheme, it indicates the path on hdfs where the keytab is stored. The "
operator|+
literal|"keytab will be localized by YARN and made available to AM in its local"
operator|+
literal|" directory. If the URI starts with \"file://\" scheme, it indicates a "
operator|+
literal|"path on the local host where the keytab is presumbaly installed by "
operator|+
literal|"admins upfront. "
argument_list|)
DECL|method|getKeytab ()
specifier|public
name|String
name|getKeytab
parameter_list|()
block|{
return|return
name|keytab
return|;
block|}
DECL|method|setKeytab (String keytab)
specifier|public
name|void
name|setKeytab
parameter_list|(
name|String
name|keytab
parameter_list|)
block|{
name|this
operator|.
name|keytab
operator|=
name|keytab
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (java.lang.Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|KerberosPrincipal
name|kerberosPrincipal
init|=
operator|(
name|KerberosPrincipal
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|principalName
argument_list|,
name|kerberosPrincipal
operator|.
name|principalName
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|keytab
argument_list|,
name|kerberosPrincipal
operator|.
name|keytab
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|principalName
argument_list|,
name|keytab
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"class KerberosPrincipal {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    principalName: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|principalName
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    keytab: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|keytab
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Convert the given object to string with each line indented by 4 spaces    * (except the first line).    */
DECL|method|toIndentedString (java.lang.Object o)
specifier|private
name|String
name|toIndentedString
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
return|return
name|o
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"\n    "
argument_list|)
return|;
block|}
block|}
end_class

end_unit

