begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.component
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
operator|.
name|ContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|async
operator|.
name|AMRMClientAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstanceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ContainerFailureTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstanceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|MultipleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|SingleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Apps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|monitor
operator|.
name|probe
operator|.
name|MonitorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|monitor
operator|.
name|probe
operator|.
name|Probe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|ServiceApiConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentEventType
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstanceEventType
operator|.
name|START
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstanceEventType
operator|.
name|STOP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentState
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConf
operator|.
name|CONTAINER_FAILURE_THRESHOLD
import|;
end_import

begin_class
DECL|class|Component
specifier|public
class|class
name|Component
implements|implements
name|EventHandler
argument_list|<
name|ComponentEvent
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Component
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|componentSpec
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
name|componentSpec
decl_stmt|;
DECL|field|allocateId
specifier|private
name|long
name|allocateId
decl_stmt|;
DECL|field|priority
specifier|private
name|Priority
name|priority
decl_stmt|;
DECL|field|componentMetrics
specifier|private
name|ServiceMetrics
name|componentMetrics
decl_stmt|;
DECL|field|scheduler
specifier|private
name|ServiceScheduler
name|scheduler
decl_stmt|;
DECL|field|context
specifier|private
name|ServiceContext
name|context
decl_stmt|;
DECL|field|amrmClient
specifier|private
name|AMRMClientAsync
argument_list|<
name|ContainerRequest
argument_list|>
name|amrmClient
decl_stmt|;
DECL|field|instanceIdCounter
specifier|private
name|AtomicLong
name|instanceIdCounter
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|compInstances
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentInstance
argument_list|>
name|compInstances
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// component instances to be assigned with a container
DECL|field|pendingInstances
specifier|private
name|List
argument_list|<
name|ComponentInstance
argument_list|>
name|pendingInstances
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|failureTracker
specifier|private
name|ContainerFailureTracker
name|failureTracker
decl_stmt|;
DECL|field|probe
specifier|private
name|Probe
name|probe
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
operator|.
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
operator|.
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|maxContainerFailurePerComp
specifier|public
name|int
name|maxContainerFailurePerComp
decl_stmt|;
comment|// The number of containers failed since last reset. This excludes preempted,
comment|// disk_failed containers etc. This will be reset to 0 periodically.
DECL|field|currentContainerFailure
specifier|public
name|AtomicInteger
name|currentContainerFailure
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|StateMachine
argument_list|<
name|ComponentState
argument_list|,
name|ComponentEventType
argument_list|,
name|ComponentEvent
argument_list|>
DECL|field|stateMachine
name|stateMachine
decl_stmt|;
DECL|field|compInstanceDispatcher
specifier|private
name|AsyncDispatcher
name|compInstanceDispatcher
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StateMachineFactory
argument_list|<
name|Component
argument_list|,
name|ComponentState
argument_list|,
name|ComponentEventType
argument_list|,
name|ComponentEvent
argument_list|>
DECL|field|stateMachineFactory
name|stateMachineFactory
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|Component
argument_list|,
name|ComponentState
argument_list|,
name|ComponentEventType
argument_list|,
name|ComponentEvent
argument_list|>
argument_list|(
name|INIT
argument_list|)
comment|// INIT will only got to FLEXING
operator|.
name|addTransition
argument_list|(
name|INIT
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|STABLE
argument_list|,
name|FLEXING
argument_list|)
argument_list|,
name|FLEX
argument_list|,
operator|new
name|FlexComponentTransition
argument_list|()
argument_list|)
comment|// container recovered on AM restart
operator|.
name|addTransition
argument_list|(
name|INIT
argument_list|,
name|INIT
argument_list|,
name|CONTAINER_RECOVERED
argument_list|,
operator|new
name|ContainerRecoveredTransition
argument_list|()
argument_list|)
comment|// container allocated by RM
operator|.
name|addTransition
argument_list|(
name|FLEXING
argument_list|,
name|FLEXING
argument_list|,
name|CONTAINER_ALLOCATED
argument_list|,
operator|new
name|ContainerAllocatedTransition
argument_list|()
argument_list|)
comment|// container launched on NM
operator|.
name|addTransition
argument_list|(
name|FLEXING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|STABLE
argument_list|,
name|FLEXING
argument_list|)
argument_list|,
name|CONTAINER_STARTED
argument_list|,
operator|new
name|ContainerStartedTransition
argument_list|()
argument_list|)
comment|// container failed while flexing
operator|.
name|addTransition
argument_list|(
name|FLEXING
argument_list|,
name|FLEXING
argument_list|,
name|CONTAINER_COMPLETED
argument_list|,
operator|new
name|ContainerCompletedTransition
argument_list|()
argument_list|)
comment|// Flex while previous flex is still in progress
operator|.
name|addTransition
argument_list|(
name|FLEXING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|FLEXING
argument_list|)
argument_list|,
name|FLEX
argument_list|,
operator|new
name|FlexComponentTransition
argument_list|()
argument_list|)
comment|// container failed while stable
operator|.
name|addTransition
argument_list|(
name|STABLE
argument_list|,
name|FLEXING
argument_list|,
name|CONTAINER_COMPLETED
argument_list|,
operator|new
name|ContainerCompletedTransition
argument_list|()
argument_list|)
comment|// Ignore surplus container
operator|.
name|addTransition
argument_list|(
name|STABLE
argument_list|,
name|STABLE
argument_list|,
name|CONTAINER_ALLOCATED
argument_list|,
operator|new
name|ContainerAllocatedTransition
argument_list|()
argument_list|)
comment|// Flex by user
comment|// For flex up, go to FLEXING state
comment|// For flex down, go to STABLE state
operator|.
name|addTransition
argument_list|(
name|STABLE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|STABLE
argument_list|,
name|FLEXING
argument_list|)
argument_list|,
name|FLEX
argument_list|,
operator|new
name|FlexComponentTransition
argument_list|()
argument_list|)
operator|.
name|installTopology
argument_list|()
decl_stmt|;
DECL|method|Component ( org.apache.hadoop.yarn.service.api.records.Component component, long allocateId, ServiceContext context)
specifier|public
name|Component
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
name|component
parameter_list|,
name|long
name|allocateId
parameter_list|,
name|ServiceContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|allocateId
operator|=
name|allocateId
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|Priority
operator|.
name|newInstance
argument_list|(
operator|(
name|int
operator|)
name|allocateId
argument_list|)
expr_stmt|;
name|this
operator|.
name|componentSpec
operator|=
name|component
expr_stmt|;
name|componentMetrics
operator|=
name|ServiceMetrics
operator|.
name|register
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Metrics for component "
operator|+
name|component
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|componentMetrics
operator|.
name|tag
argument_list|(
literal|"type"
argument_list|,
literal|"Metrics type [component or service]"
argument_list|,
literal|"component"
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|context
operator|.
name|scheduler
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|amrmClient
operator|=
name|scheduler
operator|.
name|getAmRMClient
argument_list|()
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|stateMachine
operator|=
name|stateMachineFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|compInstanceDispatcher
operator|=
name|scheduler
operator|.
name|getCompInstanceDispatcher
argument_list|()
expr_stmt|;
name|failureTracker
operator|=
operator|new
name|ContainerFailureTracker
argument_list|(
name|context
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|probe
operator|=
name|MonitorUtils
operator|.
name|getProbe
argument_list|(
name|componentSpec
operator|.
name|getReadinessCheck
argument_list|()
argument_list|)
expr_stmt|;
name|maxContainerFailurePerComp
operator|=
name|componentSpec
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPropertyInt
argument_list|(
name|CONTAINER_FAILURE_THRESHOLD
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|createNumCompInstances
argument_list|(
name|component
operator|.
name|getNumberOfContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createNumCompInstances (long count)
specifier|private
name|void
name|createNumCompInstances
parameter_list|(
name|long
name|count
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|createOneCompInstance
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createOneCompInstance ()
specifier|private
name|void
name|createOneCompInstance
parameter_list|()
block|{
name|ComponentInstanceId
name|id
init|=
operator|new
name|ComponentInstanceId
argument_list|(
name|instanceIdCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|,
name|componentSpec
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|ComponentInstance
name|instance
init|=
operator|new
name|ComponentInstance
argument_list|(
name|this
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|compInstances
operator|.
name|put
argument_list|(
name|instance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|,
name|instance
argument_list|)
expr_stmt|;
name|pendingInstances
operator|.
name|add
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
DECL|class|FlexComponentTransition
specifier|private
specifier|static
class|class
name|FlexComponentTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|Component
argument_list|,
name|ComponentEvent
argument_list|,
name|ComponentState
argument_list|>
block|{
comment|// For flex up, go to FLEXING state
comment|// For flex down, go to STABLE state
annotation|@
name|Override
DECL|method|transition (Component component, ComponentEvent event)
specifier|public
name|ComponentState
name|transition
parameter_list|(
name|Component
name|component
parameter_list|,
name|ComponentEvent
name|event
parameter_list|)
block|{
name|component
operator|.
name|setDesiredContainers
argument_list|(
operator|(
name|int
operator|)
name|event
operator|.
name|getDesired
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|component
operator|.
name|areDependenciesReady
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[FLEX COMPONENT {}]: Flex deferred because dependencies not"
operator|+
literal|" satisfied."
argument_list|,
name|component
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|component
operator|.
name|getState
argument_list|()
return|;
block|}
if|if
condition|(
name|component
operator|.
name|getState
argument_list|()
operator|==
name|INIT
condition|)
block|{
comment|// This happens on init
name|LOG
operator|.
name|info
argument_list|(
literal|"[INIT COMPONENT "
operator|+
name|component
operator|.
name|getName
argument_list|()
operator|+
literal|"]: "
operator|+
name|event
operator|.
name|getDesired
argument_list|()
operator|+
literal|" instances."
argument_list|)
expr_stmt|;
name|component
operator|.
name|requestContainers
argument_list|(
name|component
operator|.
name|pendingInstances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|checkIfStable
argument_list|(
name|component
argument_list|)
return|;
block|}
name|long
name|before
init|=
name|component
operator|.
name|getComponentSpec
argument_list|()
operator|.
name|getNumberOfContainers
argument_list|()
decl_stmt|;
name|long
name|delta
init|=
name|event
operator|.
name|getDesired
argument_list|()
operator|-
name|before
decl_stmt|;
name|component
operator|.
name|getComponentSpec
argument_list|()
operator|.
name|setNumberOfContainers
argument_list|(
name|event
operator|.
name|getDesired
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|delta
operator|>
literal|0
condition|)
block|{
comment|// Scale up
name|LOG
operator|.
name|info
argument_list|(
literal|"[FLEX UP COMPONENT "
operator|+
name|component
operator|.
name|getName
argument_list|()
operator|+
literal|"]: scaling up from "
operator|+
name|before
operator|+
literal|" to "
operator|+
name|event
operator|.
name|getDesired
argument_list|()
argument_list|)
expr_stmt|;
name|component
operator|.
name|requestContainers
argument_list|(
name|delta
argument_list|)
expr_stmt|;
name|component
operator|.
name|createNumCompInstances
argument_list|(
name|delta
argument_list|)
expr_stmt|;
return|return
name|FLEXING
return|;
block|}
elseif|else
if|if
condition|(
name|delta
operator|<
literal|0
condition|)
block|{
name|delta
operator|=
literal|0
operator|-
name|delta
expr_stmt|;
comment|// scale down
name|LOG
operator|.
name|info
argument_list|(
literal|"[FLEX DOWN COMPONENT "
operator|+
name|component
operator|.
name|getName
argument_list|()
operator|+
literal|"]: scaling down from "
operator|+
name|before
operator|+
literal|" to "
operator|+
name|event
operator|.
name|getDesired
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ComponentInstance
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|component
operator|.
name|getAllComponentInstances
argument_list|()
argument_list|)
decl_stmt|;
comment|// sort in Most recent -> oldest order, destroy most recent ones.
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|delta
condition|;
name|i
operator|++
control|)
block|{
name|ComponentInstance
name|instance
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// remove the instance
name|component
operator|.
name|compInstances
operator|.
name|remove
argument_list|(
name|instance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|)
expr_stmt|;
name|component
operator|.
name|pendingInstances
operator|.
name|remove
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|component
operator|.
name|componentMetrics
operator|.
name|containersFailed
operator|.
name|incr
argument_list|()
expr_stmt|;
name|component
operator|.
name|componentMetrics
operator|.
name|containersRunning
operator|.
name|decr
argument_list|()
expr_stmt|;
comment|// decrement id counter
name|component
operator|.
name|instanceIdCounter
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|instance
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
return|return
name|STABLE
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[FLEX COMPONENT "
operator|+
name|component
operator|.
name|getName
argument_list|()
operator|+
literal|"]: already has "
operator|+
name|event
operator|.
name|getDesired
argument_list|()
operator|+
literal|" instances, ignoring"
argument_list|)
expr_stmt|;
return|return
name|STABLE
return|;
block|}
block|}
block|}
DECL|class|ContainerAllocatedTransition
specifier|private
specifier|static
class|class
name|ContainerAllocatedTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (Component component, ComponentEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|Component
name|component
parameter_list|,
name|ComponentEvent
name|event
parameter_list|)
block|{
name|component
operator|.
name|assignContainerToCompInstance
argument_list|(
name|event
operator|.
name|getContainer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ContainerRecoveredTransition
specifier|private
specifier|static
class|class
name|ContainerRecoveredTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (Component component, ComponentEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|Component
name|component
parameter_list|,
name|ComponentEvent
name|event
parameter_list|)
block|{
name|ComponentInstance
name|instance
init|=
name|event
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|event
operator|.
name|getContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[COMPONENT {}]: Trying to recover {} but event did not "
operator|+
literal|"specify component instance"
argument_list|,
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|component
operator|.
name|releaseContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|instance
operator|.
name|hasContainer
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[COMPONENT {}]: Instance {} already has container, release "
operator|+
literal|"surplus container {}"
argument_list|,
name|instance
operator|.
name|getCompName
argument_list|()
argument_list|,
name|instance
operator|.
name|getCompInstanceId
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|component
operator|.
name|releaseContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
return|return;
block|}
name|component
operator|.
name|pendingInstances
operator|.
name|remove
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"[COMPONENT {}]: Recovered {} for component instance {} on "
operator|+
literal|"host {}, num pending component instances reduced to {} "
argument_list|,
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|instance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|,
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|component
operator|.
name|pendingInstances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|ProviderUtils
operator|.
name|initCompInstanceDir
argument_list|(
name|component
operator|.
name|getContext
argument_list|()
operator|.
name|fs
argument_list|,
name|instance
argument_list|)
expr_stmt|;
name|component
operator|.
name|getScheduler
argument_list|()
operator|.
name|addLiveCompInstance
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|instance
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"[COMPONENT {}]: Marking {} as started for component "
operator|+
literal|"instance {}"
argument_list|,
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|instance
operator|.
name|getCompInstanceId
argument_list|()
argument_list|)
expr_stmt|;
name|component
operator|.
name|compInstanceDispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ComponentInstanceEvent
argument_list|(
name|instance
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|START
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|incRunningContainers
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ContainerStartedTransition
specifier|private
specifier|static
class|class
name|ContainerStartedTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|Component
argument_list|,
name|ComponentEvent
argument_list|,
name|ComponentState
argument_list|>
block|{
DECL|method|transition (Component component, ComponentEvent event)
annotation|@
name|Override
specifier|public
name|ComponentState
name|transition
parameter_list|(
name|Component
name|component
parameter_list|,
name|ComponentEvent
name|event
parameter_list|)
block|{
name|component
operator|.
name|compInstanceDispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ComponentInstanceEvent
argument_list|(
name|event
operator|.
name|getInstance
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|START
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|incRunningContainers
argument_list|()
expr_stmt|;
return|return
name|checkIfStable
argument_list|(
name|component
argument_list|)
return|;
block|}
block|}
DECL|method|checkIfStable (Component component)
specifier|private
specifier|static
name|ComponentState
name|checkIfStable
parameter_list|(
name|Component
name|component
parameter_list|)
block|{
comment|// if desired == running
if|if
condition|(
name|component
operator|.
name|componentMetrics
operator|.
name|containersRunning
operator|.
name|value
argument_list|()
operator|==
name|component
operator|.
name|getComponentSpec
argument_list|()
operator|.
name|getNumberOfContainers
argument_list|()
condition|)
block|{
return|return
name|STABLE
return|;
block|}
else|else
block|{
return|return
name|FLEXING
return|;
block|}
block|}
DECL|class|ContainerCompletedTransition
specifier|private
specifier|static
class|class
name|ContainerCompletedTransition
extends|extends
name|BaseTransition
block|{
annotation|@
name|Override
DECL|method|transition (Component component, ComponentEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|Component
name|component
parameter_list|,
name|ComponentEvent
name|event
parameter_list|)
block|{
name|component
operator|.
name|updateMetrics
argument_list|(
name|event
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// add back to pending list
name|component
operator|.
name|pendingInstances
operator|.
name|add
argument_list|(
name|event
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"[COMPONENT {}]: {} completed, num pending comp instances increased to {}."
argument_list|,
name|component
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getStatus
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|component
operator|.
name|pendingInstances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|component
operator|.
name|compInstanceDispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ComponentInstanceEvent
argument_list|(
name|event
operator|.
name|getStatus
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|STOP
argument_list|)
operator|.
name|setStatus
argument_list|(
name|event
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCompMetrics ()
specifier|public
name|ServiceMetrics
name|getCompMetrics
parameter_list|()
block|{
return|return
name|componentMetrics
return|;
block|}
DECL|method|releaseContainer (Container container)
specifier|private
name|void
name|releaseContainer
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|scheduler
operator|.
name|getAmRMClient
argument_list|()
operator|.
name|releaseAssignedContainer
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|componentMetrics
operator|.
name|surplusContainers
operator|.
name|incr
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getServiceMetrics
argument_list|()
operator|.
name|surplusContainers
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
DECL|method|assignContainerToCompInstance (Container container)
specifier|private
name|void
name|assignContainerToCompInstance
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
if|if
condition|(
name|pendingInstances
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[COMPONENT {}]: No pending component instance left, release surplus container {}"
argument_list|,
name|getName
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|releaseContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
return|return;
block|}
name|ComponentInstance
name|instance
init|=
name|pendingInstances
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"[COMPONENT {}]: {} allocated, num pending component instances reduced to {}"
argument_list|,
name|getName
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|pendingInstances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addLiveCompInstance
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|instance
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"[COMPONENT {}]: Assigned {} to component instance {} and launch on host {} "
argument_list|,
name|getName
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|instance
operator|.
name|getCompInstanceName
argument_list|()
argument_list|,
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getContainerLaunchService
argument_list|()
operator|.
name|launchCompInstance
argument_list|(
name|scheduler
operator|.
name|getApp
argument_list|()
argument_list|,
name|instance
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|requestContainers (long count)
specifier|public
name|void
name|requestContainers
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|componentSpec
operator|.
name|getResource
argument_list|()
operator|.
name|getMemoryMB
argument_list|()
argument_list|,
name|componentSpec
operator|.
name|getResource
argument_list|()
operator|.
name|getCpus
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
comment|//TODO Once YARN-5468 is done, use that for anti-affinity
name|ContainerRequest
name|request
init|=
name|ContainerRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|capability
argument_list|(
name|resource
argument_list|)
operator|.
name|priority
argument_list|(
name|priority
argument_list|)
operator|.
name|allocationRequestId
argument_list|(
name|allocateId
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|amrmClient
operator|.
name|addContainerRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setDesiredContainers (int n)
specifier|private
name|void
name|setDesiredContainers
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|int
name|delta
init|=
name|n
operator|-
name|scheduler
operator|.
name|getServiceMetrics
argument_list|()
operator|.
name|containersDesired
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|delta
operator|>
literal|0
condition|)
block|{
name|scheduler
operator|.
name|getServiceMetrics
argument_list|()
operator|.
name|containersDesired
operator|.
name|incr
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scheduler
operator|.
name|getServiceMetrics
argument_list|()
operator|.
name|containersDesired
operator|.
name|decr
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
name|componentMetrics
operator|.
name|containersDesired
operator|.
name|set
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
DECL|method|updateMetrics (ContainerStatus status)
specifier|private
name|void
name|updateMetrics
parameter_list|(
name|ContainerStatus
name|status
parameter_list|)
block|{
switch|switch
condition|(
name|status
operator|.
name|getExitStatus
argument_list|()
condition|)
block|{
case|case
name|SUCCESS
case|:
name|componentMetrics
operator|.
name|containersSucceeded
operator|.
name|incr
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getServiceMetrics
argument_list|()
operator|.
name|containersSucceeded
operator|.
name|incr
argument_list|()
expr_stmt|;
return|return;
case|case
name|PREEMPTED
case|:
name|componentMetrics
operator|.
name|containersPreempted
operator|.
name|incr
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getServiceMetrics
argument_list|()
operator|.
name|containersPreempted
operator|.
name|incr
argument_list|()
expr_stmt|;
break|break;
case|case
name|DISKS_FAILED
case|:
name|componentMetrics
operator|.
name|containersDiskFailure
operator|.
name|incr
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getServiceMetrics
argument_list|()
operator|.
name|containersDiskFailure
operator|.
name|incr
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
comment|// containersFailed include preempted, disks_failed etc.
name|componentMetrics
operator|.
name|containersFailed
operator|.
name|incr
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getServiceMetrics
argument_list|()
operator|.
name|containersFailed
operator|.
name|incr
argument_list|()
expr_stmt|;
comment|// dec running container
name|decRunningContainers
argument_list|()
expr_stmt|;
if|if
condition|(
name|Apps
operator|.
name|shouldCountTowardsNodeBlacklisting
argument_list|(
name|status
operator|.
name|getExitStatus
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|host
init|=
name|scheduler
operator|.
name|getLiveInstances
argument_list|()
operator|.
name|get
argument_list|(
name|status
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|failureTracker
operator|.
name|incNodeFailure
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|currentContainerFailure
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|areDependenciesReady ()
specifier|public
name|boolean
name|areDependenciesReady
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dependencies
init|=
name|componentSpec
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isEmpty
argument_list|(
name|dependencies
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|String
name|dependency
range|:
name|dependencies
control|)
block|{
name|Component
name|dependentComponent
init|=
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|get
argument_list|(
name|dependency
argument_list|)
decl_stmt|;
if|if
condition|(
name|dependentComponent
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't find dependency {} for {} (should never happen)"
argument_list|,
name|dependency
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|dependentComponent
operator|.
name|getNumReadyInstances
argument_list|()
operator|<
name|dependentComponent
operator|.
name|getNumDesiredInstances
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[COMPONENT {}]: Dependency {} not satisfied, only {} of {}"
operator|+
literal|" instances are ready."
argument_list|,
name|getName
argument_list|()
argument_list|,
name|dependency
argument_list|,
name|dependentComponent
operator|.
name|getNumReadyInstances
argument_list|()
argument_list|,
name|dependentComponent
operator|.
name|getNumDesiredInstances
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|getDependencyHostIpTokens ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getDependencyHostIpTokens
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokens
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dependencies
init|=
name|componentSpec
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isEmpty
argument_list|(
name|dependencies
argument_list|)
condition|)
block|{
return|return
name|tokens
return|;
block|}
for|for
control|(
name|String
name|dependency
range|:
name|dependencies
control|)
block|{
name|Collection
argument_list|<
name|ComponentInstance
argument_list|>
name|instances
init|=
name|scheduler
operator|.
name|getAllComponents
argument_list|()
operator|.
name|get
argument_list|(
name|dependency
argument_list|)
operator|.
name|getAllComponentInstances
argument_list|()
decl_stmt|;
for|for
control|(
name|ComponentInstance
name|instance
range|:
name|instances
control|)
block|{
if|if
condition|(
name|instance
operator|.
name|getContainerStatus
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|SliderUtils
operator|.
name|isEmpty
argument_list|(
name|instance
operator|.
name|getContainerStatus
argument_list|()
operator|.
name|getIPs
argument_list|()
argument_list|)
operator|||
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|instance
operator|.
name|getContainerStatus
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|ip
init|=
name|instance
operator|.
name|getContainerStatus
argument_list|()
operator|.
name|getIPs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|instance
operator|.
name|getContainerStatus
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|tokens
operator|.
name|put
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|COMPONENT_IP
argument_list|,
name|instance
operator|.
name|getCompInstanceName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|,
name|ip
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|COMPONENT_HOST
argument_list|,
name|instance
operator|.
name|getCompInstanceName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tokens
return|;
block|}
DECL|method|incRunningContainers ()
specifier|private
name|void
name|incRunningContainers
parameter_list|()
block|{
name|componentMetrics
operator|.
name|containersRunning
operator|.
name|incr
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getServiceMetrics
argument_list|()
operator|.
name|containersRunning
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
DECL|method|incContainersReady ()
specifier|public
name|void
name|incContainersReady
parameter_list|()
block|{
name|componentMetrics
operator|.
name|containersReady
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
DECL|method|decContainersReady ()
specifier|public
name|void
name|decContainersReady
parameter_list|()
block|{
name|componentMetrics
operator|.
name|containersReady
operator|.
name|decr
argument_list|()
expr_stmt|;
block|}
DECL|method|decRunningContainers ()
specifier|private
name|void
name|decRunningContainers
parameter_list|()
block|{
name|componentMetrics
operator|.
name|containersRunning
operator|.
name|decr
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getServiceMetrics
argument_list|()
operator|.
name|containersRunning
operator|.
name|decr
argument_list|()
expr_stmt|;
block|}
DECL|method|getNumReadyInstances ()
specifier|public
name|int
name|getNumReadyInstances
parameter_list|()
block|{
return|return
name|componentMetrics
operator|.
name|containersReady
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getNumRunningInstances ()
specifier|public
name|int
name|getNumRunningInstances
parameter_list|()
block|{
return|return
name|componentMetrics
operator|.
name|containersRunning
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getNumDesiredInstances ()
specifier|public
name|int
name|getNumDesiredInstances
parameter_list|()
block|{
return|return
name|componentMetrics
operator|.
name|containersDesired
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getComponentInstance (String componentInstanceName)
specifier|public
name|ComponentInstance
name|getComponentInstance
parameter_list|(
name|String
name|componentInstanceName
parameter_list|)
block|{
return|return
name|compInstances
operator|.
name|get
argument_list|(
name|componentInstanceName
argument_list|)
return|;
block|}
DECL|method|getAllComponentInstances ()
specifier|public
name|Collection
argument_list|<
name|ComponentInstance
argument_list|>
name|getAllComponentInstances
parameter_list|()
block|{
return|return
name|compInstances
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|getComponentSpec ()
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
name|getComponentSpec
parameter_list|()
block|{
return|return
name|this
operator|.
name|componentSpec
return|;
block|}
DECL|method|resetCompFailureCount ()
specifier|public
name|void
name|resetCompFailureCount
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[COMPONENT {}]: Reset container failure count from {} to 0."
argument_list|,
name|getName
argument_list|()
argument_list|,
name|currentContainerFailure
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|currentContainerFailure
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|failureTracker
operator|.
name|resetContainerFailures
argument_list|()
expr_stmt|;
block|}
DECL|method|getProbe ()
specifier|public
name|Probe
name|getProbe
parameter_list|()
block|{
return|return
name|probe
return|;
block|}
DECL|method|getPriority ()
specifier|public
name|Priority
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
DECL|method|getAllocateId ()
specifier|public
name|long
name|getAllocateId
parameter_list|()
block|{
return|return
name|allocateId
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|componentSpec
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|getState ()
specifier|public
name|ComponentState
name|getState
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getScheduler ()
specifier|public
name|ServiceScheduler
name|getScheduler
parameter_list|()
block|{
return|return
name|scheduler
return|;
block|}
annotation|@
name|Override
DECL|method|handle (ComponentEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ComponentEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ComponentState
name|oldState
init|=
name|getState
argument_list|()
decl_stmt|;
try|try
block|{
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"[COMPONENT {0}]: Invalid event {1} at {2}"
argument_list|,
name|componentSpec
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|oldState
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldState
operator|!=
name|getState
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[COMPONENT {}] Transitioned from {} to {} on {} event."
argument_list|,
name|componentSpec
operator|.
name|getName
argument_list|()
argument_list|,
name|oldState
argument_list|,
name|getState
argument_list|()
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|BaseTransition
specifier|private
specifier|static
class|class
name|BaseTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|Component
argument_list|,
name|ComponentEvent
argument_list|>
block|{
DECL|method|transition (Component component, ComponentEvent event)
annotation|@
name|Override
specifier|public
name|void
name|transition
parameter_list|(
name|Component
name|component
parameter_list|,
name|ComponentEvent
name|event
parameter_list|)
block|{     }
block|}
DECL|method|getContext ()
specifier|public
name|ServiceContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
block|}
end_class

end_unit

