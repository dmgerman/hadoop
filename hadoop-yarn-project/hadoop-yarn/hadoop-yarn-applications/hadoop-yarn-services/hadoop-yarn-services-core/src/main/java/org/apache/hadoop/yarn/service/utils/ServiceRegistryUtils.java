begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NameNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|DirContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|InitialDirContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_class
DECL|class|ServiceRegistryUtils
specifier|public
class|class
name|ServiceRegistryUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ServiceRegistryUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SVC_USERS
specifier|public
specifier|static
specifier|final
name|String
name|SVC_USERS
init|=
literal|"/services/yarn/users"
decl_stmt|;
comment|/**    * Get the registry path for an instance under the user's home node    * @param instanceName application instance    * @return a path to the registry location for this application instance.    */
DECL|method|registryPathForInstance (String instanceName)
specifier|public
specifier|static
name|String
name|registryPathForInstance
parameter_list|(
name|String
name|instanceName
parameter_list|)
block|{
return|return
name|RegistryUtils
operator|.
name|servicePath
argument_list|(
name|RegistryUtils
operator|.
name|currentUser
argument_list|()
argument_list|,
name|YarnServiceConstants
operator|.
name|APP_TYPE
argument_list|,
name|instanceName
argument_list|)
return|;
block|}
comment|/**  * Build the path to a service folder  * @param username user name  * @param serviceName service name  * @return the home path to the service  */
DECL|method|mkServiceHomePath (String username, String serviceName)
specifier|public
specifier|static
name|String
name|mkServiceHomePath
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|serviceName
parameter_list|)
block|{
return|return
name|mkUserHomePath
argument_list|(
name|username
argument_list|)
operator|+
literal|"/"
operator|+
name|serviceName
return|;
block|}
comment|/**    * Build the path to a user home folder;    */
DECL|method|mkUserHomePath (String username)
specifier|public
specifier|static
name|String
name|mkUserHomePath
parameter_list|(
name|String
name|username
parameter_list|)
block|{
return|return
name|SVC_USERS
operator|+
literal|"/"
operator|+
name|username
return|;
block|}
comment|/**    * Determine whether a DNS lookup exists for a given name. If a DNS server    * address is provided, the lookup will be performed against this DNS    * server. This option is provided because it may be desirable to perform    * the lookup against Registry DNS directly to avoid caching of negative    * responses that may be performed by other DNS servers, thereby allowing the    * lookup to succeed sooner.    *    * @param addr host:port dns address, or null    * @param name name to look up    * @return true if a lookup succeeds for the specified name    */
DECL|method|registryDNSLookupExists (String addr, String name)
specifier|public
specifier|static
name|boolean
name|registryDNSLookupExists
parameter_list|(
name|String
name|addr
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|addr
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|InetAddress
operator|.
name|getByName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|String
name|dnsURI
init|=
name|String
operator|.
name|format
argument_list|(
literal|"dns://%s"
argument_list|,
name|addr
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|env
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|,
literal|"com.sun.jndi.dns.DnsContextFactory"
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|,
name|dnsURI
argument_list|)
expr_stmt|;
try|try
block|{
name|DirContext
name|ictx
init|=
operator|new
name|InitialDirContext
argument_list|(
name|env
argument_list|)
decl_stmt|;
name|Attributes
name|attrs
init|=
name|ictx
operator|.
name|getAttributes
argument_list|(
name|name
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"A"
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|attrs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NameNotFoundException
name|e
parameter_list|)
block|{
comment|// this doesn't need to be logged
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception when performing DNS lookup"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

