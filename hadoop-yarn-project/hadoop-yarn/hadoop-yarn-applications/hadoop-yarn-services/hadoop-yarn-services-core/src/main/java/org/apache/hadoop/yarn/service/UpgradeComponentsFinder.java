begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Finds all the the target component specs.  */
end_comment

begin_interface
DECL|interface|UpgradeComponentsFinder
specifier|public
interface|interface
name|UpgradeComponentsFinder
block|{
DECL|method|findTargetComponentSpecs (Service currentDef, Service targetDef)
name|List
argument_list|<
name|Component
argument_list|>
name|findTargetComponentSpecs
parameter_list|(
name|Service
name|currentDef
parameter_list|,
name|Service
name|targetDef
parameter_list|)
function_decl|;
comment|/**    * Default implementation of {@link UpgradeComponentsFinder} that finds all    * the target component specs.    */
DECL|class|DefaultUpgradeComponentsFinder
class|class
name|DefaultUpgradeComponentsFinder
implements|implements
name|UpgradeComponentsFinder
block|{
annotation|@
name|Override
DECL|method|findTargetComponentSpecs (Service currentDef, Service targetDef)
specifier|public
name|List
argument_list|<
name|Component
argument_list|>
name|findTargetComponentSpecs
parameter_list|(
name|Service
name|currentDef
parameter_list|,
name|Service
name|targetDef
parameter_list|)
block|{
if|if
condition|(
name|currentDef
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|targetDef
operator|.
name|getComponents
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"addition/deletion of components not supported by upgrade"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|currentDef
operator|.
name|getKerberosPrincipal
argument_list|()
operator|.
name|equals
argument_list|(
name|targetDef
operator|.
name|getKerberosPrincipal
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"changes to kerberos "
operator|+
literal|"principal not supported by upgrade"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentDef
operator|.
name|getQueue
argument_list|()
argument_list|,
name|targetDef
operator|.
name|getQueue
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"changes to queue "
operator|+
literal|"not supported by upgrade"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentDef
operator|.
name|getPlacementPolicy
argument_list|()
argument_list|,
name|targetDef
operator|.
name|getPlacementPolicy
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"changes to placement policy "
operator|+
literal|"not supported by upgrade"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentDef
operator|.
name|getResource
argument_list|()
argument_list|,
name|targetDef
operator|.
name|getResource
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"changes to resource "
operator|+
literal|"not supported by upgrade"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentDef
operator|.
name|getDescription
argument_list|()
argument_list|,
name|targetDef
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"changes to description "
operator|+
literal|"not supported by upgrade"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentDef
operator|.
name|getQuicklinks
argument_list|()
argument_list|,
name|targetDef
operator|.
name|getQuicklinks
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"changes to quick links "
operator|+
literal|"not supported by upgrade"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentDef
operator|.
name|getLaunchTime
argument_list|()
argument_list|,
name|targetDef
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"changes to launch time "
operator|+
literal|"not supported by upgrade"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentDef
operator|.
name|getLifetime
argument_list|()
argument_list|,
name|targetDef
operator|.
name|getLifetime
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"changes to lifetime "
operator|+
literal|"not supported by upgrade"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentDef
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|currentDef
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|targetDef
operator|.
name|getComponents
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentDef
operator|.
name|getArtifact
argument_list|()
argument_list|,
name|targetDef
operator|.
name|getArtifact
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|targetDef
operator|.
name|getComponents
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Component
argument_list|>
name|targetComps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|targetDef
operator|.
name|getComponents
argument_list|()
operator|.
name|forEach
argument_list|(
name|component
lambda|->
block|{
name|Component
name|currentComp
init|=
name|currentDef
operator|.
name|getComponent
argument_list|(
name|component
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentComp
operator|.
name|getName
argument_list|()
argument_list|,
name|component
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"changes to component name not supported by upgrade"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentComp
operator|.
name|getDependencies
argument_list|()
argument_list|,
name|component
operator|.
name|getDependencies
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"changes to component dependencies not supported by upgrade"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentComp
operator|.
name|getReadinessCheck
argument_list|()
argument_list|,
name|component
operator|.
name|getReadinessCheck
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"changes to component readiness check not supported by upgrade"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentComp
operator|.
name|getResource
argument_list|()
argument_list|,
name|component
operator|.
name|getResource
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"changes to component resource not supported by upgrade"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentComp
operator|.
name|getRunPrivilegedContainer
argument_list|()
argument_list|,
name|component
operator|.
name|getRunPrivilegedContainer
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"changes to run privileged container not supported by upgrade"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentComp
operator|.
name|getPlacementPolicy
argument_list|()
argument_list|,
name|component
operator|.
name|getPlacementPolicy
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"changes to component placement policy not supported by upgrade"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentComp
operator|.
name|getQuicklinks
argument_list|()
argument_list|,
name|component
operator|.
name|getQuicklinks
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"changes to component quick links not supported by upgrade"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentComp
operator|.
name|getArtifact
argument_list|()
argument_list|,
name|component
operator|.
name|getArtifact
argument_list|()
argument_list|)
operator|||
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentComp
operator|.
name|getLaunchCommand
argument_list|()
argument_list|,
name|component
operator|.
name|getLaunchCommand
argument_list|()
argument_list|)
operator|||
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|currentComp
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|component
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|targetComps
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|targetComps
return|;
block|}
block|}
block|}
end_interface

end_unit

