begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|SliderExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * a scanner which can take an input string for a range or scan the lot.  */
end_comment

begin_class
DECL|class|PortScanner
specifier|public
class|class
name|PortScanner
block|{
DECL|field|NUMBER_RANGE
specifier|private
specifier|static
name|Pattern
name|NUMBER_RANGE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(\\d+)\\s*-\\s*(\\d+)$"
argument_list|)
decl_stmt|;
DECL|field|SINGLE_NUMBER
specifier|private
specifier|static
name|Pattern
name|SINGLE_NUMBER
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\d+$"
argument_list|)
decl_stmt|;
DECL|field|remainingPortsToCheck
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|remainingPortsToCheck
decl_stmt|;
DECL|method|PortScanner ()
specifier|public
name|PortScanner
parameter_list|()
block|{   }
DECL|method|setPortRange (String input)
specifier|public
name|void
name|setPortRange
parameter_list|(
name|String
name|input
parameter_list|)
throws|throws
name|BadConfigException
block|{
comment|// first split based on commas
name|Set
argument_list|<
name|Integer
argument_list|>
name|inputPorts
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|ranges
init|=
name|input
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|range
range|:
name|ranges
control|)
block|{
if|if
condition|(
name|range
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Matcher
name|m
init|=
name|SINGLE_NUMBER
operator|.
name|matcher
argument_list|(
name|range
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|inputPorts
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|m
operator|=
name|NUMBER_RANGE
operator|.
name|matcher
argument_list|(
name|range
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
index|[]
name|boundaryValues
init|=
name|m
operator|.
name|group
argument_list|(
literal|0
argument_list|)
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|boundaryValues
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|boundaryValues
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|<
name|start
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"End of port range is before start: "
operator|+
name|range
operator|+
literal|" in input: "
operator|+
name|input
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|inputPorts
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Bad port range: "
operator|+
name|range
operator|+
literal|" in input: "
operator|+
name|input
argument_list|)
throw|;
block|}
if|if
condition|(
name|inputPorts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"No ports found in range: "
operator|+
name|input
argument_list|)
throw|;
block|}
name|this
operator|.
name|remainingPortsToCheck
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|inputPorts
argument_list|)
expr_stmt|;
block|}
DECL|method|getRemainingPortsToCheck ()
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getRemainingPortsToCheck
parameter_list|()
block|{
return|return
name|remainingPortsToCheck
return|;
block|}
DECL|method|getAvailablePort ()
specifier|public
name|int
name|getAvailablePort
parameter_list|()
throws|throws
name|SliderException
throws|,
name|IOException
block|{
if|if
condition|(
name|remainingPortsToCheck
operator|!=
literal|null
condition|)
block|{
return|return
name|getAvailablePortViaPortArray
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|ServiceUtils
operator|.
name|getOpenPort
argument_list|()
return|;
block|}
block|}
DECL|method|getAvailablePortViaPortArray ()
specifier|private
name|int
name|getAvailablePortViaPortArray
parameter_list|()
throws|throws
name|SliderException
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|int
name|availablePort
init|=
operator|-
literal|1
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|portsToCheck
init|=
name|this
operator|.
name|remainingPortsToCheck
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|portsToCheck
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|found
condition|)
block|{
name|int
name|portToCheck
init|=
name|portsToCheck
operator|.
name|next
argument_list|()
decl_stmt|;
name|found
operator|=
name|ServiceUtils
operator|.
name|isPortAvailable
argument_list|(
name|portToCheck
argument_list|)
expr_stmt|;
if|if
condition|(
name|found
condition|)
block|{
name|availablePort
operator|=
name|portToCheck
expr_stmt|;
name|portsToCheck
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|availablePort
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
name|SliderExitCodes
operator|.
name|EXIT_BAD_CONFIGURATION
argument_list|,
literal|"No available ports found in configured range {}"
argument_list|,
name|remainingPortsToCheck
argument_list|)
throw|;
block|}
return|return
name|availablePort
return|;
block|}
block|}
end_class

end_unit

