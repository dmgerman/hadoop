begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ClientAMProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ComponentContainers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstance
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|FilterUtils
specifier|public
class|class
name|FilterUtils
block|{
comment|/**    * Returns containers filtered by requested fields.    *    * @param context   service context    * @param filterReq filter request    */
DECL|method|filterInstances ( ServiceContext context, ClientAMProtocol.GetCompInstancesRequestProto filterReq)
specifier|public
specifier|static
name|List
argument_list|<
name|ComponentContainers
argument_list|>
name|filterInstances
parameter_list|(
name|ServiceContext
name|context
parameter_list|,
name|ClientAMProtocol
operator|.
name|GetCompInstancesRequestProto
name|filterReq
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentContainers
argument_list|>
name|containersByComp
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|ComponentInstance
argument_list|>
name|instances
init|=
name|context
operator|.
name|scheduler
operator|.
name|getLiveInstances
argument_list|()
decl_stmt|;
name|instances
operator|.
name|forEach
argument_list|(
operator|(
parameter_list|(
name|containerId
parameter_list|,
name|instance
parameter_list|)
lambda|->
block|{
name|boolean
name|include
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|filterReq
operator|.
name|getComponentNamesList
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|filterReq
operator|.
name|getComponentNamesList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// filter by component name
if|if
condition|(
operator|!
name|filterReq
operator|.
name|getComponentNamesList
argument_list|()
operator|.
name|contains
argument_list|(
name|instance
operator|.
name|getComponent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|include
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|filterReq
operator|.
name|getVersion
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|filterReq
operator|.
name|getVersion
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// filter by version
name|String
name|instanceServiceVersion
init|=
name|instance
operator|.
name|getServiceVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|instanceServiceVersion
operator|==
literal|null
operator|||
operator|!
name|instanceServiceVersion
operator|.
name|equals
argument_list|(
name|filterReq
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|include
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|filterReq
operator|.
name|getContainerStatesList
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|filterReq
operator|.
name|getContainerStatesList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// filter by state
if|if
condition|(
operator|!
name|filterReq
operator|.
name|getContainerStatesList
argument_list|()
operator|.
name|contains
argument_list|(
name|instance
operator|.
name|getContainerState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|include
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|include
condition|)
block|{
name|ComponentContainers
name|compContainers
init|=
name|containersByComp
operator|.
name|computeIfAbsent
argument_list|(
name|instance
operator|.
name|getCompName
argument_list|()
argument_list|,
name|k
lambda|->
block|{
name|ComponentContainers
name|result
init|=
operator|new
name|ComponentContainers
argument_list|()
decl_stmt|;
name|result
operator|.
name|setContainers
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setComponentName
argument_list|(
name|instance
operator|.
name|getCompName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
argument_list|)
decl_stmt|;
name|compContainers
operator|.
name|addContainer
argument_list|(
name|instance
operator|.
name|getContainerSpec
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
operator|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ComponentContainers
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|containersByComp
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

