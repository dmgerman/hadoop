begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HostAndPort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|ZookeeperUtils
specifier|public
class|class
name|ZookeeperUtils
block|{
DECL|field|DEFAULT_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_PORT
init|=
literal|2181
decl_stmt|;
DECL|method|buildConnectionString (String zkHosts, int port)
specifier|public
specifier|static
name|String
name|buildConnectionString
parameter_list|(
name|String
name|zkHosts
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|String
name|zkPort
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
decl_stmt|;
comment|//parse the hosts
name|String
index|[]
name|hostlist
init|=
name|zkHosts
operator|.
name|split
argument_list|(
literal|","
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|quorum
init|=
name|ServiceUtils
operator|.
name|join
argument_list|(
name|hostlist
argument_list|,
literal|":"
operator|+
name|zkPort
operator|+
literal|","
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|quorum
return|;
block|}
comment|/**    * Take a quorum list and split it to (trimmed) pairs    * @param hostPortQuorumList list of form h1:port, h2:port2,...    * @return a possibly empty list of values between commas. They may not be    * valid hostname:port pairs    */
DECL|method|splitToPairs (String hostPortQuorumList)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|splitToPairs
parameter_list|(
name|String
name|hostPortQuorumList
parameter_list|)
block|{
comment|// split an address hot
name|String
index|[]
name|strings
init|=
name|StringUtils
operator|.
name|getStrings
argument_list|(
name|hostPortQuorumList
argument_list|)
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|strings
operator|!=
literal|null
condition|)
block|{
name|len
operator|=
name|strings
operator|.
name|length
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|tuples
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|strings
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|strings
control|)
block|{
name|tuples
operator|.
name|add
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tuples
return|;
block|}
comment|/**    * Split a quorum list into a list of hostnames and ports    * @param hostPortQuorumList split to a list of hosts and ports    * @return a list of values    */
DECL|method|splitToHostsAndPorts (String hostPortQuorumList)
specifier|public
specifier|static
name|List
argument_list|<
name|HostAndPort
argument_list|>
name|splitToHostsAndPorts
parameter_list|(
name|String
name|hostPortQuorumList
parameter_list|)
block|{
comment|// split an address hot
name|String
index|[]
name|strings
init|=
name|StringUtils
operator|.
name|getStrings
argument_list|(
name|hostPortQuorumList
argument_list|)
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|strings
operator|!=
literal|null
condition|)
block|{
name|len
operator|=
name|strings
operator|.
name|length
expr_stmt|;
block|}
name|List
argument_list|<
name|HostAndPort
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|HostAndPort
argument_list|>
argument_list|(
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|strings
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|strings
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|HostAndPort
operator|.
name|fromString
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|withDefaultPort
argument_list|(
name|DEFAULT_PORT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
comment|/**    * Build up to a hosts only list    * @param hostAndPorts    * @return a list of the hosts only    */
DECL|method|buildHostsOnlyList (List<HostAndPort> hostAndPorts)
specifier|public
specifier|static
name|String
name|buildHostsOnlyList
parameter_list|(
name|List
argument_list|<
name|HostAndPort
argument_list|>
name|hostAndPorts
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|HostAndPort
name|hostAndPort
range|:
name|hostAndPorts
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|hostAndPort
operator|.
name|getHostText
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|delete
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
name|sb
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|buildQuorumEntry (HostAndPort hostAndPort, int defaultPort)
specifier|public
specifier|static
name|String
name|buildQuorumEntry
parameter_list|(
name|HostAndPort
name|hostAndPort
parameter_list|,
name|int
name|defaultPort
parameter_list|)
block|{
name|String
name|s
init|=
name|hostAndPort
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|hostAndPort
operator|.
name|hasPort
argument_list|()
condition|)
block|{
return|return
name|s
return|;
block|}
else|else
block|{
return|return
name|s
operator|+
literal|":"
operator|+
name|defaultPort
return|;
block|}
block|}
comment|/**    * Build a quorum list, injecting a ":defaultPort" ref if needed on    * any entry without one    * @param hostAndPorts    * @param defaultPort    * @return    */
DECL|method|buildQuorum (List<HostAndPort> hostAndPorts, int defaultPort)
specifier|public
specifier|static
name|String
name|buildQuorum
parameter_list|(
name|List
argument_list|<
name|HostAndPort
argument_list|>
name|hostAndPorts
parameter_list|,
name|int
name|defaultPort
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|hostAndPorts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HostAndPort
name|hostAndPort
range|:
name|hostAndPorts
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|buildQuorumEntry
argument_list|(
name|hostAndPort
argument_list|,
name|defaultPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ServiceUtils
operator|.
name|join
argument_list|(
name|entries
argument_list|,
literal|","
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|convertToHostsOnlyList (String quorum)
specifier|public
specifier|static
name|String
name|convertToHostsOnlyList
parameter_list|(
name|String
name|quorum
parameter_list|)
throws|throws
name|BadConfigException
block|{
name|List
argument_list|<
name|HostAndPort
argument_list|>
name|hostAndPorts
init|=
name|splitToHostsAndPortsStrictly
argument_list|(
name|quorum
argument_list|)
decl_stmt|;
return|return
name|ZookeeperUtils
operator|.
name|buildHostsOnlyList
argument_list|(
name|hostAndPorts
argument_list|)
return|;
block|}
DECL|method|splitToHostsAndPortsStrictly (String quorum)
specifier|public
specifier|static
name|List
argument_list|<
name|HostAndPort
argument_list|>
name|splitToHostsAndPortsStrictly
parameter_list|(
name|String
name|quorum
parameter_list|)
throws|throws
name|BadConfigException
block|{
name|List
argument_list|<
name|HostAndPort
argument_list|>
name|hostAndPorts
init|=
name|ZookeeperUtils
operator|.
name|splitToHostsAndPorts
argument_list|(
name|quorum
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostAndPorts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"empty zookeeper quorum"
argument_list|)
throw|;
block|}
return|return
name|hostAndPorts
return|;
block|}
DECL|method|getFirstPort (String quorum, int defVal)
specifier|public
specifier|static
name|int
name|getFirstPort
parameter_list|(
name|String
name|quorum
parameter_list|,
name|int
name|defVal
parameter_list|)
throws|throws
name|BadConfigException
block|{
name|List
argument_list|<
name|HostAndPort
argument_list|>
name|hostAndPorts
init|=
name|splitToHostsAndPortsStrictly
argument_list|(
name|quorum
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|hostAndPorts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPortOrDefault
argument_list|(
name|defVal
argument_list|)
decl_stmt|;
return|return
name|port
return|;
block|}
block|}
end_class

end_unit

