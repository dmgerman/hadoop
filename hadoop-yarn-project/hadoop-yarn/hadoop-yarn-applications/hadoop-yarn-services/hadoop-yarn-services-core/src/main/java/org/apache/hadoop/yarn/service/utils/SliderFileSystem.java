begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Extends Core Filesystem with operations to manipulate ClusterDescription  * persistent state  */
end_comment

begin_class
DECL|class|SliderFileSystem
specifier|public
class|class
name|SliderFileSystem
extends|extends
name|CoreFileSystem
block|{
DECL|field|appDir
name|Path
name|appDir
init|=
literal|null
decl_stmt|;
DECL|method|SliderFileSystem (FileSystem fileSystem, Configuration configuration)
specifier|public
name|SliderFileSystem
parameter_list|(
name|FileSystem
name|fileSystem
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|fileSystem
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
DECL|method|SliderFileSystem (Configuration configuration)
specifier|public
name|SliderFileSystem
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
DECL|method|setAppDir (Path appDir)
specifier|public
name|void
name|setAppDir
parameter_list|(
name|Path
name|appDir
parameter_list|)
block|{
name|this
operator|.
name|appDir
operator|=
name|appDir
expr_stmt|;
block|}
DECL|method|getAppDir ()
specifier|public
name|Path
name|getAppDir
parameter_list|()
block|{
return|return
name|this
operator|.
name|appDir
return|;
block|}
comment|/**    * Returns the component directory path.    *    * @param serviceVersion service version    * @param compName       component name    * @return component directory    */
DECL|method|getComponentDir (String serviceVersion, String compName)
specifier|public
name|Path
name|getComponentDir
parameter_list|(
name|String
name|serviceVersion
parameter_list|,
name|String
name|compName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|getAppDir
argument_list|()
argument_list|,
literal|"components"
argument_list|)
argument_list|,
name|serviceVersion
operator|+
literal|"/"
operator|+
name|compName
argument_list|)
return|;
block|}
comment|/**    * Deletes the component directory.    *    * @param serviceVersion    * @param compName    * @throws IOException    */
DECL|method|deleteComponentDir (String serviceVersion, String compName)
specifier|public
name|void
name|deleteComponentDir
parameter_list|(
name|String
name|serviceVersion
parameter_list|,
name|String
name|compName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getComponentDir
argument_list|(
name|serviceVersion
argument_list|,
name|compName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileSystem
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fileSystem
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleted dir {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Deletes the components version directory.    *    * @param serviceVersion    * @throws IOException    */
DECL|method|deleteComponentsVersionDirIfEmpty (String serviceVersion)
specifier|public
name|void
name|deleteComponentsVersionDirIfEmpty
parameter_list|(
name|String
name|serviceVersion
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|getAppDir
argument_list|()
argument_list|,
literal|"components"
argument_list|)
argument_list|,
name|serviceVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileSystem
operator|.
name|exists
argument_list|(
name|path
argument_list|)
operator|&&
name|fileSystem
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|fileSystem
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"deleted dir {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SliderFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

