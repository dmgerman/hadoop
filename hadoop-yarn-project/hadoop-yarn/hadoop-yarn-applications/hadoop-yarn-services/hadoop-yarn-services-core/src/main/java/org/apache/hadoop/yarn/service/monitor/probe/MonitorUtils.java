begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.monitor.probe
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|monitor
operator|.
name|probe
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ReadinessCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Various utils to work with the monitor  */
end_comment

begin_class
DECL|class|MonitorUtils
specifier|public
specifier|final
class|class
name|MonitorUtils
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MonitorUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|MonitorUtils ()
specifier|private
name|MonitorUtils
parameter_list|()
block|{   }
DECL|method|toPlural (int val)
specifier|public
specifier|static
name|String
name|toPlural
parameter_list|(
name|int
name|val
parameter_list|)
block|{
return|return
name|val
operator|!=
literal|1
condition|?
literal|"s"
else|:
literal|""
return|;
block|}
comment|/**    * Convert milliseconds to human time -the exact format is unspecified    * @param milliseconds a time in milliseconds    * @return a time that is converted to human intervals    */
DECL|method|millisToHumanTime (long milliseconds)
specifier|public
specifier|static
name|String
name|millisToHumanTime
parameter_list|(
name|long
name|milliseconds
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Send all output to the Appendable object sb
name|Formatter
name|formatter
init|=
operator|new
name|Formatter
argument_list|(
name|sb
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|long
name|s
init|=
name|Math
operator|.
name|abs
argument_list|(
name|milliseconds
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|long
name|m
init|=
name|Math
operator|.
name|abs
argument_list|(
name|milliseconds
operator|%
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|milliseconds
operator|>
literal|0
condition|)
block|{
name|formatter
operator|.
name|format
argument_list|(
literal|"%d.%03ds"
argument_list|,
name|s
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|milliseconds
operator|==
literal|0
condition|)
block|{
name|formatter
operator|.
name|format
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|formatter
operator|.
name|format
argument_list|(
literal|"-%d.%03ds"
argument_list|,
name|s
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getProbe (ReadinessCheck readinessCheck)
specifier|public
specifier|static
name|Probe
name|getProbe
parameter_list|(
name|ReadinessCheck
name|readinessCheck
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|readinessCheck
operator|==
literal|null
condition|)
block|{
return|return
name|DefaultProbe
operator|.
name|create
argument_list|()
return|;
block|}
if|if
condition|(
name|readinessCheck
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|DefaultProbe
operator|.
name|create
argument_list|(
name|readinessCheck
operator|.
name|getProperties
argument_list|()
argument_list|)
return|;
block|}
switch|switch
condition|(
name|readinessCheck
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HTTP
case|:
return|return
name|HttpProbe
operator|.
name|create
argument_list|(
name|readinessCheck
operator|.
name|getProperties
argument_list|()
argument_list|)
return|;
case|case
name|PORT
case|:
return|return
name|PortProbe
operator|.
name|create
argument_list|(
name|readinessCheck
operator|.
name|getProperties
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|DefaultProbe
operator|.
name|create
argument_list|(
name|readinessCheck
operator|.
name|getProperties
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error creating readiness check "
operator|+
name|t
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

