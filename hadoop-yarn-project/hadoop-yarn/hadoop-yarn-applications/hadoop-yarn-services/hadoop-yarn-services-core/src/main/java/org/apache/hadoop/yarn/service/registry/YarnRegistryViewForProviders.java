begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.registry
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|registry
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|BindFlags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|component
operator|.
name|instance
operator|.
name|ComponentInstanceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryPathUtils
operator|.
name|join
import|;
end_import

begin_comment
comment|/**  * Registry view for providers. This tracks where the service  * is registered, offers access to the record and other things.  */
end_comment

begin_class
DECL|class|YarnRegistryViewForProviders
specifier|public
class|class
name|YarnRegistryViewForProviders
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|YarnRegistryViewForProviders
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|registryOperations
specifier|private
specifier|final
name|RegistryOperations
name|registryOperations
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|serviceClass
specifier|private
specifier|final
name|String
name|serviceClass
decl_stmt|;
DECL|field|instanceName
specifier|private
specifier|final
name|String
name|instanceName
decl_stmt|;
comment|/**    * Record used where the service registered itself.    * Null until the service is registered    */
DECL|field|selfRegistration
specifier|private
name|ServiceRecord
name|selfRegistration
decl_stmt|;
comment|/**    * Path where record was registered.    * Null until the service is registered    */
DECL|field|selfRegistrationPath
specifier|private
name|String
name|selfRegistrationPath
decl_stmt|;
DECL|method|YarnRegistryViewForProviders (RegistryOperations registryOperations, String user, String serviceClass, String instanceName, ApplicationAttemptId applicationAttemptId)
specifier|public
name|YarnRegistryViewForProviders
parameter_list|(
name|RegistryOperations
name|registryOperations
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|serviceClass
parameter_list|,
name|String
name|instanceName
parameter_list|,
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|registryOperations
operator|!=
literal|null
argument_list|,
literal|"null registry operations"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|user
operator|!=
literal|null
argument_list|,
literal|"null user"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|serviceClass
argument_list|)
argument_list|,
literal|"unset service class"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|instanceName
argument_list|)
argument_list|,
literal|"instanceName"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|applicationAttemptId
operator|!=
literal|null
argument_list|,
literal|"null applicationAttemptId"
argument_list|)
expr_stmt|;
name|this
operator|.
name|registryOperations
operator|=
name|registryOperations
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|serviceClass
operator|=
name|serviceClass
expr_stmt|;
name|this
operator|.
name|instanceName
operator|=
name|instanceName
expr_stmt|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
DECL|method|setSelfRegistration (ServiceRecord selfRegistration)
specifier|private
name|void
name|setSelfRegistration
parameter_list|(
name|ServiceRecord
name|selfRegistration
parameter_list|)
block|{
name|this
operator|.
name|selfRegistration
operator|=
name|selfRegistration
expr_stmt|;
block|}
comment|/**    * Get the path to where the service has registered itself.    * Null until the service is registered    * @return the service registration path.    */
DECL|method|getSelfRegistrationPath ()
specifier|public
name|String
name|getSelfRegistrationPath
parameter_list|()
block|{
return|return
name|selfRegistrationPath
return|;
block|}
comment|/**    * Get the absolute path to where the service has registered itself.    * This includes the base registry path    * Null until the service is registered    * @return the service registration path.    */
DECL|method|getAbsoluteSelfRegistrationPath ()
specifier|public
name|String
name|getAbsoluteSelfRegistrationPath
parameter_list|()
block|{
if|if
condition|(
name|selfRegistrationPath
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|root
init|=
name|registryOperations
operator|.
name|getConfig
argument_list|()
operator|.
name|getTrimmed
argument_list|(
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_ROOT
argument_list|,
name|RegistryConstants
operator|.
name|DEFAULT_ZK_REGISTRY_ROOT
argument_list|)
decl_stmt|;
return|return
name|RegistryPathUtils
operator|.
name|join
argument_list|(
name|root
argument_list|,
name|selfRegistrationPath
argument_list|)
return|;
block|}
comment|/**    * Add a component under the slider name/entry.    * @param componentName component name    * @param record record to put    * @throws IOException    */
DECL|method|putComponent (String componentName, ServiceRecord record)
specifier|public
name|void
name|putComponent
parameter_list|(
name|String
name|componentName
parameter_list|,
name|ServiceRecord
name|record
parameter_list|)
throws|throws
name|IOException
block|{
name|putComponent
argument_list|(
name|serviceClass
argument_list|,
name|instanceName
argument_list|,
name|componentName
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a component.    * @param serviceClass service class to use under ~user    * @param componentName component name    * @param record record to put    * @throws IOException    */
DECL|method|putComponent (String serviceClass, String serviceName, String componentName, ServiceRecord record)
specifier|public
name|void
name|putComponent
parameter_list|(
name|String
name|serviceClass
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|String
name|componentName
parameter_list|,
name|ServiceRecord
name|record
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|RegistryUtils
operator|.
name|componentPath
argument_list|(
name|user
argument_list|,
name|serviceClass
argument_list|,
name|serviceName
argument_list|,
name|componentName
argument_list|)
decl_stmt|;
name|registryOperations
operator|.
name|mknode
argument_list|(
name|RegistryPathUtils
operator|.
name|parentOf
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registryOperations
operator|.
name|bind
argument_list|(
name|path
argument_list|,
name|record
argument_list|,
name|BindFlags
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a component.    * @param componentName component name    * @return the service record    * @throws IOException    */
DECL|method|getComponent (String componentName)
specifier|public
name|ServiceRecord
name|getComponent
parameter_list|(
name|String
name|componentName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|RegistryUtils
operator|.
name|componentPath
argument_list|(
name|user
argument_list|,
name|serviceClass
argument_list|,
name|instanceName
argument_list|,
name|componentName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Resolving path {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|registryOperations
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|/**    * List components.    * @return a list of components    * @throws IOException    */
DECL|method|listComponents ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listComponents
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|RegistryUtils
operator|.
name|componentListPath
argument_list|(
name|user
argument_list|,
name|serviceClass
argument_list|,
name|instanceName
argument_list|)
decl_stmt|;
return|return
name|registryOperations
operator|.
name|list
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|/**    * Add a service under a path, optionally purging any history.    * @param username user    * @param serviceClass service class to use under ~user    * @param serviceName name of the service    * @param record service record    * @param deleteTreeFirst perform recursive delete of the path first.    * @return the path the service was created at    * @throws IOException    */
DECL|method|putService (String username, String serviceClass, String serviceName, ServiceRecord record, boolean deleteTreeFirst)
specifier|public
name|String
name|putService
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|serviceClass
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|ServiceRecord
name|record
parameter_list|,
name|boolean
name|deleteTreeFirst
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|RegistryUtils
operator|.
name|servicePath
argument_list|(
name|username
argument_list|,
name|serviceClass
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteTreeFirst
condition|)
block|{
name|registryOperations
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|registryOperations
operator|.
name|mknode
argument_list|(
name|RegistryPathUtils
operator|.
name|parentOf
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registryOperations
operator|.
name|bind
argument_list|(
name|path
argument_list|,
name|record
argument_list|,
name|BindFlags
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
comment|/**    * Add a service under a path for the current user.    * @param record service record    * @param deleteTreeFirst perform recursive delete of the path first    * @return the path the service was created at    * @throws IOException    */
DECL|method|registerSelf ( ServiceRecord record, boolean deleteTreeFirst)
specifier|public
name|String
name|registerSelf
parameter_list|(
name|ServiceRecord
name|record
parameter_list|,
name|boolean
name|deleteTreeFirst
parameter_list|)
throws|throws
name|IOException
block|{
name|selfRegistrationPath
operator|=
name|putService
argument_list|(
name|user
argument_list|,
name|serviceClass
argument_list|,
name|instanceName
argument_list|,
name|record
argument_list|,
name|deleteTreeFirst
argument_list|)
expr_stmt|;
name|setSelfRegistration
argument_list|(
name|record
argument_list|)
expr_stmt|;
return|return
name|selfRegistrationPath
return|;
block|}
comment|/**    * Delete a component.    * @param containerId component name    * @throws IOException    */
DECL|method|deleteComponent (ComponentInstanceId instanceId, String containerId)
specifier|public
name|void
name|deleteComponent
parameter_list|(
name|ComponentInstanceId
name|instanceId
parameter_list|,
name|String
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|RegistryUtils
operator|.
name|componentPath
argument_list|(
name|user
argument_list|,
name|serviceClass
argument_list|,
name|instanceName
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|instanceId
operator|+
literal|": Deleting registry path "
operator|+
name|path
argument_list|)
expr_stmt|;
name|registryOperations
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete the children of a path -but not the path itself.    * It is not an error if the path does not exist    * @param path path to delete    * @param recursive flag to request recursive deletes    * @throws IOException IO problems    */
DECL|method|deleteChildren (String path, boolean recursive)
specifier|public
name|void
name|deleteChildren
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|childNames
init|=
literal|null
decl_stmt|;
try|try
block|{
name|childNames
operator|=
name|registryOperations
operator|.
name|list
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|childName
range|:
name|childNames
control|)
block|{
name|String
name|child
init|=
name|join
argument_list|(
name|path
argument_list|,
name|childName
argument_list|)
decl_stmt|;
name|registryOperations
operator|.
name|delete
argument_list|(
name|child
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

