begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ConfigFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|DumperOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|DumperOptions
operator|.
name|FlowStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|Yaml
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Output a published configuration  */
end_comment

begin_class
DECL|class|PublishedConfigurationOutputter
specifier|public
specifier|abstract
class|class
name|PublishedConfigurationOutputter
block|{
DECL|field|COMMENTS
specifier|private
specifier|static
specifier|final
name|String
name|COMMENTS
init|=
literal|"Generated by Apache Slider"
decl_stmt|;
DECL|field|owner
specifier|protected
specifier|final
name|PublishedConfiguration
name|owner
decl_stmt|;
DECL|method|PublishedConfigurationOutputter (PublishedConfiguration owner)
specifier|protected
name|PublishedConfigurationOutputter
parameter_list|(
name|PublishedConfiguration
name|owner
parameter_list|)
block|{
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
block|}
comment|/**    * Save the config to a destination file, in the format of this outputter    * @param dest destination file    * @throws IOException    */
comment|/* JDK7   public void save(File dest) throws IOException {     try(FileOutputStream out = new FileOutputStream(dest)) {       save(out);       out.close();     }   } */
DECL|method|save (File dest)
specifier|public
name|void
name|save
parameter_list|(
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|dest
argument_list|,
name|asString
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
comment|/**    * Save the content. The default saves the asString() value    * to the output stream    * @param out output stream    * @throws IOException    */
DECL|method|save (OutputStream out)
specifier|public
name|void
name|save
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|write
argument_list|(
name|asString
argument_list|()
argument_list|,
name|out
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
comment|/**    * Convert to a string    * @return the string form    * @throws IOException    */
DECL|method|asString ()
specifier|public
specifier|abstract
name|String
name|asString
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Create an outputter for the chosen format    * @param format format enumeration    * @param owner owning config    * @return the outputter    */
DECL|method|createOutputter (ConfigFormat format, PublishedConfiguration owner)
specifier|public
specifier|static
name|PublishedConfigurationOutputter
name|createOutputter
parameter_list|(
name|ConfigFormat
name|format
parameter_list|,
name|PublishedConfiguration
name|owner
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|owner
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|XML
case|:
case|case
name|HADOOP_XML
case|:
return|return
operator|new
name|XmlOutputter
argument_list|(
name|owner
argument_list|)
return|;
case|case
name|PROPERTIES
case|:
return|return
operator|new
name|PropertiesOutputter
argument_list|(
name|owner
argument_list|)
return|;
case|case
name|JSON
case|:
return|return
operator|new
name|JsonOutputter
argument_list|(
name|owner
argument_list|)
return|;
case|case
name|ENV
case|:
return|return
operator|new
name|EnvOutputter
argument_list|(
name|owner
argument_list|)
return|;
case|case
name|TEMPLATE
case|:
return|return
operator|new
name|TemplateOutputter
argument_list|(
name|owner
argument_list|)
return|;
case|case
name|YAML
case|:
return|return
operator|new
name|YamlOutputter
argument_list|(
name|owner
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported format :"
operator|+
name|format
argument_list|)
throw|;
block|}
block|}
DECL|class|XmlOutputter
specifier|public
specifier|static
class|class
name|XmlOutputter
extends|extends
name|PublishedConfigurationOutputter
block|{
DECL|field|configuration
specifier|private
specifier|final
name|Configuration
name|configuration
decl_stmt|;
DECL|method|XmlOutputter (PublishedConfiguration owner)
specifier|public
name|XmlOutputter
parameter_list|(
name|PublishedConfiguration
name|owner
parameter_list|)
block|{
name|super
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|configuration
operator|=
name|owner
operator|.
name|asConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|save (OutputStream out)
specifier|public
name|void
name|save
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|configuration
operator|.
name|writeXml
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|asString ()
specifier|public
name|String
name|asString
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|ConfigHelper
operator|.
name|toXml
argument_list|(
name|configuration
argument_list|)
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
block|}
DECL|class|PropertiesOutputter
specifier|public
specifier|static
class|class
name|PropertiesOutputter
extends|extends
name|PublishedConfigurationOutputter
block|{
DECL|field|properties
specifier|private
specifier|final
name|Properties
name|properties
decl_stmt|;
DECL|method|PropertiesOutputter (PublishedConfiguration owner)
specifier|public
name|PropertiesOutputter
parameter_list|(
name|PublishedConfiguration
name|owner
parameter_list|)
block|{
name|super
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|properties
operator|=
name|owner
operator|.
name|asProperties
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|save (OutputStream out)
specifier|public
name|void
name|save
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|properties
operator|.
name|store
argument_list|(
name|out
argument_list|,
name|COMMENTS
argument_list|)
expr_stmt|;
block|}
DECL|method|asString ()
specifier|public
name|String
name|asString
parameter_list|()
throws|throws
name|IOException
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|properties
operator|.
name|store
argument_list|(
name|sw
argument_list|,
name|COMMENTS
argument_list|)
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|JsonOutputter
specifier|public
specifier|static
class|class
name|JsonOutputter
extends|extends
name|PublishedConfigurationOutputter
block|{
DECL|method|JsonOutputter (PublishedConfiguration owner)
specifier|public
name|JsonOutputter
parameter_list|(
name|PublishedConfiguration
name|owner
parameter_list|)
block|{
name|super
argument_list|(
name|owner
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|asString ()
specifier|public
name|String
name|asString
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|owner
operator|.
name|asJson
argument_list|()
return|;
block|}
block|}
DECL|class|EnvOutputter
specifier|public
specifier|static
class|class
name|EnvOutputter
extends|extends
name|PublishedConfigurationOutputter
block|{
DECL|method|EnvOutputter (PublishedConfiguration owner)
specifier|public
name|EnvOutputter
parameter_list|(
name|PublishedConfiguration
name|owner
parameter_list|)
block|{
name|super
argument_list|(
name|owner
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|asString ()
specifier|public
name|String
name|asString
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|owner
operator|.
name|entries
operator|.
name|containsKey
argument_list|(
literal|"content"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Configuration has no content field and cannot "
operator|+
literal|"be retrieved as type 'env'"
argument_list|)
throw|;
block|}
name|String
name|content
init|=
name|owner
operator|.
name|entries
operator|.
name|get
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
return|return
name|ConfigUtils
operator|.
name|replaceProps
argument_list|(
name|owner
operator|.
name|entries
argument_list|,
name|content
argument_list|)
return|;
block|}
block|}
DECL|class|TemplateOutputter
specifier|public
specifier|static
class|class
name|TemplateOutputter
extends|extends
name|EnvOutputter
block|{
DECL|method|TemplateOutputter (PublishedConfiguration owner)
specifier|public
name|TemplateOutputter
parameter_list|(
name|PublishedConfiguration
name|owner
parameter_list|)
block|{
name|super
argument_list|(
name|owner
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|YamlOutputter
specifier|public
specifier|static
class|class
name|YamlOutputter
extends|extends
name|PublishedConfigurationOutputter
block|{
DECL|field|yaml
specifier|private
specifier|final
name|Yaml
name|yaml
decl_stmt|;
DECL|method|YamlOutputter (PublishedConfiguration owner)
specifier|public
name|YamlOutputter
parameter_list|(
name|PublishedConfiguration
name|owner
parameter_list|)
block|{
name|super
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|DumperOptions
name|options
init|=
operator|new
name|DumperOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setDefaultFlowStyle
argument_list|(
name|FlowStyle
operator|.
name|BLOCK
argument_list|)
expr_stmt|;
name|yaml
operator|=
operator|new
name|Yaml
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
DECL|method|asString ()
specifier|public
name|String
name|asString
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|yaml
operator|.
name|dump
argument_list|(
name|owner
operator|.
name|entries
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

