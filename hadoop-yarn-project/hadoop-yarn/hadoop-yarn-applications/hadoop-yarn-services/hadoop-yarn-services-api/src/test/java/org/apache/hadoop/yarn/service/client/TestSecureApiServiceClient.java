begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|KerberosSecurityTestcase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|QualityOfProtection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|util
operator|.
name|YarnClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ServerConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test Spnego Client Login.  */
end_comment

begin_class
DECL|class|TestSecureApiServiceClient
specifier|public
class|class
name|TestSecureApiServiceClient
extends|extends
name|KerberosSecurityTestcase
block|{
DECL|field|clientPrincipal
specifier|private
name|String
name|clientPrincipal
init|=
literal|"client"
decl_stmt|;
DECL|field|server1Protocol
specifier|private
name|String
name|server1Protocol
init|=
literal|"HTTP"
decl_stmt|;
DECL|field|server2Protocol
specifier|private
name|String
name|server2Protocol
init|=
literal|"server2"
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
init|=
literal|"localhost"
decl_stmt|;
DECL|field|server1Principal
specifier|private
name|String
name|server1Principal
init|=
name|server1Protocol
operator|+
literal|"/"
operator|+
name|host
decl_stmt|;
DECL|field|server2Principal
specifier|private
name|String
name|server2Principal
init|=
name|server2Protocol
operator|+
literal|"/"
operator|+
name|host
decl_stmt|;
DECL|field|keytabFile
specifier|private
name|File
name|keytabFile
decl_stmt|;
DECL|field|testConf
specifier|private
name|Configuration
name|testConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|props
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
decl_stmt|;
DECL|field|server
specifier|private
specifier|static
name|Server
name|server
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|TestSecureApiServiceClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|asc
specifier|private
name|ApiServiceClient
name|asc
decl_stmt|;
comment|/**    * A mocked version of API Service for testing purpose.    *    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|TestServlet
specifier|public
specifier|static
class|class
name|TestServlet
extends|extends
name|HttpServlet
block|{
DECL|field|headerFound
specifier|private
specifier|static
name|boolean
name|headerFound
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|doGet (HttpServletRequest req, HttpServletResponse resp)
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|Enumeration
argument_list|<
name|String
argument_list|>
name|headers
init|=
name|req
operator|.
name|getHeaderNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|headers
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|header
init|=
name|headers
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|req
operator|.
name|getHeader
argument_list|(
literal|"Authorization"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|headerFound
operator|=
literal|true
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|headerFound
operator|=
literal|false
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doPost (HttpServletRequest req, HttpServletResponse resp)
specifier|protected
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doPut (HttpServletRequest req, HttpServletResponse resp)
specifier|protected
name|void
name|doPut
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doDelete (HttpServletRequest req, HttpServletResponse resp)
specifier|protected
name|void
name|doDelete
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
block|}
DECL|method|isHeaderExist ()
specifier|public
specifier|static
name|boolean
name|isHeaderExist
parameter_list|()
block|{
return|return
name|headerFound
return|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|keytabFile
operator|=
operator|new
name|File
argument_list|(
name|getWorkDir
argument_list|()
argument_list|,
literal|"keytab"
argument_list|)
expr_stmt|;
name|getKdc
argument_list|()
operator|.
name|createPrincipal
argument_list|(
name|keytabFile
argument_list|,
name|clientPrincipal
argument_list|,
name|server1Principal
argument_list|,
name|server2Principal
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|testConf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|testConf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setShouldRenewImmediatelyForTests
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|props
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|,
name|QualityOfProtection
operator|.
name|AUTHENTICATION
operator|.
name|saslQop
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
literal|8088
argument_list|)
expr_stmt|;
operator|(
operator|(
name|QueuedThreadPool
operator|)
name|server
operator|.
name|getThreadPool
argument_list|()
operator|)
operator|.
name|setMaxThreads
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|()
decl_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/app"
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
name|TestServlet
operator|.
name|class
argument_list|)
argument_list|,
literal|"/*"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ServerConnector
operator|)
name|server
operator|.
name|getConnectors
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|setHost
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rmServers
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|rmServers
operator|.
name|add
argument_list|(
literal|"localhost:8088"
argument_list|)
expr_stmt|;
name|testConf
operator|.
name|set
argument_list|(
literal|"yarn.resourcemanager.webapp.address"
argument_list|,
literal|"localhost:8088"
argument_list|)
expr_stmt|;
name|asc
operator|=
operator|new
name|ApiServiceClient
argument_list|()
block|{
annotation|@
name|Override
name|List
argument_list|<
name|String
argument_list|>
name|getRMHAWebAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|rmServers
return|;
block|}
block|}
expr_stmt|;
name|asc
operator|.
name|serviceInit
argument_list|(
name|testConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHttpSpnegoChallenge ()
specifier|public
name|void
name|testHttpSpnegoChallenge
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|loginUserFromKeytab
argument_list|(
name|clientPrincipal
argument_list|,
name|keytabFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|challenge
init|=
name|YarnClientUtils
operator|.
name|generateToken
argument_list|(
literal|"localhost"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|challenge
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAuthorizationHeader ()
specifier|public
name|void
name|testAuthorizationHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|loginUserFromKeytab
argument_list|(
name|clientPrincipal
argument_list|,
name|keytabFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|rmAddress
init|=
name|asc
operator|.
name|getRMWebAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|TestServlet
operator|.
name|isHeaderExist
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|rmAddress
argument_list|,
literal|"http://localhost:8088"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Did not see Authorization header."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

