begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
operator|.
name|ServiceClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|YarnServiceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Minicluster test that verifies registry cleanup when app lifetime is  * exceeded.  */
end_comment

begin_class
DECL|class|TestCleanupAfterKill
specifier|public
class|class
name|TestCleanupAfterKill
extends|extends
name|ServiceTestUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCleanupAfterKill
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|tmpFolder
specifier|public
name|TemporaryFolder
name|tmpFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|tmpYarnDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
literal|"tmp"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|tmpYarnDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|200000
argument_list|)
DECL|method|testRegistryCleanedOnLifetimeExceeded ()
specifier|public
name|void
name|testRegistryCleanedOnLifetimeExceeded
parameter_list|()
throws|throws
name|Exception
block|{
name|setupInternal
argument_list|(
name|NUM_NMS
argument_list|)
expr_stmt|;
name|ServiceClient
name|client
init|=
name|createClient
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Service
name|exampleApp
init|=
name|createExampleApplication
argument_list|()
decl_stmt|;
name|exampleApp
operator|.
name|setLifetime
argument_list|(
literal|30L
argument_list|)
expr_stmt|;
name|client
operator|.
name|actionCreate
argument_list|(
name|exampleApp
argument_list|)
expr_stmt|;
name|waitForServiceToBeStable
argument_list|(
name|client
argument_list|,
name|exampleApp
argument_list|)
expr_stmt|;
name|String
name|serviceZKPath
init|=
name|RegistryUtils
operator|.
name|servicePath
argument_list|(
name|RegistryUtils
operator|.
name|currentUser
argument_list|()
argument_list|,
name|YarnServiceConstants
operator|.
name|APP_TYPE
argument_list|,
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Registry ZK service path doesn't exist"
argument_list|,
name|getCuratorService
argument_list|()
operator|.
name|zkPathExists
argument_list|(
name|serviceZKPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for app to be killed by RM
name|ApplicationId
name|exampleAppId
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|exampleApp
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|ApplicationReport
name|ar
init|=
name|client
operator|.
name|getYarnClient
argument_list|()
operator|.
name|getApplicationReport
argument_list|(
name|exampleAppId
argument_list|)
decl_stmt|;
return|return
name|ar
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|KILLED
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"while waiting"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|,
literal|2000
argument_list|,
literal|200000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Registry ZK service path still exists after killed"
argument_list|,
name|getCuratorService
argument_list|()
operator|.
name|zkPathExists
argument_list|(
name|serviceZKPath
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Destroy the service"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|actionDestroy
argument_list|(
name|exampleApp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

