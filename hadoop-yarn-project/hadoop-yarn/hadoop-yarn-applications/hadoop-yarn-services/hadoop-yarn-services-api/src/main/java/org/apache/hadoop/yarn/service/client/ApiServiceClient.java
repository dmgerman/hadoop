begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
operator|.
name|jsonSerDeser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AppAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|util
operator|.
name|YarnClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ComponentState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|conf
operator|.
name|RestApiConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|utils
operator|.
name|ServiceApiUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|RMHAUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|UrlEncoded
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|config
operator|.
name|ClientConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|config
operator|.
name|DefaultClientConfig
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|exceptions
operator|.
name|LauncherExitCodes
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * The rest API client for users to manage services on YARN.  */
end_comment

begin_class
DECL|class|ApiServiceClient
specifier|public
class|class
name|ApiServiceClient
extends|extends
name|AppAdminClient
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ApiServiceClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BASE_64_CODEC
specifier|private
specifier|static
specifier|final
name|Base64
name|BASE_64_CODEC
init|=
operator|new
name|Base64
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|yarnClient
specifier|protected
name|YarnClient
name|yarnClient
decl_stmt|;
DECL|method|serviceInit (Configuration configuration)
annotation|@
name|Override
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|yarnClient
operator|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
expr_stmt|;
name|addService
argument_list|(
name|yarnClient
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
comment|/**    * Calculate Resource Manager address base on working REST API.    */
DECL|method|getRMWebAddress ()
name|String
name|getRMWebAddress
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|String
name|scheme
init|=
literal|"http://"
decl_stmt|;
name|String
name|path
init|=
literal|"/app/v1/services/version"
decl_stmt|;
name|String
name|rmAddress
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"yarn.resourcemanager.webapp.address"
argument_list|)
decl_stmt|;
if|if
condition|(
name|YarnConfiguration
operator|.
name|useHttps
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|scheme
operator|=
literal|"https://"
expr_stmt|;
name|rmAddress
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"yarn.resourcemanager.webapp.https.address"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|useKerberos
init|=
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rmServers
init|=
name|getRMHAWebAddresses
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|host
range|:
name|rmServers
control|)
block|{
try|try
block|{
name|Client
name|client
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
name|client
operator|.
name|setFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|scheme
argument_list|)
operator|.
name|append
argument_list|(
name|host
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useKerberos
condition|)
block|{
try|try
block|{
name|String
name|username
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"?user.name="
argument_list|)
operator|.
name|append
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Fail to resolve username: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|Builder
name|builder
init|=
name|client
operator|.
name|resource
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
decl_stmt|;
if|if
condition|(
name|useKerberos
condition|)
block|{
name|String
index|[]
name|server
init|=
name|host
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|challenge
init|=
name|YarnClientUtils
operator|.
name|generateToken
argument_list|(
name|server
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|builder
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|AUTHORIZATION
argument_list|,
literal|"Negotiate "
operator|+
name|challenge
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Authorization: Negotiate {}"
argument_list|,
name|challenge
argument_list|)
expr_stmt|;
block|}
name|ClientResponse
name|test
init|=
name|builder
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|getStatus
argument_list|()
operator|==
literal|200
condition|)
block|{
name|rmAddress
operator|=
name|host
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Fail to connect to: "
operator|+
name|host
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Root cause: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|scheme
operator|+
name|rmAddress
return|;
block|}
DECL|method|getRMHAWebAddresses (Configuration conf)
name|List
argument_list|<
name|String
argument_list|>
name|getRMHAWebAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|RMHAUtils
operator|.
name|getRMHAWebappAddresses
argument_list|(
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Compute active resource manager API service location.    *    * @param appName - YARN service name    * @return URI to API Service    * @throws IOException    */
DECL|method|getServicePath (String appName)
specifier|private
name|String
name|getServicePath
parameter_list|(
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|url
init|=
name|getRMWebAddress
argument_list|()
decl_stmt|;
name|StringBuilder
name|api
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|api
operator|.
name|append
argument_list|(
name|url
argument_list|)
operator|.
name|append
argument_list|(
literal|"/app/v1/services"
argument_list|)
expr_stmt|;
if|if
condition|(
name|appName
operator|!=
literal|null
condition|)
block|{
name|api
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|appName
argument_list|)
expr_stmt|;
block|}
name|appendUserNameIfRequired
argument_list|(
name|api
argument_list|)
expr_stmt|;
return|return
name|api
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getInstancesPath (String appName)
specifier|private
name|String
name|getInstancesPath
parameter_list|(
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|getRMWebAddress
argument_list|()
decl_stmt|;
name|StringBuilder
name|api
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|api
operator|.
name|append
argument_list|(
name|url
argument_list|)
operator|.
name|append
argument_list|(
literal|"/app/v1/services/"
argument_list|)
operator|.
name|append
argument_list|(
name|appName
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|RestApiConstants
operator|.
name|COMP_INSTANCES
argument_list|)
expr_stmt|;
name|appendUserNameIfRequired
argument_list|(
name|api
argument_list|)
expr_stmt|;
return|return
name|api
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getInstancePath (String appName, List<String> components, String version, List<String> containerStates)
specifier|private
name|String
name|getInstancePath
parameter_list|(
name|String
name|appName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|components
parameter_list|,
name|String
name|version
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|containerStates
parameter_list|)
throws|throws
name|IOException
block|{
name|UriBuilder
name|builder
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
name|getInstancesPath
argument_list|(
name|appName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|components
operator|!=
literal|null
operator|&&
operator|!
name|components
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|components
operator|.
name|forEach
argument_list|(
name|compName
lambda|->
name|builder
operator|.
name|queryParam
argument_list|(
name|RestApiConstants
operator|.
name|PARAM_COMP_NAME
argument_list|,
name|compName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|builder
operator|.
name|queryParam
argument_list|(
name|RestApiConstants
operator|.
name|PARAM_VERSION
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containerStates
operator|!=
literal|null
operator|&&
operator|!
name|containerStates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|containerStates
operator|.
name|forEach
argument_list|(
name|state
lambda|->
name|builder
operator|.
name|queryParam
argument_list|(
name|RestApiConstants
operator|.
name|PARAM_CONTAINER_STATE
argument_list|,
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getComponentsPath (String appName)
specifier|private
name|String
name|getComponentsPath
parameter_list|(
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|getRMWebAddress
argument_list|()
decl_stmt|;
name|StringBuilder
name|api
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|api
operator|.
name|append
argument_list|(
name|url
argument_list|)
operator|.
name|append
argument_list|(
literal|"/app/v1/services/"
argument_list|)
operator|.
name|append
argument_list|(
name|appName
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|RestApiConstants
operator|.
name|COMPONENTS
argument_list|)
expr_stmt|;
name|appendUserNameIfRequired
argument_list|(
name|api
argument_list|)
expr_stmt|;
return|return
name|api
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|appendUserNameIfRequired (StringBuilder builder)
specifier|private
name|void
name|appendUserNameIfRequired
parameter_list|(
name|StringBuilder
name|builder
parameter_list|)
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
literal|"hadoop.http.authentication.type"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"simple"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"?user.name="
argument_list|)
operator|.
name|append
argument_list|(
name|UrlEncoded
operator|.
name|encodeString
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getApiClient ()
specifier|private
name|Builder
name|getApiClient
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getApiClient
argument_list|(
name|getServicePath
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Setup API service web request.    *    * @param requestPath    * @return    * @throws IOException    */
DECL|method|getApiClient (String requestPath)
specifier|private
name|Builder
name|getApiClient
parameter_list|(
name|String
name|requestPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Client
name|client
init|=
name|Client
operator|.
name|create
argument_list|(
name|getClientConfig
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|setChunkedEncodingSize
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Builder
name|builder
init|=
name|client
operator|.
name|resource
argument_list|(
name|requestPath
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|URI
name|url
init|=
operator|new
name|URI
argument_list|(
name|requestPath
argument_list|)
decl_stmt|;
name|String
name|challenge
init|=
name|YarnClientUtils
operator|.
name|generateToken
argument_list|(
name|url
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|AUTHORIZATION
argument_list|,
literal|"Negotiate "
operator|+
name|challenge
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|builder
operator|.
name|accept
argument_list|(
literal|"application/json;charset=utf-8"
argument_list|)
return|;
block|}
DECL|method|getClientConfig ()
specifier|private
name|ClientConfig
name|getClientConfig
parameter_list|()
block|{
name|ClientConfig
name|config
init|=
operator|new
name|DefaultClientConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|ClientConfig
operator|.
name|PROPERTY_CHUNKED_ENCODING_SIZE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|ClientConfig
operator|.
name|PROPERTY_BUFFER_RESPONSE_ENTITY_ON_EXCEPTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
DECL|method|processResponse (ClientResponse response)
specifier|private
name|int
name|processResponse
parameter_list|(
name|ClientResponse
name|response
parameter_list|)
block|{
name|response
operator|.
name|bufferEntity
argument_list|()
expr_stmt|;
name|String
name|output
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
literal|401
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Authentication required"
argument_list|)
expr_stmt|;
return|return
name|EXIT_EXCEPTION_THROWN
return|;
block|}
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
literal|503
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"YARN Service is unavailable or disabled."
argument_list|)
expr_stmt|;
return|return
name|EXIT_EXCEPTION_THROWN
return|;
block|}
try|try
block|{
name|ServiceStatus
name|ss
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|ServiceStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|output
operator|=
name|ss
operator|.
name|getDiagnostics
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|output
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|output
operator|==
literal|null
condition|)
block|{
name|output
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|<=
literal|299
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|output
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|output
argument_list|)
expr_stmt|;
return|return
name|EXIT_EXCEPTION_THROWN
return|;
block|}
block|}
comment|/**    * Utility method to load Service json from disk or from    * YARN examples.    *    * @param fileName - path to yarnfile    * @param serviceName - YARN Service Name    * @param lifetime - application lifetime    * @param queue - Queue to submit application    * @return    * @throws IOException    * @throws YarnException    */
DECL|method|loadAppJsonFromLocalFS (String fileName, String serviceName, Long lifetime, String queue)
specifier|public
name|Service
name|loadAppJsonFromLocalFS
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|Long
name|lifetime
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|&&
name|fileName
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|examplesDirStr
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"YARN_SERVICE_EXAMPLES_DIR"
argument_list|)
decl_stmt|;
name|String
index|[]
name|examplesDirs
decl_stmt|;
if|if
condition|(
name|examplesDirStr
operator|==
literal|null
condition|)
block|{
name|String
name|yarnHome
init|=
name|System
operator|.
name|getenv
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_YARN_HOME
operator|.
name|key
argument_list|()
argument_list|)
decl_stmt|;
name|examplesDirs
operator|=
operator|new
name|String
index|[]
block|{
name|yarnHome
operator|+
literal|"/share/hadoop/yarn/yarn-service-examples"
block|,
name|yarnHome
operator|+
literal|"/yarn-service-examples"
block|}
expr_stmt|;
block|}
else|else
block|{
name|examplesDirs
operator|=
name|StringUtils
operator|.
name|split
argument_list|(
name|examplesDirStr
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|dir
range|:
name|examplesDirs
control|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"{0}/{1}/{2}.json"
argument_list|,
name|dir
argument_list|,
name|fileName
argument_list|,
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
break|break;
block|}
comment|// Then look for secondary location.
name|file
operator|=
operator|new
name|File
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"{0}/{1}.json"
argument_list|,
name|dir
argument_list|,
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"File or example could not be found: "
operator|+
name|fileName
argument_list|)
throw|;
block|}
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading service definition from local FS: "
operator|+
name|filePath
argument_list|)
expr_stmt|;
name|Service
name|service
init|=
name|jsonSerDeser
operator|.
name|load
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|getConfig
argument_list|()
argument_list|)
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|serviceName
argument_list|)
condition|)
block|{
name|service
operator|.
name|setName
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lifetime
operator|!=
literal|null
operator|&&
name|lifetime
operator|>
literal|0
condition|)
block|{
name|service
operator|.
name|setLifetime
argument_list|(
name|lifetime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|queue
argument_list|)
condition|)
block|{
name|service
operator|.
name|setQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
return|return
name|service
return|;
block|}
comment|/**    * Launch YARN service application.    *    * @param fileName - path to yarnfile    * @param appName - YARN Service Name    * @param lifetime - application lifetime    * @param queue - Queue to submit application    */
annotation|@
name|Override
DECL|method|actionLaunch (String fileName, String appName, Long lifetime, String queue)
specifier|public
name|int
name|actionLaunch
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|appName
parameter_list|,
name|Long
name|lifetime
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|int
name|result
init|=
name|EXIT_SUCCESS
decl_stmt|;
try|try
block|{
name|Service
name|service
init|=
name|loadAppJsonFromLocalFS
argument_list|(
name|fileName
argument_list|,
name|appName
argument_list|,
name|lifetime
argument_list|,
name|queue
argument_list|)
decl_stmt|;
name|String
name|buffer
init|=
name|jsonSerDeser
operator|.
name|toJson
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|()
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|result
operator|=
name|processResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to launch application: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|EXIT_EXCEPTION_THROWN
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Stop YARN service application.    *    * @param appName - YARN Service Name    */
annotation|@
name|Override
DECL|method|actionStop (String appName)
specifier|public
name|int
name|actionStop
parameter_list|(
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|int
name|result
init|=
name|EXIT_SUCCESS
decl_stmt|;
try|try
block|{
name|Service
name|service
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|service
operator|.
name|setName
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|service
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|String
name|buffer
init|=
name|jsonSerDeser
operator|.
name|toJson
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|(
name|getServicePath
argument_list|(
name|appName
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|result
operator|=
name|processResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to stop application: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|EXIT_EXCEPTION_THROWN
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Start YARN service application.    *    * @param appName - YARN Service Name    */
annotation|@
name|Override
DECL|method|actionStart (String appName)
specifier|public
name|int
name|actionStart
parameter_list|(
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|int
name|result
init|=
name|EXIT_SUCCESS
decl_stmt|;
try|try
block|{
name|Service
name|service
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|service
operator|.
name|setName
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|service
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|String
name|buffer
init|=
name|jsonSerDeser
operator|.
name|toJson
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|(
name|getServicePath
argument_list|(
name|appName
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|result
operator|=
name|processResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to start application: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|EXIT_EXCEPTION_THROWN
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Save Service configuration.    *    * @param fileName - path to Yarnfile    * @param appName - YARN Service Name    * @param lifetime - container life time    * @param queue - Queue to submit the application    */
annotation|@
name|Override
DECL|method|actionSave (String fileName, String appName, Long lifetime, String queue)
specifier|public
name|int
name|actionSave
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|appName
parameter_list|,
name|Long
name|lifetime
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|int
name|result
init|=
name|EXIT_SUCCESS
decl_stmt|;
try|try
block|{
name|Service
name|service
init|=
name|loadAppJsonFromLocalFS
argument_list|(
name|fileName
argument_list|,
name|appName
argument_list|,
name|lifetime
argument_list|,
name|queue
argument_list|)
decl_stmt|;
name|service
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|String
name|buffer
init|=
name|jsonSerDeser
operator|.
name|toJson
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|()
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|result
operator|=
name|processResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to save application: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|EXIT_EXCEPTION_THROWN
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Decommission a YARN service.    *    * @param appName - YARN Service Name    */
annotation|@
name|Override
DECL|method|actionDestroy (String appName)
specifier|public
name|int
name|actionDestroy
parameter_list|(
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|int
name|result
init|=
name|EXIT_SUCCESS
decl_stmt|;
try|try
block|{
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|(
name|getServicePath
argument_list|(
name|appName
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|result
operator|=
name|processResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to destroy application: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|EXIT_EXCEPTION_THROWN
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Change number of containers associated with a service.    *    * @param appName - YARN Service Name    * @param componentCounts - list of components and desired container count    */
annotation|@
name|Override
DECL|method|actionFlex (String appName, Map<String, String> componentCounts)
specifier|public
name|int
name|actionFlex
parameter_list|(
name|String
name|appName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|componentCounts
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|int
name|result
init|=
name|EXIT_SUCCESS
decl_stmt|;
try|try
block|{
name|Service
name|service
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|service
operator|.
name|setName
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|service
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|FLEX
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|componentCounts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Component
name|component
init|=
operator|new
name|Component
argument_list|()
decl_stmt|;
name|component
operator|.
name|setName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|numberOfContainers
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|component
operator|.
name|setNumberOfContainers
argument_list|(
name|numberOfContainers
argument_list|)
expr_stmt|;
name|service
operator|.
name|addComponent
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
name|String
name|buffer
init|=
name|jsonSerDeser
operator|.
name|toJson
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|(
name|getServicePath
argument_list|(
name|appName
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|result
operator|=
name|processResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to flex application: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|EXIT_EXCEPTION_THROWN
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|enableFastLaunch (String destinationFolder)
specifier|public
name|int
name|enableFastLaunch
parameter_list|(
name|String
name|destinationFolder
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|ServiceClient
name|sc
init|=
operator|new
name|ServiceClient
argument_list|()
decl_stmt|;
name|sc
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|sc
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|result
init|=
name|sc
operator|.
name|enableFastLaunch
argument_list|(
name|destinationFolder
argument_list|)
decl_stmt|;
name|sc
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Retrieve Service Status through REST API.    *    * @param appIdOrName - YARN application ID or application name    * @return Status output    */
annotation|@
name|Override
DECL|method|getStatusString (String appIdOrName)
specifier|public
name|String
name|getStatusString
parameter_list|(
name|String
name|appIdOrName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|String
name|output
init|=
literal|""
decl_stmt|;
name|String
name|appName
decl_stmt|;
try|try
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|appIdOrName
argument_list|)
decl_stmt|;
name|ApplicationReport
name|appReport
init|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|appName
operator|=
name|appReport
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// not app Id format, may be app name
name|appName
operator|=
name|appIdOrName
expr_stmt|;
name|ServiceApiUtil
operator|.
name|validateNameFormat
argument_list|(
name|appName
argument_list|,
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|(
name|getServicePath
argument_list|(
name|appName
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
literal|404
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" Service "
argument_list|)
operator|.
name|append
argument_list|(
name|appName
argument_list|)
operator|.
name|append
argument_list|(
literal|" not found"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|!=
literal|200
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|appName
argument_list|)
operator|.
name|append
argument_list|(
literal|" Failed : HTTP error code : "
argument_list|)
operator|.
name|append
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
name|output
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to check application status: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|output
return|;
block|}
annotation|@
name|Override
DECL|method|actionUpgradeExpress (String appName, File path)
specifier|public
name|int
name|actionUpgradeExpress
parameter_list|(
name|String
name|appName
parameter_list|,
name|File
name|path
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|int
name|result
decl_stmt|;
try|try
block|{
name|Service
name|service
init|=
name|loadAppJsonFromLocalFS
argument_list|(
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|appName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|service
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|EXPRESS_UPGRADING
argument_list|)
expr_stmt|;
name|String
name|buffer
init|=
name|jsonSerDeser
operator|.
name|toJson
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Upgrade in progress. Please wait.."
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|(
name|getServicePath
argument_list|(
name|appName
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|result
operator|=
name|processResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to upgrade application: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|EXIT_EXCEPTION_THROWN
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|initiateUpgrade (String appName, String fileName, boolean autoFinalize)
specifier|public
name|int
name|initiateUpgrade
parameter_list|(
name|String
name|appName
parameter_list|,
name|String
name|fileName
parameter_list|,
name|boolean
name|autoFinalize
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|int
name|result
decl_stmt|;
try|try
block|{
name|Service
name|service
init|=
name|loadAppJsonFromLocalFS
argument_list|(
name|fileName
argument_list|,
name|appName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|autoFinalize
condition|)
block|{
name|service
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|UPGRADING_AUTO_FINALIZE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|service
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|UPGRADING
argument_list|)
expr_stmt|;
block|}
name|String
name|buffer
init|=
name|jsonSerDeser
operator|.
name|toJson
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|(
name|getServicePath
argument_list|(
name|appName
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|result
operator|=
name|processResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to upgrade application: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|EXIT_EXCEPTION_THROWN
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|actionUpgradeInstances (String appName, List<String> compInstances)
specifier|public
name|int
name|actionUpgradeInstances
parameter_list|(
name|String
name|appName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|compInstances
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|int
name|result
decl_stmt|;
name|Container
index|[]
name|toUpgrade
init|=
operator|new
name|Container
index|[
name|compInstances
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
try|try
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|instanceName
range|:
name|compInstances
control|)
block|{
name|Container
name|container
init|=
operator|new
name|Container
argument_list|()
decl_stmt|;
name|container
operator|.
name|setComponentInstanceName
argument_list|(
name|instanceName
argument_list|)
expr_stmt|;
name|container
operator|.
name|setState
argument_list|(
name|ContainerState
operator|.
name|UPGRADING
argument_list|)
expr_stmt|;
name|toUpgrade
index|[
name|idx
operator|++
index|]
operator|=
name|container
expr_stmt|;
block|}
name|String
name|buffer
init|=
name|ServiceApiUtil
operator|.
name|CONTAINER_JSON_SERDE
operator|.
name|toJson
argument_list|(
name|toUpgrade
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|(
name|getInstancesPath
argument_list|(
name|appName
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|result
operator|=
name|processResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to upgrade component instance: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|EXIT_EXCEPTION_THROWN
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|actionUpgradeComponents (String appName, List<String> components)
specifier|public
name|int
name|actionUpgradeComponents
parameter_list|(
name|String
name|appName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|components
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|int
name|result
decl_stmt|;
name|Component
index|[]
name|toUpgrade
init|=
operator|new
name|Component
index|[
name|components
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
try|try
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|compName
range|:
name|components
control|)
block|{
name|Component
name|component
init|=
operator|new
name|Component
argument_list|()
decl_stmt|;
name|component
operator|.
name|setName
argument_list|(
name|compName
argument_list|)
expr_stmt|;
name|component
operator|.
name|setState
argument_list|(
name|ComponentState
operator|.
name|UPGRADING
argument_list|)
expr_stmt|;
name|toUpgrade
index|[
name|idx
operator|++
index|]
operator|=
name|component
expr_stmt|;
block|}
name|String
name|buffer
init|=
name|ServiceApiUtil
operator|.
name|COMP_JSON_SERDE
operator|.
name|toJson
argument_list|(
name|toUpgrade
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|(
name|getComponentsPath
argument_list|(
name|appName
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|result
operator|=
name|processResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to upgrade components: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|EXIT_EXCEPTION_THROWN
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|actionCleanUp (String appName, String userName)
specifier|public
name|int
name|actionCleanUp
parameter_list|(
name|String
name|appName
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|ServiceClient
name|sc
init|=
operator|new
name|ServiceClient
argument_list|()
decl_stmt|;
name|sc
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|sc
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|result
init|=
name|sc
operator|.
name|actionCleanUp
argument_list|(
name|appName
argument_list|,
name|userName
argument_list|)
decl_stmt|;
name|sc
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getInstances (String appName, List<String> components, String version, List<String> containerStates)
specifier|public
name|String
name|getInstances
parameter_list|(
name|String
name|appName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|components
parameter_list|,
name|String
name|version
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|containerStates
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
try|try
block|{
name|String
name|uri
init|=
name|getInstancePath
argument_list|(
name|appName
argument_list|,
name|components
argument_list|,
name|version
argument_list|,
name|containerStates
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|(
name|uri
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|!=
literal|200
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Failed: HTTP error code: "
argument_list|)
operator|.
name|append
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" ErrorMsg: "
argument_list|)
operator|.
name|append
argument_list|(
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to get containers {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|actionCancelUpgrade ( String appName)
specifier|public
name|int
name|actionCancelUpgrade
parameter_list|(
name|String
name|appName
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|int
name|result
decl_stmt|;
try|try
block|{
name|Service
name|service
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|service
operator|.
name|setName
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|service
operator|.
name|setState
argument_list|(
name|ServiceState
operator|.
name|CANCEL_UPGRADING
argument_list|)
expr_stmt|;
name|String
name|buffer
init|=
name|jsonSerDeser
operator|.
name|toJson
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cancel upgrade in progress. Please wait.."
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|(
name|getServicePath
argument_list|(
name|appName
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|result
operator|=
name|processResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to cancel upgrade: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|EXIT_EXCEPTION_THROWN
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|actionDecommissionInstances (String appName, List<String> componentInstances)
specifier|public
name|int
name|actionDecommissionInstances
parameter_list|(
name|String
name|appName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|componentInstances
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|int
name|result
init|=
name|EXIT_SUCCESS
decl_stmt|;
try|try
block|{
name|Service
name|service
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|service
operator|.
name|setName
argument_list|(
name|appName
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|instance
range|:
name|componentInstances
control|)
block|{
name|String
name|componentName
init|=
name|ServiceApiUtil
operator|.
name|parseComponentName
argument_list|(
name|instance
argument_list|)
decl_stmt|;
name|Component
name|component
init|=
name|service
operator|.
name|getComponent
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
name|component
operator|=
operator|new
name|Component
argument_list|()
expr_stmt|;
name|component
operator|.
name|setName
argument_list|(
name|componentName
argument_list|)
expr_stmt|;
name|service
operator|.
name|addComponent
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
name|component
operator|.
name|addDecommissionedInstance
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
name|String
name|buffer
init|=
name|jsonSerDeser
operator|.
name|toJson
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|getApiClient
argument_list|(
name|getServicePath
argument_list|(
name|appName
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|result
operator|=
name|processResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to decommission instance: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|EXIT_EXCEPTION_THROWN
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

