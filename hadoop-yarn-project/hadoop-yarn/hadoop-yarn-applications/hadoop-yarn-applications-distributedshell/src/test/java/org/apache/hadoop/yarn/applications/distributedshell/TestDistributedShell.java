begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.applications.distributedshell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|applications
operator|.
name|distributedshell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|JarFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MiniYARNCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|ContainerManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestDistributedShell
specifier|public
class|class
name|TestDistributedShell
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDistributedShell
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|yarnCluster
specifier|protected
name|MiniYARNCluster
name|yarnCluster
init|=
literal|null
decl_stmt|;
DECL|field|conf
specifier|protected
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
DECL|field|APPMASTER_JAR
specifier|protected
specifier|final
specifier|static
name|String
name|APPMASTER_JAR
init|=
name|JarFinder
operator|.
name|getJar
argument_list|(
name|ApplicationMaster
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting up YARN cluster"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|FifoScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.log.dir"
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|yarnCluster
operator|==
literal|null
condition|)
block|{
name|yarnCluster
operator|=
operator|new
name|MiniYARNCluster
argument_list|(
name|TestDistributedShell
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|NodeManager
name|nm
init|=
name|yarnCluster
operator|.
name|getNodeManager
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|waitForNMToRegister
argument_list|(
name|nm
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"yarn-site.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find 'yarn-site.xml' dummy file in classpath"
argument_list|)
throw|;
block|}
name|Configuration
name|yarnClusterConfig
init|=
name|yarnCluster
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|yarnClusterConfig
operator|.
name|set
argument_list|(
literal|"yarn.application.classpath"
argument_list|,
operator|new
name|File
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
comment|//write the document to a buffer (not directly to the file, as that
comment|//can cause the file being written to get read -which will then fail.
name|ByteArrayOutputStream
name|bytesOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|yarnClusterConfig
operator|.
name|writeXml
argument_list|(
name|bytesOut
argument_list|)
expr_stmt|;
name|bytesOut
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//write the bytes to the file in the classpath
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|bytesOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FileContext
name|fsContext
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
decl_stmt|;
name|fsContext
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"yarn.timeline-service.leveldb-timeline-store.path"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"setup thread sleep interrupted. message="
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|yarnCluster
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|yarnCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|yarnCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|FileContext
name|fsContext
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
decl_stmt|;
name|fsContext
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"yarn.timeline-service.leveldb-timeline-store.path"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testDSShellWithDomain ()
specifier|public
name|void
name|testDSShellWithDomain
parameter_list|()
throws|throws
name|Exception
block|{
name|testDSShell
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testDSShellWithoutDomain ()
specifier|public
name|void
name|testDSShellWithoutDomain
parameter_list|()
throws|throws
name|Exception
block|{
name|testDSShell
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testDSShell (boolean haveDomain)
specifier|public
name|void
name|testDSShell
parameter_list|(
name|boolean
name|haveDomain
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"--jar"
block|,
name|APPMASTER_JAR
block|,
literal|"--num_containers"
block|,
literal|"2"
block|,
literal|"--shell_command"
block|,
name|Shell
operator|.
name|WINDOWS
operator|?
literal|"dir"
operator|:
literal|"ls"
block|,
literal|"--master_memory"
block|,
literal|"512"
block|,
literal|"--master_vcores"
block|,
literal|"2"
block|,
literal|"--container_memory"
block|,
literal|"128"
block|,
literal|"--container_vcores"
block|,
literal|"1"
block|}
decl_stmt|;
if|if
condition|(
name|haveDomain
condition|)
block|{
name|String
index|[]
name|domainArgs
init|=
block|{
literal|"--domain"
block|,
literal|"TEST_DOMAIN"
block|,
literal|"--view_acls"
block|,
literal|"reader_user reader_group"
block|,
literal|"--modify_acls"
block|,
literal|"writer_user writer_group"
block|,
literal|"--create"
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|argsList
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|domainArgs
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
name|argsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|argsList
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing DS Client"
argument_list|)
expr_stmt|;
specifier|final
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
operator|new
name|Configuration
argument_list|(
name|yarnCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|initSuccess
init|=
name|client
operator|.
name|init
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|initSuccess
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running DS Client"
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|result
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|result
operator|.
name|set
argument_list|(
name|client
operator|.
name|run
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|YarnClient
name|yarnClient
init|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
decl_stmt|;
name|yarnClient
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|(
name|yarnCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|yarnClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|hostName
init|=
name|NetUtils
operator|.
name|getHostname
argument_list|()
decl_stmt|;
name|boolean
name|verified
init|=
literal|false
decl_stmt|;
name|String
name|errorMessage
init|=
literal|""
decl_stmt|;
while|while
condition|(
operator|!
name|verified
condition|)
block|{
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|apps
init|=
name|yarnClient
operator|.
name|getApplications
argument_list|()
decl_stmt|;
if|if
condition|(
name|apps
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ApplicationReport
name|appReport
init|=
name|apps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|appReport
operator|.
name|getHost
argument_list|()
operator|.
name|equals
argument_list|(
literal|"N/A"
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|errorMessage
operator|=
literal|"Expected host name to start with '"
operator|+
name|hostName
operator|+
literal|"', was '"
operator|+
name|appReport
operator|.
name|getHost
argument_list|()
operator|+
literal|"'. Expected rpc port to be '-1', was '"
operator|+
name|appReport
operator|.
name|getRpcPort
argument_list|()
operator|+
literal|"'."
expr_stmt|;
if|if
condition|(
name|checkHostname
argument_list|(
name|appReport
operator|.
name|getHost
argument_list|()
argument_list|)
operator|&&
name|appReport
operator|.
name|getRpcPort
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
name|verified
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|FINISHED
condition|)
block|{
break|break;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|errorMessage
argument_list|,
name|verified
argument_list|)
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Client run completed. Result="
operator|+
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineDomain
name|domain
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|haveDomain
condition|)
block|{
name|domain
operator|=
name|yarnCluster
operator|.
name|getApplicationHistoryServer
argument_list|()
operator|.
name|getTimelineStore
argument_list|()
operator|.
name|getDomain
argument_list|(
literal|"TEST_DOMAIN"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|domain
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"reader_user reader_group"
argument_list|,
name|domain
operator|.
name|getReaders
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"writer_user writer_group"
argument_list|,
name|domain
operator|.
name|getWriters
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TimelineEntities
name|entitiesAttempts
init|=
name|yarnCluster
operator|.
name|getApplicationHistoryServer
argument_list|()
operator|.
name|getTimelineStore
argument_list|()
operator|.
name|getEntities
argument_list|(
name|ApplicationMaster
operator|.
name|DSEntity
operator|.
name|DS_APP_ATTEMPT
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|entitiesAttempts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entitiesAttempts
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entitiesAttempts
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|entitiesAttempts
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEntityType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ApplicationMaster
operator|.
name|DSEntity
operator|.
name|DS_APP_ATTEMPT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|haveDomain
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|domain
operator|.
name|getId
argument_list|()
argument_list|,
name|entitiesAttempts
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDomainId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"DEFAULT"
argument_list|,
name|entitiesAttempts
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDomainId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TimelineEntities
name|entities
init|=
name|yarnCluster
operator|.
name|getApplicationHistoryServer
argument_list|()
operator|.
name|getTimelineStore
argument_list|()
operator|.
name|getEntities
argument_list|(
name|ApplicationMaster
operator|.
name|DSEntity
operator|.
name|DS_CONTAINER
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|entities
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEntityType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ApplicationMaster
operator|.
name|DSEntity
operator|.
name|DS_CONTAINER
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|haveDomain
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|domain
operator|.
name|getId
argument_list|()
argument_list|,
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDomainId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"DEFAULT"
argument_list|,
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDomainId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * NetUtils.getHostname() returns a string in the form "hostname/ip".    * Sometimes the hostname we get is the FQDN and sometimes the short name. In    * addition, on machines with multiple network interfaces, it runs any one of    * the ips. The function below compares the returns values for    * NetUtils.getHostname() accounting for the conditions mentioned.    */
DECL|method|checkHostname (String appHostname)
specifier|private
name|boolean
name|checkHostname
parameter_list|(
name|String
name|appHostname
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|hostname
init|=
name|NetUtils
operator|.
name|getHostname
argument_list|()
decl_stmt|;
if|if
condition|(
name|hostname
operator|.
name|equals
argument_list|(
name|appHostname
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unknown format for hostname "
operator|+
name|appHostname
argument_list|,
name|appHostname
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unknown format for hostname "
operator|+
name|hostname
argument_list|,
name|hostname
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|appHostnameParts
init|=
name|appHostname
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
index|[]
name|hostnameParts
init|=
name|hostname
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
return|return
operator|(
name|compareFQDNs
argument_list|(
name|appHostnameParts
index|[
literal|0
index|]
argument_list|,
name|hostnameParts
index|[
literal|0
index|]
argument_list|)
operator|&&
name|checkIPs
argument_list|(
name|hostnameParts
index|[
literal|0
index|]
argument_list|,
name|hostnameParts
index|[
literal|1
index|]
argument_list|,
name|appHostnameParts
index|[
literal|1
index|]
argument_list|)
operator|)
return|;
block|}
DECL|method|compareFQDNs (String appHostname, String hostname)
specifier|private
name|boolean
name|compareFQDNs
parameter_list|(
name|String
name|appHostname
parameter_list|,
name|String
name|hostname
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|appHostname
operator|.
name|equals
argument_list|(
name|hostname
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|appFQDN
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|appHostname
argument_list|)
operator|.
name|getCanonicalHostName
argument_list|()
decl_stmt|;
name|String
name|localFQDN
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|hostname
argument_list|)
operator|.
name|getCanonicalHostName
argument_list|()
decl_stmt|;
return|return
name|appFQDN
operator|.
name|equals
argument_list|(
name|localFQDN
argument_list|)
return|;
block|}
DECL|method|checkIPs (String hostname, String localIP, String appIP)
specifier|private
name|boolean
name|checkIPs
parameter_list|(
name|String
name|hostname
parameter_list|,
name|String
name|localIP
parameter_list|,
name|String
name|appIP
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|localIP
operator|.
name|equals
argument_list|(
name|appIP
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|appIPCheck
init|=
literal|false
decl_stmt|;
name|boolean
name|localIPCheck
init|=
literal|false
decl_stmt|;
name|InetAddress
index|[]
name|addresses
init|=
name|InetAddress
operator|.
name|getAllByName
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
for|for
control|(
name|InetAddress
name|ia
range|:
name|addresses
control|)
block|{
if|if
condition|(
name|ia
operator|.
name|getHostAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|appIP
argument_list|)
condition|)
block|{
name|appIPCheck
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|ia
operator|.
name|getHostAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|localIP
argument_list|)
condition|)
block|{
name|localIPCheck
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
operator|(
name|appIPCheck
operator|&&
name|localIPCheck
operator|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testDSRestartWithPreviousRunningContainers ()
specifier|public
name|void
name|testDSRestartWithPreviousRunningContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"--jar"
block|,
name|APPMASTER_JAR
block|,
literal|"--num_containers"
block|,
literal|"1"
block|,
literal|"--shell_command"
block|,
literal|"sleep 8"
block|,
literal|"--master_memory"
block|,
literal|"512"
block|,
literal|"--container_memory"
block|,
literal|"128"
block|,
literal|"--keep_containers_across_application_attempts"
block|}
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing DS Client"
argument_list|)
expr_stmt|;
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|TestDSFailedAppMaster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|(
name|yarnCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running DS Client"
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
name|client
operator|.
name|run
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Client run completed. Result="
operator|+
name|result
argument_list|)
expr_stmt|;
comment|// application should succeed
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|/*    * The sleeping period in TestDSSleepingAppMaster is set as 5 seconds.    * Set attempt_failures_validity_interval as 2.5 seconds. It will check    * how many attempt failures for previous 2.5 seconds.    * The application is expected to be successful.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testDSAttemptFailuresValidityIntervalSucess ()
specifier|public
name|void
name|testDSAttemptFailuresValidityIntervalSucess
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"--jar"
block|,
name|APPMASTER_JAR
block|,
literal|"--num_containers"
block|,
literal|"1"
block|,
literal|"--shell_command"
block|,
literal|"sleep 8"
block|,
literal|"--master_memory"
block|,
literal|"512"
block|,
literal|"--container_memory"
block|,
literal|"128"
block|,
literal|"--attempt_failures_validity_interval"
block|,
literal|"2500"
block|}
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing DS Client"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|yarnCluster
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|TestDSSleepingAppMaster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running DS Client"
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
name|client
operator|.
name|run
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Client run completed. Result="
operator|+
name|result
argument_list|)
expr_stmt|;
comment|// application should succeed
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|/*    * The sleeping period in TestDSSleepingAppMaster is set as 5 seconds.    * Set attempt_failures_validity_interval as 15 seconds. It will check    * how many attempt failure for previous 15 seconds.    * The application is expected to be fail.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testDSAttemptFailuresValidityIntervalFailed ()
specifier|public
name|void
name|testDSAttemptFailuresValidityIntervalFailed
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"--jar"
block|,
name|APPMASTER_JAR
block|,
literal|"--num_containers"
block|,
literal|"1"
block|,
literal|"--shell_command"
block|,
literal|"sleep 8"
block|,
literal|"--master_memory"
block|,
literal|"512"
block|,
literal|"--container_memory"
block|,
literal|"128"
block|,
literal|"--attempt_failures_validity_interval"
block|,
literal|"15000"
block|}
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing DS Client"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|yarnCluster
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|TestDSSleepingAppMaster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running DS Client"
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
name|client
operator|.
name|run
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Client run completed. Result="
operator|+
name|result
argument_list|)
expr_stmt|;
comment|// application should be failed
name|Assert
operator|.
name|assertFalse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testDSShellWithCustomLogPropertyFile ()
specifier|public
name|void
name|testDSShellWithCustomLogPropertyFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|File
name|basedir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestDistributedShell
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
literal|"tmpDir"
argument_list|)
decl_stmt|;
name|tmpDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
specifier|final
name|File
name|customLogProperty
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"custom_log4j.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|customLogProperty
operator|.
name|exists
argument_list|()
condition|)
block|{
name|customLogProperty
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|customLogProperty
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Can not create custom log4j property file."
argument_list|)
expr_stmt|;
block|}
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|customLogProperty
argument_list|)
decl_stmt|;
comment|// set the output to DEBUG level
name|fileWriter
operator|.
name|write
argument_list|(
literal|"log4j.rootLogger=debug,stdout"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"--jar"
block|,
name|APPMASTER_JAR
block|,
literal|"--num_containers"
block|,
literal|"3"
block|,
literal|"--shell_command"
block|,
literal|"echo"
block|,
literal|"--shell_args"
block|,
literal|"HADOOP"
block|,
literal|"--log_properties"
block|,
name|customLogProperty
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--master_memory"
block|,
literal|"512"
block|,
literal|"--master_vcores"
block|,
literal|"2"
block|,
literal|"--container_memory"
block|,
literal|"128"
block|,
literal|"--container_vcores"
block|,
literal|"1"
block|}
decl_stmt|;
comment|//Before run the DS, the default the log level is INFO
specifier|final
name|Log
name|LOG_Client
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Client
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|LOG_Client
operator|.
name|isInfoEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|LOG_Client
operator|.
name|isDebugEnabled
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Log
name|LOG_AM
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ApplicationMaster
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|LOG_AM
operator|.
name|isInfoEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|LOG_AM
operator|.
name|isDebugEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing DS Client"
argument_list|)
expr_stmt|;
specifier|final
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
operator|new
name|Configuration
argument_list|(
name|yarnCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|initSuccess
init|=
name|client
operator|.
name|init
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|initSuccess
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running DS Client"
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
name|client
operator|.
name|run
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Client run completed. Result="
operator|+
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|verifyContainerLog
argument_list|(
literal|3
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|"DEBUG"
argument_list|)
operator|>
literal|10
argument_list|)
expr_stmt|;
comment|//After DS is finished, the log level should be DEBUG
name|Assert
operator|.
name|assertTrue
argument_list|(
name|LOG_Client
operator|.
name|isInfoEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|LOG_Client
operator|.
name|isDebugEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|LOG_AM
operator|.
name|isInfoEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|LOG_AM
operator|.
name|isDebugEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDSShellWithCommands ()
specifier|public
name|void
name|testDSShellWithCommands
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"--jar"
block|,
name|APPMASTER_JAR
block|,
literal|"--num_containers"
block|,
literal|"2"
block|,
literal|"--shell_command"
block|,
literal|"\"echo output_ignored;echo output_expected\""
block|,
literal|"--master_memory"
block|,
literal|"512"
block|,
literal|"--master_vcores"
block|,
literal|"2"
block|,
literal|"--container_memory"
block|,
literal|"128"
block|,
literal|"--container_vcores"
block|,
literal|"1"
block|}
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing DS Client"
argument_list|)
expr_stmt|;
specifier|final
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
operator|new
name|Configuration
argument_list|(
name|yarnCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|initSuccess
init|=
name|client
operator|.
name|init
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|initSuccess
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running DS Client"
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
name|client
operator|.
name|run
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Client run completed. Result="
operator|+
name|result
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedContent
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedContent
operator|.
name|add
argument_list|(
literal|"output_expected"
argument_list|)
expr_stmt|;
name|verifyContainerLog
argument_list|(
literal|2
argument_list|,
name|expectedContent
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testDSShellWithMultipleArgs ()
specifier|public
name|void
name|testDSShellWithMultipleArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"--jar"
block|,
name|APPMASTER_JAR
block|,
literal|"--num_containers"
block|,
literal|"4"
block|,
literal|"--shell_command"
block|,
literal|"echo"
block|,
literal|"--shell_args"
block|,
literal|"HADOOP YARN MAPREDUCE HDFS"
block|,
literal|"--master_memory"
block|,
literal|"512"
block|,
literal|"--master_vcores"
block|,
literal|"2"
block|,
literal|"--container_memory"
block|,
literal|"128"
block|,
literal|"--container_vcores"
block|,
literal|"1"
block|}
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing DS Client"
argument_list|)
expr_stmt|;
specifier|final
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
operator|new
name|Configuration
argument_list|(
name|yarnCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|initSuccess
init|=
name|client
operator|.
name|init
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|initSuccess
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running DS Client"
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
name|client
operator|.
name|run
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Client run completed. Result="
operator|+
name|result
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedContent
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedContent
operator|.
name|add
argument_list|(
literal|"HADOOP YARN MAPREDUCE HDFS"
argument_list|)
expr_stmt|;
name|verifyContainerLog
argument_list|(
literal|4
argument_list|,
name|expectedContent
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testDSShellWithShellScript ()
specifier|public
name|void
name|testDSShellWithShellScript
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|File
name|basedir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestDistributedShell
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
literal|"tmpDir"
argument_list|)
decl_stmt|;
name|tmpDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
specifier|final
name|File
name|customShellScript
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"custom_script.sh"
argument_list|)
decl_stmt|;
if|if
condition|(
name|customShellScript
operator|.
name|exists
argument_list|()
condition|)
block|{
name|customShellScript
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|customShellScript
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Can not create custom shell script file."
argument_list|)
expr_stmt|;
block|}
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|customShellScript
argument_list|)
decl_stmt|;
comment|// set the output to DEBUG level
name|fileWriter
operator|.
name|write
argument_list|(
literal|"echo testDSShellWithShellScript"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|customShellScript
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"--jar"
block|,
name|APPMASTER_JAR
block|,
literal|"--num_containers"
block|,
literal|"1"
block|,
literal|"--shell_script"
block|,
name|customShellScript
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--master_memory"
block|,
literal|"512"
block|,
literal|"--master_vcores"
block|,
literal|"2"
block|,
literal|"--container_memory"
block|,
literal|"128"
block|,
literal|"--container_vcores"
block|,
literal|"1"
block|}
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing DS Client"
argument_list|)
expr_stmt|;
specifier|final
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
operator|new
name|Configuration
argument_list|(
name|yarnCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|initSuccess
init|=
name|client
operator|.
name|init
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|initSuccess
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running DS Client"
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
name|client
operator|.
name|run
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Client run completed. Result="
operator|+
name|result
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedContent
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedContent
operator|.
name|add
argument_list|(
literal|"testDSShellWithShellScript"
argument_list|)
expr_stmt|;
name|verifyContainerLog
argument_list|(
literal|1
argument_list|,
name|expectedContent
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testDSShellWithInvalidArgs ()
specifier|public
name|void
name|testDSShellWithInvalidArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
operator|new
name|Configuration
argument_list|(
name|yarnCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing DS Client with no args"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|init
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The throw exception is not expected"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"No args"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing DS Client with no jar file"
argument_list|)
expr_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"--num_containers"
block|,
literal|"2"
block|,
literal|"--shell_command"
block|,
name|Shell
operator|.
name|WINDOWS
operator|?
literal|"dir"
operator|:
literal|"ls"
block|,
literal|"--master_memory"
block|,
literal|"512"
block|,
literal|"--container_memory"
block|,
literal|"128"
block|}
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The throw exception is not expected"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"No jar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing DS Client with no shell command"
argument_list|)
expr_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"--jar"
block|,
name|APPMASTER_JAR
block|,
literal|"--num_containers"
block|,
literal|"2"
block|,
literal|"--master_memory"
block|,
literal|"512"
block|,
literal|"--container_memory"
block|,
literal|"128"
block|}
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The throw exception is not expected"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"No shell command"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing DS Client with invalid no. of containers"
argument_list|)
expr_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"--jar"
block|,
name|APPMASTER_JAR
block|,
literal|"--num_containers"
block|,
literal|"-1"
block|,
literal|"--shell_command"
block|,
name|Shell
operator|.
name|WINDOWS
operator|?
literal|"dir"
operator|:
literal|"ls"
block|,
literal|"--master_memory"
block|,
literal|"512"
block|,
literal|"--container_memory"
block|,
literal|"128"
block|}
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The throw exception is not expected"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid no. of containers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing DS Client with invalid no. of vcores"
argument_list|)
expr_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"--jar"
block|,
name|APPMASTER_JAR
block|,
literal|"--num_containers"
block|,
literal|"2"
block|,
literal|"--shell_command"
block|,
name|Shell
operator|.
name|WINDOWS
operator|?
literal|"dir"
operator|:
literal|"ls"
block|,
literal|"--master_memory"
block|,
literal|"512"
block|,
literal|"--master_vcores"
block|,
literal|"-2"
block|,
literal|"--container_memory"
block|,
literal|"128"
block|,
literal|"--container_vcores"
block|,
literal|"1"
block|}
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The throw exception is not expected"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid virtual cores specified"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing DS Client with --shell_command and --shell_script"
argument_list|)
expr_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"--jar"
block|,
name|APPMASTER_JAR
block|,
literal|"--num_containers"
block|,
literal|"2"
block|,
literal|"--shell_command"
block|,
name|Shell
operator|.
name|WINDOWS
operator|?
literal|"dir"
operator|:
literal|"ls"
block|,
literal|"--master_memory"
block|,
literal|"512"
block|,
literal|"--master_vcores"
block|,
literal|"2"
block|,
literal|"--container_memory"
block|,
literal|"128"
block|,
literal|"--container_vcores"
block|,
literal|"1"
block|,
literal|"--shell_script"
block|,
literal|"test.sh"
block|}
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The throw exception is not expected"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Can not specify shell_command option "
operator|+
literal|"and shell_script option at the same time"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing DS Client without --shell_command and --shell_script"
argument_list|)
expr_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"--jar"
block|,
name|APPMASTER_JAR
block|,
literal|"--num_containers"
block|,
literal|"2"
block|,
literal|"--master_memory"
block|,
literal|"512"
block|,
literal|"--master_vcores"
block|,
literal|"2"
block|,
literal|"--container_memory"
block|,
literal|"128"
block|,
literal|"--container_vcores"
block|,
literal|"1"
block|}
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The throw exception is not expected"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"No shell command or shell script specified "
operator|+
literal|"to be executed by application master"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForNMToRegister (NodeManager nm)
specifier|protected
specifier|static
name|void
name|waitForNMToRegister
parameter_list|(
name|NodeManager
name|nm
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|attempt
init|=
literal|60
decl_stmt|;
name|ContainerManagerImpl
name|cm
init|=
operator|(
operator|(
name|ContainerManagerImpl
operator|)
name|nm
operator|.
name|getNMContext
argument_list|()
operator|.
name|getContainerManager
argument_list|()
operator|)
decl_stmt|;
while|while
condition|(
name|cm
operator|.
name|getBlockNewContainerRequestsStatus
argument_list|()
operator|&&
name|attempt
operator|--
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testContainerLaunchFailureHandling ()
specifier|public
name|void
name|testContainerLaunchFailureHandling
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"--jar"
block|,
name|APPMASTER_JAR
block|,
literal|"--num_containers"
block|,
literal|"2"
block|,
literal|"--shell_command"
block|,
name|Shell
operator|.
name|WINDOWS
operator|?
literal|"dir"
operator|:
literal|"ls"
block|,
literal|"--master_memory"
block|,
literal|"512"
block|,
literal|"--container_memory"
block|,
literal|"128"
block|}
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing DS Client"
argument_list|)
expr_stmt|;
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|ContainerLaunchFailAppMaster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|(
name|yarnCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|initSuccess
init|=
name|client
operator|.
name|init
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|initSuccess
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running DS Client"
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
name|client
operator|.
name|run
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Client run completed. Result="
operator|+
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testDebugFlag ()
specifier|public
name|void
name|testDebugFlag
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"--jar"
block|,
name|APPMASTER_JAR
block|,
literal|"--num_containers"
block|,
literal|"2"
block|,
literal|"--shell_command"
block|,
name|Shell
operator|.
name|WINDOWS
operator|?
literal|"dir"
operator|:
literal|"ls"
block|,
literal|"--master_memory"
block|,
literal|"512"
block|,
literal|"--master_vcores"
block|,
literal|"2"
block|,
literal|"--container_memory"
block|,
literal|"128"
block|,
literal|"--container_vcores"
block|,
literal|"1"
block|,
literal|"--debug"
block|}
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing DS Client"
argument_list|)
expr_stmt|;
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
operator|new
name|Configuration
argument_list|(
name|yarnCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|client
operator|.
name|init
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running DS Client"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|client
operator|.
name|run
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyContainerLog (int containerNum, List<String> expectedContent, boolean count, String expectedWord)
specifier|private
name|int
name|verifyContainerLog
parameter_list|(
name|int
name|containerNum
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|expectedContent
parameter_list|,
name|boolean
name|count
parameter_list|,
name|String
name|expectedWord
parameter_list|)
block|{
name|File
name|logFolder
init|=
operator|new
name|File
argument_list|(
name|yarnCluster
operator|.
name|getNodeManager
argument_list|(
literal|0
argument_list|)
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOG_DIRS
argument_list|)
argument_list|)
decl_stmt|;
name|File
index|[]
name|listOfFiles
init|=
name|logFolder
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|int
name|currentContainerLogFileIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|listOfFiles
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|listOfFiles
index|[
name|i
index|]
operator|.
name|listFiles
argument_list|()
operator|.
name|length
operator|==
name|containerNum
operator|+
literal|1
condition|)
block|{
name|currentContainerLogFileIndex
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|currentContainerLogFileIndex
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|File
index|[]
name|containerFiles
init|=
name|listOfFiles
index|[
name|currentContainerLogFileIndex
index|]
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|int
name|numOfWords
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|containerFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|File
name|output
range|:
name|containerFiles
index|[
name|i
index|]
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|output
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|contains
argument_list|(
literal|"stdout"
argument_list|)
condition|)
block|{
name|BufferedReader
name|br
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|stdOutContent
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|sCurrentLine
decl_stmt|;
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numOfline
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|sCurrentLine
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|count
condition|)
block|{
if|if
condition|(
name|sCurrentLine
operator|.
name|contains
argument_list|(
name|expectedWord
argument_list|)
condition|)
block|{
name|numOfWords
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|output
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"stdout"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The current is"
operator|+
name|sCurrentLine
argument_list|,
name|expectedContent
operator|.
name|get
argument_list|(
name|numOfline
argument_list|)
argument_list|,
name|sCurrentLine
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|numOfline
operator|++
expr_stmt|;
block|}
else|else
block|{
name|stdOutContent
operator|.
name|add
argument_list|(
name|sCurrentLine
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* By executing bat script using cmd /c,              * it will output all contents from bat script first              * It is hard for us to do check line by line              * Simply check whether output from bat file contains              * all the expected messages              */
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
operator|&&
operator|!
name|count
operator|&&
name|output
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"stdout"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stdOutContent
operator|.
name|containsAll
argument_list|(
name|expectedContent
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|br
operator|!=
literal|null
condition|)
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|numOfWords
return|;
block|}
block|}
end_class

end_unit

