begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.applications.distributedshell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|applications
operator|.
name|distributedshell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_class
DECL|class|TestDistributedShellWithNodeLabels
specifier|public
class|class
name|TestDistributedShellWithNodeLabels
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDistributedShellWithNodeLabels
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NUM_NMS
specifier|static
specifier|final
name|int
name|NUM_NMS
init|=
literal|2
decl_stmt|;
DECL|field|distShellTest
name|TestDistributedShell
name|distShellTest
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|distShellTest
operator|=
operator|new
name|TestDistributedShell
argument_list|()
expr_stmt|;
name|distShellTest
operator|.
name|setupInternal
argument_list|(
name|NUM_NMS
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeNodeLabels ()
specifier|private
name|void
name|initializeNodeLabels
parameter_list|()
throws|throws
name|IOException
block|{
name|RMContext
name|rmContext
init|=
name|distShellTest
operator|.
name|yarnCluster
operator|.
name|getResourceManager
argument_list|(
literal|0
argument_list|)
operator|.
name|getRMContext
argument_list|()
decl_stmt|;
comment|// Setup node labels
name|RMNodeLabelsManager
name|labelsMgr
init|=
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|labels
operator|.
name|add
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|labelsMgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|labels
argument_list|)
expr_stmt|;
comment|// Setup queue access to node labels
name|distShellTest
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.scheduler.capacity.root.accessible-node-labels"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|distShellTest
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.scheduler.capacity.root.accessible-node-labels.x.capacity"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|distShellTest
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.scheduler.capacity.root.default.accessible-node-labels"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|distShellTest
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.scheduler.capacity.root.default.accessible-node-labels.x.capacity"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|reinitialize
argument_list|(
name|distShellTest
operator|.
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
comment|// Fetch node-ids from yarn cluster
name|NodeId
index|[]
name|nodeIds
init|=
operator|new
name|NodeId
index|[
name|NUM_NMS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NMS
condition|;
name|i
operator|++
control|)
block|{
name|NodeManager
name|mgr
init|=
name|distShellTest
operator|.
name|yarnCluster
operator|.
name|getNodeManager
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|nodeIds
index|[
name|i
index|]
operator|=
name|mgr
operator|.
name|getNMContext
argument_list|()
operator|.
name|getNodeId
argument_list|()
expr_stmt|;
block|}
comment|// Set label x to NM[1]
name|labelsMgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|nodeIds
index|[
literal|1
index|]
argument_list|,
name|labels
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testDSShellWithNodeLabelExpression ()
specifier|public
name|void
name|testDSShellWithNodeLabelExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|initializeNodeLabels
argument_list|()
expr_stmt|;
comment|// Start NMContainerMonitor
name|NMContainerMonitor
name|mon
init|=
operator|new
name|NMContainerMonitor
argument_list|()
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|mon
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit a job which will sleep for 60 sec
name|String
index|[]
name|args
init|=
block|{
literal|"--jar"
block|,
name|TestDistributedShell
operator|.
name|APPMASTER_JAR
block|,
literal|"--num_containers"
block|,
literal|"4"
block|,
literal|"--shell_command"
block|,
literal|"sleep"
block|,
literal|"--shell_args"
block|,
literal|"15"
block|,
literal|"--master_memory"
block|,
literal|"512"
block|,
literal|"--master_vcores"
block|,
literal|"2"
block|,
literal|"--container_memory"
block|,
literal|"128"
block|,
literal|"--container_vcores"
block|,
literal|"1"
block|,
literal|"--node_label_expression"
block|,
literal|"x"
block|}
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing DS Client"
argument_list|)
expr_stmt|;
specifier|final
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
operator|new
name|Configuration
argument_list|(
name|distShellTest
operator|.
name|yarnCluster
operator|.
name|getConfig
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|initSuccess
init|=
name|client
operator|.
name|init
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|initSuccess
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running DS Client"
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
name|client
operator|.
name|run
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Client run completed. Result="
operator|+
name|result
argument_list|)
expr_stmt|;
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// Check maximum number of containers on each NMs
name|int
index|[]
name|maxRunningContainersOnNMs
init|=
name|mon
operator|.
name|getMaxRunningContainersReport
argument_list|()
decl_stmt|;
comment|// Check no container allocated on NM[0]
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|maxRunningContainersOnNMs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Check there're some containers allocated on NM[1]
name|Assert
operator|.
name|assertTrue
argument_list|(
name|maxRunningContainersOnNMs
index|[
literal|1
index|]
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Monitor containers running on NMs    */
DECL|class|NMContainerMonitor
class|class
name|NMContainerMonitor
implements|implements
name|Runnable
block|{
comment|// The interval of milliseconds of sampling (500ms)
DECL|field|SAMPLING_INTERVAL_MS
specifier|final
specifier|static
name|int
name|SAMPLING_INTERVAL_MS
init|=
literal|500
decl_stmt|;
comment|// The maximum number of containers running on each NMs
DECL|field|maxRunningContainersOnNMs
name|int
index|[]
name|maxRunningContainersOnNMs
init|=
operator|new
name|int
index|[
name|NUM_NMS
index|]
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NMS
condition|;
name|i
operator|++
control|)
block|{
name|int
name|nContainers
init|=
name|distShellTest
operator|.
name|yarnCluster
operator|.
name|getNodeManager
argument_list|(
name|i
argument_list|)
operator|.
name|getNMContext
argument_list|()
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|nContainers
operator|>
name|maxRunningContainersOnNMs
index|[
name|i
index|]
condition|)
block|{
name|maxRunningContainersOnNMs
index|[
name|i
index|]
operator|=
name|nContainers
expr_stmt|;
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|SAMPLING_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|getMaxRunningContainersReport ()
specifier|public
name|int
index|[]
name|getMaxRunningContainersReport
parameter_list|()
block|{
return|return
name|maxRunningContainersOnNMs
return|;
block|}
block|}
block|}
end_class

end_unit

