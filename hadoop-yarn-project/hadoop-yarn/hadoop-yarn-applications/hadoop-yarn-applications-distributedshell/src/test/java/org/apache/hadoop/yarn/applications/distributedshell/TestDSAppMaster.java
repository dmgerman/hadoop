begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.applications.distributedshell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|applications
operator|.
name|distributedshell
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|async
operator|.
name|AMRMClientAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
operator|.
name|TimelineClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A bunch of tests to make sure that the container allocations  * and releases occur correctly.  */
end_comment

begin_class
DECL|class|TestDSAppMaster
specifier|public
class|class
name|TestDSAppMaster
block|{
DECL|class|TestAppMaster
specifier|static
class|class
name|TestAppMaster
extends|extends
name|ApplicationMaster
block|{
DECL|field|threadsLaunched
specifier|private
name|int
name|threadsLaunched
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|createLaunchContainerThread (Container allocatedContainer)
specifier|protected
name|Thread
name|createLaunchContainerThread
parameter_list|(
name|Container
name|allocatedContainer
parameter_list|)
block|{
name|threadsLaunched
operator|++
expr_stmt|;
name|launchedContainers
operator|.
name|add
argument_list|(
name|allocatedContainer
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Thread
argument_list|()
return|;
block|}
DECL|method|setNumTotalContainers (int numTotalContainers)
name|void
name|setNumTotalContainers
parameter_list|(
name|int
name|numTotalContainers
parameter_list|)
block|{
name|this
operator|.
name|numTotalContainers
operator|=
name|numTotalContainers
expr_stmt|;
block|}
DECL|method|getAllocatedContainers ()
name|int
name|getAllocatedContainers
parameter_list|()
block|{
return|return
name|this
operator|.
name|numAllocatedContainers
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|startTimelineClient (final Configuration conf)
name|void
name|startTimelineClient
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|timelineClient
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testDSAppMasterAllocateHandler ()
specifier|public
name|void
name|testDSAppMasterAllocateHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAppMaster
name|master
init|=
operator|new
name|TestAppMaster
argument_list|()
decl_stmt|;
name|int
name|targetContainers
init|=
literal|2
decl_stmt|;
name|AMRMClientAsync
name|mockClient
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AMRMClientAsync
operator|.
name|class
argument_list|)
decl_stmt|;
name|master
operator|.
name|setAmRMClient
argument_list|(
name|mockClient
argument_list|)
expr_stmt|;
name|master
operator|.
name|setNumTotalContainers
argument_list|(
name|targetContainers
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|mockClient
argument_list|)
operator|.
name|addContainerRequest
argument_list|(
name|Matchers
operator|.
name|any
argument_list|(
name|AMRMClient
operator|.
name|ContainerRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationMaster
operator|.
name|RMCallbackHandler
name|handler
init|=
name|master
operator|.
name|getRMCallbackHandler
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|id1
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|containers
operator|.
name|add
argument_list|(
name|generateContainer
argument_list|(
name|id1
argument_list|)
argument_list|)
expr_stmt|;
name|master
operator|.
name|numRequestedContainers
operator|.
name|set
argument_list|(
name|targetContainers
argument_list|)
expr_stmt|;
comment|// first allocate a single container, everything should be fine
name|handler
operator|.
name|onContainersAllocated
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong container allocation count"
argument_list|,
literal|1
argument_list|,
name|master
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verifyZeroInteractions
argument_list|(
name|mockClient
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect number of threads launched"
argument_list|,
literal|1
argument_list|,
name|master
operator|.
name|threadsLaunched
argument_list|)
expr_stmt|;
comment|// now send 3 extra containers
name|containers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ContainerId
name|id2
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|containers
operator|.
name|add
argument_list|(
name|generateContainer
argument_list|(
name|id2
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerId
name|id3
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|containers
operator|.
name|add
argument_list|(
name|generateContainer
argument_list|(
name|id3
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerId
name|id4
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|containers
operator|.
name|add
argument_list|(
name|generateContainer
argument_list|(
name|id4
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|onContainersAllocated
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong final container allocation count"
argument_list|,
literal|4
argument_list|,
name|master
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect number of threads launched"
argument_list|,
literal|4
argument_list|,
name|master
operator|.
name|threadsLaunched
argument_list|)
expr_stmt|;
comment|// make sure we handle completion events correctly
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|status
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|status
operator|.
name|add
argument_list|(
name|generateContainerStatus
argument_list|(
name|id1
argument_list|,
name|ContainerExitStatus
operator|.
name|SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|add
argument_list|(
name|generateContainerStatus
argument_list|(
name|id2
argument_list|,
name|ContainerExitStatus
operator|.
name|SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|add
argument_list|(
name|generateContainerStatus
argument_list|(
name|id3
argument_list|,
name|ContainerExitStatus
operator|.
name|ABORTED
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|add
argument_list|(
name|generateContainerStatus
argument_list|(
name|id4
argument_list|,
name|ContainerExitStatus
operator|.
name|ABORTED
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|onContainersCompleted
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of completed containers"
argument_list|,
name|targetContainers
argument_list|,
name|master
operator|.
name|getNumCompletedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Master didn't finish containers as expected"
argument_list|,
name|master
operator|.
name|getDone
argument_list|()
argument_list|)
expr_stmt|;
comment|// test for events from containers we know nothing about
comment|// these events should be ignored
name|status
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|ContainerId
name|id5
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|status
operator|.
name|add
argument_list|(
name|generateContainerStatus
argument_list|(
name|id5
argument_list|,
name|ContainerExitStatus
operator|.
name|ABORTED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of completed containers"
argument_list|,
name|targetContainers
argument_list|,
name|master
operator|.
name|getNumCompletedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Master didn't finish containers as expected"
argument_list|,
name|master
operator|.
name|getDone
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|add
argument_list|(
name|generateContainerStatus
argument_list|(
name|id5
argument_list|,
name|ContainerExitStatus
operator|.
name|SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of completed containers"
argument_list|,
name|targetContainers
argument_list|,
name|master
operator|.
name|getNumCompletedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Master didn't finish containers as expected"
argument_list|,
name|master
operator|.
name|getDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|generateContainer (ContainerId cid)
specifier|private
name|Container
name|generateContainer
parameter_list|(
name|ContainerId
name|cid
parameter_list|)
block|{
return|return
name|Container
operator|.
name|newInstance
argument_list|(
name|cid
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|5000
argument_list|)
argument_list|,
literal|"host:80"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|ContainerStatus
DECL|method|generateContainerStatus (ContainerId id, int exitStatus)
name|generateContainerStatus
parameter_list|(
name|ContainerId
name|id
parameter_list|,
name|int
name|exitStatus
parameter_list|)
block|{
return|return
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|id
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
name|exitStatus
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testTimelineClientInDSAppMaster ()
specifier|public
name|void
name|testTimelineClientInDSAppMaster
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationMaster
name|appMaster
init|=
operator|new
name|ApplicationMaster
argument_list|()
decl_stmt|;
name|appMaster
operator|.
name|appSubmitterUgi
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bar"
block|}
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appMaster
operator|.
name|startTimelineClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appMaster
operator|.
name|appSubmitterUgi
argument_list|,
operator|(
operator|(
name|TimelineClientImpl
operator|)
name|appMaster
operator|.
name|timelineClient
operator|)
operator|.
name|getUgi
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

