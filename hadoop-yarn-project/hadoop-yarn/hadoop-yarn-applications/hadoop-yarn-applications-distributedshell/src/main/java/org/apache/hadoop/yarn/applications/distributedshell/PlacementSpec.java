begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.applications.distributedshell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|applications
operator|.
name|distributedshell
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_comment
comment|/**  * Class encapsulating a SourceTag, number of container and a Placement  * Constraint.  */
end_comment

begin_class
DECL|class|PlacementSpec
specifier|public
class|class
name|PlacementSpec
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PlacementSpec
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SPEC_DELIM
specifier|private
specifier|static
specifier|final
name|String
name|SPEC_DELIM
init|=
literal|":"
decl_stmt|;
DECL|field|KV_SPLIT_DELIM
specifier|private
specifier|static
specifier|final
name|String
name|KV_SPLIT_DELIM
init|=
literal|"="
decl_stmt|;
DECL|field|SPEC_VAL_DELIM
specifier|private
specifier|static
specifier|final
name|String
name|SPEC_VAL_DELIM
init|=
literal|","
decl_stmt|;
DECL|field|IN
specifier|private
specifier|static
specifier|final
name|String
name|IN
init|=
literal|"in"
decl_stmt|;
DECL|field|NOT_IN
specifier|private
specifier|static
specifier|final
name|String
name|NOT_IN
init|=
literal|"notin"
decl_stmt|;
DECL|field|CARDINALITY
specifier|private
specifier|static
specifier|final
name|String
name|CARDINALITY
init|=
literal|"cardinality"
decl_stmt|;
DECL|field|sourceTag
specifier|public
specifier|final
name|String
name|sourceTag
decl_stmt|;
DECL|field|numContainers
specifier|public
specifier|final
name|int
name|numContainers
decl_stmt|;
DECL|field|constraint
specifier|public
specifier|final
name|PlacementConstraint
name|constraint
decl_stmt|;
DECL|method|PlacementSpec (String sourceTag, int numContainers, PlacementConstraint constraint)
specifier|public
name|PlacementSpec
parameter_list|(
name|String
name|sourceTag
parameter_list|,
name|int
name|numContainers
parameter_list|,
name|PlacementConstraint
name|constraint
parameter_list|)
block|{
name|this
operator|.
name|sourceTag
operator|=
name|sourceTag
expr_stmt|;
name|this
operator|.
name|numContainers
operator|=
name|numContainers
expr_stmt|;
name|this
operator|.
name|constraint
operator|=
name|constraint
expr_stmt|;
block|}
comment|// Placement specification should be of the form:
comment|// PlacementSpec => ""|KeyVal;PlacementSpec
comment|// KeyVal => SourceTag=Constraint
comment|// SourceTag => String
comment|// Constraint => NumContainers|
comment|//               NumContainers,"in",Scope,TargetTag|
comment|//               NumContainers,"notin",Scope,TargetTag|
comment|//               NumContainers,"cardinality",Scope,TargetTag,MinCard,MaxCard
comment|// NumContainers => int (number of containers)
comment|// Scope => "NODE"|"RACK"
comment|// TargetTag => String (Target Tag)
comment|// MinCard => int (min cardinality - needed if ConstraintType == cardinality)
comment|// MaxCard => int (max cardinality - needed if ConstraintType == cardinality)
comment|/**    * Parser to convert a string representation of a placement spec to mapping    * from source tag to Placement Constraint.    *    * @param specs Placement spec.    * @return Mapping from source tag to placement constraint.    */
DECL|method|parse (String specs)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|PlacementSpec
argument_list|>
name|parse
parameter_list|(
name|String
name|specs
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Parsing Placement Specs: [{}]"
argument_list|,
name|specs
argument_list|)
expr_stmt|;
name|Scanner
name|s
init|=
operator|new
name|Scanner
argument_list|(
name|specs
argument_list|)
operator|.
name|useDelimiter
argument_list|(
name|SPEC_DELIM
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PlacementSpec
argument_list|>
name|pSpecs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|sp
init|=
name|s
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Parsing Spec: [{}]"
argument_list|,
name|sp
argument_list|)
expr_stmt|;
name|String
index|[]
name|specSplit
init|=
name|sp
operator|.
name|split
argument_list|(
name|KV_SPLIT_DELIM
argument_list|)
decl_stmt|;
name|String
name|sourceTag
init|=
name|specSplit
index|[
literal|0
index|]
decl_stmt|;
name|Scanner
name|ps
init|=
operator|new
name|Scanner
argument_list|(
name|specSplit
index|[
literal|1
index|]
argument_list|)
operator|.
name|useDelimiter
argument_list|(
name|SPEC_VAL_DELIM
argument_list|)
decl_stmt|;
name|int
name|numContainers
init|=
name|ps
operator|.
name|nextInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ps
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|pSpecs
operator|.
name|put
argument_list|(
name|sourceTag
argument_list|,
operator|new
name|PlacementSpec
argument_list|(
name|sourceTag
argument_list|,
name|numContainers
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating Spec without constraint {}: num[{}]"
argument_list|,
name|sourceTag
argument_list|,
name|numContainers
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|cType
init|=
name|ps
operator|.
name|next
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|scope
init|=
name|ps
operator|.
name|next
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|targetTag
init|=
name|ps
operator|.
name|next
argument_list|()
decl_stmt|;
name|scope
operator|=
name|scope
operator|.
name|equals
argument_list|(
literal|"rack"
argument_list|)
condition|?
name|PlacementConstraints
operator|.
name|RACK
else|:
name|PlacementConstraints
operator|.
name|NODE
expr_stmt|;
name|PlacementConstraint
name|pc
decl_stmt|;
if|if
condition|(
name|cType
operator|.
name|equals
argument_list|(
name|IN
argument_list|)
condition|)
block|{
name|pc
operator|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|PlacementConstraints
operator|.
name|targetIn
argument_list|(
name|scope
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
argument_list|(
name|targetTag
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating IN Constraint for source tag [{}], num[{}]: "
operator|+
literal|"scope[{}], target[{}]"
argument_list|,
name|sourceTag
argument_list|,
name|numContainers
argument_list|,
name|scope
argument_list|,
name|targetTag
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cType
operator|.
name|equals
argument_list|(
name|NOT_IN
argument_list|)
condition|)
block|{
name|pc
operator|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|scope
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
argument_list|(
name|targetTag
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating NOT_IN Constraint for source tag [{}], num[{}]: "
operator|+
literal|"scope[{}], target[{}]"
argument_list|,
name|sourceTag
argument_list|,
name|numContainers
argument_list|,
name|scope
argument_list|,
name|targetTag
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cType
operator|.
name|equals
argument_list|(
name|CARDINALITY
argument_list|)
condition|)
block|{
name|int
name|minCard
init|=
name|ps
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|int
name|maxCard
init|=
name|ps
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|pc
operator|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|PlacementConstraints
operator|.
name|targetCardinality
argument_list|(
name|scope
argument_list|,
name|minCard
argument_list|,
name|maxCard
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
argument_list|(
name|targetTag
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating CARDINALITY Constraint source tag [{}], num[{}]: "
operator|+
literal|"scope[{}], min[{}], max[{}], target[{}]"
argument_list|,
name|sourceTag
argument_list|,
name|numContainers
argument_list|,
name|scope
argument_list|,
name|minCard
argument_list|,
name|maxCard
argument_list|,
name|targetTag
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not parse constraintType ["
operator|+
name|cType
operator|+
literal|"]"
operator|+
literal|" in ["
operator|+
name|specSplit
index|[
literal|1
index|]
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|pSpecs
operator|.
name|put
argument_list|(
name|sourceTag
argument_list|,
operator|new
name|PlacementSpec
argument_list|(
name|sourceTag
argument_list|,
name|numContainers
argument_list|,
name|pc
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|pSpecs
return|;
block|}
block|}
end_class

end_unit

