begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.applications.distributedshell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|applications
operator|.
name|distributedshell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueUserACLInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|TimelineClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClientApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|util
operator|.
name|YarnClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|timeline
operator|.
name|TimelineUtils
import|;
end_import

begin_comment
comment|/**  * Client for Distributed Shell application submission to YARN.  *   *<p> The distributed shell client allows an application master to be launched that in turn would run   * the provided shell command on a set of containers.</p>  *   *<p>This client is meant to act as an example on how to write yarn-based applications.</p>  *   *<p> To submit an application, a client first needs to connect to the<code>ResourceManager</code>   * aka ApplicationsManager or ASM via the {@link ApplicationClientProtocol}. The {@link ApplicationClientProtocol}   * provides a way for the client to get access to cluster information and to request for a  * new {@link ApplicationId}.<p>  *   *<p> For the actual job submission, the client first has to create an {@link ApplicationSubmissionContext}.   * The {@link ApplicationSubmissionContext} defines the application details such as {@link ApplicationId}   * and application name, the priority assigned to the application and the queue  * to which this application needs to be assigned. In addition to this, the {@link ApplicationSubmissionContext}  * also defines the {@link ContainerLaunchContext} which describes the<code>Container</code> with which   * the {@link ApplicationMaster} is launched.</p>  *   *<p> The {@link ContainerLaunchContext} in this scenario defines the resources to be allocated for the   * {@link ApplicationMaster}'s container, the local resources (jars, configuration files) to be made available   * and the environment to be set for the {@link ApplicationMaster} and the commands to be executed to run the   * {@link ApplicationMaster}.<p>  *   *<p> Using the {@link ApplicationSubmissionContext}, the client submits the application to the   *<code>ResourceManager</code> and then monitors the application by requesting the<code>ResourceManager</code>   * for an {@link ApplicationReport} at regular time intervals. In case of the application taking too long, the client   * kills the application by submitting a {@link KillApplicationRequest} to the<code>ResourceManager</code>.</p>  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|Client
specifier|public
class|class
name|Client
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Client
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Configuration
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|yarnClient
specifier|private
name|YarnClient
name|yarnClient
decl_stmt|;
comment|// Application master specific info to register a new Application with RM/ASM
DECL|field|appName
specifier|private
name|String
name|appName
init|=
literal|""
decl_stmt|;
comment|// App master priority
DECL|field|amPriority
specifier|private
name|int
name|amPriority
init|=
literal|0
decl_stmt|;
comment|// Queue for App master
DECL|field|amQueue
specifier|private
name|String
name|amQueue
init|=
literal|""
decl_stmt|;
comment|// Amt. of memory resource to request for to run the App Master
DECL|field|amMemory
specifier|private
name|long
name|amMemory
init|=
literal|100
decl_stmt|;
comment|// Amt. of virtual core resource to request for to run the App Master
DECL|field|amVCores
specifier|private
name|int
name|amVCores
init|=
literal|1
decl_stmt|;
comment|// Application master jar file
DECL|field|appMasterJar
specifier|private
name|String
name|appMasterJar
init|=
literal|""
decl_stmt|;
comment|// Main class to invoke application master
DECL|field|appMasterMainClass
specifier|private
specifier|final
name|String
name|appMasterMainClass
decl_stmt|;
comment|// Shell command to be executed
DECL|field|shellCommand
specifier|private
name|String
name|shellCommand
init|=
literal|""
decl_stmt|;
comment|// Location of shell script
DECL|field|shellScriptPath
specifier|private
name|String
name|shellScriptPath
init|=
literal|""
decl_stmt|;
comment|// Args to be passed to the shell command
DECL|field|shellArgs
specifier|private
name|String
index|[]
name|shellArgs
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
comment|// Env variables to be setup for the shell command
DECL|field|shellEnv
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|shellEnv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Shell Command Container priority
DECL|field|shellCmdPriority
specifier|private
name|int
name|shellCmdPriority
init|=
literal|0
decl_stmt|;
comment|// Amt of memory to request for container in which shell script will be executed
DECL|field|containerMemory
specifier|private
name|int
name|containerMemory
init|=
literal|10
decl_stmt|;
comment|// Amt. of virtual cores to request for container in which shell script will be executed
DECL|field|containerVirtualCores
specifier|private
name|int
name|containerVirtualCores
init|=
literal|1
decl_stmt|;
comment|// No. of containers in which the shell script needs to be executed
DECL|field|numContainers
specifier|private
name|int
name|numContainers
init|=
literal|1
decl_stmt|;
DECL|field|nodeLabelExpression
specifier|private
name|String
name|nodeLabelExpression
init|=
literal|null
decl_stmt|;
comment|// log4j.properties file
comment|// if available, add to local resources and set into classpath
DECL|field|log4jPropFile
specifier|private
name|String
name|log4jPropFile
init|=
literal|""
decl_stmt|;
comment|// Start time for client
DECL|field|clientStartTime
specifier|private
specifier|final
name|long
name|clientStartTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Timeout threshold for client. Kill app after time interval expires.
DECL|field|clientTimeout
specifier|private
name|long
name|clientTimeout
init|=
literal|600000
decl_stmt|;
comment|// flag to indicate whether to keep containers across application attempts.
DECL|field|keepContainers
specifier|private
name|boolean
name|keepContainers
init|=
literal|false
decl_stmt|;
DECL|field|attemptFailuresValidityInterval
specifier|private
name|long
name|attemptFailuresValidityInterval
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|containerRetryOptions
specifier|private
name|Vector
argument_list|<
name|CharSequence
argument_list|>
name|containerRetryOptions
init|=
operator|new
name|Vector
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
comment|// Debug flag
DECL|field|debugFlag
name|boolean
name|debugFlag
init|=
literal|false
decl_stmt|;
comment|// Timeline domain ID
DECL|field|domainId
specifier|private
name|String
name|domainId
init|=
literal|null
decl_stmt|;
comment|// Flag to indicate whether to create the domain of the given ID
DECL|field|toCreateDomain
specifier|private
name|boolean
name|toCreateDomain
init|=
literal|false
decl_stmt|;
comment|// Timeline domain reader access control
DECL|field|viewACLs
specifier|private
name|String
name|viewACLs
init|=
literal|null
decl_stmt|;
comment|// Timeline domain writer access control
DECL|field|modifyACLs
specifier|private
name|String
name|modifyACLs
init|=
literal|null
decl_stmt|;
DECL|field|flowId
specifier|private
name|String
name|flowId
init|=
literal|null
decl_stmt|;
DECL|field|flowRunId
specifier|private
name|String
name|flowRunId
init|=
literal|null
decl_stmt|;
comment|// Command line options
DECL|field|opts
specifier|private
name|Options
name|opts
decl_stmt|;
DECL|field|timelineServiceVersion
specifier|private
name|String
name|timelineServiceVersion
decl_stmt|;
DECL|field|shellCommandPath
specifier|private
specifier|static
specifier|final
name|String
name|shellCommandPath
init|=
literal|"shellCommands"
decl_stmt|;
DECL|field|shellArgsPath
specifier|private
specifier|static
specifier|final
name|String
name|shellArgsPath
init|=
literal|"shellArgs"
decl_stmt|;
DECL|field|appMasterJarPath
specifier|private
specifier|static
specifier|final
name|String
name|appMasterJarPath
init|=
literal|"AppMaster.jar"
decl_stmt|;
comment|// Hardcoded path to custom log_properties
DECL|field|log4jPath
specifier|private
specifier|static
specifier|final
name|String
name|log4jPath
init|=
literal|"log4j.properties"
decl_stmt|;
DECL|field|SCRIPT_PATH
specifier|public
specifier|static
specifier|final
name|String
name|SCRIPT_PATH
init|=
literal|"ExecScript"
decl_stmt|;
comment|/**    * @param args Command line arguments     */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Client
name|client
init|=
operator|new
name|Client
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing Client"
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|doRun
init|=
name|client
operator|.
name|init
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|doRun
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|client
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Error running Client"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application completed successfully"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Application failed to complete successfully"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    */
DECL|method|Client (Configuration conf)
specifier|public
name|Client
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
literal|"org.apache.hadoop.yarn.applications.distributedshell.ApplicationMaster"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|Client (String appMasterMainClass, Configuration conf)
name|Client
parameter_list|(
name|String
name|appMasterMainClass
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|appMasterMainClass
operator|=
name|appMasterMainClass
expr_stmt|;
name|yarnClient
operator|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
expr_stmt|;
name|yarnClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|opts
operator|=
operator|new
name|Options
argument_list|()
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"appname"
argument_list|,
literal|true
argument_list|,
literal|"Application Name. Default value - DistributedShell"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"priority"
argument_list|,
literal|true
argument_list|,
literal|"Application Priority. Default 0"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"queue"
argument_list|,
literal|true
argument_list|,
literal|"RM Queue in which this application is to be submitted"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"timeout"
argument_list|,
literal|true
argument_list|,
literal|"Application timeout in milliseconds"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"master_memory"
argument_list|,
literal|true
argument_list|,
literal|"Amount of memory in MB to be requested to run the application master"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"master_vcores"
argument_list|,
literal|true
argument_list|,
literal|"Amount of virtual cores to be requested to run the application master"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"jar"
argument_list|,
literal|true
argument_list|,
literal|"Jar file containing the application master"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"shell_command"
argument_list|,
literal|true
argument_list|,
literal|"Shell command to be executed by "
operator|+
literal|"the Application Master. Can only specify either --shell_command "
operator|+
literal|"or --shell_script"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"shell_script"
argument_list|,
literal|true
argument_list|,
literal|"Location of the shell script to be "
operator|+
literal|"executed. Can only specify either --shell_command or --shell_script"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"shell_args"
argument_list|,
literal|true
argument_list|,
literal|"Command line args for the shell script."
operator|+
literal|"Multiple args can be separated by empty space."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|getOption
argument_list|(
literal|"shell_args"
argument_list|)
operator|.
name|setArgs
argument_list|(
name|Option
operator|.
name|UNLIMITED_VALUES
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"shell_env"
argument_list|,
literal|true
argument_list|,
literal|"Environment for shell script. Specified as env_key=env_val pairs"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"shell_cmd_priority"
argument_list|,
literal|true
argument_list|,
literal|"Priority for the shell command containers"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"container_memory"
argument_list|,
literal|true
argument_list|,
literal|"Amount of memory in MB to be requested to run the shell command"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"container_vcores"
argument_list|,
literal|true
argument_list|,
literal|"Amount of virtual cores to be requested to run the shell command"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"num_containers"
argument_list|,
literal|true
argument_list|,
literal|"No. of containers on which the shell command needs to be executed"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"log_properties"
argument_list|,
literal|true
argument_list|,
literal|"log4j.properties file"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"timeline_service_version"
argument_list|,
literal|true
argument_list|,
literal|"Version for timeline service"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"keep_containers_across_application_attempts"
argument_list|,
literal|false
argument_list|,
literal|"Flag to indicate whether to keep containers across application attempts."
operator|+
literal|" If the flag is true, running containers will not be killed when"
operator|+
literal|" application attempt fails and these containers will be retrieved by"
operator|+
literal|" the new application attempt "
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"attempt_failures_validity_interval"
argument_list|,
literal|true
argument_list|,
literal|"when attempt_failures_validity_interval in milliseconds is set to> 0,"
operator|+
literal|"the failure number will not take failures which happen out of "
operator|+
literal|"the validityInterval into failure count. "
operator|+
literal|"If failure count reaches to maxAppAttempts, "
operator|+
literal|"the application will be failed."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"debug"
argument_list|,
literal|false
argument_list|,
literal|"Dump out debug information"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"domain"
argument_list|,
literal|true
argument_list|,
literal|"ID of the timeline domain where the "
operator|+
literal|"timeline entities will be put"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"view_acls"
argument_list|,
literal|true
argument_list|,
literal|"Users and groups that allowed to "
operator|+
literal|"view the timeline entities in the given domain"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"modify_acls"
argument_list|,
literal|true
argument_list|,
literal|"Users and groups that allowed to "
operator|+
literal|"modify the timeline entities in the given domain"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"create"
argument_list|,
literal|false
argument_list|,
literal|"Flag to indicate whether to create the "
operator|+
literal|"domain specified with -domain."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"flow"
argument_list|,
literal|true
argument_list|,
literal|"ID of the flow which the distributed shell "
operator|+
literal|"app belongs to"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"flow_run"
argument_list|,
literal|true
argument_list|,
literal|"ID of the flowrun which the distributed "
operator|+
literal|"shell app belongs to"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Print usage"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"node_label_expression"
argument_list|,
literal|true
argument_list|,
literal|"Node label expression to determine the nodes"
operator|+
literal|" where all the containers of this application"
operator|+
literal|" will be allocated, \"\" means containers"
operator|+
literal|" can be allocated anywhere, if you don't specify the option,"
operator|+
literal|" default node_label_expression of queue will be used."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"container_retry_policy"
argument_list|,
literal|true
argument_list|,
literal|"Retry policy when container fails to run, "
operator|+
literal|"0: NEVER_RETRY, 1: RETRY_ON_ALL_ERRORS, "
operator|+
literal|"2: RETRY_ON_SPECIFIC_ERROR_CODES"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"container_retry_error_codes"
argument_list|,
literal|true
argument_list|,
literal|"When retry policy is set to RETRY_ON_SPECIFIC_ERROR_CODES, error "
operator|+
literal|"codes is specified with this option, "
operator|+
literal|"e.g. --container_retry_error_codes 1,2,3"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"container_max_retries"
argument_list|,
literal|true
argument_list|,
literal|"If container could retry, it specifies max retires"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"container_retry_interval"
argument_list|,
literal|true
argument_list|,
literal|"Interval between each retry, unit is milliseconds"
argument_list|)
expr_stmt|;
block|}
comment|/**    */
DECL|method|Client ()
specifier|public
name|Client
parameter_list|()
throws|throws
name|Exception
block|{
name|this
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper function to print out usage    */
DECL|method|printUsage ()
specifier|private
name|void
name|printUsage
parameter_list|()
block|{
operator|new
name|HelpFormatter
argument_list|()
operator|.
name|printHelp
argument_list|(
literal|"Client"
argument_list|,
name|opts
argument_list|)
expr_stmt|;
block|}
comment|/**    * Parse command line options    * @param args Parsed command line options     * @return Whether the init was successful to run the client    * @throws ParseException    */
DECL|method|init (String[] args)
specifier|public
name|boolean
name|init
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
block|{
name|CommandLine
name|cliParser
init|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No args specified for client to initialize"
argument_list|)
throw|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"log_properties"
argument_list|)
condition|)
block|{
name|String
name|log4jPath
init|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"log_properties"
argument_list|)
decl_stmt|;
try|try
block|{
name|Log4jPropertyHelper
operator|.
name|updateLog4jConfiguration
argument_list|(
name|Client
operator|.
name|class
argument_list|,
name|log4jPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not set up custom log4j properties. "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"help"
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"debug"
argument_list|)
condition|)
block|{
name|debugFlag
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"keep_containers_across_application_attempts"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"keep_containers_across_application_attempts"
argument_list|)
expr_stmt|;
name|keepContainers
operator|=
literal|true
expr_stmt|;
block|}
name|appName
operator|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"appname"
argument_list|,
literal|"DistributedShell"
argument_list|)
expr_stmt|;
name|amPriority
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"priority"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|amQueue
operator|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"queue"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|amMemory
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"master_memory"
argument_list|,
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|amVCores
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"master_vcores"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|amMemory
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid memory specified for application master, exiting."
operator|+
literal|" Specified memory="
operator|+
name|amMemory
argument_list|)
throw|;
block|}
if|if
condition|(
name|amVCores
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid virtual cores specified for application master, exiting."
operator|+
literal|" Specified virtual cores="
operator|+
name|amVCores
argument_list|)
throw|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"timeline_service_version"
argument_list|)
condition|)
block|{
name|timelineServiceVersion
operator|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"timeline_service_version"
argument_list|,
literal|"v1"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|timelineServiceVersion
operator|.
name|trim
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"v1"
argument_list|)
operator|||
name|timelineServiceVersion
operator|.
name|trim
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"v2"
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"timeline_service_version is not set properly, should be 'v1' or 'v2'"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"jar"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No jar file specified for application master"
argument_list|)
throw|;
block|}
name|appMasterJar
operator|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"jar"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"shell_command"
argument_list|)
operator|&&
operator|!
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"shell_script"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No shell command or shell script specified to be executed by application master"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"shell_command"
argument_list|)
operator|&&
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"shell_script"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can not specify shell_command option "
operator|+
literal|"and shell_script option at the same time"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"shell_command"
argument_list|)
condition|)
block|{
name|shellCommand
operator|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"shell_command"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shellScriptPath
operator|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"shell_script"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"shell_args"
argument_list|)
condition|)
block|{
name|shellArgs
operator|=
name|cliParser
operator|.
name|getOptionValues
argument_list|(
literal|"shell_args"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"shell_env"
argument_list|)
condition|)
block|{
name|String
name|envs
index|[]
init|=
name|cliParser
operator|.
name|getOptionValues
argument_list|(
literal|"shell_env"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|env
range|:
name|envs
control|)
block|{
name|env
operator|=
name|env
operator|.
name|trim
argument_list|()
expr_stmt|;
name|int
name|index
init|=
name|env
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|shellEnv
operator|.
name|put
argument_list|(
name|env
argument_list|,
literal|""
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|key
init|=
name|env
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|String
name|val
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|index
operator|<
operator|(
name|env
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
name|val
operator|=
name|env
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|shellEnv
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
name|shellCmdPriority
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"shell_cmd_priority"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|containerMemory
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"container_memory"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|containerVirtualCores
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"container_vcores"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|numContainers
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"num_containers"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|containerMemory
operator|<
literal|0
operator|||
name|containerVirtualCores
operator|<
literal|0
operator|||
name|numContainers
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid no. of containers or container memory/vcores specified,"
operator|+
literal|" exiting."
operator|+
literal|" Specified containerMemory="
operator|+
name|containerMemory
operator|+
literal|", containerVirtualCores="
operator|+
name|containerVirtualCores
operator|+
literal|", numContainer="
operator|+
name|numContainers
argument_list|)
throw|;
block|}
name|nodeLabelExpression
operator|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"node_label_expression"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|clientTimeout
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"timeout"
argument_list|,
literal|"600000"
argument_list|)
argument_list|)
expr_stmt|;
name|attemptFailuresValidityInterval
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"attempt_failures_validity_interval"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|log4jPropFile
operator|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"log_properties"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// Get timeline domain options
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"domain"
argument_list|)
condition|)
block|{
name|domainId
operator|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"domain"
argument_list|)
expr_stmt|;
name|toCreateDomain
operator|=
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"create"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"view_acls"
argument_list|)
condition|)
block|{
name|viewACLs
operator|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"view_acls"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"modify_acls"
argument_list|)
condition|)
block|{
name|modifyACLs
operator|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"modify_acls"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Get container retry options
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"container_retry_policy"
argument_list|)
condition|)
block|{
name|containerRetryOptions
operator|.
name|add
argument_list|(
literal|"--container_retry_policy "
operator|+
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"container_retry_policy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"container_retry_error_codes"
argument_list|)
condition|)
block|{
name|containerRetryOptions
operator|.
name|add
argument_list|(
literal|"--container_retry_error_codes "
operator|+
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"container_retry_error_codes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"container_max_retries"
argument_list|)
condition|)
block|{
name|containerRetryOptions
operator|.
name|add
argument_list|(
literal|"--container_max_retries "
operator|+
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"container_max_retries"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"container_retry_interval"
argument_list|)
condition|)
block|{
name|containerRetryOptions
operator|.
name|add
argument_list|(
literal|"--container_retry_interval "
operator|+
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"container_retry_interval"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"flow"
argument_list|)
condition|)
block|{
name|flowId
operator|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"flow"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"flow_run"
argument_list|)
condition|)
block|{
name|flowRunId
operator|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"flow_run"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Main run function for the client    * @return true if application completed successfully    * @throws IOException    * @throws YarnException    */
DECL|method|run ()
specifier|public
name|boolean
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running Client"
argument_list|)
expr_stmt|;
name|yarnClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|YarnClusterMetrics
name|clusterMetrics
init|=
name|yarnClient
operator|.
name|getYarnClusterMetrics
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got Cluster metric info from ASM"
operator|+
literal|", numNodeManagers="
operator|+
name|clusterMetrics
operator|.
name|getNumNodeManagers
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeReport
argument_list|>
name|clusterNodeReports
init|=
name|yarnClient
operator|.
name|getNodeReports
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got Cluster node info from ASM"
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeReport
name|node
range|:
name|clusterNodeReports
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got node report from ASM for"
operator|+
literal|", nodeId="
operator|+
name|node
operator|.
name|getNodeId
argument_list|()
operator|+
literal|", nodeAddress="
operator|+
name|node
operator|.
name|getHttpAddress
argument_list|()
operator|+
literal|", nodeRackName="
operator|+
name|node
operator|.
name|getRackName
argument_list|()
operator|+
literal|", nodeNumContainers="
operator|+
name|node
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QueueInfo
name|queueInfo
init|=
name|yarnClient
operator|.
name|getQueueInfo
argument_list|(
name|this
operator|.
name|amQueue
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Queue info"
operator|+
literal|", queueName="
operator|+
name|queueInfo
operator|.
name|getQueueName
argument_list|()
operator|+
literal|", queueCurrentCapacity="
operator|+
name|queueInfo
operator|.
name|getCurrentCapacity
argument_list|()
operator|+
literal|", queueMaxCapacity="
operator|+
name|queueInfo
operator|.
name|getMaximumCapacity
argument_list|()
operator|+
literal|", queueApplicationCount="
operator|+
name|queueInfo
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|", queueChildQueueCount="
operator|+
name|queueInfo
operator|.
name|getChildQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
name|listAclInfo
init|=
name|yarnClient
operator|.
name|getQueueAclsInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|QueueUserACLInfo
name|aclInfo
range|:
name|listAclInfo
control|)
block|{
for|for
control|(
name|QueueACL
name|userAcl
range|:
name|aclInfo
operator|.
name|getUserAcls
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"User ACL Info for Queue"
operator|+
literal|", queueName="
operator|+
name|aclInfo
operator|.
name|getQueueName
argument_list|()
operator|+
literal|", userAcl="
operator|+
name|userAcl
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|domainId
operator|!=
literal|null
operator|&&
name|domainId
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|toCreateDomain
condition|)
block|{
name|prepareTimelineDomain
argument_list|()
expr_stmt|;
block|}
comment|// Get a new application id
name|YarnClientApplication
name|app
init|=
name|yarnClient
operator|.
name|createApplication
argument_list|()
decl_stmt|;
name|GetNewApplicationResponse
name|appResponse
init|=
name|app
operator|.
name|getNewApplicationResponse
argument_list|()
decl_stmt|;
comment|// TODO get min/max resource capabilities from RM and change memory ask if needed
comment|// If we do not have min/max, we may not be able to correctly request
comment|// the required resources from the RM for the app master
comment|// Memory ask has to be a multiple of min and less than max.
comment|// Dump out information about cluster capability as seen by the resource manager
name|long
name|maxMem
init|=
name|appResponse
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Max mem capability of resources in this cluster "
operator|+
name|maxMem
argument_list|)
expr_stmt|;
comment|// A resource ask cannot exceed the max.
if|if
condition|(
name|amMemory
operator|>
name|maxMem
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"AM memory specified above max threshold of cluster. Using max value."
operator|+
literal|", specified="
operator|+
name|amMemory
operator|+
literal|", max="
operator|+
name|maxMem
argument_list|)
expr_stmt|;
name|amMemory
operator|=
name|maxMem
expr_stmt|;
block|}
name|int
name|maxVCores
init|=
name|appResponse
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Max virtual cores capability of resources in this cluster "
operator|+
name|maxVCores
argument_list|)
expr_stmt|;
if|if
condition|(
name|amVCores
operator|>
name|maxVCores
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"AM virtual cores specified above max threshold of cluster. "
operator|+
literal|"Using max value."
operator|+
literal|", specified="
operator|+
name|amVCores
operator|+
literal|", max="
operator|+
name|maxVCores
argument_list|)
expr_stmt|;
name|amVCores
operator|=
name|maxVCores
expr_stmt|;
block|}
comment|// set the application name
name|ApplicationSubmissionContext
name|appContext
init|=
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|appContext
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|appContext
operator|.
name|setKeepContainersAcrossApplicationAttempts
argument_list|(
name|keepContainers
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setApplicationName
argument_list|(
name|appName
argument_list|)
expr_stmt|;
if|if
condition|(
name|attemptFailuresValidityInterval
operator|>=
literal|0
condition|)
block|{
name|appContext
operator|.
name|setAttemptFailuresValidityInterval
argument_list|(
name|attemptFailuresValidityInterval
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|tags
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|flowId
operator|!=
literal|null
condition|)
block|{
name|tags
operator|.
name|add
argument_list|(
name|TimelineUtils
operator|.
name|generateFlowIdTag
argument_list|(
name|flowId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flowRunId
operator|!=
literal|null
condition|)
block|{
name|tags
operator|.
name|add
argument_list|(
name|TimelineUtils
operator|.
name|generateFlowRunIdTag
argument_list|(
name|flowRunId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|appContext
operator|.
name|setApplicationTags
argument_list|(
name|tags
argument_list|)
expr_stmt|;
comment|// set local resources for the application master
comment|// local files or archives as needed
comment|// In this scenario, the jar file for the application master is part of the local resources
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Copy App Master jar from local filesystem and add to local environment"
argument_list|)
expr_stmt|;
comment|// Copy the application master jar to the filesystem
comment|// Create a local resource to point to the destination jar path
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|addToLocalResources
argument_list|(
name|fs
argument_list|,
name|appMasterJar
argument_list|,
name|appMasterJarPath
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|localResources
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Set the log4j properties if needed
if|if
condition|(
operator|!
name|log4jPropFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addToLocalResources
argument_list|(
name|fs
argument_list|,
name|log4jPropFile
argument_list|,
name|log4jPath
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|localResources
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// The shell script has to be made available on the final container(s)
comment|// where it will be executed.
comment|// To do this, we need to first copy into the filesystem that is visible
comment|// to the yarn framework.
comment|// We do not need to set this as a local resource for the application
comment|// master as the application master does not need it.
name|String
name|hdfsShellScriptLocation
init|=
literal|""
decl_stmt|;
name|long
name|hdfsShellScriptLen
init|=
literal|0
decl_stmt|;
name|long
name|hdfsShellScriptTimestamp
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|shellScriptPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Path
name|shellSrc
init|=
operator|new
name|Path
argument_list|(
name|shellScriptPath
argument_list|)
decl_stmt|;
name|String
name|shellPathSuffix
init|=
name|appName
operator|+
literal|"/"
operator|+
name|appId
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|SCRIPT_PATH
decl_stmt|;
name|Path
name|shellDst
init|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|,
name|shellPathSuffix
argument_list|)
decl_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|shellSrc
argument_list|,
name|shellDst
argument_list|)
expr_stmt|;
name|hdfsShellScriptLocation
operator|=
name|shellDst
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|FileStatus
name|shellFileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|shellDst
argument_list|)
decl_stmt|;
name|hdfsShellScriptLen
operator|=
name|shellFileStatus
operator|.
name|getLen
argument_list|()
expr_stmt|;
name|hdfsShellScriptTimestamp
operator|=
name|shellFileStatus
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|shellCommand
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addToLocalResources
argument_list|(
name|fs
argument_list|,
literal|null
argument_list|,
name|shellCommandPath
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|localResources
argument_list|,
name|shellCommand
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shellArgs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|addToLocalResources
argument_list|(
name|fs
argument_list|,
literal|null
argument_list|,
name|shellArgsPath
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|localResources
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|shellArgs
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Set the necessary security tokens as needed
comment|//amContainer.setContainerTokens(containerToken);
comment|// Set the env variables to be setup in the env where the application master will be run
name|LOG
operator|.
name|info
argument_list|(
literal|"Set the environment for the application master"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// put location of shell script into env
comment|// using the env info, the application master will create the correct local resource for the
comment|// eventual containers that will be launched to execute the shell scripts
name|env
operator|.
name|put
argument_list|(
name|DSConstants
operator|.
name|DISTRIBUTEDSHELLSCRIPTLOCATION
argument_list|,
name|hdfsShellScriptLocation
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DSConstants
operator|.
name|DISTRIBUTEDSHELLSCRIPTTIMESTAMP
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|hdfsShellScriptTimestamp
argument_list|)
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DSConstants
operator|.
name|DISTRIBUTEDSHELLSCRIPTLEN
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|hdfsShellScriptLen
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|domainId
operator|!=
literal|null
operator|&&
name|domainId
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|env
operator|.
name|put
argument_list|(
name|DSConstants
operator|.
name|DISTRIBUTEDSHELLTIMELINEDOMAIN
argument_list|,
name|domainId
argument_list|)
expr_stmt|;
block|}
comment|// Add AppMaster.jar location to classpath
comment|// At some point we should not be required to add
comment|// the hadoop specific classpaths to the env.
comment|// It should be provided out of the box.
comment|// For now setting all required classpaths including
comment|// the classpath to "." for the application jar
name|StringBuilder
name|classPathEnv
init|=
operator|new
name|StringBuilder
argument_list|(
name|Environment
operator|.
name|CLASSPATH
operator|.
name|$$
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
literal|"./*"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|conf
operator|.
name|getStrings
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_APPLICATION_CLASSPATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH
argument_list|)
control|)
block|{
name|classPathEnv
operator|.
name|append
argument_list|(
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
argument_list|)
expr_stmt|;
name|classPathEnv
operator|.
name|append
argument_list|(
name|c
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|classPathEnv
operator|.
name|append
argument_list|(
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
literal|"./log4j.properties"
argument_list|)
expr_stmt|;
comment|// add the runtime classpath needed for tests to work
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|IS_MINI_YARN_CLUSTER
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|classPathEnv
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|classPathEnv
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|env
operator|.
name|put
argument_list|(
literal|"CLASSPATH"
argument_list|,
name|classPathEnv
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set the necessary command to execute the application master
name|Vector
argument_list|<
name|CharSequence
argument_list|>
name|vargs
init|=
operator|new
name|Vector
argument_list|<
name|CharSequence
argument_list|>
argument_list|(
literal|30
argument_list|)
decl_stmt|;
comment|// Set java executable command
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting up app master command"
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
name|Environment
operator|.
name|JAVA_HOME
operator|.
name|$$
argument_list|()
operator|+
literal|"/bin/java"
argument_list|)
expr_stmt|;
comment|// Set Xmx based on am memory size
name|vargs
operator|.
name|add
argument_list|(
literal|"-Xmx"
operator|+
name|amMemory
operator|+
literal|"m"
argument_list|)
expr_stmt|;
comment|// Set class name
name|vargs
operator|.
name|add
argument_list|(
name|appMasterMainClass
argument_list|)
expr_stmt|;
comment|// Set params for Application Master
name|vargs
operator|.
name|add
argument_list|(
literal|"--container_memory "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|containerMemory
argument_list|)
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"--container_vcores "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|containerVirtualCores
argument_list|)
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"--num_containers "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|numContainers
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|nodeLabelExpression
condition|)
block|{
name|appContext
operator|.
name|setNodeLabelExpression
argument_list|(
name|nodeLabelExpression
argument_list|)
expr_stmt|;
block|}
name|vargs
operator|.
name|add
argument_list|(
literal|"--priority "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|shellCmdPriority
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|shellEnv
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|vargs
operator|.
name|add
argument_list|(
literal|"--shell_env "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|debugFlag
condition|)
block|{
name|vargs
operator|.
name|add
argument_list|(
literal|"--debug"
argument_list|)
expr_stmt|;
block|}
name|vargs
operator|.
name|addAll
argument_list|(
name|containerRetryOptions
argument_list|)
expr_stmt|;
if|if
condition|(
name|timelineServiceVersion
operator|!=
literal|null
condition|)
block|{
name|vargs
operator|.
name|add
argument_list|(
literal|"--timeline_service_version "
operator|+
name|timelineServiceVersion
argument_list|)
expr_stmt|;
block|}
name|vargs
operator|.
name|add
argument_list|(
literal|"1>"
operator|+
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
operator|+
literal|"/AppMaster.stdout"
argument_list|)
expr_stmt|;
name|vargs
operator|.
name|add
argument_list|(
literal|"2>"
operator|+
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
operator|+
literal|"/AppMaster.stderr"
argument_list|)
expr_stmt|;
comment|// Get final commmand
name|StringBuilder
name|command
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|CharSequence
name|str
range|:
name|vargs
control|)
block|{
name|command
operator|.
name|append
argument_list|(
name|str
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed setting up app master command "
operator|+
name|command
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|commands
operator|.
name|add
argument_list|(
name|command
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set up the container launch context for the application master
name|ContainerLaunchContext
name|amContainer
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
name|localResources
argument_list|,
name|env
argument_list|,
name|commands
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Set up resource type requirements
comment|// For now, both memory and vcores are supported, so we set memory and
comment|// vcores requirements
name|Resource
name|capability
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|amMemory
argument_list|,
name|amVCores
argument_list|)
decl_stmt|;
name|appContext
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
comment|// Service data is a binary blob that can be passed to the application
comment|// Not needed in this scenario
comment|// amContainer.setServiceData(serviceData);
comment|// Setup security tokens
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
comment|// Note: Credentials class is marked as LimitedPrivate for HDFS and MapReduce
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|String
name|tokenRenewer
init|=
name|YarnClientUtils
operator|.
name|getRmPrincipal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenRenewer
operator|==
literal|null
operator|||
name|tokenRenewer
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't get Master Kerberos principal for the RM to use as renewer"
argument_list|)
throw|;
block|}
comment|// For now, only getting tokens for the default file-system.
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|tokens
index|[]
init|=
name|fs
operator|.
name|addDelegationTokens
argument_list|(
name|tokenRenewer
argument_list|,
name|credentials
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
range|:
name|tokens
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got dt for "
operator|+
name|fs
operator|.
name|getUri
argument_list|()
operator|+
literal|"; "
operator|+
name|token
argument_list|)
expr_stmt|;
block|}
block|}
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|credentials
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ByteBuffer
name|fsTokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|amContainer
operator|.
name|setTokens
argument_list|(
name|fsTokens
argument_list|)
expr_stmt|;
block|}
name|appContext
operator|.
name|setAMContainerSpec
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
comment|// Set the priority for the application master
comment|// TODO - what is the range for priority? how to decide?
name|Priority
name|pri
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
name|amPriority
argument_list|)
decl_stmt|;
name|appContext
operator|.
name|setPriority
argument_list|(
name|pri
argument_list|)
expr_stmt|;
comment|// Set the queue to which this application is to be submitted in the RM
name|appContext
operator|.
name|setQueue
argument_list|(
name|amQueue
argument_list|)
expr_stmt|;
comment|// Submit the application to the applications manager
comment|// SubmitApplicationResponse submitResp = applicationsManager.submitApplication(appRequest);
comment|// Ignore the response as either a valid response object is returned on success
comment|// or an exception thrown to denote some form of a failure
name|LOG
operator|.
name|info
argument_list|(
literal|"Submitting application to ASM"
argument_list|)
expr_stmt|;
name|yarnClient
operator|.
name|submitApplication
argument_list|(
name|appContext
argument_list|)
expr_stmt|;
comment|// TODO
comment|// Try submitting the same request again
comment|// app submission failure?
comment|// Monitor the application
return|return
name|monitorApplication
argument_list|(
name|appId
argument_list|)
return|;
block|}
comment|/**    * Monitor the submitted application for completion.     * Kill application if time expires.     * @param appId Application Id of application to be monitored    * @return true if application completed successfully    * @throws YarnException    * @throws IOException    */
DECL|method|monitorApplication (ApplicationId appId)
specifier|private
name|boolean
name|monitorApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
comment|// Check app status every 1 second.
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Thread sleep in monitoring loop interrupted"
argument_list|)
expr_stmt|;
block|}
comment|// Get application report for the appId we are interested in
name|ApplicationReport
name|report
init|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got application report from ASM for"
operator|+
literal|", appId="
operator|+
name|appId
operator|.
name|getId
argument_list|()
operator|+
literal|", clientToAMToken="
operator|+
name|report
operator|.
name|getClientToAMToken
argument_list|()
operator|+
literal|", appDiagnostics="
operator|+
name|report
operator|.
name|getDiagnostics
argument_list|()
operator|+
literal|", appMasterHost="
operator|+
name|report
operator|.
name|getHost
argument_list|()
operator|+
literal|", appQueue="
operator|+
name|report
operator|.
name|getQueue
argument_list|()
operator|+
literal|", appMasterRpcPort="
operator|+
name|report
operator|.
name|getRpcPort
argument_list|()
operator|+
literal|", appStartTime="
operator|+
name|report
operator|.
name|getStartTime
argument_list|()
operator|+
literal|", yarnAppState="
operator|+
name|report
operator|.
name|getYarnApplicationState
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|", distributedFinalState="
operator|+
name|report
operator|.
name|getFinalApplicationStatus
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|", appTrackingUrl="
operator|+
name|report
operator|.
name|getTrackingUrl
argument_list|()
operator|+
literal|", appUser="
operator|+
name|report
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|YarnApplicationState
name|state
init|=
name|report
operator|.
name|getYarnApplicationState
argument_list|()
decl_stmt|;
name|FinalApplicationStatus
name|dsStatus
init|=
name|report
operator|.
name|getFinalApplicationStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|YarnApplicationState
operator|.
name|FINISHED
operator|==
name|state
condition|)
block|{
if|if
condition|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
operator|==
name|dsStatus
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application has completed successfully. Breaking monitoring loop"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application did finished unsuccessfully."
operator|+
literal|" YarnState="
operator|+
name|state
operator|.
name|toString
argument_list|()
operator|+
literal|", DSFinalStatus="
operator|+
name|dsStatus
operator|.
name|toString
argument_list|()
operator|+
literal|". Breaking monitoring loop"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|YarnApplicationState
operator|.
name|KILLED
operator|==
name|state
operator|||
name|YarnApplicationState
operator|.
name|FAILED
operator|==
name|state
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application did not finish."
operator|+
literal|" YarnState="
operator|+
name|state
operator|.
name|toString
argument_list|()
operator|+
literal|", DSFinalStatus="
operator|+
name|dsStatus
operator|.
name|toString
argument_list|()
operator|+
literal|". Breaking monitoring loop"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
operator|(
name|clientStartTime
operator|+
name|clientTimeout
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reached client specified timeout for application. Killing application"
argument_list|)
expr_stmt|;
name|forceKillApplication
argument_list|(
name|appId
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
comment|/**    * Kill a submitted application by sending a call to the ASM    * @param appId Application Id to be killed.     * @throws YarnException    * @throws IOException    */
DECL|method|forceKillApplication (ApplicationId appId)
specifier|private
name|void
name|forceKillApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// TODO clarify whether multiple jobs with the same app id can be submitted and be running at
comment|// the same time.
comment|// If yes, can we kill a particular attempt only?
comment|// Response can be ignored as it is non-null on success or
comment|// throws an exception in case of failures
name|yarnClient
operator|.
name|killApplication
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
DECL|method|addToLocalResources (FileSystem fs, String fileSrcPath, String fileDstPath, String appId, Map<String, LocalResource> localResources, String resources)
specifier|private
name|void
name|addToLocalResources
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|fileSrcPath
parameter_list|,
name|String
name|fileDstPath
parameter_list|,
name|String
name|appId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
parameter_list|,
name|String
name|resources
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|suffix
init|=
name|appName
operator|+
literal|"/"
operator|+
name|appId
operator|+
literal|"/"
operator|+
name|fileDstPath
decl_stmt|;
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileSrcPath
operator|==
literal|null
condition|)
block|{
name|FSDataOutputStream
name|ostream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ostream
operator|=
name|FileSystem
operator|.
name|create
argument_list|(
name|fs
argument_list|,
name|dst
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0710
argument_list|)
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeUTF
argument_list|(
name|resources
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|ostream
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|fileSrcPath
argument_list|)
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
name|FileStatus
name|scFileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dst
argument_list|)
decl_stmt|;
name|LocalResource
name|scRsrc
init|=
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromURI
argument_list|(
name|dst
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
name|scFileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|scFileStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|fileDstPath
argument_list|,
name|scRsrc
argument_list|)
expr_stmt|;
block|}
DECL|method|prepareTimelineDomain ()
specifier|private
name|void
name|prepareTimelineDomain
parameter_list|()
block|{
name|TimelineClient
name|timelineClient
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_ENABLED
argument_list|)
condition|)
block|{
name|timelineClient
operator|=
name|TimelineClient
operator|.
name|createTimelineClient
argument_list|()
expr_stmt|;
name|timelineClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|timelineClient
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot put the domain "
operator|+
name|domainId
operator|+
literal|" because the timeline service is not enabled"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
comment|//TODO: we need to check and combine the existing timeline domain ACLs,
comment|//but let's do it once we have client java library to query domains.
name|TimelineDomain
name|domain
init|=
operator|new
name|TimelineDomain
argument_list|()
decl_stmt|;
name|domain
operator|.
name|setId
argument_list|(
name|domainId
argument_list|)
expr_stmt|;
name|domain
operator|.
name|setReaders
argument_list|(
name|viewACLs
operator|!=
literal|null
operator|&&
name|viewACLs
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|viewACLs
else|:
literal|" "
argument_list|)
expr_stmt|;
name|domain
operator|.
name|setWriters
argument_list|(
name|modifyACLs
operator|!=
literal|null
operator|&&
name|modifyACLs
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|modifyACLs
else|:
literal|" "
argument_list|)
expr_stmt|;
name|timelineClient
operator|.
name|putDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Put the timeline domain: "
operator|+
name|TimelineUtils
operator|.
name|dumpTimelineRecordtoJSON
argument_list|(
name|domain
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when putting the timeline domain"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|timelineClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

