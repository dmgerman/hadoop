begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.actions
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|actions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|workflow
operator|.
name|ServiceThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|workflow
operator|.
name|WorkflowExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * The Queue service provides immediate and scheduled queues, as well  * as an executor thread that moves queued actions from the scheduled  * queue to the immediate one.  *   *<p>  * This code to be revisited to see if all that was needed is the single scheduled  * queue, implicitly making actions immediate by giving them an execution  * time of "now". It would force having a sequence number to all actions, one   * which the queue would have to set from its (monotonic, thread-safe) counter  * on every submission, with a modified comparison operator. This would guarantee  * that earlier submissions were picked before later ones.  */
end_comment

begin_class
DECL|class|QueueService
specifier|public
class|class
name|QueueService
extends|extends
name|WorkflowExecutorService
argument_list|<
name|ExecutorService
argument_list|>
implements|implements
name|Runnable
implements|,
name|QueueAccess
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueueService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"Action Queue"
decl_stmt|;
DECL|field|completed
specifier|private
specifier|final
name|AtomicBoolean
name|completed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/**    * Immediate actions.    */
DECL|field|actionQueue
specifier|public
specifier|final
name|BlockingDeque
argument_list|<
name|AsyncAction
argument_list|>
name|actionQueue
init|=
operator|new
name|LinkedBlockingDeque
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Actions to be scheduled in the future    */
DECL|field|scheduledActions
specifier|public
specifier|final
name|DelayQueue
argument_list|<
name|AsyncAction
argument_list|>
name|scheduledActions
init|=
operator|new
name|DelayQueue
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Map of renewing actions by name ... this is to allow them to     * be cancelled by name    */
DECL|field|renewingActions
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RenewingAction
argument_list|<
name|?
extends|extends
name|AsyncAction
argument_list|>
argument_list|>
name|renewingActions
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Create a queue instance with a single thread executor    */
DECL|method|QueueService ()
specifier|public
name|QueueService
parameter_list|()
block|{
name|super
argument_list|(
name|NAME
argument_list|,
name|ServiceThreadFactory
operator|.
name|singleThreadExecutor
argument_list|(
name|NAME
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|put (AsyncAction action)
specifier|public
name|void
name|put
parameter_list|(
name|AsyncAction
name|action
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Queueing {}"
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|actionQueue
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|schedule (AsyncAction action)
specifier|public
name|void
name|schedule
parameter_list|(
name|AsyncAction
name|action
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Scheduling {}"
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|scheduledActions
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (AsyncAction action)
specifier|public
name|boolean
name|remove
parameter_list|(
name|AsyncAction
name|action
parameter_list|)
block|{
name|boolean
name|removedFromDelayQueue
init|=
name|scheduledActions
operator|.
name|remove
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|boolean
name|removedFromActions
init|=
name|actionQueue
operator|.
name|remove
argument_list|(
name|action
argument_list|)
decl_stmt|;
return|return
name|removedFromActions
operator|||
name|removedFromDelayQueue
return|;
block|}
annotation|@
name|Override
DECL|method|renewing (String name, RenewingAction<? extends AsyncAction> renewingAction)
specifier|public
name|void
name|renewing
parameter_list|(
name|String
name|name
parameter_list|,
name|RenewingAction
argument_list|<
name|?
extends|extends
name|AsyncAction
argument_list|>
name|renewingAction
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Adding renewing Action \"{}\": {}"
argument_list|,
name|name
argument_list|,
name|renewingAction
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|removeRenewingAction
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Removed predecessor action"
argument_list|)
expr_stmt|;
block|}
name|renewingActions
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|renewingAction
argument_list|)
expr_stmt|;
name|schedule
argument_list|(
name|renewingAction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lookupRenewingAction (String name)
specifier|public
name|RenewingAction
argument_list|<
name|?
extends|extends
name|AsyncAction
argument_list|>
name|lookupRenewingAction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|renewingActions
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|removeRenewingAction (String name)
specifier|public
name|boolean
name|removeRenewingAction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|RenewingAction
argument_list|<
name|?
extends|extends
name|AsyncAction
argument_list|>
name|action
init|=
name|renewingActions
operator|.
name|remove
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|action
operator|!=
literal|null
operator|&&
name|remove
argument_list|(
name|action
argument_list|)
return|;
block|}
comment|/**    * Stop the service by scheduling an {@link ActionStopQueue} action    * ..if the processor thread is working this will propagate through    * and stop the queue handling after all other actions complete.    * @throws Exception    */
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|ActionStopQueue
name|stopQueue
init|=
operator|new
name|ActionStopQueue
argument_list|(
literal|"serviceStop: "
operator|+
name|this
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|schedule
argument_list|(
name|stopQueue
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Flush an action queue of all types of a specific action    * @param clazz     */
DECL|method|flushActionQueue (Class<? extends AsyncAction> clazz)
specifier|protected
name|void
name|flushActionQueue
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|AsyncAction
argument_list|>
name|clazz
parameter_list|)
block|{
name|Iterator
argument_list|<
name|AsyncAction
argument_list|>
name|iterator
init|=
name|actionQueue
operator|.
name|descendingIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AsyncAction
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|hasQueuedActionWithAttribute (int attr)
specifier|public
name|boolean
name|hasQueuedActionWithAttribute
parameter_list|(
name|int
name|attr
parameter_list|)
block|{
for|for
control|(
name|AsyncAction
name|action
range|:
name|actionQueue
control|)
block|{
if|if
condition|(
name|action
operator|.
name|hasAttr
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Run until the queue has been told to stop    */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"QueueService processor started"
argument_list|)
expr_stmt|;
name|AsyncAction
name|take
decl_stmt|;
do|do
block|{
name|take
operator|=
name|scheduledActions
operator|.
name|take
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Propagating {}"
argument_list|,
name|take
argument_list|)
expr_stmt|;
name|actionQueue
operator|.
name|put
argument_list|(
name|take
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
operator|(
name|take
operator|instanceof
name|ActionStopQueue
operator|)
condition|)
do|;
name|log
operator|.
name|info
argument_list|(
literal|"QueueService processor terminated"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// interrupted during actions
block|}
comment|// the thread exits, but does not tag the service as complete. That's expected
comment|// to be done by the stop queue
block|}
comment|/**    * Check to see if the queue executor has completed    * @return the status    */
DECL|method|isCompleted ()
specifier|public
name|boolean
name|isCompleted
parameter_list|()
block|{
return|return
name|completed
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Package scoped method to mark the queue service as finished    */
DECL|method|complete ()
name|void
name|complete
parameter_list|()
block|{
name|completed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

