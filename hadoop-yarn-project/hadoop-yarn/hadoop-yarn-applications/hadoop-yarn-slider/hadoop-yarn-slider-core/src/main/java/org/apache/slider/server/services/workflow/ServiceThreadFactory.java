begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.services.workflow
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|workflow
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * A thread factory that creates threads (possibly daemon threads)  * using the name and naming policy supplied.  * The thread counter starts at 1, increments atomically,   * and is supplied as the second argument in the format string.  *   * A static method, {@link #singleThreadExecutor(String, boolean)},  * exists to simplify the construction of an executor with a single well-named  * threads.   *   * Example  *<pre>  *  ExecutorService exec = ServiceThreadFactory.newSingleThreadExecutor("live", true)  *</pre>  */
end_comment

begin_class
DECL|class|ServiceThreadFactory
specifier|public
class|class
name|ServiceThreadFactory
implements|implements
name|ThreadFactory
block|{
DECL|field|counter
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|/**    * Default format for thread names: {@value}.    */
DECL|field|DEFAULT_NAMING_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NAMING_FORMAT
init|=
literal|"%s-%03d"
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|daemons
specifier|private
specifier|final
name|boolean
name|daemons
decl_stmt|;
DECL|field|namingFormat
specifier|private
specifier|final
name|String
name|namingFormat
decl_stmt|;
comment|/**    * Create an instance    * @param name base thread name    * @param daemons flag to indicate the threads should be marked as daemons    * @param namingFormat format string to generate thread names from    */
DECL|method|ServiceThreadFactory (String name, boolean daemons, String namingFormat)
specifier|public
name|ServiceThreadFactory
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|daemons
parameter_list|,
name|String
name|namingFormat
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|name
operator|!=
literal|null
argument_list|,
literal|"null name"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|namingFormat
operator|!=
literal|null
argument_list|,
literal|"null naming format"
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|daemons
operator|=
name|daemons
expr_stmt|;
name|this
operator|.
name|namingFormat
operator|=
name|namingFormat
expr_stmt|;
block|}
comment|/**    * Create an instance with the default naming format.    * @param name base thread name    * @param daemons flag to indicate the threads should be marked as daemons    */
DECL|method|ServiceThreadFactory (String name, boolean daemons)
specifier|public
name|ServiceThreadFactory
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|daemons
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|daemons
argument_list|,
name|DEFAULT_NAMING_FORMAT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newThread (Runnable r)
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|r
operator|!=
literal|null
argument_list|,
literal|"null runnable"
argument_list|)
expr_stmt|;
name|String
name|threadName
init|=
name|String
operator|.
name|format
argument_list|(
name|namingFormat
argument_list|,
name|name
argument_list|,
name|counter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
name|threadName
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
name|daemons
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
comment|/**    * Create a single thread executor using this naming policy.    * @param name base thread name    * @param daemons flag to indicate the threads should be marked as daemons    * @return an executor    */
DECL|method|singleThreadExecutor (String name, boolean daemons)
specifier|public
specifier|static
name|ExecutorService
name|singleThreadExecutor
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|daemons
parameter_list|)
block|{
return|return
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
operator|new
name|ServiceThreadFactory
argument_list|(
name|name
argument_list|,
name|daemons
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

