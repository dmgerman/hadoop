begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.rpc
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|ClientToAMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|SliderClusterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadClusterStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|ErrorStrings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|ServiceNotReadyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderXmlConfKeys
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_class
DECL|class|RpcBinder
specifier|public
class|class
name|RpcBinder
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RpcBinder
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Create a protobuf server bonded to the specific socket address    * @param addr address to listen to; 0.0.0.0 as hostname acceptable    * @param conf config    * @param secretManager token secret handler    * @param numHandlers threads to service requests    * @param blockingService service to handle    * @param portRangeConfig range of ports    * @return the IPC server itself    * @throws IOException    */
DECL|method|createProtobufServer (InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, BlockingService blockingService, String portRangeConfig)
specifier|public
specifier|static
name|Server
name|createProtobufServer
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SecretManager
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|secretManager
parameter_list|,
name|int
name|numHandlers
parameter_list|,
name|BlockingService
name|blockingService
parameter_list|,
name|String
name|portRangeConfig
parameter_list|)
throws|throws
name|IOException
block|{
name|Class
argument_list|<
name|SliderClusterProtocolPB
argument_list|>
name|sliderClusterAPIClass
init|=
name|registerSliderAPI
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RPC
operator|.
name|Server
name|server
init|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|sliderClusterAPIClass
argument_list|)
operator|.
name|setInstance
argument_list|(
name|blockingService
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|addr
operator|.
name|getAddress
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
argument_list|)
operator|.
name|setPort
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
name|numHandlers
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
operator|.
name|setSecretManager
argument_list|(
name|secretManager
argument_list|)
operator|.
name|setPortRangeConfig
argument_list|(
name|portRangeConfig
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Adding protocol "
operator|+
name|sliderClusterAPIClass
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|" to the server"
argument_list|)
expr_stmt|;
name|server
operator|.
name|addProtocol
argument_list|(
name|RPC
operator|.
name|RpcKind
operator|.
name|RPC_PROTOCOL_BUFFER
argument_list|,
name|sliderClusterAPIClass
argument_list|,
name|blockingService
argument_list|)
expr_stmt|;
return|return
name|server
return|;
block|}
comment|/**    * Add the protobuf engine to the configuration. Harmless and inexpensive    * if repeated.    * @param conf configuration to patch    * @return the protocol class    */
DECL|method|registerSliderAPI ( Configuration conf)
specifier|public
specifier|static
name|Class
argument_list|<
name|SliderClusterProtocolPB
argument_list|>
name|registerSliderAPI
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Class
argument_list|<
name|SliderClusterProtocolPB
argument_list|>
name|sliderClusterAPIClass
init|=
name|SliderClusterProtocolPB
operator|.
name|class
decl_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|sliderClusterAPIClass
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//quick sanity check here
assert|assert
name|verifyBondedToProtobuf
argument_list|(
name|conf
argument_list|,
name|sliderClusterAPIClass
argument_list|)
assert|;
return|return
name|sliderClusterAPIClass
return|;
block|}
comment|/**    * Verify that the conf is set up for protobuf transport of Slider RPC    * @param conf configuration    * @param sliderClusterAPIClass class for the API    * @return true if the RPC engine is protocol buffers    */
DECL|method|verifyBondedToProtobuf (Configuration conf, Class<SliderClusterProtocolPB> sliderClusterAPIClass)
specifier|public
specifier|static
name|boolean
name|verifyBondedToProtobuf
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|SliderClusterProtocolPB
argument_list|>
name|sliderClusterAPIClass
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getClass
argument_list|(
literal|"rpc.engine."
operator|+
name|sliderClusterAPIClass
operator|.
name|getName
argument_list|()
argument_list|,
name|RpcEngine
operator|.
name|class
argument_list|)
operator|.
name|equals
argument_list|(
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Connect to a server. May include setting up retry policies    * @param addr    * @param currentUser    * @param conf    * @param rpcTimeout    * @return    * @throws IOException    */
DECL|method|connectToServer (InetSocketAddress addr, UserGroupInformation currentUser, Configuration conf, int rpcTimeout)
specifier|public
specifier|static
name|SliderClusterProtocol
name|connectToServer
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|,
name|UserGroupInformation
name|currentUser
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|rpcTimeout
parameter_list|)
throws|throws
name|IOException
block|{
name|Class
argument_list|<
name|SliderClusterProtocolPB
argument_list|>
name|sliderClusterAPIClass
init|=
name|registerSliderAPI
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|RetryPolicy
name|retryPolicy
init|=
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Connecting to Slider AM at {}"
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|ProtocolProxy
argument_list|<
name|SliderClusterProtocolPB
argument_list|>
name|protoProxy
init|=
name|RPC
operator|.
name|getProtocolProxy
argument_list|(
name|sliderClusterAPIClass
argument_list|,
literal|1
argument_list|,
name|addr
argument_list|,
name|currentUser
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
name|rpcTimeout
argument_list|,
name|retryPolicy
argument_list|)
decl_stmt|;
name|SliderClusterProtocolPB
name|endpoint
init|=
name|protoProxy
operator|.
name|getProxy
argument_list|()
decl_stmt|;
return|return
operator|new
name|SliderClusterProtocolProxy
argument_list|(
name|endpoint
argument_list|,
name|addr
argument_list|)
return|;
block|}
comment|/**    * This loops for a limited period trying to get the Proxy -    * by doing so it handles AM failover    * @param conf configuration to patch and use    * @param rmClient client of the resource manager    * @param application application to work with    * @param connectTimeout timeout for the whole proxy operation to timeout    * (milliseconds). Use 0 to indicate "do not attempt to wait" -fail fast.    * @param rpcTimeout timeout for RPCs to block during communications    * @return the proxy    * @throws IOException IO problems    * @throws YarnException Slider-generated exceptions related to the binding    * failing. This can include the application finishing or timeouts    * @throws InterruptedException if a sleep operation waiting for    * the cluster to respond is interrupted.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"NestedAssignment"
argument_list|)
DECL|method|getProxy (final Configuration conf, final ApplicationClientProtocol rmClient, ApplicationReport application, final int connectTimeout, final int rpcTimeout)
specifier|public
specifier|static
name|SliderClusterProtocol
name|getProxy
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|ApplicationClientProtocol
name|rmClient
parameter_list|,
name|ApplicationReport
name|application
parameter_list|,
specifier|final
name|int
name|connectTimeout
parameter_list|,
specifier|final
name|int
name|rpcTimeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|InterruptedException
block|{
name|ApplicationId
name|appId
decl_stmt|;
name|appId
operator|=
name|application
operator|.
name|getApplicationId
argument_list|()
expr_stmt|;
name|Duration
name|timeout
init|=
operator|new
name|Duration
argument_list|(
name|connectTimeout
argument_list|)
decl_stmt|;
name|timeout
operator|.
name|start
argument_list|()
expr_stmt|;
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
name|YarnApplicationState
name|state
init|=
literal|null
decl_stmt|;
try|try
block|{
while|while
condition|(
name|application
operator|!=
literal|null
operator|&&
operator|(
name|state
operator|=
name|application
operator|.
name|getYarnApplicationState
argument_list|()
operator|)
operator|.
name|equals
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|getProxy
argument_list|(
name|conf
argument_list|,
name|application
argument_list|,
name|rpcTimeout
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|connectTimeout
operator|<=
literal|0
operator|||
name|timeout
operator|.
name|getLimitExceeded
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|exception
operator|=
name|e
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
if|if
condition|(
name|connectTimeout
operator|<=
literal|0
operator|||
name|timeout
operator|.
name|getLimitExceeded
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|exception
operator|=
name|e
expr_stmt|;
block|}
comment|//at this point: app failed to work
name|log
operator|.
name|debug
argument_list|(
literal|"Could not connect to {}. Waiting for getting the latest AM address..."
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|//or get the app report
name|application
operator|=
name|rmClient
operator|.
name|getApplicationReport
argument_list|(
name|GetApplicationReportRequest
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|)
argument_list|)
operator|.
name|getApplicationReport
argument_list|()
expr_stmt|;
block|}
comment|//get here if the app is no longer running. Raise a specific
comment|//exception but init it with the previous failure
throw|throw
operator|new
name|BadClusterStateException
argument_list|(
name|exception
argument_list|,
name|ErrorStrings
operator|.
name|E_FINISHED_APPLICATION
argument_list|,
name|appId
argument_list|,
name|state
argument_list|)
throw|;
block|}
finally|finally
block|{
name|timeout
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get a proxy from the application report    * @param conf config to use    * @param application app report    * @param rpcTimeout timeout in RPC operations    * @return the proxy    * @throws IOException    * @throws SliderException    * @throws InterruptedException    */
DECL|method|getProxy (final Configuration conf, final ApplicationReport application, final int rpcTimeout)
specifier|public
specifier|static
name|SliderClusterProtocol
name|getProxy
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|ApplicationReport
name|application
parameter_list|,
specifier|final
name|int
name|rpcTimeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
throws|,
name|InterruptedException
block|{
name|String
name|host
init|=
name|application
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|application
operator|.
name|getRpcPort
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|clientToAMToken
init|=
name|application
operator|.
name|getClientToAMToken
argument_list|()
decl_stmt|;
return|return
name|createProxy
argument_list|(
name|conf
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|clientToAMToken
argument_list|,
name|rpcTimeout
argument_list|)
return|;
block|}
comment|/**    *    * @param conf config to use    * @param host hosname    * @param port port    * @param clientToAMToken auth token: only used in a secure cluster.    * converted via {@link ConverterUtils#convertFromYarn(org.apache.hadoop.yarn.api.records.Token, InetSocketAddress)}    * @param rpcTimeout timeout in RPC operations    * @return the proxy    * @throws SliderException    * @throws IOException    * @throws InterruptedException    */
DECL|method|createProxy (final Configuration conf, String host, int port, org.apache.hadoop.yarn.api.records.Token clientToAMToken, final int rpcTimeout)
specifier|public
specifier|static
name|SliderClusterProtocol
name|createProxy
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|clientToAMToken
parameter_list|,
specifier|final
name|int
name|rpcTimeout
parameter_list|)
throws|throws
name|SliderException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|address
init|=
name|host
operator|+
literal|":"
operator|+
name|port
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|host
argument_list|)
operator|||
literal|0
operator|==
name|port
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
name|SliderExitCodes
operator|.
name|EXIT_CONNECTIVITY_PROBLEM
argument_list|,
literal|"Slider instance "
operator|+
literal|" isn't providing a valid address for the"
operator|+
literal|" Slider RPC protocol: "
operator|+
name|address
argument_list|)
throw|;
block|}
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
specifier|final
name|UserGroupInformation
name|newUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|currentUser
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|InetSocketAddress
name|serviceAddr
init|=
name|NetUtils
operator|.
name|createSocketAddrForHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|SliderClusterProtocol
name|realProxy
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Connecting to {}"
argument_list|,
name|serviceAddr
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|clientToAMToken
operator|!=
literal|null
argument_list|,
literal|"Null clientToAMToken"
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|ClientToAMTokenIdentifier
argument_list|>
name|token
init|=
name|ConverterUtils
operator|.
name|convertFromYarn
argument_list|(
name|clientToAMToken
argument_list|,
name|serviceAddr
argument_list|)
decl_stmt|;
name|newUgi
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|realProxy
operator|=
name|newUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|SliderClusterProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SliderClusterProtocol
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|connectToServer
argument_list|(
name|serviceAddr
argument_list|,
name|newUgi
argument_list|,
name|conf
argument_list|,
name|rpcTimeout
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|realProxy
operator|=
name|connectToServer
argument_list|(
name|serviceAddr
argument_list|,
name|newUgi
argument_list|,
name|conf
argument_list|,
name|rpcTimeout
argument_list|)
expr_stmt|;
block|}
return|return
name|realProxy
return|;
block|}
block|}
end_class

end_unit

