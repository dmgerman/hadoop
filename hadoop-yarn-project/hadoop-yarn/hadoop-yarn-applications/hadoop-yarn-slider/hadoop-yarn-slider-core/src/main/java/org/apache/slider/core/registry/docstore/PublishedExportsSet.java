begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.registry.docstore
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|web
operator|.
name|rest
operator|.
name|RestPaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|utility
operator|.
name|PatternValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonIgnoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|annotate
operator|.
name|JsonSerialize
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * Represents a set of configurations for an application, component, etc.  * Json serialisable; accessors are synchronized  */
end_comment

begin_class
annotation|@
name|JsonIgnoreProperties
argument_list|(
name|ignoreUnknown
operator|=
literal|true
argument_list|)
annotation|@
name|JsonSerialize
argument_list|(
name|include
operator|=
name|JsonSerialize
operator|.
name|Inclusion
operator|.
name|NON_NULL
argument_list|)
DECL|class|PublishedExportsSet
specifier|public
class|class
name|PublishedExportsSet
block|{
DECL|field|validator
specifier|private
specifier|static
specifier|final
name|PatternValidator
name|validator
init|=
operator|new
name|PatternValidator
argument_list|(
name|RestPaths
operator|.
name|PUBLISHED_CONFIGURATION_REGEXP
argument_list|)
decl_stmt|;
DECL|field|exports
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|PublishedExports
argument_list|>
name|exports
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|PublishedExportsSet ()
specifier|public
name|PublishedExportsSet
parameter_list|()
block|{   }
comment|/**    * Put a name -it will be converted to lower case before insertion.    * Any existing entry will be overwritten (that includes an entry    * with a different case in the original name)    * @param name name of entry    * @param export published export    * @throws IllegalArgumentException if not a valid name    */
DECL|method|put (String name, PublishedExports export)
specifier|public
name|void
name|put
parameter_list|(
name|String
name|name
parameter_list|,
name|PublishedExports
name|export
parameter_list|)
block|{
name|String
name|name1
init|=
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
name|validateName
argument_list|(
name|name1
argument_list|)
expr_stmt|;
name|exports
operator|.
name|put
argument_list|(
name|name1
argument_list|,
name|export
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validate the name -restricting it to the set defined in     * {@link RestPaths#PUBLISHED_CONFIGURATION_REGEXP}    * @param name name to validate    * @throws IllegalArgumentException if not a valid name    */
DECL|method|validateName (String name)
specifier|public
specifier|static
name|void
name|validateName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|validator
operator|.
name|validate
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|get (String name)
specifier|public
name|PublishedExports
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|exports
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|contains (String name)
specifier|public
name|boolean
name|contains
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|exports
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|exports
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|keys ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|keys
operator|.
name|addAll
argument_list|(
name|exports
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|keys
return|;
block|}
DECL|method|shallowCopy ()
specifier|public
name|PublishedExportsSet
name|shallowCopy
parameter_list|()
block|{
name|PublishedExportsSet
name|that
init|=
operator|new
name|PublishedExportsSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PublishedExports
argument_list|>
name|entry
range|:
name|exports
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|that
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|shallowCopy
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|that
return|;
block|}
block|}
end_class

end_unit

