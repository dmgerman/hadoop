begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers.agent.application.metadata
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|agent
operator|.
name|application
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Application metainfo uber class  */
end_comment

begin_class
DECL|class|Metainfo
specifier|public
class|class
name|Metainfo
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Metainfo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|VERSION_TWO_ZERO
specifier|public
specifier|static
name|String
name|VERSION_TWO_ZERO
init|=
literal|"2.0"
decl_stmt|;
DECL|field|VERSION_TWO_ONE
specifier|public
specifier|static
name|String
name|VERSION_TWO_ONE
init|=
literal|"2.1"
decl_stmt|;
DECL|field|schemaVersion
name|String
name|schemaVersion
decl_stmt|;
DECL|field|applicationPackage
name|ApplicationPackage
name|applicationPackage
decl_stmt|;
DECL|field|application
name|Application
name|application
decl_stmt|;
DECL|method|getSchemaVersion ()
specifier|public
name|String
name|getSchemaVersion
parameter_list|()
block|{
return|return
name|schemaVersion
return|;
block|}
DECL|method|setSchemaVersion (String schemaVersion)
specifier|public
name|void
name|setSchemaVersion
parameter_list|(
name|String
name|schemaVersion
parameter_list|)
block|{
name|this
operator|.
name|schemaVersion
operator|=
name|schemaVersion
expr_stmt|;
block|}
DECL|method|getApplicationPackage ()
specifier|public
name|ApplicationPackage
name|getApplicationPackage
parameter_list|()
block|{
return|return
name|applicationPackage
return|;
block|}
DECL|method|setApplicationPackage (ApplicationPackage pkg)
specifier|public
name|void
name|setApplicationPackage
parameter_list|(
name|ApplicationPackage
name|pkg
parameter_list|)
block|{
name|this
operator|.
name|applicationPackage
operator|=
name|pkg
expr_stmt|;
block|}
DECL|method|getApplication ()
specifier|public
name|Application
name|getApplication
parameter_list|()
block|{
return|return
name|application
return|;
block|}
DECL|method|setApplication (Application application)
specifier|public
name|void
name|setApplication
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|this
operator|.
name|application
operator|=
name|application
expr_stmt|;
block|}
DECL|method|getApplicationComponent (String roleGroup)
specifier|public
name|Component
name|getApplicationComponent
parameter_list|(
name|String
name|roleGroup
parameter_list|)
block|{
if|if
condition|(
name|application
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Malformed app definition: Expect application as the top level element for metainfo"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Component
name|component
range|:
name|application
operator|.
name|getComponents
argument_list|()
control|)
block|{
if|if
condition|(
name|component
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|roleGroup
argument_list|)
condition|)
block|{
return|return
name|component
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getComponentConfigFiles (String roleGroup)
specifier|public
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|getComponentConfigFiles
parameter_list|(
name|String
name|roleGroup
parameter_list|)
block|{
name|List
argument_list|<
name|ConfigFile
argument_list|>
name|componentConfigFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|componentConfigFiles
operator|.
name|addAll
argument_list|(
name|application
operator|.
name|getConfigFiles
argument_list|()
argument_list|)
expr_stmt|;
name|Component
name|component
init|=
name|getApplicationComponent
argument_list|(
name|roleGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
name|componentConfigFiles
operator|.
name|addAll
argument_list|(
name|component
operator|.
name|getConfigFiles
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|componentConfigFiles
return|;
block|}
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|SliderException
block|{
if|if
condition|(
operator|!
name|VERSION_TWO_ONE
operator|.
name|equals
argument_list|(
name|schemaVersion
argument_list|)
operator|&&
operator|!
name|VERSION_TWO_ZERO
operator|.
name|equals
argument_list|(
name|schemaVersion
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
literal|"Unsupported version "
operator|+
name|getSchemaVersion
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|application
operator|!=
literal|null
condition|)
block|{
name|application
operator|.
name|validate
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|applicationPackage
operator|!=
literal|null
condition|)
block|{
name|applicationPackage
operator|.
name|validate
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkNonNull (String value, String field, String type)
specifier|public
specifier|static
name|void
name|checkNonNull
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|SliderException
block|{
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|value
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
name|type
operator|+
literal|"."
operator|+
name|field
operator|+
literal|" cannot be null"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Metainfo [schemaVersion="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", applicationPackage="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|applicationPackage
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", application="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

