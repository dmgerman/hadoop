begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.providers
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|yarn
operator|.
name|PersistencePolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|yarn
operator|.
name|YarnRegistryAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ClusterNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|InternalKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|OptionKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ResourceKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|RoleKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderXmlConfKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|AggregateConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|ConfTreeOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|conf
operator|.
name|MapOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadCommandArgumentsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|NoSuchNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|launch
operator|.
name|ContainerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|ConfigFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|ConfigUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|ExportEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedConfigurationOutputter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
operator|.
name|PublishedExports
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|StateAccessForProviders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|security
operator|.
name|CertificateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|security
operator|.
name|SecurityStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|security
operator|.
name|StoresGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|yarnregistry
operator|.
name|YarnRegistryViewForProviders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * This is a factoring out of methods handy for providers. It's bonded to a log  * at construction time.  */
end_comment

begin_class
DECL|class|ProviderUtils
specifier|public
class|class
name|ProviderUtils
implements|implements
name|RoleKeys
implements|,
name|SliderKeys
block|{
DECL|field|log
specifier|protected
specifier|final
name|Logger
name|log
decl_stmt|;
comment|/**    * Create an instance    * @param log log directory to use -usually the provider    */
DECL|method|ProviderUtils (Logger log)
specifier|public
name|ProviderUtils
parameter_list|(
name|Logger
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
comment|/**    * Add oneself to the classpath. This does not work    * on minicluster test runs where the JAR is not built up.    * @param providerResources map of provider resources to add these entries to    * @param provider provider to add    * @param jarName name of the jar to use    * @param sliderFileSystem target filesystem    * @param tempPath path in the cluster FS for temp files    * @param libdir relative directory to place resources    * @param miniClusterTestRun true if minicluster is being used    * @return true if the class was found in a JAR    *     * @throws FileNotFoundException if the JAR was not found and this is NOT    * a mini cluster test run    * @throws IOException IO problems    * @throws SliderException any Slider problem    */
DECL|method|addProviderJar ( Map<String, LocalResource> providerResources, Object provider, String jarName, SliderFileSystem sliderFileSystem, Path tempPath, String libdir, boolean miniClusterTestRun)
specifier|public
specifier|static
name|boolean
name|addProviderJar
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|providerResources
parameter_list|,
name|Object
name|provider
parameter_list|,
name|String
name|jarName
parameter_list|,
name|SliderFileSystem
name|sliderFileSystem
parameter_list|,
name|Path
name|tempPath
parameter_list|,
name|String
name|libdir
parameter_list|,
name|boolean
name|miniClusterTestRun
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
try|try
block|{
name|SliderUtils
operator|.
name|putJar
argument_list|(
name|providerResources
argument_list|,
name|sliderFileSystem
argument_list|,
name|provider
operator|.
name|getClass
argument_list|()
argument_list|,
name|tempPath
argument_list|,
name|libdir
argument_list|,
name|jarName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
name|miniClusterTestRun
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/**    * Add/overwrite the agent tarball (overwritten every time application is    * restarted).    * @param provider an instance of a provider class    * @param tarName name of the tarball to upload    * @param sliderFileSystem the file system    * @param agentDir directory to upload to    * @return true the location could be determined and the file added    * @throws IOException if the upload fails    */
DECL|method|addAgentTar (Object provider, String tarName, SliderFileSystem sliderFileSystem, Path agentDir)
specifier|public
specifier|static
name|boolean
name|addAgentTar
parameter_list|(
name|Object
name|provider
parameter_list|,
name|String
name|tarName
parameter_list|,
name|SliderFileSystem
name|sliderFileSystem
parameter_list|,
name|Path
name|agentDir
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|localFile
init|=
name|SliderUtils
operator|.
name|findContainingJar
argument_list|(
name|provider
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|localFile
operator|!=
literal|null
condition|)
block|{
name|String
name|parentDir
init|=
name|localFile
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Path
name|agentTarPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
name|tarName
argument_list|)
decl_stmt|;
name|sliderFileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|agentTarPath
argument_list|,
name|agentDir
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Loads all dependency jars from the default path.    * @param providerResources map of provider resources to add these entries to    * @param sliderFileSystem target filesystem    * @param tempPath path in the cluster FS for temp files    * @param libDir relative directory to place resources    * @param libLocalSrcDir explicitly supplied local libs dir    * @throws IOException trouble copying to HDFS    * @throws SliderException trouble copying to HDFS    */
DECL|method|addAllDependencyJars ( Map<String, LocalResource> providerResources, SliderFileSystem sliderFileSystem, Path tempPath, String libDir, String libLocalSrcDir)
specifier|public
specifier|static
name|void
name|addAllDependencyJars
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|providerResources
parameter_list|,
name|SliderFileSystem
name|sliderFileSystem
parameter_list|,
name|Path
name|tempPath
parameter_list|,
name|String
name|libDir
parameter_list|,
name|String
name|libLocalSrcDir
parameter_list|)
throws|throws
name|IOException
throws|,
name|SliderException
block|{
if|if
condition|(
name|SliderUtils
operator|.
name|isSet
argument_list|(
name|libLocalSrcDir
argument_list|)
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|libLocalSrcDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
literal|"Supplied lib src dir %s is not valid"
argument_list|,
name|libLocalSrcDir
argument_list|)
throw|;
block|}
block|}
name|SliderUtils
operator|.
name|putAllJars
argument_list|(
name|providerResources
argument_list|,
name|sliderFileSystem
argument_list|,
name|tempPath
argument_list|,
name|libDir
argument_list|,
name|libLocalSrcDir
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validate the requested number of instances of a component.    *<p>    * If max&lt;= 0:  min&lt;= count    * If max&gt; 0:  min&lt;= count&lt;= max    * @param instanceDescription configuration    * @param name node class name    * @param min requested heap size    * @param max maximum value.    * @throws BadCommandArgumentsException if the values are out of range    */
DECL|method|validateNodeCount (AggregateConf instanceDescription, String name, int min, int max)
specifier|public
name|void
name|validateNodeCount
parameter_list|(
name|AggregateConf
name|instanceDescription
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|BadCommandArgumentsException
block|{
name|MapOperations
name|component
init|=
name|instanceDescription
operator|.
name|getResourceOperations
argument_list|()
operator|.
name|getComponent
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|int
name|count
decl_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|count
operator|=
name|component
operator|.
name|getOptionInt
argument_list|(
name|ResourceKeys
operator|.
name|COMPONENT_INSTANCES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|validateNodeCount
argument_list|(
name|name
argument_list|,
name|count
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validate the count is between min and max.    *<p>    * If max&lt;= 0:  min&lt;= count    * If max&gt; 0:  min&lt;= count&lt;= max    * @param name node class name    * @param count requested node count    * @param min requested heap size    * @param max maximum value.     * @throws BadCommandArgumentsException if the values are out of range    */
DECL|method|validateNodeCount (String name, int count, int min, int max)
specifier|public
name|void
name|validateNodeCount
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|BadCommandArgumentsException
block|{
if|if
condition|(
name|count
operator|<
name|min
condition|)
block|{
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
literal|"requested no of %s nodes: %d is below the minimum of %d"
argument_list|,
name|name
argument_list|,
name|count
argument_list|,
name|min
argument_list|)
throw|;
block|}
if|if
condition|(
name|max
operator|>
literal|0
operator|&&
name|count
operator|>
name|max
condition|)
block|{
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
literal|"requested no of %s nodes: %d is above the maximum of %d"
argument_list|,
name|name
argument_list|,
name|count
argument_list|,
name|max
argument_list|)
throw|;
block|}
block|}
comment|/**    * Copy options beginning with "site.configName." prefix from options map    * to sitexml map, removing the prefix and substituting the tokens    * specified in the tokenMap.    * @param options source map    * @param sitexml destination map    * @param configName optional ".configName" portion of the prefix    * @param tokenMap key/value pairs to substitute into the option values    */
DECL|method|propagateSiteOptions (Map<String, String> options, Map<String, String> sitexml, String configName, Map<String,String> tokenMap)
specifier|public
name|void
name|propagateSiteOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sitexml
parameter_list|,
name|String
name|configName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokenMap
parameter_list|)
block|{
name|String
name|prefix
init|=
name|OptionKeys
operator|.
name|SITE_XML_PREFIX
operator|+
operator|(
operator|!
name|configName
operator|.
name|isEmpty
argument_list|()
condition|?
name|configName
operator|+
literal|"."
else|:
literal|""
operator|)
decl_stmt|;
name|propagateOptions
argument_list|(
name|options
argument_list|,
name|sitexml
argument_list|,
name|tokenMap
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy options beginning with prefix from options map    * to sitexml map, removing the prefix and substituting the tokens    * specified in the tokenMap.    * @param options source map    * @param sitexml destination map    * @param tokenMap key/value pairs to substitute into the option values    * @param prefix which options to copy to destination map    */
DECL|method|propagateOptions (Map<String, String> options, Map<String, String> sitexml, Map<String,String> tokenMap, String prefix)
specifier|public
name|void
name|propagateOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sitexml
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokenMap
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|options
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|String
name|envName
init|=
name|key
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|envName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|token
range|:
name|tokenMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|token
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|token
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|sitexml
operator|.
name|put
argument_list|(
name|envName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Substitute tokens into option map values, returning a new map.    * @param options source map    * @param tokenMap key/value pairs to substitute into the option values    * @return map with substituted values    */
DECL|method|filterSiteOptions (Map<String, String> options, Map<String, String> tokenMap)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterSiteOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokenMap
parameter_list|)
block|{
name|String
name|prefix
init|=
name|OptionKeys
operator|.
name|SITE_XML_PREFIX
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filteredOptions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|options
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|token
range|:
name|tokenMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|token
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|token
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|filteredOptions
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filteredOptions
return|;
block|}
comment|/**    * Get resource requirements from a String value. If value isn't specified,    * use the default value. If value is greater than max, use the max value.    * @param val string value    * @param defVal default value    * @param maxVal maximum value    * @return int resource requirement    */
DECL|method|getRoleResourceRequirement (String val, int defVal, int maxVal)
specifier|public
name|int
name|getRoleResourceRequirement
parameter_list|(
name|String
name|val
parameter_list|,
name|int
name|defVal
parameter_list|,
name|int
name|maxVal
parameter_list|)
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|defVal
argument_list|)
expr_stmt|;
block|}
name|Integer
name|intVal
decl_stmt|;
if|if
condition|(
name|ResourceKeys
operator|.
name|YARN_RESOURCE_MAX
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|intVal
operator|=
name|maxVal
expr_stmt|;
block|}
else|else
block|{
name|intVal
operator|=
name|Integer
operator|.
name|decode
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|intVal
return|;
block|}
comment|/**    * Localize the service keytabs for the application.    * @param launcher container launcher    * @param instanceDefinition app specification    * @param fileSystem file system    * @param clusterName app name    * @throws IOException trouble uploading to HDFS    */
DECL|method|localizeServiceKeytabs (ContainerLauncher launcher, AggregateConf instanceDefinition, SliderFileSystem fileSystem, String clusterName)
specifier|public
name|void
name|localizeServiceKeytabs
parameter_list|(
name|ContainerLauncher
name|launcher
parameter_list|,
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|String
name|clusterName
parameter_list|)
throws|throws
name|IOException
block|{
name|ConfTreeOperations
name|appConf
init|=
name|instanceDefinition
operator|.
name|getAppConfOperations
argument_list|()
decl_stmt|;
name|String
name|keytabPathOnHost
init|=
name|appConf
operator|.
name|getComponent
argument_list|(
name|COMPONENT_AM
argument_list|)
operator|.
name|get
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_AM_KEYTAB_LOCAL_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isUnset
argument_list|(
name|keytabPathOnHost
argument_list|)
condition|)
block|{
name|String
name|amKeytabName
init|=
name|appConf
operator|.
name|getComponent
argument_list|(
name|COMPONENT_AM
argument_list|)
operator|.
name|get
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_AM_LOGIN_KEYTAB_NAME
argument_list|)
decl_stmt|;
name|String
name|keytabDir
init|=
name|appConf
operator|.
name|getComponent
argument_list|(
name|COMPONENT_AM
argument_list|)
operator|.
name|get
argument_list|(
name|SliderXmlConfKeys
operator|.
name|KEY_HDFS_KEYTAB_DIR
argument_list|)
decl_stmt|;
comment|// we need to localize the keytab files in the directory
name|Path
name|keytabDirPath
init|=
name|fileSystem
operator|.
name|buildKeytabPath
argument_list|(
name|keytabDir
argument_list|,
literal|null
argument_list|,
name|clusterName
argument_list|)
decl_stmt|;
name|boolean
name|serviceKeytabsDeployed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|keytabDirPath
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|keytabs
init|=
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|keytabDirPath
argument_list|)
decl_stmt|;
name|LocalResource
name|keytabRes
decl_stmt|;
for|for
control|(
name|FileStatus
name|keytab
range|:
name|keytabs
control|)
block|{
if|if
condition|(
operator|!
name|amKeytabName
operator|.
name|equals
argument_list|(
name|keytab
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|keytab
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".keytab"
argument_list|)
condition|)
block|{
name|serviceKeytabsDeployed
operator|=
literal|true
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Localizing keytab {}"
argument_list|,
name|keytab
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|keytabRes
operator|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|keytab
operator|.
name|getPath
argument_list|()
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|KEYTAB_DIR
operator|+
literal|"/"
operator|+
name|keytab
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|keytabRes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|serviceKeytabsDeployed
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No service keytabs for the application have been localized.  "
operator|+
literal|"If the application requires keytabs for secure operation, "
operator|+
literal|"please ensure that the required keytabs have been uploaded "
operator|+
literal|"to the folder {}"
argument_list|,
name|keytabDirPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Return whether two-way SSL is enabled for Agent / AM communication.    * @param amComponent component specification    * @return true if enabled    */
DECL|method|hasTwoWaySSLEnabled (MapOperations amComponent)
specifier|public
name|boolean
name|hasTwoWaySSLEnabled
parameter_list|(
name|MapOperations
name|amComponent
parameter_list|)
block|{
return|return
name|amComponent
operator|!=
literal|null
condition|?
name|amComponent
operator|.
name|getOptionBool
argument_list|(
name|TWO_WAY_SSL_ENABLED
argument_list|,
literal|false
argument_list|)
else|:
literal|false
return|;
block|}
comment|/**    * Generate and localize SSL certs for Agent / AM communication    * @param launcher container launcher    * @param container allocated container information    * @param fileSystem file system    * @param clusterName app name    * @throws SliderException certs cannot be generated/uploaded    */
DECL|method|localizeContainerSSLResources (ContainerLauncher launcher, Container container, SliderFileSystem fileSystem, String clusterName)
specifier|public
name|void
name|localizeContainerSSLResources
parameter_list|(
name|ContainerLauncher
name|launcher
parameter_list|,
name|Container
name|container
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|String
name|clusterName
parameter_list|)
throws|throws
name|SliderException
block|{
try|try
block|{
comment|// localize server cert
name|Path
name|certsDir
init|=
name|fileSystem
operator|.
name|buildClusterSecurityDirPath
argument_list|(
name|clusterName
argument_list|)
decl_stmt|;
name|LocalResource
name|certResource
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
operator|new
name|Path
argument_list|(
name|certsDir
argument_list|,
name|CRT_FILE_NAME
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|CERT_FILE_LOCALIZATION_PATH
argument_list|,
name|certResource
argument_list|)
expr_stmt|;
comment|// generate and localize agent cert
name|CertificateManager
name|certMgr
init|=
operator|new
name|CertificateManager
argument_list|()
decl_stmt|;
name|String
name|hostname
init|=
name|container
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
name|containerId
init|=
name|container
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|certMgr
operator|.
name|generateContainerCertificate
argument_list|(
name|hostname
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|LocalResource
name|agentCertResource
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|uploadSecurityResource
argument_list|(
name|CertificateManager
operator|.
name|getAgentCertficateFilePath
argument_list|(
name|containerId
argument_list|)
argument_list|,
name|fileSystem
argument_list|,
name|clusterName
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
comment|// still using hostname as file name on the agent side, but the files
comment|// do end up under the specific container's file space
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|INFRA_RUN_SECURITY_DIR
operator|+
name|hostname
operator|+
literal|".crt"
argument_list|,
name|agentCertResource
argument_list|)
expr_stmt|;
name|LocalResource
name|agentKeyResource
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|uploadSecurityResource
argument_list|(
name|CertificateManager
operator|.
name|getAgentKeyFilePath
argument_list|(
name|containerId
argument_list|)
argument_list|,
name|fileSystem
argument_list|,
name|clusterName
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|INFRA_RUN_SECURITY_DIR
operator|+
name|hostname
operator|+
literal|".key"
argument_list|,
name|agentKeyResource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SliderException
argument_list|(
name|SliderExitCodes
operator|.
name|EXIT_DEPLOYMENT_FAILED
argument_list|,
name|e
argument_list|,
literal|"Unable to localize certificates.  Two-way SSL cannot be enabled"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Upload a local file to the cluster security dir in HDFS. If the file    * already exists, it is not replaced.    * @param resource file to upload    * @param fileSystem file system    * @param clusterName app name    * @return Path of the uploaded file    * @throws IOException file cannot be uploaded    */
DECL|method|uploadSecurityResource (File resource, SliderFileSystem fileSystem, String clusterName)
specifier|private
name|Path
name|uploadSecurityResource
parameter_list|(
name|File
name|resource
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|String
name|clusterName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|certsDir
init|=
name|fileSystem
operator|.
name|buildClusterSecurityDirPath
argument_list|(
name|clusterName
argument_list|)
decl_stmt|;
return|return
name|uploadResource
argument_list|(
name|resource
argument_list|,
name|fileSystem
argument_list|,
name|certsDir
argument_list|)
return|;
block|}
comment|/**    * Upload a local file to the cluster resources dir in HDFS. If the file    * already exists, it is not replaced.    * @param resource file to upload    * @param fileSystem file system    * @param roleName optional subdirectory (for component-specific resources)    * @param clusterName app name    * @return Path of the uploaded file    * @throws IOException file cannot be uploaded    */
DECL|method|uploadResource (File resource, SliderFileSystem fileSystem, String roleName, String clusterName)
specifier|private
name|Path
name|uploadResource
parameter_list|(
name|File
name|resource
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|String
name|roleName
parameter_list|,
name|String
name|clusterName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dir
decl_stmt|;
if|if
condition|(
name|roleName
operator|==
literal|null
condition|)
block|{
name|dir
operator|=
name|fileSystem
operator|.
name|buildClusterResourcePath
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|fileSystem
operator|.
name|buildClusterResourcePath
argument_list|(
name|clusterName
argument_list|,
name|roleName
argument_list|)
expr_stmt|;
block|}
return|return
name|uploadResource
argument_list|(
name|resource
argument_list|,
name|fileSystem
argument_list|,
name|dir
argument_list|)
return|;
block|}
comment|/**    * Upload a local file to a specified HDFS directory. If the file already    * exists, it is not replaced.    * @param resource file to upload    * @param fileSystem file system    * @param parentDir destination directory in HDFS    * @return Path of the uploaded file    * @throws IOException file cannot be uploaded    */
DECL|method|uploadResource (File resource, SliderFileSystem fileSystem, Path parentDir)
specifier|private
specifier|synchronized
name|Path
name|uploadResource
parameter_list|(
name|File
name|resource
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|Path
name|parentDir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|parentDir
argument_list|)
condition|)
block|{
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|parentDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Path
name|destPath
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
name|resource
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|destPath
argument_list|)
condition|)
block|{
name|FSDataOutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
name|byte
index|[]
name|contents
init|=
name|FileUtils
operator|.
name|readFileToByteArray
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|contents
argument_list|,
literal|0
argument_list|,
name|contents
operator|.
name|length
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Uploaded {} to localization path {}"
argument_list|,
name|resource
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Resource {} already existed at localization path {}"
argument_list|,
name|resource
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|destPath
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|fileSystem
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setPermission
argument_list|(
name|destPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|,
name|FsAction
operator|.
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|destPath
return|;
block|}
comment|/**    * Write a configuration property map to a local file in a specified format.    * @param fileSystem file system    * @param file destination file    * @param configFormat file format    * @param configFileDN file description    * @param config properties to save to the file    * @param clusterName app name    * @throws IOException file cannot be created    */
DECL|method|createConfigFile (SliderFileSystem fileSystem, File file, ConfigFormat configFormat, String configFileDN, Map<String, String> config, String clusterName)
specifier|private
name|void
name|createConfigFile
parameter_list|(
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|File
name|file
parameter_list|,
name|ConfigFormat
name|configFormat
parameter_list|,
name|String
name|configFileDN
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|,
name|String
name|clusterName
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Writing {} file {}"
argument_list|,
name|configFormat
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|ConfigUtils
operator|.
name|prepConfigForTemplateOutputter
argument_list|(
name|configFormat
argument_list|,
name|config
argument_list|,
name|fileSystem
argument_list|,
name|clusterName
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|PublishedConfiguration
name|publishedConfiguration
init|=
operator|new
name|PublishedConfiguration
argument_list|(
name|configFileDN
argument_list|,
name|config
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|PublishedConfigurationOutputter
name|configurationOutputter
init|=
name|PublishedConfigurationOutputter
operator|.
name|createOutputter
argument_list|(
name|configFormat
argument_list|,
name|publishedConfiguration
argument_list|)
decl_stmt|;
name|configurationOutputter
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * Determine config files requested in the appConf, generate the files, and    * localize them.    * @param launcher container launcher    * @param roleName component name    * @param roleGroup component group    * @param appConf app configurations    * @param configs configurations grouped by config name    * @param env environment variables    * @param fileSystem file system    * @param clusterName app name    * @throws IOException file(s) cannot be uploaded    * @throws BadConfigException file name not specified or file format not    * supported    */
DECL|method|localizeConfigFiles (ContainerLauncher launcher, String roleName, String roleGroup, ConfTreeOperations appConf, Map<String, Map<String, String>> configs, MapOperations env, SliderFileSystem fileSystem, String clusterName)
specifier|public
name|void
name|localizeConfigFiles
parameter_list|(
name|ContainerLauncher
name|launcher
parameter_list|,
name|String
name|roleName
parameter_list|,
name|String
name|roleGroup
parameter_list|,
name|ConfTreeOperations
name|appConf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configs
parameter_list|,
name|MapOperations
name|env
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|String
name|clusterName
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadConfigException
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configEntry
range|:
name|configs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|configFileName
init|=
name|appConf
operator|.
name|getComponentOpt
argument_list|(
name|roleGroup
argument_list|,
name|OptionKeys
operator|.
name|CONF_FILE_PREFIX
operator|+
name|configEntry
operator|.
name|getKey
argument_list|()
operator|+
name|OptionKeys
operator|.
name|NAME_SUFFIX
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|configFileType
init|=
name|appConf
operator|.
name|getComponentOpt
argument_list|(
name|roleGroup
argument_list|,
name|OptionKeys
operator|.
name|CONF_FILE_PREFIX
operator|+
name|configEntry
operator|.
name|getKey
argument_list|()
operator|+
name|OptionKeys
operator|.
name|TYPE_SUFFIX
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|configFileName
operator|==
literal|null
operator|&&
name|configFileType
operator|==
literal|null
condition|)
block|{
comment|// config file not requested, so continue
continue|continue;
block|}
if|if
condition|(
name|configFileName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Config file name null for "
operator|+
name|configEntry
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|configFileType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Config file type null for "
operator|+
name|configEntry
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
name|ConfigFormat
name|configFormat
init|=
name|ConfigFormat
operator|.
name|resolve
argument_list|(
name|configFileType
argument_list|)
decl_stmt|;
if|if
condition|(
name|configFormat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Config format "
operator|+
name|configFormat
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
name|localizeConfigFile
argument_list|(
name|launcher
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|configEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|configFormat
argument_list|,
name|configFileName
argument_list|,
name|configs
argument_list|,
name|env
argument_list|,
name|fileSystem
argument_list|,
name|clusterName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create and localize a config file.    * @param launcher container launcher    * @param roleName component name    * @param roleGroup component group    * @param configFileDN config description/name    * @param configFormat config format    * @param configFileName config file name    * @param configs configs grouped by config description/name    * @param env environment variables    * @param fileSystem file system    * @param clusterName app name    * @throws IOException file cannot be uploaded    */
DECL|method|localizeConfigFile (ContainerLauncher launcher, String roleName, String roleGroup, String configFileDN, ConfigFormat configFormat, String configFileName, Map<String, Map<String, String>> configs, MapOperations env, SliderFileSystem fileSystem, String clusterName)
specifier|public
name|void
name|localizeConfigFile
parameter_list|(
name|ContainerLauncher
name|launcher
parameter_list|,
name|String
name|roleName
parameter_list|,
name|String
name|roleGroup
parameter_list|,
name|String
name|configFileDN
parameter_list|,
name|ConfigFormat
name|configFormat
parameter_list|,
name|String
name|configFileName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configs
parameter_list|,
name|MapOperations
name|env
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|String
name|clusterName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|launcher
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
name|ConfigUtils
operator|.
name|replacePropsInConfig
argument_list|(
name|configs
operator|.
name|get
argument_list|(
name|configFileDN
argument_list|)
argument_list|,
name|env
operator|.
name|options
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
name|ConfigUtils
operator|.
name|replaceProps
argument_list|(
name|config
argument_list|,
name|configFileName
argument_list|)
decl_stmt|;
name|File
name|localFile
init|=
operator|new
name|File
argument_list|(
name|RESOURCE_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|localFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|localFile
operator|.
name|mkdir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|RESOURCE_DIR
operator|+
literal|" could not be created!"
argument_list|)
throw|;
block|}
block|}
name|localFile
operator|=
operator|new
name|File
argument_list|(
name|localFile
argument_list|,
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|folder
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|PER_COMPONENT
argument_list|)
argument_list|)
condition|)
block|{
name|folder
operator|=
name|roleName
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|PER_GROUP
argument_list|)
argument_list|)
condition|)
block|{
name|folder
operator|=
name|roleGroup
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Localizing {} configs to config file {} (destination {}) "
operator|+
literal|"based on {} configs"
argument_list|,
name|config
operator|.
name|size
argument_list|()
argument_list|,
name|localFile
argument_list|,
name|fileName
argument_list|,
name|configFileDN
argument_list|)
expr_stmt|;
name|createConfigFile
argument_list|(
name|fileSystem
argument_list|,
name|localFile
argument_list|,
name|configFormat
argument_list|,
name|configFileDN
argument_list|,
name|config
argument_list|,
name|clusterName
argument_list|)
expr_stmt|;
name|Path
name|destPath
init|=
name|uploadResource
argument_list|(
name|localFile
argument_list|,
name|fileSystem
argument_list|,
name|folder
argument_list|,
name|clusterName
argument_list|)
decl_stmt|;
name|LocalResource
name|configResource
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|destPath
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|File
name|destFile
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|destFile
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|RESOURCE_DIR
operator|+
literal|"/"
operator|+
name|destFile
operator|.
name|getName
argument_list|()
argument_list|,
name|configResource
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|APP_CONF_DIR
operator|+
literal|"/"
operator|+
name|fileName
argument_list|,
name|configResource
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Generate and localize security stores requested by the app. Also perform    * last-minute substitution of cluster name into credentials strings.    * @param launcher container launcher    * @param container allocated container information    * @param role component name    * @param fileSystem file system    * @param instanceDefinition app specification    * @param compOps component specification    * @param clusterName app name    * @throws SliderException stores cannot be generated/uploaded    * @throws IOException stores cannot be generated/uploaded    */
DECL|method|localizeContainerSecurityStores (ContainerLauncher launcher, Container container, String role, SliderFileSystem fileSystem, AggregateConf instanceDefinition, MapOperations compOps, String clusterName)
specifier|public
name|void
name|localizeContainerSecurityStores
parameter_list|(
name|ContainerLauncher
name|launcher
parameter_list|,
name|Container
name|container
parameter_list|,
name|String
name|role
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|MapOperations
name|compOps
parameter_list|,
name|String
name|clusterName
parameter_list|)
throws|throws
name|SliderException
throws|,
name|IOException
block|{
comment|// substitute CLUSTER_NAME into credentials
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|newcred
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|instanceDefinition
operator|.
name|getAppConf
argument_list|()
operator|.
name|credentials
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|resultList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|v
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|resultList
operator|.
name|add
argument_list|(
name|v
operator|.
name|replaceAll
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"${CLUSTER_NAME}"
argument_list|)
argument_list|,
name|clusterName
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"${CLUSTER}"
argument_list|)
argument_list|,
name|clusterName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newcred
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|replaceAll
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"${CLUSTER_NAME}"
argument_list|)
argument_list|,
name|clusterName
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"${CLUSTER}"
argument_list|)
argument_list|,
name|clusterName
argument_list|)
argument_list|,
name|resultList
argument_list|)
expr_stmt|;
block|}
name|instanceDefinition
operator|.
name|getAppConf
argument_list|()
operator|.
name|credentials
operator|=
name|newcred
expr_stmt|;
comment|// generate and localize security stores
name|SecurityStore
index|[]
name|stores
init|=
name|generateSecurityStores
argument_list|(
name|container
argument_list|,
name|role
argument_list|,
name|instanceDefinition
argument_list|,
name|compOps
argument_list|)
decl_stmt|;
for|for
control|(
name|SecurityStore
name|store
range|:
name|stores
control|)
block|{
name|LocalResource
name|keystoreResource
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|uploadSecurityResource
argument_list|(
name|store
operator|.
name|getFile
argument_list|()
argument_list|,
name|fileSystem
argument_list|,
name|clusterName
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"secstores/%s-%s.p12"
argument_list|,
name|store
operator|.
name|getType
argument_list|()
argument_list|,
name|role
argument_list|)
argument_list|,
name|keystoreResource
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Generate security stores requested by the app.    * @param container allocated container information    * @param role component name    * @param instanceDefinition app specification    * @param compOps component specification    * @return security stores    * @throws SliderException stores cannot be generated    * @throws IOException stores cannot be generated    */
DECL|method|generateSecurityStores (Container container, String role, AggregateConf instanceDefinition, MapOperations compOps)
specifier|private
name|SecurityStore
index|[]
name|generateSecurityStores
parameter_list|(
name|Container
name|container
parameter_list|,
name|String
name|role
parameter_list|,
name|AggregateConf
name|instanceDefinition
parameter_list|,
name|MapOperations
name|compOps
parameter_list|)
throws|throws
name|SliderException
throws|,
name|IOException
block|{
return|return
name|StoresGenerator
operator|.
name|generateSecurityStores
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|role
argument_list|,
name|instanceDefinition
argument_list|,
name|compOps
argument_list|)
return|;
block|}
comment|/**    * Return whether security stores are requested by the app.    * @param compOps component specification    * @return true if stores are requested    */
DECL|method|areStoresRequested (MapOperations compOps)
specifier|public
name|boolean
name|areStoresRequested
parameter_list|(
name|MapOperations
name|compOps
parameter_list|)
block|{
return|return
name|compOps
operator|!=
literal|null
condition|?
name|compOps
operator|.
name|getOptionBool
argument_list|(
name|COMP_STORES_REQUIRED_KEY
argument_list|,
literal|false
argument_list|)
else|:
literal|false
return|;
block|}
comment|/**    * Localize application tarballs and other resources requested by the app.    * @param launcher container launcher    * @param fileSystem file system    * @param appConf app configurations    * @param roleGroup component group    * @param clusterName app name    * @throws IOException resources cannot be uploaded    * @throws BadConfigException package name or type is not specified    */
DECL|method|localizePackages (ContainerLauncher launcher, SliderFileSystem fileSystem, ConfTreeOperations appConf, String roleGroup, String clusterName)
specifier|public
name|void
name|localizePackages
parameter_list|(
name|ContainerLauncher
name|launcher
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|ConfTreeOperations
name|appConf
parameter_list|,
name|String
name|roleGroup
parameter_list|,
name|String
name|clusterName
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadConfigException
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|pkg
range|:
name|getPackages
argument_list|(
name|roleGroup
argument_list|,
name|appConf
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|pkgName
init|=
name|pkg
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|OptionKeys
operator|.
name|NAME_SUFFIX
argument_list|)
decl_stmt|;
name|String
name|pkgType
init|=
name|pkg
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|OptionKeys
operator|.
name|TYPE_SUFFIX
argument_list|)
decl_stmt|;
name|Path
name|pkgPath
init|=
name|fileSystem
operator|.
name|buildResourcePath
argument_list|(
name|pkgName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|isFile
argument_list|(
name|pkgPath
argument_list|)
condition|)
block|{
name|pkgPath
operator|=
name|fileSystem
operator|.
name|buildResourcePath
argument_list|(
name|clusterName
argument_list|,
name|pkgName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|isFile
argument_list|(
name|pkgPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Package doesn't exist as a resource: "
operator|+
name|pkgName
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Adding resource {}"
argument_list|,
name|pkgName
argument_list|)
expr_stmt|;
name|LocalResourceType
name|type
init|=
name|LocalResourceType
operator|.
name|FILE
decl_stmt|;
if|if
condition|(
literal|"archive"
operator|.
name|equals
argument_list|(
name|pkgType
argument_list|)
condition|)
block|{
name|type
operator|=
name|LocalResourceType
operator|.
name|ARCHIVE
expr_stmt|;
block|}
name|LocalResource
name|packageResource
init|=
name|fileSystem
operator|.
name|createAmResource
argument_list|(
name|pkgPath
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|addLocalResource
argument_list|(
name|APP_PACKAGES_DIR
argument_list|,
name|packageResource
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Build a map of configuration description/name to configuration key/value    * properties, with all known tokens substituted into the property values.    * @param appConf app configurations    * @param internalsConf internal configurations    * @param containerId container ID    * @param roleName component name    * @param roleGroup component group    * @param amState access to AM state    * @return configuration properties grouped by config description/name    */
DECL|method|buildConfigurations ( ConfTreeOperations appConf, ConfTreeOperations internalsConf, String containerId, String roleName, String roleGroup, StateAccessForProviders amState)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|buildConfigurations
parameter_list|(
name|ConfTreeOperations
name|appConf
parameter_list|,
name|ConfTreeOperations
name|internalsConf
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|roleName
parameter_list|,
name|String
name|roleGroup
parameter_list|,
name|StateAccessForProviders
name|amState
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurations
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokens
init|=
name|getStandardTokenMap
argument_list|(
name|appConf
argument_list|,
name|internalsConf
argument_list|,
name|roleName
argument_list|,
name|roleGroup
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|configs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|configs
operator|.
name|addAll
argument_list|(
name|getApplicationConfigurationTypes
argument_list|(
name|roleGroup
argument_list|,
name|appConf
argument_list|)
argument_list|)
expr_stmt|;
name|configs
operator|.
name|addAll
argument_list|(
name|getSystemConfigurationsRequested
argument_list|(
name|appConf
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|configType
range|:
name|configs
control|)
block|{
name|addNamedConfiguration
argument_list|(
name|configType
argument_list|,
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|options
argument_list|,
name|configurations
argument_list|,
name|tokens
argument_list|,
name|amState
argument_list|)
expr_stmt|;
if|if
condition|(
name|appConf
operator|.
name|getComponent
argument_list|(
name|roleGroup
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|addNamedConfiguration
argument_list|(
name|configType
argument_list|,
name|appConf
operator|.
name|getComponent
argument_list|(
name|roleGroup
argument_list|)
operator|.
name|options
argument_list|,
name|configurations
argument_list|,
name|tokens
argument_list|,
name|amState
argument_list|)
expr_stmt|;
block|}
block|}
comment|//do a final replacement of re-used configs
name|dereferenceAllConfigs
argument_list|(
name|configurations
argument_list|)
expr_stmt|;
return|return
name|configurations
return|;
block|}
comment|/**    * Substitute "site." prefixed configuration values into other configuration    * values where needed. The format for these substitutions is that    * {@literal ${@//site/configDN/key}} will be replaced by the value for the    * "site.configDN.key" property.    * @param configurations configuration properties grouped by config    *                       description/name    */
DECL|method|dereferenceAllConfigs ( Map<String, Map<String, String>> configurations)
specifier|public
name|void
name|dereferenceAllConfigs
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurations
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|allConfigs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|lookupFormat
init|=
literal|"${@//site/%s/%s}"
decl_stmt|;
for|for
control|(
name|String
name|configType
range|:
name|configurations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configBucket
init|=
name|configurations
operator|.
name|get
argument_list|(
name|configType
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|configName
range|:
name|configBucket
operator|.
name|keySet
argument_list|()
control|)
block|{
name|allConfigs
operator|.
name|put
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|lookupFormat
argument_list|,
name|configType
argument_list|,
name|configName
argument_list|)
argument_list|,
name|configBucket
operator|.
name|get
argument_list|(
name|configName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|finished
condition|)
block|{
name|finished
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|allConfigs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|configValue
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|lookUpEntry
range|:
name|allConfigs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|lookUpValue
init|=
name|lookUpEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|lookUpValue
operator|.
name|contains
argument_list|(
literal|"${@//site/"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|lookUpKey
init|=
name|lookUpEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|configValue
operator|!=
literal|null
operator|&&
name|configValue
operator|.
name|contains
argument_list|(
name|lookUpKey
argument_list|)
condition|)
block|{
name|configValue
operator|=
name|configValue
operator|.
name|replace
argument_list|(
name|lookUpKey
argument_list|,
name|lookUpValue
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|configValue
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|finished
operator|=
literal|false
expr_stmt|;
name|allConfigs
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|configValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|configType
range|:
name|configurations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configBucket
init|=
name|configurations
operator|.
name|get
argument_list|(
name|configType
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|configBucket
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|configName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|configValue
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|lookUpEntry
range|:
name|allConfigs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|lookUpValue
init|=
name|lookUpEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|lookUpValue
operator|.
name|contains
argument_list|(
literal|"${@//site/"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|lookUpKey
init|=
name|lookUpEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|configValue
operator|!=
literal|null
operator|&&
name|configValue
operator|.
name|contains
argument_list|(
name|lookUpKey
argument_list|)
condition|)
block|{
name|configValue
operator|=
name|configValue
operator|.
name|replace
argument_list|(
name|lookUpKey
argument_list|,
name|lookUpValue
argument_list|)
expr_stmt|;
block|}
block|}
name|configBucket
operator|.
name|put
argument_list|(
name|configName
argument_list|,
name|configValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Return a set of configuration description/names represented in the app.    * configuration    * @param roleGroup component group    * @param appConf app configurations    * @return set of configuration description/names    */
DECL|method|getApplicationConfigurationTypes (String roleGroup, ConfTreeOperations appConf)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getApplicationConfigurationTypes
parameter_list|(
name|String
name|roleGroup
parameter_list|,
name|ConfTreeOperations
name|appConf
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|configList
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|OptionKeys
operator|.
name|CONF_FILE_PREFIX
decl_stmt|;
name|String
name|suffix
init|=
name|OptionKeys
operator|.
name|TYPE_SUFFIX
decl_stmt|;
name|MapOperations
name|component
init|=
name|appConf
operator|.
name|getComponent
argument_list|(
name|roleGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
name|addConfsToList
argument_list|(
name|component
argument_list|,
name|configList
argument_list|,
name|prefix
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
block|}
name|addConfsToList
argument_list|(
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
argument_list|,
name|configList
argument_list|,
name|prefix
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
return|return
name|configList
return|;
block|}
comment|/**    * Finds all configuration description/names of the form    * prefixconfigDNsuffix in the configuration (e.g. conf.configDN.type).    * @param confMap configuration properties    * @param confList set containing configuration description/names    * @param prefix configuration key prefix to match    * @param suffix configuration key suffix to match    */
DECL|method|addConfsToList (Map<String, String> confMap, Set<String> confList, String prefix, String suffix)
specifier|private
name|void
name|addConfsToList
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confMap
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|confList
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
for|for
control|(
name|String
name|key
range|:
name|confMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
operator|&&
name|key
operator|.
name|endsWith
argument_list|(
name|suffix
argument_list|)
condition|)
block|{
name|String
name|confName
init|=
name|key
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|,
name|key
operator|.
name|length
argument_list|()
operator|-
name|suffix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|confName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|confList
operator|.
name|add
argument_list|(
name|confName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Build a map of package description/name to package key/value properties    * (there should be two properties, type and name).    * @param roleGroup component group    * @param appConf app configurations    * @return map of package description/name to package key/value properties    * @throws BadConfigException package name or type is not specified    */
DECL|method|getPackages (String roleGroup, ConfTreeOperations appConf)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getPackages
parameter_list|(
name|String
name|roleGroup
parameter_list|,
name|ConfTreeOperations
name|appConf
parameter_list|)
throws|throws
name|BadConfigException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|packages
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|OptionKeys
operator|.
name|PKG_FILE_PREFIX
decl_stmt|;
name|String
name|typeSuffix
init|=
name|OptionKeys
operator|.
name|TYPE_SUFFIX
decl_stmt|;
name|String
name|nameSuffix
init|=
name|OptionKeys
operator|.
name|NAME_SUFFIX
decl_stmt|;
name|MapOperations
name|component
init|=
name|appConf
operator|.
name|getComponent
argument_list|(
name|roleGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
name|component
operator|=
name|appConf
operator|.
name|getGlobalOptions
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|component
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|String
name|confName
decl_stmt|;
name|String
name|type
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|endsWith
argument_list|(
name|typeSuffix
argument_list|)
condition|)
block|{
name|confName
operator|=
name|key
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|,
name|key
operator|.
name|length
argument_list|()
operator|-
name|typeSuffix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|=
name|typeSuffix
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|endsWith
argument_list|(
name|nameSuffix
argument_list|)
condition|)
block|{
name|confName
operator|=
name|key
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|,
name|key
operator|.
name|length
argument_list|()
operator|-
name|nameSuffix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|=
name|nameSuffix
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|packages
operator|.
name|containsKey
argument_list|(
name|confName
argument_list|)
condition|)
block|{
name|packages
operator|.
name|put
argument_list|(
name|confName
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|packages
operator|.
name|get
argument_list|(
name|confName
argument_list|)
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|pkg
range|:
name|packages
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|pkg
operator|.
name|getValue
argument_list|()
operator|.
name|containsKey
argument_list|(
name|OptionKeys
operator|.
name|TYPE_SUFFIX
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Package "
operator|+
name|pkg
operator|.
name|getKey
argument_list|()
operator|+
literal|" doesn't "
operator|+
literal|"have a package type"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|pkg
operator|.
name|getValue
argument_list|()
operator|.
name|containsKey
argument_list|(
name|OptionKeys
operator|.
name|NAME_SUFFIX
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadConfigException
argument_list|(
literal|"Package "
operator|+
name|pkg
operator|.
name|getKey
argument_list|()
operator|+
literal|" doesn't "
operator|+
literal|"have a package name"
argument_list|)
throw|;
block|}
block|}
return|return
name|packages
return|;
block|}
comment|/**    * Return system configurations requested by the app.    * @param appConf app configurations    * @return set of system configurations    */
DECL|method|getSystemConfigurationsRequested ( ConfTreeOperations appConf)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getSystemConfigurationsRequested
parameter_list|(
name|ConfTreeOperations
name|appConf
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|configList
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|configTypes
init|=
name|appConf
operator|.
name|get
argument_list|(
name|SYSTEM_CONFIGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|configTypes
operator|!=
literal|null
operator|&&
name|configTypes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|configs
init|=
name|configTypes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|config
range|:
name|configs
control|)
block|{
name|configList
operator|.
name|add
argument_list|(
name|config
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|configList
return|;
block|}
comment|/**    * For a given config description/name, pull out its site configs from the    * source config map, remove the site.configDN. prefix from them, and place    * them into a new config map using the {@link #propagateSiteOptions} method    * (with tokens substituted). This new k/v map is put as the value for the    * configDN key in the configurations map.    * @param configName config description/name    * @param sourceConfig config containing site.* properties    * @param configurations configuration map to be populated    * @param tokens initial substitution tokens    * @param amState access to AM state    */
DECL|method|addNamedConfiguration (String configName, Map<String, String> sourceConfig, Map<String, Map<String, String>> configurations, Map<String, String> tokens, StateAccessForProviders amState)
specifier|private
name|void
name|addNamedConfiguration
parameter_list|(
name|String
name|configName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sourceConfig
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configurations
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokens
parameter_list|,
name|StateAccessForProviders
name|amState
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|configName
operator|.
name|equals
argument_list|(
name|GLOBAL_CONFIG_TAG
argument_list|)
condition|)
block|{
name|addDefaultGlobalConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
comment|// add role hosts to tokens
name|addRoleRelatedTokens
argument_list|(
name|tokens
argument_list|,
name|amState
argument_list|)
expr_stmt|;
name|propagateSiteOptions
argument_list|(
name|sourceConfig
argument_list|,
name|config
argument_list|,
name|configName
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
name|configurations
operator|.
name|put
argument_list|(
name|configName
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get initial token map to be substituted into config values.    * @param appConf app configurations    * @param internals internal configurations    * @param componentName component name    * @param componentGroup component group    * @param clusterName app name    * @return tokens to replace    */
DECL|method|getStandardTokenMap (ConfTreeOperations appConf, ConfTreeOperations internals, String componentName, String componentGroup, String clusterName)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getStandardTokenMap
parameter_list|(
name|ConfTreeOperations
name|appConf
parameter_list|,
name|ConfTreeOperations
name|internals
parameter_list|,
name|String
name|componentName
parameter_list|,
name|String
name|componentGroup
parameter_list|,
name|String
name|clusterName
parameter_list|)
block|{
return|return
name|getStandardTokenMap
argument_list|(
name|appConf
argument_list|,
name|internals
argument_list|,
name|componentName
argument_list|,
name|componentGroup
argument_list|,
literal|null
argument_list|,
name|clusterName
argument_list|)
return|;
block|}
comment|/**    * Get initial token map to be substituted into config values.    * @param appConf app configurations    * @param internals internal configurations    * @param componentName component name    * @param componentGroup component group    * @param containerId container ID    * @param clusterName app name    * @return tokens to replace    */
DECL|method|getStandardTokenMap (ConfTreeOperations appConf, ConfTreeOperations internals, String componentName, String componentGroup, String containerId, String clusterName)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getStandardTokenMap
parameter_list|(
name|ConfTreeOperations
name|appConf
parameter_list|,
name|ConfTreeOperations
name|internals
parameter_list|,
name|String
name|componentName
parameter_list|,
name|String
name|componentGroup
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|clusterName
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokens
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|containerId
operator|!=
literal|null
condition|)
block|{
name|tokens
operator|.
name|put
argument_list|(
literal|"${CONTAINER_ID}"
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
name|String
name|nnuri
init|=
name|appConf
operator|.
name|get
argument_list|(
literal|"site.fs.defaultFS"
argument_list|)
decl_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${NN_URI}"
argument_list|,
name|nnuri
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${NN_HOST}"
argument_list|,
name|URI
operator|.
name|create
argument_list|(
name|nnuri
argument_list|)
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${ZK_HOST}"
argument_list|,
name|appConf
operator|.
name|get
argument_list|(
name|OptionKeys
operator|.
name|ZOOKEEPER_HOSTS
argument_list|)
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${DEFAULT_ZK_PATH}"
argument_list|,
name|appConf
operator|.
name|get
argument_list|(
name|OptionKeys
operator|.
name|ZOOKEEPER_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
name|appConf
operator|.
name|getComponentOpt
argument_list|(
name|componentGroup
argument_list|,
name|ROLE_PREFIX
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|dataDirSuffix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|dataDirSuffix
operator|=
literal|"_"
operator|+
name|SliderUtils
operator|.
name|trimPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|tokens
operator|.
name|put
argument_list|(
literal|"${DEFAULT_DATA_DIR}"
argument_list|,
name|internals
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|getOption
argument_list|(
name|InternalKeys
operator|.
name|INTERNAL_DATA_DIR_PATH
argument_list|,
literal|null
argument_list|)
operator|+
name|dataDirSuffix
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${JAVA_HOME}"
argument_list|,
name|appConf
operator|.
name|get
argument_list|(
name|JAVA_HOME
argument_list|)
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${COMPONENT_NAME}"
argument_list|,
name|componentName
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${COMPONENT_NAME.lc}"
argument_list|,
name|componentName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${COMPONENT_PREFIX}"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${COMPONENT_PREFIX.lc}"
argument_list|,
name|prefix
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|componentName
operator|.
name|equals
argument_list|(
name|componentGroup
argument_list|)
operator|&&
name|componentName
operator|.
name|startsWith
argument_list|(
name|componentGroup
argument_list|)
condition|)
block|{
name|tokens
operator|.
name|put
argument_list|(
literal|"${COMPONENT_ID}"
argument_list|,
name|componentName
operator|.
name|substring
argument_list|(
name|componentGroup
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clusterName
operator|!=
literal|null
condition|)
block|{
name|tokens
operator|.
name|put
argument_list|(
literal|"${CLUSTER_NAME}"
argument_list|,
name|clusterName
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${CLUSTER_NAME.lc}"
argument_list|,
name|clusterName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${APP_NAME}"
argument_list|,
name|clusterName
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${APP_NAME.lc}"
argument_list|,
name|clusterName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tokens
operator|.
name|put
argument_list|(
literal|"${APP_COMPONENT_NAME}"
argument_list|,
name|componentName
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${APP_COMPONENT_NAME.lc}"
argument_list|,
name|componentName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tokens
return|;
block|}
comment|/**    * Add ROLE_HOST tokens for substitution into config values.    * @param tokens existing tokens    * @param amState access to AM state    */
DECL|method|addRoleRelatedTokens (Map<String, String> tokens, StateAccessForProviders amState)
specifier|public
name|void
name|addRoleRelatedTokens
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokens
parameter_list|,
name|StateAccessForProviders
name|amState
parameter_list|)
block|{
if|if
condition|(
name|amState
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ClusterNode
argument_list|>
argument_list|>
name|entry
range|:
name|amState
operator|.
name|getRoleClusterNodeMapping
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|tokenName
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|+
literal|"_HOST"
decl_stmt|;
name|String
name|hosts
init|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|getHostsList
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"${"
operator|+
name|tokenName
operator|+
literal|"}"
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add global configuration properties.    * @param config map where default global properties will be added    */
DECL|method|addDefaultGlobalConfig (Map<String, String> config)
specifier|private
name|void
name|addDefaultGlobalConfig
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|)
block|{
name|config
operator|.
name|put
argument_list|(
literal|"app_log_dir"
argument_list|,
literal|"${LOG_DIR}"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"app_pid_dir"
argument_list|,
literal|"${WORK_DIR}/app/run"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"app_install_dir"
argument_list|,
literal|"${WORK_DIR}/app/install"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"app_conf_dir"
argument_list|,
literal|"${WORK_DIR}/"
operator|+
name|APP_CONF_DIR
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"app_input_conf_dir"
argument_list|,
literal|"${WORK_DIR}/"
operator|+
name|PROPAGATED_CONF_DIR_NAME
argument_list|)
expr_stmt|;
comment|// add optional parameters only if they are not already provided
if|if
condition|(
operator|!
name|config
operator|.
name|containsKey
argument_list|(
literal|"pid_file"
argument_list|)
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
literal|"pid_file"
argument_list|,
literal|"${WORK_DIR}/app/run/component.pid"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|config
operator|.
name|containsKey
argument_list|(
literal|"app_root"
argument_list|)
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
literal|"app_root"
argument_list|,
literal|"${WORK_DIR}/app/install"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Return a list of hosts based on current ClusterNodes.    * @param values cluster nodes    * @param hostOnly whether host or host/server name will be added to list    * @return list of hosts    */
DECL|method|getHostsList (Collection<ClusterNode> values, boolean hostOnly)
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getHostsList
parameter_list|(
name|Collection
argument_list|<
name|ClusterNode
argument_list|>
name|values
parameter_list|,
name|boolean
name|hostOnly
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|hosts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClusterNode
name|cn
range|:
name|values
control|)
block|{
name|hosts
operator|.
name|add
argument_list|(
name|hostOnly
condition|?
name|cn
operator|.
name|host
else|:
name|cn
operator|.
name|host
operator|+
literal|"/"
operator|+
name|cn
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|hosts
return|;
block|}
comment|/**    * Update ServiceRecord in Registry with IP and hostname.    * @param amState access to AM state    * @param yarnRegistry acces to YARN registry    * @param containerId container ID    * @param roleName component name    * @param ip list of IPs    * @param hostname hostname    */
DECL|method|updateServiceRecord (StateAccessForProviders amState, YarnRegistryViewForProviders yarnRegistry, String containerId, String roleName, List<String> ip, String hostname)
specifier|public
name|void
name|updateServiceRecord
parameter_list|(
name|StateAccessForProviders
name|amState
parameter_list|,
name|YarnRegistryViewForProviders
name|yarnRegistry
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|roleName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|ip
parameter_list|,
name|String
name|hostname
parameter_list|)
block|{
try|try
block|{
name|RoleInstance
name|role
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ip
operator|!=
literal|null
operator|&&
operator|!
name|ip
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|role
operator|=
name|amState
operator|.
name|getOwnedContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|role
operator|.
name|ip
operator|=
name|ip
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hostname
operator|!=
literal|null
operator|&&
operator|!
name|hostname
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|role
operator|=
name|amState
operator|.
name|getOwnedContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|role
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
block|}
if|if
condition|(
name|role
operator|!=
literal|null
condition|)
block|{
comment|// create and publish updated service record (including hostname& ip)
name|ServiceRecord
name|record
init|=
operator|new
name|ServiceRecord
argument_list|()
decl_stmt|;
name|record
operator|.
name|set
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_ID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|record
operator|.
name|description
operator|=
name|roleName
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_PERSISTENCE
argument_list|,
name|PersistencePolicies
operator|.
name|CONTAINER
argument_list|)
expr_stmt|;
comment|// TODO: use constants from YarnRegistryAttributes
if|if
condition|(
name|role
operator|.
name|ip
operator|!=
literal|null
condition|)
block|{
name|record
operator|.
name|set
argument_list|(
literal|"yarn:ip"
argument_list|,
name|role
operator|.
name|ip
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|role
operator|.
name|hostname
operator|!=
literal|null
condition|)
block|{
name|record
operator|.
name|set
argument_list|(
literal|"yarn:hostname"
argument_list|,
name|role
operator|.
name|hostname
argument_list|)
expr_stmt|;
block|}
name|yarnRegistry
operator|.
name|putComponent
argument_list|(
name|RegistryPathUtils
operator|.
name|encodeYarnID
argument_list|(
name|containerId
argument_list|)
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchNodeException
name|e
parameter_list|)
block|{
comment|// ignore - there is nothing to do if we don't find a container
name|log
operator|.
name|warn
argument_list|(
literal|"Owned container {} not found - {}"
argument_list|,
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error updating container {} service record in registry"
argument_list|,
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Publish a named property bag that may contain name-value pairs for app    * configurations such as hbase-site.    * @param name config file identifying name    * @param description config file description    * @param entries config file properties    * @param amState access to AM state    */
DECL|method|publishApplicationInstanceData (String name, String description, Iterable<Map.Entry<String, String>> entries, StateAccessForProviders amState)
specifier|public
name|void
name|publishApplicationInstanceData
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entries
parameter_list|,
name|StateAccessForProviders
name|amState
parameter_list|)
block|{
name|PublishedConfiguration
name|pubconf
init|=
operator|new
name|PublishedConfiguration
argument_list|(
name|description
argument_list|,
name|entries
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"publishing {}"
argument_list|,
name|pubconf
argument_list|)
expr_stmt|;
name|amState
operator|.
name|getPublishedSliderConfigurations
argument_list|()
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|pubconf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Publish an export group.    * @param exportGroup export groups    * @param amState access to AM state    * @param roleGroup component group    */
DECL|method|publishExportGroup (Map<String, List<ExportEntry>> exportGroup, StateAccessForProviders amState, String roleGroup)
specifier|public
name|void
name|publishExportGroup
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExportEntry
argument_list|>
argument_list|>
name|exportGroup
parameter_list|,
name|StateAccessForProviders
name|amState
parameter_list|,
name|String
name|roleGroup
parameter_list|)
block|{
comment|// Publish in old format for the time being
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|simpleEntries
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExportEntry
argument_list|>
argument_list|>
name|entry
range|:
name|exportGroup
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ExportEntry
argument_list|>
name|exports
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|SliderUtils
operator|.
name|isNotEmpty
argument_list|(
name|exports
argument_list|)
condition|)
block|{
comment|// there is no support for multiple exports per name, so extract only
comment|// the first one
name|simpleEntries
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|publishApplicationInstanceData
argument_list|(
name|roleGroup
argument_list|,
name|roleGroup
argument_list|,
name|simpleEntries
operator|.
name|entrySet
argument_list|()
argument_list|,
name|amState
argument_list|)
expr_stmt|;
name|PublishedExports
name|exports
init|=
operator|new
name|PublishedExports
argument_list|(
name|roleGroup
argument_list|)
decl_stmt|;
name|exports
operator|.
name|setUpdated
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|exports
operator|.
name|putValues
argument_list|(
name|exportGroup
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
name|amState
operator|.
name|getPublishedExportsSet
argument_list|()
operator|.
name|put
argument_list|(
name|roleGroup
argument_list|,
name|exports
argument_list|)
expr_stmt|;
block|}
DECL|method|getExports (ConfTreeOperations appConf, String roleGroup)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getExports
parameter_list|(
name|ConfTreeOperations
name|appConf
parameter_list|,
name|String
name|roleGroup
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|exports
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propagateOptions
argument_list|(
name|appConf
operator|.
name|getComponent
argument_list|(
name|roleGroup
argument_list|)
operator|.
name|options
argument_list|,
name|exports
argument_list|,
literal|null
argument_list|,
name|OptionKeys
operator|.
name|EXPORT_PREFIX
argument_list|)
expr_stmt|;
return|return
name|exports
return|;
block|}
DECL|field|COMPONENT_TAG
specifier|private
specifier|static
specifier|final
name|String
name|COMPONENT_TAG
init|=
literal|"component"
decl_stmt|;
DECL|field|HOST_FOLDER_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|HOST_FOLDER_FORMAT
init|=
literal|"%s:%s"
decl_stmt|;
DECL|field|CONTAINER_LOGS_TAG
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_LOGS_TAG
init|=
literal|"container_log_dirs"
decl_stmt|;
DECL|field|CONTAINER_PWDS_TAG
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_PWDS_TAG
init|=
literal|"container_work_dirs"
decl_stmt|;
comment|/**    * Format the folder locations and publish in the registry service.    * @param folders folder information    * @param containerId container ID    * @param hostFqdn host FQDN    * @param componentName component name    */
DECL|method|publishFolderPaths (Map<String, String> folders, String containerId, String componentName, String hostFqdn, StateAccessForProviders amState, Map<String, ExportEntry> logFolderExports, Map<String, ExportEntry> workFolderExports)
specifier|public
name|void
name|publishFolderPaths
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|folders
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|componentName
parameter_list|,
name|String
name|hostFqdn
parameter_list|,
name|StateAccessForProviders
name|amState
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ExportEntry
argument_list|>
name|logFolderExports
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ExportEntry
argument_list|>
name|workFolderExports
parameter_list|)
block|{
name|Date
name|now
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|folders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ExportEntry
name|exportEntry
init|=
operator|new
name|ExportEntry
argument_list|()
decl_stmt|;
name|exportEntry
operator|.
name|setValue
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|HOST_FOLDER_FORMAT
argument_list|,
name|hostFqdn
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exportEntry
operator|.
name|setContainerId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|exportEntry
operator|.
name|setLevel
argument_list|(
name|COMPONENT_TAG
argument_list|)
expr_stmt|;
name|exportEntry
operator|.
name|setTag
argument_list|(
name|componentName
argument_list|)
expr_stmt|;
name|exportEntry
operator|.
name|setUpdatedTime
argument_list|(
name|now
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"AGENT_LOG_ROOT"
argument_list|)
operator|||
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"LOG_DIR"
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|logFolderExports
init|)
block|{
name|logFolderExports
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|exportEntry
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|workFolderExports
init|)
block|{
name|workFolderExports
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|exportEntry
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Updating log and pwd folders for container {}"
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
name|PublishedExports
name|exports
init|=
operator|new
name|PublishedExports
argument_list|(
name|CONTAINER_LOGS_TAG
argument_list|)
decl_stmt|;
name|exports
operator|.
name|setUpdated
argument_list|(
name|now
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|logFolderExports
init|)
block|{
name|updateExportsFromList
argument_list|(
name|exports
argument_list|,
name|logFolderExports
argument_list|)
expr_stmt|;
block|}
name|amState
operator|.
name|getPublishedExportsSet
argument_list|()
operator|.
name|put
argument_list|(
name|CONTAINER_LOGS_TAG
argument_list|,
name|exports
argument_list|)
expr_stmt|;
name|exports
operator|=
operator|new
name|PublishedExports
argument_list|(
name|CONTAINER_PWDS_TAG
argument_list|)
expr_stmt|;
name|exports
operator|.
name|setUpdated
argument_list|(
name|now
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|workFolderExports
init|)
block|{
name|updateExportsFromList
argument_list|(
name|exports
argument_list|,
name|workFolderExports
argument_list|)
expr_stmt|;
block|}
name|amState
operator|.
name|getPublishedExportsSet
argument_list|()
operator|.
name|put
argument_list|(
name|CONTAINER_PWDS_TAG
argument_list|,
name|exports
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update the export data from the map.    * @param exports published exports    * @param folderExports folder exports    */
DECL|method|updateExportsFromList (PublishedExports exports, Map<String, ExportEntry> folderExports)
specifier|private
name|void
name|updateExportsFromList
parameter_list|(
name|PublishedExports
name|exports
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ExportEntry
argument_list|>
name|folderExports
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExportEntry
argument_list|>
argument_list|>
name|perComponentList
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ExportEntry
argument_list|>
name|logEntry
range|:
name|folderExports
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|componentName
init|=
name|logEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getTag
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|perComponentList
operator|.
name|containsKey
argument_list|(
name|componentName
argument_list|)
condition|)
block|{
name|perComponentList
operator|.
name|put
argument_list|(
name|componentName
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ExportEntry
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|perComponentList
operator|.
name|get
argument_list|(
name|componentName
argument_list|)
operator|.
name|add
argument_list|(
name|logEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|exports
operator|.
name|putValues
argument_list|(
name|perComponentList
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

