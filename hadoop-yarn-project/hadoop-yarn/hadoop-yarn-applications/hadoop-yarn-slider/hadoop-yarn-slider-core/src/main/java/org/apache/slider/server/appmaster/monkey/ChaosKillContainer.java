begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.monkey
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|monkey
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|SliderKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|actions
operator|.
name|ActionKillContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|actions
operator|.
name|QueueAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
operator|.
name|RMOperationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
operator|.
name|RoleInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Kill a container  */
end_comment

begin_class
DECL|class|ChaosKillContainer
specifier|public
class|class
name|ChaosKillContainer
implements|implements
name|ChaosTarget
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChaosKillContainer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DELAY
specifier|public
specifier|static
specifier|final
name|int
name|DELAY
init|=
literal|100
decl_stmt|;
DECL|field|appState
specifier|private
specifier|final
name|AppState
name|appState
decl_stmt|;
DECL|field|queues
specifier|private
specifier|final
name|QueueAccess
name|queues
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|operationHandler
specifier|private
specifier|final
name|RMOperationHandler
name|operationHandler
decl_stmt|;
DECL|method|ChaosKillContainer (AppState appState, QueueAccess queues, RMOperationHandler operationHandler)
specifier|public
name|ChaosKillContainer
parameter_list|(
name|AppState
name|appState
parameter_list|,
name|QueueAccess
name|queues
parameter_list|,
name|RMOperationHandler
name|operationHandler
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|this
operator|.
name|appState
operator|=
name|appState
expr_stmt|;
name|this
operator|.
name|queues
operator|=
name|queues
expr_stmt|;
name|this
operator|.
name|operationHandler
operator|=
name|operationHandler
expr_stmt|;
block|}
comment|/**    * Trigger a container kill     */
annotation|@
name|Override
DECL|method|chaosAction ()
specifier|public
name|void
name|chaosAction
parameter_list|()
block|{
name|List
argument_list|<
name|RoleInstance
argument_list|>
name|liveContainers
init|=
name|appState
operator|.
name|cloneLiveContainerInfoList
argument_list|()
decl_stmt|;
comment|// purge any and all components which declare that they are an AM
name|ListIterator
argument_list|<
name|RoleInstance
argument_list|>
name|containers
init|=
name|liveContainers
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|containers
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RoleInstance
name|instance
init|=
name|containers
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|SliderKeys
operator|.
name|COMPONENT_AM
operator|.
name|equals
argument_list|(
name|instance
operator|.
name|role
argument_list|)
condition|)
block|{
name|containers
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|size
init|=
name|liveContainers
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|int
name|target
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|RoleInstance
name|roleInstance
init|=
name|liveContainers
operator|.
name|get
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Killing {}"
argument_list|,
name|roleInstance
argument_list|)
expr_stmt|;
name|queues
operator|.
name|schedule
argument_list|(
operator|new
name|ActionKillContainer
argument_list|(
name|roleInstance
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|DELAY
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|operationHandler
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

