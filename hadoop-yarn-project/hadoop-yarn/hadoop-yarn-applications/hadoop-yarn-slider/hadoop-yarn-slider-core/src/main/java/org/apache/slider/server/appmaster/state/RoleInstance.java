begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.state
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryTypeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ProtocolTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ClusterNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|proto
operator|.
name|Messages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|resource
operator|.
name|ConfigFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|types
operator|.
name|ContainerInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|providers
operator|.
name|ProviderRole
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Tracking information about a container  */
end_comment

begin_class
DECL|class|RoleInstance
specifier|public
specifier|final
class|class
name|RoleInstance
implements|implements
name|Cloneable
block|{
DECL|field|container
specifier|public
name|Container
name|container
decl_stmt|;
DECL|field|providerRole
specifier|public
name|ProviderRole
name|providerRole
decl_stmt|;
DECL|field|componentId
specifier|public
name|long
name|componentId
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|compInstanceName
specifier|public
name|String
name|compInstanceName
init|=
literal|null
decl_stmt|;
comment|/**    * Container ID    */
DECL|field|id
specifier|public
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|createTime
specifier|public
name|long
name|createTime
decl_stmt|;
DECL|field|startTime
specifier|public
name|long
name|startTime
decl_stmt|;
comment|/**    * flag set when it is released, to know if it has    * already been targeted for termination    */
DECL|field|released
specifier|public
name|boolean
name|released
decl_stmt|;
comment|/**    * Name of the role    */
DECL|field|role
specifier|public
name|String
name|role
decl_stmt|;
comment|/**    * Version of the app    */
DECL|field|appVersion
specifier|public
name|String
name|appVersion
decl_stmt|;
comment|/**    * Role Id; matches priority in resources.json    */
DECL|field|roleId
specifier|public
name|int
name|roleId
decl_stmt|;
comment|/**    * state from StateValues    */
DECL|field|state
specifier|public
name|int
name|state
decl_stmt|;
comment|/**    * Exit code: only valid if the state>= STOPPED    */
DECL|field|exitCode
specifier|public
name|int
name|exitCode
decl_stmt|;
comment|/**    * what was the command executed?    */
DECL|field|command
specifier|public
name|String
name|command
decl_stmt|;
comment|/**    * Any diagnostics    */
DECL|field|diagnostics
specifier|public
name|String
name|diagnostics
decl_stmt|;
comment|/**    * What is the tail output from the executed process (or [] if not started    * or the log cannot be picked up    */
DECL|field|output
specifier|public
name|String
index|[]
name|output
decl_stmt|;
comment|/**    * Any environment details    */
DECL|field|environment
specifier|public
name|String
index|[]
name|environment
decl_stmt|;
DECL|field|ip
specifier|public
name|String
name|ip
decl_stmt|;
DECL|field|hostname
specifier|public
name|String
name|hostname
decl_stmt|;
DECL|field|host
specifier|public
name|String
name|host
decl_stmt|;
DECL|field|hostURL
specifier|public
name|String
name|hostURL
decl_stmt|;
DECL|field|placement
specifier|public
name|ContainerAllocationOutcome
name|placement
decl_stmt|;
DECL|field|compInstanceDir
specifier|public
name|Path
name|compInstanceDir
decl_stmt|;
comment|/**    * A list of registered endpoints.    */
DECL|field|endpoints
specifier|private
name|List
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
DECL|method|RoleInstance (Container container, ProviderRole role)
specifier|public
name|RoleInstance
parameter_list|(
name|Container
name|container
parameter_list|,
name|ProviderRole
name|role
parameter_list|)
block|{
name|this
argument_list|(
name|container
argument_list|)
expr_stmt|;
if|if
condition|(
name|role
operator|.
name|componentIdCounter
operator|!=
literal|null
condition|)
block|{
name|componentId
operator|=
name|role
operator|.
name|componentIdCounter
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
name|compInstanceName
operator|=
name|role
operator|.
name|name
operator|+
name|componentId
expr_stmt|;
block|}
else|else
block|{
name|compInstanceName
operator|=
name|role
operator|.
name|name
expr_stmt|;
block|}
name|compInstanceName
operator|=
name|compInstanceName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
name|this
operator|.
name|providerRole
operator|=
name|role
expr_stmt|;
block|}
DECL|method|RoleInstance (Container container, RoleInstance failedInstance)
specifier|public
name|RoleInstance
parameter_list|(
name|Container
name|container
parameter_list|,
name|RoleInstance
name|failedInstance
parameter_list|)
block|{
name|this
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|this
operator|.
name|componentId
operator|=
name|failedInstance
operator|.
name|componentId
expr_stmt|;
name|this
operator|.
name|compInstanceName
operator|=
name|failedInstance
operator|.
name|compInstanceName
expr_stmt|;
name|this
operator|.
name|providerRole
operator|=
name|failedInstance
operator|.
name|providerRole
expr_stmt|;
block|}
comment|/**    * Create an instance to track an allocated container    * @param container a container which must be non null, and have a non-null Id field.    */
DECL|method|RoleInstance (Container container)
specifier|public
name|RoleInstance
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|container
argument_list|,
literal|"Null container"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|container
operator|.
name|getId
argument_list|()
operator|!=
literal|null
argument_list|,
literal|"Null container ID"
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
name|id
operator|=
name|container
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|container
operator|.
name|getNodeId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|host
operator|=
name|container
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|container
operator|.
name|getNodeHttpAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|hostURL
operator|=
literal|"http://"
operator|+
name|container
operator|.
name|getNodeHttpAddress
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getHost ()
specifier|public
name|NodeId
name|getHost
parameter_list|()
block|{
return|return
name|container
operator|.
name|getNodeId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"RoleInstance{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"role='"
argument_list|)
operator|.
name|append
argument_list|(
name|role
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", id='"
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", instanceName='"
argument_list|)
operator|.
name|append
argument_list|(
name|compInstanceName
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", container="
argument_list|)
operator|.
name|append
argument_list|(
name|SliderUtils
operator|.
name|containerToString
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", createTime="
argument_list|)
operator|.
name|append
argument_list|(
name|createTime
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", startTime="
argument_list|)
operator|.
name|append
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", released="
argument_list|)
operator|.
name|append
argument_list|(
name|released
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", roleId="
argument_list|)
operator|.
name|append
argument_list|(
name|roleId
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", host="
argument_list|)
operator|.
name|append
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", hostURL="
argument_list|)
operator|.
name|append
argument_list|(
name|hostURL
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", state="
argument_list|)
operator|.
name|append
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", placement="
argument_list|)
operator|.
name|append
argument_list|(
name|placement
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", exitCode="
argument_list|)
operator|.
name|append
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", command='"
argument_list|)
operator|.
name|append
argument_list|(
name|command
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", diagnostics='"
argument_list|)
operator|.
name|append
argument_list|(
name|diagnostics
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", output="
argument_list|)
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", environment="
argument_list|)
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|environment
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getContainerId ()
specifier|public
name|ContainerId
name|getContainerId
parameter_list|()
block|{
return|return
name|container
operator|.
name|getId
argument_list|()
return|;
block|}
comment|/**    * Generate the protobuf format of a request    * @return protobuf format. This excludes the Container info    */
DECL|method|toProtobuf ()
specifier|public
name|Messages
operator|.
name|RoleInstanceState
name|toProtobuf
parameter_list|()
block|{
name|Messages
operator|.
name|RoleInstanceState
operator|.
name|Builder
name|builder
init|=
name|Messages
operator|.
name|RoleInstanceState
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setName
argument_list|(
name|container
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|setName
argument_list|(
literal|"unallocated instance"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|environment
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAllEnvironment
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|environment
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|diagnostics
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setDiagnostics
argument_list|(
name|diagnostics
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setExitCode
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAllOutput
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|role
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setRole
argument_list|(
name|role
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setRoleId
argument_list|(
name|roleId
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setState
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReleased
argument_list|(
name|released
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCreateTime
argument_list|(
name|createTime
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStartTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setHostURL
argument_list|(
name|hostURL
argument_list|)
expr_stmt|;
if|if
condition|(
name|appVersion
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setAppVersion
argument_list|(
name|appVersion
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Build a serializable ClusterNode structure from this instance.    * This operation is unsynchronized.    * @return a serialized value.    */
DECL|method|toClusterNode ()
specifier|public
name|ClusterNode
name|toClusterNode
parameter_list|()
block|{
name|ClusterNode
name|node
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|node
operator|=
operator|new
name|ClusterNode
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|=
operator|new
name|ClusterNode
argument_list|()
expr_stmt|;
name|node
operator|.
name|name
operator|=
literal|"unallocated instance"
expr_stmt|;
block|}
name|node
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|node
operator|.
name|createTime
operator|=
name|createTime
expr_stmt|;
name|node
operator|.
name|diagnostics
operator|=
name|diagnostics
expr_stmt|;
if|if
condition|(
name|environment
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|environment
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|environment
argument_list|,
name|environment
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|exitCode
operator|=
name|exitCode
expr_stmt|;
name|node
operator|.
name|ip
operator|=
name|ip
expr_stmt|;
name|node
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
name|node
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|node
operator|.
name|hostUrl
operator|=
name|hostURL
expr_stmt|;
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|output
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|released
operator|=
name|released
expr_stmt|;
name|node
operator|.
name|role
operator|=
name|role
expr_stmt|;
name|node
operator|.
name|roleId
operator|=
name|roleId
expr_stmt|;
name|node
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|node
operator|.
name|state
operator|=
name|state
expr_stmt|;
return|return
name|node
return|;
block|}
comment|/**    * Clone operation clones all the simple values but shares the     * Container object into the cloned copy -same with the output,    * diagnostics and env arrays.    * @return a clone of the object    * @throws CloneNotSupportedException    */
annotation|@
name|Override
DECL|method|clone ()
specifier|public
name|Object
name|clone
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
name|RoleInstance
name|cloned
init|=
operator|(
name|RoleInstance
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
comment|// clone the endpoint list, but not the values
name|cloned
operator|.
name|endpoints
operator|=
operator|new
name|ArrayList
argument_list|<
name|Endpoint
argument_list|>
argument_list|(
name|this
operator|.
name|endpoints
argument_list|)
expr_stmt|;
return|return
name|cloned
return|;
block|}
comment|/**    * Get the list of endpoints.     * @return the endpoint list.    */
DECL|method|getEndpoints ()
specifier|public
name|List
argument_list|<
name|Endpoint
argument_list|>
name|getEndpoints
parameter_list|()
block|{
return|return
name|endpoints
return|;
block|}
comment|/**    * Add an endpoint registration    * @param endpoint endpoint (non-null)    */
DECL|method|addEndpoint (Endpoint endpoint)
specifier|public
name|void
name|addEndpoint
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|endpoint
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|endpoints
operator|.
name|add
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
comment|/**    * Register a port endpoint as an inet-addr formatted endpoint, using the    * hostname as the first part of the address    * @param port port port    * @param api  API API name    */
DECL|method|registerPortEndpoint (int port, String api)
specifier|public
name|void
name|registerPortEndpoint
parameter_list|(
name|int
name|port
parameter_list|,
name|String
name|api
parameter_list|)
block|{
name|Endpoint
name|epr
init|=
name|RegistryTypeUtils
operator|.
name|inetAddrEndpoint
argument_list|(
name|api
argument_list|,
name|ProtocolTypes
operator|.
name|PROTOCOL_TCP
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|addEndpoint
argument_list|(
name|epr
argument_list|)
expr_stmt|;
block|}
comment|/**    * Serialize. Some data structures (e.g output)    * may be shared    * @return a serialized form for marshalling as JSON    */
DECL|method|serialize ()
specifier|public
name|ContainerInformation
name|serialize
parameter_list|()
block|{
name|ContainerInformation
name|info
init|=
operator|new
name|ContainerInformation
argument_list|()
decl_stmt|;
name|info
operator|.
name|containerId
operator|=
name|id
expr_stmt|;
name|info
operator|.
name|component
operator|=
name|role
expr_stmt|;
name|info
operator|.
name|appVersion
operator|=
name|appVersion
expr_stmt|;
name|info
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|info
operator|.
name|createTime
operator|=
name|createTime
expr_stmt|;
name|info
operator|.
name|diagnostics
operator|=
name|diagnostics
expr_stmt|;
name|info
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|info
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|info
operator|.
name|hostURL
operator|=
name|hostURL
expr_stmt|;
name|info
operator|.
name|released
operator|=
name|released
condition|?
name|Boolean
operator|.
name|TRUE
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|placement
operator|=
name|placement
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|output
operator|=
name|output
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
DECL|method|getCompInstanceName ()
specifier|public
name|String
name|getCompInstanceName
parameter_list|()
block|{
return|return
name|compInstanceName
return|;
block|}
block|}
end_class

end_unit

