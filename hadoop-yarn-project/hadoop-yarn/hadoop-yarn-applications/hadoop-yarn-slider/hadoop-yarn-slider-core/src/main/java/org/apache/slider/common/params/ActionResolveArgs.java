begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.common.params
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
package|;
end_package

begin_import
import|import
name|com
operator|.
name|beust
operator|.
name|jcommander
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|beust
operator|.
name|jcommander
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|BadCommandArgumentsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|UsageException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|SliderActions
operator|.
name|ACTION_RESOLVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|params
operator|.
name|SliderActions
operator|.
name|DESCRIBE_ACTION_REGISTRY
import|;
end_import

begin_comment
comment|/**  * Resolve registry entries  *   * --path {path}  * --out {destfile}  * --verbose  * --list  */
end_comment

begin_class
annotation|@
name|Parameters
argument_list|(
name|commandNames
operator|=
block|{
name|ACTION_RESOLVE
block|}
argument_list|,
name|commandDescription
operator|=
name|DESCRIBE_ACTION_REGISTRY
argument_list|)
DECL|class|ActionResolveArgs
specifier|public
class|class
name|ActionResolveArgs
extends|extends
name|AbstractActionArgs
block|{
DECL|field|USAGE
specifier|public
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"Usage: "
operator|+
name|SliderActions
operator|.
name|ACTION_RESOLVE
operator|+
literal|" "
operator|+
name|ARG_PATH
operator|+
literal|"<path> "
operator|+
literal|"["
operator|+
name|ARG_LIST
operator|+
literal|"] "
operator|+
literal|"["
operator|+
name|ARG_OUTPUT
operator|+
literal|"<filename> ] "
operator|+
literal|"["
operator|+
name|ARG_DESTDIR
operator|+
literal|"<directory> ] "
decl_stmt|;
DECL|method|ActionResolveArgs ()
specifier|public
name|ActionResolveArgs
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|getActionName ()
specifier|public
name|String
name|getActionName
parameter_list|()
block|{
return|return
name|ACTION_RESOLVE
return|;
block|}
comment|/**    * Get the min #of params expected    * @return the min number of params in the {@link #parameters} field    */
annotation|@
name|Override
DECL|method|getMinParams ()
specifier|public
name|int
name|getMinParams
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_LIST
block|}
argument_list|,
name|description
operator|=
literal|"list services"
argument_list|)
DECL|field|list
specifier|public
name|boolean
name|list
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_PATH
block|}
argument_list|,
name|description
operator|=
literal|"resolve a path"
argument_list|)
DECL|field|path
specifier|public
name|String
name|path
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_DESTDIR
block|}
argument_list|,
name|description
operator|=
literal|"destination directory for operations"
argument_list|)
DECL|field|destdir
specifier|public
name|File
name|destdir
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|names
operator|=
block|{
name|ARG_OUTPUT
block|,
name|ARG_OUTPUT_SHORT
block|}
argument_list|,
name|description
operator|=
literal|"dest file"
argument_list|)
DECL|field|out
specifier|public
name|File
name|out
decl_stmt|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|ACTION_RESOLVE
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ARG_PATH
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ARG_LIST
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|destdir
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ARG_DESTDIR
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|destdir
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ARG_OUTPUT
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|out
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|BadCommandArgumentsException
throws|,
name|UsageException
block|{
name|super
operator|.
name|validate
argument_list|()
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
literal|"Missing mandatory argument "
operator|+
name|ARG_PATH
argument_list|)
throw|;
block|}
if|if
condition|(
name|list
operator|&&
name|out
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
literal|"Argument "
operator|+
name|ARG_OUTPUT
operator|+
literal|" not supported for "
operator|+
name|ARG_LIST
argument_list|)
throw|;
block|}
if|if
condition|(
name|out
operator|!=
literal|null
operator|&&
name|destdir
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadCommandArgumentsException
argument_list|(
name|ARG_OUTPUT
operator|+
literal|" and "
operator|+
name|ARG_DESTDIR
operator|+
literal|" cannot be used together"
argument_list|)
throw|;
block|}
block|}
DECL|method|getPath ()
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|setPath (String path)
specifier|public
name|void
name|setPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
DECL|method|isList ()
specifier|public
name|boolean
name|isList
parameter_list|()
block|{
return|return
name|list
return|;
block|}
DECL|method|setList (boolean list)
specifier|public
name|void
name|setList
parameter_list|(
name|boolean
name|list
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
block|}
DECL|method|getDestdir ()
specifier|public
name|File
name|getDestdir
parameter_list|()
block|{
return|return
name|destdir
return|;
block|}
DECL|method|setDestdir (File destdir)
specifier|public
name|void
name|setDestdir
parameter_list|(
name|File
name|destdir
parameter_list|)
block|{
name|this
operator|.
name|destdir
operator|=
name|destdir
expr_stmt|;
block|}
DECL|method|getOut ()
specifier|public
name|File
name|getOut
parameter_list|()
block|{
return|return
name|out
return|;
block|}
DECL|method|setOut (File out)
specifier|public
name|void
name|setOut
parameter_list|(
name|File
name|out
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
block|}
end_class

end_unit

