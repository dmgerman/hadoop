begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.state
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|state
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_comment
comment|/**  * Static assignment structure  */
end_comment

begin_class
DECL|class|ContainerAssignment
specifier|public
class|class
name|ContainerAssignment
block|{
comment|/**    * Container that has been allocated    */
DECL|field|container
specifier|public
specifier|final
name|Container
name|container
decl_stmt|;
comment|/**    * Role to assign to it    */
DECL|field|role
specifier|public
specifier|final
name|RoleStatus
name|role
decl_stmt|;
comment|/**    * Placement outcome: was this from history or not    */
DECL|field|placement
specifier|public
specifier|final
name|ContainerAllocationOutcome
name|placement
decl_stmt|;
DECL|method|ContainerAssignment (Container container, RoleStatus role, ContainerAllocationOutcome placement)
specifier|public
name|ContainerAssignment
parameter_list|(
name|Container
name|container
parameter_list|,
name|RoleStatus
name|role
parameter_list|,
name|ContainerAllocationOutcome
name|placement
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|role
operator|=
name|role
expr_stmt|;
name|this
operator|.
name|placement
operator|=
name|placement
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ContainerAssignment{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"container="
argument_list|)
operator|.
name|append
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", role="
argument_list|)
operator|.
name|append
argument_list|(
name|role
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", placement="
argument_list|)
operator|.
name|append
argument_list|(
name|placement
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

