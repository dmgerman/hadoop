begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.management
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|management
package|;
end_package

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * A bool metric, mapped to an integer. true maps to 1,  false to zero,  */
end_comment

begin_class
DECL|class|BoolMetric
specifier|public
class|class
name|BoolMetric
implements|implements
name|Metric
implements|,
name|Gauge
argument_list|<
name|Integer
argument_list|>
block|{
DECL|field|value
specifier|private
specifier|final
name|AtomicBoolean
name|value
decl_stmt|;
DECL|method|BoolMetric (boolean b)
specifier|public
name|BoolMetric
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|value
operator|=
operator|new
name|AtomicBoolean
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
DECL|method|set (boolean b)
specifier|public
name|void
name|set
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|value
operator|.
name|set
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
DECL|method|get ()
specifier|public
name|boolean
name|get
parameter_list|()
block|{
return|return
name|value
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getValue ()
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|value
operator|.
name|get
argument_list|()
condition|?
literal|1
else|:
literal|0
return|;
block|}
comment|/**    * Evaluate from a string. Returns true if the string is considered to match 'true',    * false otherwise.    * @param s source    * @return true if the input parses to an integer other than 0. False if it doesn't parse    * or parses to 0.    */
DECL|method|fromString (String s)
specifier|public
specifier|static
name|boolean
name|fromString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
operator|!=
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|BoolMetric
name|that
init|=
operator|(
name|BoolMetric
operator|)
name|o
decl_stmt|;
return|return
name|get
argument_list|()
operator|==
name|that
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

