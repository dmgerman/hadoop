begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.registry.docstore
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|common
operator|.
name|tools
operator|.
name|SliderFileSystem
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|ConfigUtils
specifier|public
class|class
name|ConfigUtils
block|{
DECL|field|TEMPLATE_FILE
specifier|public
specifier|static
specifier|final
name|String
name|TEMPLATE_FILE
init|=
literal|"template.file"
decl_stmt|;
DECL|method|replaceProps (Map<String, String> config, String content)
specifier|public
specifier|static
name|String
name|replaceProps
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokens
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|config
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|tokens
operator|.
name|put
argument_list|(
literal|"${"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"}"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|put
argument_list|(
literal|"{{"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"}}"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|value
init|=
name|content
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|token
range|:
name|tokens
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|token
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|Matcher
operator|.
name|quoteReplacement
argument_list|(
name|token
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
DECL|method|replacePropsInConfig ( Map<String, String> config, Map<String, String> env)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|replacePropsInConfig
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokens
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|env
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|tokens
operator|.
name|put
argument_list|(
literal|"${"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"}"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newConfig
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|config
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|token
range|:
name|tokens
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|token
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|Matcher
operator|.
name|quoteReplacement
argument_list|(
name|token
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newConfig
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|newConfig
return|;
block|}
DECL|method|prepConfigForTemplateOutputter (ConfigFormat configFormat, Map<String, String> config, SliderFileSystem fileSystem, String clusterName, String fileName)
specifier|public
specifier|static
name|void
name|prepConfigForTemplateOutputter
parameter_list|(
name|ConfigFormat
name|configFormat
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|,
name|SliderFileSystem
name|fileSystem
parameter_list|,
name|String
name|clusterName
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|configFormat
operator|.
name|equals
argument_list|(
name|ConfigFormat
operator|.
name|TEMPLATE
argument_list|)
condition|)
block|{
return|return;
block|}
name|Path
name|templateFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|containsKey
argument_list|(
name|TEMPLATE_FILE
argument_list|)
condition|)
block|{
name|templateFile
operator|=
name|fileSystem
operator|.
name|buildResourcePath
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|TEMPLATE_FILE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|isFile
argument_list|(
name|templateFile
argument_list|)
condition|)
block|{
name|templateFile
operator|=
name|fileSystem
operator|.
name|buildResourcePath
argument_list|(
name|clusterName
argument_list|,
name|config
operator|.
name|get
argument_list|(
name|TEMPLATE_FILE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|isFile
argument_list|(
name|templateFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"config specified template file "
operator|+
name|config
operator|.
name|get
argument_list|(
name|TEMPLATE_FILE
argument_list|)
operator|+
literal|" but "
operator|+
name|templateFile
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|templateFile
operator|==
literal|null
operator|&&
name|fileName
operator|!=
literal|null
condition|)
block|{
name|templateFile
operator|=
name|fileSystem
operator|.
name|buildResourcePath
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|isFile
argument_list|(
name|templateFile
argument_list|)
condition|)
block|{
name|templateFile
operator|=
name|fileSystem
operator|.
name|buildResourcePath
argument_list|(
name|clusterName
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fileSystem
operator|.
name|isFile
argument_list|(
name|templateFile
argument_list|)
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
literal|"content"
argument_list|,
name|fileSystem
operator|.
name|cat
argument_list|(
name|templateFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
literal|"content"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

