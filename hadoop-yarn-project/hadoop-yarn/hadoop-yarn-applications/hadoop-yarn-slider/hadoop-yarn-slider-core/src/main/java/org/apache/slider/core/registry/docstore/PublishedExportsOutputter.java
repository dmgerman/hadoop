begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.core.registry.docstore
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|registry
operator|.
name|docstore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/** Output a published configuration */
end_comment

begin_class
DECL|class|PublishedExportsOutputter
specifier|public
specifier|abstract
class|class
name|PublishedExportsOutputter
block|{
DECL|field|exports
specifier|protected
specifier|final
name|PublishedExports
name|exports
decl_stmt|;
DECL|method|PublishedExportsOutputter (PublishedExports exports)
specifier|protected
name|PublishedExportsOutputter
parameter_list|(
name|PublishedExports
name|exports
parameter_list|)
block|{
name|this
operator|.
name|exports
operator|=
name|exports
expr_stmt|;
block|}
comment|/**    * Create an outputter for the chosen format    *    * @param format  format enumeration    * @param exports owning config    * @return the outputter    */
DECL|method|createOutputter (ConfigFormat format, PublishedExports exports)
specifier|public
specifier|static
name|PublishedExportsOutputter
name|createOutputter
parameter_list|(
name|ConfigFormat
name|format
parameter_list|,
name|PublishedExports
name|exports
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|exports
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|JSON
case|:
return|return
operator|new
name|JsonOutputter
argument_list|(
name|exports
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported format :"
operator|+
name|format
argument_list|)
throw|;
block|}
block|}
DECL|method|save (File dest)
specifier|public
name|void
name|save
parameter_list|(
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|FileOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|save
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Save the content. The default saves the asString() value to the output stream    *    * @param out output stream    * @throws IOException    */
DECL|method|save (OutputStream out)
specifier|public
name|void
name|save
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|write
argument_list|(
name|asString
argument_list|()
argument_list|,
name|out
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
comment|/**    * Convert to a string    *    * @return the string form    * @throws IOException    */
DECL|method|asString ()
specifier|public
specifier|abstract
name|String
name|asString
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|class|JsonOutputter
specifier|public
specifier|static
class|class
name|JsonOutputter
extends|extends
name|PublishedExportsOutputter
block|{
DECL|method|JsonOutputter (PublishedExports exports)
specifier|public
name|JsonOutputter
parameter_list|(
name|PublishedExports
name|exports
parameter_list|)
block|{
name|super
argument_list|(
name|exports
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|save (File dest)
specifier|public
name|void
name|save
parameter_list|(
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|dest
argument_list|,
name|asString
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|asString ()
specifier|public
name|String
name|asString
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|exports
operator|.
name|asJson
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

