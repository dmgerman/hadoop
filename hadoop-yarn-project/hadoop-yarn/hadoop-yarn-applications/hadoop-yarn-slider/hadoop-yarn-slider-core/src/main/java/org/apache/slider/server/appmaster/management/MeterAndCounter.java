begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.management
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|management
package|;
end_package

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_comment
comment|/**  * A combined meter and counter that can be used to measure load.  * Hash and equality are derived from the name  */
end_comment

begin_class
DECL|class|MeterAndCounter
specifier|public
class|class
name|MeterAndCounter
block|{
comment|/**    * suffix for counters: {@value}    */
DECL|field|COUNTER
specifier|public
specifier|static
specifier|final
name|String
name|COUNTER
init|=
literal|".counter"
decl_stmt|;
comment|/**    * suffix for meters: {@value}    */
DECL|field|METER
specifier|public
specifier|static
specifier|final
name|String
name|METER
init|=
literal|".meter"
decl_stmt|;
DECL|field|meter
specifier|final
name|Meter
name|meter
decl_stmt|;
DECL|field|counter
specifier|final
name|Counter
name|counter
decl_stmt|;
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
comment|/**    * Construct an instance    * @param metrics metrics to bond to    * @param name name before suffixes are appended    */
DECL|method|MeterAndCounter (MetricRegistry metrics, String name)
specifier|public
name|MeterAndCounter
parameter_list|(
name|MetricRegistry
name|metrics
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|counter
operator|=
name|metrics
operator|.
name|counter
argument_list|(
name|name
operator|+
name|COUNTER
argument_list|)
expr_stmt|;
name|meter
operator|=
name|metrics
operator|.
name|meter
argument_list|(
name|name
operator|+
name|METER
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct an instance    * @param metrics metrics to bond to    * @param clazz class to use to derive name    * @param name name before suffixes are appended    */
DECL|method|MeterAndCounter (MetricRegistry metrics, Class clazz, String name)
specifier|public
name|MeterAndCounter
parameter_list|(
name|MetricRegistry
name|metrics
parameter_list|,
name|Class
name|clazz
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|counter
operator|=
name|metrics
operator|.
name|counter
argument_list|(
name|MetricRegistry
operator|.
name|name
argument_list|(
name|clazz
argument_list|,
name|name
operator|+
name|COUNTER
argument_list|)
argument_list|)
expr_stmt|;
name|meter
operator|=
name|metrics
operator|.
name|meter
argument_list|(
name|MetricRegistry
operator|.
name|name
argument_list|(
name|clazz
argument_list|,
name|name
operator|+
name|METER
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Increment the counter, mark the meter    */
DECL|method|mark ()
specifier|public
name|void
name|mark
parameter_list|()
block|{
name|counter
operator|.
name|inc
argument_list|()
expr_stmt|;
name|meter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
DECL|method|inc ()
specifier|public
name|void
name|inc
parameter_list|()
block|{
name|mark
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|MeterAndCounter
name|that
init|=
operator|(
name|MeterAndCounter
operator|)
name|o
decl_stmt|;
return|return
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**    * Get the count.    * @return the current count    */
DECL|method|getCount ()
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|counter
operator|.
name|getCount
argument_list|()
return|;
block|}
block|}
end_class

end_unit

