begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.services.workflow
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|workflow
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * A service that calls the supplied callback when it is started -after the   * given delay.  *  * It can be configured to stop itself after the callback has  * completed, marking any exception raised as the exception of this service.  * The notifications come in on a callback thread -a thread that is only  * started in this service's<code>start()</code> operation.  */
end_comment

begin_class
DECL|class|WorkflowCallbackService
specifier|public
class|class
name|WorkflowCallbackService
parameter_list|<
name|V
parameter_list|>
extends|extends
name|WorkflowScheduledExecutorService
argument_list|<
name|ScheduledExecutorService
argument_list|>
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WorkflowCallbackService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * This is the callback.    */
DECL|field|callback
specifier|private
specifier|final
name|Callable
argument_list|<
name|V
argument_list|>
name|callback
decl_stmt|;
DECL|field|delay
specifier|private
specifier|final
name|int
name|delay
decl_stmt|;
DECL|field|command
specifier|private
specifier|final
name|ServiceTerminatingCallable
argument_list|<
name|V
argument_list|>
name|command
decl_stmt|;
DECL|field|scheduledFuture
specifier|private
name|ScheduledFuture
argument_list|<
name|V
argument_list|>
name|scheduledFuture
decl_stmt|;
comment|/**    * Create an instance of the service    * @param name service name    * @param callback callback to invoke    * @param delay delay -or 0 for no delay    * @param terminate terminate this service after the callback?    */
DECL|method|WorkflowCallbackService (String name, Callable<V> callback, int delay, boolean terminate)
specifier|public
name|WorkflowCallbackService
parameter_list|(
name|String
name|name
parameter_list|,
name|Callable
argument_list|<
name|V
argument_list|>
name|callback
parameter_list|,
name|int
name|delay
parameter_list|,
name|boolean
name|terminate
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|callback
argument_list|,
literal|"Null callback argument"
argument_list|)
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
name|command
operator|=
operator|new
name|ServiceTerminatingCallable
argument_list|<
name|V
argument_list|>
argument_list|(
name|terminate
condition|?
name|this
else|:
literal|null
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
DECL|method|getScheduledFuture ()
specifier|public
name|ScheduledFuture
argument_list|<
name|V
argument_list|>
name|getScheduledFuture
parameter_list|()
block|{
return|return
name|scheduledFuture
return|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Notifying {} after a delay of {} millis"
argument_list|,
name|callback
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|ScheduledExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
operator|new
name|ServiceThreadFactory
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|setExecutor
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
name|scheduledFuture
operator|=
name|executorService
operator|.
name|schedule
argument_list|(
name|command
argument_list|,
name|delay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stop the service.    * If there is any exception noted from any executed notification,    * note the exception in this class    * @throws Exception exception.    */
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
comment|// propagate any failure
if|if
condition|(
name|getCallbackException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|getCallbackException
argument_list|()
throw|;
block|}
block|}
comment|/**    * Get the exception raised by a callback. Will always be null if the     * callback has not been executed; will only be non-null after any success.    * @return a callback    */
DECL|method|getCallbackException ()
specifier|public
name|Exception
name|getCallbackException
parameter_list|()
block|{
return|return
name|command
operator|.
name|getException
argument_list|()
return|;
block|}
block|}
end_class

end_unit

