begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.services.utility
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|utility
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|main
operator|.
name|LauncherExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|main
operator|.
name|RunService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|services
operator|.
name|workflow
operator|.
name|WorkflowCompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This is a workflow compositoe service which can be launched from the CLI  * ... catches the arguments and implements a stub runService operation.  */
end_comment

begin_class
DECL|class|LaunchedWorkflowCompositeService
specifier|public
class|class
name|LaunchedWorkflowCompositeService
extends|extends
name|WorkflowCompositeService
implements|implements
name|RunService
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LaunchedWorkflowCompositeService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|argv
specifier|private
name|String
index|[]
name|argv
decl_stmt|;
DECL|method|LaunchedWorkflowCompositeService (String name)
specifier|public
name|LaunchedWorkflowCompositeService
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|LaunchedWorkflowCompositeService (String name, Service... children)
specifier|public
name|LaunchedWorkflowCompositeService
parameter_list|(
name|String
name|name
parameter_list|,
name|Service
modifier|...
name|children
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
comment|/**    * Implementation of set-ness, groovy definition of true/false for a string    * @param s    * @return true iff the string is non-null and non-empty    */
DECL|method|isUnset (String s)
specifier|protected
specifier|static
name|boolean
name|isUnset
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
return|;
block|}
DECL|method|isSet (String s)
specifier|protected
specifier|static
name|boolean
name|isSet
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|s
argument_list|)
return|;
block|}
DECL|method|getArgv ()
specifier|protected
name|String
index|[]
name|getArgv
parameter_list|()
block|{
return|return
name|argv
return|;
block|}
comment|/**    * Pre-init argument binding    * @param config the initial configuration build up by the    * service launcher.    * @param args argument list list of arguments passed to the command line    * after any launcher-specific commands have been stripped.    * @return the configuration    * @throws Exception    */
annotation|@
name|Override
DECL|method|bindArgs (Configuration config, String... args)
specifier|public
name|Configuration
name|bindArgs
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|argv
operator|=
name|args
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Binding {} Arguments:"
argument_list|,
name|args
operator|.
name|length
argument_list|)
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|arg
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
annotation|@
name|Override
DECL|method|runService ()
specifier|public
name|int
name|runService
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|LauncherExitCodes
operator|.
name|EXIT_SUCCESS
return|;
block|}
annotation|@
name|Override
DECL|method|addService (Service service)
specifier|public
specifier|synchronized
name|void
name|addService
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|service
operator|!=
literal|null
argument_list|,
literal|"null service argument"
argument_list|)
expr_stmt|;
name|super
operator|.
name|addService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run a child service -initing and starting it if this    * service has already passed those parts of its own lifecycle    * @param service the service to start    */
DECL|method|deployChildService (Service service)
specifier|protected
name|boolean
name|deployChildService
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|service
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|service
argument_list|)
expr_stmt|;
if|if
condition|(
name|isInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|)
condition|)
block|{
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

