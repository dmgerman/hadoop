begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service.provider
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|defaultImpl
operator|.
name|DefaultProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|docker
operator|.
name|DockerProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|provider
operator|.
name|tarball
operator|.
name|TarballProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Base class for factories.  */
end_comment

begin_class
DECL|class|ProviderFactory
specifier|public
specifier|abstract
class|class
name|ProviderFactory
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProviderFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ProviderFactory ()
specifier|protected
name|ProviderFactory
parameter_list|()
block|{}
DECL|method|createClientProvider ()
specifier|public
specifier|abstract
name|AbstractClientProvider
name|createClientProvider
parameter_list|()
function_decl|;
DECL|method|createServerProvider ()
specifier|public
specifier|abstract
name|ProviderService
name|createServerProvider
parameter_list|()
function_decl|;
DECL|method|getProviderService (Artifact artifact)
specifier|public
specifier|static
specifier|synchronized
name|ProviderService
name|getProviderService
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|createSliderProviderFactory
argument_list|(
name|artifact
argument_list|)
operator|.
name|createServerProvider
argument_list|()
return|;
block|}
DECL|method|getClientProvider (Artifact artifact)
specifier|public
specifier|static
specifier|synchronized
name|AbstractClientProvider
name|getClientProvider
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|createSliderProviderFactory
argument_list|(
name|artifact
argument_list|)
operator|.
name|createClientProvider
argument_list|()
return|;
block|}
comment|/**    * Create a provider for a specific application    * @param artifact artifact    * @return provider factory    */
DECL|method|createSliderProviderFactory ( Artifact artifact)
specifier|public
specifier|static
specifier|synchronized
name|ProviderFactory
name|createSliderProviderFactory
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
if|if
condition|(
name|artifact
operator|==
literal|null
operator|||
name|artifact
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading service provider type default"
argument_list|)
expr_stmt|;
return|return
name|DefaultProviderFactory
operator|.
name|getInstance
argument_list|()
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading service provider type {}"
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|artifact
operator|.
name|getType
argument_list|()
condition|)
block|{
comment|// TODO add handling for custom types?
comment|// TODO handle application
case|case
name|DOCKER
case|:
return|return
name|DockerProviderFactory
operator|.
name|getInstance
argument_list|()
return|;
case|case
name|TARBALL
case|:
return|return
name|TarballProviderFactory
operator|.
name|getInstance
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Resolution error, "
operator|+
literal|"%s should not be passed to createSliderProviderFactory"
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

