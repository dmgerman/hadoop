begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.slider.server.appmaster.operations
package|package
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|server
operator|.
name|appmaster
operator|.
name|operations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|async
operator|.
name|AMRMClientAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Hands off RM operations to the Resource Manager.  */
end_comment

begin_class
DECL|class|AsyncRMOperationHandler
specifier|public
class|class
name|AsyncRMOperationHandler
extends|extends
name|RMOperationHandler
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AsyncRMOperationHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|AMRMClientAsync
name|client
decl_stmt|;
DECL|field|maxResources
specifier|private
specifier|final
name|Resource
name|maxResources
decl_stmt|;
DECL|method|AsyncRMOperationHandler (AMRMClientAsync client, Resource maxResources)
specifier|public
name|AsyncRMOperationHandler
parameter_list|(
name|AMRMClientAsync
name|client
parameter_list|,
name|Resource
name|maxResources
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|maxResources
operator|=
name|maxResources
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cancelContainerRequests (Priority priority1, Priority priority2, int count)
specifier|public
name|int
name|cancelContainerRequests
parameter_list|(
name|Priority
name|priority1
parameter_list|,
name|Priority
name|priority2
parameter_list|,
name|int
name|count
parameter_list|)
block|{
comment|// need to revoke a previously issued container request
comment|// so enum the sets and pick some
name|int
name|remaining
init|=
name|cancelSinglePriorityRequests
argument_list|(
name|priority1
argument_list|,
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|priority2
operator|!=
literal|null
condition|)
block|{
name|remaining
operator|=
name|cancelSinglePriorityRequests
argument_list|(
name|priority2
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
block|}
return|return
name|remaining
return|;
block|}
comment|/**    * Cancel just one of the priority levels    * @param priority priority to cancel    * @param count count to cancel    * @return number of requests cancelled    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|cancelSinglePriorityRequests (Priority priority, int count)
specifier|protected
name|int
name|cancelSinglePriorityRequests
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|List
argument_list|<
name|Collection
argument_list|<
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|>
argument_list|>
name|requestSets
init|=
name|client
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
literal|""
argument_list|,
name|maxResources
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|<=
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|remaining
init|=
name|count
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|>
name|requestSet
range|:
name|requestSets
control|)
block|{
if|if
condition|(
name|remaining
operator|==
literal|0
condition|)
block|{
break|break;
block|}
for|for
control|(
name|AMRMClient
operator|.
name|ContainerRequest
name|request
range|:
name|requestSet
control|)
block|{
if|if
condition|(
name|remaining
operator|==
literal|0
condition|)
block|{
break|break;
block|}
comment|// a single release
name|cancelSingleRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|remaining
operator|--
expr_stmt|;
block|}
block|}
return|return
name|remaining
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|cancelSingleRequest (AMRMClient.ContainerRequest request)
specifier|public
name|void
name|cancelSingleRequest
parameter_list|(
name|AMRMClient
operator|.
name|ContainerRequest
name|request
parameter_list|)
block|{
comment|// a single release
name|client
operator|.
name|removeContainerRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|releaseAssignedContainer (ContainerId containerId)
specifier|public
name|void
name|releaseAssignedContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Releasing container {}"
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|client
operator|.
name|releaseAssignedContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|addContainerRequest (AMRMClient.ContainerRequest req)
specifier|public
name|void
name|addContainerRequest
parameter_list|(
name|AMRMClient
operator|.
name|ContainerRequest
name|req
parameter_list|)
block|{
name|client
operator|.
name|addContainerRequest
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateBlacklist (List<String> blacklistAdditions, List<String> blacklistRemovals)
specifier|public
name|void
name|updateBlacklist
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|)
block|{
name|client
operator|.
name|updateBlacklist
argument_list|(
name|blacklistAdditions
argument_list|,
name|blacklistRemovals
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

